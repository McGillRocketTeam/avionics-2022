
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fab4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002338  0801fc68  0801fc68  0002fc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021fa0  08021fa0  000403cc  2**0
                  CONTENTS
  4 .ARM          00000008  08021fa0  08021fa0  00031fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021fa8  08021fa8  000403cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021fa8  08021fa8  00031fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021fb0  08021fb0  00031fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  08021fb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403cc  2**0
                  CONTENTS
 10 .bss          00008be8  200003cc  200003cc  000403cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008fb4  20008fb4  000403cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00075040  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aecb  00000000  00000000  000b543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041f8  00000000  00000000  000c0308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000389ed  00000000  00000000  000c4500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a88d  00000000  00000000  000fceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a44  00000000  00000000  0014777a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002611be  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec8  00000000  00000000  00261218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0001351c  00000000  00000000  002650e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801fc4c 	.word	0x0801fc4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d0 	.word	0x200003d0
 80001ec:	0801fc4c 	.word	0x0801fc4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f008 fa8c 	bl	8009554 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f008 fb69 	bl	8009748 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00d fbae 	bl	800e7fe <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f007 f9ce 	bl	8008450 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fc06 	bl	80078cc <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00d fb97 	bl	800e7fe <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00d fb8b 	bl	800e7fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00d fb83 	bl	800e7fe <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f01a fd9f 	bl	801bc48 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00d fb69 	bl	800e7fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00d fb61 	bl	800e7fe <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00d fb58 	bl	800e7fe <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fbca 	bl	80078ee <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f007 f977 	bl	8008450 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fbe6 	bl	800793a <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fa55 	bl	800762c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f006 f831 	bl	80071f0 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f006 f94d 	bl	8007434 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 ffff 	bl	80071a4 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f91b 	bl	80073e8 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00d fb1e 	bl	800e7fe <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005f08 	.word	0x20005f08
 80011e0:	0801fc68 	.word	0x0801fc68
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003f8 	.word	0x200003f8
 80011f0:	0801fc80 	.word	0x0801fc80
 80011f4:	0801fc98 	.word	0x0801fc98
 80011f8:	0801fca4 	.word	0x0801fca4
 80011fc:	0801fcb8 	.word	0x0801fcb8
 8001200:	0801fcc0 	.word	0x0801fcc0
 8001204:	0801fcd8 	.word	0x0801fcd8
 8001208:	200003f9 	.word	0x200003f9
 800120c:	0801fce0 	.word	0x0801fce0

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fa26 	bl	8007678 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f019 fc88 	bl	801ab4c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fad2 	bl	80077ea <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 ff5d 	bl	800710c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f005 ff50 	bl	800710c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f005 ff43 	bl	800710c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003e8 	.word	0x200003e8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 fa12 	bl	80076dc <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fa20 	bl	800770e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 ff49 	bl	800716c <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003f6 	.word	0x200003f6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f006 f9cf 	bl	80076aa <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f019 fc18 	bl	801ab4c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f006 fa17 	bl	8007754 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 ff05 	bl	800713c <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f005 fef8 	bl	800713c <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f005 feeb 	bl	800713c <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f0 	.word	0x200003f0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00d fa30 	bl	800e7fe <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f007 f850 	bl	8008450 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fe24 	bl	800700a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00d fa16 	bl	800e7fe <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00d fa0a 	bl	800e7fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00d fa02 	bl	800e7fe <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f01a fc1e 	bl	801bc48 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00d f9e9 	bl	800e7fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00d f9e1 	bl	800e7fe <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00d f9d8 	bl	800e7fe <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fde9 	bl	800702c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f006 fff7 	bl	8008450 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fe05 	bl	8007078 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fceb 	bl	8006e58 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fd0b 	bl	8006ea4 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00d f9b0 	bl	800e7fe <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005f08 	.word	0x20005f08
 80014bc:	0801fcf8 	.word	0x0801fcf8
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000402 	.word	0x20000402
 80014cc:	0801fc80 	.word	0x0801fc80
 80014d0:	0801fc98 	.word	0x0801fc98
 80014d4:	0801fca4 	.word	0x0801fca4
 80014d8:	0801fcb8 	.word	0x0801fcb8
 80014dc:	0801fcc0 	.word	0x0801fcc0
 80014e0:	0801fcd8 	.word	0x0801fcd8
 80014e4:	20000403 	.word	0x20000403
 80014e8:	0801fd10 	.word	0x0801fd10

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f005 fc46 	bl	8006d94 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fd27 	bl	8006f72 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fc63 	bl	8006df4 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003fc 	.word	0x200003fc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fcf0 	bl	8006f40 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fd27 	bl	8006fc4 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fc51 	bl	8006e24 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000400 	.word	0x20000400

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f007 ffc6 	bl	8009554 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f008 f8a3 	bl	8009748 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b099      	sub	sp, #100	; 0x64
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f006 fec5 	bl	80083cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f999 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd33 	bl	80020b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 fa01 	bl	8001a50 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa51 	bl	8001af4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa8f 	bl	8001b74 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 facd 	bl	8001bf4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fbb1 	bl	8001dc0 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbe5 	bl	8001e2c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fc19 	bl	8001e98 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc4d 	bl	8001f04 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fca3 	bl	8001fb4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fccb 	bl	8002008 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fcf3 	bl	800205c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fb17 	bl	8001ca8 <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 800167a:	f00f f815 	bl	80106a8 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4896      	ldr	r0, [pc, #600]	; (80018dc <main+0x2a4>)
 8001684:	f007 fdf0 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	4893      	ldr	r0, [pc, #588]	; (80018dc <main+0x2a4>)
 800168e:	f007 fdeb 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	4891      	ldr	r0, [pc, #580]	; (80018dc <main+0x2a4>)
 8001698:	f007 fde6 	bl	8009268 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	488f      	ldr	r0, [pc, #572]	; (80018e0 <main+0x2a8>)
 80016a4:	f007 fde0 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	488c      	ldr	r0, [pc, #560]	; (80018e0 <main+0x2a8>)
 80016b0:	f007 fdda 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4889      	ldr	r0, [pc, #548]	; (80018e0 <main+0x2a8>)
 80016bc:	f007 fdd4 	bl	8009268 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4886      	ldr	r0, [pc, #536]	; (80018e0 <main+0x2a8>)
 80016c6:	f007 fdcf 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	4884      	ldr	r0, [pc, #528]	; (80018e4 <main+0x2ac>)
 80016d2:	f007 fdc9 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4881      	ldr	r0, [pc, #516]	; (80018e4 <main+0x2ac>)
 80016de:	f007 fdc3 	bl	8009268 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4880      	ldr	r0, [pc, #512]	; (80018e8 <main+0x2b0>)
 80016e8:	f007 fdbe 	bl	8009268 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	487d      	ldr	r0, [pc, #500]	; (80018e8 <main+0x2b0>)
 80016f4:	f007 fdb8 	bl	8009268 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4878      	ldr	r0, [pc, #480]	; (80018e0 <main+0x2a8>)
 8001700:	f007 fdb2 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4878      	ldr	r0, [pc, #480]	; (80018ec <main+0x2b4>)
 800170a:	f007 fdad 	bl	8009268 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4876      	ldr	r0, [pc, #472]	; (80018ec <main+0x2b4>)
 8001714:	f007 fda8 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	4873      	ldr	r0, [pc, #460]	; (80018ec <main+0x2b4>)
 800171e:	f007 fda3 	bl	8009268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4871      	ldr	r0, [pc, #452]	; (80018ec <main+0x2b4>)
 8001728:	f007 fd9e 	bl	8009268 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	496f      	ldr	r1, [pc, #444]	; (80018f0 <main+0x2b8>)
 8001734:	486f      	ldr	r0, [pc, #444]	; (80018f4 <main+0x2bc>)
 8001736:	f00d f862 	bl	800e7fe <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e6e      	ldr	r6, [pc, #440]	; (80018f4 <main+0x2bc>)
 800173c:	2305      	movs	r3, #5
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
 8001740:	466d      	mov	r5, sp
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175e:	4866      	ldr	r0, [pc, #408]	; (80018f8 <main+0x2c0>)
 8001760:	f006 f990 	bl	8007a84 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001764:	4863      	ldr	r0, [pc, #396]	; (80018f4 <main+0x2bc>)
 8001766:	f002 f883 	bl	8003870 <MRT_externalFlashSetup>
	   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
	   *amount of resets?
	   *Solution : We use the external IN_Button has an external reset that resets the board from
	   *the beginning using the callback function (defined in MRT_Helpers.c)
	   */
	  MX_IWDG_Init();
 800176a:	f000 fa83 	bl	8001c74 <MX_IWDG_Init>
   * -(Optional) Use MCU APB1 freeze register to freeze the WD in StandByMode instead of resetting the FC
   * -(Optional) Setup alarm A and the clock time in .ioc (not recommend because random resets)
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <main+0x2c4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a63      	ldr	r2, [pc, #396]	; (8001900 <main+0x2c8>)
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a63      	ldr	r2, [pc, #396]	; (8001904 <main+0x2cc>)
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fb00 	bl	8007d80 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001780:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001784:	f006 fe64 	bl	8008450 <HAL_Delay>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 8001788:	2200      	movs	r2, #0
 800178a:	2102      	movs	r1, #2
 800178c:	2000      	movs	r0, #0
 800178e:	f006 faaf 	bl	8007cf0 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
    HAL_IWDG_Refresh(&hiwdg);
 8001792:	485d      	ldr	r0, [pc, #372]	; (8001908 <main+0x2d0>)
 8001794:	f008 fe4c 	bl	800a430 <HAL_IWDG_Refresh>
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	4852      	ldr	r0, [pc, #328]	; (80018e8 <main+0x2b0>)
 80017a0:	f007 fd62 	bl	8009268 <HAL_GPIO_WritePin>
    uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 80017a4:	4e53      	ldr	r6, [pc, #332]	; (80018f4 <main+0x2bc>)
 80017a6:	466d      	mov	r5, sp
 80017a8:	f106 0410 	add.w	r4, r6, #16
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017c0:	f004 fd4e 	bl	8006260 <MRT_Static_Iridium_Setup>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  HAL_IWDG_Refresh(&hiwdg);
 80017c8:	484f      	ldr	r0, [pc, #316]	; (8001908 <main+0x2d0>)
 80017ca:	f008 fe31 	bl	800a430 <HAL_IWDG_Refresh>
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ce:	4c4f      	ldr	r4, [pc, #316]	; (800190c <main+0x2d4>)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <main+0x2bc>)
 80017d4:	494e      	ldr	r1, [pc, #312]	; (8001910 <main+0x2d8>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc52 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017dc:	463b      	mov	r3, r7
 80017de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  HAL_IWDG_Refresh(&hiwdg);
 80017e6:	4848      	ldr	r0, [pc, #288]	; (8001908 <main+0x2d0>)
 80017e8:	f008 fe22 	bl	800a430 <HAL_IWDG_Refresh>
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017ec:	4c49      	ldr	r4, [pc, #292]	; (8001914 <main+0x2dc>)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <main+0x2bc>)
 80017f2:	4947      	ldr	r1, [pc, #284]	; (8001910 <main+0x2d8>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fdc1 	bl	800137c <MRT_LPS22HH_Setup>
 80017fa:	463b      	mov	r3, r7
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001804:	4840      	ldr	r0, [pc, #256]	; (8001908 <main+0x2d0>)
 8001806:	f008 fe13 	bl	800a430 <HAL_IWDG_Refresh>
  GPS_init(&GPS_UART, &DEBUG_UART);
 800180a:	493a      	ldr	r1, [pc, #232]	; (80018f4 <main+0x2bc>)
 800180c:	4842      	ldr	r0, [pc, #264]	; (8001918 <main+0x2e0>)
 800180e:	f001 fffb 	bl	8003808 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800181c:	f007 fd24 	bl	8009268 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001820:	4839      	ldr	r0, [pc, #228]	; (8001908 <main+0x2d0>)
 8001822:	f008 fe05 	bl	800a430 <HAL_IWDG_Refresh>
  set_hspi(SRADIO_SPI);
 8001826:	4c3d      	ldr	r4, [pc, #244]	; (800191c <main+0x2e4>)
 8001828:	4668      	mov	r0, sp
 800182a:	f104 0310 	add.w	r3, r4, #16
 800182e:	2248      	movs	r2, #72	; 0x48
 8001830:	4619      	mov	r1, r3
 8001832:	f019 f963 	bl	801aafc <memcpy>
 8001836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800183a:	f00e ff1d 	bl	8010678 <set_hspi>
  // SPI2_SX_CS_GPIO_Port
  set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	4837      	ldr	r0, [pc, #220]	; (8001920 <main+0x2e8>)
 8001844:	f00e fec0 	bl	80105c8 <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001848:	2108      	movs	r1, #8
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <main+0x2a8>)
 800184c:	f00e fed2 	bl	80105f4 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8001850:	2104      	movs	r1, #4
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <main+0x2a8>)
 8001854:	f00e fee4 	bl	8010620 <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001858:	2110      	movs	r1, #16
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <main+0x2a8>)
 800185c:	f00e fef6 	bl	801064c <set_DIO1_pin>

	/*
	* For the SD card
	*
	*/
    HAL_IWDG_Refresh(&hiwdg);
 8001860:	4829      	ldr	r0, [pc, #164]	; (8001908 <main+0x2d0>)
 8001862:	f008 fde5 	bl	800a430 <HAL_IWDG_Refresh>
    sd_init_dynamic_filename("FC", "", filename);
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <main+0x2ec>)
 8001868:	492f      	ldr	r1, [pc, #188]	; (8001928 <main+0x2f0>)
 800186a:	4830      	ldr	r0, [pc, #192]	; (800192c <main+0x2f4>)
 800186c:	f006 fb88 	bl	8007f80 <sd_init_dynamic_filename>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED (or find other way to completely reset the board)

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001870:	f013 ffb8 	bl	80157e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <main+0x2f8>)
 8001876:	2100      	movs	r1, #0
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <main+0x2fc>)
 800187a:	f013 fffd 	bl	8015878 <osThreadNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <main+0x300>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001884:	4a2d      	ldr	r2, [pc, #180]	; (800193c <main+0x304>)
 8001886:	2100      	movs	r1, #0
 8001888:	482d      	ldr	r0, [pc, #180]	; (8001940 <main+0x308>)
 800188a:	f013 fff5 	bl	8015878 <osThreadNew>
 800188e:	4603      	mov	r3, r0
 8001890:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <main+0x30c>)
 8001892:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001894:	4a2c      	ldr	r2, [pc, #176]	; (8001948 <main+0x310>)
 8001896:	2100      	movs	r1, #0
 8001898:	482c      	ldr	r0, [pc, #176]	; (800194c <main+0x314>)
 800189a:	f013 ffed 	bl	8015878 <osThreadNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <main+0x318>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <main+0x31c>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	482b      	ldr	r0, [pc, #172]	; (8001958 <main+0x320>)
 80018aa:	f013 ffe5 	bl	8015878 <osThreadNew>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a2a      	ldr	r2, [pc, #168]	; (800195c <main+0x324>)
 80018b2:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <main+0x328>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <main+0x32c>)
 80018ba:	f013 ffdd 	bl	8015878 <osThreadNew>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <main+0x330>)
 80018c2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <main+0x334>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4829      	ldr	r0, [pc, #164]	; (8001970 <main+0x338>)
 80018ca:	f013 ffd5 	bl	8015878 <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <main+0x33c>)
 80018d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d4:	f013 ffaa 	bl	801582c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <main+0x2a0>
 80018da:	bf00      	nop
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	0801fd6c 	.word	0x0801fd6c
 80018f4:	20005ec4 	.word	0x20005ec4
 80018f8:	20006920 	.word	0x20006920
 80018fc:	20000434 	.word	0x20000434
 8001900:	20000435 	.word	0x20000435
 8001904:	20000436 	.word	0x20000436
 8001908:	200062f8 	.word	0x200062f8
 800190c:	20006a60 	.word	0x20006a60
 8001910:	20005f0c 	.word	0x20005f0c
 8001914:	20006a50 	.word	0x20006a50
 8001918:	200069b8 	.word	0x200069b8
 800191c:	20005f60 	.word	0x20005f60
 8001920:	40020400 	.word	0x40020400
 8001924:	20006370 	.word	0x20006370
 8001928:	0801fd80 	.word	0x0801fd80
 800192c:	0801fd84 	.word	0x0801fd84
 8001930:	080218cc 	.word	0x080218cc
 8001934:	080023d5 	.word	0x080023d5
 8001938:	2000636c 	.word	0x2000636c
 800193c:	080218f0 	.word	0x080218f0
 8001940:	0800247d 	.word	0x0800247d
 8001944:	200069b0 	.word	0x200069b0
 8001948:	08021914 	.word	0x08021914
 800194c:	0800248d 	.word	0x0800248d
 8001950:	200069b4 	.word	0x200069b4
 8001954:	08021938 	.word	0x08021938
 8001958:	080024a9 	.word	0x080024a9
 800195c:	20006a4c 	.word	0x20006a4c
 8001960:	0802195c 	.word	0x0802195c
 8001964:	08002581 	.word	0x08002581
 8001968:	20006940 	.word	0x20006940
 800196c:	08021980 	.word	0x08021980
 8001970:	08002839 	.word	0x08002839
 8001974:	20006358 	.word	0x20006358

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f019 f8e0 	bl	801ab4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <SystemClock_Config+0xd0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <SystemClock_Config+0xd4>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemClock_Config+0xd4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d8:	2309      	movs	r3, #9
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f0:	2308      	movs	r3, #8
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019f4:	2348      	movs	r3, #72	; 0x48
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fee5 	bl	800b7d4 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a10:	f000 ffb6 	bl	8002980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00a f947 	bl	800bcc4 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a3c:	f000 ffa0 	bl	8002980 <Error_Handler>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <MX_ADC1_Init+0x9c>)
 8001a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a90:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <MX_ADC1_Init+0xa0>)
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aae:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001ab0:	f006 fcf2 	bl	8008498 <HAL_ADC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 ff61 	bl	8002980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001ad0:	f006 fec4 	bl	800885c <HAL_ADC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ada:	f000 ff51 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000676c 	.word	0x2000676c
 8001aec:	40012000 	.word	0x40012000
 8001af0:	0f000001 	.word	0x0f000001

08001af4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <MX_I2C1_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <MX_I2C1_Init+0x7c>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b32:	f007 fbcb 	bl	80092cc <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 ff20 	bl	8002980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b44:	f008 fbb7 	bl	800a2b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b4e:	f000 ff17 	bl	8002980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b56:	f008 fbea 	bl	800a32e <HAL_I2CEx_ConfigDigitalFilter>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b60:	f000 ff0e 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200062a4 	.word	0x200062a4
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	000186a0 	.word	0x000186a0

08001b74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <MX_I2C2_Init+0x78>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <MX_I2C2_Init+0x7c>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bb2:	f007 fb8b 	bl	80092cc <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 fee0 	bl	8002980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bc4:	f008 fb77 	bl	800a2b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bce:	f000 fed7 	bl	8002980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bd6:	f008 fbaa 	bl	800a32e <HAL_I2CEx_ConfigDigitalFilter>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 fece 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20006304 	.word	0x20006304
 8001bec:	40005800 	.word	0x40005800
 8001bf0:	000186a0 	.word	0x000186a0

08001bf4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_I2C3_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <MX_I2C3_Init+0x7c>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c32:	f007 fb4b 	bl	80092cc <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 fea0 	bl	8002980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c44:	f008 fb37 	bl	800a2b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c4e:	f000 fe97 	bl	8002980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c56:	f008 fb6a 	bl	800a32e <HAL_I2CEx_ConfigDigitalFilter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c60:	f000 fe8e 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20005f0c 	.word	0x20005f0c
 8001c6c:	40005c00 	.word	0x40005c00
 8001c70:	000186a0 	.word	0x000186a0

08001c74 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <MX_IWDG_Init+0x30>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c86:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c8a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c8e:	f008 fb8d 	bl	800a3ac <HAL_IWDG_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c98:	f000 fe72 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200062f8 	.word	0x200062f8
 8001ca4:	40003000 	.word	0x40003000

08001ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b090      	sub	sp, #64	; 0x40
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2228      	movs	r2, #40	; 0x28
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f018 ff3f 	bl	801ab4c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <MX_RTC_Init+0x114>)
 8001cd2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cdc:	227f      	movs	r2, #127	; 0x7f
 8001cde:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf8:	482f      	ldr	r0, [pc, #188]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cfa:	f00a fbcd 	bl	800c498 <HAL_RTC_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d04:	f000 fe3c 	bl	8002980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	2201      	movs	r2, #1
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4823      	ldr	r0, [pc, #140]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d2c:	f00a fc45 	bl	800c5ba <HAL_RTC_SetTime>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d36:	f000 fe23 	bl	8002980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d5c:	f00a fd48 	bl	800c7f0 <HAL_RTC_SetDate>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d66:	f000 fe0b 	bl	8002980 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_RTC_Init+0x110>)
 8001da2:	f00a fe1b 	bl	800c9dc <HAL_RTC_SetAlarm_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001dac:	f000 fde8 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20006920 	.word	0x20006920
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI2_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e12:	f00b f913 	bl	800d03c <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 fdb0 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20005f60 	.word	0x20005f60
 8001e28:	40003800 	.word	0x40003800

08001e2c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI4_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e7e:	f00b f8dd 	bl	800d03c <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 fd7a 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200068c4 	.word	0x200068c4
 8001e94:	40013400 	.word	0x40013400

08001e98 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_SPI5_Init+0x64>)
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <MX_SPI5_Init+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eea:	f00b f8a7 	bl	800d03c <HAL_SPI_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ef4:	f000 fd44 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005fbc 	.word	0x20005fbc
 8001f00:	40015000 	.word	0x40015000

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f50:	f00b fee6 	bl	800dd20 <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f000 fd11 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f6e:	f00c fb69 	bl	800e644 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f78:	f000 fd02 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f94:	f00c f81c 	bl	800dfd0 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f9e:	f000 fcef 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001fa4:	f000 ff42 	bl	8002e2c <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20006a04 	.word	0x20006a04

08001fb4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_UART8_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fec:	f00c fbba 	bl	800e764 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 fcc3 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20005ec4 	.word	0x20005ec4
 8002004:	40007c00 	.word	0x40007c00

08002008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_USART3_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002040:	f00c fb90 	bl	800e764 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 fc99 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20006014 	.word	0x20006014
 8002058:	40004800 	.word	0x40004800

0800205c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_USART6_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800206c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002094:	f00c fb66 	bl	800e764 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 fc6f 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200069b8 	.word	0x200069b8
 80020ac:	40011400 	.word	0x40011400

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	4bb5      	ldr	r3, [pc, #724]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4ab4      	ldr	r2, [pc, #720]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4bb2      	ldr	r3, [pc, #712]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	4bae      	ldr	r3, [pc, #696]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4aad      	ldr	r2, [pc, #692]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4bab      	ldr	r3, [pc, #684]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	4ba7      	ldr	r3, [pc, #668]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4aa6      	ldr	r2, [pc, #664]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4ba4      	ldr	r3, [pc, #656]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a9f      	ldr	r2, [pc, #636]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a98      	ldr	r2, [pc, #608]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b96      	ldr	r3, [pc, #600]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a91      	ldr	r2, [pc, #580]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a83      	ldr	r2, [pc, #524]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f248 4184 	movw	r1, #33924	; 0x8484
 80021ac:	487d      	ldr	r0, [pc, #500]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 80021ae:	f007 f85b 	bl	8009268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021b8:	487b      	ldr	r0, [pc, #492]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 80021ba:	f007 f855 	bl	8009268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021c4:	4879      	ldr	r0, [pc, #484]	; (80023ac <MX_GPIO_Init+0x2fc>)
 80021c6:	f007 f84f 	bl	8009268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2108      	movs	r1, #8
 80021ce:	4878      	ldr	r0, [pc, #480]	; (80023b0 <MX_GPIO_Init+0x300>)
 80021d0:	f007 f84a 	bl	8009268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021d4:	2200      	movs	r2, #0
 80021d6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021da:	4876      	ldr	r0, [pc, #472]	; (80023b4 <MX_GPIO_Init+0x304>)
 80021dc:	f007 f844 	bl	8009268 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e6:	4874      	ldr	r0, [pc, #464]	; (80023b8 <MX_GPIO_Init+0x308>)
 80021e8:	f007 f83e 	bl	8009268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021ec:	2200      	movs	r2, #0
 80021ee:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021f2:	4872      	ldr	r0, [pc, #456]	; (80023bc <MX_GPIO_Init+0x30c>)
 80021f4:	f007 f838 	bl	8009268 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021f8:	f248 4384 	movw	r3, #33924	; 0x8484
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	4864      	ldr	r0, [pc, #400]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 8002212:	f006 fe65 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002216:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	485e      	ldr	r0, [pc, #376]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 8002230:	f006 fe56 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002234:	2301      	movs	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002238:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	4858      	ldr	r0, [pc, #352]	; (80023ac <MX_GPIO_Init+0x2fc>)
 800224a:	f006 fe49 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800224e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4851      	ldr	r0, [pc, #324]	; (80023ac <MX_GPIO_Init+0x2fc>)
 8002268:	f006 fe3a 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800226c:	2308      	movs	r3, #8
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	484b      	ldr	r0, [pc, #300]	; (80023b0 <MX_GPIO_Init+0x300>)
 8002284:	f006 fe2c 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002288:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4843      	ldr	r0, [pc, #268]	; (80023ac <MX_GPIO_Init+0x2fc>)
 800229e:	f006 fe1f 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022a2:	2302      	movs	r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4840      	ldr	r0, [pc, #256]	; (80023b8 <MX_GPIO_Init+0x308>)
 80022b6:	f006 fe13 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4836      	ldr	r0, [pc, #216]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 80022d0:	f006 fe06 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80022d4:	f242 4319 	movw	r3, #9241	; 0x2419
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4832      	ldr	r0, [pc, #200]	; (80023b4 <MX_GPIO_Init+0x304>)
 80022ea:	f006 fdf9 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80022ee:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	482b      	ldr	r0, [pc, #172]	; (80023b4 <MX_GPIO_Init+0x304>)
 8002308:	f006 fdea 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 800230c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 8002322:	f006 fddd 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	481e      	ldr	r0, [pc, #120]	; (80023b8 <MX_GPIO_Init+0x308>)
 8002340:	f006 fdce 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002344:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	; (80023bc <MX_GPIO_Init+0x30c>)
 800235e:	f006 fdbf 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_GPIO_Init+0x30c>)
 8002378:	f006 fdb2 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 800237c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	4808      	ldr	r0, [pc, #32]	; (80023b4 <MX_GPIO_Init+0x304>)
 8002394:	f006 fda4 	bl	8008ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2105      	movs	r1, #5
 800239c:	2006      	movs	r0, #6
 800239e:	e00f      	b.n	80023c0 <MX_GPIO_Init+0x310>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	f006 fd56 	bl	8008e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023c4:	2006      	movs	r0, #6
 80023c6:	f006 fd6f 	bl	8008ea8 <HAL_NVIC_EnableIRQ>

}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	; 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af06      	add	r7, sp, #24
 80023dc:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023de:	f016 fd75 	bl	8018ecc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023e2:	f013 fadb 	bl	801599c <osThreadGetId>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <StartMemory0+0x84>)
 80023ea:	6013      	str	r3, [r2, #0]
	  for(;;)
	  {


		  //Write data to sd and flash
		  sd_open_file(&filename);
 80023ec:	481b      	ldr	r0, [pc, #108]	; (800245c <StartMemory0+0x88>)
 80023ee:	f005 fe45 	bl	800807c <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <StartMemory0+0x8c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8b6 	bl	8000568 <__aeabi_f2d>
 80023fc:	4682      	mov	sl, r0
 80023fe:	468b      	mov	fp, r1
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <StartMemory0+0x90>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8af 	bl	8000568 <__aeabi_f2d>
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <StartMemory0+0x94>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f8a8 	bl	8000568 <__aeabi_f2d>
 8002418:	4680      	mov	r8, r0
 800241a:	4689      	mov	r9, r1
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <StartMemory0+0x98>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8a1 	bl	8000568 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800242e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002432:	e9cd 4500 	strd	r4, r5, [sp]
 8002436:	4652      	mov	r2, sl
 8002438:	465b      	mov	r3, fp
 800243a:	490d      	ldr	r1, [pc, #52]	; (8002470 <StartMemory0+0x9c>)
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <StartMemory0+0xa0>)
 800243e:	f019 fc03 	bl	801bc48 <siprintf>
		  sd_write(&fil, writeBuf);
 8002442:	490c      	ldr	r1, [pc, #48]	; (8002474 <StartMemory0+0xa0>)
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <StartMemory0+0xa4>)
 8002446:	f005 fe31 	bl	80080ac <sd_write>
		  f_close(&fil);
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <StartMemory0+0xa4>)
 800244c:	f012 fd7a 	bl	8014f44 <f_close>

		  osDelay(1000/DATA_FREQ);
 8002450:	2064      	movs	r0, #100	; 0x64
 8002452:	f013 fab4 	bl	80159be <osDelay>
	  {
 8002456:	e7c9      	b.n	80023ec <StartMemory0+0x18>
 8002458:	2000605c 	.word	0x2000605c
 800245c:	20006370 	.word	0x20006370
 8002460:	20006360 	.word	0x20006360
 8002464:	20006ca4 	.word	0x20006ca4
 8002468:	20006368 	.word	0x20006368
 800246c:	20006ca0 	.word	0x20006ca0
 8002470:	0801fd88 	.word	0x0801fd88
 8002474:	20006384 	.word	0x20006384
 8002478:	20006a70 	.word	0x20006a70

0800247c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0c2      	sub	sp, #264	; 0x108
 8002480:	af00      	add	r7, sp, #0
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8002486:	f013 fa94 	bl	80159b2 <osThreadExit>
	...

0800248c <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8002494:	f013 fa82 	bl	801599c <osThreadGetId>
 8002498:	4603      	mov	r3, r0
 800249a:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <StartTelemetry2+0x18>)
 800249c:	6093      	str	r3, [r2, #8]

	osThreadExit();
 800249e:	f013 fa88 	bl	80159b2 <osThreadExit>
 80024a2:	bf00      	nop
 80024a4:	2000605c 	.word	0x2000605c

080024a8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	uint8_t counter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80024b4:	f013 fa72 	bl	801599c <osThreadGetId>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <StartSensors3+0xa0>)
 80024bc:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2102      	movs	r1, #2
 80024c2:	4822      	ldr	r0, [pc, #136]	; (800254c <StartSensors3+0xa4>)
 80024c4:	f006 fed0 	bl	8009268 <HAL_GPIO_WritePin>

	  if (counter == 10){
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d12b      	bne.n	8002526 <StartSensors3+0x7e>
		  counter=0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80024d2:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <StartSensors3+0xa8>)
 80024d4:	491f      	ldr	r1, [pc, #124]	; (8002554 <StartSensors3+0xac>)
 80024d6:	4820      	ldr	r0, [pc, #128]	; (8002558 <StartSensors3+0xb0>)
 80024d8:	f000 ff34 	bl	8003344 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <StartSensors3+0xb4>)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <StartSensors3+0xb8>)
 80024e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e2:	f7fe fe95 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <StartSensors3+0xb4>)
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <StartSensors3+0xbc>)
 80024ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ec:	f7fe ff00 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <StartSensors3+0xb4>)
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <StartSensors3+0xc0>)
 80024f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f6:	f7fe fed1 	bl	800129c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
	  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <StartSensors3+0xc4>)
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <StartSensors3+0xc8>)
 80024fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002500:	f7fe fff4 	bl	80014ec <MRT_LPS22HH_getPressure>
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <StartSensors3+0xc4>)
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <StartSensors3+0xcc>)
 8002508:	ca07      	ldmia	r2, {r0, r1, r2}
 800250a:	f7ff f81b 	bl	8001544 <MRT_LPS22HH_getTemperature>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <StartSensors3+0xc8>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	f001 fc3e 	bl	8003d98 <MRT_getAltitude>
 800251c:	eef0 7a40 	vmov.f32	s15, s0
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <StartSensors3+0xd0>)
 8002522:	edc3 7a00 	vstr	s15, [r3]

		  //TODO Pressure tank (just use an analog sensor if you don't have it)

	  }
	  counter++;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]

	  //TODO Poll propulsion sensors

	  //Thermocouple
	  Max31855_Read_Temp();
 800252c:	f005 fc70 	bl	8007e10 <Max31855_Read_Temp>

	  //Pressure tank
	  MRT_prop_poll_pressure_transducer(&hadc1);
 8002530:	4812      	ldr	r0, [pc, #72]	; (800257c <StartSensors3+0xd4>)
 8002532:	f001 fbed 	bl	8003d10 <MRT_prop_poll_pressure_transducer>


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	2102      	movs	r1, #2
 800253a:	4804      	ldr	r0, [pc, #16]	; (800254c <StartSensors3+0xa4>)
 800253c:	f006 fe94 	bl	8009268 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 8002540:	2032      	movs	r0, #50	; 0x32
 8002542:	f013 fa3c 	bl	80159be <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002546:	e7ba      	b.n	80024be <StartSensors3+0x16>
 8002548:	2000605c 	.word	0x2000605c
 800254c:	40020800 	.word	0x40020800
 8002550:	200069a8 	.word	0x200069a8
 8002554:	200067b4 	.word	0x200067b4
 8002558:	2000691c 	.word	0x2000691c
 800255c:	20006a60 	.word	0x20006a60
 8002560:	2000040c 	.word	0x2000040c
 8002564:	20000418 	.word	0x20000418
 8002568:	20000424 	.word	0x20000424
 800256c:	20006a50 	.word	0x20006a50
 8002570:	20000404 	.word	0x20000404
 8002574:	20000408 	.word	0x20000408
 8002578:	20000428 	.word	0x20000428
 800257c:	2000676c 	.word	0x2000676c

08002580 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002584:	b0c6      	sub	sp, #280	; 0x118
 8002586:	af04      	add	r7, sp, #16
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	6018      	str	r0, [r3, #0]
	char buffer[TX_BUF_DIM];

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800258c:	2201      	movs	r2, #1
 800258e:	2108      	movs	r1, #8
 8002590:	4897      	ldr	r0, [pc, #604]	; (80027f0 <StartPrinting+0x270>)
 8002592:	f006 fe69 	bl	8009268 <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 8002596:	2264      	movs	r2, #100	; 0x64
 8002598:	2100      	movs	r1, #0
 800259a:	4896      	ldr	r0, [pc, #600]	; (80027f4 <StartPrinting+0x274>)
 800259c:	f018 fad6 	bl	801ab4c <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",LATITUDE, LONGITUDE, time);
 80025a0:	4b95      	ldr	r3, [pc, #596]	; (80027f8 <StartPrinting+0x278>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ffdf 	bl	8000568 <__aeabi_f2d>
 80025aa:	4680      	mov	r8, r0
 80025ac:	4689      	mov	r9, r1
 80025ae:	4b93      	ldr	r3, [pc, #588]	; (80027fc <StartPrinting+0x27c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffd8 	bl	8000568 <__aeabi_f2d>
 80025b8:	4604      	mov	r4, r0
 80025ba:	460d      	mov	r5, r1
 80025bc:	4b90      	ldr	r3, [pc, #576]	; (8002800 <StartPrinting+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ffd1 	bl	8000568 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025ce:	e9cd 4500 	strd	r4, r5, [sp]
 80025d2:	4642      	mov	r2, r8
 80025d4:	464b      	mov	r3, r9
 80025d6:	498b      	ldr	r1, [pc, #556]	; (8002804 <StartPrinting+0x284>)
 80025d8:	4886      	ldr	r0, [pc, #536]	; (80027f4 <StartPrinting+0x274>)
 80025da:	f019 fb35 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80025de:	4885      	ldr	r0, [pc, #532]	; (80027f4 <StartPrinting+0x274>)
 80025e0:	f7fd fe06 	bl	80001f0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	4981      	ldr	r1, [pc, #516]	; (80027f4 <StartPrinting+0x274>)
 80025ee:	4886      	ldr	r0, [pc, #536]	; (8002808 <StartPrinting+0x288>)
 80025f0:	f00c f905 	bl	800e7fe <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f018 faa4 	bl	801ab4c <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <StartPrinting+0x28c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffad 	bl	8000568 <__aeabi_f2d>
 800260e:	4680      	mov	r8, r0
 8002610:	4689      	mov	r9, r1
 8002612:	4b7e      	ldr	r3, [pc, #504]	; (800280c <StartPrinting+0x28c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ffa6 	bl	8000568 <__aeabi_f2d>
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
 8002620:	4b7a      	ldr	r3, [pc, #488]	; (800280c <StartPrinting+0x28c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff9f 	bl	8000568 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	f107 0008 	add.w	r0, r7, #8
 8002632:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002636:	e9cd 4500 	strd	r4, r5, [sp]
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	4974      	ldr	r1, [pc, #464]	; (8002810 <StartPrinting+0x290>)
 8002640:	f019 fb02 	bl	801bc48 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd fdd1 	bl	80001f0 <strlen>
 800264e:	4603      	mov	r3, r0
 8002650:	b29a      	uxth	r2, r3
 8002652:	f107 0108 	add.w	r1, r7, #8
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	486b      	ldr	r0, [pc, #428]	; (8002808 <StartPrinting+0x288>)
 800265c:	f00c f8cf 	bl	800e7fe <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f018 fa6e 	bl	801ab4c <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <StartPrinting+0x294>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff77 	bl	8000568 <__aeabi_f2d>
 800267a:	4680      	mov	r8, r0
 800267c:	4689      	mov	r9, r1
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <StartPrinting+0x294>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff70 	bl	8000568 <__aeabi_f2d>
 8002688:	4604      	mov	r4, r0
 800268a:	460d      	mov	r5, r1
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <StartPrinting+0x294>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff69 	bl	8000568 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	f107 0008 	add.w	r0, r7, #8
 800269e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026a2:	e9cd 4500 	strd	r4, r5, [sp]
 80026a6:	4642      	mov	r2, r8
 80026a8:	464b      	mov	r3, r9
 80026aa:	495b      	ldr	r1, [pc, #364]	; (8002818 <StartPrinting+0x298>)
 80026ac:	f019 facc 	bl	801bc48 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026b0:	f107 0308 	add.w	r3, r7, #8
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fd9b 	bl	80001f0 <strlen>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f107 0108 	add.w	r1, r7, #8
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	4850      	ldr	r0, [pc, #320]	; (8002808 <StartPrinting+0x288>)
 80026c8:	f00c f899 	bl	800e7fe <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f018 fa38 	bl	801ab4c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <StartPrinting+0x29c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff41 	bl	8000568 <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	f107 0008 	add.w	r0, r7, #8
 80026ee:	494c      	ldr	r1, [pc, #304]	; (8002820 <StartPrinting+0x2a0>)
 80026f0:	f019 faaa 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fd79 	bl	80001f0 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	f107 0108 	add.w	r1, r7, #8
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	483f      	ldr	r0, [pc, #252]	; (8002808 <StartPrinting+0x288>)
 800270c:	f00c f877 	bl	800e7fe <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f018 fa16 	bl	801ab4c <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <StartPrinting+0x2a4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff1f 	bl	8000568 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	f107 0008 	add.w	r0, r7, #8
 8002732:	493d      	ldr	r1, [pc, #244]	; (8002828 <StartPrinting+0x2a8>)
 8002734:	f019 fa88 	bl	801bc48 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fd57 	bl	80001f0 <strlen>
 8002742:	4603      	mov	r3, r0
 8002744:	b29a      	uxth	r2, r3
 8002746:	f107 0108 	add.w	r1, r7, #8
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	482e      	ldr	r0, [pc, #184]	; (8002808 <StartPrinting+0x288>)
 8002750:	f00c f855 	bl	800e7fe <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f018 f9f4 	bl	801ab4c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <StartPrinting+0x2ac>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fefd 	bl	8000568 <__aeabi_f2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	f107 0008 	add.w	r0, r7, #8
 8002776:	492a      	ldr	r1, [pc, #168]	; (8002820 <StartPrinting+0x2a0>)
 8002778:	f019 fa66 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fd35 	bl	80001f0 <strlen>
 8002786:	4603      	mov	r3, r0
 8002788:	b29a      	uxth	r2, r3
 800278a:	f107 0108 	add.w	r1, r7, #8
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	481d      	ldr	r0, [pc, #116]	; (8002808 <StartPrinting+0x288>)
 8002794:	f00c f833 	bl	800e7fe <HAL_UART_Transmit>


	  //Thermocouple
	  memset(buffer, 0, TX_BUF_DIM);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f018 f9d2 	bl	801ab4c <memset>
	  sprintf(buffer, "Thermocouple temperature [degC]: %6.2f\r\n", THERMO_TEMP);
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <StartPrinting+0x2b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fedb 	bl	8000568 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	f107 0008 	add.w	r0, r7, #8
 80027ba:	491e      	ldr	r1, [pc, #120]	; (8002834 <StartPrinting+0x2b4>)
 80027bc:	f019 fa44 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fd13 	bl	80001f0 <strlen>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	f107 0108 	add.w	r1, r7, #8
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	480c      	ldr	r0, [pc, #48]	; (8002808 <StartPrinting+0x288>)
 80027d8:	f00c f811 	bl	800e7fe <HAL_UART_Transmit>


	  //Iridium
	  //MRT_Static_Iridium_getTime(); //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	2108      	movs	r1, #8
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <StartPrinting+0x270>)
 80027e2:	f006 fd41 	bl	8009268 <HAL_GPIO_WritePin>

	  osDelay(1000/SEND_FREQ);
 80027e6:	2032      	movs	r0, #50	; 0x32
 80027e8:	f013 f8e9 	bl	80159be <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80027ec:	e6ce      	b.n	800258c <StartPrinting+0xc>
 80027ee:	bf00      	nop
 80027f0:	40020800 	.word	0x40020800
 80027f4:	20006944 	.word	0x20006944
 80027f8:	2000691c 	.word	0x2000691c
 80027fc:	200067b4 	.word	0x200067b4
 8002800:	200069a8 	.word	0x200069a8
 8002804:	0801fda0 	.word	0x0801fda0
 8002808:	20005ec4 	.word	0x20005ec4
 800280c:	2000040c 	.word	0x2000040c
 8002810:	0801fdc8 	.word	0x0801fdc8
 8002814:	20000418 	.word	0x20000418
 8002818:	0801fdf0 	.word	0x0801fdf0
 800281c:	20000424 	.word	0x20000424
 8002820:	0801fe18 	.word	0x0801fe18
 8002824:	20000404 	.word	0x20000404
 8002828:	0801fe34 	.word	0x0801fe34
 800282c:	20000408 	.word	0x20000408
 8002830:	20006a00 	.word	0x20006a00
 8002834:	0801fe4c 	.word	0x0801fe4c

08002838 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b0c7      	sub	sp, #284	; 0x11c
 800283c:	af04      	add	r7, sp, #16
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002842:	2201      	movs	r2, #1
 8002844:	2104      	movs	r1, #4
 8002846:	4837      	ldr	r0, [pc, #220]	; (8002924 <StartWatchDog+0xec>)
 8002848:	f006 fd0e 	bl	8009268 <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 800284c:	4836      	ldr	r0, [pc, #216]	; (8002928 <StartWatchDog+0xf0>)
 800284e:	f007 fdef 	bl	800a430 <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002852:	2200      	movs	r2, #0
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <StartWatchDog+0xf4>)
 8002856:	4836      	ldr	r0, [pc, #216]	; (8002930 <StartWatchDog+0xf8>)
 8002858:	f009 ff6c 	bl	800c734 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800285c:	2200      	movs	r2, #0
 800285e:	4935      	ldr	r1, [pc, #212]	; (8002934 <StartWatchDog+0xfc>)
 8002860:	4833      	ldr	r0, [pc, #204]	; (8002930 <StartWatchDog+0xf8>)
 8002862:	f00a f86c 	bl	800c93e <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <StartWatchDog+0xf4>)
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <StartWatchDog+0x100>)
 800286c:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <StartWatchDog+0xf4>)
 8002870:	785a      	ldrb	r2, [r3, #1]
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <StartWatchDog+0x104>)
 8002874:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <StartWatchDog+0xf4>)
 8002878:	789a      	ldrb	r2, [r3, #2]
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <StartWatchDog+0x108>)
 800287c:	701a      	strb	r2, [r3, #0]

	  memset(buffer, 0, TX_BUF_DIM);
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f018 f95f 	bl	801ab4c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <StartWatchDog+0x100>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461d      	mov	r5, r3
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <StartWatchDog+0x104>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461e      	mov	r6, r3
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <StartWatchDog+0x108>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461c      	mov	r4, r3
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <StartWatchDog+0x10c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe5f 	bl	8000568 <__aeabi_f2d>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	f107 0008 	add.w	r0, r7, #8
 80028b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028b6:	9400      	str	r4, [sp, #0]
 80028b8:	4633      	mov	r3, r6
 80028ba:	462a      	mov	r2, r5
 80028bc:	4922      	ldr	r1, [pc, #136]	; (8002948 <StartWatchDog+0x110>)
 80028be:	f019 f9c3 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fc92 	bl	80001f0 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f107 0108 	add.w	r1, r7, #8
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	481c      	ldr	r0, [pc, #112]	; (800294c <StartWatchDog+0x114>)
 80028da:	f00b ff90 	bl	800e7fe <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80028de:	f001 fa03 	bl	8003ce8 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <StartWatchDog+0x118>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d111      	bne.n	800290e <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <StartWatchDog+0x11c>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <StartWatchDog+0x11c>)
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <StartWatchDog+0x120>)
 80028f6:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f001 fcf5 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028fe:	2303      	movs	r3, #3
 8002900:	2200      	movs	r2, #0
 8002902:	2101      	movs	r1, #1
 8002904:	4814      	ldr	r0, [pc, #80]	; (8002958 <StartWatchDog+0x120>)
 8002906:	f001 fe39 	bl	800457c <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 800290a:	f7fe fe7f 	bl	800160c <__NVIC_SystemReset>
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	2104      	movs	r1, #4
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <StartWatchDog+0xec>)
 8002914:	f006 fca8 	bl	8009268 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291c:	f013 f84f 	bl	80159be <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002920:	e78f      	b.n	8002842 <StartWatchDog+0xa>
 8002922:	bf00      	nop
 8002924:	40020800 	.word	0x40020800
 8002928:	200062f8 	.word	0x200062f8
 800292c:	20000668 	.word	0x20000668
 8002930:	20006920 	.word	0x20006920
 8002934:	2000067c 	.word	0x2000067c
 8002938:	20000434 	.word	0x20000434
 800293c:	20000435 	.word	0x20000435
 8002940:	20000436 	.word	0x20000436
 8002944:	20000428 	.word	0x20000428
 8002948:	0801fe78 	.word	0x0801fe78
 800294c:	20005ec4 	.word	0x20005ec4
 8002950:	200006a8 	.word	0x200006a8
 8002954:	20000433 	.word	0x20000433
 8002958:	20006058 	.word	0x20006058

0800295c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800296e:	f005 fd4f 	bl	8008410 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40001000 	.word	0x40001000

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_MspInit+0x54>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_MspInit+0x54>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_MspInit+0x54>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_MspInit+0x54>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_MspInit+0x54>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_MspInit+0x54>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	210f      	movs	r1, #15
 80029d2:	f06f 0001 	mvn.w	r0, #1
 80029d6:	f006 fa4b 	bl	8008e70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_ADC_MspInit+0x7c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d127      	bne.n	8002a5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_ADC_MspInit+0x80>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a46:	2303      	movs	r3, #3
 8002a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_ADC_MspInit+0x84>)
 8002a56:	f006 fa43 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40012000 	.word	0x40012000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5c      	ldr	r2, [pc, #368]	; (8002c00 <HAL_I2C_MspInit+0x190>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12d      	bne.n	8002aee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a5a      	ldr	r2, [pc, #360]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	484f      	ldr	r0, [pc, #316]	; (8002c08 <HAL_I2C_MspInit+0x198>)
 8002acc:	f006 fa08 	bl	8008ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002aec:	e083      	b.n	8002bf6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_I2C_MspInit+0x19c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d12d      	bne.n	8002b54 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b26:	2304      	movs	r3, #4
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4835      	ldr	r0, [pc, #212]	; (8002c08 <HAL_I2C_MspInit+0x198>)
 8002b32:	f006 f9d5 	bl	8008ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
}
 8002b52:	e050      	b.n	8002bf6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_I2C_MspInit+0x1a0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d14b      	bne.n	8002bf6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4818      	ldr	r0, [pc, #96]	; (8002c14 <HAL_I2C_MspInit+0x1a4>)
 8002bb4:	f006 f994 	bl	8008ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbe:	2312      	movs	r3, #18
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4810      	ldr	r0, [pc, #64]	; (8002c18 <HAL_I2C_MspInit+0x1a8>)
 8002bd6:	f006 f983 	bl	8008ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	3738      	adds	r7, #56	; 0x38
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40005800 	.word	0x40005800
 8002c10:	40005c00 	.word	0x40005c00
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020000 	.word	0x40020000

08002c1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	2230      	movs	r2, #48	; 0x30
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f017 ff8d 	bl	801ab4c <memset>
  if(hrtc->Instance==RTC)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_RTC_MspInit+0x5c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d119      	bne.n	8002c70 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f009 fa66 	bl	800c11c <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c56:	f7ff fe93 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RTC_MspInit+0x60>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2105      	movs	r1, #5
 8002c64:	2029      	movs	r0, #41	; 0x29
 8002c66:	f006 f903 	bl	8008e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c6a:	2029      	movs	r0, #41	; 0x29
 8002c6c:	f006 f91c 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3738      	adds	r7, #56	; 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40002800 	.word	0x40002800
 8002c7c:	42470e3c 	.word	0x42470e3c

08002c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <HAL_SPI_MspInit+0x150>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12d      	bne.n	8002cfe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cec:	2305      	movs	r3, #5
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4838      	ldr	r0, [pc, #224]	; (8002dd8 <HAL_SPI_MspInit+0x158>)
 8002cf8:	f006 f8f2 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002cfc:	e064      	b.n	8002dc8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <HAL_SPI_MspInit+0x15c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d12d      	bne.n	8002d64 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	4a30      	ldr	r2, [pc, #192]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d16:	6453      	str	r3, [r2, #68]	; 0x44
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d2e:	f043 0310 	orr.w	r3, r3, #16
 8002d32:	6313      	str	r3, [r2, #48]	; 0x30
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d40:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d52:	2305      	movs	r3, #5
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4820      	ldr	r0, [pc, #128]	; (8002de0 <HAL_SPI_MspInit+0x160>)
 8002d5e:	f006 f8bf 	bl	8008ee0 <HAL_GPIO_Init>
}
 8002d62:	e031      	b.n	8002dc8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_SPI_MspInit+0x164>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12c      	bne.n	8002dc8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_SPI_MspInit+0x154>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002da6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002db8:	2305      	movs	r3, #5
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4809      	ldr	r0, [pc, #36]	; (8002de8 <HAL_SPI_MspInit+0x168>)
 8002dc4:	f006 f88c 	bl	8008ee0 <HAL_GPIO_Init>
}
 8002dc8:	bf00      	nop
 8002dca:	3738      	adds	r7, #56	; 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40003800 	.word	0x40003800
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40013400 	.word	0x40013400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40015000 	.word	0x40015000
 8002de8:	40021400 	.word	0x40021400

08002dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d10d      	bne.n	8002e1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d11d      	bne.n	8002e8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_TIM_MspPostInit+0x68>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <HAL_TIM_MspPostInit+0x68>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_TIM_MspPostInit+0x68>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	4619      	mov	r1, r3
 8002e84:	4804      	ldr	r0, [pc, #16]	; (8002e98 <HAL_TIM_MspPostInit+0x6c>)
 8002e86:	f006 f82b 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000

08002e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	; (8002fe8 <HAL_UART_MspInit+0x14c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12c      	bne.n	8002f18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f02:	2303      	movs	r3, #3
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f06:	2308      	movs	r3, #8
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4837      	ldr	r0, [pc, #220]	; (8002ff0 <HAL_UART_MspInit+0x154>)
 8002f12:	f005 ffe5 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f16:	e063      	b.n	8002fe0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <HAL_UART_MspInit+0x158>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d12d      	bne.n	8002f7e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a30      	ldr	r2, [pc, #192]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	4619      	mov	r1, r3
 8002f76:	4820      	ldr	r0, [pc, #128]	; (8002ff8 <HAL_UART_MspInit+0x15c>)
 8002f78:	f005 ffb2 	bl	8008ee0 <HAL_GPIO_Init>
}
 8002f7c:	e030      	b.n	8002fe0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_UART_MspInit+0x160>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d12b      	bne.n	8002fe0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6453      	str	r3, [r2, #68]	; 0x44
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_UART_MspInit+0x150>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fc0:	23c0      	movs	r3, #192	; 0xc0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4809      	ldr	r0, [pc, #36]	; (8003000 <HAL_UART_MspInit+0x164>)
 8002fdc:	f005 ff80 	bl	8008ee0 <HAL_GPIO_Init>
}
 8002fe0:	bf00      	nop
 8002fe2:	3738      	adds	r7, #56	; 0x38
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40007c00 	.word	0x40007c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	40011400 	.word	0x40011400
 8003000:	40020800 	.word	0x40020800

08003004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003014:	2200      	movs	r2, #0
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	2036      	movs	r0, #54	; 0x36
 800301a:	f005 ff29 	bl	8008e70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800301e:	2036      	movs	r0, #54	; 0x36
 8003020:	f005 ff42 	bl	8008ea8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_InitTick+0xa4>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_InitTick+0xa4>)
 800302e:	f043 0310 	orr.w	r3, r3, #16
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_InitTick+0xa4>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003040:	f107 0210 	add.w	r2, r7, #16
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f009 f834 	bl	800c0b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003050:	f009 f80a 	bl	800c068 <HAL_RCC_GetPCLK1Freq>
 8003054:	4603      	mov	r3, r0
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_InitTick+0xa8>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	3b01      	subs	r3, #1
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_InitTick+0xac>)
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <HAL_InitTick+0xb0>)
 800306c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_InitTick+0xac>)
 8003070:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003074:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003076:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <HAL_InitTick+0xac>)
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_InitTick+0xac>)
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_InitTick+0xac>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <HAL_InitTick+0xac>)
 800308a:	f00a fd7f 	bl	800db8c <HAL_TIM_Base_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <HAL_InitTick+0xac>)
 8003096:	f00a fdd3 	bl	800dc40 <HAL_TIM_Base_Start_IT>
 800309a:	4603      	mov	r3, r0
 800309c:	e000      	b.n	80030a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3730      	adds	r7, #48	; 0x30
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	431bde83 	.word	0x431bde83
 80030b0:	20006ca8 	.word	0x20006ca8
 80030b4:	40001000 	.word	0x40001000

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <HardFault_Handler+0x4>

080030cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <MemManage_Handler+0x4>

080030d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <BusFault_Handler+0x4>

080030d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <UsageFault_Handler+0x4>

080030de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f006 f8d3 	bl	800929c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <RTC_Alarm_IRQHandler+0x10>)
 8003102:	f009 fda3 	bl	800cc4c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20006920 	.word	0x20006920

08003110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <TIM6_DAC_IRQHandler+0x10>)
 8003116:	f00a fe52 	bl	800ddbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20006ca8 	.word	0x20006ca8

08003124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <OTG_FS_IRQHandler+0x10>)
 800312a:	f007 fae1 	bl	800a6f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20008b9c 	.word	0x20008b9c

08003138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_kill>:

int _kill(int pid, int sig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003152:	f017 fba7 	bl	801a8a4 <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2216      	movs	r2, #22
 800315a:	601a      	str	r2, [r3, #0]
	return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_exit>:

void _exit (int status)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffe7 	bl	8003148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800317a:	e7fe      	b.n	800317a <_exit+0x12>

0800317c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e00a      	b.n	80031a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800318e:	f3af 8000 	nop.w
 8003192:	4601      	mov	r1, r0
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	60ba      	str	r2, [r7, #8]
 800319a:	b2ca      	uxtb	r2, r1
 800319c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dbf0      	blt.n	800318e <_read+0x12>
	}

return len;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e009      	b.n	80031dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	60ba      	str	r2, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3301      	adds	r3, #1
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	dbf1      	blt.n	80031c8 <_write+0x12>
	}
	return len;
 80031e4:	687b      	ldr	r3, [r7, #4]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_close>:

int _close(int file)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
	return -1;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003216:	605a      	str	r2, [r3, #4]
	return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_isatty>:

int _isatty(int file)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
	return 1;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <_sbrk+0x5c>)
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <_sbrk+0x60>)
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <_sbrk+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <_sbrk+0x64>)
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <_sbrk+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	429a      	cmp	r2, r3
 8003286:	d207      	bcs.n	8003298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003288:	f017 fb0c 	bl	801a8a4 <__errno>
 800328c:	4603      	mov	r3, r0
 800328e:	220c      	movs	r2, #12
 8003290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e009      	b.n	80032ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <_sbrk+0x64>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <_sbrk+0x64>)
 80032a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20030000 	.word	0x20030000
 80032b8:	00000400 	.word	0x00000400
 80032bc:	2000042c 	.word	0x2000042c
 80032c0:	20008fb8 	.word	0x20008fb8

080032c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <SystemInit+0x28>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <SystemInit+0x28>)
 80032d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <SystemInit+0x28>)
 80032da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032de:	609a      	str	r2, [r3, #8]
#endif
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032f6:	e003      	b.n	8003300 <LoopCopyDataInit>

080032f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032fe:	3104      	adds	r1, #4

08003300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003308:	d3f6      	bcc.n	80032f8 <CopyDataInit>
  ldr  r2, =_sbss
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800330c:	e002      	b.n	8003314 <LoopFillZerobss>

0800330e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800330e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003310:	f842 3b04 	str.w	r3, [r2], #4

08003314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003318:	d3f9      	bcc.n	800330e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800331a:	f7ff ffd3 	bl	80032c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800331e:	f017 fbbd 	bl	801aa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003322:	f7fe f989 	bl	8001638 <main>
  bx  lr    
 8003326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003328:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800332c:	08021fb4 	.word	0x08021fb4
  ldr  r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003334:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003338:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 800333c:	20008fb4 	.word	0x20008fb4

08003340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC_IRQHandler>
	...

08003344 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	; 0x30
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003350:	2364      	movs	r3, #100	; 0x64
 8003352:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800335c:	e073      	b.n	8003446 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <GPS_Poll+0x118>)
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	2364      	movs	r3, #100	; 0x64
 8003364:	2201      	movs	r2, #1
 8003366:	493e      	ldr	r1, [pc, #248]	; (8003460 <GPS_Poll+0x11c>)
 8003368:	f00b fadb 	bl	800e922 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 800336c:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <GPS_Poll+0x11c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d00f      	beq.n	8003394 <GPS_Poll+0x50>
 8003374:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <GPS_Poll+0x120>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b63      	cmp	r3, #99	; 0x63
 800337a:	d80b      	bhi.n	8003394 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <GPS_Poll+0x120>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	b2d1      	uxtb	r1, r2
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <GPS_Poll+0x120>)
 8003386:	7011      	strb	r1, [r2, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b35      	ldr	r3, [pc, #212]	; (8003460 <GPS_Poll+0x11c>)
 800338c:	7819      	ldrb	r1, [r3, #0]
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <GPS_Poll+0x124>)
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	e021      	b.n	80033d8 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003394:	4834      	ldr	r0, [pc, #208]	; (8003468 <GPS_Poll+0x124>)
 8003396:	f000 f86b 	bl	8003470 <GPS_validate>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80033a0:	4831      	ldr	r0, [pc, #196]	; (8003468 <GPS_Poll+0x124>)
 80033a2:	f000 f8c7 	bl	8003534 <GPS_parse>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033ac:	4b2f      	ldr	r3, [pc, #188]	; (800346c <GPS_Poll+0x128>)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <GPS_Poll+0x128>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <GPS_Poll+0x128>)
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
					done = 1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <GPS_Poll+0x120>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033ce:	2264      	movs	r2, #100	; 0x64
 80033d0:	2100      	movs	r1, #0
 80033d2:	4825      	ldr	r0, [pc, #148]	; (8003468 <GPS_Poll+0x124>)
 80033d4:	f017 fbba 	bl	801ab4c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <GPS_Poll+0x118>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <GPS_Poll+0x118>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <GPS_Poll+0x118>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <GPS_Poll+0x118>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <GPS_Poll+0x118>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <GPS_Poll+0x118>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <GPS_Poll+0x118>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <GPS_Poll+0x118>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003440:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003442:	3301      	adds	r3, #1
 8003444:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800344a:	429a      	cmp	r2, r3
 800344c:	d202      	bcs.n	8003454 <GPS_Poll+0x110>
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d084      	beq.n	800335e <GPS_Poll+0x1a>
	}
}
 8003454:	bf00      	nop
 8003456:	3730      	adds	r7, #48	; 0x30
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20005fb8 	.word	0x20005fb8
 8003460:	20000430 	.word	0x20000430
 8003464:	20000431 	.word	0x20000431
 8003468:	20006d48 	.word	0x20006d48
 800346c:	20006cf0 	.word	0x20006cf0

08003470 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b24      	cmp	r3, #36	; 0x24
 800348a:	d103      	bne.n	8003494 <GPS_validate+0x24>
        i++;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3301      	adds	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003492:	e00c      	b.n	80034ae <GPS_validate+0x3e>
        return 0;
 8003494:	2300      	movs	r3, #0
 8003496:	e047      	b.n	8003528 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4053      	eors	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        i++;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <GPS_validate+0x5c>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b2a      	cmp	r3, #42	; 0x2a
 80034c4:	d002      	beq.n	80034cc <GPS_validate+0x5c>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b4a      	cmp	r3, #74	; 0x4a
 80034ca:	dde5      	ble.n	8003498 <GPS_validate+0x28>
    }

    if(i >= 75){
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b4a      	cmp	r3, #74	; 0x4a
 80034d0:	dd01      	ble.n	80034d6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034d2:	2300      	movs	r3, #0
 80034d4:	e028      	b.n	8003528 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b2a      	cmp	r3, #42	; 0x2a
 80034e0:	d119      	bne.n	8003516 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3302      	adds	r3, #2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80034fe:	f107 0308 	add.w	r3, r7, #8
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	490a      	ldr	r1, [pc, #40]	; (8003530 <GPS_validate+0xc0>)
 8003506:	4618      	mov	r0, r3
 8003508:	f018 fb9e 	bl	801bc48 <siprintf>
    return((checkcalcstr[0] == check[0])
 800350c:	7a3a      	ldrb	r2, [r7, #8]
 800350e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003510:	429a      	cmp	r2, r3
 8003512:	d108      	bne.n	8003526 <GPS_validate+0xb6>
 8003514:	e001      	b.n	800351a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003516:	2300      	movs	r3, #0
 8003518:	e006      	b.n	8003528 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800351a:	7a7a      	ldrb	r2, [r7, #9]
 800351c:	7b7b      	ldrb	r3, [r7, #13]
 800351e:	429a      	cmp	r2, r3
 8003520:	d101      	bne.n	8003526 <GPS_validate+0xb6>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <GPS_validate+0xb8>
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	0801fe98 	.word	0x0801fe98

08003534 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af08      	add	r7, sp, #32
 800353a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 800353c:	2206      	movs	r2, #6
 800353e:	496d      	ldr	r1, [pc, #436]	; (80036f4 <GPS_parse+0x1c0>)
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f018 fc1a 	bl	801bd7a <strncmp>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d139      	bne.n	80035c0 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <GPS_parse+0x1c4>)
 800354e:	9307      	str	r3, [sp, #28]
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <GPS_parse+0x1c8>)
 8003552:	9306      	str	r3, [sp, #24]
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <GPS_parse+0x1cc>)
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <GPS_parse+0x1d0>)
 800355a:	9304      	str	r3, [sp, #16]
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <GPS_parse+0x1d4>)
 800355e:	9303      	str	r3, [sp, #12]
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <GPS_parse+0x1d8>)
 8003562:	9302      	str	r3, [sp, #8]
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <GPS_parse+0x1dc>)
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <GPS_parse+0x1e0>)
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <GPS_parse+0x1e4>)
 800356e:	4a6b      	ldr	r2, [pc, #428]	; (800371c <GPS_parse+0x1e8>)
 8003570:	496b      	ldr	r1, [pc, #428]	; (8003720 <GPS_parse+0x1ec>)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f018 fb88 	bl	801bc88 <siscanf>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f340 80b5 	ble.w	80036ea <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003580:	4b68      	ldr	r3, [pc, #416]	; (8003724 <GPS_parse+0x1f0>)
 8003582:	edd3 7a04 	vldr	s15, [r3, #16]
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <GPS_parse+0x1f0>)
 8003588:	7e1b      	ldrb	r3, [r3, #24]
 800358a:	4618      	mov	r0, r3
 800358c:	eeb0 0a67 	vmov.f32	s0, s15
 8003590:	f000 f8ec 	bl	800376c <GPS_nmea_to_dec>
 8003594:	eef0 7a40 	vmov.f32	s15, s0
 8003598:	4b62      	ldr	r3, [pc, #392]	; (8003724 <GPS_parse+0x1f0>)
 800359a:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800359e:	4b61      	ldr	r3, [pc, #388]	; (8003724 <GPS_parse+0x1f0>)
 80035a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035a4:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <GPS_parse+0x1f0>)
 80035a6:	7e5b      	ldrb	r3, [r3, #25]
 80035a8:	4618      	mov	r0, r3
 80035aa:	eeb0 0a67 	vmov.f32	s0, s15
 80035ae:	f000 f8dd 	bl	800376c <GPS_nmea_to_dec>
 80035b2:	eef0 7a40 	vmov.f32	s15, s0
 80035b6:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <GPS_parse+0x1f0>)
 80035b8:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	e095      	b.n	80036ec <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035c0:	2206      	movs	r2, #6
 80035c2:	4959      	ldr	r1, [pc, #356]	; (8003728 <GPS_parse+0x1f4>)
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f018 fbd8 	bl	801bd7a <strncmp>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d134      	bne.n	800363a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035d0:	4b56      	ldr	r3, [pc, #344]	; (800372c <GPS_parse+0x1f8>)
 80035d2:	9305      	str	r3, [sp, #20]
 80035d4:	4b56      	ldr	r3, [pc, #344]	; (8003730 <GPS_parse+0x1fc>)
 80035d6:	9304      	str	r3, [sp, #16]
 80035d8:	4b56      	ldr	r3, [pc, #344]	; (8003734 <GPS_parse+0x200>)
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <GPS_parse+0x1d8>)
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <GPS_parse+0x1dc>)
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <GPS_parse+0x1e0>)
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <GPS_parse+0x1e4>)
 80035ea:	4a4c      	ldr	r2, [pc, #304]	; (800371c <GPS_parse+0x1e8>)
 80035ec:	4952      	ldr	r1, [pc, #328]	; (8003738 <GPS_parse+0x204>)
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f018 fb4a 	bl	801bc88 <siscanf>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dd77      	ble.n	80036ea <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <GPS_parse+0x1f0>)
 80035fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <GPS_parse+0x1f0>)
 8003602:	7e1b      	ldrb	r3, [r3, #24]
 8003604:	4618      	mov	r0, r3
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	f000 f8af 	bl	800376c <GPS_nmea_to_dec>
 800360e:	eef0 7a40 	vmov.f32	s15, s0
 8003612:	4b44      	ldr	r3, [pc, #272]	; (8003724 <GPS_parse+0x1f0>)
 8003614:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <GPS_parse+0x1f0>)
 800361a:	edd3 7a03 	vldr	s15, [r3, #12]
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <GPS_parse+0x1f0>)
 8003620:	7e5b      	ldrb	r3, [r3, #25]
 8003622:	4618      	mov	r0, r3
 8003624:	eeb0 0a67 	vmov.f32	s0, s15
 8003628:	f000 f8a0 	bl	800376c <GPS_nmea_to_dec>
 800362c:	eef0 7a40 	vmov.f32	s15, s0
 8003630:	4b3c      	ldr	r3, [pc, #240]	; (8003724 <GPS_parse+0x1f0>)
 8003632:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003636:	2301      	movs	r3, #1
 8003638:	e058      	b.n	80036ec <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800363a:	2206      	movs	r2, #6
 800363c:	493f      	ldr	r1, [pc, #252]	; (800373c <GPS_parse+0x208>)
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f018 fb9b 	bl	801bd7a <strncmp>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d130      	bne.n	80036ac <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <GPS_parse+0x20c>)
 800364c:	9303      	str	r3, [sp, #12]
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <GPS_parse+0x1e8>)
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <GPS_parse+0x1d8>)
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <GPS_parse+0x1dc>)
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <GPS_parse+0x1e0>)
 800365c:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <GPS_parse+0x1e4>)
 800365e:	4939      	ldr	r1, [pc, #228]	; (8003744 <GPS_parse+0x210>)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f018 fb11 	bl	801bc88 <siscanf>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	dd3e      	ble.n	80036ea <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <GPS_parse+0x1f0>)
 800366e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003672:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <GPS_parse+0x1f0>)
 8003674:	7e1b      	ldrb	r3, [r3, #24]
 8003676:	4618      	mov	r0, r3
 8003678:	eeb0 0a67 	vmov.f32	s0, s15
 800367c:	f000 f876 	bl	800376c <GPS_nmea_to_dec>
 8003680:	eef0 7a40 	vmov.f32	s15, s0
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <GPS_parse+0x1f0>)
 8003686:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <GPS_parse+0x1f0>)
 800368c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003690:	4b24      	ldr	r3, [pc, #144]	; (8003724 <GPS_parse+0x1f0>)
 8003692:	7e5b      	ldrb	r3, [r3, #25]
 8003694:	4618      	mov	r0, r3
 8003696:	eeb0 0a67 	vmov.f32	s0, s15
 800369a:	f000 f867 	bl	800376c <GPS_nmea_to_dec>
 800369e:	eef0 7a40 	vmov.f32	s15, s0
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <GPS_parse+0x1f0>)
 80036a4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01f      	b.n	80036ec <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036ac:	2206      	movs	r2, #6
 80036ae:	4926      	ldr	r1, [pc, #152]	; (8003748 <GPS_parse+0x214>)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f018 fb62 	bl	801bd7a <strncmp>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <GPS_parse+0x218>)
 80036be:	9305      	str	r3, [sp, #20]
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <GPS_parse+0x21c>)
 80036c2:	9304      	str	r3, [sp, #16]
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <GPS_parse+0x220>)
 80036c6:	9303      	str	r3, [sp, #12]
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <GPS_parse+0x200>)
 80036ca:	9302      	str	r3, [sp, #8]
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <GPS_parse+0x224>)
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <GPS_parse+0x228>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <GPS_parse+0x22c>)
 80036d6:	4a23      	ldr	r2, [pc, #140]	; (8003764 <GPS_parse+0x230>)
 80036d8:	4923      	ldr	r1, [pc, #140]	; (8003768 <GPS_parse+0x234>)
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f018 fad4 	bl	801bc88 <siscanf>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dd01      	ble.n	80036ea <GPS_parse+0x1b6>
            return 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <GPS_parse+0x1b8>
    }
    return 0;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	0801fea0 	.word	0x0801fea0
 80036f8:	20006d1c 	.word	0x20006d1c
 80036fc:	20006d18 	.word	0x20006d18
 8003700:	20006d14 	.word	0x20006d14
 8003704:	20006d10 	.word	0x20006d10
 8003708:	20006d0c 	.word	0x20006d0c
 800370c:	20006d09 	.word	0x20006d09
 8003710:	20006cfc 	.word	0x20006cfc
 8003714:	20006d08 	.word	0x20006d08
 8003718:	20006d00 	.word	0x20006d00
 800371c:	20006d04 	.word	0x20006d04
 8003720:	0801fea8 	.word	0x0801fea8
 8003724:	20006cf0 	.word	0x20006cf0
 8003728:	0801fed0 	.word	0x0801fed0
 800372c:	20006d28 	.word	0x20006d28
 8003730:	20006d24 	.word	0x20006d24
 8003734:	20006d20 	.word	0x20006d20
 8003738:	0801fed8 	.word	0x0801fed8
 800373c:	0801fef8 	.word	0x0801fef8
 8003740:	20006d2c 	.word	0x20006d2c
 8003744:	0801ff00 	.word	0x0801ff00
 8003748:	0801ff1c 	.word	0x0801ff1c
 800374c:	20006d44 	.word	0x20006d44
 8003750:	20006d40 	.word	0x20006d40
 8003754:	20006d3d 	.word	0x20006d3d
 8003758:	20006d3c 	.word	0x20006d3c
 800375c:	20006d38 	.word	0x20006d38
 8003760:	20006d34 	.word	0x20006d34
 8003764:	20006d30 	.word	0x20006d30
 8003768:	0801ff24 	.word	0x0801ff24

0800376c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
 8003776:	4603      	mov	r3, r0
 8003778:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800377a:	ed97 7a01 	vldr	s14, [r7, #4]
 800377e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003800 <GPS_nmea_to_dec+0x94>
 8003782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800378a:	ee17 3a90 	vmov	r3, s15
 800378e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2264      	movs	r2, #100	; 0x64
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80037a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80037b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003804 <GPS_nmea_to_dec+0x98>
 80037b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b8:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80037ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ce:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	2b53      	cmp	r3, #83	; 0x53
 80037d6:	d002      	beq.n	80037de <GPS_nmea_to_dec+0x72>
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	2b57      	cmp	r3, #87	; 0x57
 80037dc:	d105      	bne.n	80037ea <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037de:	edd7 7a05 	vldr	s15, [r7, #20]
 80037e2:	eef1 7a67 	vneg.f32	s15, s15
 80037e6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	ee07 3a90 	vmov	s15, r3
}
 80037f0:	eeb0 0a67 	vmov.f32	s0, s15
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	42c80000 	.word	0x42c80000
 8003804:	42700000 	.word	0x42700000

08003808 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <GPS_init+0x30>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <GPS_init+0x34>)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <GPS_init+0x34>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	2210      	movs	r2, #16
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <GPS_init+0x38>)
 800382a:	f00a ffe8 	bl	800e7fe <HAL_UART_Transmit>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20005fb8 	.word	0x20005fb8
 800383c:	20006dac 	.word	0x20006dac
 8003840:	0801ff44 	.word	0x0801ff44

08003844 <__NVIC_SystemReset>:
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003848:	f3bf 8f4f 	dsb	sy
}
 800384c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <__NVIC_SystemReset+0x24>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003856:	4904      	ldr	r1, [pc, #16]	; (8003868 <__NVIC_SystemReset+0x24>)
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <__NVIC_SystemReset+0x28>)
 800385a:	4313      	orrs	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800385e:	f3bf 8f4f 	dsb	sy
}
 8003862:	bf00      	nop
    __NOP();
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <__NVIC_SystemReset+0x20>
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	05fa0004 	.word	0x05fa0004

08003870 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e007      	b.n	800388e <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800387e:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <MRT_externalFlashSetup+0x50>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	ddf4      	ble.n	800387e <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003894:	f000 fbd6 	bl	8004044 <W25qxx_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80038a4:	f7ff f86c 	bl	8002980 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038a8:	f004 f91a 	bl	8007ae0 <MRT_WUProcedure>
	MRT_getFlags();
 80038ac:	f000 f86c 	bl	8003988 <MRT_getFlags>
	MRT_resetInfo(uart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f94f 	bl	8003b54 <MRT_resetInfo>
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20006db0 	.word	0x20006db0

080038c4 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038d4:	f000 f804 	bl	80038e0 <MRT_resetFromStart>
	}

}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f000 fcff 	bl	80042e8 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038ea:	2303      	movs	r3, #3
 80038ec:	2200      	movs	r2, #0
 80038ee:	2101      	movs	r1, #1
 80038f0:	4807      	ldr	r0, [pc, #28]	; (8003910 <MRT_resetFromStart+0x30>)
 80038f2:	f000 fe43 	bl	800457c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 80038f6:	2002      	movs	r0, #2
 80038f8:	f000 fcf6 	bl	80042e8 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 80038fc:	2303      	movs	r3, #3
 80038fe:	2200      	movs	r2, #0
 8003900:	2102      	movs	r1, #2
 8003902:	4804      	ldr	r0, [pc, #16]	; (8003914 <MRT_resetFromStart+0x34>)
 8003904:	f000 fe3a 	bl	800457c <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003908:	f002 fcd4 	bl	80062b4 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 800390c:	f7ff ff9a 	bl	8003844 <__NVIC_SystemReset>
 8003910:	20006db0 	.word	0x20006db0
 8003914:	20000438 	.word	0x20000438

08003918 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	e00c      	b.n	800393e <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <MRT_updateExternalFlashBuffers+0x60>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	7819      	ldrb	r1, [r3, #0]
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <MRT_updateExternalFlashBuffers+0x64>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	460a      	mov	r2, r1
 8003936:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3301      	adds	r3, #1
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b02      	cmp	r3, #2
 8003942:	ddef      	ble.n	8003924 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003944:	2300      	movs	r3, #0
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	e00c      	b.n	8003964 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 800394a:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <MRT_updateExternalFlashBuffers+0x68>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	7819      	ldrb	r1, [r3, #0]
 8003954:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <MRT_updateExternalFlashBuffers+0x6c>)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4413      	add	r3, r2
 800395a:	460a      	mov	r2, r1
 800395c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	ddef      	ble.n	800394a <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000004 	.word	0x20000004
 800397c:	20006058 	.word	0x20006058
 8003980:	20000010 	.word	0x20000010
 8003984:	200067b8 	.word	0x200067b8

08003988 <MRT_getFlags>:


void MRT_getFlags(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800398e:	2303      	movs	r3, #3
 8003990:	2200      	movs	r2, #0
 8003992:	2101      	movs	r1, #1
 8003994:	4865      	ldr	r0, [pc, #404]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003996:	f000 ff2f 	bl	80047f8 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 800399a:	2303      	movs	r3, #3
 800399c:	2200      	movs	r2, #0
 800399e:	2102      	movs	r1, #2
 80039a0:	4863      	ldr	r0, [pc, #396]	; (8003b30 <MRT_getFlags+0x1a8>)
 80039a2:	f000 ff29 	bl	80047f8 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80039a6:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <MRT_getFlags+0x1ac>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10e      	bne.n	80039cc <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <MRT_getFlags+0x1a4>)
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	3301      	adds	r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <MRT_getFlags+0x1a4>)
 80039b8:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f000 fc94 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039c0:	2303      	movs	r3, #3
 80039c2:	2200      	movs	r2, #0
 80039c4:	2101      	movs	r1, #1
 80039c6:	4859      	ldr	r0, [pc, #356]	; (8003b2c <MRT_getFlags+0x1a4>)
 80039c8:	f000 fdd8 	bl	800457c <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039cc:	2300      	movs	r3, #0
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e00b      	b.n	80039ea <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 80039d2:	4a59      	ldr	r2, [pc, #356]	; (8003b38 <MRT_getFlags+0x1b0>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	4954      	ldr	r1, [pc, #336]	; (8003b2c <MRT_getFlags+0x1a4>)
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	440a      	add	r2, r1
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3301      	adds	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	ddf0      	ble.n	80039d2 <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 80039f0:	2300      	movs	r3, #0
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	e00b      	b.n	8003a0e <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 80039f6:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <MRT_getFlags+0x1b4>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	494c      	ldr	r1, [pc, #304]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	440a      	add	r2, r1
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	ddf0      	ble.n	80039f6 <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <MRT_getFlags+0x1b8>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <MRT_getFlags+0xbc>
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <MRT_getFlags+0x1b8>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d00f      	beq.n	8003a44 <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <MRT_getFlags+0x1b8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a2a:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <MRT_getFlags+0x1b8>)
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003a30:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a32:	2001      	movs	r0, #1
 8003a34:	f000 fc58 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a38:	2303      	movs	r3, #3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	483b      	ldr	r0, [pc, #236]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003a40:	f000 fd9c 	bl	800457c <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003a44:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <MRT_getFlags+0x1ac>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <MRT_getFlags+0xf4>
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <MRT_getFlags+0x1ac>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d013      	beq.n	8003a7c <MRT_getFlags+0xf4>
 8003a54:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <MRT_getFlags+0x1ac>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d00f      	beq.n	8003a7c <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003a5c:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <MRT_getFlags+0x1ac>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <MRT_getFlags+0x1ac>)
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003a68:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f000 fc3c 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a70:	2303      	movs	r3, #3
 8003a72:	2200      	movs	r2, #0
 8003a74:	2101      	movs	r1, #1
 8003a76:	482d      	ldr	r0, [pc, #180]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003a78:	f000 fd80 	bl	800457c <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <MRT_getFlags+0x1bc>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <MRT_getFlags+0x124>
 8003a84:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <MRT_getFlags+0x1bc>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d00f      	beq.n	8003aac <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <MRT_getFlags+0x1bc>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <MRT_getFlags+0x1bc>)
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003a98:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f000 fc24 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4821      	ldr	r0, [pc, #132]	; (8003b2c <MRT_getFlags+0x1a4>)
 8003aa8:	f000 fd68 	bl	800457c <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <MRT_getFlags+0x1c0>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b17      	cmp	r3, #23
 8003ab2:	d90f      	bls.n	8003ad4 <MRT_getFlags+0x14c>
		prev_hours = 0;
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <MRT_getFlags+0x1c0>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <MRT_getFlags+0x1c0>)
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003ac0:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f000 fc10 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ac8:	2303      	movs	r3, #3
 8003aca:	2200      	movs	r2, #0
 8003acc:	2102      	movs	r1, #2
 8003ace:	4818      	ldr	r0, [pc, #96]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003ad0:	f000 fd54 	bl	800457c <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <MRT_getFlags+0x1c4>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b3b      	cmp	r3, #59	; 0x3b
 8003ada:	d90f      	bls.n	8003afc <MRT_getFlags+0x174>
		prev_min = 0;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <MRT_getFlags+0x1c4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <MRT_getFlags+0x1c4>)
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003ae8:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003aea:	2002      	movs	r0, #2
 8003aec:	f000 fbfc 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003af0:	2303      	movs	r3, #3
 8003af2:	2200      	movs	r2, #0
 8003af4:	2102      	movs	r1, #2
 8003af6:	480e      	ldr	r0, [pc, #56]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003af8:	f000 fd40 	bl	800457c <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MRT_getFlags+0x1c8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b3b      	cmp	r3, #59	; 0x3b
 8003b02:	d90f      	bls.n	8003b24 <MRT_getFlags+0x19c>
		prev_sec = 0;
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <MRT_getFlags+0x1c8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <MRT_getFlags+0x1c8>)
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003b10:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b12:	2002      	movs	r0, #2
 8003b14:	f000 fbe8 	bl	80042e8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b18:	2303      	movs	r3, #3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4804      	ldr	r0, [pc, #16]	; (8003b30 <MRT_getFlags+0x1a8>)
 8003b20:	f000 fd2c 	bl	800457c <W25qxx_WriteSector>
	}
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20006058 	.word	0x20006058
 8003b30:	200067b8 	.word	0x200067b8
 8003b34:	200006a9 	.word	0x200006a9
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	20000010 	.word	0x20000010
 8003b40:	20000432 	.word	0x20000432
 8003b44:	20000433 	.word	0x20000433
 8003b48:	20000434 	.word	0x20000434
 8003b4c:	20000435 	.word	0x20000435
 8003b50:	20000436 	.word	0x20000436

08003b54 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	b0a7      	sub	sp, #156	; 0x9c
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003b5c:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <MRT_resetInfo+0x15c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461d      	mov	r5, r3
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <MRT_resetInfo+0x160>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461e      	mov	r6, r3
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <MRT_resetInfo+0x164>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <MRT_resetInfo+0x168>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <MRT_resetInfo+0x16c>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461c      	mov	r4, r3
 8003b7a:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <MRT_resetInfo+0x170>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f107 0020 	add.w	r0, r7, #32
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	9402      	str	r4, [sp, #8]
 8003b86:	9101      	str	r1, [sp, #4]
 8003b88:	9200      	str	r2, [sp, #0]
 8003b8a:	4633      	mov	r3, r6
 8003b8c:	462a      	mov	r2, r5
 8003b8e:	494e      	ldr	r1, [pc, #312]	; (8003cc8 <MRT_resetInfo+0x174>)
 8003b90:	f018 f85a 	bl	801bc48 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003b94:	f107 0320 	add.w	r3, r7, #32
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fb29 	bl	80001f0 <strlen>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	f107 0120 	add.w	r1, r7, #32
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f00a fe27 	bl	800e7fe <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003bb0:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <MRT_resetInfo+0x164>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d11d      	bne.n	8003bf4 <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	2213      	movs	r2, #19
 8003bbe:	4943      	ldr	r1, [pc, #268]	; (8003ccc <MRT_resetInfo+0x178>)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f00a fe1c 	bl	800e7fe <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <MRT_resetInfo+0x164>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <MRT_resetInfo+0x164>)
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <MRT_resetInfo+0x17c>)
 8003bd2:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f000 fb87 	bl	80042e8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003bda:	2303      	movs	r3, #3
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2101      	movs	r1, #1
 8003be0:	483b      	ldr	r0, [pc, #236]	; (8003cd0 <MRT_resetInfo+0x17c>)
 8003be2:	f000 fccb 	bl	800457c <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bea:	f004 fc31 	bl	8008450 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003bee:	2005      	movs	r0, #5
 8003bf0:	f004 f834 	bl	8007c5c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003bf4:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <MRT_resetInfo+0x160>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03a      	beq.n	8003c72 <MRT_resetInfo+0x11e>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <MRT_resetInfo+0x160>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	4933      	ldr	r1, [pc, #204]	; (8003cd4 <MRT_resetInfo+0x180>)
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f018 f81d 	bl	801bc48 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc faec 	bl	80001f0 <strlen>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	f107 010c 	add.w	r1, r7, #12
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f00a fdea 	bl	800e7fe <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	2214      	movs	r2, #20
 8003c30:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <MRT_resetInfo+0x184>)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f00a fde3 	bl	800e7fe <HAL_UART_Transmit>


		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003c38:	2002      	movs	r0, #2
 8003c3a:	f000 fb55 	bl	80042e8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003c3e:	2303      	movs	r3, #3
 8003c40:	2200      	movs	r2, #0
 8003c42:	2102      	movs	r1, #2
 8003c44:	4825      	ldr	r0, [pc, #148]	; (8003cdc <MRT_resetInfo+0x188>)
 8003c46:	f000 fc99 	bl	800457c <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c50:	e00b      	b.n	8003c6a <MRT_resetInfo+0x116>
			  *flash_time[i] = 0x0;
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <MRT_resetInfo+0x18c>)
 8003c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c64:	3301      	adds	r3, #1
 8003c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	ddef      	ble.n	8003c52 <MRT_resetInfo+0xfe>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <MRT_resetInfo+0x15c>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <MRT_resetInfo+0x154>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	220e      	movs	r2, #14
 8003c80:	4918      	ldr	r1, [pc, #96]	; (8003ce4 <MRT_resetInfo+0x190>)
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f00a fdbb 	bl	800e7fe <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <MRT_resetInfo+0x15c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <MRT_resetInfo+0x15c>)
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <MRT_resetInfo+0x17c>)
 8003c94:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003c96:	2001      	movs	r0, #1
 8003c98:	f000 fb26 	bl	80042e8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	480b      	ldr	r0, [pc, #44]	; (8003cd0 <MRT_resetInfo+0x17c>)
 8003ca4:	f000 fc6a 	bl	800457c <W25qxx_WriteSector>
	  }
}
 8003ca8:	bf00      	nop
 8003caa:	378c      	adds	r7, #140	; 0x8c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb0:	20000432 	.word	0x20000432
 8003cb4:	200006a9 	.word	0x200006a9
 8003cb8:	20000433 	.word	0x20000433
 8003cbc:	20000434 	.word	0x20000434
 8003cc0:	20000435 	.word	0x20000435
 8003cc4:	20000436 	.word	0x20000436
 8003cc8:	0801ff88 	.word	0x0801ff88
 8003ccc:	0801ffc8 	.word	0x0801ffc8
 8003cd0:	20006058 	.word	0x20006058
 8003cd4:	0801ffdc 	.word	0x0801ffdc
 8003cd8:	0801ffec 	.word	0x0801ffec
 8003cdc:	20000438 	.word	0x20000438
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	08020004 	.word	0x08020004

08003ce8 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003cec:	f7ff fe14 	bl	8003918 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f000 faf9 	bl	80042e8 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <MRT_saveRTCTime+0x20>)
 8003cfe:	f000 fc3d 	bl	800457c <W25qxx_WriteSector>
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200067b8 	.word	0x200067b8
 8003d0c:	00000000 	.word	0x00000000

08003d10 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f004 fc01 	bl	8008520 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8003d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f004 fd01 	bl	800872a <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f004 fd89 	bl	8008840 <HAL_ADC_GetValue>
 8003d2e:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f004 fcc7 	bl	80086c4 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7fc fbf4 	bl	8000524 <__aeabi_ui2d>
 8003d3c:	a312      	add	r3, pc, #72	; (adr r3, 8003d88 <MRT_prop_poll_pressure_transducer+0x78>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc fd93 	bl	800086c <__aeabi_ddiv>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fc ff5b 	bl	8000c08 <__aeabi_d2f>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fc07 	bl	8000568 <__aeabi_f2d>
 8003d5a:	a30d      	add	r3, pc, #52	; (adr r3, 8003d90 <MRT_prop_poll_pressure_transducer+0x80>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fc5a 	bl	8000618 <__aeabi_dmul>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc ff4c 	bl	8000c08 <__aeabi_d2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	60bb      	str	r3, [r7, #8]

	// convert using transfer function
	// TODO

	return voltage;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	ee07 3a90 	vmov	s15, r3
}
 8003d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	f3af 8000 	nop.w
 8003d88:	00000000 	.word	0x00000000
 8003d8c:	40affe00 	.word	0x40affe00
 8003d90:	66666666 	.word	0x66666666
 8003d94:	400a6666 	.word	0x400a6666

08003d98 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003da6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003e28 <MRT_getAltitude+0x90>
 8003daa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dae:	ee16 0a90 	vmov	r0, s13
 8003db2:	f7fc fbd9 	bl	8000568 <__aeabi_f2d>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003e18 <MRT_getAltitude+0x80>
 8003dbe:	ec43 2b10 	vmov	d0, r2, r3
 8003dc2:	f015 fdb3 	bl	801992c <pow>
 8003dc6:	ec51 0b10 	vmov	r0, r1, d0
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <MRT_getAltitude+0x94>)
 8003dd0:	f7fc fa6a 	bl	80002a8 <__aeabi_dsub>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	a310      	add	r3, pc, #64	; (adr r3, 8003e20 <MRT_getAltitude+0x88>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f7fc fc19 	bl	8000618 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <MRT_getAltitude+0x98>)
 8003df4:	f7fc fa5a 	bl	80002ac <__adddf3>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc ff02 	bl	8000c08 <__aeabi_d2f>
 8003e04:	4603      	mov	r3, r0
 8003e06:	ee07 3a90 	vmov	s15, r3
}
 8003e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	f3af 8000 	nop.w
 8003e18:	b537afba 	.word	0xb537afba
 8003e1c:	3fc85a8b 	.word	0x3fc85a8b
 8003e20:	76276276 	.word	0x76276276
 8003e24:	c0e481c2 	.word	0xc0e481c2
 8003e28:	447d8000 	.word	0x447d8000
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	40590000 	.word	0x40590000

08003e34 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003e3e:	f107 020f 	add.w	r2, r7, #15
 8003e42:	1df9      	adds	r1, r7, #7
 8003e44:	2364      	movs	r3, #100	; 0x64
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4804      	ldr	r0, [pc, #16]	; (8003e5c <W25qxx_Spi+0x28>)
 8003e4c:	f009 fbcc 	bl	800d5e8 <HAL_SPI_TransmitReceive>
	return ret;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20005fbc 	.word	0x20005fbc

08003e60 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	2300      	movs	r3, #0
 8003e74:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	4813      	ldr	r0, [pc, #76]	; (8003ec8 <W25qxx_ReadID+0x68>)
 8003e7c:	f005 f9f4 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003e80:	209f      	movs	r0, #159	; 0x9f
 8003e82:	f7ff ffd7 	bl	8003e34 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e86:	20a5      	movs	r0, #165	; 0xa5
 8003e88:	f7ff ffd4 	bl	8003e34 <W25qxx_Spi>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e90:	20a5      	movs	r0, #165	; 0xa5
 8003e92:	f7ff ffcf 	bl	8003e34 <W25qxx_Spi>
 8003e96:	4603      	mov	r3, r0
 8003e98:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e9a:	20a5      	movs	r0, #165	; 0xa5
 8003e9c:	f7ff ffca 	bl	8003e34 <W25qxx_Spi>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	4807      	ldr	r0, [pc, #28]	; (8003ec8 <W25qxx_ReadID+0x68>)
 8003eaa:	f005 f9dd 	bl	8009268 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	041a      	lsls	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40020c00 	.word	0x40020c00

08003ecc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	4816      	ldr	r0, [pc, #88]	; (8003f30 <W25qxx_ReadUniqID+0x64>)
 8003ed8:	f005 f9c6 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003edc:	204b      	movs	r0, #75	; 0x4b
 8003ede:	f7ff ffa9 	bl	8003e34 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	71fb      	strb	r3, [r7, #7]
 8003ee6:	e005      	b.n	8003ef4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ee8:	20a5      	movs	r0, #165	; 0xa5
 8003eea:	f7ff ffa3 	bl	8003e34 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	71fb      	strb	r3, [r7, #7]
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d9f6      	bls.n	8003ee8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	71bb      	strb	r3, [r7, #6]
 8003efe:	e00b      	b.n	8003f18 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f00:	79bc      	ldrb	r4, [r7, #6]
 8003f02:	20a5      	movs	r0, #165	; 0xa5
 8003f04:	f7ff ff96 	bl	8003e34 <W25qxx_Spi>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <W25qxx_ReadUniqID+0x68>)
 8003f0e:	4423      	add	r3, r4
 8003f10:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003f12:	79bb      	ldrb	r3, [r7, #6]
 8003f14:	3301      	adds	r3, #1
 8003f16:	71bb      	strb	r3, [r7, #6]
 8003f18:	79bb      	ldrb	r3, [r7, #6]
 8003f1a:	2b07      	cmp	r3, #7
 8003f1c:	d9f0      	bls.n	8003f00 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f1e:	2201      	movs	r2, #1
 8003f20:	2140      	movs	r1, #64	; 0x40
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <W25qxx_ReadUniqID+0x64>)
 8003f24:	f005 f9a0 	bl	8009268 <HAL_GPIO_WritePin>
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	40020c00 	.word	0x40020c00
 8003f34:	20006db4 	.word	0x20006db4

08003f38 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	4807      	ldr	r0, [pc, #28]	; (8003f60 <W25qxx_WriteEnable+0x28>)
 8003f42:	f005 f991 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003f46:	2006      	movs	r0, #6
 8003f48:	f7ff ff74 	bl	8003e34 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	4803      	ldr	r0, [pc, #12]	; (8003f60 <W25qxx_WriteEnable+0x28>)
 8003f52:	f005 f989 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003f56:	2001      	movs	r0, #1
 8003f58:	f011 fd31 	bl	80159be <osDelay>
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40020c00 	.word	0x40020c00

08003f64 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	481c      	ldr	r0, [pc, #112]	; (8003fe8 <W25qxx_ReadStatusRegister+0x84>)
 8003f78:	f005 f976 	bl	8009268 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10c      	bne.n	8003f9c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003f82:	2005      	movs	r0, #5
 8003f84:	f7ff ff56 	bl	8003e34 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f88:	20a5      	movs	r0, #165	; 0xa5
 8003f8a:	f7ff ff53 	bl	8003e34 <W25qxx_Spi>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003f92:	4a16      	ldr	r2, [pc, #88]	; (8003fec <W25qxx_ReadStatusRegister+0x88>)
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003f9a:	e01b      	b.n	8003fd4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d10c      	bne.n	8003fbc <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003fa2:	2035      	movs	r0, #53	; 0x35
 8003fa4:	f7ff ff46 	bl	8003e34 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003fa8:	20a5      	movs	r0, #165	; 0xa5
 8003faa:	f7ff ff43 	bl	8003e34 <W25qxx_Spi>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <W25qxx_ReadStatusRegister+0x88>)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003fba:	e00b      	b.n	8003fd4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003fbc:	2015      	movs	r0, #21
 8003fbe:	f7ff ff39 	bl	8003e34 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003fc2:	20a5      	movs	r0, #165	; 0xa5
 8003fc4:	f7ff ff36 	bl	8003e34 <W25qxx_Spi>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <W25qxx_ReadStatusRegister+0x88>)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	4803      	ldr	r0, [pc, #12]	; (8003fe8 <W25qxx_ReadStatusRegister+0x84>)
 8003fda:	f005 f945 	bl	8009268 <HAL_GPIO_WritePin>
	return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	20006db4 	.word	0x20006db4

08003ff0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f011 fce2 	bl	80159be <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	480f      	ldr	r0, [pc, #60]	; (800403c <W25qxx_WaitForWriteEnd+0x4c>)
 8004000:	f005 f932 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004004:	2005      	movs	r0, #5
 8004006:	f7ff ff15 	bl	8003e34 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800400a:	20a5      	movs	r0, #165	; 0xa5
 800400c:	f7ff ff12 	bl	8003e34 <W25qxx_Spi>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <W25qxx_WaitForWriteEnd+0x50>)
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f011 fccf 	bl	80159be <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <W25qxx_WaitForWriteEnd+0x50>)
 8004022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ed      	bne.n	800400a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800402e:	2201      	movs	r2, #1
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	4802      	ldr	r0, [pc, #8]	; (800403c <W25qxx_WaitForWriteEnd+0x4c>)
 8004034:	f005 f918 	bl	8009268 <HAL_GPIO_WritePin>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40020c00 	.word	0x40020c00
 8004040:	20006db4 	.word	0x20006db4

08004044 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800404a:	4b90      	ldr	r3, [pc, #576]	; (800428c <W25qxx_Init+0x248>)
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004052:	e002      	b.n	800405a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004054:	2001      	movs	r0, #1
 8004056:	f011 fcb2 	bl	80159be <osDelay>
	while (HAL_GetTick() < 100)
 800405a:	f004 f9ed 	bl	8008438 <HAL_GetTick>
 800405e:	4603      	mov	r3, r0
 8004060:	2b63      	cmp	r3, #99	; 0x63
 8004062:	d9f7      	bls.n	8004054 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004064:	2201      	movs	r2, #1
 8004066:	2140      	movs	r1, #64	; 0x40
 8004068:	4889      	ldr	r0, [pc, #548]	; (8004290 <W25qxx_Init+0x24c>)
 800406a:	f005 f8fd 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800406e:	2064      	movs	r0, #100	; 0x64
 8004070:	f011 fca5 	bl	80159be <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004074:	4887      	ldr	r0, [pc, #540]	; (8004294 <W25qxx_Init+0x250>)
 8004076:	f017 fd1b 	bl	801bab0 <puts>
#endif
	id = W25qxx_ReadID();
 800407a:	f7ff fef1 	bl	8003e60 <W25qxx_ReadID>
 800407e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4885      	ldr	r0, [pc, #532]	; (8004298 <W25qxx_Init+0x254>)
 8004084:	f017 fc8e 	bl	801b9a4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3b11      	subs	r3, #17
 800408e:	2b0f      	cmp	r3, #15
 8004090:	f200 808b 	bhi.w	80041aa <W25qxx_Init+0x166>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <W25qxx_Init+0x58>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	08004197 	.word	0x08004197
 80040a0:	08004183 	.word	0x08004183
 80040a4:	0800416f 	.word	0x0800416f
 80040a8:	0800415b 	.word	0x0800415b
 80040ac:	08004147 	.word	0x08004147
 80040b0:	08004133 	.word	0x08004133
 80040b4:	0800411f 	.word	0x0800411f
 80040b8:	08004109 	.word	0x08004109
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080041ab 	.word	0x080041ab
 80040c4:	080041ab 	.word	0x080041ab
 80040c8:	080041ab 	.word	0x080041ab
 80040cc:	080041ab 	.word	0x080041ab
 80040d0:	080041ab 	.word	0x080041ab
 80040d4:	080041ab 	.word	0x080041ab
 80040d8:	080040dd 	.word	0x080040dd
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80040dc:	4b6b      	ldr	r3, [pc, #428]	; (800428c <W25qxx_Init+0x248>)
 80040de:	220a      	movs	r2, #10
 80040e0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80040e2:	4b6a      	ldr	r3, [pc, #424]	; (800428c <W25qxx_Init+0x248>)
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80040ea:	486c      	ldr	r0, [pc, #432]	; (800429c <W25qxx_Init+0x258>)
 80040ec:	f017 fce0 	bl	801bab0 <puts>
#endif
		break;
 80040f0:	e064      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80040f2:	4b66      	ldr	r3, [pc, #408]	; (800428c <W25qxx_Init+0x248>)
 80040f4:	2209      	movs	r2, #9
 80040f6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <W25qxx_Init+0x248>)
 80040fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004100:	4867      	ldr	r0, [pc, #412]	; (80042a0 <W25qxx_Init+0x25c>)
 8004102:	f017 fcd5 	bl	801bab0 <puts>
#endif
		break;
 8004106:	e059      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004108:	4b60      	ldr	r3, [pc, #384]	; (800428c <W25qxx_Init+0x248>)
 800410a:	2208      	movs	r2, #8
 800410c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800410e:	4b5f      	ldr	r3, [pc, #380]	; (800428c <W25qxx_Init+0x248>)
 8004110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004114:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004116:	4863      	ldr	r0, [pc, #396]	; (80042a4 <W25qxx_Init+0x260>)
 8004118:	f017 fcca 	bl	801bab0 <puts>
#endif
		break;
 800411c:	e04e      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <W25qxx_Init+0x248>)
 8004120:	2207      	movs	r2, #7
 8004122:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <W25qxx_Init+0x248>)
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800412a:	485f      	ldr	r0, [pc, #380]	; (80042a8 <W25qxx_Init+0x264>)
 800412c:	f017 fcc0 	bl	801bab0 <puts>
#endif
		break;
 8004130:	e044      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <W25qxx_Init+0x248>)
 8004134:	2206      	movs	r2, #6
 8004136:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004138:	4b54      	ldr	r3, [pc, #336]	; (800428c <W25qxx_Init+0x248>)
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800413e:	485b      	ldr	r0, [pc, #364]	; (80042ac <W25qxx_Init+0x268>)
 8004140:	f017 fcb6 	bl	801bab0 <puts>
#endif
		break;
 8004144:	e03a      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004146:	4b51      	ldr	r3, [pc, #324]	; (800428c <W25qxx_Init+0x248>)
 8004148:	2205      	movs	r2, #5
 800414a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800414c:	4b4f      	ldr	r3, [pc, #316]	; (800428c <W25qxx_Init+0x248>)
 800414e:	2220      	movs	r2, #32
 8004150:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004152:	4857      	ldr	r0, [pc, #348]	; (80042b0 <W25qxx_Init+0x26c>)
 8004154:	f017 fcac 	bl	801bab0 <puts>
#endif
		break;
 8004158:	e030      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800415a:	4b4c      	ldr	r3, [pc, #304]	; (800428c <W25qxx_Init+0x248>)
 800415c:	2204      	movs	r2, #4
 800415e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <W25qxx_Init+0x248>)
 8004162:	2210      	movs	r2, #16
 8004164:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004166:	4853      	ldr	r0, [pc, #332]	; (80042b4 <W25qxx_Init+0x270>)
 8004168:	f017 fca2 	bl	801bab0 <puts>
#endif
		break;
 800416c:	e026      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <W25qxx_Init+0x248>)
 8004170:	2203      	movs	r2, #3
 8004172:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <W25qxx_Init+0x248>)
 8004176:	2208      	movs	r2, #8
 8004178:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800417a:	484f      	ldr	r0, [pc, #316]	; (80042b8 <W25qxx_Init+0x274>)
 800417c:	f017 fc98 	bl	801bab0 <puts>
#endif
		break;
 8004180:	e01c      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004182:	4b42      	ldr	r3, [pc, #264]	; (800428c <W25qxx_Init+0x248>)
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004188:	4b40      	ldr	r3, [pc, #256]	; (800428c <W25qxx_Init+0x248>)
 800418a:	2204      	movs	r2, #4
 800418c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800418e:	484b      	ldr	r0, [pc, #300]	; (80042bc <W25qxx_Init+0x278>)
 8004190:	f017 fc8e 	bl	801bab0 <puts>
#endif
		break;
 8004194:	e012      	b.n	80041bc <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004196:	4b3d      	ldr	r3, [pc, #244]	; (800428c <W25qxx_Init+0x248>)
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <W25qxx_Init+0x248>)
 800419e:	2202      	movs	r2, #2
 80041a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80041a2:	4847      	ldr	r0, [pc, #284]	; (80042c0 <W25qxx_Init+0x27c>)
 80041a4:	f017 fc84 	bl	801bab0 <puts>
#endif
		break;
 80041a8:	e008      	b.n	80041bc <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80041aa:	4846      	ldr	r0, [pc, #280]	; (80042c4 <W25qxx_Init+0x280>)
 80041ac:	f017 fc80 	bl	801bab0 <puts>
#endif
		w25qxx.Lock = 0;
 80041b0:	4b36      	ldr	r3, [pc, #216]	; (800428c <W25qxx_Init+0x248>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e063      	b.n	8004284 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80041bc:	4b33      	ldr	r3, [pc, #204]	; (800428c <W25qxx_Init+0x248>)
 80041be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c2:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <W25qxx_Init+0x248>)
 80041c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041ca:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <W25qxx_Init+0x248>)
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	4a2e      	ldr	r2, [pc, #184]	; (800428c <W25qxx_Init+0x248>)
 80041d4:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <W25qxx_Init+0x248>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4a2c      	ldr	r2, [pc, #176]	; (800428c <W25qxx_Init+0x248>)
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a2a      	ldr	r2, [pc, #168]	; (800428c <W25qxx_Init+0x248>)
 80041e4:	8952      	ldrh	r2, [r2, #10]
 80041e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ea:	4a28      	ldr	r2, [pc, #160]	; (800428c <W25qxx_Init+0x248>)
 80041ec:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <W25qxx_Init+0x248>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <W25qxx_Init+0x248>)
 80041f6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <W25qxx_Init+0x248>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4a23      	ldr	r2, [pc, #140]	; (800428c <W25qxx_Init+0x248>)
 80041fe:	6912      	ldr	r2, [r2, #16]
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	0a9b      	lsrs	r3, r3, #10
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <W25qxx_Init+0x248>)
 8004208:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800420a:	f7ff fe5f 	bl	8003ecc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800420e:	2001      	movs	r0, #1
 8004210:	f7ff fea8 	bl	8003f64 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004214:	2002      	movs	r0, #2
 8004216:	f7ff fea5 	bl	8003f64 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800421a:	2003      	movs	r0, #3
 800421c:	f7ff fea2 	bl	8003f64 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <W25qxx_Init+0x248>)
 8004222:	895b      	ldrh	r3, [r3, #10]
 8004224:	4619      	mov	r1, r3
 8004226:	4828      	ldr	r0, [pc, #160]	; (80042c8 <W25qxx_Init+0x284>)
 8004228:	f017 fbbc 	bl	801b9a4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <W25qxx_Init+0x248>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4619      	mov	r1, r3
 8004232:	4826      	ldr	r0, [pc, #152]	; (80042cc <W25qxx_Init+0x288>)
 8004234:	f017 fbb6 	bl	801b9a4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <W25qxx_Init+0x248>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4619      	mov	r1, r3
 800423e:	4824      	ldr	r0, [pc, #144]	; (80042d0 <W25qxx_Init+0x28c>)
 8004240:	f017 fbb0 	bl	801b9a4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <W25qxx_Init+0x248>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	4619      	mov	r1, r3
 800424a:	4822      	ldr	r0, [pc, #136]	; (80042d4 <W25qxx_Init+0x290>)
 800424c:	f017 fbaa 	bl	801b9a4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <W25qxx_Init+0x248>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4619      	mov	r1, r3
 8004256:	4820      	ldr	r0, [pc, #128]	; (80042d8 <W25qxx_Init+0x294>)
 8004258:	f017 fba4 	bl	801b9a4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <W25qxx_Init+0x248>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4619      	mov	r1, r3
 8004262:	481e      	ldr	r0, [pc, #120]	; (80042dc <W25qxx_Init+0x298>)
 8004264:	f017 fb9e 	bl	801b9a4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <W25qxx_Init+0x248>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4619      	mov	r1, r3
 800426e:	481c      	ldr	r0, [pc, #112]	; (80042e0 <W25qxx_Init+0x29c>)
 8004270:	f017 fb98 	bl	801b9a4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004274:	481b      	ldr	r0, [pc, #108]	; (80042e4 <W25qxx_Init+0x2a0>)
 8004276:	f017 fc1b 	bl	801bab0 <puts>
#endif
	w25qxx.Lock = 0;
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <W25qxx_Init+0x248>)
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20006db4 	.word	0x20006db4
 8004290:	40020c00 	.word	0x40020c00
 8004294:	08020014 	.word	0x08020014
 8004298:	0802002c 	.word	0x0802002c
 800429c:	08020040 	.word	0x08020040
 80042a0:	08020058 	.word	0x08020058
 80042a4:	08020070 	.word	0x08020070
 80042a8:	08020088 	.word	0x08020088
 80042ac:	080200a0 	.word	0x080200a0
 80042b0:	080200b8 	.word	0x080200b8
 80042b4:	080200d0 	.word	0x080200d0
 80042b8:	080200e8 	.word	0x080200e8
 80042bc:	08020100 	.word	0x08020100
 80042c0:	08020118 	.word	0x08020118
 80042c4:	08020130 	.word	0x08020130
 80042c8:	08020144 	.word	0x08020144
 80042cc:	08020164 	.word	0x08020164
 80042d0:	0802017c 	.word	0x0802017c
 80042d4:	0802019c 	.word	0x0802019c
 80042d8:	080201b8 	.word	0x080201b8
 80042dc:	080201d8 	.word	0x080201d8
 80042e0:	080201f4 	.word	0x080201f4
 80042e4:	08020214 	.word	0x08020214

080042e8 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80042f0:	e002      	b.n	80042f8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80042f2:	2001      	movs	r0, #1
 80042f4:	f011 fb63 	bl	80159be <osDelay>
	while (w25qxx.Lock == 1)
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <W25qxx_EraseSector+0xc8>)
 80042fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d0f7      	beq.n	80042f2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004302:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <W25qxx_EraseSector+0xc8>)
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800430a:	f004 f895 	bl	8008438 <HAL_GetTick>
 800430e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4828      	ldr	r0, [pc, #160]	; (80043b4 <W25qxx_EraseSector+0xcc>)
 8004314:	f017 fb46 	bl	801b9a4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004318:	f7ff fe6a 	bl	8003ff0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800431c:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <W25qxx_EraseSector+0xc8>)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004328:	f7ff fe06 	bl	8003f38 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	4821      	ldr	r0, [pc, #132]	; (80043b8 <W25qxx_EraseSector+0xd0>)
 8004332:	f004 ff99 	bl	8009268 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <W25qxx_EraseSector+0xc8>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d909      	bls.n	8004352 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800433e:	2021      	movs	r0, #33	; 0x21
 8004340:	f7ff fd78 	bl	8003e34 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0e1b      	lsrs	r3, r3, #24
 8004348:	b2db      	uxtb	r3, r3
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fd72 	bl	8003e34 <W25qxx_Spi>
 8004350:	e002      	b.n	8004358 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004352:	2020      	movs	r0, #32
 8004354:	f7ff fd6e 	bl	8003e34 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	b2db      	uxtb	r3, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fd68 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fd62 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fd5d 	bl	8003e34 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800437a:	2201      	movs	r2, #1
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	480e      	ldr	r0, [pc, #56]	; (80043b8 <W25qxx_EraseSector+0xd0>)
 8004380:	f004 ff72 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004384:	f7ff fe34 	bl	8003ff0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004388:	f004 f856 	bl	8008438 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	4619      	mov	r1, r3
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <W25qxx_EraseSector+0xd4>)
 8004396:	f017 fb05 	bl	801b9a4 <iprintf>
#endif
	W25qxx_Delay(1);
 800439a:	2001      	movs	r0, #1
 800439c:	f011 fb0f 	bl	80159be <osDelay>
	w25qxx.Lock = 0;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <W25qxx_EraseSector+0xc8>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20006db4 	.word	0x20006db4
 80043b4:	0802026c 	.word	0x0802026c
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	08020290 	.word	0x08020290

080043c0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <W25qxx_SectorToPage+0x28>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <W25qxx_SectorToPage+0x28>)
 80043d4:	8952      	ldrh	r2, [r2, #10]
 80043d6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20006db4 	.word	0x20006db4

080043ec <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80043fa:	e002      	b.n	8004402 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f011 fade 	bl	80159be <osDelay>
	while (w25qxx.Lock == 1)
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <W25qxx_WritePage+0x174>)
 8004404:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004408:	2b01      	cmp	r3, #1
 800440a:	d0f7      	beq.n	80043fc <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800440c:	4b54      	ldr	r3, [pc, #336]	; (8004560 <W25qxx_WritePage+0x174>)
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	4a51      	ldr	r2, [pc, #324]	; (8004560 <W25qxx_WritePage+0x174>)
 800441c:	8952      	ldrh	r2, [r2, #10]
 800441e:	4293      	cmp	r3, r2
 8004420:	d802      	bhi.n	8004428 <W25qxx_WritePage+0x3c>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <W25qxx_WritePage+0x174>)
 800442a:	895b      	ldrh	r3, [r3, #10]
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	4413      	add	r3, r2
 800443a:	4a49      	ldr	r2, [pc, #292]	; (8004560 <W25qxx_WritePage+0x174>)
 800443c:	8952      	ldrh	r2, [r2, #10]
 800443e:	4293      	cmp	r3, r2
 8004440:	d905      	bls.n	800444e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <W25qxx_WritePage+0x174>)
 8004444:	895b      	ldrh	r3, [r3, #10]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4843      	ldr	r0, [pc, #268]	; (8004564 <W25qxx_WritePage+0x178>)
 8004456:	f017 faa5 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 800445a:	2064      	movs	r0, #100	; 0x64
 800445c:	f011 faaf 	bl	80159be <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004460:	f003 ffea 	bl	8008438 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004466:	f7ff fdc3 	bl	8003ff0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800446a:	f7ff fd65 	bl	8003f38 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800446e:	2200      	movs	r2, #0
 8004470:	2140      	movs	r1, #64	; 0x40
 8004472:	483d      	ldr	r0, [pc, #244]	; (8004568 <W25qxx_WritePage+0x17c>)
 8004474:	f004 fef8 	bl	8009268 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004478:	4b39      	ldr	r3, [pc, #228]	; (8004560 <W25qxx_WritePage+0x174>)
 800447a:	895b      	ldrh	r3, [r3, #10]
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	fb03 f302 	mul.w	r3, r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <W25qxx_WritePage+0x174>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d909      	bls.n	80044a6 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004492:	2012      	movs	r0, #18
 8004494:	f7ff fcce 	bl	8003e34 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	0e1b      	lsrs	r3, r3, #24
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fcc8 	bl	8003e34 <W25qxx_Spi>
 80044a4:	e002      	b.n	80044ac <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80044a6:	2002      	movs	r0, #2
 80044a8:	f7ff fcc4 	bl	8003e34 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fcbe 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fcb8 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fcb3 	bl	8003e34 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	2364      	movs	r3, #100	; 0x64
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4825      	ldr	r0, [pc, #148]	; (800456c <W25qxx_WritePage+0x180>)
 80044d8:	f008 fe39 	bl	800d14e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044dc:	2201      	movs	r2, #1
 80044de:	2140      	movs	r1, #64	; 0x40
 80044e0:	4821      	ldr	r0, [pc, #132]	; (8004568 <W25qxx_WritePage+0x17c>)
 80044e2:	f004 fec1 	bl	8009268 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80044e6:	f7ff fd83 	bl	8003ff0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80044ea:	f003 ffa5 	bl	8008438 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e018      	b.n	800452e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <W25qxx_WritePage+0x12c>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d905      	bls.n	8004518 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800450c:	4818      	ldr	r0, [pc, #96]	; (8004570 <W25qxx_WritePage+0x184>)
 800450e:	f017 facf 	bl	801bab0 <puts>
			W25qxx_Delay(10);
 8004512:	200a      	movs	r0, #10
 8004514:	f011 fa53 	bl	80159be <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	4619      	mov	r1, r3
 8004522:	4814      	ldr	r0, [pc, #80]	; (8004574 <W25qxx_WritePage+0x188>)
 8004524:	f017 fa3e 	bl	801b9a4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3301      	adds	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3e2      	bcc.n	80044fc <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004536:	480e      	ldr	r0, [pc, #56]	; (8004570 <W25qxx_WritePage+0x184>)
 8004538:	f017 faba 	bl	801bab0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800453c:	6939      	ldr	r1, [r7, #16]
 800453e:	480e      	ldr	r0, [pc, #56]	; (8004578 <W25qxx_WritePage+0x18c>)
 8004540:	f017 fa30 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 8004544:	2064      	movs	r0, #100	; 0x64
 8004546:	f011 fa3a 	bl	80159be <osDelay>
#endif
	W25qxx_Delay(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f011 fa37 	bl	80159be <osDelay>
	w25qxx.Lock = 0;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <W25qxx_WritePage+0x174>)
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20006db4 	.word	0x20006db4
 8004564:	080204f4 	.word	0x080204f4
 8004568:	40020c00 	.word	0x40020c00
 800456c:	20005fbc 	.word	0x20005fbc
 8004570:	08020530 	.word	0x08020530
 8004574:	08020534 	.word	0x08020534
 8004578:	0802053c 	.word	0x0802053c

0800457c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <W25qxx_WriteSector+0xe8>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d802      	bhi.n	800459a <W25qxx_WriteSector+0x1e>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <W25qxx_WriteSector+0xe8>)
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4830      	ldr	r0, [pc, #192]	; (8004668 <W25qxx_WriteSector+0xec>)
 80045a8:	f017 f9fc 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	f011 fa06 	bl	80159be <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <W25qxx_WriteSector+0xe8>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d306      	bcc.n	80045ca <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80045bc:	482b      	ldr	r0, [pc, #172]	; (800466c <W25qxx_WriteSector+0xf0>)
 80045be:	f017 fa77 	bl	801bab0 <puts>
		W25qxx_Delay(100);
 80045c2:	2064      	movs	r0, #100	; 0x64
 80045c4:	f011 f9fb 	bl	80159be <osDelay>
#endif
		return;
 80045c8:	e048      	b.n	800465c <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	441a      	add	r2, r3
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <W25qxx_WriteSector+0xe8>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d905      	bls.n	80045e4 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80045d8:	4b22      	ldr	r3, [pc, #136]	; (8004664 <W25qxx_WriteSector+0xe8>)
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e001      	b.n	80045e8 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f7ff fee9 	bl	80043c0 <W25qxx_SectorToPage>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <W25qxx_WriteSector+0xe8>)
 80045f2:	895b      	ldrh	r3, [r3, #10]
 80045f4:	4619      	mov	r1, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <W25qxx_WriteSector+0xe8>)
 8004602:	895b      	ldrh	r3, [r3, #10]
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	fbb3 f1f2 	udiv	r1, r3, r2
 800460c:	fb02 f201 	mul.w	r2, r2, r1
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	69f9      	ldr	r1, [r7, #28]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fee6 	bl	80043ec <W25qxx_WritePage>
		StartPage++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <W25qxx_WriteSector+0xe8>)
 8004628:	895b      	ldrh	r3, [r3, #10]
 800462a:	461a      	mov	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1a9a      	subs	r2, r3, r2
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <W25qxx_WriteSector+0xe8>)
 8004638:	895b      	ldrh	r3, [r3, #10]
 800463a:	461a      	mov	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	dce1      	bgt.n	8004614 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <W25qxx_WriteSector+0xf4>)
 8004652:	f017 fa2d 	bl	801bab0 <puts>
	W25qxx_Delay(100);
 8004656:	2064      	movs	r0, #100	; 0x64
 8004658:	f011 f9b1 	bl	80159be <osDelay>
#endif
}
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20006db4 	.word	0x20006db4
 8004668:	08020560 	.word	0x08020560
 800466c:	080205a0 	.word	0x080205a0
 8004670:	080205c0 	.word	0x080205c0

08004674 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004682:	e002      	b.n	800468a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004684:	2001      	movs	r0, #1
 8004686:	f011 f99a 	bl	80159be <osDelay>
	while (w25qxx.Lock == 1)
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <W25qxx_ReadPage+0x168>)
 800468c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004690:	2b01      	cmp	r3, #1
 8004692:	d0f7      	beq.n	8004684 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004694:	4b51      	ldr	r3, [pc, #324]	; (80047dc <W25qxx_ReadPage+0x168>)
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <W25qxx_ReadPage+0x168>)
 800469e:	895b      	ldrh	r3, [r3, #10]
 80046a0:	461a      	mov	r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d802      	bhi.n	80046ae <W25qxx_ReadPage+0x3a>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80046ae:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <W25qxx_ReadPage+0x168>)
 80046b0:	895b      	ldrh	r3, [r3, #10]
 80046b2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	4a48      	ldr	r2, [pc, #288]	; (80047dc <W25qxx_ReadPage+0x168>)
 80046bc:	8952      	ldrh	r2, [r2, #10]
 80046be:	4293      	cmp	r3, r2
 80046c0:	d905      	bls.n	80046ce <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80046c2:	4b46      	ldr	r3, [pc, #280]	; (80047dc <W25qxx_ReadPage+0x168>)
 80046c4:	895b      	ldrh	r3, [r3, #10]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4842      	ldr	r0, [pc, #264]	; (80047e0 <W25qxx_ReadPage+0x16c>)
 80046d6:	f017 f965 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 80046da:	2064      	movs	r0, #100	; 0x64
 80046dc:	f011 f96f 	bl	80159be <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80046e0:	f003 feaa 	bl	8008438 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <W25qxx_ReadPage+0x168>)
 80046e8:	895b      	ldrh	r3, [r3, #10]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	fb03 f302 	mul.w	r3, r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	4839      	ldr	r0, [pc, #228]	; (80047e4 <W25qxx_ReadPage+0x170>)
 80046fe:	f004 fdb3 	bl	8009268 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004702:	4b36      	ldr	r3, [pc, #216]	; (80047dc <W25qxx_ReadPage+0x168>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b08      	cmp	r3, #8
 8004708:	d909      	bls.n	800471e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800470a:	200c      	movs	r0, #12
 800470c:	f7ff fb92 	bl	8003e34 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fb8c 	bl	8003e34 <W25qxx_Spi>
 800471c:	e002      	b.n	8004724 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800471e:	200b      	movs	r0, #11
 8004720:	f7ff fb88 	bl	8003e34 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fb82 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fb7c 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fb77 	bl	8003e34 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004746:	2000      	movs	r0, #0
 8004748:	f7ff fb74 	bl	8003e34 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b29a      	uxth	r2, r3
 8004750:	2364      	movs	r3, #100	; 0x64
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	4824      	ldr	r0, [pc, #144]	; (80047e8 <W25qxx_ReadPage+0x174>)
 8004756:	f008 fe36 	bl	800d3c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800475a:	2201      	movs	r2, #1
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	4821      	ldr	r0, [pc, #132]	; (80047e4 <W25qxx_ReadPage+0x170>)
 8004760:	f004 fd82 	bl	8009268 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004764:	f003 fe68 	bl	8008438 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e018      	b.n	80047a8 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d108      	bne.n	8004792 <W25qxx_ReadPage+0x11e>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d905      	bls.n	8004792 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004786:	4819      	ldr	r0, [pc, #100]	; (80047ec <W25qxx_ReadPage+0x178>)
 8004788:	f017 f992 	bl	801bab0 <puts>
			W25qxx_Delay(10);
 800478c:	200a      	movs	r0, #10
 800478e:	f011 f916 	bl	80159be <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4814      	ldr	r0, [pc, #80]	; (80047f0 <W25qxx_ReadPage+0x17c>)
 800479e:	f017 f901 	bl	801b9a4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	3301      	adds	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3e2      	bcc.n	8004776 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80047b0:	480e      	ldr	r0, [pc, #56]	; (80047ec <W25qxx_ReadPage+0x178>)
 80047b2:	f017 f97d 	bl	801bab0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80047b6:	6939      	ldr	r1, [r7, #16]
 80047b8:	480e      	ldr	r0, [pc, #56]	; (80047f4 <W25qxx_ReadPage+0x180>)
 80047ba:	f017 f8f3 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 80047be:	2064      	movs	r0, #100	; 0x64
 80047c0:	f011 f8fd 	bl	80159be <osDelay>
#endif
	W25qxx_Delay(1);
 80047c4:	2001      	movs	r0, #1
 80047c6:	f011 f8fa 	bl	80159be <osDelay>
	w25qxx.Lock = 0;
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <W25qxx_ReadPage+0x168>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20006db4 	.word	0x20006db4
 80047e0:	0802070c 	.word	0x0802070c
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	20005fbc 	.word	0x20005fbc
 80047ec:	08020530 	.word	0x08020530
 80047f0:	08020534 	.word	0x08020534
 80047f4:	08020748 	.word	0x08020748

080047f8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d802      	bhi.n	8004816 <W25qxx_ReadSector+0x1e>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004816:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4830      	ldr	r0, [pc, #192]	; (80048e4 <W25qxx_ReadSector+0xec>)
 8004824:	f017 f8be 	bl	801b9a4 <iprintf>
	W25qxx_Delay(100);
 8004828:	2064      	movs	r0, #100	; 0x64
 800482a:	f011 f8c8 	bl	80159be <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d306      	bcc.n	8004846 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004838:	482b      	ldr	r0, [pc, #172]	; (80048e8 <W25qxx_ReadSector+0xf0>)
 800483a:	f017 f939 	bl	801bab0 <puts>
		W25qxx_Delay(100);
 800483e:	2064      	movs	r0, #100	; 0x64
 8004840:	f011 f8bd 	bl	80159be <osDelay>
#endif
		return;
 8004844:	e048      	b.n	80048d8 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	441a      	add	r2, r3
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d905      	bls.n	8004860 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	e001      	b.n	8004864 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004864:	68b8      	ldr	r0, [r7, #8]
 8004866:	f7ff fdab 	bl	80043c0 <W25qxx_SectorToPage>
 800486a:	4602      	mov	r2, r0
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 800486e:	895b      	ldrh	r3, [r3, #10]
 8004870:	4619      	mov	r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	fbb3 f3f1 	udiv	r3, r3, r1
 8004878:	4413      	add	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 800487e:	895b      	ldrh	r3, [r3, #10]
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	fbb3 f1f2 	udiv	r1, r3, r2
 8004888:	fb02 f201 	mul.w	r2, r2, r1
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	69f9      	ldr	r1, [r7, #28]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff feec 	bl	8004674 <W25qxx_ReadPage>
		StartPage++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 80048a4:	895b      	ldrh	r3, [r3, #10]
 80048a6:	461a      	mov	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1a9a      	subs	r2, r3, r2
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <W25qxx_ReadSector+0xe8>)
 80048b4:	895b      	ldrh	r3, [r3, #10]
 80048b6:	461a      	mov	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dce1      	bgt.n	8004890 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 80048cc:	4807      	ldr	r0, [pc, #28]	; (80048ec <W25qxx_ReadSector+0xf4>)
 80048ce:	f017 f8ef 	bl	801bab0 <puts>
	W25qxx_Delay(100);
 80048d2:	2064      	movs	r0, #100	; 0x64
 80048d4:	f011 f873 	bl	80159be <osDelay>
#endif
}
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20006db4 	.word	0x20006db4
 80048e4:	0802076c 	.word	0x0802076c
 80048e8:	080207ac 	.word	0x080207ac
 80048ec:	080207cc 	.word	0x080207cc

080048f0 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	4611      	mov	r1, r2
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
 8004918:	2301      	movs	r3, #1
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8004966:	2309      	movs	r3, #9
 8004968:	e01b      	b.n	80049a2 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f9e6 	bl	8004d44 <_ZN10IridiumSBD13internalBeginEv>
 8004978:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fd1c 	bl	80053d0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004998:	2100      	movs	r1, #0
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fc66 	bl	800526c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 80049bc:	2309      	movs	r3, #9
 80049be:	e028      	b.n	8004a12 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <_ZN10IridiumSBD5sleepEv+0x30>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d101      	bne.n	80049da <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 80049d6:	230b      	movs	r3, #11
 80049d8:	e01b      	b.n	8004a12 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fb38 	bl	8005058 <_ZN10IridiumSBD13internalSleepEv>
 80049e8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fce4 	bl	80053d0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fc2e 	bl	800526c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a42:	f083 0301 	eor.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f923 	bl	8004c98 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <_ZN10IridiumSBD18getFirmwareVersionEPcj>:
   memcpy(&tm, localtime(&now), sizeof tm);
   return ISBD_SUCCESS;
}

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b07      	cmp	r3, #7
 8004a6c:	d801      	bhi.n	8004a72 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	e01e      	b.n	8004ab0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8004a72:	2301      	movs	r3, #1
 8004a74:	2201      	movs	r2, #1
 8004a76:	4910      	ldr	r1, [pc, #64]	; (8004ab8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fcb7 	bl	80053ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 faf7 	bl	800507c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f083 0301 	eor.w	r3, r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fbb4 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e002      	b.n	8004ab0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e000      	b.n	8004ab0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	080208a8 	.word	0x080208a8
 8004abc:	080208a0 	.word	0x080208a0
 8004ac0:	080208b4 	.word	0x080208b4

08004ac4 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004ada:	4918      	ldr	r1, [pc, #96]	; (8004b3c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fd2d 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004ae2:	e028      	b.n	8004b36 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 f80b 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004b06:	e00f      	b.n	8004b28 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b0e:	b25a      	sxtb	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 f820 	bl	8005b76 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	080208d0 	.word	0x080208d0

08004b40 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004b52:	4912      	ldr	r1, [pc, #72]	; (8004b9c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fcf1 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e01a      	b.n	8004b94 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 ffce 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004b70:	4013      	ands	r3, r2
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8004b92:	2300      	movs	r3, #0
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	0802091c 	.word	0x0802091c

08004ba0 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004bb6:	4918      	ldr	r1, [pc, #96]	; (8004c18 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fcbf 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004bbe:	e028      	b.n	8004c12 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 ff9d 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004be2:	e00f      	b.n	8004c04 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bea:	b25a      	sxtb	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 ffb2 	bl	8005b76 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08020968 	.word	0x08020968

08004c1c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c32:	4918      	ldr	r1, [pc, #96]	; (8004c94 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fc81 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c3a:	e028      	b.n	8004c8e <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 ff5f 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004c5e:	e00f      	b.n	8004c80 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c66:	b25a      	sxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	4013      	ands	r3, r2
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 ff74 	bl	8005b76 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	080209b0 	.word	0x080209b0

08004c98 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004caa:	4913      	ldr	r1, [pc, #76]	; (8004cf8 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fc45 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004cb2:	e01d      	b.n	8004cf0 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 ff23 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004cc0:	b25a      	sxtb	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 ff47 	bl	8005b76 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08020a80 	.word	0x08020a80

08004cfc <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e013      	b.n	8004d3a <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f001 fbee 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fc33 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
   }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b090      	sub	sp, #64	; 0x40
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8004d4c:	49b1      	ldr	r1, [pc, #708]	; (8005014 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fbf4 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004d5a:	f083 0301 	eor.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e150      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6e:	f083 0301 	eor.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fec1 	bl	8005b00 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fde6 	bl	8005950 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8004d84:	2101      	movs	r1, #1
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa70 	bl	800526c <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8004d92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8004d98:	f003 fb4e 	bl	8008438 <HAL_GetTick>
 8004d9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d9e:	f003 fb4b 	bl	8008438 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004daa:	429a      	cmp	r2, r3
 8004dac:	bf8c      	ite	hi
 8004dae:	2301      	movhi	r3, #1
 8004db0:	2300      	movls	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fa25 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ec      	beq.n	8004d9e <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	e120      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 faee 	bl	80053b4 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004dd8:	f003 fb2e 	bl	8008438 <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24
 8004dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004de2:	f083 0301 	eor.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004dec:	f003 fb24 	bl	8008438 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e02:	fb03 f301 	mul.w	r3, r3, r1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d201      	bcs.n	8004e0e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d018      	beq.n	8004e46 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8004e14:	2301      	movs	r3, #1
 8004e16:	2201      	movs	r2, #1
 8004e18:	497f      	ldr	r1, [pc, #508]	; (8005018 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fae6 	bl	80053ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8004e20:	4b7e      	ldr	r3, [pc, #504]	; (800501c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f926 	bl	800507c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9e6 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0cd      	beq.n	8004dde <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8004e42:	2304      	movs	r3, #4
 8004e44:	e0e1      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8004e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8004e54:	4972      	ldr	r1, [pc, #456]	; (8005020 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fb70 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8004e5c:	2305      	movs	r3, #5
 8004e5e:	e0d4      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8004e60:	4a70      	ldr	r2, [pc, #448]	; (8005024 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8004e62:	f107 0310 	add.w	r3, r7, #16
 8004e66:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	dc26      	bgt.n	8004ec4 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e7e:	4413      	add	r3, r2
 8004e80:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fb0a 	bl	80054a0 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004e8c:	4b63      	ldr	r3, [pc, #396]	; (800501c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8f0 	bl	800507c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f083 0301 	eor.w	r3, r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9ad 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	e0a8      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0a6      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec2:	e7d5      	b.n	8004e70 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004ec4:	4958      	ldr	r1, [pc, #352]	; (8005028 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fb38 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004ed8:	e000      	b.n	8004edc <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004eda:	4b55      	ldr	r3, [pc, #340]	; (8005030 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb2c 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004ee4:	4953      	ldr	r1, [pc, #332]	; (8005034 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb28 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fd8e 	bl	8004a1a <_ZN10IridiumSBD16enableRingAlertsEb>
 8004efe:	e00a      	b.n	8004f16 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fec1 	bl	8004c98 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004f20:	4945      	ldr	r1, [pc, #276]	; (8005038 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004f22:	e000      	b.n	8004f26 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004f24:	4945      	ldr	r1, [pc, #276]	; (800503c <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004f26:	2301      	movs	r3, #1
 8004f28:	2201      	movs	r2, #1
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa5e 	bl	80053ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004f30:	4b3a      	ldr	r3, [pc, #232]	; (800501c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f89e 	bl	800507c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f95b 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	e056      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e054      	b.n	800500a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	2208      	movs	r2, #8
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fd77 	bl	8004a5c <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004f6e:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004f76:	4932      	ldr	r1, [pc, #200]	; (8005040 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fadf 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004f86:	e027      	b.n	8004fd8 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004f88:	492e      	ldr	r1, [pc, #184]	; (8005044 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fad6 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f90:	f107 0308 	add.w	r3, r7, #8
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 faf6 	bl	8005588 <_ZN10IridiumSBD9diagprintEPKc>
 8004f9c:	492a      	ldr	r1, [pc, #168]	; (8005048 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 facc 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004fa4:	7a3b      	ldrb	r3, [r7, #8]
 8004fa6:	2b54      	cmp	r3, #84	; 0x54
 8004fa8:	d116      	bne.n	8004fd8 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004faa:	7a7b      	ldrb	r3, [r7, #9]
 8004fac:	2b41      	cmp	r3, #65	; 0x41
 8004fae:	d113      	bne.n	8004fd8 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f017 fe2a 	bl	801cc14 <strtoul>
 8004fc0:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	bf94      	ite	ls
 8004fcc:	2301      	movls	r3, #1
 8004fce:	2300      	movhi	r3, #0
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004fd8:	491c      	ldr	r1, [pc, #112]	; (800504c <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 faae 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004fec:	e000      	b.n	8004ff0 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 faa2 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004ff8:	4915      	ldr	r1, [pc, #84]	; (8005050 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa9e 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8005000:	4914      	ldr	r1, [pc, #80]	; (8005054 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa9a 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3738      	adds	r7, #56	; 0x38
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	08020ba0 	.word	0x08020ba0
 8005018:	08020bb8 	.word	0x08020bb8
 800501c:	080208a0 	.word	0x080208a0
 8005020:	08020bbc 	.word	0x08020bbc
 8005024:	08020c90 	.word	0x08020c90
 8005028:	08020bd4 	.word	0x08020bd4
 800502c:	08020be4 	.word	0x08020be4
 8005030:	08020be8 	.word	0x08020be8
 8005034:	08020bf0 	.word	0x08020bf0
 8005038:	08020bfc 	.word	0x08020bfc
 800503c:	08020c0c 	.word	0x08020c0c
 8005040:	08020c1c 	.word	0x08020c1c
 8005044:	08020c34 	.word	0x08020c34
 8005048:	08020c4c 	.word	0x08020c4c
 800504c:	08020c50 	.word	0x08020c50
 8005050:	08020c64 	.word	0x08020c64
 8005054:	08020c74 	.word	0x08020c74

08005058 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 800506a:	230a      	movs	r3, #10
 800506c:	e000      	b.n	8005070 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b08b      	sub	sp, #44	; 0x2c
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 800508a:	495d      	ldr	r1, [pc, #372]	; (8005200 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa55 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8005092:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fa77 	bl	8005588 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 800509a:	68fc      	ldr	r4, [r7, #12]
 800509c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800509e:	f7fb f8a7 	bl	80001f0 <strlen>
 80050a2:	4603      	mov	r3, r0
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ac:	4620      	mov	r0, r4
 80050ae:	f009 fba6 	bl	800e7fe <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 80050b2:	4954      	ldr	r1, [pc, #336]	; (8005204 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa41 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	461a      	mov	r2, r3
 80050c4:	2100      	movs	r1, #0
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f015 fd40 	bl	801ab4c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 80050cc:	2300      	movs	r3, #0
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 80050de:	2302      	movs	r3, #2
 80050e0:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 80050e2:	f003 f9a9 	bl	8008438 <HAL_GetTick>
 80050e6:	61b8      	str	r0, [r7, #24]
 80050e8:	f003 f9a6 	bl	8008438 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	1ad2      	subs	r2, r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050f8:	4619      	mov	r1, r3
 80050fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050fe:	fb03 f301 	mul.w	r3, r3, r1
 8005102:	429a      	cmp	r2, r3
 8005104:	bf34      	ite	cc
 8005106:	2301      	movcc	r3, #1
 8005108:	2300      	movcs	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d072      	beq.n	80051f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f879 	bl	8005208 <_ZN10IridiumSBD9cancelledEv>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 800511c:	2300      	movs	r3, #0
 800511e:	e06b      	b.n	80051f8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fbb3 	bl	800588c <_ZN10IridiumSBD17filteredavailableEv>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfcc      	ite	gt
 800512c:	2301      	movgt	r3, #1
 800512e:	2300      	movle	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0d8      	beq.n	80050e8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fbc4 	bl	80058c4 <_ZN10IridiumSBD12filteredreadEv>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03b      	beq.n	80051be <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d01d      	beq.n	800518e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8005152:	e034      	b.n	80051be <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4413      	add	r3, r2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	7dfa      	ldrb	r2, [r7, #23]
 800515e:	429a      	cmp	r2, r3
 8005160:	d10b      	bne.n	800517a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3301      	adds	r3, #1
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4413      	add	r3, r2
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d121      	bne.n	80051b8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8005174:	2301      	movs	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8005178:	e01e      	b.n	80051b8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	7dfa      	ldrb	r2, [r7, #23]
 8005180:	429a      	cmp	r2, r3
 8005182:	d101      	bne.n	8005188 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8005188:	2300      	movs	r3, #0
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 800518c:	e014      	b.n	80051b8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b0d      	cmp	r3, #13
 8005198:	d002      	beq.n	80051a0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b01      	cmp	r3, #1
 800519e:	dc02      	bgt.n	80051a6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 80051a0:	2302      	movs	r3, #2
 80051a2:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 80051a4:	e00a      	b.n	80051bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	60ba      	str	r2, [r7, #8]
 80051ac:	7dfa      	ldrb	r2, [r7, #23]
 80051ae:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	607b      	str	r3, [r7, #4]
               break;
 80051b6:	e001      	b.n	80051bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 80051bc:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051c2:	4413      	add	r3, r2
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	7dfa      	ldrb	r2, [r7, #23]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10a      	bne.n	80051e2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	3301      	adds	r3, #1
 80051d0:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d6:	4413      	add	r3, r2
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1a0      	bne.n	8005120 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00a      	b.n	80051f8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	7dfa      	ldrb	r2, [r7, #23]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d101      	bne.n	80051f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 80051f0:	2300      	movs	r3, #0
 80051f2:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 80051f4:	e794      	b.n	8005120 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	372c      	adds	r7, #44	; 0x2c
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}
 8005200:	08020dd4 	.word	0x08020dd4
 8005204:	08020c4c 	.word	0x08020c4c

08005208 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d008      	beq.n	8005238 <_ZN10IridiumSBD9cancelledEv+0x30>
 8005226:	2110      	movs	r1, #16
 8005228:	480e      	ldr	r0, [pc, #56]	; (8005264 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 800522a:	f004 f805 	bl	8009238 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <_ZN10IridiumSBD9cancelledEv+0x30>
 8005234:	2301      	movs	r3, #1
 8005236:	e000      	b.n	800523a <_ZN10IridiumSBD9cancelledEv+0x32>
 8005238:	2300      	movs	r3, #0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8005246:	4908      	ldr	r1, [pc, #32]	; (8005268 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f977 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 800524e:	f7ff fb61 	bl	8004914 <_Z12ISBDCallbackv>
 8005252:	4603      	mov	r3, r0
 8005254:	f083 0301 	eor.w	r3, r3, #1
 8005258:	b2db      	uxtb	r3, r3
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40020800 	.word	0x40020800
 8005268:	08020dec 	.word	0x08020dec

0800526c <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	f083 0301 	eor.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800528c:	2b00      	cmp	r3, #0
 800528e:	d011      	beq.n	80052b4 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d04c      	beq.n	8005336 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f84e 	bl	8005348 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d018      	beq.n	80052ec <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 80052ba:	4921      	ldr	r1, [pc, #132]	; (8005340 <_ZN10IridiumSBD5powerEb+0xd4>)
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f93d 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 80052cc:	2101      	movs	r1, #1
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f848 	bl	8005364 <_ZN10IridiumSBD11setSleepPinEh>
 80052d4:	e003      	b.n	80052de <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 80052d6:	2101      	movs	r1, #1
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff fc9f 	bl	8004c1c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80052de:	f003 f8ab 	bl	8008438 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80052ea:	e025      	b.n	8005338 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80052ec:	f003 f8a4 	bl	8008438 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005302:	d205      	bcs.n	8005310 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800530a:	4618      	mov	r0, r3
 800530c:	f003 f8a0 	bl	8008450 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8005310:	490c      	ldr	r1, [pc, #48]	; (8005344 <_ZN10IridiumSBD5powerEb+0xd8>)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f912 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f81d 	bl	8005364 <_ZN10IridiumSBD11setSleepPinEh>
 800532a:	e005      	b.n	8005338 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 800532c:	2100      	movs	r1, #0
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fc74 	bl	8004c1c <_ZN10IridiumSBD10enable9603Eb>
 8005334:	e000      	b.n	8005338 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8005336:	bf00      	nop
      }
   }
}
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	08020e40 	.word	0x08020e40
 8005344:	08020e58 	.word	0x08020e58

08005348 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8f2 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	08020e70 	.word	0x08020e70

08005364 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8005370:	2201      	movs	r2, #1
 8005372:	2108      	movs	r1, #8
 8005374:	480b      	ldr	r0, [pc, #44]	; (80053a4 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8005376:	f003 ff77 	bl	8009268 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800537a:	490b      	ldr	r1, [pc, #44]	; (80053a8 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f8dd 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d104      	bne.n	8005392 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8005388:	4908      	ldr	r1, [pc, #32]	; (80053ac <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8d6 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8005390:	e003      	b.n	800539a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8005392:	4907      	ldr	r1, [pc, #28]	; (80053b0 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8d1 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40020800 	.word	0x40020800
 80053a8:	08020e9c 	.word	0x08020e9c
 80053ac:	08020eb8 	.word	0x08020eb8
 80053b0:	08020ec0 	.word	0x08020ec0

080053b4 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80053bc:	4903      	ldr	r1, [pc, #12]	; (80053cc <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8bc 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08020ec8 	.word	0x08020ec8

080053d0 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8ae 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	08020ee8 	.word	0x08020ee8

080053ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	460b      	mov	r3, r1
 80053fc:	71fb      	strb	r3, [r7, #7]
 80053fe:	4613      	mov	r3, r2
 8005400:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005408:	4922      	ldr	r1, [pc, #136]	; (8005494 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8de 	bl	80055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f8da 	bl	80055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005418:	79bb      	ldrb	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800541e:	491e      	ldr	r1, [pc, #120]	; (8005498 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f8d3 	bl	80055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff96 	bl	8006368 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800543c:	e025      	b.n	800548a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f001 f858 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005454:	21ff      	movs	r1, #255	; 0xff
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fa4a 	bl	80048f0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 ff80 	bl	8006368 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546c:	4618      	mov	r0, r3
 800546e:	f001 f891 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 8005482:	4906      	ldr	r1, [pc, #24]	; (800549c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f859 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	08020f04 	.word	0x08020f04
 8005498:	08020c4c 	.word	0x08020c4c
 800549c:	08020ccc 	.word	0x08020ccc

080054a0 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80054aa:	4921      	ldr	r1, [pc, #132]	; (8005530 <_ZN10IridiumSBD4sendEPKc+0x90>)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f88d 	bl	80055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8af 	bl	8005618 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80054ba:	491e      	ldr	r1, [pc, #120]	; (8005534 <_ZN10IridiumSBD4sendEPKc+0x94>)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f885 	bl	80055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 ff56 	bl	8006384 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80054d8:	e025      	b.n	8005526 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f001 f80a 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	21ff      	movs	r1, #255	; 0xff
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff f9fc 	bl	80048f0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 ff40 	bl	8006384 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005508:	4618      	mov	r0, r3
 800550a:	f001 f843 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800551e:	4906      	ldr	r1, [pc, #24]	; (8005538 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f80b 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	08020f04 	.word	0x08020f04
 8005534:	08020c4c 	.word	0x08020c4c
 8005538:	08020ccc 	.word	0x08020ccc

0800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	60fa      	str	r2, [r7, #12]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff f9ec 	bl	800493c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8005564:	e7f1      	b.n	800554a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005566:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8005568:	687c      	ldr	r4, [r7, #4]
 800556a:	6838      	ldr	r0, [r7, #0]
 800556c:	f7fa fe40 	bl	80001f0 <strlen>
 8005570:	4603      	mov	r3, r0
 8005572:	b29a      	uxth	r2, r3
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	4620      	mov	r0, r4
 800557c:	f009 f93f 	bl	800e7fe <HAL_UART_Transmit>
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
   while (*str)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	603a      	str	r2, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff f9c9 	bl	800493c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80055aa:	e7f2      	b.n	8005592 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80055ac:	687c      	ldr	r4, [r7, #4]
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	f7fa fe1e 	bl	80001f0 <strlen>
 80055b4:	4603      	mov	r3, r0
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	4620      	mov	r0, r4
 80055c0:	f009 f91d 	bl	800e7fe <HAL_UART_Transmit>
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd90      	pop	{r4, r7, pc}

080055cc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80055e4:	7afb      	ldrb	r3, [r7, #11]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f998 	bl	8004924 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 80055f4:	e7f1      	b.n	80055da <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80055f6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 80055f8:	687c      	ldr	r4, [r7, #4]
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	f7fa fdf8 	bl	80001f0 <strlen>
 8005600:	4603      	mov	r3, r0
 8005602:	b29a      	uxth	r2, r3
 8005604:	f04f 33ff 	mov.w	r3, #4294967295
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	4620      	mov	r0, r4
 800560c:	f009 f8f7 	bl	800e7fe <HAL_UART_Transmit>
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bd90      	pop	{r4, r7, pc}

08005618 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
   while (*str)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	603a      	str	r2, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f975 	bl	8004924 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800563a:	e7f2      	b.n	8005622 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800563c:	687c      	ldr	r4, [r7, #4]
 800563e:	6838      	ldr	r0, [r7, #0]
 8005640:	f7fa fdd6 	bl	80001f0 <strlen>
 8005644:	4603      	mov	r3, r0
 8005646:	b29a      	uxth	r2, r3
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	4620      	mov	r0, r4
 8005650:	f009 f8d5 	bl	800e7fe <HAL_UART_Transmit>
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bd90      	pop	{r4, r7, pc}

0800565c <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f959 	bl	8004924 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff54 	bl	800553c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	08020f0c 	.word	0x08020f0c

080056a0 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f949 	bl	8005950 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4610      	mov	r0, r2
 80056d8:	4798      	blx	r3
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dc0d      	bgt.n	80056fc <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e6:	f083 0301 	eor.w	r3, r3, #1
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fa67 	bl	8005bc4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dd07      	ble.n	800570c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d101      	bne.n	800570c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80b6 	beq.w	8005880 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	e004      	b.n	8005740 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa5e 	bl	8005bf8 <_ZN10IridiumSBD10i2cSerReadEv>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff89 	bl	800565c <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 808d 	beq.w	8005872 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	429a      	cmp	r2, r3
 8005764:	f040 8085 	bne.w	8005872 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10d      	bne.n	800579e <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff7a 	bl	800567c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3f      	ldr	r2, [pc, #252]	; (8005888 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 800578c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 800579c:	e06e      	b.n	800587c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800579e:	f002 fe4b 	bl	8008438 <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057cc:	f083 0301 	eor.w	r3, r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9f4 	bl	8005bc4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80057e2:	f002 fe29 	bl	8008438 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d801      	bhi.n	80057f4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d000      	beq.n	80057fc <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 80057fa:	e7d3      	b.n	80057a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005802:	f083 0301 	eor.w	r3, r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f89f 	bl	8005950 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4610      	mov	r0, r2
 800582c:	4798      	blx	r3
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9bd 	bl	8005bc4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8005870:	e004      	b.n	800587c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 8005872:	7bfa      	ldrb	r2, [r7, #15]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800587a:	e720      	b.n	80056be <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 800587c:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800587e:	e71e      	b.n	80056be <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	080219bc 	.word	0x080219bc

0800588c <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ff03 	bl	80056a0 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 80058ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80058b2:	d001      	beq.n	80058b8 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 80058b4:	2201      	movs	r2, #1
 80058b6:	e000      	b.n	80058ba <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 80058b8:	2200      	movs	r2, #0
 80058ba:	4413      	add	r3, r2
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fee7 	bl	80056a0 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058de:	429a      	cmp	r2, r3
 80058e0:	d91c      	bls.n	800591c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005900:	429a      	cmp	r2, r3
 8005902:	d109      	bne.n	8005918 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005908:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	e012      	b.n	8005942 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d00a      	beq.n	800593e <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800592e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f04f 32ff 	mov.w	r2, #4294967295
 8005936:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	e001      	b.n	8005942 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	080219bc 	.word	0x080219bc

08005950 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8005958:	f002 fd6e 	bl	8008438 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800596c:	4293      	cmp	r3, r2
 800596e:	bf2c      	ite	cs
 8005970:	2301      	movcs	r3, #1
 8005972:	2300      	movcc	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80be 	beq.w	8005af8 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f000 fdb7 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	21fd      	movs	r1, #253	; 0xfd
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe ffa9 	bl	80048f0 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fdf6 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059b2:	2202      	movs	r2, #2
 80059b4:	4619      	mov	r1, r3
 80059b6:	f000 fd90 	bl	80064da <_ZN7TwoWire11requestFromEhh>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b02      	cmp	r3, #2
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01d      	beq.n	8005a06 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
 80059dc:	4603      	mov	r3, r0
 80059de:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4610      	mov	r0, r2
 80059f0:	4798      	blx	r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	b21a      	sxth	r2, r3
 80059fc:	7b3b      	ldrb	r3, [r7, #12]
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	4313      	orrs	r3, r2
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005a06:	89fb      	ldrh	r3, [r7, #14]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d06f      	beq.n	8005aec <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fd71 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	21ff      	movs	r1, #255	; 0xff
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe ff63 	bl	80048f0 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fdb0 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005a34:	89fb      	ldrh	r3, [r7, #14]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d92d      	bls.n	8005a96 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8005a44:	2300      	movs	r3, #0
 8005a46:	2208      	movs	r2, #8
 8005a48:	f000 fd0c 	bl	8006464 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00f      	beq.n	8005a8e <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	4603      	mov	r3, r0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8e2 	bl	8005c50 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8005a8c:	e7de      	b.n	8005a4c <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8005a8e:	89fb      	ldrh	r3, [r7, #14]
 8005a90:	3b08      	subs	r3, #8
 8005a92:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005a94:	e7ce      	b.n	8005a34 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aa0:	89fa      	ldrh	r2, [r7, #14]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f000 fd18 	bl	80064da <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4610      	mov	r0, r2
 8005adc:	4798      	blx	r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8b3 	bl	8005c50 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005aea:	e7de      	b.n	8005aaa <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005aec:	f002 fca4 	bl	8008438 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f000 fcf3 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	2110      	movs	r1, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fee5 	bl	80048f0 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd32 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f000 fccc 	bl	80064da <_ZN7TwoWire11requestFromEhh>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	4603      	mov	r3, r0
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fcb6 	bl	8006500 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	2110      	movs	r1, #16
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fea8 	bl	80048f0 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	78f9      	ldrb	r1, [r7, #3]
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fcec 	bl	8006594 <_ZN7TwoWire15endTransmissionEv>
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	425a      	negs	r2, r3
 8005be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005be8:	bf58      	it	pl
 8005bea:	4253      	negpl	r3, r2
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d102      	bne.n	8005c16 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	e016      	b.n	8005c44 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005c24:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	425a      	negs	r2, r3
 8005c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005c38:	bf58      	it	pl
 8005c3a:	4253      	negpl	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c62:	3301      	adds	r3, #1
 8005c64:	425a      	negs	r2, r3
 8005c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005c6e:	bf58      	it	pl
 8005c70:	4253      	negpl	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d00b      	beq.n	8005c98 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	f107 001c 	add.w	r0, r7, #28
 8005cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f107 031c 	add.w	r3, r7, #28
 8005cbe:	2244      	movs	r2, #68	; 0x44
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f014 ff1b 	bl	801aafc <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	2220      	movs	r2, #32
 8005cce:	4962      	ldr	r1, [pc, #392]	; (8005e58 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005cd0:	f008 fd95 	bl	800e7fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	221c      	movs	r2, #28
 8005cdc:	495f      	ldr	r1, [pc, #380]	; (8005e5c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8005cde:	f008 fd8e 	bl	800e7fe <HAL_UART_Transmit>
	while(!this->isConnected()){
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff f80a 	bl	8004cfc <_ZN10IridiumSBD11isConnectedEv>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02c      	beq.n	8005d4e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	2235      	movs	r2, #53	; 0x35
 8005cfc:	4958      	ldr	r1, [pc, #352]	; (8005e60 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8005cfe:	f008 fd7e 	bl	800e7fe <HAL_UART_Transmit>
		HAL_Delay(500);
 8005d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d06:	f002 fba3 	bl	8008450 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d10:	2203      	movs	r2, #3
 8005d12:	4954      	ldr	r1, [pc, #336]	; (8005e64 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8005d14:	f008 fd73 	bl	800e7fe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d1c:	f002 fb98 	bl	8008450 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	2203      	movs	r2, #3
 8005d28:	494f      	ldr	r1, [pc, #316]	; (8005e68 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8005d2a:	f008 fd68 	bl	800e7fe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d32:	f002 fb8d 	bl	8008450 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	494b      	ldr	r1, [pc, #300]	; (8005e6c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8005d40:	f008 fd5d 	bl	800e7fe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d48:	f002 fb82 	bl	8008450 <HAL_Delay>
	while(!this->isConnected()){
 8005d4c:	e7c9      	b.n	8005ce2 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295
 8005d54:	2206      	movs	r2, #6
 8005d56:	4946      	ldr	r1, [pc, #280]	; (8005e70 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d58:	f008 fd51 	bl	800e7fe <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	221f      	movs	r2, #31
 8005d64:	4943      	ldr	r1, [pc, #268]	; (8005e74 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8005d66:	f008 fd4a 	bl	800e7fe <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fe fea9 	bl	8004ac4 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	2206      	movs	r2, #6
 8005d7a:	493d      	ldr	r1, [pc, #244]	; (8005e70 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d7c:	f008 fd3f 	bl	800e7fe <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	222c      	movs	r2, #44	; 0x2c
 8005d88:	493b      	ldr	r1, [pc, #236]	; (8005e78 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8005d8a:	f008 fd38 	bl	800e7fe <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe fed6 	bl	8004b40 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f083 0301 	eor.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005da0:	f240 104d 	movw	r0, #333	; 0x14d
 8005da4:	f002 fb54 	bl	8008450 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005da8:	e7f1      	b.n	8005d8e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	2206      	movs	r2, #6
 8005db2:	492f      	ldr	r1, [pc, #188]	; (8005e70 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005db4:	f008 fd23 	bl	800e7fe <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbe:	2217      	movs	r2, #23
 8005dc0:	492e      	ldr	r1, [pc, #184]	; (8005e7c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8005dc2:	f008 fd1c 	bl	800e7fe <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fe fee9 	bl	8004ba0 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	2206      	movs	r2, #6
 8005dd6:	4926      	ldr	r1, [pc, #152]	; (8005e70 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005dd8:	f008 fd11 	bl	800e7fe <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295
 8005de2:	2211      	movs	r2, #17
 8005de4:	4926      	ldr	r1, [pc, #152]	; (8005e80 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8005de6:	f008 fd0a 	bl	800e7fe <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fe fdb2 	bl	8004954 <_ZN10IridiumSBD5beginEv>
 8005df0:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4920      	ldr	r1, [pc, #128]	; (8005e84 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8005e02:	f008 fcfc 	bl	800e7fe <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f008 fcf5 	bl	800e7fe <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8b0 	bl	8005f80 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e011      	b.n	8005e48 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	2207      	movs	r2, #7
 8005e2c:	4916      	ldr	r1, [pc, #88]	; (8005e88 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8005e2e:	f008 fce6 	bl	800e7fe <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3e:	2210      	movs	r2, #16
 8005e40:	4913      	ldr	r1, [pc, #76]	; (8005e90 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8005e42:	f008 fcdc 	bl	800e7fe <HAL_UART_Transmit>

	return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e52:	b004      	add	sp, #16
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	08020f8c 	.word	0x08020f8c
 8005e5c:	08020fb0 	.word	0x08020fb0
 8005e60:	08020fcc 	.word	0x08020fcc
 8005e64:	08021000 	.word	0x08021000
 8005e68:	08021004 	.word	0x08021004
 8005e6c:	08021008 	.word	0x08021008
 8005e70:	080208a0 	.word	0x080208a0
 8005e74:	08021010 	.word	0x08021010
 8005e78:	08021030 	.word	0x08021030
 8005e7c:	08021060 	.word	0x08021060
 8005e80:	08021078 	.word	0x08021078
 8005e84:	0802108c 	.word	0x0802108c
 8005e88:	08021098 	.word	0x08021098
 8005e8c:	080210a0 	.word	0x080210a0
 8005e90:	080210b0 	.word	0x080210b0

08005e94 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b08b      	sub	sp, #44	; 0x2c
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	221d      	movs	r2, #29
 8005ea4:	492f      	ldr	r1, [pc, #188]	; (8005f64 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005ea6:	f008 fcaa 	bl	800e7fe <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	221d      	movs	r2, #29
 8005eb2:	492d      	ldr	r1, [pc, #180]	; (8005f68 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005eb4:	f008 fca3 	bl	800e7fe <HAL_UART_Transmit>
	int err = this->sleep();
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fe fd76 	bl	80049aa <_ZN10IridiumSBD5sleepEv>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d017      	beq.n	8005ef6 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005ec6:	f107 0308 	add.w	r3, r7, #8
 8005eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ecc:	4927      	ldr	r1, [pc, #156]	; (8005f6c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f015 feba 	bl	801bc48 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005ed4:	687c      	ldr	r4, [r7, #4]
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa f988 	bl	80001f0 <strlen>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f107 0108 	add.w	r1, r7, #8
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	4620      	mov	r0, r4
 8005eee:	f008 fc86 	bl	800e7fe <HAL_UART_Transmit>
		return false;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e032      	b.n	8005f5c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8005efc:	2204      	movs	r2, #4
 8005efe:	491c      	ldr	r1, [pc, #112]	; (8005f70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005f00:	f008 fc7d 	bl	800e7fe <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	2218      	movs	r2, #24
 8005f0c:	4919      	ldr	r1, [pc, #100]	; (8005f74 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005f0e:	f008 fc76 	bl	800e7fe <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005f12:	2100      	movs	r1, #0
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fe fe43 	bl	8004ba0 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f20:	2204      	movs	r2, #4
 8005f22:	4913      	ldr	r1, [pc, #76]	; (8005f70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005f24:	f008 fc6b 	bl	800e7fe <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	2227      	movs	r2, #39	; 0x27
 8005f30:	4911      	ldr	r1, [pc, #68]	; (8005f78 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005f32:	f008 fc64 	bl	800e7fe <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005f36:	2100      	movs	r1, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fe fdc3 	bl	8004ac4 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295
 8005f44:	2204      	movs	r2, #4
 8005f46:	490a      	ldr	r1, [pc, #40]	; (8005f70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005f48:	f008 fc59 	bl	800e7fe <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	2220      	movs	r2, #32
 8005f54:	4909      	ldr	r1, [pc, #36]	; (8005f7c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005f56:	f008 fc52 	bl	800e7fe <HAL_UART_Transmit>
	return true;
 8005f5a:	2301      	movs	r3, #1
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	372c      	adds	r7, #44	; 0x2c
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}
 8005f64:	080210c4 	.word	0x080210c4
 8005f68:	080210e4 	.word	0x080210e4
 8005f6c:	08021104 	.word	0x08021104
 8005f70:	080208a0 	.word	0x080208a0
 8005f74:	08021120 	.word	0x08021120
 8005f78:	0802113c 	.word	0x0802113c
 8005f7c:	08021164 	.word	0x08021164

08005f80 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	220c      	movs	r2, #12
 8005f94:	4948      	ldr	r1, [pc, #288]	; (80060b8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005f96:	f008 fc32 	bl	800e7fe <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d107      	bne.n	8005fb0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	2211      	movs	r2, #17
 8005fa8:	4944      	ldr	r1, [pc, #272]	; (80060bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005faa:	f008 fc28 	bl	800e7fe <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005fae:	e07f      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d107      	bne.n	8005fc6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	2212      	movs	r2, #18
 8005fbe:	4940      	ldr	r1, [pc, #256]	; (80060c0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005fc0:	f008 fc1d 	bl	800e7fe <HAL_UART_Transmit>
}
 8005fc4:	e074      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d107      	bne.n	8005fdc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	2212      	movs	r2, #18
 8005fd4:	493b      	ldr	r1, [pc, #236]	; (80060c4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005fd6:	f008 fc12 	bl	800e7fe <HAL_UART_Transmit>
}
 8005fda:	e069      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d107      	bne.n	8005ff2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe8:	220d      	movs	r2, #13
 8005fea:	4937      	ldr	r1, [pc, #220]	; (80060c8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005fec:	f008 fc07 	bl	800e7fe <HAL_UART_Transmit>
}
 8005ff0:	e05e      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d107      	bne.n	8006008 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffe:	2224      	movs	r2, #36	; 0x24
 8006000:	4932      	ldr	r1, [pc, #200]	; (80060cc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8006002:	f008 fbfc 	bl	800e7fe <HAL_UART_Transmit>
}
 8006006:	e053      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d107      	bne.n	800601e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f04f 33ff 	mov.w	r3, #4294967295
 8006014:	2215      	movs	r2, #21
 8006016:	492e      	ldr	r1, [pc, #184]	; (80060d0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8006018:	f008 fbf1 	bl	800e7fe <HAL_UART_Transmit>
}
 800601c:	e048      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b07      	cmp	r3, #7
 8006022:	d107      	bne.n	8006034 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	2218      	movs	r2, #24
 800602c:	4929      	ldr	r1, [pc, #164]	; (80060d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 800602e:	f008 fbe6 	bl	800e7fe <HAL_UART_Transmit>
}
 8006032:	e03d      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	2b08      	cmp	r3, #8
 8006038:	d107      	bne.n	800604a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	220f      	movs	r2, #15
 8006042:	4925      	ldr	r1, [pc, #148]	; (80060d8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8006044:	f008 fbdb 	bl	800e7fe <HAL_UART_Transmit>
}
 8006048:	e032      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	2b09      	cmp	r3, #9
 800604e:	d107      	bne.n	8006060 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	220d      	movs	r2, #13
 8006058:	4920      	ldr	r1, [pc, #128]	; (80060dc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 800605a:	f008 fbd0 	bl	800e7fe <HAL_UART_Transmit>
}
 800605e:	e027      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	2b0a      	cmp	r3, #10
 8006064:	d107      	bne.n	8006076 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	220d      	movs	r2, #13
 800606e:	491c      	ldr	r1, [pc, #112]	; (80060e0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8006070:	f008 fbc5 	bl	800e7fe <HAL_UART_Transmit>
}
 8006074:	e01c      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	2b0b      	cmp	r3, #11
 800607a:	d107      	bne.n	800608c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	2210      	movs	r2, #16
 8006084:	4917      	ldr	r1, [pc, #92]	; (80060e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8006086:	f008 fbba 	bl	800e7fe <HAL_UART_Transmit>
}
 800608a:	e011      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b14      	cmp	r3, #20
 8006090:	d107      	bne.n	80060a2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f04f 33ff 	mov.w	r3, #4294967295
 8006098:	2216      	movs	r2, #22
 800609a:	4913      	ldr	r1, [pc, #76]	; (80060e8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 800609c:	f008 fbaf 	bl	800e7fe <HAL_UART_Transmit>
}
 80060a0:	e006      	b.n	80060b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	220b      	movs	r2, #11
 80060aa:	4910      	ldr	r1, [pc, #64]	; (80060ec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 80060ac:	f008 fba7 	bl	800e7fe <HAL_UART_Transmit>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	08021184 	.word	0x08021184
 80060bc:	08021190 	.word	0x08021190
 80060c0:	080211a0 	.word	0x080211a0
 80060c4:	080211b4 	.word	0x080211b4
 80060c8:	080211c8 	.word	0x080211c8
 80060cc:	080211d4 	.word	0x080211d4
 80060d0:	080211f8 	.word	0x080211f8
 80060d4:	0802120c 	.word	0x0802120c
 80060d8:	08021224 	.word	0x08021224
 80060dc:	08021234 	.word	0x08021234
 80060e0:	08021240 	.word	0x08021240
 80060e4:	0802124c 	.word	0x0802124c
 80060e8:	0802125c 	.word	0x0802125c
 80060ec:	08021274 	.word	0x08021274

080060f0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
   {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2205      	movs	r2, #5
 800610a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2208      	movs	r2, #8
 800612a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2210      	movs	r2, #16
 8006132:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	79fa      	ldrb	r2, [r7, #7]
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	221e      	movs	r2, #30
 8006160:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	221e      	movs	r2, #30
 8006168:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006172:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	22f0      	movs	r2, #240	; 0xf0
 800617a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f04f 32ff 	mov.w	r2, #4294967295
 8006184:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a0d      	ldr	r2, [pc, #52]	; (800620c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 80061d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a0b      	ldr	r2, [pc, #44]	; (800620c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 80061e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	080219bc 	.word	0x080219bc

08006210 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8006210:	b598      	push	{r3, r4, r7, lr}
 8006212:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <MRT_Static_Iridium_Constructor+0x28>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800621c:	20e4      	movs	r0, #228	; 0xe4
 800621e:	f013 fb57 	bl	80198d0 <_Znwj>
 8006222:	4603      	mov	r3, r0
 8006224:	461c      	mov	r4, r3
 8006226:	2263      	movs	r2, #99	; 0x63
 8006228:	4904      	ldr	r1, [pc, #16]	; (800623c <MRT_Static_Iridium_Constructor+0x2c>)
 800622a:	4620      	mov	r0, r4
 800622c:	f7ff ff60 	bl	80060f0 <_ZN10IridiumSBDC1ER7TwoWireh>
 8006230:	4b01      	ldr	r3, [pc, #4]	; (8006238 <MRT_Static_Iridium_Constructor+0x28>)
 8006232:	601c      	str	r4, [r3, #0]
	}
}
 8006234:	bf00      	nop
 8006236:	bd98      	pop	{r3, r4, r7, pc}
 8006238:	2000043c 	.word	0x2000043c
 800623c:	200004f8 	.word	0x200004f8

08006240 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <MRT_Static_Iridium_Destructor+0x1c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <MRT_Static_Iridium_Destructor+0x1c>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
	}
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	2000043c 	.word	0x2000043c

08006260 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 8006260:	b084      	sub	sp, #16
 8006262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006264:	b08f      	sub	sp, #60	; 0x3c
 8006266:	af0e      	add	r7, sp, #56	; 0x38
 8006268:	f107 0418 	add.w	r4, r7, #24
 800626c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8006270:	f7ff ffce 	bl	8006210 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <MRT_Static_Iridium_Setup+0x50>)
 8006276:	681e      	ldr	r6, [r3, #0]
 8006278:	466d      	mov	r5, sp
 800627a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800627e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800628e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006292:	f107 0318 	add.w	r3, r7, #24
 8006296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006298:	4630      	mov	r0, r6
 800629a:	f7ff fd03 	bl	8005ca4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3704      	adds	r7, #4
 80062a4:	46bd      	mov	sp, r7
 80062a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80062aa:	b004      	add	sp, #16
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000043c 	.word	0x2000043c

080062b4 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <MRT_Static_Iridium_Shutdown+0x2c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fde8 	bl	8005e94 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80062d0:	f7ff ffb6 	bl	8006240 <MRT_Static_Iridium_Destructor>
	return b;
 80062d4:	79fb      	ldrb	r3, [r7, #7]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	2000043c 	.word	0x2000043c

080062e4 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <_ZN5Print5writeEPKc+0x14>
 80062f4:	2300      	movs	r3, #0
 80062f6:	e00d      	b.n	8006314 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3304      	adds	r3, #4
 80062fe:	681c      	ldr	r4, [r3, #0]
 8006300:	6838      	ldr	r0, [r7, #0]
 8006302:	f7f9 ff75 	bl	80001f0 <strlen>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	47a0      	blx	r4
 8006310:	4603      	mov	r3, r0
 8006312:	bf00      	nop
    }
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}

0800631c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1e5a      	subs	r2, r3, #1
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	4790      	blx	r2
 8006354:	4602      	mov	r2, r0
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800635c:	e7e6      	b.n	800632c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800635e:	697b      	ldr	r3, [r7, #20]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f805 	bl	8006384 <_ZN5Print5printEPKc>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  return write(str);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ffa7 	bl	80062e4 <_ZN5Print5writeEPKc>
 8006396:	4603      	mov	r3, r0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <_ZN5PrintC1Ev+0x24>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	080219d0 	.word	0x080219d0

080063c8 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ffe4 	bl	80063a0 <_ZN5PrintC1Ev>
 80063d8:	4a05      	ldr	r2, [pc, #20]	; (80063f0 <_ZN6StreamC1Ev+0x28>)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063e4:	609a      	str	r2, [r3, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	08021a00 	.word	0x08021a00

080063f4 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ffe1 	bl	80063c8 <_ZN6StreamC1Ev>
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3390      	adds	r3, #144	; 0x90
 8006416:	2220      	movs	r2, #32
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f014 fb96 	bl	801ab4c <memset>
  rxBufferIndex = 0;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	080219e0 	.word	0x080219e0

08006464 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	70fb      	strb	r3, [r7, #3]
 8006476:	460b      	mov	r3, r1
 8006478:	70bb      	strb	r3, [r7, #2]
 800647a:	4613      	mov	r3, r2
 800647c:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc24 	bl	8006ccc <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8006484:	78bb      	ldrb	r3, [r7, #2]
 8006486:	2b20      	cmp	r3, #32
 8006488:	d901      	bls.n	800648e <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800648a:	2320      	movs	r3, #32
 800648c:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	b2d9      	uxtb	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800649a:	78b8      	ldrb	r0, [r7, #2]
 800649c:	787b      	ldrb	r3, [r7, #1]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4603      	mov	r3, r0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9cf 	bl	8006846 <_ZN7TwoWire15i2c_master_readEhPchh>
 80064a8:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da02      	bge.n	80064b6 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e001      	b.n	80064ba <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	7bfa      	ldrb	r2, [r7, #15]
 80064c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fbcc 	bl	8006c68 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
 80064e6:	4613      	mov	r3, r2
 80064e8:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80064ea:	78ba      	ldrb	r2, [r7, #2]
 80064ec:	78f9      	ldrb	r1, [r7, #3]
 80064ee:	2301      	movs	r3, #1
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ffb7 	bl	8006464 <_ZN7TwoWire11requestFromEhhh>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af02      	add	r7, sp, #8
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fbc2 	bl	8006ccc <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7c1b      	ldrb	r3, [r3, #16]
 800654c:	0059      	lsls	r1, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f103 0211 	add.w	r2, r3, #17
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800655a:	4618      	mov	r0, r3
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4603      	mov	r3, r0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa00 	bl	8006968 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb6f 	bl	8006c68 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800659c:	2101      	movs	r1, #1
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff ffc9 	bl	8006536 <_ZN7TwoWire15endTransmissionEh>
 80065a4:	4603      	mov	r3, r0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01d      	beq.n	8006600 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065ca:	2b1f      	cmp	r3, #31
 80065cc:	d901      	bls.n	80065d2 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e028      	b.n	8006624 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065d8:	4619      	mov	r1, r3
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	440b      	add	r3, r1
 80065e0:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065e8:	3301      	adds	r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80065fe:	e010      	b.n	8006622 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fb63 	bl	8006ccc <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006606:	1cfb      	adds	r3, r7, #3
 8006608:	2201      	movs	r2, #1
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa95 	bl	8006b3c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb28 	bl	8006c68 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	333c      	adds	r3, #60	; 0x3c
 800661c:	4618      	mov	r0, r3
 800661e:	f003 fab9 	bl	8009b94 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006622:	2301      	movs	r3, #1
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800663e:	2b00      	cmp	r3, #0
 8006640:	d013      	beq.n	800666a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d21e      	bcs.n	800668c <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	440a      	add	r2, r1
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	4611      	mov	r1, r2
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	3301      	adds	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e7ed      	b.n	8006646 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fb2e 	bl	8006ccc <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	461a      	mov	r2, r3
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fa60 	bl	8006b3c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 faf3 	bl	8006c68 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	333c      	adds	r3, #60	; 0x3c
 8006686:	4618      	mov	r0, r3
 8006688:	f003 fa84 	bl	8009b94 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800668c:	687b      	ldr	r3, [r7, #4]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	1ad3      	subs	r3, r2, r3
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  int value = -1;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	429a      	cmp	r2, r3
 80066de:	bf34      	ite	cc
 80066e0:	2301      	movcc	r3, #1
 80066e2:	2300      	movcs	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80066fc:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	3301      	adds	r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800673a:	b2db      	uxtb	r3, r3
 800673c:	429a      	cmp	r2, r3
 800673e:	bf34      	ite	cc
 8006740:	2301      	movcc	r3, #1
 8006742:	2300      	movcs	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4413      	add	r3, r2
 8006758:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800675c:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006796:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800679c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	60fa      	str	r2, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf0c      	ite	eq
 80067c0:	2301      	moveq	r3, #1
 80067c2:	2300      	movne	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0e9      	beq.n	800679e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e021      	b.n	8006812 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80067da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067de:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	60fa      	str	r2, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0e9      	beq.n	80067e0 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

    return 0;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b08a      	sub	sp, #40	; 0x28
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	461a      	mov	r2, r3
 8006852:	460b      	mov	r3, r1
 8006854:	72fb      	strb	r3, [r7, #11]
 8006856:	4613      	mov	r3, r2
 8006858:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff ff8d 	bl	8006780 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b01      	cmp	r3, #1
 8006878:	bf14      	ite	ne
 800687a:	2301      	movne	r3, #1
 800687c:	2300      	moveq	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	3b01      	subs	r3, #1
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ed      	bne.n	800686c <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006890:	f04f 33ff 	mov.w	r3, #4294967295
 8006894:	e064      	b.n	8006960 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80068a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	3b01      	subs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1ed      	bne.n	80068aa <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
 80068d2:	e045      	b.n	8006960 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	7abb      	ldrb	r3, [r7, #10]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	da17      	bge.n	8006928 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 80068f8:	f107 0314 	add.w	r3, r7, #20
 80068fc:	2200      	movs	r2, #0
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f8a4 	bl	8006a4e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006906:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	e025      	b.n	8006960 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4413      	add	r3, r2
 800691c:	b2ca      	uxtb	r2, r1
 800691e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	3301      	adds	r3, #1
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	e7e2      	b.n	80068ee <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8006928:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff74 	bl	800681e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	2201      	movs	r2, #1
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f885 	bl	8006a4e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006944:	61b8      	str	r0, [r7, #24]
    if(ret)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800694c:	f04f 33ff 	mov.w	r3, #4294967295
 8006950:	e006      	b.n	8006960 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4413      	add	r3, r2
 800695a:	b2ca      	uxtb	r2, r1
 800695c:	701a      	strb	r2, [r3, #0]

    return length;
 800695e:	7abb      	ldrb	r3, [r7, #10]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff feff 	bl	8006780 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006986:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ed      	bne.n	8006988 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80069ac:	2304      	movs	r3, #4
 80069ae:	e04a      	b.n	8006a46 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80069bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069c0:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3b01      	subs	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1ed      	bne.n	80069c2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 80069e6:	2302      	movs	r3, #2
 80069e8:	e02d      	b.n	8006a46 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	da15      	bge.n	8006a38 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f85a 	bl	8006ad0 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e00a      	b.n	8006a46 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e7e5      	b.n	8006a04 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff feed 	bl	800681e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e005      	b.n	8006a80 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8006a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a84:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	bf14      	ite	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	2300      	moveq	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	1e5a      	subs	r2, r3, #1
 8006aa2:	617a      	str	r2, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0e9      	beq.n	8006a86 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8006ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab6:	e005      	b.n	8006ac4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	601a      	str	r2, [r3, #0]

    return 0;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8006aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aee:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d008      	beq.n	8006b10 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d001      	beq.n	8006b10 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	60fa      	str	r2, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0e2      	beq.n	8006af0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8006b2e:	2301      	movs	r3, #1
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b089      	sub	sp, #36	; 0x24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd41      	ble.n	8006bdc <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8006b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b5c:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b80      	cmp	r3, #128	; 0x80
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ed      	bne.n	8006b5e <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295
 8006b86:	e068      	b.n	8006c5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	60ba      	str	r2, [r7, #8]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	611a      	str	r2, [r3, #16]
        length--;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	607b      	str	r3, [r7, #4]
        size++;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d104      	bne.n	8006bba <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0c8      	beq.n	8006b52 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	60ba      	str	r2, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	611a      	str	r2, [r3, #16]
            length--;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	607b      	str	r3, [r7, #4]
            size++;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006bda:	e7ba      	b.n	8006b52 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006be0:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf0:	bf14      	ite	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	2300      	moveq	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ec      	bne.n	8006be2 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	e025      	b.n	8006c5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c16:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c1c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ed      	bne.n	8006c1e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	e008      	b.n	8006c5a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8006c58:	69bb      	ldr	r3, [r7, #24]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3724      	adds	r7, #36	; 0x24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d106      	bne.n	8006c88 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006c7a:	2049      	movs	r0, #73	; 0x49
 8006c7c:	f002 f914 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006c80:	2048      	movs	r0, #72	; 0x48
 8006c82:	f002 f911 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006c86:	e016      	b.n	8006cb6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	4a0d      	ldr	r2, [pc, #52]	; (8006cc4 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d106      	bne.n	8006ca0 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006c92:	2022      	movs	r0, #34	; 0x22
 8006c94:	f002 f908 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006c98:	2021      	movs	r0, #33	; 0x21
 8006c9a:	f002 f905 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
}
 8006c9e:	e00a      	b.n	8006cb6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d105      	bne.n	8006cb6 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006caa:	2020      	movs	r0, #32
 8006cac:	f002 f8fc 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006cb0:	201f      	movs	r0, #31
 8006cb2:	f002 f8f9 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40005c00 	.word	0x40005c00
 8006cc4:	40005800 	.word	0x40005800
 8006cc8:	40005400 	.word	0x40005400

08006ccc <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd8:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d106      	bne.n	8006cec <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006cde:	2049      	movs	r0, #73	; 0x49
 8006ce0:	f002 f8f0 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006ce4:	2048      	movs	r0, #72	; 0x48
 8006ce6:	f002 f8ed 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006cea:	e016      	b.n	8006d1a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf0:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d106      	bne.n	8006d04 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8006cf6:	2022      	movs	r0, #34	; 0x22
 8006cf8:	f002 f8e4 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8006cfc:	2021      	movs	r0, #33	; 0x21
 8006cfe:	f002 f8e1 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
}
 8006d02:	e00a      	b.n	8006d1a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <_ZN7TwoWire16disableInterruptEv+0x60>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d105      	bne.n	8006d1a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8006d0e:	2020      	movs	r0, #32
 8006d10:	f002 f8d8 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006d14:	201f      	movs	r0, #31
 8006d16:	f002 f8d5 	bl	8008ec4 <HAL_NVIC_DisableIRQ>
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40005c00 	.word	0x40005c00
 8006d28:	40005800 	.word	0x40005800
 8006d2c:	40005400 	.word	0x40005400

08006d30 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d110      	bne.n	8006d62 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d10b      	bne.n	8006d62 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8006d4a:	4908      	ldr	r1, [pc, #32]	; (8006d6c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006d4c:	4808      	ldr	r0, [pc, #32]	; (8006d70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d4e:	f7ff fb51 	bl	80063f4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8006d52:	4908      	ldr	r1, [pc, #32]	; (8006d74 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006d54:	4808      	ldr	r0, [pc, #32]	; (8006d78 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006d56:	f7ff fb4d 	bl	80063f4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8006d5a:	4908      	ldr	r1, [pc, #32]	; (8006d7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006d5c:	4808      	ldr	r0, [pc, #32]	; (8006d80 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006d5e:	f7ff fb49 	bl	80063f4 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40005400 	.word	0x40005400
 8006d70:	20000440 	.word	0x20000440
 8006d74:	40005800 	.word	0x40005800
 8006d78:	200004f8 	.word	0x200004f8
 8006d7c:	40005c00 	.word	0x40005c00
 8006d80:	200005b0 	.word	0x200005b0

08006d84 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7ff ffcf 	bl	8006d30 <_Z41__static_initialization_and_destruction_0ii>
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	460b      	mov	r3, r1
 8006da2:	72fb      	strb	r3, [r7, #11]
 8006da4:	4613      	mov	r3, r2
 8006da6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685c      	ldr	r4, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6898      	ldr	r0, [r3, #8]
 8006db0:	893b      	ldrh	r3, [r7, #8]
 8006db2:	7af9      	ldrb	r1, [r7, #11]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	47a0      	blx	r4
 8006db8:	6178      	str	r0, [r7, #20]

  return ret;
 8006dba:	697b      	ldr	r3, [r7, #20]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd90      	pop	{r4, r7, pc}

08006dc4 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	72fb      	strb	r3, [r7, #11]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681c      	ldr	r4, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6898      	ldr	r0, [r3, #8]
 8006de0:	893b      	ldrh	r3, [r7, #8]
 8006de2:	7af9      	ldrb	r1, [r7, #11]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	47a0      	blx	r4
 8006de8:	6178      	str	r0, [r7, #20]

  return ret;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd90      	pop	{r4, r7, pc}

08006df4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006e20 <lps22hh_from_lsb_to_hpa+0x2c>
 8006e0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e0e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006e12:	eeb0 0a67 	vmov.f32	s0, s15
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	49800000 	.word	0x49800000

08006e24 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e3a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006e54 <lps22hh_from_lsb_to_celsius+0x30>
 8006e3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e42:	eef0 7a66 	vmov.f32	s15, s13
}
 8006e46:	eeb0 0a67 	vmov.f32	s0, s15
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	42c80000 	.word	0x42c80000

08006e58 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006e64:	f107 0208 	add.w	r2, r7, #8
 8006e68:	2301      	movs	r3, #1
 8006e6a:	2110      	movs	r1, #16
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff91 	bl	8006d94 <lps22hh_read_reg>
 8006e72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10f      	bne.n	8006e9a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	7a3b      	ldrb	r3, [r7, #8]
 8006e84:	f362 0341 	bfi	r3, r2, #1, #1
 8006e88:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	2301      	movs	r3, #1
 8006e90:	2110      	movs	r1, #16
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff ff96 	bl	8006dc4 <lps22hh_write_reg>
 8006e98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006eb0:	f107 0210 	add.w	r2, r7, #16
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	2110      	movs	r1, #16
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff6b 	bl	8006d94 <lps22hh_read_reg>
 8006ebe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d107      	bne.n	8006ed6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006ec6:	f107 020c 	add.w	r2, r7, #12
 8006eca:	2301      	movs	r3, #1
 8006ecc:	2111      	movs	r1, #17
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff ff60 	bl	8006d94 <lps22hh_read_reg>
 8006ed4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10f      	bne.n	8006efc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	7c3b      	ldrb	r3, [r7, #16]
 8006ee6:	f362 1306 	bfi	r3, r2, #4, #3
 8006eea:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006eec:	f107 0210 	add.w	r2, r7, #16
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff ff65 	bl	8006dc4 <lps22hh_write_reg>
 8006efa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d119      	bne.n	8006f36 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	7b3b      	ldrb	r3, [r7, #12]
 8006f0e:	f362 0341 	bfi	r3, r2, #1, #1
 8006f12:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	7b3b      	ldrb	r3, [r7, #12]
 8006f20:	f362 0300 	bfi	r3, r2, #0, #1
 8006f24:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006f26:	f107 020c 	add.w	r2, r7, #12
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	2111      	movs	r1, #17
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff ff48 	bl	8006dc4 <lps22hh_write_reg>
 8006f34:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006f36:	697b      	ldr	r3, [r7, #20]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006f4a:	f107 0208 	add.w	r2, r7, #8
 8006f4e:	2301      	movs	r3, #1
 8006f50:	2127      	movs	r1, #39	; 0x27
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ff1e 	bl	8006d94 <lps22hh_read_reg>
 8006f58:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006f5a:	7a3b      	ldrb	r3, [r7, #8]
 8006f5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f68:	68fb      	ldr	r3, [r7, #12]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006f7c:	f107 0208 	add.w	r2, r7, #8
 8006f80:	2303      	movs	r3, #3
 8006f82:	2128      	movs	r1, #40	; 0x28
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ff05 	bl	8006d94 <lps22hh_read_reg>
 8006f8a:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006f8c:	7abb      	ldrb	r3, [r7, #10]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	7a7a      	ldrb	r2, [r7, #9]
 8006f9c:	441a      	add	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	7a3a      	ldrb	r2, [r7, #8]
 8006faa:	441a      	add	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021a      	lsls	r2, r3, #8
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	601a      	str	r2, [r3, #0]

  return ret;
 8006fba:	68fb      	ldr	r3, [r7, #12]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006fce:	f107 0208 	add.w	r2, r7, #8
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	212b      	movs	r1, #43	; 0x2b
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fedc 	bl	8006d94 <lps22hh_read_reg>
 8006fdc:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006fde:	7a7b      	ldrb	r3, [r7, #9]
 8006fe0:	b21a      	sxth	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	7a3b      	ldrb	r3, [r7, #8]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	b21a      	sxth	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	801a      	strh	r2, [r3, #0]

  return ret;
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8007014:	2301      	movs	r3, #1
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	210f      	movs	r1, #15
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff feba 	bl	8006d94 <lps22hh_read_reg>
 8007020:	60f8      	str	r0, [r7, #12]

  return ret;
 8007022:	68fb      	ldr	r3, [r7, #12]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	2301      	movs	r3, #1
 800703e:	2111      	movs	r1, #17
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fea7 	bl	8006d94 <lps22hh_read_reg>
 8007046:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	7a3b      	ldrb	r3, [r7, #8]
 8007058:	f362 0382 	bfi	r3, r2, #2, #1
 800705c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	2301      	movs	r3, #1
 8007064:	2111      	movs	r1, #17
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff feac 	bl	8006dc4 <lps22hh_write_reg>
 800706c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007082:	f107 0208 	add.w	r2, r7, #8
 8007086:	2301      	movs	r3, #1
 8007088:	2111      	movs	r1, #17
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fe82 	bl	8006d94 <lps22hh_read_reg>
 8007090:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8007092:	7a3b      	ldrb	r3, [r7, #8]
 8007094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	701a      	strb	r2, [r3, #0]

  return ret;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80070aa:	b590      	push	{r4, r7, lr}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	461a      	mov	r2, r3
 80070b6:	460b      	mov	r3, r1
 80070b8:	72fb      	strb	r3, [r7, #11]
 80070ba:	4613      	mov	r3, r2
 80070bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685c      	ldr	r4, [r3, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6898      	ldr	r0, [r3, #8]
 80070c6:	893b      	ldrh	r3, [r7, #8]
 80070c8:	7af9      	ldrb	r1, [r7, #11]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	47a0      	blx	r4
 80070ce:	6178      	str	r0, [r7, #20]

  return ret;
 80070d0:	697b      	ldr	r3, [r7, #20]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd90      	pop	{r4, r7, pc}

080070da <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80070da:	b590      	push	{r4, r7, lr}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	461a      	mov	r2, r3
 80070e6:	460b      	mov	r3, r1
 80070e8:	72fb      	strb	r3, [r7, #11]
 80070ea:	4613      	mov	r3, r2
 80070ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681c      	ldr	r4, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6898      	ldr	r0, [r3, #8]
 80070f6:	893b      	ldrh	r3, [r7, #8]
 80070f8:	7af9      	ldrb	r1, [r7, #11]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	47a0      	blx	r4
 80070fe:	6178      	str	r0, [r7, #20]

  return ret;
 8007100:	697b      	ldr	r3, [r7, #20]
}
 8007102:	4618      	mov	r0, r3
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd90      	pop	{r4, r7, pc}
	...

0800710c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8007116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007122:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007138 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8007126:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800712a:	eeb0 0a67 	vmov.f32	s0, s15
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	3d79db23 	.word	0x3d79db23

0800713c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8007146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007152:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007168 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8007156:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800715a:	eeb0 0a67 	vmov.f32	s0, s15
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	428c0000 	.word	0x428c0000

0800716c <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8007176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007182:	eddf 6a07 	vldr	s13, [pc, #28]	; 80071a0 <lsm6dsr_from_lsb_to_celsius+0x34>
 8007186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800718a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800718e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8007192:	eeb0 0a67 	vmov.f32	s0, s15
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	43800000 	.word	0x43800000

080071a4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80071b0:	f107 0208 	add.w	r2, r7, #8
 80071b4:	2301      	movs	r3, #1
 80071b6:	2110      	movs	r1, #16
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff ff76 	bl	80070aa <lsm6dsr_read_reg>
 80071be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	7a3b      	ldrb	r3, [r7, #8]
 80071d0:	f362 0383 	bfi	r3, r2, #2, #2
 80071d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80071d6:	f107 0208 	add.w	r2, r7, #8
 80071da:	2301      	movs	r3, #1
 80071dc:	2110      	movs	r1, #16
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff ff7b 	bl	80070da <lsm6dsr_write_reg>
 80071e4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007200:	f107 030c 	add.w	r3, r7, #12
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fbb0 	bl	800796c <lsm6dsr_fsm_enable_get>
 800720c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 80c4 	bne.w	800739e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007216:	7b3b      	ldrb	r3, [r7, #12]
 8007218:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800721c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800721e:	7b3b      	ldrb	r3, [r7, #12]
 8007220:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007224:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007226:	4313      	orrs	r3, r2
 8007228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800722a:	7b3b      	ldrb	r3, [r7, #12]
 800722c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007232:	4313      	orrs	r3, r2
 8007234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007236:	7b3b      	ldrb	r3, [r7, #12]
 8007238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800723c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800723e:	4313      	orrs	r3, r2
 8007240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007242:	7b3b      	ldrb	r3, [r7, #12]
 8007244:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800724a:	4313      	orrs	r3, r2
 800724c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800724e:	7b3b      	ldrb	r3, [r7, #12]
 8007250:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007256:	4313      	orrs	r3, r2
 8007258:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800725a:	7b3b      	ldrb	r3, [r7, #12]
 800725c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007260:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007262:	4313      	orrs	r3, r2
 8007264:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007266:	7b3b      	ldrb	r3, [r7, #12]
 8007268:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800726c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800726e:	4313      	orrs	r3, r2
 8007270:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007272:	7b7b      	ldrb	r3, [r7, #13]
 8007274:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800727a:	4313      	orrs	r3, r2
 800727c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007284:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007286:	4313      	orrs	r3, r2
 8007288:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800728a:	7b7b      	ldrb	r3, [r7, #13]
 800728c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007290:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007292:	4313      	orrs	r3, r2
 8007294:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007296:	7b7b      	ldrb	r3, [r7, #13]
 8007298:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800729c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800729e:	4313      	orrs	r3, r2
 80072a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80072a2:	7b7b      	ldrb	r3, [r7, #13]
 80072a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80072a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80072aa:	4313      	orrs	r3, r2
 80072ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80072ae:	7b7b      	ldrb	r3, [r7, #13]
 80072b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80072b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80072c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80072c2:	4313      	orrs	r3, r2
 80072c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80072c6:	7b7b      	ldrb	r3, [r7, #13]
 80072c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80072cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d163      	bne.n	800739e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80072d6:	f107 030b 	add.w	r3, r7, #11
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fb71 	bl	80079c4 <lsm6dsr_fsm_data_rate_get>
 80072e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d159      	bne.n	800739e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d853      	bhi.n	8007398 <lsm6dsr_xl_data_rate_set+0x1a8>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <lsm6dsr_xl_data_rate_set+0x108>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	08007309 	.word	0x08007309
 80072fc:	0800731b 	.word	0x0800731b
 8007300:	08007339 	.word	0x08007339
 8007304:	08007363 	.word	0x08007363
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007312:	e045      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	75fb      	strb	r3, [r7, #23]
            break;
 8007318:	e042      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8007320:	2302      	movs	r3, #2
 8007322:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007324:	e03c      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d102      	bne.n	8007332 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800732c:	2302      	movs	r3, #2
 800732e:	75fb      	strb	r3, [r7, #23]
            break;
 8007330:	e036      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	75fb      	strb	r3, [r7, #23]
            break;
 8007336:	e033      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800733e:	2303      	movs	r3, #3
 8007340:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007342:	e02d      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d102      	bne.n	8007350 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800734a:	2303      	movs	r3, #3
 800734c:	75fb      	strb	r3, [r7, #23]
            break;
 800734e:	e027      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d102      	bne.n	800735c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8007356:	2303      	movs	r3, #3
 8007358:	75fb      	strb	r3, [r7, #23]
            break;
 800735a:	e021      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	75fb      	strb	r3, [r7, #23]
            break;
 8007360:	e01e      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007368:	2304      	movs	r3, #4
 800736a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800736c:	e018      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d102      	bne.n	800737a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007374:	2304      	movs	r3, #4
 8007376:	75fb      	strb	r3, [r7, #23]
            break;
 8007378:	e012      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d102      	bne.n	8007386 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007380:	2304      	movs	r3, #4
 8007382:	75fb      	strb	r3, [r7, #23]
            break;
 8007384:	e00c      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	2b03      	cmp	r3, #3
 800738a:	d102      	bne.n	8007392 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800738c:	2304      	movs	r3, #4
 800738e:	75fb      	strb	r3, [r7, #23]
            break;
 8007390:	e006      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	75fb      	strb	r3, [r7, #23]
            break;
 8007396:	e003      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	75fb      	strb	r3, [r7, #23]
            break;
 800739c:	e000      	b.n	80073a0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800739e:	bf00      	nop
    }
  }

  if (ret == 0)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d107      	bne.n	80073b6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80073a6:	f107 0208 	add.w	r2, r7, #8
 80073aa:	2301      	movs	r3, #1
 80073ac:	2110      	movs	r1, #16
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff fe7b 	bl	80070aa <lsm6dsr_read_reg>
 80073b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10f      	bne.n	80073dc <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	7a3b      	ldrb	r3, [r7, #8]
 80073c6:	f362 1307 	bfi	r3, r2, #4, #4
 80073ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80073cc:	f107 0208 	add.w	r2, r7, #8
 80073d0:	2301      	movs	r3, #1
 80073d2:	2110      	movs	r1, #16
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fe80 	bl	80070da <lsm6dsr_write_reg>
 80073da:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80073dc:	693b      	ldr	r3, [r7, #16]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80073f4:	f107 0208 	add.w	r2, r7, #8
 80073f8:	2301      	movs	r3, #1
 80073fa:	2111      	movs	r1, #17
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe54 	bl	80070aa <lsm6dsr_read_reg>
 8007402:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10f      	bne.n	800742a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	b2da      	uxtb	r2, r3
 8007412:	7a3b      	ldrb	r3, [r7, #8]
 8007414:	f362 0303 	bfi	r3, r2, #0, #4
 8007418:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800741a:	f107 0208 	add.w	r2, r7, #8
 800741e:	2301      	movs	r3, #1
 8007420:	2111      	movs	r1, #17
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fe59 	bl	80070da <lsm6dsr_write_reg>
 8007428:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007444:	f107 030c 	add.w	r3, r7, #12
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa8e 	bl	800796c <lsm6dsr_fsm_enable_get>
 8007450:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 80c4 	bne.w	80075e2 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800745a:	7b3b      	ldrb	r3, [r7, #12]
 800745c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007462:	7b3b      	ldrb	r3, [r7, #12]
 8007464:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007468:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800746a:	4313      	orrs	r3, r2
 800746c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800746e:	7b3b      	ldrb	r3, [r7, #12]
 8007470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007476:	4313      	orrs	r3, r2
 8007478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800747a:	7b3b      	ldrb	r3, [r7, #12]
 800747c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007482:	4313      	orrs	r3, r2
 8007484:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007486:	7b3b      	ldrb	r3, [r7, #12]
 8007488:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800748c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800748e:	4313      	orrs	r3, r2
 8007490:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007492:	7b3b      	ldrb	r3, [r7, #12]
 8007494:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007498:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800749a:	4313      	orrs	r3, r2
 800749c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800749e:	7b3b      	ldrb	r3, [r7, #12]
 80074a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80074aa:	7b3b      	ldrb	r3, [r7, #12]
 80074ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80074be:	4313      	orrs	r3, r2
 80074c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074c2:	7b7b      	ldrb	r3, [r7, #13]
 80074c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074ce:	7b7b      	ldrb	r3, [r7, #13]
 80074d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074da:	7b7b      	ldrb	r3, [r7, #13]
 80074dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80074e2:	4313      	orrs	r3, r2
 80074e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074e6:	7b7b      	ldrb	r3, [r7, #13]
 80074e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80074f2:	7b7b      	ldrb	r3, [r7, #13]
 80074f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80074fe:	7b7b      	ldrb	r3, [r7, #13]
 8007500:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007504:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007506:	4313      	orrs	r3, r2
 8007508:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800750a:	7b7b      	ldrb	r3, [r7, #13]
 800750c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007510:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007512:	4313      	orrs	r3, r2
 8007514:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007516:	2b01      	cmp	r3, #1
 8007518:	d163      	bne.n	80075e2 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800751a:	f107 030b 	add.w	r3, r7, #11
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa4f 	bl	80079c4 <lsm6dsr_fsm_data_rate_get>
 8007526:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d159      	bne.n	80075e2 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d853      	bhi.n	80075dc <lsm6dsr_gy_data_rate_set+0x1a8>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <lsm6dsr_gy_data_rate_set+0x108>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	0800754d 	.word	0x0800754d
 8007540:	0800755f 	.word	0x0800755f
 8007544:	0800757d 	.word	0x0800757d
 8007548:	080075a7 	.word	0x080075a7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007556:	e045      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	75fb      	strb	r3, [r7, #23]
            break;
 800755c:	e042      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007564:	2302      	movs	r3, #2
 8007566:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007568:	e03c      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d102      	bne.n	8007576 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007570:	2302      	movs	r3, #2
 8007572:	75fb      	strb	r3, [r7, #23]
            break;
 8007574:	e036      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	75fb      	strb	r3, [r7, #23]
            break;
 800757a:	e033      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007582:	2303      	movs	r3, #3
 8007584:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007586:	e02d      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d102      	bne.n	8007594 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800758e:	2303      	movs	r3, #3
 8007590:	75fb      	strb	r3, [r7, #23]
            break;
 8007592:	e027      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d102      	bne.n	80075a0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800759a:	2303      	movs	r3, #3
 800759c:	75fb      	strb	r3, [r7, #23]
            break;
 800759e:	e021      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	75fb      	strb	r3, [r7, #23]
            break;
 80075a4:	e01e      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80075ac:	2304      	movs	r3, #4
 80075ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80075b0:	e018      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d102      	bne.n	80075be <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80075b8:	2304      	movs	r3, #4
 80075ba:	75fb      	strb	r3, [r7, #23]
            break;
 80075bc:	e012      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d102      	bne.n	80075ca <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80075c4:	2304      	movs	r3, #4
 80075c6:	75fb      	strb	r3, [r7, #23]
            break;
 80075c8:	e00c      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d102      	bne.n	80075d6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80075d0:	2304      	movs	r3, #4
 80075d2:	75fb      	strb	r3, [r7, #23]
            break;
 80075d4:	e006      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	75fb      	strb	r3, [r7, #23]
            break;
 80075da:	e003      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	75fb      	strb	r3, [r7, #23]
            break;
 80075e0:	e000      	b.n	80075e4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80075e2:	bf00      	nop
    }
  }

  if (ret == 0)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	2301      	movs	r3, #1
 80075f0:	2111      	movs	r1, #17
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fd59 	bl	80070aa <lsm6dsr_read_reg>
 80075f8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10f      	bne.n	8007620 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	b2da      	uxtb	r2, r3
 8007608:	7a3b      	ldrb	r3, [r7, #8]
 800760a:	f362 1307 	bfi	r3, r2, #4, #4
 800760e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007610:	f107 0208 	add.w	r2, r7, #8
 8007614:	2301      	movs	r3, #1
 8007616:	2111      	movs	r1, #17
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fd5e 	bl	80070da <lsm6dsr_write_reg>
 800761e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007620:	693b      	ldr	r3, [r7, #16]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop

0800762c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	2301      	movs	r3, #1
 800763e:	2112      	movs	r1, #18
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fd32 	bl	80070aa <lsm6dsr_read_reg>
 8007646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	b2da      	uxtb	r2, r3
 8007656:	7a3b      	ldrb	r3, [r7, #8]
 8007658:	f362 1386 	bfi	r3, r2, #6, #1
 800765c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	2301      	movs	r3, #1
 8007664:	2112      	movs	r1, #18
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff fd37 	bl	80070da <lsm6dsr_write_reg>
 800766c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007682:	f107 0208 	add.w	r2, r7, #8
 8007686:	2301      	movs	r3, #1
 8007688:	211e      	movs	r1, #30
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fd0d 	bl	80070aa <lsm6dsr_read_reg>
 8007690:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8007692:	7a3b      	ldrb	r3, [r7, #8]
 8007694:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	701a      	strb	r2, [r3, #0]

  return ret;
 80076a0:	68fb      	ldr	r3, [r7, #12]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80076b4:	f107 0208 	add.w	r2, r7, #8
 80076b8:	2301      	movs	r3, #1
 80076ba:	211e      	movs	r1, #30
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fcf4 	bl	80070aa <lsm6dsr_read_reg>
 80076c2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80076c4:	7a3b      	ldrb	r3, [r7, #8]
 80076c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	701a      	strb	r2, [r3, #0]

  return ret;
 80076d2:	68fb      	ldr	r3, [r7, #12]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80076e6:	f107 0208 	add.w	r2, r7, #8
 80076ea:	2301      	movs	r3, #1
 80076ec:	211e      	movs	r1, #30
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fcdb 	bl	80070aa <lsm6dsr_read_reg>
 80076f4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80076f6:	7a3b      	ldrb	r3, [r7, #8]
 80076f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	701a      	strb	r2, [r3, #0]

  return ret;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007718:	f107 0208 	add.w	r2, r7, #8
 800771c:	2302      	movs	r3, #2
 800771e:	2120      	movs	r1, #32
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fcc2 	bl	80070aa <lsm6dsr_read_reg>
 8007726:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007728:	7a7b      	ldrb	r3, [r7, #9]
 800772a:	b21a      	sxth	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007736:	b29b      	uxth	r3, r3
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	b29a      	uxth	r2, r3
 800773c:	7a3b      	ldrb	r3, [r7, #8]
 800773e:	b29b      	uxth	r3, r3
 8007740:	4413      	add	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	b21a      	sxth	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	801a      	strh	r2, [r3, #0]

  return ret;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800775e:	f107 020c 	add.w	r2, r7, #12
 8007762:	2306      	movs	r3, #6
 8007764:	2122      	movs	r1, #34	; 0x22
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fc9f 	bl	80070aa <lsm6dsr_read_reg>
 800776c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800776e:	7b7b      	ldrb	r3, [r7, #13]
 8007770:	b21a      	sxth	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800777c:	b29b      	uxth	r3, r3
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	b29a      	uxth	r2, r3
 8007782:	7b3b      	ldrb	r3, [r7, #12]
 8007784:	b29b      	uxth	r3, r3
 8007786:	4413      	add	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	b21a      	sxth	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007790:	7bfa      	ldrb	r2, [r7, #15]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	3302      	adds	r3, #2
 8007796:	b212      	sxth	r2, r2
 8007798:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	3302      	adds	r3, #2
 800779e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	3302      	adds	r3, #2
 80077b4:	b212      	sxth	r2, r2
 80077b6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80077b8:	7c7a      	ldrb	r2, [r7, #17]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	b212      	sxth	r2, r2
 80077c0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3304      	adds	r3, #4
 80077c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	7c3b      	ldrb	r3, [r7, #16]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	3304      	adds	r3, #4
 80077dc:	b212      	sxth	r2, r2
 80077de:	801a      	strh	r2, [r3, #0]

  return ret;
 80077e0:	697b      	ldr	r3, [r7, #20]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80077f4:	f107 020c 	add.w	r2, r7, #12
 80077f8:	2306      	movs	r3, #6
 80077fa:	2128      	movs	r1, #40	; 0x28
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fc54 	bl	80070aa <lsm6dsr_read_reg>
 8007802:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007804:	7b7b      	ldrb	r3, [r7, #13]
 8007806:	b21a      	sxth	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007812:	b29b      	uxth	r3, r3
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b29a      	uxth	r2, r3
 8007818:	7b3b      	ldrb	r3, [r7, #12]
 800781a:	b29b      	uxth	r3, r3
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	b21a      	sxth	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	3302      	adds	r3, #2
 800782c:	b212      	sxth	r2, r2
 800782e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	3302      	adds	r3, #2
 8007834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007838:	b29b      	uxth	r3, r3
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	b29a      	uxth	r2, r3
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	b29b      	uxth	r3, r3
 8007842:	4413      	add	r3, r2
 8007844:	b29a      	uxth	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	3302      	adds	r3, #2
 800784a:	b212      	sxth	r2, r2
 800784c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800784e:	7c7a      	ldrb	r2, [r7, #17]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	b212      	sxth	r2, r2
 8007856:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	3304      	adds	r3, #4
 800785c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007860:	b29b      	uxth	r3, r3
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b29a      	uxth	r2, r3
 8007866:	7c3b      	ldrb	r3, [r7, #16]
 8007868:	b29b      	uxth	r3, r3
 800786a:	4413      	add	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	b212      	sxth	r2, r2
 8007874:	801a      	strh	r2, [r3, #0]

  return ret;
 8007876:	697b      	ldr	r3, [r7, #20]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800788c:	f107 0208 	add.w	r2, r7, #8
 8007890:	2301      	movs	r3, #1
 8007892:	2101      	movs	r1, #1
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff fc08 	bl	80070aa <lsm6dsr_read_reg>
 800789a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10f      	bne.n	80078c2 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	7a3b      	ldrb	r3, [r7, #8]
 80078ac:	f362 1387 	bfi	r3, r2, #6, #2
 80078b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80078b2:	f107 0208 	add.w	r2, r7, #8
 80078b6:	2301      	movs	r3, #1
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fc0d 	bl	80070da <lsm6dsr_write_reg>
 80078c0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80078d6:	2301      	movs	r3, #1
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	210f      	movs	r1, #15
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff fbe4 	bl	80070aa <lsm6dsr_read_reg>
 80078e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	2301      	movs	r3, #1
 8007900:	2112      	movs	r1, #18
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fbd1 	bl	80070aa <lsm6dsr_read_reg>
 8007908:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10f      	bne.n	8007930 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	b2da      	uxtb	r2, r3
 8007918:	7a3b      	ldrb	r3, [r7, #8]
 800791a:	f362 0300 	bfi	r3, r2, #0, #1
 800791e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007920:	f107 0208 	add.w	r2, r7, #8
 8007924:	2301      	movs	r3, #1
 8007926:	2112      	movs	r1, #18
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fbd6 	bl	80070da <lsm6dsr_write_reg>
 800792e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	2301      	movs	r3, #1
 800794a:	2112      	movs	r1, #18
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fbac 	bl	80070aa <lsm6dsr_read_reg>
 8007952:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8007954:	7a3b      	ldrb	r3, [r7, #8]
 8007956:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	701a      	strb	r2, [r3, #0]

  return ret;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007976:	2102      	movs	r1, #2
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ff81 	bl	8007880 <lsm6dsr_mem_bank_set>
 800797e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8007986:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007988:	2301      	movs	r3, #1
 800798a:	2146      	movs	r1, #70	; 0x46
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fb8c 	bl	80070aa <lsm6dsr_read_reg>
 8007992:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800799e:	2301      	movs	r3, #1
 80079a0:	2147      	movs	r1, #71	; 0x47
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fb81 	bl	80070aa <lsm6dsr_read_reg>
 80079a8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff ff64 	bl	8007880 <lsm6dsr_mem_bank_set>
 80079b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80079ce:	2102      	movs	r1, #2
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff55 	bl	8007880 <lsm6dsr_mem_bank_set>
 80079d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80079de:	f107 0208 	add.w	r2, r7, #8
 80079e2:	2301      	movs	r3, #1
 80079e4:	215f      	movs	r1, #95	; 0x5f
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fb5f 	bl	80070aa <lsm6dsr_read_reg>
 80079ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80079f4:	2100      	movs	r1, #0
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff42 	bl	8007880 <lsm6dsr_mem_bank_set>
 80079fc:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80079fe:	7a3b      	ldrb	r3, [r7, #8]
 8007a00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d81a      	bhi.n	8007a40 <lsm6dsr_fsm_data_rate_get+0x7c>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a21 	.word	0x08007a21
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a31 	.word	0x08007a31
 8007a1c:	08007a39 	.word	0x08007a39
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e00f      	b.n	8007a48 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e00b      	b.n	8007a48 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2202      	movs	r2, #2
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e007      	b.n	8007a48 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e003      	b.n	8007a48 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
      break;
 8007a46:	bf00      	nop
  }

  return ret;
 8007a48:	68fb      	ldr	r3, [r7, #12]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8007a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a60:	2208      	movs	r2, #8
 8007a62:	4905      	ldr	r1, [pc, #20]	; (8007a78 <HAL_RTC_AlarmAEventCallback+0x24>)
 8007a64:	4805      	ldr	r0, [pc, #20]	; (8007a7c <HAL_RTC_AlarmAEventCallback+0x28>)
 8007a66:	f006 feca 	bl	800e7fe <HAL_UART_Transmit>
	flagA = 1;
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0802167c 	.word	0x0802167c
 8007a7c:	20006ddc 	.word	0x20006ddc
 8007a80:	200006a8 	.word	0x200006a8

08007a84 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 8007a84:	b084      	sub	sp, #16
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	f107 0014 	add.w	r0, r7, #20
 8007a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 8007a96:	4a0f      	ldr	r2, [pc, #60]	; (8007ad4 <MRT_SetupRTOS+0x50>)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <MRT_SetupRTOS+0x54>)
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	2244      	movs	r2, #68	; 0x44
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	f013 f828 	bl	801aafc <memcpy>
	rtos.sleepTime = sleepT;
 8007aac:	4a0a      	ldr	r2, [pc, #40]	; (8007ad8 <MRT_SetupRTOS+0x54>)
 8007aae:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007ab2:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aba:	2211      	movs	r2, #17
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <MRT_SetupRTOS+0x58>)
 8007abe:	4806      	ldr	r0, [pc, #24]	; (8007ad8 <MRT_SetupRTOS+0x54>)
 8007ac0:	f006 fe9d 	bl	800e7fe <HAL_UART_Transmit>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ace:	b004      	add	sp, #16
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20006e24 	.word	0x20006e24
 8007ad8:	20006ddc 	.word	0x20006ddc
 8007adc:	08021694 	.word	0x08021694

08007ae0 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8007ae6:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <MRT_WUProcedure+0x5c>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d11e      	bne.n	8007b30 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8007af2:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <MRT_WUProcedure+0x60>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8007af8:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <MRT_WUProcedure+0x5c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a0f      	ldr	r2, [pc, #60]	; (8007b3c <MRT_WUProcedure+0x5c>)
 8007afe:	f043 0308 	orr.w	r3, r3, #8
 8007b02:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <MRT_WUProcedure+0x64>)
 8007b06:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7f8 fb71 	bl	80001f0 <strlen>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <MRT_WUProcedure+0x68>)
 8007b1a:	f006 fe70 	bl	800e7fe <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8007b1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b22:	f003 fe2b 	bl	800b77c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <MRT_WUProcedure+0x6c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f005 fa24 	bl	800cf78 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8007b30:	f000 f80e 	bl	8007b50 <MRT_ClearFlags>
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40007000 	.word	0x40007000
 8007b40:	200006a9 	.word	0x200006a9
 8007b44:	080216a8 	.word	0x080216a8
 8007b48:	20006ddc 	.word	0x20006ddc
 8007b4c:	20006e24 	.word	0x20006e24

08007b50 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8007b54:	f04f 33ff 	mov.w	r3, #4294967295
 8007b58:	2214      	movs	r2, #20
 8007b5a:	4939      	ldr	r1, [pc, #228]	; (8007c40 <MRT_ClearFlags+0xf0>)
 8007b5c:	4839      	ldr	r0, [pc, #228]	; (8007c44 <MRT_ClearFlags+0xf4>)
 8007b5e:	f006 fe4e 	bl	800e7fe <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007b62:	4b39      	ldr	r3, [pc, #228]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	22ca      	movs	r2, #202	; 0xca
 8007b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8007b6c:	4b36      	ldr	r3, [pc, #216]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2253      	movs	r2, #83	; 0x53
 8007b74:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007b76:	e011      	b.n	8007b9c <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8007b78:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7c:	2217      	movs	r2, #23
 8007b7e:	4933      	ldr	r1, [pc, #204]	; (8007c4c <MRT_ClearFlags+0xfc>)
 8007b80:	4830      	ldr	r0, [pc, #192]	; (8007c44 <MRT_ClearFlags+0xf4>)
 8007b82:	f006 fe3c 	bl	800e7fe <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 8007b86:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007b9a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007b9c:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007bac:	4b26      	ldr	r3, [pc, #152]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	22ff      	movs	r2, #255	; 0xff
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007bb6:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <MRT_ClearFlags+0x100>)
 8007bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bbc:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007bbe:	4b22      	ldr	r3, [pc, #136]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	22ca      	movs	r2, #202	; 0xca
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2253      	movs	r2, #83	; 0x53
 8007bd0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007bd2:	e011      	b.n	8007bf8 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8007bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd8:	2217      	movs	r2, #23
 8007bda:	491e      	ldr	r1, [pc, #120]	; (8007c54 <MRT_ClearFlags+0x104>)
 8007bdc:	4819      	ldr	r0, [pc, #100]	; (8007c44 <MRT_ClearFlags+0xf4>)
 8007bde:	f006 fe0e 	bl	800e7fe <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8007be2:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007bf6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007bf8:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e5      	bne.n	8007bd4 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007c08:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	22ff      	movs	r2, #255	; 0xff
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <MRT_ClearFlags+0x100>)
 8007c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007c18:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <MRT_ClearFlags+0x108>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a0e      	ldr	r2, [pc, #56]	; (8007c58 <MRT_ClearFlags+0x108>)
 8007c20:	f043 0304 	orr.w	r3, r3, #4
 8007c24:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <MRT_ClearFlags+0xf8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007c3a:	60da      	str	r2, [r3, #12]
}
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	080216c8 	.word	0x080216c8
 8007c44:	20006ddc 	.word	0x20006ddc
 8007c48:	20006e24 	.word	0x20006e24
 8007c4c:	080216e0 	.word	0x080216e0
 8007c50:	40013c00 	.word	0x40013c00
 8007c54:	080216f8 	.word	0x080216f8
 8007c58:	40007000 	.word	0x40007000

08007c5c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b0a4      	sub	sp, #144	; 0x90
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	220f      	movs	r2, #15
 8007c6a:	491c      	ldr	r1, [pc, #112]	; (8007cdc <MRT_StandByMode+0x80>)
 8007c6c:	481c      	ldr	r0, [pc, #112]	; (8007ce0 <MRT_StandByMode+0x84>)
 8007c6e:	f006 fdc6 	bl	800e7fe <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8007c72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c76:	f003 fd6f 	bl	800b758 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8007c7a:	f7ff ff69 	bl	8007b50 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c82:	2211      	movs	r2, #17
 8007c84:	4917      	ldr	r1, [pc, #92]	; (8007ce4 <MRT_StandByMode+0x88>)
 8007c86:	4816      	ldr	r0, [pc, #88]	; (8007ce0 <MRT_StandByMode+0x84>)
 8007c88:	f006 fdb9 	bl	800e7fe <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8007c8c:	f107 0308 	add.w	r3, r7, #8
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4915      	ldr	r1, [pc, #84]	; (8007ce8 <MRT_StandByMode+0x8c>)
 8007c94:	4618      	mov	r0, r3
 8007c96:	f013 ffd7 	bl	801bc48 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8007c9a:	f107 0308 	add.w	r3, r7, #8
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7f8 faa6 	bl	80001f0 <strlen>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	480b      	ldr	r0, [pc, #44]	; (8007ce0 <MRT_StandByMode+0x84>)
 8007cb2:	f006 fda4 	bl	800e7fe <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <MRT_StandByMode+0x90>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f005 f89a 	bl	800cdf8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8007cca:	f7fa fe59 	bl	8002980 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8007cce:	f003 fd69 	bl	800b7a4 <HAL_PWR_EnterSTANDBYMode>
}
 8007cd2:	bf00      	nop
 8007cd4:	3790      	adds	r7, #144	; 0x90
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	08021710 	.word	0x08021710
 8007ce0:	20006ddc 	.word	0x20006ddc
 8007ce4:	08021720 	.word	0x08021720
 8007ce8:	08021734 	.word	0x08021734
 8007cec:	20006e24 	.word	0x20006e24

08007cf0 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	71bb      	strb	r3, [r7, #6]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <MRT_setAlarmA+0x84>)
 8007d06:	5cd2      	ldrb	r2, [r2, r3]
 8007d08:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d0a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8007d0c:	79bb      	ldrb	r3, [r7, #6]
 8007d0e:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <MRT_setAlarmA+0x84>)
 8007d10:	5cd2      	ldrb	r2, [r2, r3]
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d14:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8007d16:	797b      	ldrb	r3, [r7, #5]
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <MRT_setAlarmA+0x84>)
 8007d1a:	5cd2      	ldrb	r2, [r2, r3]
 8007d1c:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d1e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007d20:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007d2c:	4b12      	ldr	r3, [pc, #72]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007d32:	4b11      	ldr	r3, [pc, #68]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007d3e:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8007d44:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8007d54:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <MRT_setAlarmA+0x8c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	4907      	ldr	r1, [pc, #28]	; (8007d78 <MRT_setAlarmA+0x88>)
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f004 fe3d 	bl	800c9dc <HAL_RTC_SetAlarm_IT>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8007d68:	f7fa fe0a 	bl	8002980 <Error_Handler>
	  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000001c 	.word	0x2000001c
 8007d78:	20000680 	.word	0x20000680
 8007d7c:	20006e24 	.word	0x20006e24

08007d80 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	71bb      	strb	r3, [r7, #6]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <MRT_setRTC+0x84>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8007d9a:	79bb      	ldrb	r3, [r7, #6]
 8007d9c:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <MRT_setRTC+0x84>)
 8007d9e:	5cd3      	ldrb	r3, [r2, r3]
 8007da0:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8007da2:	797b      	ldrb	r3, [r7, #5]
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <MRT_setRTC+0x84>)
 8007da6:	5cd3      	ldrb	r3, [r2, r3]
 8007da8:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <MRT_setRTC+0x88>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f107 010c 	add.w	r1, r7, #12
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fbfc 	bl	800c5ba <HAL_RTC_SetTime>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8007dc8:	f7fa fdda 	bl	8002980 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007dcc:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <MRT_setRTC+0x8c>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <MRT_setRTC+0x8c>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <MRT_setRTC+0x8c>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007dde:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <MRT_setRTC+0x8c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007de4:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <MRT_setRTC+0x88>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2201      	movs	r2, #1
 8007dea:	4908      	ldr	r1, [pc, #32]	; (8007e0c <MRT_setRTC+0x8c>)
 8007dec:	4618      	mov	r0, r3
 8007dee:	f004 fcff 	bl	800c7f0 <HAL_RTC_SetDate>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8007df8:	f7fa fdc2 	bl	8002980 <Error_Handler>
	  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	2000001c 	.word	0x2000001c
 8007e08:	20006e24 	.word	0x20006e24
 8007e0c:	2000067c 	.word	0x2000067c

08007e10 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007e16:	2300      	movs	r3, #0
 8007e18:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e20:	483f      	ldr	r0, [pc, #252]	; (8007f20 <Max31855_Read_Temp+0x110>)
 8007e22:	f001 fa21 	bl	8009268 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	493d      	ldr	r1, [pc, #244]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e2e:	483e      	ldr	r0, [pc, #248]	; (8007f28 <Max31855_Read_Temp+0x118>)
 8007e30:	f005 fac9 	bl	800d3c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007e34:	2201      	movs	r2, #1
 8007e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e3a:	4839      	ldr	r0, [pc, #228]	; (8007f20 <Max31855_Read_Temp+0x110>)
 8007e3c:	f001 fa14 	bl	8009268 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8007e40:	4b38      	ldr	r3, [pc, #224]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e42:	78db      	ldrb	r3, [r3, #3]
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b37      	ldr	r3, [pc, #220]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e48:	789b      	ldrb	r3, [r3, #2]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	431a      	orrs	r2, r3
 8007e56:	4b33      	ldr	r3, [pc, #204]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	061b      	lsls	r3, r3, #24
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b30      	ldr	r3, [pc, #192]	; (8007f2c <Max31855_Read_Temp+0x11c>)
 8007e6c:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8007e6e:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	09db      	lsrs	r3, r3, #7
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	4b2d      	ldr	r3, [pc, #180]	; (8007f30 <Max31855_Read_Temp+0x120>)
 8007e7a:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8007e7c:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8007e88:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007e8a:	78db      	ldrb	r3, [r3, #3]
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	425b      	negs	r3, r3
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9a:	4b26      	ldr	r3, [pc, #152]	; (8007f34 <Max31855_Read_Temp+0x124>)
 8007e9c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8007ea0:	e039      	b.n	8007f16 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <Max31855_Read_Temp+0x120>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d120      	bne.n	8007eec <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007eaa:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	019b      	lsls	r3, r3, #6
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007eb2:	7852      	ldrb	r2, [r2, #1]
 8007eb4:	0892      	lsrs	r2, r2, #2
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec2:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007eca:	f083 031f 	eor.w	r3, r3, #31
 8007ece:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	425b      	negs	r3, r3
 8007ed4:	ee07 3a90 	vmov	s15, r3
 8007ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007edc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ee4:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <Max31855_Read_Temp+0x124>)
 8007ee6:	edc3 7a00 	vstr	s15, [r3]
}
 8007eea:	e014      	b.n	8007f16 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	4a0c      	ldr	r2, [pc, #48]	; (8007f24 <Max31855_Read_Temp+0x114>)
 8007ef4:	7852      	ldrb	r2, [r2, #1]
 8007ef6:	0892      	lsrs	r2, r2, #2
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	4313      	orrs	r3, r2
 8007efc:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f08:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <Max31855_Read_Temp+0x124>)
 8007f12:	edc3 7a00 	vstr	s15, [r3]
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
 8007f24:	20006e28 	.word	0x20006e28
 8007f28:	200068c4 	.word	0x200068c4
 8007f2c:	200006aa 	.word	0x200006aa
 8007f30:	200006ac 	.word	0x200006ac
 8007f34:	20006a00 	.word	0x20006a00

08007f38 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8007f38:	b40f      	push	{r0, r1, r2, r3}
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f4e:	480a      	ldr	r0, [pc, #40]	; (8007f78 <myprintf+0x40>)
 8007f50:	f014 fe96 	bl	801cc80 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8007f54:	4808      	ldr	r0, [pc, #32]	; (8007f78 <myprintf+0x40>)
 8007f56:	f7f8 f94b 	bl	80001f0 <strlen>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	4905      	ldr	r1, [pc, #20]	; (8007f78 <myprintf+0x40>)
 8007f64:	4805      	ldr	r0, [pc, #20]	; (8007f7c <myprintf+0x44>)
 8007f66:	f006 fc4a 	bl	800e7fe <HAL_UART_Transmit>

}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f74:	b004      	add	sp, #16
 8007f76:	4770      	bx	lr
 8007f78:	200006b0 	.word	0x200006b0
 8007f7c:	20005ec4 	.word	0x20005ec4

08007f80 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4932      	ldr	r1, [pc, #200]	; (8008058 <sd_init_dynamic_filename+0xd8>)
 8007f90:	4832      	ldr	r0, [pc, #200]	; (800805c <sd_init_dynamic_filename+0xdc>)
 8007f92:	f00c fb81 	bl	8014698 <f_mount>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8007fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa8:	4619      	mov	r1, r3
 8007faa:	482d      	ldr	r0, [pc, #180]	; (8008060 <sd_init_dynamic_filename+0xe0>)
 8007fac:	f7ff ffc4 	bl	8007f38 <myprintf>
		return fres;
 8007fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb4:	e04b      	b.n	800804e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8007fba:	f107 0320 	add.w	r3, r7, #32
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68f9      	ldr	r1, [r7, #12]
 8007fc2:	4825      	ldr	r0, [pc, #148]	; (8008058 <sd_init_dynamic_filename+0xd8>)
 8007fc4:	f000 f89c 	bl	8008100 <scan_files>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	f107 0310 	add.w	r3, r7, #16
 8007fd6:	4923      	ldr	r1, [pc, #140]	; (8008064 <sd_init_dynamic_filename+0xe4>)
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f013 fe35 	bl	801bc48 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8007fde:	f107 0310 	add.w	r3, r7, #16
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f013 fec0 	bl	801bd6a <strcpy>
 8007fea:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8007fec:	f107 0310 	add.w	r3, r7, #16
 8007ff0:	221a      	movs	r2, #26
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	481c      	ldr	r0, [pc, #112]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 8007ff6:	f00c fbb3 	bl	8014760 <f_open>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8008000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11a      	bne.n	800803e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8008008:	4818      	ldr	r0, [pc, #96]	; (800806c <sd_init_dynamic_filename+0xec>)
 800800a:	f7ff ff95 	bl	8007f38 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	4619      	mov	r1, r3
 8008014:	4814      	ldr	r0, [pc, #80]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 8008016:	f00c ffc4 	bl	8014fa2 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800801a:	4915      	ldr	r1, [pc, #84]	; (8008070 <sd_init_dynamic_filename+0xf0>)
 800801c:	4815      	ldr	r0, [pc, #84]	; (8008074 <sd_init_dynamic_filename+0xf4>)
 800801e:	f013 fe13 	bl	801bc48 <siprintf>
	sd_write(&fil, msg_buffer);
 8008022:	4914      	ldr	r1, [pc, #80]	; (8008074 <sd_init_dynamic_filename+0xf4>)
 8008024:	4810      	ldr	r0, [pc, #64]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 8008026:	f000 f841 	bl	80080ac <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	480e      	ldr	r0, [pc, #56]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 800802e:	f000 f83d 	bl	80080ac <sd_write>
	f_close(&fil);
 8008032:	480d      	ldr	r0, [pc, #52]	; (8008068 <sd_init_dynamic_filename+0xe8>)
 8008034:	f00c ff86 	bl	8014f44 <f_close>

	return fres;
 8008038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800803c:	e007      	b.n	800804e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 800803e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008042:	4619      	mov	r1, r3
 8008044:	480c      	ldr	r0, [pc, #48]	; (8008078 <sd_init_dynamic_filename+0xf8>)
 8008046:	f7ff ff77 	bl	8007f38 <myprintf>
		return fres;
 800804a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800804e:	4618      	mov	r0, r3
 8008050:	3728      	adds	r7, #40	; 0x28
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	08021754 	.word	0x08021754
 800805c:	20006070 	.word	0x20006070
 8008060:	08021758 	.word	0x08021758
 8008064:	080217d4 	.word	0x080217d4
 8008068:	20006a70 	.word	0x20006a70
 800806c:	08021770 	.word	0x08021770
 8008070:	080217b4 	.word	0x080217b4
 8008074:	20006e2c 	.word	0x20006e2c
 8008078:	080217a0 	.word	0x080217a0

0800807c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8008084:	2212      	movs	r2, #18
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4807      	ldr	r0, [pc, #28]	; (80080a8 <sd_open_file+0x2c>)
 800808a:	f00c fb69 	bl	8014760 <f_open>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <sd_open_file+0x2c>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	4619      	mov	r1, r3
 8008098:	4803      	ldr	r0, [pc, #12]	; (80080a8 <sd_open_file+0x2c>)
 800809a:	f00c ff82 	bl	8014fa2 <f_lseek>

	return fres;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20006a70 	.word	0x20006a70

080080ac <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 80080b6:	6838      	ldr	r0, [r7, #0]
 80080b8:	f7f8 f89a 	bl	80001f0 <strlen>
 80080bc:	4602      	mov	r2, r0
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f00c fd10 	bl	8014aea <f_write>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4619      	mov	r1, r3
 80080d8:	4807      	ldr	r0, [pc, #28]	; (80080f8 <sd_write+0x4c>)
 80080da:	f7ff ff2d 	bl	8007f38 <myprintf>
		return bytesWrote;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	e004      	b.n	80080ee <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 80080e4:	4805      	ldr	r0, [pc, #20]	; (80080fc <sd_write+0x50>)
 80080e6:	f7ff ff27 	bl	8007f38 <myprintf>
		return -1;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	080217e0 	.word	0x080217e0
 80080fc:	08021804 	.word	0x08021804

08008100 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8008100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008102:	b099      	sub	sp, #100	; 0x64
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	466b      	mov	r3, sp
 800810e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f7f8 f86d 	bl	80001f0 <strlen>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800811c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8008120:	4623      	mov	r3, r4
 8008122:	3b01      	subs	r3, #1
 8008124:	65bb      	str	r3, [r7, #88]	; 0x58
 8008126:	b2e0      	uxtb	r0, r4
 8008128:	f04f 0100 	mov.w	r1, #0
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	00cb      	lsls	r3, r1, #3
 8008136:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800813a:	00c2      	lsls	r2, r0, #3
 800813c:	b2e0      	uxtb	r0, r4
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	00cb      	lsls	r3, r1, #3
 800814c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008150:	00c2      	lsls	r2, r0, #3
 8008152:	4623      	mov	r3, r4
 8008154:	3307      	adds	r3, #7
 8008156:	08db      	lsrs	r3, r3, #3
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	ebad 0d03 	sub.w	sp, sp, r3
 800815e:	466b      	mov	r3, sp
 8008160:	3300      	adds	r3, #0
 8008162:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8008164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008166:	4619      	mov	r1, r3
 8008168:	68b8      	ldr	r0, [r7, #8]
 800816a:	f000 f8ff 	bl	800836c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8008178:	f107 0318 	add.w	r3, r7, #24
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	4618      	mov	r0, r3
 8008180:	f00d f962 	bl	8015448 <f_opendir>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800818a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800818e:	2b00      	cmp	r3, #0
 8008190:	d16c      	bne.n	800826c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008192:	f107 0318 	add.w	r3, r7, #24
 8008196:	4939      	ldr	r1, [pc, #228]	; (800827c <scan_files+0x17c>)
 8008198:	4618      	mov	r0, r3
 800819a:	f00d f9f9 	bl	8015590 <f_readdir>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80081a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d15a      	bne.n	8008262 <scan_files+0x162>
 80081ac:	4b33      	ldr	r3, [pc, #204]	; (800827c <scan_files+0x17c>)
 80081ae:	7a5b      	ldrb	r3, [r3, #9]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d056      	beq.n	8008262 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80081b4:	4b31      	ldr	r3, [pc, #196]	; (800827c <scan_files+0x17c>)
 80081b6:	7a1b      	ldrb	r3, [r3, #8]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d14e      	bne.n	800825e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 80081c0:	466b      	mov	r3, sp
 80081c2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 80081c4:	482e      	ldr	r0, [pc, #184]	; (8008280 <scan_files+0x180>)
 80081c6:	f7f8 f813 	bl	80001f0 <strlen>
 80081ca:	4604      	mov	r4, r0
 80081cc:	4623      	mov	r3, r4
 80081ce:	3b01      	subs	r3, #1
 80081d0:	653b      	str	r3, [r7, #80]	; 0x50
 80081d2:	4620      	mov	r0, r4
 80081d4:	f04f 0100 	mov.w	r1, #0
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	00cb      	lsls	r3, r1, #3
 80081e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80081e6:	00c2      	lsls	r2, r0, #3
 80081e8:	4620      	mov	r0, r4
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	00cb      	lsls	r3, r1, #3
 80081f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80081fc:	00c2      	lsls	r2, r0, #3
 80081fe:	1de3      	adds	r3, r4, #7
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	ebad 0d03 	sub.w	sp, sp, r3
 8008208:	466b      	mov	r3, sp
 800820a:	3300      	adds	r3, #0
 800820c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800820e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008210:	4619      	mov	r1, r3
 8008212:	481b      	ldr	r0, [pc, #108]	; (8008280 <scan_files+0x180>)
 8008214:	f000 f8aa 	bl	800836c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8008218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800821e:	4619      	mov	r1, r3
 8008220:	4817      	ldr	r0, [pc, #92]	; (8008280 <scan_files+0x180>)
 8008222:	f013 fdaa 	bl	801bd7a <strncmp>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800822c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8008230:	2b00      	cmp	r3, #0
 8008232:	d112      	bne.n	800825a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8008234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008236:	f107 0214 	add.w	r2, r7, #20
 800823a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f820 	bl	8008284 <extract_filename_suffix>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	d202      	bcs.n	800825a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	46b5      	mov	sp, r6
 800825c:	e799      	b.n	8008192 <scan_files+0x92>
            	continue; // don't enter directory
 800825e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008260:	e797      	b.n	8008192 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8008262:	f107 0318 	add.w	r3, r7, #24
 8008266:	4618      	mov	r0, r3
 8008268:	f00d f967 	bl	801553a <f_closedir>
    }

    return res;
 800826c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008270:	46ad      	mov	sp, r5
}
 8008272:	4618      	mov	r0, r3
 8008274:	3764      	adds	r7, #100	; 0x64
 8008276:	46bd      	mov	sp, r7
 8008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827a:	bf00      	nop
 800827c:	200007b0 	.word	0x200007b0
 8008280:	200007b9 	.word	0x200007b9

08008284 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8008284:	b5b0      	push	{r4, r5, r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	460b      	mov	r3, r1
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	72fb      	strb	r3, [r7, #11]
 8008292:	466b      	mov	r3, sp
 8008294:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7f7 ffaa 	bl	80001f0 <strlen>
 800829c:	4603      	mov	r3, r0
 800829e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80082a0:	2308      	movs	r3, #8
 80082a2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80082a4:	7f7c      	ldrb	r4, [r7, #29]
 80082a6:	4623      	mov	r3, r4
 80082a8:	3b01      	subs	r3, #1
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	b2e0      	uxtb	r0, r4
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	00cb      	lsls	r3, r1, #3
 80082bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80082c0:	00c2      	lsls	r2, r0, #3
 80082c2:	b2e0      	uxtb	r0, r4
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	f04f 0300 	mov.w	r3, #0
 80082d0:	00cb      	lsls	r3, r1, #3
 80082d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80082d6:	00c2      	lsls	r2, r0, #3
 80082d8:	4623      	mov	r3, r4
 80082da:	3307      	adds	r3, #7
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	ebad 0d03 	sub.w	sp, sp, r3
 80082e4:	466b      	mov	r3, sp
 80082e6:	3300      	adds	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 80082ea:	2300      	movs	r3, #0
 80082ec:	77fb      	strb	r3, [r7, #31]
 80082ee:	e014      	b.n	800831a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	1e5a      	subs	r2, r3, #1
 80082f4:	7ffb      	ldrb	r3, [r7, #31]
 80082f6:	441a      	add	r2, r3
 80082f8:	7fbb      	ldrb	r3, [r7, #30]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	429a      	cmp	r2, r3
 80082fe:	da11      	bge.n	8008324 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8008300:	7afa      	ldrb	r2, [r7, #11]
 8008302:	7ffb      	ldrb	r3, [r7, #31]
 8008304:	4413      	add	r3, r2
 8008306:	461a      	mov	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	441a      	add	r2, r3
 800830c:	7ffb      	ldrb	r3, [r7, #31]
 800830e:	7811      	ldrb	r1, [r2, #0]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8008314:	7ffb      	ldrb	r3, [r7, #31]
 8008316:	3301      	adds	r3, #1
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	7ffa      	ldrb	r2, [r7, #31]
 800831c:	7f7b      	ldrb	r3, [r7, #29]
 800831e:	429a      	cmp	r2, r3
 8008320:	d3e6      	bcc.n	80082f0 <extract_filename_suffix+0x6c>
 8008322:	e000      	b.n	8008326 <extract_filename_suffix+0xa2>
		}
		else break;
 8008324:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f107 0110 	add.w	r1, r7, #16
 800832c:	220a      	movs	r2, #10
 800832e:	4618      	mov	r0, r3
 8008330:	f014 fbe8 	bl	801cb04 <strtol>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	429a      	cmp	r2, r3
 8008342:	d00a      	beq.n	800835a <extract_filename_suffix+0xd6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800834c:	d005      	beq.n	800835a <extract_filename_suffix+0xd6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008356:	4293      	cmp	r3, r2
 8008358:	d101      	bne.n	800835e <extract_filename_suffix+0xda>
	{
		return 1;
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <extract_filename_suffix+0xdc>
	}

	return 0;
 800835e:	2300      	movs	r3, #0
 8008360:	46ad      	mov	sp, r5
}
 8008362:	4618      	mov	r0, r3
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800836c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
 800837a:	e019      	b.n	80083b0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	73bb      	strb	r3, [r7, #14]
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	3301      	adds	r3, #1
 800838a:	4a0f      	ldr	r2, [pc, #60]	; (80083c8 <str2upper+0x5c>)
 800838c:	4413      	add	r3, r2
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d102      	bne.n	800839e <str2upper+0x32>
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	3b20      	subs	r3, #32
 800839c:	e000      	b.n	80083a0 <str2upper+0x34>
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	440a      	add	r2, r1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	3301      	adds	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
 80083b0:	7bfc      	ldrb	r4, [r7, #15]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7f7 ff1c 	bl	80001f0 <strlen>
 80083b8:	4603      	mov	r3, r0
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d3de      	bcc.n	800837c <str2upper+0x10>
	}
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd90      	pop	{r4, r7, pc}
 80083c8:	08021ad8 	.word	0x08021ad8

080083cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083d0:	4b0e      	ldr	r3, [pc, #56]	; (800840c <HAL_Init+0x40>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a0d      	ldr	r2, [pc, #52]	; (800840c <HAL_Init+0x40>)
 80083d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <HAL_Init+0x40>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a0a      	ldr	r2, [pc, #40]	; (800840c <HAL_Init+0x40>)
 80083e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083e8:	4b08      	ldr	r3, [pc, #32]	; (800840c <HAL_Init+0x40>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a07      	ldr	r2, [pc, #28]	; (800840c <HAL_Init+0x40>)
 80083ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083f4:	2003      	movs	r0, #3
 80083f6:	f000 fd30 	bl	8008e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083fa:	2000      	movs	r0, #0
 80083fc:	f7fa fe02 	bl	8003004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008400:	f7fa fac6 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40023c00 	.word	0x40023c00

08008410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <HAL_IncTick+0x20>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	4b06      	ldr	r3, [pc, #24]	; (8008434 <HAL_IncTick+0x24>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4413      	add	r3, r2
 8008420:	4a04      	ldr	r2, [pc, #16]	; (8008434 <HAL_IncTick+0x24>)
 8008422:	6013      	str	r3, [r2, #0]
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	2000005c 	.word	0x2000005c
 8008434:	20007214 	.word	0x20007214

08008438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  return uwTick;
 800843c:	4b03      	ldr	r3, [pc, #12]	; (800844c <HAL_GetTick+0x14>)
 800843e:	681b      	ldr	r3, [r3, #0]
}
 8008440:	4618      	mov	r0, r3
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20007214 	.word	0x20007214

08008450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008458:	f7ff ffee 	bl	8008438 <HAL_GetTick>
 800845c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d005      	beq.n	8008476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <HAL_Delay+0x44>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008476:	bf00      	nop
 8008478:	f7ff ffde 	bl	8008438 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	429a      	cmp	r2, r3
 8008486:	d8f7      	bhi.n	8008478 <HAL_Delay+0x28>
  {
  }
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	2000005c 	.word	0x2000005c

08008498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e033      	b.n	8008516 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fa fa96 	bl	80029e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d118      	bne.n	8008508 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80084de:	f023 0302 	bic.w	r3, r3, #2
 80084e2:	f043 0202 	orr.w	r2, r3, #2
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fae8 	bl	8008ac0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f023 0303 	bic.w	r3, r3, #3
 80084fe:	f043 0201 	orr.w	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
 8008506:	e001      	b.n	800850c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_ADC_Start+0x1a>
 8008536:	2302      	movs	r3, #2
 8008538:	e0b2      	b.n	80086a0 <HAL_ADC_Start+0x180>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b01      	cmp	r3, #1
 800854e:	d018      	beq.n	8008582 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0201 	orr.w	r2, r2, #1
 800855e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008560:	4b52      	ldr	r3, [pc, #328]	; (80086ac <HAL_ADC_Start+0x18c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a52      	ldr	r2, [pc, #328]	; (80086b0 <HAL_ADC_Start+0x190>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	0c9a      	lsrs	r2, r3, #18
 800856c:	4613      	mov	r3, r2
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	4413      	add	r3, r2
 8008572:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008574:	e002      	b.n	800857c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	3b01      	subs	r3, #1
 800857a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f9      	bne.n	8008576 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b01      	cmp	r3, #1
 800858e:	d17a      	bne.n	8008686 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80085ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ce:	d106      	bne.n	80085de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	f023 0206 	bic.w	r2, r3, #6
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	645a      	str	r2, [r3, #68]	; 0x44
 80085dc:	e002      	b.n	80085e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80085ec:	4b31      	ldr	r3, [pc, #196]	; (80086b4 <HAL_ADC_Start+0x194>)
 80085ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80085f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	2b00      	cmp	r3, #0
 8008604:	d12a      	bne.n	800865c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2b      	ldr	r2, [pc, #172]	; (80086b8 <HAL_ADC_Start+0x198>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d015      	beq.n	800863c <HAL_ADC_Start+0x11c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a29      	ldr	r2, [pc, #164]	; (80086bc <HAL_ADC_Start+0x19c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d105      	bne.n	8008626 <HAL_ADC_Start+0x106>
 800861a:	4b26      	ldr	r3, [pc, #152]	; (80086b4 <HAL_ADC_Start+0x194>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a25      	ldr	r2, [pc, #148]	; (80086c0 <HAL_ADC_Start+0x1a0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d136      	bne.n	800869e <HAL_ADC_Start+0x17e>
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <HAL_ADC_Start+0x194>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d130      	bne.n	800869e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d129      	bne.n	800869e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008658:	609a      	str	r2, [r3, #8]
 800865a:	e020      	b.n	800869e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <HAL_ADC_Start+0x198>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d11b      	bne.n	800869e <HAL_ADC_Start+0x17e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d114      	bne.n	800869e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	e00b      	b.n	800869e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f043 0210 	orr.w	r2, r3, #16
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	f043 0201 	orr.w	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	20000000 	.word	0x20000000
 80086b0:	431bde83 	.word	0x431bde83
 80086b4:	40012300 	.word	0x40012300
 80086b8:	40012000 	.word	0x40012000
 80086bc:	40012100 	.word	0x40012100
 80086c0:	40012200 	.word	0x40012200

080086c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_ADC_Stop+0x16>
 80086d6:	2302      	movs	r3, #2
 80086d8:	e021      	b.n	800871e <HAL_ADC_Stop+0x5a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d109      	bne.n	8008714 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008708:	f023 0301 	bic.w	r3, r3, #1
 800870c:	f043 0201 	orr.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008746:	d113      	bne.n	8008770 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008756:	d10b      	bne.n	8008770 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f043 0220 	orr.w	r2, r3, #32
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e063      	b.n	8008838 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008770:	f7ff fe62 	bl	8008438 <HAL_GetTick>
 8008774:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008776:	e021      	b.n	80087bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877e:	d01d      	beq.n	80087bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <HAL_ADC_PollForConversion+0x6c>
 8008786:	f7ff fe57 	bl	8008438 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d212      	bcs.n	80087bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d00b      	beq.n	80087bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	f043 0204 	orr.w	r2, r3, #4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e03d      	b.n	8008838 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d1d6      	bne.n	8008778 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f06f 0212 	mvn.w	r2, #18
 80087d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d123      	bne.n	8008836 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d11f      	bne.n	8008836 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800880e:	2b00      	cmp	r3, #0
 8008810:	d111      	bne.n	8008836 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	f043 0201 	orr.w	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_ADC_ConfigChannel+0x1c>
 8008874:	2302      	movs	r3, #2
 8008876:	e113      	b.n	8008aa0 <HAL_ADC_ConfigChannel+0x244>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b09      	cmp	r3, #9
 8008886:	d925      	bls.n	80088d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68d9      	ldr	r1, [r3, #12]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	4613      	mov	r3, r2
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	4413      	add	r3, r2
 800889c:	3b1e      	subs	r3, #30
 800889e:	2207      	movs	r2, #7
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	43da      	mvns	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	400a      	ands	r2, r1
 80088ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68d9      	ldr	r1, [r3, #12]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	4618      	mov	r0, r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	4403      	add	r3, r0
 80088c6:	3b1e      	subs	r3, #30
 80088c8:	409a      	lsls	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	60da      	str	r2, [r3, #12]
 80088d2:	e022      	b.n	800891a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6919      	ldr	r1, [r3, #16]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	4613      	mov	r3, r2
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4413      	add	r3, r2
 80088e8:	2207      	movs	r2, #7
 80088ea:	fa02 f303 	lsl.w	r3, r2, r3
 80088ee:	43da      	mvns	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	400a      	ands	r2, r1
 80088f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6919      	ldr	r1, [r3, #16]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	4618      	mov	r0, r3
 800890a:	4603      	mov	r3, r0
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	4403      	add	r3, r0
 8008910:	409a      	lsls	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2b06      	cmp	r3, #6
 8008920:	d824      	bhi.n	800896c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	3b05      	subs	r3, #5
 8008934:	221f      	movs	r2, #31
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	43da      	mvns	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	400a      	ands	r2, r1
 8008942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	4618      	mov	r0, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	3b05      	subs	r3, #5
 800895e:	fa00 f203 	lsl.w	r2, r0, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	635a      	str	r2, [r3, #52]	; 0x34
 800896a:	e04c      	b.n	8008a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b0c      	cmp	r3, #12
 8008972:	d824      	bhi.n	80089be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	3b23      	subs	r3, #35	; 0x23
 8008986:	221f      	movs	r2, #31
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	43da      	mvns	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	400a      	ands	r2, r1
 8008994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4618      	mov	r0, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	3b23      	subs	r3, #35	; 0x23
 80089b0:	fa00 f203 	lsl.w	r2, r0, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
 80089bc:	e023      	b.n	8008a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	3b41      	subs	r3, #65	; 0x41
 80089d0:	221f      	movs	r2, #31
 80089d2:	fa02 f303 	lsl.w	r3, r2, r3
 80089d6:	43da      	mvns	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	400a      	ands	r2, r1
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	4618      	mov	r0, r3
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	3b41      	subs	r3, #65	; 0x41
 80089fa:	fa00 f203 	lsl.w	r2, r0, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a06:	4b29      	ldr	r3, [pc, #164]	; (8008aac <HAL_ADC_ConfigChannel+0x250>)
 8008a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a28      	ldr	r2, [pc, #160]	; (8008ab0 <HAL_ADC_ConfigChannel+0x254>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10f      	bne.n	8008a34 <HAL_ADC_ConfigChannel+0x1d8>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b12      	cmp	r3, #18
 8008a1a:	d10b      	bne.n	8008a34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1d      	ldr	r2, [pc, #116]	; (8008ab0 <HAL_ADC_ConfigChannel+0x254>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d12b      	bne.n	8008a96 <HAL_ADC_ConfigChannel+0x23a>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a1c      	ldr	r2, [pc, #112]	; (8008ab4 <HAL_ADC_ConfigChannel+0x258>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <HAL_ADC_ConfigChannel+0x1f4>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b11      	cmp	r3, #17
 8008a4e:	d122      	bne.n	8008a96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a11      	ldr	r2, [pc, #68]	; (8008ab4 <HAL_ADC_ConfigChannel+0x258>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d111      	bne.n	8008a96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <HAL_ADC_ConfigChannel+0x25c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a11      	ldr	r2, [pc, #68]	; (8008abc <HAL_ADC_ConfigChannel+0x260>)
 8008a78:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7c:	0c9a      	lsrs	r2, r3, #18
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008a88:	e002      	b.n	8008a90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f9      	bne.n	8008a8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40012300 	.word	0x40012300
 8008ab0:	40012000 	.word	0x40012000
 8008ab4:	10000012 	.word	0x10000012
 8008ab8:	20000000 	.word	0x20000000
 8008abc:	431bde83 	.word	0x431bde83

08008ac0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ac8:	4b79      	ldr	r3, [pc, #484]	; (8008cb0 <ADC_Init+0x1f0>)
 8008aca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	021a      	lsls	r2, r3, #8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6859      	ldr	r1, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6899      	ldr	r1, [r3, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	4a58      	ldr	r2, [pc, #352]	; (8008cb4 <ADC_Init+0x1f4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d022      	beq.n	8008b9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6899      	ldr	r1, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	e00f      	b.n	8008bbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0202 	bic.w	r2, r2, #2
 8008bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6899      	ldr	r1, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	7e1b      	ldrb	r3, [r3, #24]
 8008bd8:	005a      	lsls	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01b      	beq.n	8008c24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	3b01      	subs	r3, #1
 8008c18:	035a      	lsls	r2, r3, #13
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	605a      	str	r2, [r3, #4]
 8008c22:	e007      	b.n	8008c34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	051a      	lsls	r2, r3, #20
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6899      	ldr	r1, [r3, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c76:	025a      	lsls	r2, r3, #9
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6899      	ldr	r1, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	029a      	lsls	r2, r3, #10
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40012300 	.word	0x40012300
 8008cb4:	0f000001 	.word	0x0f000001

08008cb8 <__NVIC_SetPriorityGrouping>:
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <__NVIC_SetPriorityGrouping+0x44>)
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cea:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <__NVIC_SetPriorityGrouping+0x44>)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	60d3      	str	r3, [r2, #12]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	e000ed00 	.word	0xe000ed00

08008d00 <__NVIC_GetPriorityGrouping>:
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d04:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <__NVIC_GetPriorityGrouping+0x18>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	0a1b      	lsrs	r3, r3, #8
 8008d0a:	f003 0307 	and.w	r3, r3, #7
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	e000ed00 	.word	0xe000ed00

08008d1c <__NVIC_EnableIRQ>:
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	db0b      	blt.n	8008d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	f003 021f 	and.w	r2, r3, #31
 8008d34:	4907      	ldr	r1, [pc, #28]	; (8008d54 <__NVIC_EnableIRQ+0x38>)
 8008d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8008d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	e000e100 	.word	0xe000e100

08008d58 <__NVIC_DisableIRQ>:
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	db12      	blt.n	8008d90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	f003 021f 	and.w	r2, r3, #31
 8008d70:	490a      	ldr	r1, [pc, #40]	; (8008d9c <__NVIC_DisableIRQ+0x44>)
 8008d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	2001      	movs	r0, #1
 8008d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8008d7e:	3320      	adds	r3, #32
 8008d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d84:	f3bf 8f4f 	dsb	sy
}
 8008d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008d8a:	f3bf 8f6f 	isb	sy
}
 8008d8e:	bf00      	nop
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	e000e100 	.word	0xe000e100

08008da0 <__NVIC_SetPriority>:
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	db0a      	blt.n	8008dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	490c      	ldr	r1, [pc, #48]	; (8008dec <__NVIC_SetPriority+0x4c>)
 8008dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbe:	0112      	lsls	r2, r2, #4
 8008dc0:	b2d2      	uxtb	r2, r2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008dc8:	e00a      	b.n	8008de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	4908      	ldr	r1, [pc, #32]	; (8008df0 <__NVIC_SetPriority+0x50>)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	3b04      	subs	r3, #4
 8008dd8:	0112      	lsls	r2, r2, #4
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	440b      	add	r3, r1
 8008dde:	761a      	strb	r2, [r3, #24]
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	e000e100 	.word	0xe000e100
 8008df0:	e000ed00 	.word	0xe000ed00

08008df4 <NVIC_EncodePriority>:
{
 8008df4:	b480      	push	{r7}
 8008df6:	b089      	sub	sp, #36	; 0x24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	f1c3 0307 	rsb	r3, r3, #7
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	bf28      	it	cs
 8008e12:	2304      	movcs	r3, #4
 8008e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	2b06      	cmp	r3, #6
 8008e1c:	d902      	bls.n	8008e24 <NVIC_EncodePriority+0x30>
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3b03      	subs	r3, #3
 8008e22:	e000      	b.n	8008e26 <NVIC_EncodePriority+0x32>
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	43da      	mvns	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	401a      	ands	r2, r3
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	43d9      	mvns	r1, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e4c:	4313      	orrs	r3, r2
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3724      	adds	r7, #36	; 0x24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ff28 	bl	8008cb8 <__NVIC_SetPriorityGrouping>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e82:	f7ff ff3d 	bl	8008d00 <__NVIC_GetPriorityGrouping>
 8008e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	6978      	ldr	r0, [r7, #20]
 8008e8e:	f7ff ffb1 	bl	8008df4 <NVIC_EncodePriority>
 8008e92:	4602      	mov	r2, r0
 8008e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff ff80 	bl	8008da0 <__NVIC_SetPriority>
}
 8008ea0:	bf00      	nop
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff ff30 	bl	8008d1c <__NVIC_EnableIRQ>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff ff40 	bl	8008d58 <__NVIC_DisableIRQ>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e177      	b.n	80091ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008efc:	2201      	movs	r2, #1
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	f040 8166 	bne.w	80091e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d005      	beq.n	8008f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d130      	bne.n	8008f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f42:	43db      	mvns	r3, r3
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4013      	ands	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	fa02 f303 	lsl.w	r3, r2, r3
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f68:	2201      	movs	r2, #1
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	43db      	mvns	r3, r3
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	4013      	ands	r3, r2
 8008f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	091b      	lsrs	r3, r3, #4
 8008f7e:	f003 0201 	and.w	r2, r3, #1
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d017      	beq.n	8008fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	2203      	movs	r2, #3
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d123      	bne.n	8009024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	08da      	lsrs	r2, r3, #3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3208      	adds	r2, #8
 8008fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	220f      	movs	r2, #15
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4313      	orrs	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	08da      	lsrs	r2, r3, #3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3208      	adds	r2, #8
 800901e:	69b9      	ldr	r1, [r7, #24]
 8009020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	2203      	movs	r2, #3
 8009030:	fa02 f303 	lsl.w	r3, r2, r3
 8009034:	43db      	mvns	r3, r3
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	4013      	ands	r3, r2
 800903a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f003 0203 	and.w	r2, r3, #3
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	4313      	orrs	r3, r2
 8009050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80c0 	beq.w	80091e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	4b66      	ldr	r3, [pc, #408]	; (8009204 <HAL_GPIO_Init+0x324>)
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	4a65      	ldr	r2, [pc, #404]	; (8009204 <HAL_GPIO_Init+0x324>)
 8009070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009074:	6453      	str	r3, [r2, #68]	; 0x44
 8009076:	4b63      	ldr	r3, [pc, #396]	; (8009204 <HAL_GPIO_Init+0x324>)
 8009078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009082:	4a61      	ldr	r2, [pc, #388]	; (8009208 <HAL_GPIO_Init+0x328>)
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	089b      	lsrs	r3, r3, #2
 8009088:	3302      	adds	r3, #2
 800908a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800908e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	220f      	movs	r2, #15
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	43db      	mvns	r3, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	4013      	ands	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a58      	ldr	r2, [pc, #352]	; (800920c <HAL_GPIO_Init+0x32c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d037      	beq.n	800911e <HAL_GPIO_Init+0x23e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a57      	ldr	r2, [pc, #348]	; (8009210 <HAL_GPIO_Init+0x330>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d031      	beq.n	800911a <HAL_GPIO_Init+0x23a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a56      	ldr	r2, [pc, #344]	; (8009214 <HAL_GPIO_Init+0x334>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d02b      	beq.n	8009116 <HAL_GPIO_Init+0x236>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a55      	ldr	r2, [pc, #340]	; (8009218 <HAL_GPIO_Init+0x338>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d025      	beq.n	8009112 <HAL_GPIO_Init+0x232>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a54      	ldr	r2, [pc, #336]	; (800921c <HAL_GPIO_Init+0x33c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01f      	beq.n	800910e <HAL_GPIO_Init+0x22e>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a53      	ldr	r2, [pc, #332]	; (8009220 <HAL_GPIO_Init+0x340>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d019      	beq.n	800910a <HAL_GPIO_Init+0x22a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a52      	ldr	r2, [pc, #328]	; (8009224 <HAL_GPIO_Init+0x344>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <HAL_GPIO_Init+0x226>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a51      	ldr	r2, [pc, #324]	; (8009228 <HAL_GPIO_Init+0x348>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00d      	beq.n	8009102 <HAL_GPIO_Init+0x222>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a50      	ldr	r2, [pc, #320]	; (800922c <HAL_GPIO_Init+0x34c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d007      	beq.n	80090fe <HAL_GPIO_Init+0x21e>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a4f      	ldr	r2, [pc, #316]	; (8009230 <HAL_GPIO_Init+0x350>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d101      	bne.n	80090fa <HAL_GPIO_Init+0x21a>
 80090f6:	2309      	movs	r3, #9
 80090f8:	e012      	b.n	8009120 <HAL_GPIO_Init+0x240>
 80090fa:	230a      	movs	r3, #10
 80090fc:	e010      	b.n	8009120 <HAL_GPIO_Init+0x240>
 80090fe:	2308      	movs	r3, #8
 8009100:	e00e      	b.n	8009120 <HAL_GPIO_Init+0x240>
 8009102:	2307      	movs	r3, #7
 8009104:	e00c      	b.n	8009120 <HAL_GPIO_Init+0x240>
 8009106:	2306      	movs	r3, #6
 8009108:	e00a      	b.n	8009120 <HAL_GPIO_Init+0x240>
 800910a:	2305      	movs	r3, #5
 800910c:	e008      	b.n	8009120 <HAL_GPIO_Init+0x240>
 800910e:	2304      	movs	r3, #4
 8009110:	e006      	b.n	8009120 <HAL_GPIO_Init+0x240>
 8009112:	2303      	movs	r3, #3
 8009114:	e004      	b.n	8009120 <HAL_GPIO_Init+0x240>
 8009116:	2302      	movs	r3, #2
 8009118:	e002      	b.n	8009120 <HAL_GPIO_Init+0x240>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <HAL_GPIO_Init+0x240>
 800911e:	2300      	movs	r3, #0
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	f002 0203 	and.w	r2, r2, #3
 8009126:	0092      	lsls	r2, r2, #2
 8009128:	4093      	lsls	r3, r2
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	4313      	orrs	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009130:	4935      	ldr	r1, [pc, #212]	; (8009208 <HAL_GPIO_Init+0x328>)
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	089b      	lsrs	r3, r3, #2
 8009136:	3302      	adds	r3, #2
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800913e:	4b3d      	ldr	r3, [pc, #244]	; (8009234 <HAL_GPIO_Init+0x354>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	43db      	mvns	r3, r3
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	4013      	ands	r3, r2
 800914c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009162:	4a34      	ldr	r2, [pc, #208]	; (8009234 <HAL_GPIO_Init+0x354>)
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009168:	4b32      	ldr	r3, [pc, #200]	; (8009234 <HAL_GPIO_Init+0x354>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	43db      	mvns	r3, r3
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4013      	ands	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4313      	orrs	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800918c:	4a29      	ldr	r2, [pc, #164]	; (8009234 <HAL_GPIO_Init+0x354>)
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009192:	4b28      	ldr	r3, [pc, #160]	; (8009234 <HAL_GPIO_Init+0x354>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	43db      	mvns	r3, r3
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	4013      	ands	r3, r2
 80091a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091b6:	4a1f      	ldr	r2, [pc, #124]	; (8009234 <HAL_GPIO_Init+0x354>)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091bc:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <HAL_GPIO_Init+0x354>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	43db      	mvns	r3, r3
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	4013      	ands	r3, r2
 80091ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091e0:	4a14      	ldr	r2, [pc, #80]	; (8009234 <HAL_GPIO_Init+0x354>)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	3301      	adds	r3, #1
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	f67f ae84 	bls.w	8008efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	3724      	adds	r7, #36	; 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40023800 	.word	0x40023800
 8009208:	40013800 	.word	0x40013800
 800920c:	40020000 	.word	0x40020000
 8009210:	40020400 	.word	0x40020400
 8009214:	40020800 	.word	0x40020800
 8009218:	40020c00 	.word	0x40020c00
 800921c:	40021000 	.word	0x40021000
 8009220:	40021400 	.word	0x40021400
 8009224:	40021800 	.word	0x40021800
 8009228:	40021c00 	.word	0x40021c00
 800922c:	40022000 	.word	0x40022000
 8009230:	40022400 	.word	0x40022400
 8009234:	40013c00 	.word	0x40013c00

08009238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009250:	2301      	movs	r3, #1
 8009252:	73fb      	strb	r3, [r7, #15]
 8009254:	e001      	b.n	800925a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
 8009274:	4613      	mov	r3, r2
 8009276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009278:	787b      	ldrb	r3, [r7, #1]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800927e:	887a      	ldrh	r2, [r7, #2]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009284:	e003      	b.n	800928e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	041a      	lsls	r2, r3, #16
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	619a      	str	r2, [r3, #24]
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80092a6:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092a8:	695a      	ldr	r2, [r3, #20]
 80092aa:	88fb      	ldrh	r3, [r7, #6]
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d006      	beq.n	80092c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092b2:	4a05      	ldr	r2, [pc, #20]	; (80092c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fa fb02 	bl	80038c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	40013c00 	.word	0x40013c00

080092cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e12b      	b.n	8009536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7f9 fbbc 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2224      	movs	r2, #36	; 0x24
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 0201 	bic.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800931e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800932e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009330:	f002 fe9a 	bl	800c068 <HAL_RCC_GetPCLK1Freq>
 8009334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4a81      	ldr	r2, [pc, #516]	; (8009540 <HAL_I2C_Init+0x274>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d807      	bhi.n	8009350 <HAL_I2C_Init+0x84>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4a80      	ldr	r2, [pc, #512]	; (8009544 <HAL_I2C_Init+0x278>)
 8009344:	4293      	cmp	r3, r2
 8009346:	bf94      	ite	ls
 8009348:	2301      	movls	r3, #1
 800934a:	2300      	movhi	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	e006      	b.n	800935e <HAL_I2C_Init+0x92>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4a7d      	ldr	r2, [pc, #500]	; (8009548 <HAL_I2C_Init+0x27c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	bf94      	ite	ls
 8009358:	2301      	movls	r3, #1
 800935a:	2300      	movhi	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e0e7      	b.n	8009536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4a78      	ldr	r2, [pc, #480]	; (800954c <HAL_I2C_Init+0x280>)
 800936a:	fba2 2303 	umull	r2, r3, r2, r3
 800936e:	0c9b      	lsrs	r3, r3, #18
 8009370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4a6a      	ldr	r2, [pc, #424]	; (8009540 <HAL_I2C_Init+0x274>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d802      	bhi.n	80093a0 <HAL_I2C_Init+0xd4>
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	3301      	adds	r3, #1
 800939e:	e009      	b.n	80093b4 <HAL_I2C_Init+0xe8>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80093a6:	fb02 f303 	mul.w	r3, r2, r3
 80093aa:	4a69      	ldr	r2, [pc, #420]	; (8009550 <HAL_I2C_Init+0x284>)
 80093ac:	fba2 2303 	umull	r2, r3, r2, r3
 80093b0:	099b      	lsrs	r3, r3, #6
 80093b2:	3301      	adds	r3, #1
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	430b      	orrs	r3, r1
 80093ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	495c      	ldr	r1, [pc, #368]	; (8009540 <HAL_I2C_Init+0x274>)
 80093d0:	428b      	cmp	r3, r1
 80093d2:	d819      	bhi.n	8009408 <HAL_I2C_Init+0x13c>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	1e59      	subs	r1, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	fbb1 f3f3 	udiv	r3, r1, r3
 80093e2:	1c59      	adds	r1, r3, #1
 80093e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093e8:	400b      	ands	r3, r1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <HAL_I2C_Init+0x138>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1e59      	subs	r1, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80093fc:	3301      	adds	r3, #1
 80093fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009402:	e051      	b.n	80094a8 <HAL_I2C_Init+0x1dc>
 8009404:	2304      	movs	r3, #4
 8009406:	e04f      	b.n	80094a8 <HAL_I2C_Init+0x1dc>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d111      	bne.n	8009434 <HAL_I2C_Init+0x168>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	1e58      	subs	r0, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6859      	ldr	r1, [r3, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	440b      	add	r3, r1
 800941e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009422:	3301      	adds	r3, #1
 8009424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf0c      	ite	eq
 800942c:	2301      	moveq	r3, #1
 800942e:	2300      	movne	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	e012      	b.n	800945a <HAL_I2C_Init+0x18e>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	1e58      	subs	r0, r3, #1
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6859      	ldr	r1, [r3, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	0099      	lsls	r1, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	fbb0 f3f3 	udiv	r3, r0, r3
 800944a:	3301      	adds	r3, #1
 800944c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009450:	2b00      	cmp	r3, #0
 8009452:	bf0c      	ite	eq
 8009454:	2301      	moveq	r3, #1
 8009456:	2300      	movne	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <HAL_I2C_Init+0x196>
 800945e:	2301      	movs	r3, #1
 8009460:	e022      	b.n	80094a8 <HAL_I2C_Init+0x1dc>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10e      	bne.n	8009488 <HAL_I2C_Init+0x1bc>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1e58      	subs	r0, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6859      	ldr	r1, [r3, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	440b      	add	r3, r1
 8009478:	fbb0 f3f3 	udiv	r3, r0, r3
 800947c:	3301      	adds	r3, #1
 800947e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009486:	e00f      	b.n	80094a8 <HAL_I2C_Init+0x1dc>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	1e58      	subs	r0, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6859      	ldr	r1, [r3, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	0099      	lsls	r1, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	fbb0 f3f3 	udiv	r3, r0, r3
 800949e:	3301      	adds	r3, #1
 80094a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	6809      	ldr	r1, [r1, #0]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69da      	ldr	r2, [r3, #28]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6911      	ldr	r1, [r2, #16]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	68d2      	ldr	r2, [r2, #12]
 80094e2:	4311      	orrs	r1, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6812      	ldr	r2, [r2, #0]
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0201 	orr.w	r2, r2, #1
 8009516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	000186a0 	.word	0x000186a0
 8009544:	001e847f 	.word	0x001e847f
 8009548:	003d08ff 	.word	0x003d08ff
 800954c:	431bde83 	.word	0x431bde83
 8009550:	10624dd3 	.word	0x10624dd3

08009554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af02      	add	r7, sp, #8
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	4608      	mov	r0, r1
 800955e:	4611      	mov	r1, r2
 8009560:	461a      	mov	r2, r3
 8009562:	4603      	mov	r3, r0
 8009564:	817b      	strh	r3, [r7, #10]
 8009566:	460b      	mov	r3, r1
 8009568:	813b      	strh	r3, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800956e:	f7fe ff63 	bl	8008438 <HAL_GetTick>
 8009572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b20      	cmp	r3, #32
 800957e:	f040 80d9 	bne.w	8009734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2319      	movs	r3, #25
 8009588:	2201      	movs	r2, #1
 800958a:	496d      	ldr	r1, [pc, #436]	; (8009740 <HAL_I2C_Mem_Write+0x1ec>)
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fcb5 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009598:	2302      	movs	r3, #2
 800959a:	e0cc      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_I2C_Mem_Write+0x56>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e0c5      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d007      	beq.n	80095d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2221      	movs	r2, #33	; 0x21
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2240      	movs	r2, #64	; 0x40
 80095ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a4d      	ldr	r2, [pc, #308]	; (8009744 <HAL_I2C_Mem_Write+0x1f0>)
 8009610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009612:	88f8      	ldrh	r0, [r7, #6]
 8009614:	893a      	ldrh	r2, [r7, #8]
 8009616:	8979      	ldrh	r1, [r7, #10]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4603      	mov	r3, r0
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 faec 	bl	8009c00 <I2C_RequestMemoryWrite>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d052      	beq.n	80096d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e081      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 fd36 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00d      	beq.n	800965e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	2b04      	cmp	r3, #4
 8009648:	d107      	bne.n	800965a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e06b      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	781a      	ldrb	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009678:	3b01      	subs	r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b04      	cmp	r3, #4
 800969a:	d11b      	bne.n	80096d4 <HAL_I2C_Mem_Write+0x180>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d017      	beq.n	80096d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1aa      	bne.n	8009632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fd22 	bl	800a12a <I2C_WaitOnBTFFlagUntilTimeout>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d107      	bne.n	8009704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e016      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2220      	movs	r2, #32
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	e000      	b.n	8009736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	00100002 	.word	0x00100002
 8009744:	ffff0000 	.word	0xffff0000

08009748 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4603      	mov	r3, r0
 8009758:	817b      	strh	r3, [r7, #10]
 800975a:	460b      	mov	r3, r1
 800975c:	813b      	strh	r3, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009762:	f7fe fe69 	bl	8008438 <HAL_GetTick>
 8009766:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b20      	cmp	r3, #32
 8009772:	f040 8208 	bne.w	8009b86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2319      	movs	r3, #25
 800977c:	2201      	movs	r2, #1
 800977e:	497b      	ldr	r1, [pc, #492]	; (800996c <HAL_I2C_Mem_Read+0x224>)
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 fbbb 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800978c:	2302      	movs	r3, #2
 800978e:	e1fb      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_I2C_Mem_Read+0x56>
 800979a:	2302      	movs	r3, #2
 800979c:	e1f4      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d007      	beq.n	80097c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2222      	movs	r2, #34	; 0x22
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2240      	movs	r2, #64	; 0x40
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80097f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a5b      	ldr	r2, [pc, #364]	; (8009970 <HAL_I2C_Mem_Read+0x228>)
 8009804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009806:	88f8      	ldrh	r0, [r7, #6]
 8009808:	893a      	ldrh	r2, [r7, #8]
 800980a:	8979      	ldrh	r1, [r7, #10]
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4603      	mov	r3, r0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fa88 	bl	8009d2c <I2C_RequestMemoryRead>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e1b0      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d113      	bne.n	8009856 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800982e:	2300      	movs	r3, #0
 8009830:	623b      	str	r3, [r7, #32]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	623b      	str	r3, [r7, #32]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	623b      	str	r3, [r7, #32]
 8009842:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e184      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985a:	2b01      	cmp	r3, #1
 800985c:	d11b      	bne.n	8009896 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800986c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	e164      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989a:	2b02      	cmp	r3, #2
 800989c:	d11b      	bne.n	80098d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098be:	2300      	movs	r3, #0
 80098c0:	61bb      	str	r3, [r7, #24]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	e144      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80098ec:	e138      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f200 80f1 	bhi.w	8009ada <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d123      	bne.n	8009948 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 fc51 	bl	800a1ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e139      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009946:	e10b      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994c:	2b02      	cmp	r3, #2
 800994e:	d14e      	bne.n	80099ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	2200      	movs	r2, #0
 8009958:	4906      	ldr	r1, [pc, #24]	; (8009974 <HAL_I2C_Mem_Read+0x22c>)
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 face 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e10e      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
 800996a:	bf00      	nop
 800996c:	00100002 	.word	0x00100002
 8009970:	ffff0000 	.word	0xffff0000
 8009974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691a      	ldr	r2, [r3, #16]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691a      	ldr	r2, [r3, #16]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099ec:	e0b8      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	2200      	movs	r2, #0
 80099f6:	4966      	ldr	r1, [pc, #408]	; (8009b90 <HAL_I2C_Mem_Read+0x448>)
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fa7f 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e0bf      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	691a      	ldr	r2, [r3, #16]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	b2d2      	uxtb	r2, r2
 8009a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	2200      	movs	r2, #0
 8009a52:	494f      	ldr	r1, [pc, #316]	; (8009b90 <HAL_I2C_Mem_Read+0x448>)
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fa51 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e091      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691a      	ldr	r2, [r3, #16]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ad8:	e042      	b.n	8009b60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fb64 	bl	800a1ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e04c      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d118      	bne.n	8009b60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f47f aec2 	bne.w	80098ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e000      	b.n	8009b88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009b86:	2302      	movs	r3, #2
  }
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3728      	adds	r7, #40	; 0x28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	00010004 	.word	0x00010004

08009b94 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d124      	bne.n	8009bf2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2228      	movs	r2, #40	; 0x28
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d007      	beq.n	8009bce <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bdc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009bec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e000      	b.n	8009bf4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009bf2:	2302      	movs	r3, #2
  }
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	817b      	strh	r3, [r7, #10]
 8009c12:	460b      	mov	r3, r1
 8009c14:	813b      	strh	r3, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 f960 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00d      	beq.n	8009c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c50:	d103      	bne.n	8009c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e05f      	b.n	8009d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c5e:	897b      	ldrh	r3, [r7, #10]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	461a      	mov	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	6a3a      	ldr	r2, [r7, #32]
 8009c72:	492d      	ldr	r1, [pc, #180]	; (8009d28 <I2C_RequestMemoryWrite+0x128>)
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f998 	bl	8009faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e04c      	b.n	8009d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9c:	6a39      	ldr	r1, [r7, #32]
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 fa02 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00d      	beq.n	8009cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d107      	bne.n	8009cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e02b      	b.n	8009d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cc6:	88fb      	ldrh	r3, [r7, #6]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d105      	bne.n	8009cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ccc:	893b      	ldrh	r3, [r7, #8]
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	611a      	str	r2, [r3, #16]
 8009cd6:	e021      	b.n	8009d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009cd8:	893b      	ldrh	r3, [r7, #8]
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	6a39      	ldr	r1, [r7, #32]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f9dc 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00d      	beq.n	8009d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d107      	bne.n	8009d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e005      	b.n	8009d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d12:	893b      	ldrh	r3, [r7, #8]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	00010002 	.word	0x00010002

08009d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	4608      	mov	r0, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	817b      	strh	r3, [r7, #10]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	813b      	strh	r3, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f8c2 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00d      	beq.n	8009d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8c:	d103      	bne.n	8009d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e0aa      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d9a:	897b      	ldrh	r3, [r7, #10]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	4952      	ldr	r1, [pc, #328]	; (8009ef8 <I2C_RequestMemoryRead+0x1cc>)
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 f8fa 	bl	8009faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e097      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd8:	6a39      	ldr	r1, [r7, #32]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f964 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00d      	beq.n	8009e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d107      	bne.n	8009dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e076      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d105      	bne.n	8009e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e08:	893b      	ldrh	r3, [r7, #8]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	611a      	str	r2, [r3, #16]
 8009e12:	e021      	b.n	8009e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e24:	6a39      	ldr	r1, [r7, #32]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f93e 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00d      	beq.n	8009e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d107      	bne.n	8009e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e050      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e4e:	893b      	ldrh	r3, [r7, #8]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	6a39      	ldr	r1, [r7, #32]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f923 	bl	800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00d      	beq.n	8009e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d107      	bne.n	8009e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e035      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 f82b 	bl	8009efc <I2C_WaitOnFlagUntilTimeout>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00d      	beq.n	8009ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eba:	d103      	bne.n	8009ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e013      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ec8:	897b      	ldrh	r3, [r7, #10]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	6a3a      	ldr	r2, [r7, #32]
 8009edc:	4906      	ldr	r1, [pc, #24]	; (8009ef8 <I2C_RequestMemoryRead+0x1cc>)
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 f863 	bl	8009faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	00010002 	.word	0x00010002

08009efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f0c:	e025      	b.n	8009f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d021      	beq.n	8009f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f16:	f7fe fa8f 	bl	8008438 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d302      	bcc.n	8009f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d116      	bne.n	8009f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f043 0220 	orr.w	r2, r3, #32
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e023      	b.n	8009fa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	0c1b      	lsrs	r3, r3, #16
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d10d      	bne.n	8009f80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	43da      	mvns	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bf0c      	ite	eq
 8009f76:	2301      	moveq	r3, #1
 8009f78:	2300      	movne	r3, #0
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	e00c      	b.n	8009f9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	43da      	mvns	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d0b6      	beq.n	8009f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fb8:	e051      	b.n	800a05e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc8:	d123      	bne.n	800a012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fe2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	f043 0204 	orr.w	r2, r3, #4
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e046      	b.n	800a0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a018:	d021      	beq.n	800a05e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01a:	f7fe fa0d 	bl	8008438 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	429a      	cmp	r2, r3
 800a028:	d302      	bcc.n	800a030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d116      	bne.n	800a05e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2220      	movs	r2, #32
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e020      	b.n	800a0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	0c1b      	lsrs	r3, r3, #16
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b01      	cmp	r3, #1
 800a066:	d10c      	bne.n	800a082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	43da      	mvns	r2, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	4013      	ands	r3, r2
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	bf14      	ite	ne
 800a07a:	2301      	movne	r3, #1
 800a07c:	2300      	moveq	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	e00b      	b.n	800a09a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	43da      	mvns	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	4013      	ands	r3, r2
 800a08e:	b29b      	uxth	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	bf14      	ite	ne
 800a094:	2301      	movne	r3, #1
 800a096:	2300      	moveq	r3, #0
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d18d      	bne.n	8009fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a0b4:	e02d      	b.n	800a112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 f8ce 	bl	800a258 <I2C_IsAcknowledgeFailed>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e02d      	b.n	800a122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d021      	beq.n	800a112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ce:	f7fe f9b3 	bl	8008438 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d302      	bcc.n	800a0e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d116      	bne.n	800a112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	f043 0220 	orr.w	r2, r3, #32
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e007      	b.n	800a122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11c:	2b80      	cmp	r3, #128	; 0x80
 800a11e:	d1ca      	bne.n	800a0b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a136:	e02d      	b.n	800a194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f88d 	bl	800a258 <I2C_IsAcknowledgeFailed>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e02d      	b.n	800a1a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d021      	beq.n	800a194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a150:	f7fe f972 	bl	8008438 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d302      	bcc.n	800a166 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d116      	bne.n	800a194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2220      	movs	r2, #32
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	f043 0220 	orr.w	r2, r3, #32
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e007      	b.n	800a1a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	f003 0304 	and.w	r3, r3, #4
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d1ca      	bne.n	800a138 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a1b8:	e042      	b.n	800a240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d119      	bne.n	800a1fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f06f 0210 	mvn.w	r2, #16
 800a1d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e029      	b.n	800a250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1fc:	f7fe f91c 	bl	8008438 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d302      	bcc.n	800a212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d116      	bne.n	800a240 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	f043 0220 	orr.w	r2, r3, #32
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e007      	b.n	800a250 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24a:	2b40      	cmp	r3, #64	; 0x40
 800a24c:	d1b5      	bne.n	800a1ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a26e:	d11b      	bne.n	800a2a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2220      	movs	r2, #32
 800a284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	f043 0204 	orr.w	r2, r3, #4
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e000      	b.n	800a2aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d129      	bne.n	800a320 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2224      	movs	r2, #36	; 0x24
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0201 	bic.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0210 	bic.w	r2, r2, #16
 800a2f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0201 	orr.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b20      	cmp	r3, #32
 800a346:	d12a      	bne.n	800a39e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2224      	movs	r2, #36	; 0x24
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0201 	bic.w	r2, r2, #1
 800a35e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a368:	89fb      	ldrh	r3, [r7, #14]
 800a36a:	f023 030f 	bic.w	r3, r3, #15
 800a36e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	b29a      	uxth	r2, r3
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	4313      	orrs	r3, r2
 800a378:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	89fa      	ldrh	r2, [r7, #14]
 800a380:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0201 	orr.w	r2, r2, #1
 800a390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e000      	b.n	800a3a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a39e:	2302      	movs	r3, #2
  }
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e034      	b.n	800a428 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a3c6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f245 5255 	movw	r2, #21845	; 0x5555
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6852      	ldr	r2, [r2, #4]
 800a3da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6892      	ldr	r2, [r2, #8]
 800a3e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a3e6:	f7fe f827 	bl	8008438 <HAL_GetTick>
 800a3ea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a3ec:	e00f      	b.n	800a40e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a3ee:	f7fe f823 	bl	8008438 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b31      	cmp	r3, #49	; 0x31
 800a3fa:	d908      	bls.n	800a40e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e00c      	b.n	800a428 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e8      	bne.n	800a3ee <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a440:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a452:	b08f      	sub	sp, #60	; 0x3c
 800a454:	af0a      	add	r7, sp, #40	; 0x28
 800a456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e10f      	b.n	800a682 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d106      	bne.n	800a482 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f00e ff05 	bl	801928c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2203      	movs	r2, #3
 800a486:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f004 fe2c 	bl	800f0fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	687e      	ldr	r6, [r7, #4]
 800a4ae:	466d      	mov	r5, sp
 800a4b0:	f106 0410 	add.w	r4, r6, #16
 800a4b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a4c0:	e885 0003 	stmia.w	r5, {r0, r1}
 800a4c4:	1d33      	adds	r3, r6, #4
 800a4c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4c8:	6838      	ldr	r0, [r7, #0]
 800a4ca:	f004 fd03 	bl	800eed4 <USB_CoreInit>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e0d0      	b.n	800a682 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f004 fe1a 	bl	800f120 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	e04a      	b.n	800a588 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a4f2:	7bfa      	ldrb	r2, [r7, #15]
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	1a9b      	subs	r3, r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	333d      	adds	r3, #61	; 0x3d
 800a502:	2201      	movs	r2, #1
 800a504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a506:	7bfa      	ldrb	r2, [r7, #15]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	4613      	mov	r3, r2
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	1a9b      	subs	r3, r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	440b      	add	r3, r1
 800a514:	333c      	adds	r3, #60	; 0x3c
 800a516:	7bfa      	ldrb	r2, [r7, #15]
 800a518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a51a:	7bfa      	ldrb	r2, [r7, #15]
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	b298      	uxth	r0, r3
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	440b      	add	r3, r1
 800a52c:	3342      	adds	r3, #66	; 0x42
 800a52e:	4602      	mov	r2, r0
 800a530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a532:	7bfa      	ldrb	r2, [r7, #15]
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	333f      	adds	r3, #63	; 0x3f
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a546:	7bfa      	ldrb	r2, [r7, #15]
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	4613      	mov	r3, r2
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	3344      	adds	r3, #68	; 0x44
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a55a:	7bfa      	ldrb	r2, [r7, #15]
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	440b      	add	r3, r1
 800a568:	3348      	adds	r3, #72	; 0x48
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a56e:	7bfa      	ldrb	r2, [r7, #15]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	4613      	mov	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	3350      	adds	r3, #80	; 0x50
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	3301      	adds	r3, #1
 800a586:	73fb      	strb	r3, [r7, #15]
 800a588:	7bfa      	ldrb	r2, [r7, #15]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d3af      	bcc.n	800a4f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
 800a596:	e044      	b.n	800a622 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a598:	7bfa      	ldrb	r2, [r7, #15]
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	4613      	mov	r3, r2
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	440b      	add	r3, r1
 800a5a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a5ae:	7bfa      	ldrb	r2, [r7, #15]
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a5c0:	7bfa      	ldrb	r2, [r7, #15]
 800a5c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a5c4:	7bfa      	ldrb	r2, [r7, #15]
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	1a9b      	subs	r3, r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a5da:	7bfa      	ldrb	r2, [r7, #15]
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	1a9b      	subs	r3, r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a5f0:	7bfa      	ldrb	r2, [r7, #15]
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	1a9b      	subs	r3, r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a606:	7bfa      	ldrb	r2, [r7, #15]
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	00db      	lsls	r3, r3, #3
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	3301      	adds	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	7bfa      	ldrb	r2, [r7, #15]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d3b5      	bcc.n	800a598 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	603b      	str	r3, [r7, #0]
 800a632:	687e      	ldr	r6, [r7, #4]
 800a634:	466d      	mov	r5, sp
 800a636:	f106 0410 	add.w	r4, r6, #16
 800a63a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a63c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a63e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a642:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a646:	e885 0003 	stmia.w	r5, {r0, r1}
 800a64a:	1d33      	adds	r3, r6, #4
 800a64c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a64e:	6838      	ldr	r0, [r7, #0]
 800a650:	f004 fdb2 	bl	800f1b8 <USB_DevInit>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e00d      	b.n	800a682 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f005 fe2e 	bl	80102dc <USB_DevDisconnect>

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a68a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_PCD_Start+0x1c>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e020      	b.n	800a6e8 <HAL_PCD_Start+0x5e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d109      	bne.n	800a6ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d005      	beq.n	800a6ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f004 fd04 	bl	800f0dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f005 fdde 	bl	801029a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b08d      	sub	sp, #52	; 0x34
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f005 fe9c 	bl	8010444 <USB_GetMode>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f040 839d 	bne.w	800ae4e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f005 fe00 	bl	801031e <USB_ReadInterrupts>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8393 	beq.w	800ae4c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f005 fdf7 	bl	801031e <USB_ReadInterrupts>
 800a730:	4603      	mov	r3, r0
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b02      	cmp	r3, #2
 800a738:	d107      	bne.n	800a74a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695a      	ldr	r2, [r3, #20]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f002 0202 	and.w	r2, r2, #2
 800a748:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f005 fde5 	bl	801031e <USB_ReadInterrupts>
 800a754:	4603      	mov	r3, r0
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d161      	bne.n	800a822 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	699a      	ldr	r2, [r3, #24]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0210 	bic.w	r2, r2, #16
 800a76c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	f003 020f 	and.w	r2, r3, #15
 800a77a:	4613      	mov	r3, r2
 800a77c:	00db      	lsls	r3, r3, #3
 800a77e:	1a9b      	subs	r3, r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	4413      	add	r3, r2
 800a78a:	3304      	adds	r3, #4
 800a78c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	0c5b      	lsrs	r3, r3, #17
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	2b02      	cmp	r3, #2
 800a798:	d124      	bne.n	800a7e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d035      	beq.n	800a812 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	091b      	lsrs	r3, r3, #4
 800a7ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a7b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6a38      	ldr	r0, [r7, #32]
 800a7ba:	f005 fc1c 	bl	800fff6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	091b      	lsrs	r3, r3, #4
 800a7c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7ca:	441a      	add	r2, r3
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	699a      	ldr	r2, [r3, #24]
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	091b      	lsrs	r3, r3, #4
 800a7d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7dc:	441a      	add	r2, r3
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	619a      	str	r2, [r3, #24]
 800a7e2:	e016      	b.n	800a812 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	0c5b      	lsrs	r3, r3, #17
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	2b06      	cmp	r3, #6
 800a7ee:	d110      	bne.n	800a812 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6a38      	ldr	r0, [r7, #32]
 800a7fc:	f005 fbfb 	bl	800fff6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	699a      	ldr	r2, [r3, #24]
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	091b      	lsrs	r3, r3, #4
 800a808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a80c:	441a      	add	r2, r3
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699a      	ldr	r2, [r3, #24]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f042 0210 	orr.w	r2, r2, #16
 800a820:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f005 fd79 	bl	801031e <USB_ReadInterrupts>
 800a82c:	4603      	mov	r3, r0
 800a82e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a832:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a836:	d16e      	bne.n	800a916 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f005 fd7f 	bl	8010344 <USB_ReadDevAllOutEpInterrupt>
 800a846:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a848:	e062      	b.n	800a910 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d057      	beq.n	800a904 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f005 fda4 	bl	80103ac <USB_ReadDevOutEPInterrupt>
 800a864:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00c      	beq.n	800a88a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87c:	461a      	mov	r2, r3
 800a87e:	2301      	movs	r3, #1
 800a880:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fdb1 	bl	800b3ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f003 0308 	and.w	r3, r3, #8
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00c      	beq.n	800a8ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	2308      	movs	r3, #8
 800a8a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a8a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 feab 	bl	800b604 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f003 0310 	and.w	r3, r3, #16
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d008      	beq.n	800a8ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	2310      	movs	r3, #16
 800a8c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d008      	beq.n	800a8e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2320      	movs	r3, #32
 800a8e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a902:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	3301      	adds	r3, #1
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d199      	bne.n	800a84a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f005 fcff 	bl	801031e <USB_ReadInterrupts>
 800a920:	4603      	mov	r3, r0
 800a922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a92a:	f040 80c0 	bne.w	800aaae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f005 fd20 	bl	8010378 <USB_ReadDevAllInEpInterrupt>
 800a938:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a93e:	e0b2      	b.n	800aaa6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 80a7 	beq.w	800aa9a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	4611      	mov	r1, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f005 fd46 	bl	80103e8 <USB_ReadDevInEPInterrupt>
 800a95c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d057      	beq.n	800aa18 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	2201      	movs	r2, #1
 800a970:	fa02 f303 	lsl.w	r3, r2, r3
 800a974:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	43db      	mvns	r3, r3
 800a982:	69f9      	ldr	r1, [r7, #28]
 800a984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a988:	4013      	ands	r3, r2
 800a98a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	4413      	add	r3, r2
 800a994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a998:	461a      	mov	r2, r3
 800a99a:	2301      	movs	r3, #1
 800a99c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d132      	bne.n	800aa0c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3348      	adds	r3, #72	; 0x48
 800a9b6:	6819      	ldr	r1, [r3, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9bc:	4613      	mov	r3, r2
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4403      	add	r3, r0
 800a9c6:	3344      	adds	r3, #68	; 0x44
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4419      	add	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4403      	add	r3, r0
 800a9da:	3348      	adds	r3, #72	; 0x48
 800a9dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d113      	bne.n	800aa0c <HAL_PCD_IRQHandler+0x31c>
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	1a9b      	subs	r3, r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	3350      	adds	r3, #80	; 0x50
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d108      	bne.n	800aa0c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa04:	461a      	mov	r2, r3
 800aa06:	2101      	movs	r1, #1
 800aa08:	f005 fd4e 	bl	80104a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f00e fcc9 	bl	80193aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f003 0308 	and.w	r3, r3, #8
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d008      	beq.n	800aa34 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2308      	movs	r3, #8
 800aa32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f003 0310 	and.w	r3, r3, #16
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d008      	beq.n	800aa50 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa66:	461a      	mov	r2, r3
 800aa68:	2340      	movs	r3, #64	; 0x40
 800aa6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d008      	beq.n	800aa88 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa82:	461a      	mov	r2, r3
 800aa84:	2302      	movs	r3, #2
 800aa86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800aa92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc1b 	bl	800b2d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	085b      	lsrs	r3, r3, #1
 800aaa4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f47f af49 	bne.w	800a940 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f005 fc33 	bl	801031e <USB_ReadInterrupts>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aabe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aac2:	d122      	bne.n	800ab0a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aad2:	f023 0301 	bic.w	r3, r3, #1
 800aad6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d108      	bne.n	800aaf4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fe27 	bl	800b740 <HAL_PCDEx_LPM_Callback>
 800aaf2:	e002      	b.n	800aafa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f00e fccf 	bl	8019498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695a      	ldr	r2, [r3, #20]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ab08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f005 fc05 	bl	801031e <USB_ReadInterrupts>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab1e:	d112      	bne.n	800ab46 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d102      	bne.n	800ab36 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f00e fc8b 	bl	801944c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695a      	ldr	r2, [r3, #20]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ab44:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f005 fbe7 	bl	801031e <USB_ReadInterrupts>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5a:	f040 80c7 	bne.w	800acec <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2110      	movs	r1, #16
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f004 fc81 	bl	800f480 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab82:	e056      	b.n	800ac32 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	461a      	mov	r2, r3
 800ab92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba8:	0151      	lsls	r1, r2, #5
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	440a      	add	r2, r1
 800abae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abb6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe4:	461a      	mov	r2, r3
 800abe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abfc:	0151      	lsls	r1, r2, #5
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	440a      	add	r2, r1
 800ac02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac1c:	0151      	lsls	r1, r2, #5
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	440a      	add	r2, r1
 800ac22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	3301      	adds	r3, #1
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d3a3      	bcc.n	800ab84 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac4a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ac4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d016      	beq.n	800ac86 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac62:	69fa      	ldr	r2, [r7, #28]
 800ac64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac68:	f043 030b 	orr.w	r3, r3, #11
 800ac6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac7e:	f043 030b 	orr.w	r3, r3, #11
 800ac82:	6453      	str	r3, [r2, #68]	; 0x44
 800ac84:	e015      	b.n	800acb2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac98:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ac9c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acac:	f043 030b 	orr.w	r3, r3, #11
 800acb0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800acc4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800acd6:	461a      	mov	r2, r3
 800acd8:	f005 fbe6 	bl	80104a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695a      	ldr	r2, [r3, #20]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800acea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f005 fb14 	bl	801031e <USB_ReadInterrupts>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad00:	d124      	bne.n	800ad4c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f005 fbaa 	bl	8010460 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f004 fc12 	bl	800f53a <USB_GetDevSpeed>
 800ad16:	4603      	mov	r3, r0
 800ad18:	461a      	mov	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681c      	ldr	r4, [r3, #0]
 800ad22:	f001 f995 	bl	800c050 <HAL_RCC_GetHCLKFreq>
 800ad26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4620      	mov	r0, r4
 800ad32:	f004 f931 	bl	800ef98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f00e fb5f 	bl	80193fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	695a      	ldr	r2, [r3, #20]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ad4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f005 fae4 	bl	801031e <USB_ReadInterrupts>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d10a      	bne.n	800ad76 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f00e fb3c 	bl	80193de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f002 0208 	and.w	r2, r2, #8
 800ad74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f005 facf 	bl	801031e <USB_ReadInterrupts>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad8a:	d10f      	bne.n	800adac <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f00e fb9e 	bl	80194d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	695a      	ldr	r2, [r3, #20]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800adaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f005 fab4 	bl	801031e <USB_ReadInterrupts>
 800adb6:	4603      	mov	r3, r0
 800adb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adc0:	d10f      	bne.n	800ade2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f00e fb71 	bl	80194b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	695a      	ldr	r2, [r3, #20]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ade0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f005 fa99 	bl	801031e <USB_ReadInterrupts>
 800adec:	4603      	mov	r3, r0
 800adee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf6:	d10a      	bne.n	800ae0e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f00e fb7f 	bl	80194fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ae0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f005 fa83 	bl	801031e <USB_ReadInterrupts>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d115      	bne.n	800ae4e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f00e fb6f 	bl	8019518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6859      	ldr	r1, [r3, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	e000      	b.n	800ae4e <HAL_PCD_IRQHandler+0x75e>
      return;
 800ae4c:	bf00      	nop
    }
  }
}
 800ae4e:	3734      	adds	r7, #52	; 0x34
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd90      	pop	{r4, r7, pc}

0800ae54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_PCD_SetAddress+0x1a>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e013      	b.n	800ae96 <HAL_PCD_SetAddress+0x42>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f005 f9e1 	bl	801024e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4603      	mov	r3, r0
 800aeae:	70fb      	strb	r3, [r7, #3]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	803b      	strh	r3, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	da0f      	bge.n	800aee4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	4613      	mov	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	3338      	adds	r3, #56	; 0x38
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	4413      	add	r3, r2
 800aed8:	3304      	adds	r3, #4
 800aeda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2201      	movs	r2, #1
 800aee0:	705a      	strb	r2, [r3, #1]
 800aee2:	e00f      	b.n	800af04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 020f 	and.w	r2, r3, #15
 800aeea:	4613      	mov	r3, r2
 800aeec:	00db      	lsls	r3, r3, #3
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	4413      	add	r3, r2
 800aefa:	3304      	adds	r3, #4
 800aefc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800af10:	883a      	ldrh	r2, [r7, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	78ba      	ldrb	r2, [r7, #2]
 800af1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d004      	beq.n	800af2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	b29a      	uxth	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800af2e:	78bb      	ldrb	r3, [r7, #2]
 800af30:	2b02      	cmp	r3, #2
 800af32:	d102      	bne.n	800af3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800af40:	2b01      	cmp	r3, #1
 800af42:	d101      	bne.n	800af48 <HAL_PCD_EP_Open+0xaa>
 800af44:	2302      	movs	r3, #2
 800af46:	e00e      	b.n	800af66 <HAL_PCD_EP_Open+0xc8>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68f9      	ldr	r1, [r7, #12]
 800af56:	4618      	mov	r0, r3
 800af58:	f004 fb14 	bl	800f584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800af64:	7afb      	ldrb	r3, [r7, #11]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800af7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da0f      	bge.n	800afa2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af82:	78fb      	ldrb	r3, [r7, #3]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	4613      	mov	r3, r2
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	1a9b      	subs	r3, r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	3338      	adds	r3, #56	; 0x38
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4413      	add	r3, r2
 800af96:	3304      	adds	r3, #4
 800af98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2201      	movs	r2, #1
 800af9e:	705a      	strb	r2, [r3, #1]
 800afa0:	e00f      	b.n	800afc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800afa2:	78fb      	ldrb	r3, [r7, #3]
 800afa4:	f003 020f 	and.w	r2, r3, #15
 800afa8:	4613      	mov	r3, r2
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	1a9b      	subs	r3, r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	4413      	add	r3, r2
 800afb8:	3304      	adds	r3, #4
 800afba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800afc2:	78fb      	ldrb	r3, [r7, #3]
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d101      	bne.n	800afdc <HAL_PCD_EP_Close+0x6e>
 800afd8:	2302      	movs	r3, #2
 800afda:	e00e      	b.n	800affa <HAL_PCD_EP_Close+0x8c>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68f9      	ldr	r1, [r7, #12]
 800afea:	4618      	mov	r0, r3
 800afec:	f004 fb52 	bl	800f694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b086      	sub	sp, #24
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]
 800b00e:	460b      	mov	r3, r1
 800b010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	f003 020f 	and.w	r2, r3, #15
 800b018:	4613      	mov	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	3304      	adds	r3, #4
 800b02a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2200      	movs	r2, #0
 800b03c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2200      	movs	r2, #0
 800b042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d102      	bne.n	800b05e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b05e:	7afb      	ldrb	r3, [r7, #11]
 800b060:	f003 030f 	and.w	r3, r3, #15
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	b2db      	uxtb	r3, r3
 800b072:	461a      	mov	r2, r3
 800b074:	6979      	ldr	r1, [r7, #20]
 800b076:	f004 fe2d 	bl	800fcd4 <USB_EP0StartXfer>
 800b07a:	e008      	b.n	800b08e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	b2db      	uxtb	r3, r3
 800b086:	461a      	mov	r2, r3
 800b088:	6979      	ldr	r1, [r7, #20]
 800b08a:	f004 fbdf 	bl	800f84c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	f003 020f 	and.w	r2, r3, #15
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	440b      	add	r3, r1
 800b0b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b0ba:	681b      	ldr	r3, [r3, #0]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	607a      	str	r2, [r7, #4]
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b0d8:	7afb      	ldrb	r3, [r7, #11]
 800b0da:	f003 020f 	and.w	r2, r3, #15
 800b0de:	4613      	mov	r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	3338      	adds	r3, #56	; 0x38
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2200      	movs	r2, #0
 800b100:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2201      	movs	r2, #1
 800b106:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d102      	bne.n	800b122 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	f003 030f 	and.w	r3, r3, #15
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d109      	bne.n	800b140 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	6979      	ldr	r1, [r7, #20]
 800b13a:	f004 fdcb 	bl	800fcd4 <USB_EP0StartXfer>
 800b13e:	e008      	b.n	800b152 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	461a      	mov	r2, r3
 800b14c:	6979      	ldr	r1, [r7, #20]
 800b14e:	f004 fb7d 	bl	800f84c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	f003 020f 	and.w	r2, r3, #15
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	429a      	cmp	r2, r3
 800b174:	d901      	bls.n	800b17a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e050      	b.n	800b21c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b17a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	da0f      	bge.n	800b1a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b182:	78fb      	ldrb	r3, [r7, #3]
 800b184:	f003 020f 	and.w	r2, r3, #15
 800b188:	4613      	mov	r3, r2
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	3338      	adds	r3, #56	; 0x38
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	4413      	add	r3, r2
 800b196:	3304      	adds	r3, #4
 800b198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	705a      	strb	r2, [r3, #1]
 800b1a0:	e00d      	b.n	800b1be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	00db      	lsls	r3, r3, #3
 800b1a8:	1a9b      	subs	r3, r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d101      	bne.n	800b1de <HAL_PCD_EP_SetStall+0x82>
 800b1da:	2302      	movs	r3, #2
 800b1dc:	e01e      	b.n	800b21c <HAL_PCD_EP_SetStall+0xc0>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68f9      	ldr	r1, [r7, #12]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f004 ff5a 	bl	80100a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	b2d9      	uxtb	r1, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b20c:	461a      	mov	r2, r3
 800b20e:	f005 f94b 	bl	80104a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	f003 020f 	and.w	r2, r3, #15
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d901      	bls.n	800b242 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e042      	b.n	800b2c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b246:	2b00      	cmp	r3, #0
 800b248:	da0f      	bge.n	800b26a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	f003 020f 	and.w	r2, r3, #15
 800b250:	4613      	mov	r3, r2
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	1a9b      	subs	r3, r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	3338      	adds	r3, #56	; 0x38
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	4413      	add	r3, r2
 800b25e:	3304      	adds	r3, #4
 800b260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2201      	movs	r2, #1
 800b266:	705a      	strb	r2, [r3, #1]
 800b268:	e00f      	b.n	800b28a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	f003 020f 	and.w	r2, r3, #15
 800b270:	4613      	mov	r3, r2
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	4413      	add	r3, r2
 800b280:	3304      	adds	r3, #4
 800b282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b290:	78fb      	ldrb	r3, [r7, #3]
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	b2da      	uxtb	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_PCD_EP_ClrStall+0x86>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e00e      	b.n	800b2c8 <HAL_PCD_EP_ClrStall+0xa4>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68f9      	ldr	r1, [r7, #12]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f004 ff62 	bl	8010182 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	; 0x28
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	3338      	adds	r3, #56	; 0x38
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	699a      	ldr	r2, [r3, #24]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	429a      	cmp	r2, r3
 800b302:	d901      	bls.n	800b308 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e06c      	b.n	800b3e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	69fa      	ldr	r2, [r7, #28]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d902      	bls.n	800b324 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	3303      	adds	r3, #3
 800b328:	089b      	lsrs	r3, r3, #2
 800b32a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b32c:	e02b      	b.n	800b386 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	695a      	ldr	r2, [r3, #20]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	429a      	cmp	r2, r3
 800b342:	d902      	bls.n	800b34a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	3303      	adds	r3, #3
 800b34e:	089b      	lsrs	r3, r3, #2
 800b350:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	68d9      	ldr	r1, [r3, #12]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b362:	b2db      	uxtb	r3, r3
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	4603      	mov	r3, r0
 800b368:	6978      	ldr	r0, [r7, #20]
 800b36a:	f004 fe06 	bl	800ff7a <USB_WritePacket>

    ep->xfer_buff  += len;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	441a      	add	r2, r3
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	441a      	add	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	b29b      	uxth	r3, r3
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d809      	bhi.n	800b3b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d203      	bcs.n	800b3b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1be      	bne.n	800b32e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	695a      	ldr	r2, [r3, #20]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d811      	bhi.n	800b3e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	f003 030f 	and.w	r3, r3, #15
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	6939      	ldr	r1, [r7, #16]
 800b3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3dc:	4013      	ands	r3, r2
 800b3de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	333c      	adds	r3, #60	; 0x3c
 800b404:	3304      	adds	r3, #4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	f040 80a0 	bne.w	800b564 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f003 0308 	and.w	r3, r3, #8
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d015      	beq.n	800b45a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4a72      	ldr	r2, [pc, #456]	; (800b5fc <PCD_EP_OutXfrComplete_int+0x210>)
 800b432:	4293      	cmp	r3, r2
 800b434:	f240 80dd 	bls.w	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 80d7 	beq.w	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b450:	461a      	mov	r2, r3
 800b452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b456:	6093      	str	r3, [r2, #8]
 800b458:	e0cb      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b470:	461a      	mov	r2, r3
 800b472:	2320      	movs	r3, #32
 800b474:	6093      	str	r3, [r2, #8]
 800b476:	e0bc      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f040 80b7 	bne.w	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	4a5d      	ldr	r2, [pc, #372]	; (800b5fc <PCD_EP_OutXfrComplete_int+0x210>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d90f      	bls.n	800b4ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4a8:	6093      	str	r3, [r2, #8]
 800b4aa:	e0a2      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b4be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	0159      	lsls	r1, r3, #5
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	440b      	add	r3, r1
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b4d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4403      	add	r3, r0
 800b4e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b4e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b4fa:	6819      	ldr	r1, [r3, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4613      	mov	r3, r2
 800b502:	00db      	lsls	r3, r3, #3
 800b504:	1a9b      	subs	r3, r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4403      	add	r3, r0
 800b50a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4419      	add	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4403      	add	r3, r0
 800b520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b524:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d114      	bne.n	800b556 <PCD_EP_OutXfrComplete_int+0x16a>
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	1a9b      	subs	r3, r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	440b      	add	r3, r1
 800b53a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d108      	bne.n	800b556 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b54e:	461a      	mov	r2, r3
 800b550:	2101      	movs	r1, #1
 800b552:	f004 ffa9 	bl	80104a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f00d ff09 	bl	8019374 <HAL_PCD_DataOutStageCallback>
 800b562:	e046      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4a26      	ldr	r2, [pc, #152]	; (800b600 <PCD_EP_OutXfrComplete_int+0x214>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d124      	bne.n	800b5b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b582:	461a      	mov	r2, r3
 800b584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b588:	6093      	str	r3, [r2, #8]
 800b58a:	e032      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	2320      	movs	r3, #32
 800b5a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f00d fee0 	bl	8019374 <HAL_PCD_DataOutStageCallback>
 800b5b4:	e01d      	b.n	800b5f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d114      	bne.n	800b5e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d108      	bne.n	800b5e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b5de:	461a      	mov	r2, r3
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f004 ff61 	bl	80104a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f00d fec1 	bl	8019374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	4f54300a 	.word	0x4f54300a
 800b600:	4f54310a 	.word	0x4f54310a

0800b604 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	333c      	adds	r3, #60	; 0x3c
 800b61c:	3304      	adds	r3, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4a15      	ldr	r2, [pc, #84]	; (800b68c <PCD_EP_OutSetupPacket_int+0x88>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d90e      	bls.n	800b658 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b650:	461a      	mov	r2, r3
 800b652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b656:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f00d fe79 	bl	8019350 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <PCD_EP_OutSetupPacket_int+0x88>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d90c      	bls.n	800b680 <PCD_EP_OutSetupPacket_int+0x7c>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d108      	bne.n	800b680 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b678:	461a      	mov	r2, r3
 800b67a:	2101      	movs	r1, #1
 800b67c:	f004 ff14 	bl	80104a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	4f54300a 	.word	0x4f54300a

0800b690 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
 800b69c:	4613      	mov	r3, r2
 800b69e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d107      	bne.n	800b6be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b6ae:	883b      	ldrh	r3, [r7, #0]
 800b6b0:	0419      	lsls	r1, r3, #16
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b6bc:	e028      	b.n	800b710 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c4:	0c1b      	lsrs	r3, r3, #16
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
 800b6d0:	e00d      	b.n	800b6ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	3340      	adds	r3, #64	; 0x40
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	0c1b      	lsrs	r3, r3, #16
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	73fb      	strb	r3, [r7, #15]
 800b6ee:	7bfa      	ldrb	r2, [r7, #15]
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d3ec      	bcc.n	800b6d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b6f8:	883b      	ldrh	r3, [r7, #0]
 800b6fa:	0418      	lsls	r0, r3, #16
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	3b01      	subs	r3, #1
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	4302      	orrs	r2, r0
 800b708:	3340      	adds	r3, #64	; 0x40
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	460b      	mov	r3, r1
 800b728:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	887a      	ldrh	r2, [r7, #2]
 800b730:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800b760:	4b05      	ldr	r3, [pc, #20]	; (800b778 <HAL_PWR_EnableWakeUpPin+0x20>)
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	4904      	ldr	r1, [pc, #16]	; (800b778 <HAL_PWR_EnableWakeUpPin+0x20>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4313      	orrs	r3, r2
 800b76a:	604b      	str	r3, [r1, #4]
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	40007000 	.word	0x40007000

0800b77c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800b784:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	43db      	mvns	r3, r3
 800b78c:	4904      	ldr	r1, [pc, #16]	; (800b7a0 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b78e:	4013      	ands	r3, r2
 800b790:	604b      	str	r3, [r1, #4]
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	40007000 	.word	0x40007000

0800b7a4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b7a8:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a07      	ldr	r2, [pc, #28]	; (800b7cc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b7ae:	f043 0302 	orr.w	r3, r3, #2
 800b7b2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	4a05      	ldr	r2, [pc, #20]	; (800b7d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b7ba:	f043 0304 	orr.w	r3, r3, #4
 800b7be:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b7c0:	bf30      	wfi
}
 800b7c2:	bf00      	nop
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	40007000 	.word	0x40007000
 800b7d0:	e000ed00 	.word	0xe000ed00

0800b7d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e264      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d075      	beq.n	800b8de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7f2:	4ba3      	ldr	r3, [pc, #652]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 030c 	and.w	r3, r3, #12
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d00c      	beq.n	800b818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7fe:	4ba0      	ldr	r3, [pc, #640]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b806:	2b08      	cmp	r3, #8
 800b808:	d112      	bne.n	800b830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b80a:	4b9d      	ldr	r3, [pc, #628]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b816:	d10b      	bne.n	800b830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b818:	4b99      	ldr	r3, [pc, #612]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d05b      	beq.n	800b8dc <HAL_RCC_OscConfig+0x108>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d157      	bne.n	800b8dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e23f      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b838:	d106      	bne.n	800b848 <HAL_RCC_OscConfig+0x74>
 800b83a:	4b91      	ldr	r3, [pc, #580]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a90      	ldr	r2, [pc, #576]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	e01d      	b.n	800b884 <HAL_RCC_OscConfig+0xb0>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b850:	d10c      	bne.n	800b86c <HAL_RCC_OscConfig+0x98>
 800b852:	4b8b      	ldr	r3, [pc, #556]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a8a      	ldr	r2, [pc, #552]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	4b88      	ldr	r3, [pc, #544]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a87      	ldr	r2, [pc, #540]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e00b      	b.n	800b884 <HAL_RCC_OscConfig+0xb0>
 800b86c:	4b84      	ldr	r3, [pc, #528]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a83      	ldr	r2, [pc, #524]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	4b81      	ldr	r3, [pc, #516]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a80      	ldr	r2, [pc, #512]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d013      	beq.n	800b8b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b88c:	f7fc fdd4 	bl	8008438 <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b892:	e008      	b.n	800b8a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b894:	f7fc fdd0 	bl	8008438 <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b64      	cmp	r3, #100	; 0x64
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e204      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8a6:	4b76      	ldr	r3, [pc, #472]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f0      	beq.n	800b894 <HAL_RCC_OscConfig+0xc0>
 800b8b2:	e014      	b.n	800b8de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8b4:	f7fc fdc0 	bl	8008438 <HAL_GetTick>
 800b8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ba:	e008      	b.n	800b8ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8bc:	f7fc fdbc 	bl	8008438 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	2b64      	cmp	r3, #100	; 0x64
 800b8c8:	d901      	bls.n	800b8ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e1f0      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ce:	4b6c      	ldr	r3, [pc, #432]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1f0      	bne.n	800b8bc <HAL_RCC_OscConfig+0xe8>
 800b8da:	e000      	b.n	800b8de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d063      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8ea:	4b65      	ldr	r3, [pc, #404]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f003 030c 	and.w	r3, r3, #12
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00b      	beq.n	800b90e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8f6:	4b62      	ldr	r3, [pc, #392]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8fe:	2b08      	cmp	r3, #8
 800b900:	d11c      	bne.n	800b93c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b902:	4b5f      	ldr	r3, [pc, #380]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d116      	bne.n	800b93c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b90e:	4b5c      	ldr	r3, [pc, #368]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <HAL_RCC_OscConfig+0x152>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d001      	beq.n	800b926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e1c4      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b926:	4b56      	ldr	r3, [pc, #344]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	4952      	ldr	r1, [pc, #328]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b936:	4313      	orrs	r3, r2
 800b938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b93a:	e03a      	b.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d020      	beq.n	800b986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b944:	4b4f      	ldr	r3, [pc, #316]	; (800ba84 <HAL_RCC_OscConfig+0x2b0>)
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b94a:	f7fc fd75 	bl	8008438 <HAL_GetTick>
 800b94e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b950:	e008      	b.n	800b964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b952:	f7fc fd71 	bl	8008438 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d901      	bls.n	800b964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e1a5      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b964:	4b46      	ldr	r3, [pc, #280]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f0      	beq.n	800b952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b970:	4b43      	ldr	r3, [pc, #268]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	4940      	ldr	r1, [pc, #256]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b980:	4313      	orrs	r3, r2
 800b982:	600b      	str	r3, [r1, #0]
 800b984:	e015      	b.n	800b9b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b986:	4b3f      	ldr	r3, [pc, #252]	; (800ba84 <HAL_RCC_OscConfig+0x2b0>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98c:	f7fc fd54 	bl	8008438 <HAL_GetTick>
 800b990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b992:	e008      	b.n	800b9a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b994:	f7fc fd50 	bl	8008438 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e184      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9a6:	4b36      	ldr	r3, [pc, #216]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0302 	and.w	r3, r3, #2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1f0      	bne.n	800b994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0308 	and.w	r3, r3, #8
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d030      	beq.n	800ba20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d016      	beq.n	800b9f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9c6:	4b30      	ldr	r3, [pc, #192]	; (800ba88 <HAL_RCC_OscConfig+0x2b4>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9cc:	f7fc fd34 	bl	8008438 <HAL_GetTick>
 800b9d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9d2:	e008      	b.n	800b9e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9d4:	f7fc fd30 	bl	8008438 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d901      	bls.n	800b9e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	e164      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9e6:	4b26      	ldr	r3, [pc, #152]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800b9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f0      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x200>
 800b9f2:	e015      	b.n	800ba20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9f4:	4b24      	ldr	r3, [pc, #144]	; (800ba88 <HAL_RCC_OscConfig+0x2b4>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9fa:	f7fc fd1d 	bl	8008438 <HAL_GetTick>
 800b9fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba00:	e008      	b.n	800ba14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba02:	f7fc fd19 	bl	8008438 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d901      	bls.n	800ba14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e14d      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba14:	4b1a      	ldr	r3, [pc, #104]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800ba16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1f0      	bne.n	800ba02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 80a0 	beq.w	800bb6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba32:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10f      	bne.n	800ba5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60bb      	str	r3, [r7, #8]
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	4a0e      	ldr	r2, [pc, #56]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800ba48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba4e:	4b0c      	ldr	r3, [pc, #48]	; (800ba80 <HAL_RCC_OscConfig+0x2ac>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <HAL_RCC_OscConfig+0x2b8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d121      	bne.n	800baae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba6a:	4b08      	ldr	r3, [pc, #32]	; (800ba8c <HAL_RCC_OscConfig+0x2b8>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a07      	ldr	r2, [pc, #28]	; (800ba8c <HAL_RCC_OscConfig+0x2b8>)
 800ba70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba76:	f7fc fcdf 	bl	8008438 <HAL_GetTick>
 800ba7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba7c:	e011      	b.n	800baa2 <HAL_RCC_OscConfig+0x2ce>
 800ba7e:	bf00      	nop
 800ba80:	40023800 	.word	0x40023800
 800ba84:	42470000 	.word	0x42470000
 800ba88:	42470e80 	.word	0x42470e80
 800ba8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba90:	f7fc fcd2 	bl	8008438 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e106      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800baa2:	4b85      	ldr	r3, [pc, #532]	; (800bcb8 <HAL_RCC_OscConfig+0x4e4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0f0      	beq.n	800ba90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d106      	bne.n	800bac4 <HAL_RCC_OscConfig+0x2f0>
 800bab6:	4b81      	ldr	r3, [pc, #516]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baba:	4a80      	ldr	r2, [pc, #512]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800babc:	f043 0301 	orr.w	r3, r3, #1
 800bac0:	6713      	str	r3, [r2, #112]	; 0x70
 800bac2:	e01c      	b.n	800bafe <HAL_RCC_OscConfig+0x32a>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	2b05      	cmp	r3, #5
 800baca:	d10c      	bne.n	800bae6 <HAL_RCC_OscConfig+0x312>
 800bacc:	4b7b      	ldr	r3, [pc, #492]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad0:	4a7a      	ldr	r2, [pc, #488]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bad2:	f043 0304 	orr.w	r3, r3, #4
 800bad6:	6713      	str	r3, [r2, #112]	; 0x70
 800bad8:	4b78      	ldr	r3, [pc, #480]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800badc:	4a77      	ldr	r2, [pc, #476]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bade:	f043 0301 	orr.w	r3, r3, #1
 800bae2:	6713      	str	r3, [r2, #112]	; 0x70
 800bae4:	e00b      	b.n	800bafe <HAL_RCC_OscConfig+0x32a>
 800bae6:	4b75      	ldr	r3, [pc, #468]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baea:	4a74      	ldr	r2, [pc, #464]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800baec:	f023 0301 	bic.w	r3, r3, #1
 800baf0:	6713      	str	r3, [r2, #112]	; 0x70
 800baf2:	4b72      	ldr	r3, [pc, #456]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800baf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf6:	4a71      	ldr	r2, [pc, #452]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800baf8:	f023 0304 	bic.w	r3, r3, #4
 800bafc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d015      	beq.n	800bb32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb06:	f7fc fc97 	bl	8008438 <HAL_GetTick>
 800bb0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb0c:	e00a      	b.n	800bb24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb0e:	f7fc fc93 	bl	8008438 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e0c5      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb24:	4b65      	ldr	r3, [pc, #404]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0ee      	beq.n	800bb0e <HAL_RCC_OscConfig+0x33a>
 800bb30:	e014      	b.n	800bb5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb32:	f7fc fc81 	bl	8008438 <HAL_GetTick>
 800bb36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb38:	e00a      	b.n	800bb50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb3a:	f7fc fc7d 	bl	8008438 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d901      	bls.n	800bb50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	e0af      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb50:	4b5a      	ldr	r3, [pc, #360]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bb52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb54:	f003 0302 	and.w	r3, r3, #2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1ee      	bne.n	800bb3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d105      	bne.n	800bb6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb62:	4b56      	ldr	r3, [pc, #344]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	4a55      	ldr	r2, [pc, #340]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bb68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 809b 	beq.w	800bcae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bb78:	4b50      	ldr	r3, [pc, #320]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f003 030c 	and.w	r3, r3, #12
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d05c      	beq.n	800bc3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d141      	bne.n	800bc10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb8c:	4b4c      	ldr	r3, [pc, #304]	; (800bcc0 <HAL_RCC_OscConfig+0x4ec>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb92:	f7fc fc51 	bl	8008438 <HAL_GetTick>
 800bb96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb98:	e008      	b.n	800bbac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb9a:	f7fc fc4d 	bl	8008438 <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d901      	bls.n	800bbac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e081      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbac:	4b43      	ldr	r3, [pc, #268]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1f0      	bne.n	800bb9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	69da      	ldr	r2, [r3, #28]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	019b      	lsls	r3, r3, #6
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbce:	085b      	lsrs	r3, r3, #1
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	041b      	lsls	r3, r3, #16
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	061b      	lsls	r3, r3, #24
 800bbdc:	4937      	ldr	r1, [pc, #220]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbe2:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_RCC_OscConfig+0x4ec>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbe8:	f7fc fc26 	bl	8008438 <HAL_GetTick>
 800bbec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbee:	e008      	b.n	800bc02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbf0:	f7fc fc22 	bl	8008438 <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d901      	bls.n	800bc02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e056      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc02:	4b2e      	ldr	r3, [pc, #184]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0f0      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x41c>
 800bc0e:	e04e      	b.n	800bcae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc10:	4b2b      	ldr	r3, [pc, #172]	; (800bcc0 <HAL_RCC_OscConfig+0x4ec>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc16:	f7fc fc0f 	bl	8008438 <HAL_GetTick>
 800bc1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc1c:	e008      	b.n	800bc30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc1e:	f7fc fc0b 	bl	8008438 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d901      	bls.n	800bc30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e03f      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc30:	4b22      	ldr	r3, [pc, #136]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1f0      	bne.n	800bc1e <HAL_RCC_OscConfig+0x44a>
 800bc3c:	e037      	b.n	800bcae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e032      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bc4a:	4b1c      	ldr	r3, [pc, #112]	; (800bcbc <HAL_RCC_OscConfig+0x4e8>)
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d028      	beq.n	800bcaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d121      	bne.n	800bcaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d11a      	bne.n	800bcaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d111      	bne.n	800bcaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	085b      	lsrs	r3, r3, #1
 800bc92:	3b01      	subs	r3, #1
 800bc94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d107      	bne.n	800bcaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d001      	beq.n	800bcae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	40007000 	.word	0x40007000
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	42470060 	.word	0x42470060

0800bcc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0cc      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcd8:	4b68      	ldr	r3, [pc, #416]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 030f 	and.w	r3, r3, #15
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d90c      	bls.n	800bd00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bce6:	4b65      	ldr	r3, [pc, #404]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcee:	4b63      	ldr	r3, [pc, #396]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d001      	beq.n	800bd00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e0b8      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0302 	and.w	r3, r3, #2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d020      	beq.n	800bd4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd18:	4b59      	ldr	r3, [pc, #356]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	4a58      	ldr	r2, [pc, #352]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd30:	4b53      	ldr	r3, [pc, #332]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4a52      	ldr	r2, [pc, #328]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd3c:	4b50      	ldr	r3, [pc, #320]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	494d      	ldr	r1, [pc, #308]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d044      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d107      	bne.n	800bd72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd62:	4b47      	ldr	r3, [pc, #284]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d119      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e07f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d003      	beq.n	800bd82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d107      	bne.n	800bd92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd82:	4b3f      	ldr	r3, [pc, #252]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e06f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd92:	4b3b      	ldr	r3, [pc, #236]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e067      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bda2:	4b37      	ldr	r3, [pc, #220]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f023 0203 	bic.w	r2, r3, #3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	4934      	ldr	r1, [pc, #208]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdb4:	f7fc fb40 	bl	8008438 <HAL_GetTick>
 800bdb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdba:	e00a      	b.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdbc:	f7fc fb3c 	bl	8008438 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e04f      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdd2:	4b2b      	ldr	r3, [pc, #172]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f003 020c 	and.w	r2, r3, #12
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d1eb      	bne.n	800bdbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bde4:	4b25      	ldr	r3, [pc, #148]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d20c      	bcs.n	800be0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf2:	4b22      	ldr	r3, [pc, #136]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdfa:	4b20      	ldr	r3, [pc, #128]	; (800be7c <HAL_RCC_ClockConfig+0x1b8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 030f 	and.w	r3, r3, #15
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d001      	beq.n	800be0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e032      	b.n	800be72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d008      	beq.n	800be2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be18:	4b19      	ldr	r3, [pc, #100]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	4916      	ldr	r1, [pc, #88]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be26:	4313      	orrs	r3, r2
 800be28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0308 	and.w	r3, r3, #8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be36:	4b12      	ldr	r3, [pc, #72]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	490e      	ldr	r1, [pc, #56]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be46:	4313      	orrs	r3, r2
 800be48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be4a:	f000 f821 	bl	800be90 <HAL_RCC_GetSysClockFreq>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <HAL_RCC_ClockConfig+0x1bc>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	091b      	lsrs	r3, r3, #4
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	490a      	ldr	r1, [pc, #40]	; (800be84 <HAL_RCC_ClockConfig+0x1c0>)
 800be5c:	5ccb      	ldrb	r3, [r1, r3]
 800be5e:	fa22 f303 	lsr.w	r3, r2, r3
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <HAL_RCC_ClockConfig+0x1c4>)
 800be64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <HAL_RCC_ClockConfig+0x1c8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f7 f8ca 	bl	8003004 <HAL_InitTick>

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	40023c00 	.word	0x40023c00
 800be80:	40023800 	.word	0x40023800
 800be84:	080219a4 	.word	0x080219a4
 800be88:	20000000 	.word	0x20000000
 800be8c:	20000058 	.word	0x20000058

0800be90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be94:	b084      	sub	sp, #16
 800be96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	607b      	str	r3, [r7, #4]
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	2300      	movs	r3, #0
 800bea2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bea8:	4b67      	ldr	r3, [pc, #412]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f003 030c 	and.w	r3, r3, #12
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d00d      	beq.n	800bed0 <HAL_RCC_GetSysClockFreq+0x40>
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	f200 80bd 	bhi.w	800c034 <HAL_RCC_GetSysClockFreq+0x1a4>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <HAL_RCC_GetSysClockFreq+0x34>
 800bebe:	2b04      	cmp	r3, #4
 800bec0:	d003      	beq.n	800beca <HAL_RCC_GetSysClockFreq+0x3a>
 800bec2:	e0b7      	b.n	800c034 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bec4:	4b61      	ldr	r3, [pc, #388]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bec6:	60bb      	str	r3, [r7, #8]
       break;
 800bec8:	e0b7      	b.n	800c03a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800beca:	4b60      	ldr	r3, [pc, #384]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800becc:	60bb      	str	r3, [r7, #8]
      break;
 800bece:	e0b4      	b.n	800c03a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bed0:	4b5d      	ldr	r3, [pc, #372]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800beda:	4b5b      	ldr	r3, [pc, #364]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d04d      	beq.n	800bf82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bee6:	4b58      	ldr	r3, [pc, #352]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	099b      	lsrs	r3, r3, #6
 800beec:	461a      	mov	r2, r3
 800beee:	f04f 0300 	mov.w	r3, #0
 800bef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bef6:	f04f 0100 	mov.w	r1, #0
 800befa:	ea02 0800 	and.w	r8, r2, r0
 800befe:	ea03 0901 	and.w	r9, r3, r1
 800bf02:	4640      	mov	r0, r8
 800bf04:	4649      	mov	r1, r9
 800bf06:	f04f 0200 	mov.w	r2, #0
 800bf0a:	f04f 0300 	mov.w	r3, #0
 800bf0e:	014b      	lsls	r3, r1, #5
 800bf10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bf14:	0142      	lsls	r2, r0, #5
 800bf16:	4610      	mov	r0, r2
 800bf18:	4619      	mov	r1, r3
 800bf1a:	ebb0 0008 	subs.w	r0, r0, r8
 800bf1e:	eb61 0109 	sbc.w	r1, r1, r9
 800bf22:	f04f 0200 	mov.w	r2, #0
 800bf26:	f04f 0300 	mov.w	r3, #0
 800bf2a:	018b      	lsls	r3, r1, #6
 800bf2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bf30:	0182      	lsls	r2, r0, #6
 800bf32:	1a12      	subs	r2, r2, r0
 800bf34:	eb63 0301 	sbc.w	r3, r3, r1
 800bf38:	f04f 0000 	mov.w	r0, #0
 800bf3c:	f04f 0100 	mov.w	r1, #0
 800bf40:	00d9      	lsls	r1, r3, #3
 800bf42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf46:	00d0      	lsls	r0, r2, #3
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	eb12 0208 	adds.w	r2, r2, r8
 800bf50:	eb43 0309 	adc.w	r3, r3, r9
 800bf54:	f04f 0000 	mov.w	r0, #0
 800bf58:	f04f 0100 	mov.w	r1, #0
 800bf5c:	0299      	lsls	r1, r3, #10
 800bf5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bf62:	0290      	lsls	r0, r2, #10
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4610      	mov	r0, r2
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	f7f4 fe98 	bl	8000ca8 <__aeabi_uldivmod>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e04a      	b.n	800c018 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf82:	4b31      	ldr	r3, [pc, #196]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	461a      	mov	r2, r3
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bf92:	f04f 0100 	mov.w	r1, #0
 800bf96:	ea02 0400 	and.w	r4, r2, r0
 800bf9a:	ea03 0501 	and.w	r5, r3, r1
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	014b      	lsls	r3, r1, #5
 800bfac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bfb0:	0142      	lsls	r2, r0, #5
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	1b00      	subs	r0, r0, r4
 800bfb8:	eb61 0105 	sbc.w	r1, r1, r5
 800bfbc:	f04f 0200 	mov.w	r2, #0
 800bfc0:	f04f 0300 	mov.w	r3, #0
 800bfc4:	018b      	lsls	r3, r1, #6
 800bfc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bfca:	0182      	lsls	r2, r0, #6
 800bfcc:	1a12      	subs	r2, r2, r0
 800bfce:	eb63 0301 	sbc.w	r3, r3, r1
 800bfd2:	f04f 0000 	mov.w	r0, #0
 800bfd6:	f04f 0100 	mov.w	r1, #0
 800bfda:	00d9      	lsls	r1, r3, #3
 800bfdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bfe0:	00d0      	lsls	r0, r2, #3
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	1912      	adds	r2, r2, r4
 800bfe8:	eb45 0303 	adc.w	r3, r5, r3
 800bfec:	f04f 0000 	mov.w	r0, #0
 800bff0:	f04f 0100 	mov.w	r1, #0
 800bff4:	0299      	lsls	r1, r3, #10
 800bff6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bffa:	0290      	lsls	r0, r2, #10
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4610      	mov	r0, r2
 800c002:	4619      	mov	r1, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	461a      	mov	r2, r3
 800c008:	f04f 0300 	mov.w	r3, #0
 800c00c:	f7f4 fe4c 	bl	8000ca8 <__aeabi_uldivmod>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4613      	mov	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	0c1b      	lsrs	r3, r3, #16
 800c01e:	f003 0303 	and.w	r3, r3, #3
 800c022:	3301      	adds	r3, #1
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c030:	60bb      	str	r3, [r7, #8]
      break;
 800c032:	e002      	b.n	800c03a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c036:	60bb      	str	r3, [r7, #8]
      break;
 800c038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c03a:	68bb      	ldr	r3, [r7, #8]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c046:	bf00      	nop
 800c048:	40023800 	.word	0x40023800
 800c04c:	00f42400 	.word	0x00f42400

0800c050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c054:	4b03      	ldr	r3, [pc, #12]	; (800c064 <HAL_RCC_GetHCLKFreq+0x14>)
 800c056:	681b      	ldr	r3, [r3, #0]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20000000 	.word	0x20000000

0800c068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c06c:	f7ff fff0 	bl	800c050 <HAL_RCC_GetHCLKFreq>
 800c070:	4602      	mov	r2, r0
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	0a9b      	lsrs	r3, r3, #10
 800c078:	f003 0307 	and.w	r3, r3, #7
 800c07c:	4903      	ldr	r1, [pc, #12]	; (800c08c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c07e:	5ccb      	ldrb	r3, [r1, r3]
 800c080:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c084:	4618      	mov	r0, r3
 800c086:	bd80      	pop	{r7, pc}
 800c088:	40023800 	.word	0x40023800
 800c08c:	080219b4 	.word	0x080219b4

0800c090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c094:	f7ff ffdc 	bl	800c050 <HAL_RCC_GetHCLKFreq>
 800c098:	4602      	mov	r2, r0
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	0b5b      	lsrs	r3, r3, #13
 800c0a0:	f003 0307 	and.w	r3, r3, #7
 800c0a4:	4903      	ldr	r1, [pc, #12]	; (800c0b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0a6:	5ccb      	ldrb	r3, [r1, r3]
 800c0a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	40023800 	.word	0x40023800
 800c0b4:	080219b4 	.word	0x080219b4

0800c0b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	220f      	movs	r2, #15
 800c0c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c0c8:	4b12      	ldr	r3, [pc, #72]	; (800c114 <HAL_RCC_GetClockConfig+0x5c>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f003 0203 	and.w	r2, r3, #3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <HAL_RCC_GetClockConfig+0x5c>)
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <HAL_RCC_GetClockConfig+0x5c>)
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <HAL_RCC_GetClockConfig+0x5c>)
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	08db      	lsrs	r3, r3, #3
 800c0f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c0fa:	4b07      	ldr	r3, [pc, #28]	; (800c118 <HAL_RCC_GetClockConfig+0x60>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 020f 	and.w	r2, r3, #15
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	601a      	str	r2, [r3, #0]
}
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40023800 	.word	0x40023800
 800c118:	40023c00 	.word	0x40023c00

0800c11c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c140:	2b00      	cmp	r3, #0
 800c142:	d105      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d075      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c150:	4bad      	ldr	r3, [pc, #692]	; (800c408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c156:	f7fc f96f 	bl	8008438 <HAL_GetTick>
 800c15a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c15c:	e008      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c15e:	f7fc f96b 	bl	8008438 <HAL_GetTick>
 800c162:	4602      	mov	r2, r0
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d901      	bls.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e18b      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c170:	4ba6      	ldr	r3, [pc, #664]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1f0      	bne.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	d009      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	019a      	lsls	r2, r3, #6
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	071b      	lsls	r3, r3, #28
 800c194:	499d      	ldr	r1, [pc, #628]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c196:	4313      	orrs	r3, r2
 800c198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01f      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c1a8:	4b98      	ldr	r3, [pc, #608]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ae:	0f1b      	lsrs	r3, r3, #28
 800c1b0:	f003 0307 	and.w	r3, r3, #7
 800c1b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	019a      	lsls	r2, r3, #6
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	061b      	lsls	r3, r3, #24
 800c1c2:	431a      	orrs	r2, r3
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	071b      	lsls	r3, r3, #28
 800c1c8:	4990      	ldr	r1, [pc, #576]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c1d0:	4b8e      	ldr	r3, [pc, #568]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d6:	f023 021f 	bic.w	r2, r3, #31
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	498a      	ldr	r1, [pc, #552]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00d      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	019a      	lsls	r2, r3, #6
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	061b      	lsls	r3, r3, #24
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	071b      	lsls	r3, r3, #28
 800c208:	4980      	ldr	r1, [pc, #512]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c210:	4b7d      	ldr	r3, [pc, #500]	; (800c408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c212:	2201      	movs	r2, #1
 800c214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c216:	f7fc f90f 	bl	8008438 <HAL_GetTick>
 800c21a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c21c:	e008      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c21e:	f7fc f90b 	bl	8008438 <HAL_GetTick>
 800c222:	4602      	mov	r2, r0
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d901      	bls.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e12b      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c230:	4b76      	ldr	r3, [pc, #472]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0f0      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d105      	bne.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c250:	2b00      	cmp	r3, #0
 800c252:	d079      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c254:	4b6e      	ldr	r3, [pc, #440]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c25a:	f7fc f8ed 	bl	8008438 <HAL_GetTick>
 800c25e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c260:	e008      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c262:	f7fc f8e9 	bl	8008438 <HAL_GetTick>
 800c266:	4602      	mov	r2, r0
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d901      	bls.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e109      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c274:	4b65      	ldr	r3, [pc, #404]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c280:	d0ef      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d020      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c28e:	4b5f      	ldr	r3, [pc, #380]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c294:	0f1b      	lsrs	r3, r3, #28
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	019a      	lsls	r2, r3, #6
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	695b      	ldr	r3, [r3, #20]
 800c2a6:	061b      	lsls	r3, r3, #24
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	071b      	lsls	r3, r3, #28
 800c2ae:	4957      	ldr	r1, [pc, #348]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c2b6:	4b55      	ldr	r3, [pc, #340]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	4950      	ldr	r1, [pc, #320]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 0308 	and.w	r3, r3, #8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01e      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2dc:	4b4b      	ldr	r3, [pc, #300]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2e2:	0e1b      	lsrs	r3, r3, #24
 800c2e4:	f003 030f 	and.w	r3, r3, #15
 800c2e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	019a      	lsls	r2, r3, #6
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	061b      	lsls	r3, r3, #24
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	071b      	lsls	r3, r3, #28
 800c2fc:	4943      	ldr	r1, [pc, #268]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c304:	4b41      	ldr	r3, [pc, #260]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	493e      	ldr	r1, [pc, #248]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c314:	4313      	orrs	r3, r2
 800c316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c31a:	4b3d      	ldr	r3, [pc, #244]	; (800c410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c31c:	2201      	movs	r2, #1
 800c31e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c320:	f7fc f88a 	bl	8008438 <HAL_GetTick>
 800c324:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c326:	e008      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c328:	f7fc f886 	bl	8008438 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	2b02      	cmp	r3, #2
 800c334:	d901      	bls.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e0a6      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c33a:	4b34      	ldr	r3, [pc, #208]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c346:	d1ef      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0320 	and.w	r3, r3, #32
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 808d 	beq.w	800c470 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
 800c35a:	4b2c      	ldr	r3, [pc, #176]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	4a2b      	ldr	r2, [pc, #172]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c364:	6413      	str	r3, [r2, #64]	; 0x40
 800c366:	4b29      	ldr	r3, [pc, #164]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c372:	4b28      	ldr	r3, [pc, #160]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a27      	ldr	r2, [pc, #156]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c37c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c37e:	f7fc f85b 	bl	8008438 <HAL_GetTick>
 800c382:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c384:	e008      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c386:	f7fc f857 	bl	8008438 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d901      	bls.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e077      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c398:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0f0      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c3a4:	4b19      	ldr	r3, [pc, #100]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d039      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d032      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c3cc:	4b12      	ldr	r3, [pc, #72]	; (800c418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c3d2:	4b11      	ldr	r3, [pc, #68]	; (800c418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c3d8:	4a0c      	ldr	r2, [pc, #48]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c3de:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d11e      	bne.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c3ea:	f7fc f825 	bl	8008438 <HAL_GetTick>
 800c3ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3f0:	e014      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3f2:	f7fc f821 	bl	8008438 <HAL_GetTick>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c400:	4293      	cmp	r3, r2
 800c402:	d90b      	bls.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e03f      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c408:	42470068 	.word	0x42470068
 800c40c:	40023800 	.word	0x40023800
 800c410:	42470070 	.word	0x42470070
 800c414:	40007000 	.word	0x40007000
 800c418:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c41c:	4b1c      	ldr	r3, [pc, #112]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c420:	f003 0302 	and.w	r3, r3, #2
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0e4      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c434:	d10d      	bne.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c436:	4b16      	ldr	r3, [pc, #88]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c44a:	4911      	ldr	r1, [pc, #68]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c44c:	4313      	orrs	r3, r2
 800c44e:	608b      	str	r3, [r1, #8]
 800c450:	e005      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c452:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	4a0e      	ldr	r2, [pc, #56]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c458:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c45c:	6093      	str	r3, [r2, #8]
 800c45e:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c46a:	4909      	ldr	r1, [pc, #36]	; (800c490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0310 	and.w	r3, r3, #16
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c482:	4b04      	ldr	r3, [pc, #16]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c484:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	40023800 	.word	0x40023800
 800c494:	424711e0 	.word	0x424711e0

0800c498 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e083      	b.n	800c5b2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7f5b      	ldrb	r3, [r3, #29]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7f6 fbae 	bl	8002c1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	22ca      	movs	r2, #202	; 0xca
 800c4cc:	625a      	str	r2, [r3, #36]	; 0x24
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2253      	movs	r2, #83	; 0x53
 800c4d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fc26 	bl	800cd28 <RTC_EnterInitMode>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d008      	beq.n	800c4f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	22ff      	movs	r2, #255	; 0xff
 800c4e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e05e      	b.n	800c5b2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	6812      	ldr	r2, [r2, #0]
 800c4fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c506:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6899      	ldr	r1, [r3, #8]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	431a      	orrs	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	431a      	orrs	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	430a      	orrs	r2, r1
 800c524:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	68d2      	ldr	r2, [r2, #12]
 800c52e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6919      	ldr	r1, [r3, #16]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	041a      	lsls	r2, r3, #16
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	430a      	orrs	r2, r1
 800c542:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c552:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f003 0320 	and.w	r3, r3, #32
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10e      	bne.n	800c580 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fbb8 	bl	800ccd8 <HAL_RTC_WaitForSynchro>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	22ff      	movs	r2, #255	; 0xff
 800c574:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2204      	movs	r2, #4
 800c57a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e018      	b.n	800c5b2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c58e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699a      	ldr	r2, [r3, #24]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	22ff      	movs	r2, #255	; 0xff
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
  }
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5ba:	b590      	push	{r4, r7, lr}
 800c5bc:	b087      	sub	sp, #28
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	60f8      	str	r0, [r7, #12]
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	7f1b      	ldrb	r3, [r3, #28]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d101      	bne.n	800c5d6 <HAL_RTC_SetTime+0x1c>
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	e0aa      	b.n	800c72c <HAL_RTC_SetTime+0x172>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d126      	bne.n	800c636 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f000 fbbd 	bl	800cd80 <RTC_ByteToBcd2>
 800c606:	4603      	mov	r3, r0
 800c608:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fbb6 	bl	800cd80 <RTC_ByteToBcd2>
 800c614:	4603      	mov	r3, r0
 800c616:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c618:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	789b      	ldrb	r3, [r3, #2]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 fbae 	bl	800cd80 <RTC_ByteToBcd2>
 800c624:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c626:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	78db      	ldrb	r3, [r3, #3]
 800c62e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c630:	4313      	orrs	r3, r2
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	e018      	b.n	800c668 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	2200      	movs	r2, #0
 800c648:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	785b      	ldrb	r3, [r3, #1]
 800c654:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c656:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c65c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	78db      	ldrb	r3, [r3, #3]
 800c662:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	22ca      	movs	r2, #202	; 0xca
 800c66e:	625a      	str	r2, [r3, #36]	; 0x24
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2253      	movs	r2, #83	; 0x53
 800c676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 fb55 	bl	800cd28 <RTC_EnterInitMode>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	22ff      	movs	r2, #255	; 0xff
 800c68a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2204      	movs	r2, #4
 800c690:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	e047      	b.n	800c72c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c6a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c6aa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c6ba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6899      	ldr	r1, [r3, #8]
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	431a      	orrs	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f003 0320 	and.w	r3, r3, #32
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d111      	bne.n	800c716 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 faf0 	bl	800ccd8 <HAL_RTC_WaitForSynchro>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	22ff      	movs	r2, #255	; 0xff
 800c704:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2204      	movs	r2, #4
 800c70a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e00a      	b.n	800c72c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	22ff      	movs	r2, #255	; 0xff
 800c71c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2201      	movs	r2, #1
 800c722:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c72a:	2300      	movs	r3, #0
  }
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	371c      	adds	r7, #28
 800c730:	46bd      	mov	sp, r7
 800c732:	bd90      	pop	{r4, r7, pc}

0800c734 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c766:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c76a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	0c1b      	lsrs	r3, r3, #16
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c776:	b2da      	uxtb	r2, r3
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	0a1b      	lsrs	r3, r3, #8
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c786:	b2da      	uxtb	r2, r3
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c794:	b2da      	uxtb	r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	0c1b      	lsrs	r3, r3, #16
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d11a      	bne.n	800c7e6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fb01 	bl	800cdbc <RTC_Bcd2ToByte>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	461a      	mov	r2, r3
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 faf8 	bl	800cdbc <RTC_Bcd2ToByte>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	789b      	ldrb	r3, [r3, #2]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 faef 	bl	800cdbc <RTC_Bcd2ToByte>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c7f0:	b590      	push	{r4, r7, lr}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	7f1b      	ldrb	r3, [r3, #28]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d101      	bne.n	800c80c <HAL_RTC_SetDate+0x1c>
 800c808:	2302      	movs	r3, #2
 800c80a:	e094      	b.n	800c936 <HAL_RTC_SetDate+0x146>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2201      	movs	r2, #1
 800c810:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2202      	movs	r2, #2
 800c816:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10e      	bne.n	800c83c <HAL_RTC_SetDate+0x4c>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	785b      	ldrb	r3, [r3, #1]
 800c822:	f003 0310 	and.w	r3, r3, #16
 800c826:	2b00      	cmp	r3, #0
 800c828:	d008      	beq.n	800c83c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	785b      	ldrb	r3, [r3, #1]
 800c82e:	f023 0310 	bic.w	r3, r3, #16
 800c832:	b2db      	uxtb	r3, r3
 800c834:	330a      	adds	r3, #10
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11c      	bne.n	800c87c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	78db      	ldrb	r3, [r3, #3]
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fa9a 	bl	800cd80 <RTC_ByteToBcd2>
 800c84c:	4603      	mov	r3, r0
 800c84e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fa93 	bl	800cd80 <RTC_ByteToBcd2>
 800c85a:	4603      	mov	r3, r0
 800c85c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c85e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	789b      	ldrb	r3, [r3, #2]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fa8b 	bl	800cd80 <RTC_ByteToBcd2>
 800c86a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c86c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c876:	4313      	orrs	r3, r2
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e00e      	b.n	800c89a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	78db      	ldrb	r3, [r3, #3]
 800c880:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	785b      	ldrb	r3, [r3, #1]
 800c886:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c888:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c88e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	22ca      	movs	r2, #202	; 0xca
 800c8a0:	625a      	str	r2, [r3, #36]	; 0x24
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2253      	movs	r2, #83	; 0x53
 800c8a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 fa3c 	bl	800cd28 <RTC_EnterInitMode>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00b      	beq.n	800c8ce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	22ff      	movs	r2, #255	; 0xff
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2204      	movs	r2, #4
 800c8c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e033      	b.n	800c936 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c8dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d111      	bne.n	800c920 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 f9eb 	bl	800ccd8 <HAL_RTC_WaitForSynchro>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00b      	beq.n	800c920 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	22ff      	movs	r2, #255	; 0xff
 800c90e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2204      	movs	r2, #4
 800c914:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e00a      	b.n	800c936 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	22ff      	movs	r2, #255	; 0xff
 800c926:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c934:	2300      	movs	r3, #0
  }
}
 800c936:	4618      	mov	r0, r3
 800c938:	371c      	adds	r7, #28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd90      	pop	{r4, r7, pc}

0800c93e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b086      	sub	sp, #24
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c94a:	2300      	movs	r3, #0
 800c94c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c958:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c95c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	b2da      	uxtb	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	0a1b      	lsrs	r3, r3, #8
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	f003 031f 	and.w	r3, r3, #31
 800c972:	b2da      	uxtb	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c980:	b2da      	uxtb	r2, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	0b5b      	lsrs	r3, r3, #13
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 0307 	and.w	r3, r3, #7
 800c990:	b2da      	uxtb	r2, r3
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d11a      	bne.n	800c9d2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	78db      	ldrb	r3, [r3, #3]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fa0b 	bl	800cdbc <RTC_Bcd2ToByte>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fa02 	bl	800cdbc <RTC_Bcd2ToByte>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 f9f9 	bl	800cdbc <RTC_Bcd2ToByte>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c9dc:	b590      	push	{r4, r7, lr}
 800c9de:	b089      	sub	sp, #36	; 0x24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c9f0:	4b93      	ldr	r3, [pc, #588]	; (800cc40 <HAL_RTC_SetAlarm_IT+0x264>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a93      	ldr	r2, [pc, #588]	; (800cc44 <HAL_RTC_SetAlarm_IT+0x268>)
 800c9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9fa:	0adb      	lsrs	r3, r3, #11
 800c9fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca00:	fb02 f303 	mul.w	r3, r2, r3
 800ca04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	7f1b      	ldrb	r3, [r3, #28]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d101      	bne.n	800ca12 <HAL_RTC_SetAlarm_IT+0x36>
 800ca0e:	2302      	movs	r3, #2
 800ca10:	e111      	b.n	800cc36 <HAL_RTC_SetAlarm_IT+0x25a>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2201      	movs	r2, #1
 800ca16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d137      	bne.n	800ca94 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d102      	bne.n	800ca38 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2200      	movs	r2, #0
 800ca36:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 f99f 	bl	800cd80 <RTC_ByteToBcd2>
 800ca42:	4603      	mov	r3, r0
 800ca44:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f998 	bl	800cd80 <RTC_ByteToBcd2>
 800ca50:	4603      	mov	r3, r0
 800ca52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ca54:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	789b      	ldrb	r3, [r3, #2]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 f990 	bl	800cd80 <RTC_ByteToBcd2>
 800ca60:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ca62:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	78db      	ldrb	r3, [r3, #3]
 800ca6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ca6c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 f982 	bl	800cd80 <RTC_ByteToBcd2>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ca80:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ca88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	61fb      	str	r3, [r7, #28]
 800ca92:	e023      	b.n	800cadc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d102      	bne.n	800caa8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2200      	movs	r2, #0
 800caa6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	785b      	ldrb	r3, [r3, #1]
 800cab2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cab4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800caba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	78db      	ldrb	r3, [r3, #3]
 800cac0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cac2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800caca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cacc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cad2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cad8:	4313      	orrs	r3, r2
 800cada:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	22ca      	movs	r2, #202	; 0xca
 800caee:	625a      	str	r2, [r3, #36]	; 0x24
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2253      	movs	r2, #83	; 0x53
 800caf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb00:	d141      	bne.n	800cb86 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb10:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800cb22:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	1e5a      	subs	r2, r3, #1
 800cb28:	617a      	str	r2, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10b      	bne.n	800cb46 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	22ff      	movs	r2, #255	; 0xff
 800cb34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2203      	movs	r2, #3
 800cb3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e077      	b.n	800cc36 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0e7      	beq.n	800cb24 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69fa      	ldr	r2, [r7, #28]
 800cb5a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689a      	ldr	r2, [r3, #8]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb72:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	689a      	ldr	r2, [r3, #8]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb82:	609a      	str	r2, [r3, #8]
 800cb84:	e040      	b.n	800cc08 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cb94:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800cba6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	1e5a      	subs	r2, r3, #1
 800cbac:	617a      	str	r2, [r7, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10b      	bne.n	800cbca <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	22ff      	movs	r2, #255	; 0xff
 800cbb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2203      	movs	r2, #3
 800cbbe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e035      	b.n	800cc36 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0e7      	beq.n	800cba8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	69fa      	ldr	r2, [r7, #28]
 800cbde:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbf6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc06:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cc08:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <HAL_RTC_SetAlarm_IT+0x26c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a0e      	ldr	r2, [pc, #56]	; (800cc48 <HAL_RTC_SetAlarm_IT+0x26c>)
 800cc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc12:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <HAL_RTC_SetAlarm_IT+0x26c>)
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	4a0b      	ldr	r2, [pc, #44]	; (800cc48 <HAL_RTC_SetAlarm_IT+0x26c>)
 800cc1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc1e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	22ff      	movs	r2, #255	; 0xff
 800cc26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3724      	adds	r7, #36	; 0x24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd90      	pop	{r4, r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000000 	.word	0x20000000
 800cc44:	10624dd3 	.word	0x10624dd3
 800cc48:	40013c00 	.word	0x40013c00

0800cc4c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d012      	beq.n	800cc88 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fa feef 	bl	8007a54 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800cc86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d012      	beq.n	800ccbc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f9bf 	bl	800d028 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ccba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ccbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ccc2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	775a      	strb	r2, [r3, #29]
}
 800ccca:	bf00      	nop
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	40013c00 	.word	0x40013c00

0800ccd8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68da      	ldr	r2, [r3, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ccf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ccf4:	f7fb fba0 	bl	8008438 <HAL_GetTick>
 800ccf8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ccfa:	e009      	b.n	800cd10 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ccfc:	f7fb fb9c 	bl	8008438 <HAL_GetTick>
 800cd00:	4602      	mov	r2, r0
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd0a:	d901      	bls.n	800cd10 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e007      	b.n	800cd20 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0ee      	beq.n	800ccfc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d119      	bne.n	800cd76 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd4c:	f7fb fb74 	bl	8008438 <HAL_GetTick>
 800cd50:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd52:	e009      	b.n	800cd68 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd54:	f7fb fb70 	bl	8008438 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd62:	d901      	bls.n	800cd68 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e007      	b.n	800cd78 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0ee      	beq.n	800cd54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800cd8e:	e005      	b.n	800cd9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3301      	adds	r3, #1
 800cd94:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	3b0a      	subs	r3, #10
 800cd9a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b09      	cmp	r3, #9
 800cda0:	d8f6      	bhi.n	800cd90 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	011b      	lsls	r3, r3, #4
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	b2db      	uxtb	r3, r3
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	091b      	lsrs	r3, r3, #4
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	f003 030f 	and.w	r3, r3, #15
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	b2db      	uxtb	r3, r3
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b087      	sub	sp, #28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	7f1b      	ldrb	r3, [r3, #28]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d101      	bne.n	800ce10 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e0a6      	b.n	800cf5e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	22ca      	movs	r2, #202	; 0xca
 800ce22:	625a      	str	r2, [r3, #36]	; 0x24
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2253      	movs	r2, #83	; 0x53
 800ce2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d022      	beq.n	800ce80 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ce3a:	4b4c      	ldr	r3, [pc, #304]	; (800cf6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a4c      	ldr	r2, [pc, #304]	; (800cf70 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ce40:	fba2 2303 	umull	r2, r3, r2, r3
 800ce44:	0adb      	lsrs	r3, r3, #11
 800ce46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce4a:	fb02 f303 	mul.w	r3, r2, r3
 800ce4e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	1e5a      	subs	r2, r3, #1
 800ce54:	617a      	str	r2, [r7, #20]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10b      	bne.n	800ce72 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	22ff      	movs	r2, #255	; 0xff
 800ce60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2203      	movs	r2, #3
 800ce66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e075      	b.n	800cf5e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1e7      	bne.n	800ce50 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689a      	ldr	r2, [r3, #8]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce8e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ce90:	4b36      	ldr	r3, [pc, #216]	; (800cf6c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a36      	ldr	r2, [pc, #216]	; (800cf70 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ce96:	fba2 2303 	umull	r2, r3, r2, r3
 800ce9a:	0adb      	lsrs	r3, r3, #11
 800ce9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cea0:	fb02 f303 	mul.w	r3, r2, r3
 800cea4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	1e5a      	subs	r2, r3, #1
 800ceaa:	617a      	str	r2, [r7, #20]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10b      	bne.n	800cec8 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	22ff      	movs	r2, #255	; 0xff
 800ceb6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2203      	movs	r2, #3
 800cebc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e04a      	b.n	800cf5e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f003 0304 	and.w	r3, r3, #4
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0e7      	beq.n	800cea6 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689a      	ldr	r2, [r3, #8]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f022 0207 	bic.w	r2, r2, #7
 800ceec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	6899      	ldr	r1, [r3, #8]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	430a      	orrs	r2, r1
 800cefc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cefe:	4b1d      	ldr	r3, [pc, #116]	; (800cf74 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a1c      	ldr	r2, [pc, #112]	; (800cf74 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cf04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf08:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800cf0a:	4b1a      	ldr	r3, [pc, #104]	; (800cf74 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	4a19      	ldr	r2, [pc, #100]	; (800cf74 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cf10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf14:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800cf26:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	689a      	ldr	r2, [r3, #8]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf36:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689a      	ldr	r2, [r3, #8]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	22ff      	movs	r2, #255	; 0xff
 800cf4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2201      	movs	r2, #1
 800cf54:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	371c      	adds	r7, #28
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	20000000 	.word	0x20000000
 800cf70:	10624dd3 	.word	0x10624dd3
 800cf74:	40013c00 	.word	0x40013c00

0800cf78 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf80:	2300      	movs	r3, #0
 800cf82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7f1b      	ldrb	r3, [r3, #28]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d101      	bne.n	800cf90 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	e047      	b.n	800d020 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	22ca      	movs	r2, #202	; 0xca
 800cfa2:	625a      	str	r2, [r3, #36]	; 0x24
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2253      	movs	r2, #83	; 0x53
 800cfaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689a      	ldr	r2, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfba:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	689a      	ldr	r2, [r3, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cfca:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfcc:	f7fb fa34 	bl	8008438 <HAL_GetTick>
 800cfd0:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cfd2:	e013      	b.n	800cffc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cfd4:	f7fb fa30 	bl	8008438 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfe2:	d90b      	bls.n	800cffc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	22ff      	movs	r2, #255	; 0xff
 800cfea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2203      	movs	r2, #3
 800cff0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e011      	b.n	800d020 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f003 0304 	and.w	r3, r3, #4
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0e4      	beq.n	800cfd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	22ff      	movs	r2, #255	; 0xff
 800d010:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e07b      	b.n	800d146 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	2b00      	cmp	r3, #0
 800d054:	d108      	bne.n	800d068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d05e:	d009      	beq.n	800d074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	61da      	str	r2, [r3, #28]
 800d066:	e005      	b.n	800d074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7f5 fdf6 	bl	8002c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2202      	movs	r2, #2
 800d098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d0bc:	431a      	orrs	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0c6:	431a      	orrs	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	f003 0302 	and.w	r3, r3, #2
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0f8:	ea42 0103 	orr.w	r1, r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d100:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	430a      	orrs	r2, r1
 800d10a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	0c1b      	lsrs	r3, r3, #16
 800d112:	f003 0104 	and.w	r1, r3, #4
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11a:	f003 0210 	and.w	r2, r3, #16
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	430a      	orrs	r2, r1
 800d124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	69da      	ldr	r2, [r3, #28]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b088      	sub	sp, #32
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	603b      	str	r3, [r7, #0]
 800d15a:	4613      	mov	r3, r2
 800d15c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d101      	bne.n	800d170 <HAL_SPI_Transmit+0x22>
 800d16c:	2302      	movs	r3, #2
 800d16e:	e126      	b.n	800d3be <HAL_SPI_Transmit+0x270>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d178:	f7fb f95e 	bl	8008438 <HAL_GetTick>
 800d17c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d17e:	88fb      	ldrh	r3, [r7, #6]
 800d180:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d002      	beq.n	800d194 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d18e:	2302      	movs	r3, #2
 800d190:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d192:	e10b      	b.n	800d3ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d002      	beq.n	800d1a0 <HAL_SPI_Transmit+0x52>
 800d19a:	88fb      	ldrh	r3, [r7, #6]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d1a4:	e102      	b.n	800d3ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2203      	movs	r2, #3
 800d1aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	88fa      	ldrh	r2, [r7, #6]
 800d1be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	88fa      	ldrh	r2, [r7, #6]
 800d1c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1ec:	d10f      	bne.n	800d20e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d20c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d218:	2b40      	cmp	r3, #64	; 0x40
 800d21a:	d007      	beq.n	800d22c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d22a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d234:	d14b      	bne.n	800d2ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d002      	beq.n	800d244 <HAL_SPI_Transmit+0xf6>
 800d23e:	8afb      	ldrh	r3, [r7, #22]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d13e      	bne.n	800d2c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d248:	881a      	ldrh	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d254:	1c9a      	adds	r2, r3, #2
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d25e:	b29b      	uxth	r3, r3
 800d260:	3b01      	subs	r3, #1
 800d262:	b29a      	uxth	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d268:	e02b      	b.n	800d2c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b02      	cmp	r3, #2
 800d276:	d112      	bne.n	800d29e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d27c:	881a      	ldrh	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d288:	1c9a      	adds	r2, r3, #2
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d292:	b29b      	uxth	r3, r3
 800d294:	3b01      	subs	r3, #1
 800d296:	b29a      	uxth	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	86da      	strh	r2, [r3, #54]	; 0x36
 800d29c:	e011      	b.n	800d2c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d29e:	f7fb f8cb 	bl	8008438 <HAL_GetTick>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d803      	bhi.n	800d2b6 <HAL_SPI_Transmit+0x168>
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b4:	d102      	bne.n	800d2bc <HAL_SPI_Transmit+0x16e>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d2c0:	e074      	b.n	800d3ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1ce      	bne.n	800d26a <HAL_SPI_Transmit+0x11c>
 800d2cc:	e04c      	b.n	800d368 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <HAL_SPI_Transmit+0x18e>
 800d2d6:	8afb      	ldrh	r3, [r7, #22]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d140      	bne.n	800d35e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	330c      	adds	r3, #12
 800d2e6:	7812      	ldrb	r2, [r2, #0]
 800d2e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d302:	e02c      	b.n	800d35e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f003 0302 	and.w	r3, r3, #2
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d113      	bne.n	800d33a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	330c      	adds	r3, #12
 800d31c:	7812      	ldrb	r2, [r2, #0]
 800d31e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d32e:	b29b      	uxth	r3, r3
 800d330:	3b01      	subs	r3, #1
 800d332:	b29a      	uxth	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	86da      	strh	r2, [r3, #54]	; 0x36
 800d338:	e011      	b.n	800d35e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d33a:	f7fb f87d 	bl	8008438 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d803      	bhi.n	800d352 <HAL_SPI_Transmit+0x204>
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d350:	d102      	bne.n	800d358 <HAL_SPI_Transmit+0x20a>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d35c:	e026      	b.n	800d3ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d362:	b29b      	uxth	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1cd      	bne.n	800d304 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 fbcb 	bl	800db08 <SPI_EndRxTxTransaction>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2220      	movs	r2, #32
 800d37c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10a      	bne.n	800d39c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d386:	2300      	movs	r3, #0
 800d388:	613b      	str	r3, [r7, #16]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	613b      	str	r3, [r7, #16]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	613b      	str	r3, [r7, #16]
 800d39a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d002      	beq.n	800d3aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	77fb      	strb	r3, [r7, #31]
 800d3a8:	e000      	b.n	800d3ac <HAL_SPI_Transmit+0x25e>
  }

error:
 800d3aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b088      	sub	sp, #32
 800d3ca:	af02      	add	r7, sp, #8
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3e2:	d112      	bne.n	800d40a <HAL_SPI_Receive+0x44>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10e      	bne.n	800d40a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2204      	movs	r2, #4
 800d3f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d3f4:	88fa      	ldrh	r2, [r7, #6]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 f8f1 	bl	800d5e8 <HAL_SPI_TransmitReceive>
 800d406:	4603      	mov	r3, r0
 800d408:	e0ea      	b.n	800d5e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d410:	2b01      	cmp	r3, #1
 800d412:	d101      	bne.n	800d418 <HAL_SPI_Receive+0x52>
 800d414:	2302      	movs	r3, #2
 800d416:	e0e3      	b.n	800d5e0 <HAL_SPI_Receive+0x21a>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d420:	f7fb f80a 	bl	8008438 <HAL_GetTick>
 800d424:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d002      	beq.n	800d438 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d432:	2302      	movs	r3, #2
 800d434:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d436:	e0ca      	b.n	800d5ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <HAL_SPI_Receive+0x7e>
 800d43e:	88fb      	ldrh	r3, [r7, #6]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d448:	e0c1      	b.n	800d5ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2204      	movs	r2, #4
 800d44e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	88fa      	ldrh	r2, [r7, #6]
 800d462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	88fa      	ldrh	r2, [r7, #6]
 800d468:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2200      	movs	r2, #0
 800d480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d490:	d10f      	bne.n	800d4b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d4b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4bc:	2b40      	cmp	r3, #64	; 0x40
 800d4be:	d007      	beq.n	800d4d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d162      	bne.n	800d59e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d4d8:	e02e      	b.n	800d538 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	f003 0301 	and.w	r3, r3, #1
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d115      	bne.n	800d514 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f103 020c 	add.w	r2, r3, #12
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f4:	7812      	ldrb	r2, [r2, #0]
 800d4f6:	b2d2      	uxtb	r2, r2
 800d4f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d508:	b29b      	uxth	r3, r3
 800d50a:	3b01      	subs	r3, #1
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d512:	e011      	b.n	800d538 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d514:	f7fa ff90 	bl	8008438 <HAL_GetTick>
 800d518:	4602      	mov	r2, r0
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d803      	bhi.n	800d52c <HAL_SPI_Receive+0x166>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52a:	d102      	bne.n	800d532 <HAL_SPI_Receive+0x16c>
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d102      	bne.n	800d538 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d532:	2303      	movs	r3, #3
 800d534:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d536:	e04a      	b.n	800d5ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1cb      	bne.n	800d4da <HAL_SPI_Receive+0x114>
 800d542:	e031      	b.n	800d5a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d113      	bne.n	800d57a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68da      	ldr	r2, [r3, #12]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55c:	b292      	uxth	r2, r2
 800d55e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	1c9a      	adds	r2, r3, #2
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d56e:	b29b      	uxth	r3, r3
 800d570:	3b01      	subs	r3, #1
 800d572:	b29a      	uxth	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d578:	e011      	b.n	800d59e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d57a:	f7fa ff5d 	bl	8008438 <HAL_GetTick>
 800d57e:	4602      	mov	r2, r0
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	683a      	ldr	r2, [r7, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d803      	bhi.n	800d592 <HAL_SPI_Receive+0x1cc>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d590:	d102      	bne.n	800d598 <HAL_SPI_Receive+0x1d2>
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d59c:	e017      	b.n	800d5ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1cd      	bne.n	800d544 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f000 fa45 	bl	800da3c <SPI_EndRxTransaction>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	75fb      	strb	r3, [r7, #23]
 800d5ca:	e000      	b.n	800d5ce <HAL_SPI_Receive+0x208>
  }

error :
 800d5cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08c      	sub	sp, #48	; 0x30
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d606:	2b01      	cmp	r3, #1
 800d608:	d101      	bne.n	800d60e <HAL_SPI_TransmitReceive+0x26>
 800d60a:	2302      	movs	r3, #2
 800d60c:	e18a      	b.n	800d924 <HAL_SPI_TransmitReceive+0x33c>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d616:	f7fa ff0f 	bl	8008438 <HAL_GetTick>
 800d61a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d62c:	887b      	ldrh	r3, [r7, #2]
 800d62e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d634:	2b01      	cmp	r3, #1
 800d636:	d00f      	beq.n	800d658 <HAL_SPI_TransmitReceive+0x70>
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d63e:	d107      	bne.n	800d650 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <HAL_SPI_TransmitReceive+0x68>
 800d648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d64c:	2b04      	cmp	r3, #4
 800d64e:	d003      	beq.n	800d658 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d650:	2302      	movs	r3, #2
 800d652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d656:	e15b      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <HAL_SPI_TransmitReceive+0x82>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <HAL_SPI_TransmitReceive+0x82>
 800d664:	887b      	ldrh	r3, [r7, #2]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d103      	bne.n	800d672 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d670:	e14e      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b04      	cmp	r3, #4
 800d67c:	d003      	beq.n	800d686 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2205      	movs	r2, #5
 800d682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	887a      	ldrh	r2, [r7, #2]
 800d696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	887a      	ldrh	r2, [r7, #2]
 800d69c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	887a      	ldrh	r2, [r7, #2]
 800d6a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	887a      	ldrh	r2, [r7, #2]
 800d6ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c6:	2b40      	cmp	r3, #64	; 0x40
 800d6c8:	d007      	beq.n	800d6da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6e2:	d178      	bne.n	800d7d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x10a>
 800d6ec:	8b7b      	ldrh	r3, [r7, #26]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d166      	bne.n	800d7c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f6:	881a      	ldrh	r2, [r3, #0]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d702:	1c9a      	adds	r2, r3, #2
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	3b01      	subs	r3, #1
 800d710:	b29a      	uxth	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d716:	e053      	b.n	800d7c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b02      	cmp	r3, #2
 800d724:	d11b      	bne.n	800d75e <HAL_SPI_TransmitReceive+0x176>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d016      	beq.n	800d75e <HAL_SPI_TransmitReceive+0x176>
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	2b01      	cmp	r3, #1
 800d734:	d113      	bne.n	800d75e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73a:	881a      	ldrh	r2, [r3, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d746:	1c9a      	adds	r2, r3, #2
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d750:	b29b      	uxth	r3, r3
 800d752:	3b01      	subs	r3, #1
 800d754:	b29a      	uxth	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d119      	bne.n	800d7a0 <HAL_SPI_TransmitReceive+0x1b8>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d770:	b29b      	uxth	r3, r3
 800d772:	2b00      	cmp	r3, #0
 800d774:	d014      	beq.n	800d7a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d780:	b292      	uxth	r2, r2
 800d782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	1c9a      	adds	r2, r3, #2
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d792:	b29b      	uxth	r3, r3
 800d794:	3b01      	subs	r3, #1
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d79c:	2301      	movs	r3, #1
 800d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d7a0:	f7fa fe4a 	bl	8008438 <HAL_GetTick>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d807      	bhi.n	800d7c0 <HAL_SPI_TransmitReceive+0x1d8>
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b6:	d003      	beq.n	800d7c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d7be:	e0a7      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1a6      	bne.n	800d718 <HAL_SPI_TransmitReceive+0x130>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1a1      	bne.n	800d718 <HAL_SPI_TransmitReceive+0x130>
 800d7d4:	e07c      	b.n	800d8d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_SPI_TransmitReceive+0x1fc>
 800d7de:	8b7b      	ldrh	r3, [r7, #26]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d16b      	bne.n	800d8bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	7812      	ldrb	r2, [r2, #0]
 800d7f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d800:	b29b      	uxth	r3, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	b29a      	uxth	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d80a:	e057      	b.n	800d8bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f003 0302 	and.w	r3, r3, #2
 800d816:	2b02      	cmp	r3, #2
 800d818:	d11c      	bne.n	800d854 <HAL_SPI_TransmitReceive+0x26c>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d017      	beq.n	800d854 <HAL_SPI_TransmitReceive+0x26c>
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	2b01      	cmp	r3, #1
 800d828:	d114      	bne.n	800d854 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	330c      	adds	r3, #12
 800d834:	7812      	ldrb	r2, [r2, #0]
 800d836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d846:	b29b      	uxth	r3, r3
 800d848:	3b01      	subs	r3, #1
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d119      	bne.n	800d896 <HAL_SPI_TransmitReceive+0x2ae>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d866:	b29b      	uxth	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d014      	beq.n	800d896 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68da      	ldr	r2, [r3, #12]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	1c5a      	adds	r2, r3, #1
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d888:	b29b      	uxth	r3, r3
 800d88a:	3b01      	subs	r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d892:	2301      	movs	r3, #1
 800d894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d896:	f7fa fdcf 	bl	8008438 <HAL_GetTick>
 800d89a:	4602      	mov	r2, r0
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d803      	bhi.n	800d8ae <HAL_SPI_TransmitReceive+0x2c6>
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d102      	bne.n	800d8b4 <HAL_SPI_TransmitReceive+0x2cc>
 800d8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d103      	bne.n	800d8bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d8ba:	e029      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1a2      	bne.n	800d80c <HAL_SPI_TransmitReceive+0x224>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d19d      	bne.n	800d80c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 f917 	bl	800db08 <SPI_EndRxTxTransaction>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d006      	beq.n	800d8ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d8ec:	e010      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10b      	bne.n	800d90e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	e000      	b.n	800d910 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d90e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d924:	4618      	mov	r0, r3
 800d926:	3730      	adds	r7, #48	; 0x30
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	4613      	mov	r3, r2
 800d93a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d93c:	f7fa fd7c 	bl	8008438 <HAL_GetTick>
 800d940:	4602      	mov	r2, r0
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d94c:	f7fa fd74 	bl	8008438 <HAL_GetTick>
 800d950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d952:	4b39      	ldr	r3, [pc, #228]	; (800da38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	015b      	lsls	r3, r3, #5
 800d958:	0d1b      	lsrs	r3, r3, #20
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d962:	e054      	b.n	800da0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96a:	d050      	beq.n	800da0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d96c:	f7fa fd64 	bl	8008438 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d902      	bls.n	800d982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d13d      	bne.n	800d9fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d99a:	d111      	bne.n	800d9c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9a4:	d004      	beq.n	800d9b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9ae:	d107      	bne.n	800d9c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9c8:	d10f      	bne.n	800d9ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d9e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e017      	b.n	800da2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800da04:	2300      	movs	r3, #0
 800da06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	3b01      	subs	r3, #1
 800da0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689a      	ldr	r2, [r3, #8]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4013      	ands	r3, r2
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	bf0c      	ite	eq
 800da1e:	2301      	moveq	r3, #1
 800da20:	2300      	movne	r3, #0
 800da22:	b2db      	uxtb	r3, r3
 800da24:	461a      	mov	r2, r3
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d19b      	bne.n	800d964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3720      	adds	r7, #32
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	20000000 	.word	0x20000000

0800da3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af02      	add	r7, sp, #8
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da50:	d111      	bne.n	800da76 <SPI_EndRxTransaction+0x3a>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da5a:	d004      	beq.n	800da66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da64:	d107      	bne.n	800da76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da7e:	d12a      	bne.n	800dad6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da88:	d012      	beq.n	800dab0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2200      	movs	r2, #0
 800da92:	2180      	movs	r1, #128	; 0x80
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f7ff ff49 	bl	800d92c <SPI_WaitFlagStateUntilTimeout>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d02d      	beq.n	800dafc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa4:	f043 0220 	orr.w	r2, r3, #32
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e026      	b.n	800dafe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	2200      	movs	r2, #0
 800dab8:	2101      	movs	r1, #1
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff ff36 	bl	800d92c <SPI_WaitFlagStateUntilTimeout>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d01a      	beq.n	800dafc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daca:	f043 0220 	orr.w	r2, r3, #32
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dad2:	2303      	movs	r3, #3
 800dad4:	e013      	b.n	800dafe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2200      	movs	r2, #0
 800dade:	2101      	movs	r1, #1
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff ff23 	bl	800d92c <SPI_WaitFlagStateUntilTimeout>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf0:	f043 0220 	orr.w	r2, r3, #32
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800daf8:	2303      	movs	r3, #3
 800dafa:	e000      	b.n	800dafe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800db14:	4b1b      	ldr	r3, [pc, #108]	; (800db84 <SPI_EndRxTxTransaction+0x7c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a1b      	ldr	r2, [pc, #108]	; (800db88 <SPI_EndRxTxTransaction+0x80>)
 800db1a:	fba2 2303 	umull	r2, r3, r2, r3
 800db1e:	0d5b      	lsrs	r3, r3, #21
 800db20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db24:	fb02 f303 	mul.w	r3, r2, r3
 800db28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db32:	d112      	bne.n	800db5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2200      	movs	r2, #0
 800db3c:	2180      	movs	r1, #128	; 0x80
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fef4 	bl	800d92c <SPI_WaitFlagStateUntilTimeout>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d016      	beq.n	800db78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db4e:	f043 0220 	orr.w	r2, r3, #32
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800db56:	2303      	movs	r3, #3
 800db58:	e00f      	b.n	800db7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00a      	beq.n	800db76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	3b01      	subs	r3, #1
 800db64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db70:	2b80      	cmp	r3, #128	; 0x80
 800db72:	d0f2      	beq.n	800db5a <SPI_EndRxTxTransaction+0x52>
 800db74:	e000      	b.n	800db78 <SPI_EndRxTxTransaction+0x70>
        break;
 800db76:	bf00      	nop
  }

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20000000 	.word	0x20000000
 800db88:	165e9f81 	.word	0x165e9f81

0800db8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e041      	b.n	800dc22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f839 	bl	800dc2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4610      	mov	r0, r2
 800dbcc:	f000 faea 	bl	800e1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
	...

0800dc40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d001      	beq.n	800dc58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e04e      	b.n	800dcf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68da      	ldr	r2, [r3, #12]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f042 0201 	orr.w	r2, r2, #1
 800dc6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a23      	ldr	r2, [pc, #140]	; (800dd04 <HAL_TIM_Base_Start_IT+0xc4>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d022      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc82:	d01d      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a1f      	ldr	r2, [pc, #124]	; (800dd08 <HAL_TIM_Base_Start_IT+0xc8>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d018      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4a1e      	ldr	r2, [pc, #120]	; (800dd0c <HAL_TIM_Base_Start_IT+0xcc>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d013      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a1c      	ldr	r2, [pc, #112]	; (800dd10 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d00e      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a1b      	ldr	r2, [pc, #108]	; (800dd14 <HAL_TIM_Base_Start_IT+0xd4>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d009      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a19      	ldr	r2, [pc, #100]	; (800dd18 <HAL_TIM_Base_Start_IT+0xd8>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d004      	beq.n	800dcc0 <HAL_TIM_Base_Start_IT+0x80>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a18      	ldr	r2, [pc, #96]	; (800dd1c <HAL_TIM_Base_Start_IT+0xdc>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d111      	bne.n	800dce4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b06      	cmp	r3, #6
 800dcd0:	d010      	beq.n	800dcf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f042 0201 	orr.w	r2, r2, #1
 800dce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dce2:	e007      	b.n	800dcf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f042 0201 	orr.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	40010000 	.word	0x40010000
 800dd08:	40000400 	.word	0x40000400
 800dd0c:	40000800 	.word	0x40000800
 800dd10:	40000c00 	.word	0x40000c00
 800dd14:	40010400 	.word	0x40010400
 800dd18:	40014000 	.word	0x40014000
 800dd1c:	40001800 	.word	0x40001800

0800dd20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e041      	b.n	800ddb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7f5 f850 	bl	8002dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f000 fa20 	bl	800e1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	f003 0302 	and.w	r3, r3, #2
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d122      	bne.n	800de1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	f003 0302 	and.w	r3, r3, #2
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d11b      	bne.n	800de1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f06f 0202 	mvn.w	r2, #2
 800ddea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	f003 0303 	and.w	r3, r3, #3
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f9b1 	bl	800e168 <HAL_TIM_IC_CaptureCallback>
 800de06:	e005      	b.n	800de14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f9a3 	bl	800e154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f9b4 	bl	800e17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	f003 0304 	and.w	r3, r3, #4
 800de24:	2b04      	cmp	r3, #4
 800de26:	d122      	bne.n	800de6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	f003 0304 	and.w	r3, r3, #4
 800de32:	2b04      	cmp	r3, #4
 800de34:	d11b      	bne.n	800de6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f06f 0204 	mvn.w	r2, #4
 800de3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2202      	movs	r2, #2
 800de44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de50:	2b00      	cmp	r3, #0
 800de52:	d003      	beq.n	800de5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 f987 	bl	800e168 <HAL_TIM_IC_CaptureCallback>
 800de5a:	e005      	b.n	800de68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f979 	bl	800e154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f98a 	bl	800e17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	f003 0308 	and.w	r3, r3, #8
 800de78:	2b08      	cmp	r3, #8
 800de7a:	d122      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f003 0308 	and.w	r3, r3, #8
 800de86:	2b08      	cmp	r3, #8
 800de88:	d11b      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f06f 0208 	mvn.w	r2, #8
 800de92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2204      	movs	r2, #4
 800de98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	69db      	ldr	r3, [r3, #28]
 800dea0:	f003 0303 	and.w	r3, r3, #3
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d003      	beq.n	800deb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f95d 	bl	800e168 <HAL_TIM_IC_CaptureCallback>
 800deae:	e005      	b.n	800debc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f94f 	bl	800e154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f960 	bl	800e17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	f003 0310 	and.w	r3, r3, #16
 800decc:	2b10      	cmp	r3, #16
 800dece:	d122      	bne.n	800df16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f003 0310 	and.w	r3, r3, #16
 800deda:	2b10      	cmp	r3, #16
 800dedc:	d11b      	bne.n	800df16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f06f 0210 	mvn.w	r2, #16
 800dee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2208      	movs	r2, #8
 800deec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f933 	bl	800e168 <HAL_TIM_IC_CaptureCallback>
 800df02:	e005      	b.n	800df10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f925 	bl	800e154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f936 	bl	800e17c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b01      	cmp	r3, #1
 800df22:	d10e      	bne.n	800df42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d107      	bne.n	800df42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f06f 0201 	mvn.w	r2, #1
 800df3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7f4 fd0d 	bl	800295c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df4c:	2b80      	cmp	r3, #128	; 0x80
 800df4e:	d10e      	bne.n	800df6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df5a:	2b80      	cmp	r3, #128	; 0x80
 800df5c:	d107      	bne.n	800df6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 fbf1 	bl	800e750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df78:	2b40      	cmp	r3, #64	; 0x40
 800df7a:	d10e      	bne.n	800df9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df86:	2b40      	cmp	r3, #64	; 0x40
 800df88:	d107      	bne.n	800df9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f8fb 	bl	800e190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	f003 0320 	and.w	r3, r3, #32
 800dfa4:	2b20      	cmp	r3, #32
 800dfa6:	d10e      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f003 0320 	and.w	r3, r3, #32
 800dfb2:	2b20      	cmp	r3, #32
 800dfb4:	d107      	bne.n	800dfc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f06f 0220 	mvn.w	r2, #32
 800dfbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fbbb 	bl	800e73c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfc6:	bf00      	nop
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d101      	bne.n	800dfee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dfea:	2302      	movs	r3, #2
 800dfec:	e0ae      	b.n	800e14c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b0c      	cmp	r3, #12
 800dffa:	f200 809f 	bhi.w	800e13c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800dffe:	a201      	add	r2, pc, #4	; (adr r2, 800e004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e004:	0800e039 	.word	0x0800e039
 800e008:	0800e13d 	.word	0x0800e13d
 800e00c:	0800e13d 	.word	0x0800e13d
 800e010:	0800e13d 	.word	0x0800e13d
 800e014:	0800e079 	.word	0x0800e079
 800e018:	0800e13d 	.word	0x0800e13d
 800e01c:	0800e13d 	.word	0x0800e13d
 800e020:	0800e13d 	.word	0x0800e13d
 800e024:	0800e0bb 	.word	0x0800e0bb
 800e028:	0800e13d 	.word	0x0800e13d
 800e02c:	0800e13d 	.word	0x0800e13d
 800e030:	0800e13d 	.word	0x0800e13d
 800e034:	0800e0fb 	.word	0x0800e0fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68b9      	ldr	r1, [r7, #8]
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f950 	bl	800e2e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 0208 	orr.w	r2, r2, #8
 800e052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f022 0204 	bic.w	r2, r2, #4
 800e062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6999      	ldr	r1, [r3, #24]
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	691a      	ldr	r2, [r3, #16]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	430a      	orrs	r2, r1
 800e074:	619a      	str	r2, [r3, #24]
      break;
 800e076:	e064      	b.n	800e142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 f9a0 	bl	800e3c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	699a      	ldr	r2, [r3, #24]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6999      	ldr	r1, [r3, #24]
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	021a      	lsls	r2, r3, #8
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	430a      	orrs	r2, r1
 800e0b6:	619a      	str	r2, [r3, #24]
      break;
 800e0b8:	e043      	b.n	800e142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68b9      	ldr	r1, [r7, #8]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 f9f5 	bl	800e4b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	69da      	ldr	r2, [r3, #28]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f042 0208 	orr.w	r2, r2, #8
 800e0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69da      	ldr	r2, [r3, #28]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f022 0204 	bic.w	r2, r2, #4
 800e0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	69d9      	ldr	r1, [r3, #28]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	691a      	ldr	r2, [r3, #16]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	61da      	str	r2, [r3, #28]
      break;
 800e0f8:	e023      	b.n	800e142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	4618      	mov	r0, r3
 800e102:	f000 fa49 	bl	800e598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	69da      	ldr	r2, [r3, #28]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	69da      	ldr	r2, [r3, #28]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	69d9      	ldr	r1, [r3, #28]
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	021a      	lsls	r2, r3, #8
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	430a      	orrs	r2, r1
 800e138:	61da      	str	r2, [r3, #28]
      break;
 800e13a:	e002      	b.n	800e142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	75fb      	strb	r3, [r7, #23]
      break;
 800e140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e198:	bf00      	nop
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a40      	ldr	r2, [pc, #256]	; (800e2b8 <TIM_Base_SetConfig+0x114>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d013      	beq.n	800e1e4 <TIM_Base_SetConfig+0x40>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1c2:	d00f      	beq.n	800e1e4 <TIM_Base_SetConfig+0x40>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4a3d      	ldr	r2, [pc, #244]	; (800e2bc <TIM_Base_SetConfig+0x118>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d00b      	beq.n	800e1e4 <TIM_Base_SetConfig+0x40>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a3c      	ldr	r2, [pc, #240]	; (800e2c0 <TIM_Base_SetConfig+0x11c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d007      	beq.n	800e1e4 <TIM_Base_SetConfig+0x40>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a3b      	ldr	r2, [pc, #236]	; (800e2c4 <TIM_Base_SetConfig+0x120>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d003      	beq.n	800e1e4 <TIM_Base_SetConfig+0x40>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a3a      	ldr	r2, [pc, #232]	; (800e2c8 <TIM_Base_SetConfig+0x124>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d108      	bne.n	800e1f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	68fa      	ldr	r2, [r7, #12]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a2f      	ldr	r2, [pc, #188]	; (800e2b8 <TIM_Base_SetConfig+0x114>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d02b      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e204:	d027      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a2c      	ldr	r2, [pc, #176]	; (800e2bc <TIM_Base_SetConfig+0x118>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d023      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a2b      	ldr	r2, [pc, #172]	; (800e2c0 <TIM_Base_SetConfig+0x11c>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d01f      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a2a      	ldr	r2, [pc, #168]	; (800e2c4 <TIM_Base_SetConfig+0x120>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d01b      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a29      	ldr	r2, [pc, #164]	; (800e2c8 <TIM_Base_SetConfig+0x124>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d017      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a28      	ldr	r2, [pc, #160]	; (800e2cc <TIM_Base_SetConfig+0x128>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d013      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a27      	ldr	r2, [pc, #156]	; (800e2d0 <TIM_Base_SetConfig+0x12c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d00f      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4a26      	ldr	r2, [pc, #152]	; (800e2d4 <TIM_Base_SetConfig+0x130>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d00b      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a25      	ldr	r2, [pc, #148]	; (800e2d8 <TIM_Base_SetConfig+0x134>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d007      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4a24      	ldr	r2, [pc, #144]	; (800e2dc <TIM_Base_SetConfig+0x138>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d003      	beq.n	800e256 <TIM_Base_SetConfig+0xb2>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4a23      	ldr	r2, [pc, #140]	; (800e2e0 <TIM_Base_SetConfig+0x13c>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d108      	bne.n	800e268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e25c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4313      	orrs	r3, r2
 800e266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	689a      	ldr	r2, [r3, #8]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a0a      	ldr	r2, [pc, #40]	; (800e2b8 <TIM_Base_SetConfig+0x114>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d003      	beq.n	800e29c <TIM_Base_SetConfig+0xf8>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a0c      	ldr	r2, [pc, #48]	; (800e2c8 <TIM_Base_SetConfig+0x124>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d103      	bne.n	800e2a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	691a      	ldr	r2, [r3, #16]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	615a      	str	r2, [r3, #20]
}
 800e2aa:	bf00      	nop
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	40010000 	.word	0x40010000
 800e2bc:	40000400 	.word	0x40000400
 800e2c0:	40000800 	.word	0x40000800
 800e2c4:	40000c00 	.word	0x40000c00
 800e2c8:	40010400 	.word	0x40010400
 800e2cc:	40014000 	.word	0x40014000
 800e2d0:	40014400 	.word	0x40014400
 800e2d4:	40014800 	.word	0x40014800
 800e2d8:	40001800 	.word	0x40001800
 800e2dc:	40001c00 	.word	0x40001c00
 800e2e0:	40002000 	.word	0x40002000

0800e2e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	f023 0201 	bic.w	r2, r3, #1
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a1b      	ldr	r3, [r3, #32]
 800e2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f023 0303 	bic.w	r3, r3, #3
 800e31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	4313      	orrs	r3, r2
 800e324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f023 0302 	bic.w	r3, r3, #2
 800e32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	4313      	orrs	r3, r2
 800e336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a20      	ldr	r2, [pc, #128]	; (800e3bc <TIM_OC1_SetConfig+0xd8>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d003      	beq.n	800e348 <TIM_OC1_SetConfig+0x64>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	4a1f      	ldr	r2, [pc, #124]	; (800e3c0 <TIM_OC1_SetConfig+0xdc>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d10c      	bne.n	800e362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f023 0308 	bic.w	r3, r3, #8
 800e34e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	4313      	orrs	r3, r2
 800e358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f023 0304 	bic.w	r3, r3, #4
 800e360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a15      	ldr	r2, [pc, #84]	; (800e3bc <TIM_OC1_SetConfig+0xd8>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d003      	beq.n	800e372 <TIM_OC1_SetConfig+0x8e>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4a14      	ldr	r2, [pc, #80]	; (800e3c0 <TIM_OC1_SetConfig+0xdc>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d111      	bne.n	800e396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	4313      	orrs	r3, r2
 800e38a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4313      	orrs	r3, r2
 800e394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	693a      	ldr	r2, [r7, #16]
 800e39a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	685a      	ldr	r2, [r3, #4]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	697a      	ldr	r2, [r7, #20]
 800e3ae:	621a      	str	r2, [r3, #32]
}
 800e3b0:	bf00      	nop
 800e3b2:	371c      	adds	r7, #28
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	40010000 	.word	0x40010000
 800e3c0:	40010400 	.word	0x40010400

0800e3c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	f023 0210 	bic.w	r2, r3, #16
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	021b      	lsls	r3, r3, #8
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f023 0320 	bic.w	r3, r3, #32
 800e40e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	4313      	orrs	r3, r2
 800e41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a22      	ldr	r2, [pc, #136]	; (800e4a8 <TIM_OC2_SetConfig+0xe4>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d003      	beq.n	800e42c <TIM_OC2_SetConfig+0x68>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4a21      	ldr	r2, [pc, #132]	; (800e4ac <TIM_OC2_SetConfig+0xe8>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d10d      	bne.n	800e448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a17      	ldr	r2, [pc, #92]	; (800e4a8 <TIM_OC2_SetConfig+0xe4>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d003      	beq.n	800e458 <TIM_OC2_SetConfig+0x94>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4a16      	ldr	r2, [pc, #88]	; (800e4ac <TIM_OC2_SetConfig+0xe8>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d113      	bne.n	800e480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e45e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	695b      	ldr	r3, [r3, #20]
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	693a      	ldr	r2, [r7, #16]
 800e470:	4313      	orrs	r3, r2
 800e472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	693a      	ldr	r2, [r7, #16]
 800e484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	697a      	ldr	r2, [r7, #20]
 800e498:	621a      	str	r2, [r3, #32]
}
 800e49a:	bf00      	nop
 800e49c:	371c      	adds	r7, #28
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	40010000 	.word	0x40010000
 800e4ac:	40010400 	.word	0x40010400

0800e4b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a1b      	ldr	r3, [r3, #32]
 800e4ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4313      	orrs	r3, r2
 800e504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a21      	ldr	r2, [pc, #132]	; (800e590 <TIM_OC3_SetConfig+0xe0>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d003      	beq.n	800e516 <TIM_OC3_SetConfig+0x66>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4a20      	ldr	r2, [pc, #128]	; (800e594 <TIM_OC3_SetConfig+0xe4>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d10d      	bne.n	800e532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e51c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	021b      	lsls	r3, r3, #8
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	4313      	orrs	r3, r2
 800e528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4a16      	ldr	r2, [pc, #88]	; (800e590 <TIM_OC3_SetConfig+0xe0>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d003      	beq.n	800e542 <TIM_OC3_SetConfig+0x92>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a15      	ldr	r2, [pc, #84]	; (800e594 <TIM_OC3_SetConfig+0xe4>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d113      	bne.n	800e56a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	011b      	lsls	r3, r3, #4
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	011b      	lsls	r3, r3, #4
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	4313      	orrs	r3, r2
 800e568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	621a      	str	r2, [r3, #32]
}
 800e584:	bf00      	nop
 800e586:	371c      	adds	r7, #28
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	40010000 	.word	0x40010000
 800e594:	40010400 	.word	0x40010400

0800e598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e598:	b480      	push	{r7}
 800e59a:	b087      	sub	sp, #28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a1b      	ldr	r3, [r3, #32]
 800e5a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a1b      	ldr	r3, [r3, #32]
 800e5b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	69db      	ldr	r3, [r3, #28]
 800e5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	021b      	lsls	r3, r3, #8
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	031b      	lsls	r3, r3, #12
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a12      	ldr	r2, [pc, #72]	; (800e63c <TIM_OC4_SetConfig+0xa4>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d003      	beq.n	800e600 <TIM_OC4_SetConfig+0x68>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a11      	ldr	r2, [pc, #68]	; (800e640 <TIM_OC4_SetConfig+0xa8>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d109      	bne.n	800e614 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	695b      	ldr	r3, [r3, #20]
 800e60c:	019b      	lsls	r3, r3, #6
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	4313      	orrs	r3, r2
 800e612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	697a      	ldr	r2, [r7, #20]
 800e618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	685a      	ldr	r2, [r3, #4]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	621a      	str	r2, [r3, #32]
}
 800e62e:	bf00      	nop
 800e630:	371c      	adds	r7, #28
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	40010000 	.word	0x40010000
 800e640:	40010400 	.word	0x40010400

0800e644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e654:	2b01      	cmp	r3, #1
 800e656:	d101      	bne.n	800e65c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e658:	2302      	movs	r3, #2
 800e65a:	e05a      	b.n	800e712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a21      	ldr	r2, [pc, #132]	; (800e720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d022      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6a8:	d01d      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a1d      	ldr	r2, [pc, #116]	; (800e724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d018      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a1b      	ldr	r2, [pc, #108]	; (800e728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d013      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a1a      	ldr	r2, [pc, #104]	; (800e72c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d00e      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a18      	ldr	r2, [pc, #96]	; (800e730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d009      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a17      	ldr	r2, [pc, #92]	; (800e734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d004      	beq.n	800e6e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a15      	ldr	r2, [pc, #84]	; (800e738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d10c      	bne.n	800e700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e710:	2300      	movs	r3, #0
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	40010000 	.word	0x40010000
 800e724:	40000400 	.word	0x40000400
 800e728:	40000800 	.word	0x40000800
 800e72c:	40000c00 	.word	0x40000c00
 800e730:	40010400 	.word	0x40010400
 800e734:	40014000 	.word	0x40014000
 800e738:	40001800 	.word	0x40001800

0800e73c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	e03f      	b.n	800e7f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f4 fb86 	bl	8002e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2224      	movs	r2, #36	; 0x24
 800e794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68da      	ldr	r2, [r3, #12]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f9cb 	bl	800eb44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	691a      	ldr	r2, [r3, #16]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	695a      	ldr	r2, [r3, #20]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2220      	movs	r2, #32
 800e7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2220      	movs	r2, #32
 800e7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b08a      	sub	sp, #40	; 0x28
 800e802:	af02      	add	r7, sp, #8
 800e804:	60f8      	str	r0, [r7, #12]
 800e806:	60b9      	str	r1, [r7, #8]
 800e808:	603b      	str	r3, [r7, #0]
 800e80a:	4613      	mov	r3, r2
 800e80c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e80e:	2300      	movs	r3, #0
 800e810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b20      	cmp	r3, #32
 800e81c:	d17c      	bne.n	800e918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d002      	beq.n	800e82a <HAL_UART_Transmit+0x2c>
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d101      	bne.n	800e82e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e075      	b.n	800e91a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e834:	2b01      	cmp	r3, #1
 800e836:	d101      	bne.n	800e83c <HAL_UART_Transmit+0x3e>
 800e838:	2302      	movs	r3, #2
 800e83a:	e06e      	b.n	800e91a <HAL_UART_Transmit+0x11c>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2221      	movs	r2, #33	; 0x21
 800e84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e852:	f7f9 fdf1 	bl	8008438 <HAL_GetTick>
 800e856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	88fa      	ldrh	r2, [r7, #6]
 800e85c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	88fa      	ldrh	r2, [r7, #6]
 800e862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e86c:	d108      	bne.n	800e880 <HAL_UART_Transmit+0x82>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d104      	bne.n	800e880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	61bb      	str	r3, [r7, #24]
 800e87e:	e003      	b.n	800e888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e884:	2300      	movs	r3, #0
 800e886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e890:	e02a      	b.n	800e8e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2200      	movs	r2, #0
 800e89a:	2180      	movs	r1, #128	; 0x80
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f000 f8e2 	bl	800ea66 <UART_WaitOnFlagUntilTimeout>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e036      	b.n	800e91a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10b      	bne.n	800e8ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	3302      	adds	r3, #2
 800e8c6:	61bb      	str	r3, [r7, #24]
 800e8c8:	e007      	b.n	800e8da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	781a      	ldrb	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1cf      	bne.n	800e892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2140      	movs	r1, #64	; 0x40
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f000 f8b2 	bl	800ea66 <UART_WaitOnFlagUntilTimeout>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e006      	b.n	800e91a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2220      	movs	r2, #32
 800e910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	e000      	b.n	800e91a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e918:	2302      	movs	r3, #2
  }
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b08a      	sub	sp, #40	; 0x28
 800e926:	af02      	add	r7, sp, #8
 800e928:	60f8      	str	r0, [r7, #12]
 800e92a:	60b9      	str	r1, [r7, #8]
 800e92c:	603b      	str	r3, [r7, #0]
 800e92e:	4613      	mov	r3, r2
 800e930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b20      	cmp	r3, #32
 800e940:	f040 808c 	bne.w	800ea5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <HAL_UART_Receive+0x2e>
 800e94a:	88fb      	ldrh	r3, [r7, #6]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e084      	b.n	800ea5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d101      	bne.n	800e962 <HAL_UART_Receive+0x40>
 800e95e:	2302      	movs	r3, #2
 800e960:	e07d      	b.n	800ea5e <HAL_UART_Receive+0x13c>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2222      	movs	r2, #34	; 0x22
 800e974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e97e:	f7f9 fd5b 	bl	8008438 <HAL_GetTick>
 800e982:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	88fa      	ldrh	r2, [r7, #6]
 800e988:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	88fa      	ldrh	r2, [r7, #6]
 800e98e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e998:	d108      	bne.n	800e9ac <HAL_UART_Receive+0x8a>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	691b      	ldr	r3, [r3, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d104      	bne.n	800e9ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	61bb      	str	r3, [r7, #24]
 800e9aa:	e003      	b.n	800e9b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e9bc:	e043      	b.n	800ea46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	2120      	movs	r1, #32
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 f84c 	bl	800ea66 <UART_WaitOnFlagUntilTimeout>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	e042      	b.n	800ea5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10c      	bne.n	800e9f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	3302      	adds	r3, #2
 800e9f4:	61bb      	str	r3, [r7, #24]
 800e9f6:	e01f      	b.n	800ea38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea00:	d007      	beq.n	800ea12 <HAL_UART_Receive+0xf0>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10a      	bne.n	800ea20 <HAL_UART_Receive+0xfe>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	701a      	strb	r2, [r3, #0]
 800ea1e:	e008      	b.n	800ea32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	3301      	adds	r3, #1
 800ea36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1b6      	bne.n	800e9be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2220      	movs	r2, #32
 800ea54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e000      	b.n	800ea5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800ea5c:	2302      	movs	r3, #2
  }
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3720      	adds	r7, #32
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b090      	sub	sp, #64	; 0x40
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	603b      	str	r3, [r7, #0]
 800ea72:	4613      	mov	r3, r2
 800ea74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea76:	e050      	b.n	800eb1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7e:	d04c      	beq.n	800eb1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ea80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d007      	beq.n	800ea96 <UART_WaitOnFlagUntilTimeout+0x30>
 800ea86:	f7f9 fcd7 	bl	8008438 <HAL_GetTick>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d241      	bcs.n	800eb1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	330c      	adds	r3, #12
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	e853 3f00 	ldrex	r3, [r3]
 800eaa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eaac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	330c      	adds	r3, #12
 800eab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eab6:	637a      	str	r2, [r7, #52]	; 0x34
 800eab8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eabc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e5      	bne.n	800ea96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	3314      	adds	r3, #20
 800ead0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	613b      	str	r3, [r7, #16]
   return(result);
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	f023 0301 	bic.w	r3, r3, #1
 800eae0:	63bb      	str	r3, [r7, #56]	; 0x38
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3314      	adds	r3, #20
 800eae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaea:	623a      	str	r2, [r7, #32]
 800eaec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaee:	69f9      	ldr	r1, [r7, #28]
 800eaf0:	6a3a      	ldr	r2, [r7, #32]
 800eaf2:	e841 2300 	strex	r3, r2, [r1]
 800eaf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1e5      	bne.n	800eaca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2220      	movs	r2, #32
 800eb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800eb16:	2303      	movs	r3, #3
 800eb18:	e00f      	b.n	800eb3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	4013      	ands	r3, r2
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	bf0c      	ite	eq
 800eb2a:	2301      	moveq	r3, #1
 800eb2c:	2300      	movne	r3, #0
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	461a      	mov	r2, r3
 800eb32:	79fb      	ldrb	r3, [r7, #7]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d09f      	beq.n	800ea78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3740      	adds	r7, #64	; 0x40
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	b09f      	sub	sp, #124	; 0x7c
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	691b      	ldr	r3, [r3, #16]
 800eb54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800eb58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb5a:	68d9      	ldr	r1, [r3, #12]
 800eb5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	ea40 0301 	orr.w	r3, r0, r1
 800eb64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eb66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb68:	689a      	ldr	r2, [r3, #8]
 800eb6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	431a      	orrs	r2, r3
 800eb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb78:	69db      	ldr	r3, [r3, #28]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800eb7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800eb88:	f021 010c 	bic.w	r1, r1, #12
 800eb8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb92:	430b      	orrs	r3, r1
 800eb94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eb96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800eba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba2:	6999      	ldr	r1, [r3, #24]
 800eba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	ea40 0301 	orr.w	r3, r0, r1
 800ebac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ebae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	4bc5      	ldr	r3, [pc, #788]	; (800eec8 <UART_SetConfig+0x384>)
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d004      	beq.n	800ebc2 <UART_SetConfig+0x7e>
 800ebb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4bc3      	ldr	r3, [pc, #780]	; (800eecc <UART_SetConfig+0x388>)
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d103      	bne.n	800ebca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ebc2:	f7fd fa65 	bl	800c090 <HAL_RCC_GetPCLK2Freq>
 800ebc6:	6778      	str	r0, [r7, #116]	; 0x74
 800ebc8:	e002      	b.n	800ebd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ebca:	f7fd fa4d 	bl	800c068 <HAL_RCC_GetPCLK1Freq>
 800ebce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd2:	69db      	ldr	r3, [r3, #28]
 800ebd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebd8:	f040 80b6 	bne.w	800ed48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ebdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebde:	461c      	mov	r4, r3
 800ebe0:	f04f 0500 	mov.w	r5, #0
 800ebe4:	4622      	mov	r2, r4
 800ebe6:	462b      	mov	r3, r5
 800ebe8:	1891      	adds	r1, r2, r2
 800ebea:	6439      	str	r1, [r7, #64]	; 0x40
 800ebec:	415b      	adcs	r3, r3
 800ebee:	647b      	str	r3, [r7, #68]	; 0x44
 800ebf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ebf4:	1912      	adds	r2, r2, r4
 800ebf6:	eb45 0303 	adc.w	r3, r5, r3
 800ebfa:	f04f 0000 	mov.w	r0, #0
 800ebfe:	f04f 0100 	mov.w	r1, #0
 800ec02:	00d9      	lsls	r1, r3, #3
 800ec04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ec08:	00d0      	lsls	r0, r2, #3
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	1911      	adds	r1, r2, r4
 800ec10:	6639      	str	r1, [r7, #96]	; 0x60
 800ec12:	416b      	adcs	r3, r5
 800ec14:	667b      	str	r3, [r7, #100]	; 0x64
 800ec16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f04f 0300 	mov.w	r3, #0
 800ec20:	1891      	adds	r1, r2, r2
 800ec22:	63b9      	str	r1, [r7, #56]	; 0x38
 800ec24:	415b      	adcs	r3, r3
 800ec26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ec2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ec30:	f7f2 f83a 	bl	8000ca8 <__aeabi_uldivmod>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4ba5      	ldr	r3, [pc, #660]	; (800eed0 <UART_SetConfig+0x38c>)
 800ec3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ec3e:	095b      	lsrs	r3, r3, #5
 800ec40:	011e      	lsls	r6, r3, #4
 800ec42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec44:	461c      	mov	r4, r3
 800ec46:	f04f 0500 	mov.w	r5, #0
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	462b      	mov	r3, r5
 800ec4e:	1891      	adds	r1, r2, r2
 800ec50:	6339      	str	r1, [r7, #48]	; 0x30
 800ec52:	415b      	adcs	r3, r3
 800ec54:	637b      	str	r3, [r7, #52]	; 0x34
 800ec56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ec5a:	1912      	adds	r2, r2, r4
 800ec5c:	eb45 0303 	adc.w	r3, r5, r3
 800ec60:	f04f 0000 	mov.w	r0, #0
 800ec64:	f04f 0100 	mov.w	r1, #0
 800ec68:	00d9      	lsls	r1, r3, #3
 800ec6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ec6e:	00d0      	lsls	r0, r2, #3
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	1911      	adds	r1, r2, r4
 800ec76:	65b9      	str	r1, [r7, #88]	; 0x58
 800ec78:	416b      	adcs	r3, r5
 800ec7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	461a      	mov	r2, r3
 800ec82:	f04f 0300 	mov.w	r3, #0
 800ec86:	1891      	adds	r1, r2, r2
 800ec88:	62b9      	str	r1, [r7, #40]	; 0x28
 800ec8a:	415b      	adcs	r3, r3
 800ec8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ec92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ec96:	f7f2 f807 	bl	8000ca8 <__aeabi_uldivmod>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4b8c      	ldr	r3, [pc, #560]	; (800eed0 <UART_SetConfig+0x38c>)
 800eca0:	fba3 1302 	umull	r1, r3, r3, r2
 800eca4:	095b      	lsrs	r3, r3, #5
 800eca6:	2164      	movs	r1, #100	; 0x64
 800eca8:	fb01 f303 	mul.w	r3, r1, r3
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	00db      	lsls	r3, r3, #3
 800ecb0:	3332      	adds	r3, #50	; 0x32
 800ecb2:	4a87      	ldr	r2, [pc, #540]	; (800eed0 <UART_SetConfig+0x38c>)
 800ecb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ecb8:	095b      	lsrs	r3, r3, #5
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ecc0:	441e      	add	r6, r3
 800ecc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f04f 0100 	mov.w	r1, #0
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	1894      	adds	r4, r2, r2
 800ecd0:	623c      	str	r4, [r7, #32]
 800ecd2:	415b      	adcs	r3, r3
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ecda:	1812      	adds	r2, r2, r0
 800ecdc:	eb41 0303 	adc.w	r3, r1, r3
 800ece0:	f04f 0400 	mov.w	r4, #0
 800ece4:	f04f 0500 	mov.w	r5, #0
 800ece8:	00dd      	lsls	r5, r3, #3
 800ecea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ecee:	00d4      	lsls	r4, r2, #3
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	462b      	mov	r3, r5
 800ecf4:	1814      	adds	r4, r2, r0
 800ecf6:	653c      	str	r4, [r7, #80]	; 0x50
 800ecf8:	414b      	adcs	r3, r1
 800ecfa:	657b      	str	r3, [r7, #84]	; 0x54
 800ecfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	461a      	mov	r2, r3
 800ed02:	f04f 0300 	mov.w	r3, #0
 800ed06:	1891      	adds	r1, r2, r2
 800ed08:	61b9      	str	r1, [r7, #24]
 800ed0a:	415b      	adcs	r3, r3
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ed16:	f7f1 ffc7 	bl	8000ca8 <__aeabi_uldivmod>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4b6c      	ldr	r3, [pc, #432]	; (800eed0 <UART_SetConfig+0x38c>)
 800ed20:	fba3 1302 	umull	r1, r3, r3, r2
 800ed24:	095b      	lsrs	r3, r3, #5
 800ed26:	2164      	movs	r1, #100	; 0x64
 800ed28:	fb01 f303 	mul.w	r3, r1, r3
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	3332      	adds	r3, #50	; 0x32
 800ed32:	4a67      	ldr	r2, [pc, #412]	; (800eed0 <UART_SetConfig+0x38c>)
 800ed34:	fba2 2303 	umull	r2, r3, r2, r3
 800ed38:	095b      	lsrs	r3, r3, #5
 800ed3a:	f003 0207 	and.w	r2, r3, #7
 800ed3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4432      	add	r2, r6
 800ed44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ed46:	e0b9      	b.n	800eebc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ed48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed4a:	461c      	mov	r4, r3
 800ed4c:	f04f 0500 	mov.w	r5, #0
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	1891      	adds	r1, r2, r2
 800ed56:	6139      	str	r1, [r7, #16]
 800ed58:	415b      	adcs	r3, r3
 800ed5a:	617b      	str	r3, [r7, #20]
 800ed5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed60:	1912      	adds	r2, r2, r4
 800ed62:	eb45 0303 	adc.w	r3, r5, r3
 800ed66:	f04f 0000 	mov.w	r0, #0
 800ed6a:	f04f 0100 	mov.w	r1, #0
 800ed6e:	00d9      	lsls	r1, r3, #3
 800ed70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ed74:	00d0      	lsls	r0, r2, #3
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	eb12 0804 	adds.w	r8, r2, r4
 800ed7e:	eb43 0905 	adc.w	r9, r3, r5
 800ed82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f04f 0100 	mov.w	r1, #0
 800ed8c:	f04f 0200 	mov.w	r2, #0
 800ed90:	f04f 0300 	mov.w	r3, #0
 800ed94:	008b      	lsls	r3, r1, #2
 800ed96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ed9a:	0082      	lsls	r2, r0, #2
 800ed9c:	4640      	mov	r0, r8
 800ed9e:	4649      	mov	r1, r9
 800eda0:	f7f1 ff82 	bl	8000ca8 <__aeabi_uldivmod>
 800eda4:	4602      	mov	r2, r0
 800eda6:	460b      	mov	r3, r1
 800eda8:	4b49      	ldr	r3, [pc, #292]	; (800eed0 <UART_SetConfig+0x38c>)
 800edaa:	fba3 2302 	umull	r2, r3, r3, r2
 800edae:	095b      	lsrs	r3, r3, #5
 800edb0:	011e      	lsls	r6, r3, #4
 800edb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edb4:	4618      	mov	r0, r3
 800edb6:	f04f 0100 	mov.w	r1, #0
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	1894      	adds	r4, r2, r2
 800edc0:	60bc      	str	r4, [r7, #8]
 800edc2:	415b      	adcs	r3, r3
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edca:	1812      	adds	r2, r2, r0
 800edcc:	eb41 0303 	adc.w	r3, r1, r3
 800edd0:	f04f 0400 	mov.w	r4, #0
 800edd4:	f04f 0500 	mov.w	r5, #0
 800edd8:	00dd      	lsls	r5, r3, #3
 800edda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800edde:	00d4      	lsls	r4, r2, #3
 800ede0:	4622      	mov	r2, r4
 800ede2:	462b      	mov	r3, r5
 800ede4:	1814      	adds	r4, r2, r0
 800ede6:	64bc      	str	r4, [r7, #72]	; 0x48
 800ede8:	414b      	adcs	r3, r1
 800edea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f04f 0100 	mov.w	r1, #0
 800edf6:	f04f 0200 	mov.w	r2, #0
 800edfa:	f04f 0300 	mov.w	r3, #0
 800edfe:	008b      	lsls	r3, r1, #2
 800ee00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ee04:	0082      	lsls	r2, r0, #2
 800ee06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ee0a:	f7f1 ff4d 	bl	8000ca8 <__aeabi_uldivmod>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4b2f      	ldr	r3, [pc, #188]	; (800eed0 <UART_SetConfig+0x38c>)
 800ee14:	fba3 1302 	umull	r1, r3, r3, r2
 800ee18:	095b      	lsrs	r3, r3, #5
 800ee1a:	2164      	movs	r1, #100	; 0x64
 800ee1c:	fb01 f303 	mul.w	r3, r1, r3
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	3332      	adds	r3, #50	; 0x32
 800ee26:	4a2a      	ldr	r2, [pc, #168]	; (800eed0 <UART_SetConfig+0x38c>)
 800ee28:	fba2 2303 	umull	r2, r3, r2, r3
 800ee2c:	095b      	lsrs	r3, r3, #5
 800ee2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee32:	441e      	add	r6, r3
 800ee34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee36:	4618      	mov	r0, r3
 800ee38:	f04f 0100 	mov.w	r1, #0
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	1894      	adds	r4, r2, r2
 800ee42:	603c      	str	r4, [r7, #0]
 800ee44:	415b      	adcs	r3, r3
 800ee46:	607b      	str	r3, [r7, #4]
 800ee48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee4c:	1812      	adds	r2, r2, r0
 800ee4e:	eb41 0303 	adc.w	r3, r1, r3
 800ee52:	f04f 0400 	mov.w	r4, #0
 800ee56:	f04f 0500 	mov.w	r5, #0
 800ee5a:	00dd      	lsls	r5, r3, #3
 800ee5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ee60:	00d4      	lsls	r4, r2, #3
 800ee62:	4622      	mov	r2, r4
 800ee64:	462b      	mov	r3, r5
 800ee66:	eb12 0a00 	adds.w	sl, r2, r0
 800ee6a:	eb43 0b01 	adc.w	fp, r3, r1
 800ee6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f04f 0100 	mov.w	r1, #0
 800ee78:	f04f 0200 	mov.w	r2, #0
 800ee7c:	f04f 0300 	mov.w	r3, #0
 800ee80:	008b      	lsls	r3, r1, #2
 800ee82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ee86:	0082      	lsls	r2, r0, #2
 800ee88:	4650      	mov	r0, sl
 800ee8a:	4659      	mov	r1, fp
 800ee8c:	f7f1 ff0c 	bl	8000ca8 <__aeabi_uldivmod>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4b0e      	ldr	r3, [pc, #56]	; (800eed0 <UART_SetConfig+0x38c>)
 800ee96:	fba3 1302 	umull	r1, r3, r3, r2
 800ee9a:	095b      	lsrs	r3, r3, #5
 800ee9c:	2164      	movs	r1, #100	; 0x64
 800ee9e:	fb01 f303 	mul.w	r3, r1, r3
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	011b      	lsls	r3, r3, #4
 800eea6:	3332      	adds	r3, #50	; 0x32
 800eea8:	4a09      	ldr	r2, [pc, #36]	; (800eed0 <UART_SetConfig+0x38c>)
 800eeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	f003 020f 	and.w	r2, r3, #15
 800eeb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4432      	add	r2, r6
 800eeba:	609a      	str	r2, [r3, #8]
}
 800eebc:	bf00      	nop
 800eebe:	377c      	adds	r7, #124	; 0x7c
 800eec0:	46bd      	mov	sp, r7
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	bf00      	nop
 800eec8:	40011000 	.word	0x40011000
 800eecc:	40011400 	.word	0x40011400
 800eed0:	51eb851f 	.word	0x51eb851f

0800eed4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eed4:	b084      	sub	sp, #16
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	f107 001c 	add.w	r0, r7, #28
 800eee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d122      	bne.n	800ef32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ef00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ef14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d105      	bne.n	800ef26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f001 fb1c 	bl	8010564 <USB_CoreReset>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	73fb      	strb	r3, [r7, #15]
 800ef30:	e01a      	b.n	800ef68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f001 fb10 	bl	8010564 <USB_CoreReset>
 800ef44:	4603      	mov	r3, r0
 800ef46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ef48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d106      	bne.n	800ef5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	639a      	str	r2, [r3, #56]	; 0x38
 800ef5a:	e005      	b.n	800ef68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d10b      	bne.n	800ef86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	f043 0206 	orr.w	r2, r3, #6
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	f043 0220 	orr.w	r2, r3, #32
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ef86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef92:	b004      	add	sp, #16
 800ef94:	4770      	bx	lr
	...

0800ef98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b087      	sub	sp, #28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	4613      	mov	r3, r2
 800efa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d165      	bne.n	800f078 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	4a41      	ldr	r2, [pc, #260]	; (800f0b4 <USB_SetTurnaroundTime+0x11c>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d906      	bls.n	800efc2 <USB_SetTurnaroundTime+0x2a>
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	4a40      	ldr	r2, [pc, #256]	; (800f0b8 <USB_SetTurnaroundTime+0x120>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d202      	bcs.n	800efc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800efbc:	230f      	movs	r3, #15
 800efbe:	617b      	str	r3, [r7, #20]
 800efc0:	e062      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	4a3c      	ldr	r2, [pc, #240]	; (800f0b8 <USB_SetTurnaroundTime+0x120>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d306      	bcc.n	800efd8 <USB_SetTurnaroundTime+0x40>
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	4a3b      	ldr	r2, [pc, #236]	; (800f0bc <USB_SetTurnaroundTime+0x124>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d202      	bcs.n	800efd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800efd2:	230e      	movs	r3, #14
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	e057      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	4a38      	ldr	r2, [pc, #224]	; (800f0bc <USB_SetTurnaroundTime+0x124>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d306      	bcc.n	800efee <USB_SetTurnaroundTime+0x56>
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	4a37      	ldr	r2, [pc, #220]	; (800f0c0 <USB_SetTurnaroundTime+0x128>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d202      	bcs.n	800efee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800efe8:	230d      	movs	r3, #13
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e04c      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	4a33      	ldr	r2, [pc, #204]	; (800f0c0 <USB_SetTurnaroundTime+0x128>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d306      	bcc.n	800f004 <USB_SetTurnaroundTime+0x6c>
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	4a32      	ldr	r2, [pc, #200]	; (800f0c4 <USB_SetTurnaroundTime+0x12c>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d802      	bhi.n	800f004 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800effe:	230c      	movs	r3, #12
 800f000:	617b      	str	r3, [r7, #20]
 800f002:	e041      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	4a2f      	ldr	r2, [pc, #188]	; (800f0c4 <USB_SetTurnaroundTime+0x12c>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d906      	bls.n	800f01a <USB_SetTurnaroundTime+0x82>
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	4a2e      	ldr	r2, [pc, #184]	; (800f0c8 <USB_SetTurnaroundTime+0x130>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d802      	bhi.n	800f01a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f014:	230b      	movs	r3, #11
 800f016:	617b      	str	r3, [r7, #20]
 800f018:	e036      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	4a2a      	ldr	r2, [pc, #168]	; (800f0c8 <USB_SetTurnaroundTime+0x130>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d906      	bls.n	800f030 <USB_SetTurnaroundTime+0x98>
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	4a29      	ldr	r2, [pc, #164]	; (800f0cc <USB_SetTurnaroundTime+0x134>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d802      	bhi.n	800f030 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f02a:	230a      	movs	r3, #10
 800f02c:	617b      	str	r3, [r7, #20]
 800f02e:	e02b      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	4a26      	ldr	r2, [pc, #152]	; (800f0cc <USB_SetTurnaroundTime+0x134>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d906      	bls.n	800f046 <USB_SetTurnaroundTime+0xae>
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	4a25      	ldr	r2, [pc, #148]	; (800f0d0 <USB_SetTurnaroundTime+0x138>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d202      	bcs.n	800f046 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f040:	2309      	movs	r3, #9
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	e020      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	4a21      	ldr	r2, [pc, #132]	; (800f0d0 <USB_SetTurnaroundTime+0x138>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d306      	bcc.n	800f05c <USB_SetTurnaroundTime+0xc4>
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	4a20      	ldr	r2, [pc, #128]	; (800f0d4 <USB_SetTurnaroundTime+0x13c>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d802      	bhi.n	800f05c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f056:	2308      	movs	r3, #8
 800f058:	617b      	str	r3, [r7, #20]
 800f05a:	e015      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	4a1d      	ldr	r2, [pc, #116]	; (800f0d4 <USB_SetTurnaroundTime+0x13c>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d906      	bls.n	800f072 <USB_SetTurnaroundTime+0xda>
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	4a1c      	ldr	r2, [pc, #112]	; (800f0d8 <USB_SetTurnaroundTime+0x140>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d202      	bcs.n	800f072 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f06c:	2307      	movs	r3, #7
 800f06e:	617b      	str	r3, [r7, #20]
 800f070:	e00a      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f072:	2306      	movs	r3, #6
 800f074:	617b      	str	r3, [r7, #20]
 800f076:	e007      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f07e:	2309      	movs	r3, #9
 800f080:	617b      	str	r3, [r7, #20]
 800f082:	e001      	b.n	800f088 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f084:	2309      	movs	r3, #9
 800f086:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	029b      	lsls	r3, r3, #10
 800f09c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f0a0:	431a      	orrs	r2, r3
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	371c      	adds	r7, #28
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	00d8acbf 	.word	0x00d8acbf
 800f0b8:	00e4e1c0 	.word	0x00e4e1c0
 800f0bc:	00f42400 	.word	0x00f42400
 800f0c0:	01067380 	.word	0x01067380
 800f0c4:	011a499f 	.word	0x011a499f
 800f0c8:	01312cff 	.word	0x01312cff
 800f0cc:	014ca43f 	.word	0x014ca43f
 800f0d0:	016e3600 	.word	0x016e3600
 800f0d4:	01a6ab1f 	.word	0x01a6ab1f
 800f0d8:	01e84800 	.word	0x01e84800

0800f0dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	f043 0201 	orr.w	r2, r3, #1
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	f023 0201 	bic.w	r2, r3, #1
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f112:	2300      	movs	r3, #0
}
 800f114:	4618      	mov	r0, r3
 800f116:	370c      	adds	r7, #12
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr

0800f120 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f13c:	78fb      	ldrb	r3, [r7, #3]
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d115      	bne.n	800f16e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f14e:	2001      	movs	r0, #1
 800f150:	f7f9 f97e 	bl	8008450 <HAL_Delay>
      ms++;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	3301      	adds	r3, #1
 800f158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f001 f972 	bl	8010444 <USB_GetMode>
 800f160:	4603      	mov	r3, r0
 800f162:	2b01      	cmp	r3, #1
 800f164:	d01e      	beq.n	800f1a4 <USB_SetCurrentMode+0x84>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b31      	cmp	r3, #49	; 0x31
 800f16a:	d9f0      	bls.n	800f14e <USB_SetCurrentMode+0x2e>
 800f16c:	e01a      	b.n	800f1a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f16e:	78fb      	ldrb	r3, [r7, #3]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d115      	bne.n	800f1a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f180:	2001      	movs	r0, #1
 800f182:	f7f9 f965 	bl	8008450 <HAL_Delay>
      ms++;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	3301      	adds	r3, #1
 800f18a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f001 f959 	bl	8010444 <USB_GetMode>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <USB_SetCurrentMode+0x84>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b31      	cmp	r3, #49	; 0x31
 800f19c:	d9f0      	bls.n	800f180 <USB_SetCurrentMode+0x60>
 800f19e:	e001      	b.n	800f1a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e005      	b.n	800f1b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b32      	cmp	r3, #50	; 0x32
 800f1a8:	d101      	bne.n	800f1ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e000      	b.n	800f1b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b086      	sub	sp, #24
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f1c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	613b      	str	r3, [r7, #16]
 800f1d6:	e009      	b.n	800f1ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	3340      	adds	r3, #64	; 0x40
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	4413      	add	r3, r2
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	613b      	str	r3, [r7, #16]
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b0e      	cmp	r3, #14
 800f1f0:	d9f2      	bls.n	800f1d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d11c      	bne.n	800f232 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f206:	f043 0302 	orr.w	r3, r3, #2
 800f20a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f228:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	639a      	str	r2, [r3, #56]	; 0x38
 800f230:	e00b      	b.n	800f24a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f236:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f242:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f250:	461a      	mov	r2, r3
 800f252:	2300      	movs	r3, #0
 800f254:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f25c:	4619      	mov	r1, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f264:	461a      	mov	r2, r3
 800f266:	680b      	ldr	r3, [r1, #0]
 800f268:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d10c      	bne.n	800f28a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	2b00      	cmp	r3, #0
 800f274:	d104      	bne.n	800f280 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f276:	2100      	movs	r1, #0
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f945 	bl	800f508 <USB_SetDevSpeed>
 800f27e:	e008      	b.n	800f292 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f280:	2101      	movs	r1, #1
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 f940 	bl	800f508 <USB_SetDevSpeed>
 800f288:	e003      	b.n	800f292 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f28a:	2103      	movs	r1, #3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f93b 	bl	800f508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f292:	2110      	movs	r1, #16
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f8f3 	bl	800f480 <USB_FlushTxFifo>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f90f 	bl	800f4c8 <USB_FlushRxFifo>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	2300      	movs	r3, #0
 800f2be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2d8:	2300      	movs	r3, #0
 800f2da:	613b      	str	r3, [r7, #16]
 800f2dc:	e043      	b.n	800f366 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	015a      	lsls	r2, r3, #5
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2f4:	d118      	bne.n	800f328 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10a      	bne.n	800f312 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	461a      	mov	r2, r3
 800f30a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f30e:	6013      	str	r3, [r2, #0]
 800f310:	e013      	b.n	800f33a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	015a      	lsls	r2, r3, #5
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	4413      	add	r3, r2
 800f31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f31e:	461a      	mov	r2, r3
 800f320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f324:	6013      	str	r3, [r2, #0]
 800f326:	e008      	b.n	800f33a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f334:	461a      	mov	r2, r3
 800f336:	2300      	movs	r3, #0
 800f338:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	015a      	lsls	r2, r3, #5
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	4413      	add	r3, r2
 800f342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f346:	461a      	mov	r2, r3
 800f348:	2300      	movs	r3, #0
 800f34a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	015a      	lsls	r2, r3, #5
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	4413      	add	r3, r2
 800f354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f358:	461a      	mov	r2, r3
 800f35a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f35e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	3301      	adds	r3, #1
 800f364:	613b      	str	r3, [r7, #16]
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d3b7      	bcc.n	800f2de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f36e:	2300      	movs	r3, #0
 800f370:	613b      	str	r3, [r7, #16]
 800f372:	e043      	b.n	800f3fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	015a      	lsls	r2, r3, #5
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	4413      	add	r3, r2
 800f37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f38a:	d118      	bne.n	800f3be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10a      	bne.n	800f3a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	015a      	lsls	r2, r3, #5
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	4413      	add	r3, r2
 800f39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	e013      	b.n	800f3d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f3ba:	6013      	str	r3, [r2, #0]
 800f3bc:	e008      	b.n	800f3d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	015a      	lsls	r2, r3, #5
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	015a      	lsls	r2, r3, #5
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3dc:	461a      	mov	r2, r3
 800f3de:	2300      	movs	r3, #0
 800f3e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	015a      	lsls	r2, r3, #5
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	613b      	str	r3, [r7, #16]
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	693a      	ldr	r2, [r7, #16]
 800f400:	429a      	cmp	r2, r3
 800f402:	d3b7      	bcc.n	800f374 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f416:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f424:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d105      	bne.n	800f438 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	f043 0210 	orr.w	r2, r3, #16
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	4b0f      	ldr	r3, [pc, #60]	; (800f47c <USB_DevInit+0x2c4>)
 800f43e:	4313      	orrs	r3, r2
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	2b00      	cmp	r3, #0
 800f448:	d005      	beq.n	800f456 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	699b      	ldr	r3, [r3, #24]
 800f44e:	f043 0208 	orr.w	r2, r3, #8
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d107      	bne.n	800f46c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	699b      	ldr	r3, [r3, #24]
 800f460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f464:	f043 0304 	orr.w	r3, r3, #4
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f478:	b004      	add	sp, #16
 800f47a:	4770      	bx	lr
 800f47c:	803c3800 	.word	0x803c3800

0800f480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f48a:	2300      	movs	r3, #0
 800f48c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	019b      	lsls	r3, r3, #6
 800f492:	f043 0220 	orr.w	r2, r3, #32
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	3301      	adds	r3, #1
 800f49e:	60fb      	str	r3, [r7, #12]
 800f4a0:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <USB_FlushTxFifo+0x44>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d901      	bls.n	800f4aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	e006      	b.n	800f4b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b20      	cmp	r3, #32
 800f4b4:	d0f1      	beq.n	800f49a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	00030d40 	.word	0x00030d40

0800f4c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2210      	movs	r2, #16
 800f4d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	4a08      	ldr	r2, [pc, #32]	; (800f504 <USB_FlushRxFifo+0x3c>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d901      	bls.n	800f4ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	e006      	b.n	800f4f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	f003 0310 	and.w	r3, r3, #16
 800f4f2:	2b10      	cmp	r3, #16
 800f4f4:	d0f1      	beq.n	800f4da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	00030d40 	.word	0x00030d40

0800f508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	78fb      	ldrb	r3, [r7, #3]
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f528:	4313      	orrs	r3, r2
 800f52a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f53a:	b480      	push	{r7}
 800f53c:	b087      	sub	sp, #28
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	f003 0306 	and.w	r3, r3, #6
 800f552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f55a:	2300      	movs	r3, #0
 800f55c:	75fb      	strb	r3, [r7, #23]
 800f55e:	e00a      	b.n	800f576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2b02      	cmp	r3, #2
 800f564:	d002      	beq.n	800f56c <USB_GetDevSpeed+0x32>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b06      	cmp	r3, #6
 800f56a:	d102      	bne.n	800f572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f56c:	2302      	movs	r3, #2
 800f56e:	75fb      	strb	r3, [r7, #23]
 800f570:	e001      	b.n	800f576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f572:	230f      	movs	r3, #15
 800f574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f576:	7dfb      	ldrb	r3, [r7, #23]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	371c      	adds	r7, #28
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d13a      	bne.n	800f616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a6:	69da      	ldr	r2, [r3, #28]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	f003 030f 	and.w	r3, r3, #15
 800f5b0:	2101      	movs	r1, #1
 800f5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	68f9      	ldr	r1, [r7, #12]
 800f5ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	015a      	lsls	r2, r3, #5
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d155      	bne.n	800f684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	015a      	lsls	r2, r3, #5
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	4413      	add	r3, r2
 800f5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	78db      	ldrb	r3, [r3, #3]
 800f5f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	059b      	lsls	r3, r3, #22
 800f5fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	0151      	lsls	r1, r2, #5
 800f602:	68fa      	ldr	r2, [r7, #12]
 800f604:	440a      	add	r2, r1
 800f606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f60e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f612:	6013      	str	r3, [r2, #0]
 800f614:	e036      	b.n	800f684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f61c:	69da      	ldr	r2, [r3, #28]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	2101      	movs	r1, #1
 800f628:	fa01 f303 	lsl.w	r3, r1, r3
 800f62c:	041b      	lsls	r3, r3, #16
 800f62e:	68f9      	ldr	r1, [r7, #12]
 800f630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f634:	4313      	orrs	r3, r2
 800f636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	015a      	lsls	r2, r3, #5
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	4413      	add	r3, r2
 800f640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d11a      	bne.n	800f684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	015a      	lsls	r2, r3, #5
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	4413      	add	r3, r2
 800f656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	78db      	ldrb	r3, [r3, #3]
 800f668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f66a:	430b      	orrs	r3, r1
 800f66c:	4313      	orrs	r3, r2
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	0151      	lsls	r1, r2, #5
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	440a      	add	r2, r1
 800f676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f67a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3714      	adds	r7, #20
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
	...

0800f694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	785b      	ldrb	r3, [r3, #1]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d161      	bne.n	800f774 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6c6:	d11f      	bne.n	800f708 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	015a      	lsls	r2, r3, #5
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	0151      	lsls	r1, r2, #5
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	440a      	add	r2, r1
 800f6de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f6e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	015a      	lsls	r2, r3, #5
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	0151      	lsls	r1, r2, #5
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	440a      	add	r2, r1
 800f6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f70e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 030f 	and.w	r3, r3, #15
 800f718:	2101      	movs	r1, #1
 800f71a:	fa01 f303 	lsl.w	r3, r1, r3
 800f71e:	b29b      	uxth	r3, r3
 800f720:	43db      	mvns	r3, r3
 800f722:	68f9      	ldr	r1, [r7, #12]
 800f724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f728:	4013      	ands	r3, r2
 800f72a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f732:	69da      	ldr	r2, [r3, #28]
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	f003 030f 	and.w	r3, r3, #15
 800f73c:	2101      	movs	r1, #1
 800f73e:	fa01 f303 	lsl.w	r3, r1, r3
 800f742:	b29b      	uxth	r3, r3
 800f744:	43db      	mvns	r3, r3
 800f746:	68f9      	ldr	r1, [r7, #12]
 800f748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f74c:	4013      	ands	r3, r2
 800f74e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	015a      	lsls	r2, r3, #5
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	4413      	add	r3, r2
 800f758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	0159      	lsls	r1, r3, #5
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	440b      	add	r3, r1
 800f766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f76a:	4619      	mov	r1, r3
 800f76c:	4b35      	ldr	r3, [pc, #212]	; (800f844 <USB_DeactivateEndpoint+0x1b0>)
 800f76e:	4013      	ands	r3, r2
 800f770:	600b      	str	r3, [r1, #0]
 800f772:	e060      	b.n	800f836 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	015a      	lsls	r2, r3, #5
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	4413      	add	r3, r2
 800f77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f78a:	d11f      	bne.n	800f7cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	015a      	lsls	r2, r3, #5
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	4413      	add	r3, r2
 800f794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	0151      	lsls	r1, r2, #5
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	440a      	add	r2, r1
 800f7a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	015a      	lsls	r2, r3, #5
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	0151      	lsls	r1, r2, #5
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	440a      	add	r2, r1
 800f7c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f7ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f003 030f 	and.w	r3, r3, #15
 800f7dc:	2101      	movs	r1, #1
 800f7de:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	43db      	mvns	r3, r3
 800f7e6:	68f9      	ldr	r1, [r7, #12]
 800f7e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7f6:	69da      	ldr	r2, [r3, #28]
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	f003 030f 	and.w	r3, r3, #15
 800f800:	2101      	movs	r1, #1
 800f802:	fa01 f303 	lsl.w	r3, r1, r3
 800f806:	041b      	lsls	r3, r3, #16
 800f808:	43db      	mvns	r3, r3
 800f80a:	68f9      	ldr	r1, [r7, #12]
 800f80c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f810:	4013      	ands	r3, r2
 800f812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	0159      	lsls	r1, r3, #5
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	440b      	add	r3, r1
 800f82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82e:	4619      	mov	r1, r3
 800f830:	4b05      	ldr	r3, [pc, #20]	; (800f848 <USB_DeactivateEndpoint+0x1b4>)
 800f832:	4013      	ands	r3, r2
 800f834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	ec337800 	.word	0xec337800
 800f848:	eff37800 	.word	0xeff37800

0800f84c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b08a      	sub	sp, #40	; 0x28
 800f850:	af02      	add	r7, sp, #8
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	4613      	mov	r3, r2
 800f858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	785b      	ldrb	r3, [r3, #1]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	f040 815c 	bne.w	800fb26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	695b      	ldr	r3, [r3, #20]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d132      	bne.n	800f8dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	015a      	lsls	r2, r3, #5
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	4413      	add	r3, r2
 800f87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	69ba      	ldr	r2, [r7, #24]
 800f886:	0151      	lsls	r1, r2, #5
 800f888:	69fa      	ldr	r2, [r7, #28]
 800f88a:	440a      	add	r2, r1
 800f88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	015a      	lsls	r2, r3, #5
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	69ba      	ldr	r2, [r7, #24]
 800f8aa:	0151      	lsls	r1, r2, #5
 800f8ac:	69fa      	ldr	r2, [r7, #28]
 800f8ae:	440a      	add	r2, r1
 800f8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	015a      	lsls	r2, r3, #5
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	69ba      	ldr	r2, [r7, #24]
 800f8ca:	0151      	lsls	r1, r2, #5
 800f8cc:	69fa      	ldr	r2, [r7, #28]
 800f8ce:	440a      	add	r2, r1
 800f8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8d4:	0cdb      	lsrs	r3, r3, #19
 800f8d6:	04db      	lsls	r3, r3, #19
 800f8d8:	6113      	str	r3, [r2, #16]
 800f8da:	e074      	b.n	800f9c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	015a      	lsls	r2, r3, #5
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	69ba      	ldr	r2, [r7, #24]
 800f8ec:	0151      	lsls	r1, r2, #5
 800f8ee:	69fa      	ldr	r2, [r7, #28]
 800f8f0:	440a      	add	r2, r1
 800f8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f6:	0cdb      	lsrs	r3, r3, #19
 800f8f8:	04db      	lsls	r3, r3, #19
 800f8fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	015a      	lsls	r2, r3, #5
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	4413      	add	r3, r2
 800f904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	0151      	lsls	r1, r2, #5
 800f90e:	69fa      	ldr	r2, [r7, #28]
 800f910:	440a      	add	r2, r1
 800f912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f91a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f91e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f92c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	6959      	ldr	r1, [r3, #20]
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	440b      	add	r3, r1
 800f938:	1e59      	subs	r1, r3, #1
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f942:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f944:	4b9d      	ldr	r3, [pc, #628]	; (800fbbc <USB_EPStartXfer+0x370>)
 800f946:	400b      	ands	r3, r1
 800f948:	69b9      	ldr	r1, [r7, #24]
 800f94a:	0148      	lsls	r0, r1, #5
 800f94c:	69f9      	ldr	r1, [r7, #28]
 800f94e:	4401      	add	r1, r0
 800f950:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f954:	4313      	orrs	r3, r2
 800f956:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	015a      	lsls	r2, r3, #5
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	4413      	add	r3, r2
 800f960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f964:	691a      	ldr	r2, [r3, #16]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f96e:	69b9      	ldr	r1, [r7, #24]
 800f970:	0148      	lsls	r0, r1, #5
 800f972:	69f9      	ldr	r1, [r7, #28]
 800f974:	4401      	add	r1, r0
 800f976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f97a:	4313      	orrs	r3, r2
 800f97c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	78db      	ldrb	r3, [r3, #3]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d11f      	bne.n	800f9c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	0151      	lsls	r1, r2, #5
 800f998:	69fa      	ldr	r2, [r7, #28]
 800f99a:	440a      	add	r2, r1
 800f99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f9a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	015a      	lsls	r2, r3, #5
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	69ba      	ldr	r2, [r7, #24]
 800f9b6:	0151      	lsls	r1, r2, #5
 800f9b8:	69fa      	ldr	r2, [r7, #28]
 800f9ba:	440a      	add	r2, r1
 800f9bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f9c6:	79fb      	ldrb	r3, [r7, #7]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d14b      	bne.n	800fa64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d009      	beq.n	800f9e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	691b      	ldr	r3, [r3, #16]
 800f9e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	78db      	ldrb	r3, [r3, #3]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d128      	bne.n	800fa42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d110      	bne.n	800fa22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	015a      	lsls	r2, r3, #5
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	4413      	add	r3, r2
 800fa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	69ba      	ldr	r2, [r7, #24]
 800fa10:	0151      	lsls	r1, r2, #5
 800fa12:	69fa      	ldr	r2, [r7, #28]
 800fa14:	440a      	add	r2, r1
 800fa16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	e00f      	b.n	800fa42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	015a      	lsls	r2, r3, #5
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	4413      	add	r3, r2
 800fa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	69ba      	ldr	r2, [r7, #24]
 800fa32:	0151      	lsls	r1, r2, #5
 800fa34:	69fa      	ldr	r2, [r7, #28]
 800fa36:	440a      	add	r2, r1
 800fa38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	69ba      	ldr	r2, [r7, #24]
 800fa52:	0151      	lsls	r1, r2, #5
 800fa54:	69fa      	ldr	r2, [r7, #28]
 800fa56:	440a      	add	r2, r1
 800fa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa60:	6013      	str	r3, [r2, #0]
 800fa62:	e12f      	b.n	800fcc4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	015a      	lsls	r2, r3, #5
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	69ba      	ldr	r2, [r7, #24]
 800fa74:	0151      	lsls	r1, r2, #5
 800fa76:	69fa      	ldr	r2, [r7, #28]
 800fa78:	440a      	add	r2, r1
 800fa7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	78db      	ldrb	r3, [r3, #3]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d015      	beq.n	800fab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	695b      	ldr	r3, [r3, #20]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 8117 	beq.w	800fcc4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	f003 030f 	and.w	r3, r3, #15
 800faa6:	2101      	movs	r1, #1
 800faa8:	fa01 f303 	lsl.w	r3, r1, r3
 800faac:	69f9      	ldr	r1, [r7, #28]
 800faae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fab2:	4313      	orrs	r3, r2
 800fab4:	634b      	str	r3, [r1, #52]	; 0x34
 800fab6:	e105      	b.n	800fcc4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d110      	bne.n	800faea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	015a      	lsls	r2, r3, #5
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	4413      	add	r3, r2
 800fad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	69ba      	ldr	r2, [r7, #24]
 800fad8:	0151      	lsls	r1, r2, #5
 800fada:	69fa      	ldr	r2, [r7, #28]
 800fadc:	440a      	add	r2, r1
 800fade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	e00f      	b.n	800fb0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	69ba      	ldr	r2, [r7, #24]
 800fafa:	0151      	lsls	r1, r2, #5
 800fafc:	69fa      	ldr	r2, [r7, #28]
 800fafe:	440a      	add	r2, r1
 800fb00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	68d9      	ldr	r1, [r3, #12]
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	781a      	ldrb	r2, [r3, #0]
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	695b      	ldr	r3, [r3, #20]
 800fb16:	b298      	uxth	r0, r3
 800fb18:	79fb      	ldrb	r3, [r7, #7]
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f000 fa2b 	bl	800ff7a <USB_WritePacket>
 800fb24:	e0ce      	b.n	800fcc4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	015a      	lsls	r2, r3, #5
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	69ba      	ldr	r2, [r7, #24]
 800fb36:	0151      	lsls	r1, r2, #5
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	440a      	add	r2, r1
 800fb3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb40:	0cdb      	lsrs	r3, r3, #19
 800fb42:	04db      	lsls	r3, r3, #19
 800fb44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	015a      	lsls	r2, r3, #5
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	69ba      	ldr	r2, [r7, #24]
 800fb56:	0151      	lsls	r1, r2, #5
 800fb58:	69fa      	ldr	r2, [r7, #28]
 800fb5a:	440a      	add	r2, r1
 800fb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	695b      	ldr	r3, [r3, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d126      	bne.n	800fbc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	015a      	lsls	r2, r3, #5
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	4413      	add	r3, r2
 800fb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb7e:	691a      	ldr	r2, [r3, #16]
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb88:	69b9      	ldr	r1, [r7, #24]
 800fb8a:	0148      	lsls	r0, r1, #5
 800fb8c:	69f9      	ldr	r1, [r7, #28]
 800fb8e:	4401      	add	r1, r0
 800fb90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb94:	4313      	orrs	r3, r2
 800fb96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	015a      	lsls	r2, r3, #5
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	4413      	add	r3, r2
 800fba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fba4:	691b      	ldr	r3, [r3, #16]
 800fba6:	69ba      	ldr	r2, [r7, #24]
 800fba8:	0151      	lsls	r1, r2, #5
 800fbaa:	69fa      	ldr	r2, [r7, #28]
 800fbac:	440a      	add	r2, r1
 800fbae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbb6:	6113      	str	r3, [r2, #16]
 800fbb8:	e036      	b.n	800fc28 <USB_EPStartXfer+0x3dc>
 800fbba:	bf00      	nop
 800fbbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	695a      	ldr	r2, [r3, #20]
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	4413      	add	r3, r2
 800fbca:	1e5a      	subs	r2, r3, #1
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbd4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	015a      	lsls	r2, r3, #5
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	4413      	add	r3, r2
 800fbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe2:	691a      	ldr	r2, [r3, #16]
 800fbe4:	8afb      	ldrh	r3, [r7, #22]
 800fbe6:	04d9      	lsls	r1, r3, #19
 800fbe8:	4b39      	ldr	r3, [pc, #228]	; (800fcd0 <USB_EPStartXfer+0x484>)
 800fbea:	400b      	ands	r3, r1
 800fbec:	69b9      	ldr	r1, [r7, #24]
 800fbee:	0148      	lsls	r0, r1, #5
 800fbf0:	69f9      	ldr	r1, [r7, #28]
 800fbf2:	4401      	add	r1, r0
 800fbf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc08:	691a      	ldr	r2, [r3, #16]
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	8af9      	ldrh	r1, [r7, #22]
 800fc10:	fb01 f303 	mul.w	r3, r1, r3
 800fc14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc18:	69b9      	ldr	r1, [r7, #24]
 800fc1a:	0148      	lsls	r0, r1, #5
 800fc1c:	69f9      	ldr	r1, [r7, #28]
 800fc1e:	4401      	add	r1, r0
 800fc20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc24:	4313      	orrs	r3, r2
 800fc26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fc28:	79fb      	ldrb	r3, [r7, #7]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d10d      	bne.n	800fc4a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d009      	beq.n	800fc4a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	68d9      	ldr	r1, [r3, #12]
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	4413      	add	r3, r2
 800fc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc46:	460a      	mov	r2, r1
 800fc48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	78db      	ldrb	r3, [r3, #3]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d128      	bne.n	800fca4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d110      	bne.n	800fc84 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	0151      	lsls	r1, r2, #5
 800fc74:	69fa      	ldr	r2, [r7, #28]
 800fc76:	440a      	add	r2, r1
 800fc78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	e00f      	b.n	800fca4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	0151      	lsls	r1, r2, #5
 800fc96:	69fa      	ldr	r2, [r7, #28]
 800fc98:	440a      	add	r2, r1
 800fc9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fca2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	015a      	lsls	r2, r3, #5
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	4413      	add	r3, r2
 800fcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	0151      	lsls	r1, r2, #5
 800fcb6:	69fa      	ldr	r2, [r7, #28]
 800fcb8:	440a      	add	r2, r1
 800fcba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3720      	adds	r7, #32
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	1ff80000 	.word	0x1ff80000

0800fcd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b087      	sub	sp, #28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	4613      	mov	r3, r2
 800fce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	785b      	ldrb	r3, [r3, #1]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	f040 80cd 	bne.w	800fe90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d132      	bne.n	800fd64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	0151      	lsls	r1, r2, #5
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	440a      	add	r2, r1
 800fd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	0151      	lsls	r1, r2, #5
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	440a      	add	r2, r1
 800fd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	015a      	lsls	r2, r3, #5
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	4413      	add	r3, r2
 800fd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	693a      	ldr	r2, [r7, #16]
 800fd52:	0151      	lsls	r1, r2, #5
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	440a      	add	r2, r1
 800fd58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd5c:	0cdb      	lsrs	r3, r3, #19
 800fd5e:	04db      	lsls	r3, r3, #19
 800fd60:	6113      	str	r3, [r2, #16]
 800fd62:	e04e      	b.n	800fe02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	015a      	lsls	r2, r3, #5
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	0151      	lsls	r1, r2, #5
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	440a      	add	r2, r1
 800fd7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd7e:	0cdb      	lsrs	r3, r3, #19
 800fd80:	04db      	lsls	r3, r3, #19
 800fd82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	015a      	lsls	r2, r3, #5
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	0151      	lsls	r1, r2, #5
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	440a      	add	r2, r1
 800fd9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fda2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fda6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	695a      	ldr	r2, [r3, #20]
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d903      	bls.n	800fdbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	689a      	ldr	r2, [r3, #8]
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	015a      	lsls	r2, r3, #5
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	0151      	lsls	r1, r2, #5
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	440a      	add	r2, r1
 800fdd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde8:	691a      	ldr	r2, [r3, #16]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdf2:	6939      	ldr	r1, [r7, #16]
 800fdf4:	0148      	lsls	r0, r1, #5
 800fdf6:	6979      	ldr	r1, [r7, #20]
 800fdf8:	4401      	add	r1, r0
 800fdfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d11e      	bne.n	800fe46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d009      	beq.n	800fe24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	693a      	ldr	r2, [r7, #16]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe42:	6013      	str	r3, [r2, #0]
 800fe44:	e092      	b.n	800ff6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	015a      	lsls	r2, r3, #5
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	693a      	ldr	r2, [r7, #16]
 800fe56:	0151      	lsls	r1, r2, #5
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	440a      	add	r2, r1
 800fe5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	695b      	ldr	r3, [r3, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d07e      	beq.n	800ff6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	f003 030f 	and.w	r3, r3, #15
 800fe7e:	2101      	movs	r1, #1
 800fe80:	fa01 f303 	lsl.w	r3, r1, r3
 800fe84:	6979      	ldr	r1, [r7, #20]
 800fe86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	634b      	str	r3, [r1, #52]	; 0x34
 800fe8e:	e06d      	b.n	800ff6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	015a      	lsls	r2, r3, #5
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	4413      	add	r3, r2
 800fe98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe9c:	691b      	ldr	r3, [r3, #16]
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	0151      	lsls	r1, r2, #5
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	440a      	add	r2, r1
 800fea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feaa:	0cdb      	lsrs	r3, r3, #19
 800feac:	04db      	lsls	r3, r3, #19
 800feae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	015a      	lsls	r2, r3, #5
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	4413      	add	r3, r2
 800feb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	693a      	ldr	r2, [r7, #16]
 800fec0:	0151      	lsls	r1, r2, #5
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	440a      	add	r2, r1
 800fec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fed2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d003      	beq.n	800fee4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	689a      	ldr	r2, [r3, #8]
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	4413      	add	r3, r2
 800feec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	0151      	lsls	r1, r2, #5
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	440a      	add	r2, r1
 800fefa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fefe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	015a      	lsls	r2, r3, #5
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff10:	691a      	ldr	r2, [r3, #16]
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff1a:	6939      	ldr	r1, [r7, #16]
 800ff1c:	0148      	lsls	r0, r1, #5
 800ff1e:	6979      	ldr	r1, [r7, #20]
 800ff20:	4401      	add	r1, r0
 800ff22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ff26:	4313      	orrs	r3, r2
 800ff28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ff2a:	79fb      	ldrb	r3, [r7, #7]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d10d      	bne.n	800ff4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	68d9      	ldr	r1, [r3, #12]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	015a      	lsls	r2, r3, #5
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	4413      	add	r3, r2
 800ff44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff48:	460a      	mov	r2, r1
 800ff4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	015a      	lsls	r2, r3, #5
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	4413      	add	r3, r2
 800ff54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	693a      	ldr	r2, [r7, #16]
 800ff5c:	0151      	lsls	r1, r2, #5
 800ff5e:	697a      	ldr	r2, [r7, #20]
 800ff60:	440a      	add	r2, r1
 800ff62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ff7a:	b480      	push	{r7}
 800ff7c:	b089      	sub	sp, #36	; 0x24
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	60f8      	str	r0, [r7, #12]
 800ff82:	60b9      	str	r1, [r7, #8]
 800ff84:	4611      	mov	r1, r2
 800ff86:	461a      	mov	r2, r3
 800ff88:	460b      	mov	r3, r1
 800ff8a:	71fb      	strb	r3, [r7, #7]
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ff98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d123      	bne.n	800ffe8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ffa0:	88bb      	ldrh	r3, [r7, #4]
 800ffa2:	3303      	adds	r3, #3
 800ffa4:	089b      	lsrs	r3, r3, #2
 800ffa6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	61bb      	str	r3, [r7, #24]
 800ffac:	e018      	b.n	800ffe0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	031a      	lsls	r2, r3, #12
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffba:	461a      	mov	r2, r3
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	61bb      	str	r3, [r7, #24]
 800ffe0:	69ba      	ldr	r2, [r7, #24]
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d3e2      	bcc.n	800ffae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3724      	adds	r7, #36	; 0x24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fff6:	b480      	push	{r7}
 800fff8:	b08b      	sub	sp, #44	; 0x2c
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	4613      	mov	r3, r2
 8010002:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801000c:	88fb      	ldrh	r3, [r7, #6]
 801000e:	089b      	lsrs	r3, r3, #2
 8010010:	b29b      	uxth	r3, r3
 8010012:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010014:	88fb      	ldrh	r3, [r7, #6]
 8010016:	f003 0303 	and.w	r3, r3, #3
 801001a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801001c:	2300      	movs	r3, #0
 801001e:	623b      	str	r3, [r7, #32]
 8010020:	e014      	b.n	801004c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002c:	601a      	str	r2, [r3, #0]
    pDest++;
 801002e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010030:	3301      	adds	r3, #1
 8010032:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	3301      	adds	r3, #1
 8010038:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	3301      	adds	r3, #1
 801003e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	3301      	adds	r3, #1
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010046:	6a3b      	ldr	r3, [r7, #32]
 8010048:	3301      	adds	r3, #1
 801004a:	623b      	str	r3, [r7, #32]
 801004c:	6a3a      	ldr	r2, [r7, #32]
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	429a      	cmp	r2, r3
 8010052:	d3e6      	bcc.n	8010022 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010054:	8bfb      	ldrh	r3, [r7, #30]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01e      	beq.n	8010098 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801005a:	2300      	movs	r3, #0
 801005c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010064:	461a      	mov	r2, r3
 8010066:	f107 0310 	add.w	r3, r7, #16
 801006a:	6812      	ldr	r2, [r2, #0]
 801006c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801006e:	693a      	ldr	r2, [r7, #16]
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	b2db      	uxtb	r3, r3
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	fa22 f303 	lsr.w	r3, r2, r3
 801007a:	b2da      	uxtb	r2, r3
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	701a      	strb	r2, [r3, #0]
      i++;
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	3301      	adds	r3, #1
 8010084:	623b      	str	r3, [r7, #32]
      pDest++;
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	3301      	adds	r3, #1
 801008a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801008c:	8bfb      	ldrh	r3, [r7, #30]
 801008e:	3b01      	subs	r3, #1
 8010090:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010092:	8bfb      	ldrh	r3, [r7, #30]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1ea      	bne.n	801006e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801009a:	4618      	mov	r0, r3
 801009c:	372c      	adds	r7, #44	; 0x2c
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100a6:	b480      	push	{r7}
 80100a8:	b085      	sub	sp, #20
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	785b      	ldrb	r3, [r3, #1]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d12c      	bne.n	801011c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	015a      	lsls	r2, r3, #5
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	4413      	add	r3, r2
 80100ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	db12      	blt.n	80100fa <USB_EPSetStall+0x54>
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00f      	beq.n	80100fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	0151      	lsls	r1, r2, #5
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	440a      	add	r2, r1
 80100f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80100f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	015a      	lsls	r2, r3, #5
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	4413      	add	r3, r2
 8010102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	68ba      	ldr	r2, [r7, #8]
 801010a:	0151      	lsls	r1, r2, #5
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	440a      	add	r2, r1
 8010110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010118:	6013      	str	r3, [r2, #0]
 801011a:	e02b      	b.n	8010174 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	015a      	lsls	r2, r3, #5
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4413      	add	r3, r2
 8010124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	db12      	blt.n	8010154 <USB_EPSetStall+0xae>
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00f      	beq.n	8010154 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801014e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010152:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	015a      	lsls	r2, r3, #5
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	4413      	add	r3, r2
 801015c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	0151      	lsls	r1, r2, #5
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	440a      	add	r2, r1
 801016a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801016e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010182:	b480      	push	{r7}
 8010184:	b085      	sub	sp, #20
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	785b      	ldrb	r3, [r3, #1]
 801019a:	2b01      	cmp	r3, #1
 801019c:	d128      	bne.n	80101f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	015a      	lsls	r2, r3, #5
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	4413      	add	r3, r2
 80101a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	0151      	lsls	r1, r2, #5
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	440a      	add	r2, r1
 80101b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80101bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	78db      	ldrb	r3, [r3, #3]
 80101c2:	2b03      	cmp	r3, #3
 80101c4:	d003      	beq.n	80101ce <USB_EPClearStall+0x4c>
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	78db      	ldrb	r3, [r3, #3]
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	d138      	bne.n	8010240 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	015a      	lsls	r2, r3, #5
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	4413      	add	r3, r2
 80101d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	0151      	lsls	r1, r2, #5
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	440a      	add	r2, r1
 80101e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	e027      	b.n	8010240 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	015a      	lsls	r2, r3, #5
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	0151      	lsls	r1, r2, #5
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	440a      	add	r2, r1
 8010206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801020a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801020e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	78db      	ldrb	r3, [r3, #3]
 8010214:	2b03      	cmp	r3, #3
 8010216:	d003      	beq.n	8010220 <USB_EPClearStall+0x9e>
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	78db      	ldrb	r3, [r3, #3]
 801021c:	2b02      	cmp	r3, #2
 801021e:	d10f      	bne.n	8010240 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	0151      	lsls	r1, r2, #5
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	440a      	add	r2, r1
 8010236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801023a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801023e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801024e:	b480      	push	{r7}
 8010250:	b085      	sub	sp, #20
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	460b      	mov	r3, r1
 8010258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801026c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010270:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	78fb      	ldrb	r3, [r7, #3]
 801027c:	011b      	lsls	r3, r3, #4
 801027e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010282:	68f9      	ldr	r1, [r7, #12]
 8010284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010288:	4313      	orrs	r3, r2
 801028a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801028c:	2300      	movs	r3, #0
}
 801028e:	4618      	mov	r0, r3
 8010290:	3714      	adds	r7, #20
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801029a:	b480      	push	{r7}
 801029c:	b085      	sub	sp, #20
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102b4:	f023 0303 	bic.w	r3, r3, #3
 80102b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102c8:	f023 0302 	bic.w	r3, r3, #2
 80102cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102dc:	b480      	push	{r7}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102f6:	f023 0303 	bic.w	r3, r3, #3
 80102fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801030a:	f043 0302 	orr.w	r3, r3, #2
 801030e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801031e:	b480      	push	{r7}
 8010320:	b085      	sub	sp, #20
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	695b      	ldr	r3, [r3, #20]
 801032a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	4013      	ands	r3, r2
 8010334:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010336:	68fb      	ldr	r3, [r7, #12]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010356:	699b      	ldr	r3, [r3, #24]
 8010358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	4013      	ands	r3, r2
 8010366:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	0c1b      	lsrs	r3, r3, #16
}
 801036c:	4618      	mov	r0, r3
 801036e:	3714      	adds	r7, #20
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010394:	69db      	ldr	r3, [r3, #28]
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	4013      	ands	r3, r2
 801039a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	b29b      	uxth	r3, r3
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80103bc:	78fb      	ldrb	r3, [r7, #3]
 80103be:	015a      	lsls	r2, r3, #5
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	4413      	add	r3, r2
 80103c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d2:	695b      	ldr	r3, [r3, #20]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	4013      	ands	r3, r2
 80103d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80103da:	68bb      	ldr	r3, [r7, #8]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b087      	sub	sp, #28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801040c:	78fb      	ldrb	r3, [r7, #3]
 801040e:	f003 030f 	and.w	r3, r3, #15
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	fa22 f303 	lsr.w	r3, r2, r3
 8010418:	01db      	lsls	r3, r3, #7
 801041a:	b2db      	uxtb	r3, r3
 801041c:	693a      	ldr	r2, [r7, #16]
 801041e:	4313      	orrs	r3, r2
 8010420:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	015a      	lsls	r2, r3, #5
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	4413      	add	r3, r2
 801042a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801042e:	689b      	ldr	r3, [r3, #8]
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	4013      	ands	r3, r2
 8010434:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010436:	68bb      	ldr	r3, [r7, #8]
}
 8010438:	4618      	mov	r0, r3
 801043a:	371c      	adds	r7, #28
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	695b      	ldr	r3, [r3, #20]
 8010450:	f003 0301 	and.w	r3, r3, #1
}
 8010454:	4618      	mov	r0, r3
 8010456:	370c      	adds	r7, #12
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801047a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801047e:	f023 0307 	bic.w	r3, r3, #7
 8010482:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010496:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
	...

080104a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b087      	sub	sp, #28
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	460b      	mov	r3, r1
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	333c      	adds	r3, #60	; 0x3c
 80104be:	3304      	adds	r3, #4
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	4a26      	ldr	r2, [pc, #152]	; (8010560 <USB_EP0_OutStart+0xb8>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d90a      	bls.n	80104e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104dc:	d101      	bne.n	80104e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	e037      	b.n	8010552 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e8:	461a      	mov	r2, r3
 80104ea:	2300      	movs	r3, #0
 80104ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010510:	f043 0318 	orr.w	r3, r3, #24
 8010514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010524:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010528:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801052a:	7afb      	ldrb	r3, [r7, #11]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d10f      	bne.n	8010550 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010536:	461a      	mov	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801054a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801054e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	371c      	adds	r7, #28
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	4f54300a 	.word	0x4f54300a

08010564 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010564:	b480      	push	{r7}
 8010566:	b085      	sub	sp, #20
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801056c:	2300      	movs	r3, #0
 801056e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	3301      	adds	r3, #1
 8010574:	60fb      	str	r3, [r7, #12]
 8010576:	4a13      	ldr	r2, [pc, #76]	; (80105c4 <USB_CoreReset+0x60>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d901      	bls.n	8010580 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801057c:	2303      	movs	r3, #3
 801057e:	e01a      	b.n	80105b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	691b      	ldr	r3, [r3, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	daf3      	bge.n	8010570 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010588:	2300      	movs	r3, #0
 801058a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	f043 0201 	orr.w	r2, r3, #1
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	3301      	adds	r3, #1
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	4a09      	ldr	r2, [pc, #36]	; (80105c4 <USB_CoreReset+0x60>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d901      	bls.n	80105a8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80105a4:	2303      	movs	r3, #3
 80105a6:	e006      	b.n	80105b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	691b      	ldr	r3, [r3, #16]
 80105ac:	f003 0301 	and.w	r3, r3, #1
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d0f1      	beq.n	8010598 <USB_CoreReset+0x34>

  return HAL_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3714      	adds	r7, #20
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	00030d40 	.word	0x00030d40

080105c8 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 80105d4:	4a05      	ldr	r2, [pc, #20]	; (80105ec <set_NSS_pin+0x24>)
 80105d6:	887b      	ldrh	r3, [r7, #2]
 80105d8:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 80105da:	4a05      	ldr	r2, [pc, #20]	; (80105f0 <set_NSS_pin+0x28>)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6013      	str	r3, [r2, #0]
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	200007c8 	.word	0x200007c8
 80105f0:	200007cc 	.word	0x200007cc

080105f4 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	460b      	mov	r3, r1
 80105fe:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8010600:	4a05      	ldr	r2, [pc, #20]	; (8010618 <set_BUSY_pin+0x24>)
 8010602:	887b      	ldrh	r3, [r7, #2]
 8010604:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8010606:	4a05      	ldr	r2, [pc, #20]	; (801061c <set_BUSY_pin+0x28>)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6013      	str	r3, [r2, #0]
}
 801060c:	bf00      	nop
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	200007d8 	.word	0x200007d8
 801061c:	200007dc 	.word	0x200007dc

08010620 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 801062c:	4a05      	ldr	r2, [pc, #20]	; (8010644 <set_NRESET_pin+0x24>)
 801062e:	887b      	ldrh	r3, [r7, #2]
 8010630:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8010632:	4a05      	ldr	r2, [pc, #20]	; (8010648 <set_NRESET_pin+0x28>)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6013      	str	r3, [r2, #0]
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	200007d0 	.word	0x200007d0
 8010648:	200007d4 	.word	0x200007d4

0801064c <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	460b      	mov	r3, r1
 8010656:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8010658:	4a05      	ldr	r2, [pc, #20]	; (8010670 <set_DIO1_pin+0x24>)
 801065a:	887b      	ldrh	r3, [r7, #2]
 801065c:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 801065e:	4a05      	ldr	r2, [pc, #20]	; (8010674 <set_DIO1_pin+0x28>)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6013      	str	r3, [r2, #0]
}
 8010664:	bf00      	nop
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr
 8010670:	200007e0 	.word	0x200007e0
 8010674:	200007e4 	.word	0x200007e4

08010678 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8010678:	b084      	sub	sp, #16
 801067a:	b580      	push	{r7, lr}
 801067c:	af00      	add	r7, sp, #0
 801067e:	f107 0c08 	add.w	ip, r7, #8
 8010682:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8010686:	4b07      	ldr	r3, [pc, #28]	; (80106a4 <set_hspi+0x2c>)
 8010688:	4618      	mov	r0, r3
 801068a:	f107 0308 	add.w	r3, r7, #8
 801068e:	2258      	movs	r2, #88	; 0x58
 8010690:	4619      	mov	r1, r3
 8010692:	f00a fa33 	bl	801aafc <memcpy>
}
 8010696:	bf00      	nop
 8010698:	46bd      	mov	sp, r7
 801069a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801069e:	b004      	add	sp, #16
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	200007e8 	.word	0x200007e8

080106a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80106ac:	4904      	ldr	r1, [pc, #16]	; (80106c0 <MX_FATFS_Init+0x18>)
 80106ae:	4805      	ldr	r0, [pc, #20]	; (80106c4 <MX_FATFS_Init+0x1c>)
 80106b0:	f004 fffe 	bl	80156b0 <FATFS_LinkDriver>
 80106b4:	4603      	mov	r3, r0
 80106b6:	461a      	mov	r2, r3
 80106b8:	4b03      	ldr	r3, [pc, #12]	; (80106c8 <MX_FATFS_Init+0x20>)
 80106ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80106bc:	bf00      	nop
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20007218 	.word	0x20007218
 80106c4:	20000060 	.word	0x20000060
 80106c8:	2000721c 	.word	0x2000721c

080106cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80106cc:	b480      	push	{r7}
 80106ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80106d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f000 f9dd 	bl	8010aa8 <USER_SPI_initialize>
 80106ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	4603      	mov	r3, r0
 8010700:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	4618      	mov	r0, r3
 8010706:	f000 fab9 	bl	8010c7c <USER_SPI_status>
 801070a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801070c:	4618      	mov	r0, r3
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	60b9      	str	r1, [r7, #8]
 801071c:	607a      	str	r2, [r7, #4]
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	4603      	mov	r3, r0
 8010722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010724:	7bf8      	ldrb	r0, [r7, #15]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	68b9      	ldr	r1, [r7, #8]
 801072c:	f000 fabc 	bl	8010ca8 <USER_SPI_read>
 8010730:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b084      	sub	sp, #16
 801073e:	af00      	add	r7, sp, #0
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
 8010746:	4603      	mov	r3, r0
 8010748:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 801074a:	7bf8      	ldrb	r0, [r7, #15]
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	68b9      	ldr	r1, [r7, #8]
 8010752:	f000 fb0f 	bl	8010d74 <USER_SPI_write>
 8010756:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010758:	4618      	mov	r0, r3
 801075a:	3710      	adds	r7, #16
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	603a      	str	r2, [r7, #0]
 801076a:	71fb      	strb	r3, [r7, #7]
 801076c:	460b      	mov	r3, r1
 801076e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8010770:	79b9      	ldrb	r1, [r7, #6]
 8010772:	79fb      	ldrb	r3, [r7, #7]
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	4618      	mov	r0, r3
 8010778:	f000 fb78 	bl	8010e6c <USER_SPI_ioctl>
 801077c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801077e:	4618      	mov	r0, r3
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
	...

08010788 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010790:	f7f7 fe52 	bl	8008438 <HAL_GetTick>
 8010794:	4603      	mov	r3, r0
 8010796:	4a04      	ldr	r2, [pc, #16]	; (80107a8 <SPI_Timer_On+0x20>)
 8010798:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 801079a:	4a04      	ldr	r2, [pc, #16]	; (80107ac <SPI_Timer_On+0x24>)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6013      	str	r3, [r2, #0]
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	20007684 	.word	0x20007684
 80107ac:	20007688 	.word	0x20007688

080107b0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80107b4:	f7f7 fe40 	bl	8008438 <HAL_GetTick>
 80107b8:	4602      	mov	r2, r0
 80107ba:	4b06      	ldr	r3, [pc, #24]	; (80107d4 <SPI_Timer_Status+0x24>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	1ad2      	subs	r2, r2, r3
 80107c0:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <SPI_Timer_Status+0x28>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	bf34      	ite	cc
 80107c8:	2301      	movcc	r3, #1
 80107ca:	2300      	movcs	r3, #0
 80107cc:	b2db      	uxtb	r3, r3
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	20007684 	.word	0x20007684
 80107d8:	20007688 	.word	0x20007688

080107dc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af02      	add	r7, sp, #8
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80107e6:	f107 020f 	add.w	r2, r7, #15
 80107ea:	1df9      	adds	r1, r7, #7
 80107ec:	2332      	movs	r3, #50	; 0x32
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	2301      	movs	r3, #1
 80107f2:	4804      	ldr	r0, [pc, #16]	; (8010804 <xchg_spi+0x28>)
 80107f4:	f7fc fef8 	bl	800d5e8 <HAL_SPI_TransmitReceive>
    return rxDat;
 80107f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	20005fbc 	.word	0x20005fbc

08010808 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010812:	2300      	movs	r3, #0
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	e00a      	b.n	801082e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	18d4      	adds	r4, r2, r3
 801081e:	20ff      	movs	r0, #255	; 0xff
 8010820:	f7ff ffdc 	bl	80107dc <xchg_spi>
 8010824:	4603      	mov	r3, r0
 8010826:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3301      	adds	r3, #1
 801082c:	60fb      	str	r3, [r7, #12]
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	429a      	cmp	r2, r3
 8010834:	d3f0      	bcc.n	8010818 <rcvr_spi_multi+0x10>
	}
}
 8010836:	bf00      	nop
 8010838:	bf00      	nop
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	bd90      	pop	{r4, r7, pc}

08010840 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 801084a:	2300      	movs	r3, #0
 801084c:	60fb      	str	r3, [r7, #12]
 801084e:	e009      	b.n	8010864 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	4413      	add	r3, r2
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff ffbf 	bl	80107dc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	3301      	adds	r3, #1
 8010862:	60fb      	str	r3, [r7, #12]
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	429a      	cmp	r2, r3
 801086a:	d3f1      	bcc.n	8010850 <xmit_spi_multi+0x10>
	}
}
 801086c:	bf00      	nop
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 801087e:	f7f7 fddb 	bl	8008438 <HAL_GetTick>
 8010882:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8010888:	20ff      	movs	r0, #255	; 0xff
 801088a:	f7ff ffa7 	bl	80107dc <xchg_spi>
 801088e:	4603      	mov	r3, r0
 8010890:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010892:	7bfb      	ldrb	r3, [r7, #15]
 8010894:	2bff      	cmp	r3, #255	; 0xff
 8010896:	d007      	beq.n	80108a8 <wait_ready+0x32>
 8010898:	f7f7 fdce 	bl	8008438 <HAL_GetTick>
 801089c:	4602      	mov	r2, r0
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	693a      	ldr	r2, [r7, #16]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d8ef      	bhi.n	8010888 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
 80108aa:	2bff      	cmp	r3, #255	; 0xff
 80108ac:	bf0c      	ite	eq
 80108ae:	2301      	moveq	r3, #1
 80108b0:	2300      	movne	r3, #0
 80108b2:	b2db      	uxtb	r3, r3
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80108c0:	2201      	movs	r2, #1
 80108c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80108c6:	4804      	ldr	r0, [pc, #16]	; (80108d8 <despiselect+0x1c>)
 80108c8:	f7f8 fcce 	bl	8009268 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80108cc:	20ff      	movs	r0, #255	; 0xff
 80108ce:	f7ff ff85 	bl	80107dc <xchg_spi>

}
 80108d2:	bf00      	nop
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	40021400 	.word	0x40021400

080108dc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80108e0:	2200      	movs	r2, #0
 80108e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80108e6:	480a      	ldr	r0, [pc, #40]	; (8010910 <spiselect+0x34>)
 80108e8:	f7f8 fcbe 	bl	8009268 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80108ec:	20ff      	movs	r0, #255	; 0xff
 80108ee:	f7ff ff75 	bl	80107dc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80108f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80108f6:	f7ff ffbe 	bl	8010876 <wait_ready>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <spiselect+0x28>
 8010900:	2301      	movs	r3, #1
 8010902:	e002      	b.n	801090a <spiselect+0x2e>

	despiselect();
 8010904:	f7ff ffda 	bl	80108bc <despiselect>
	return 0;	/* Timeout */
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	40021400 	.word	0x40021400

08010914 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 801091e:	20c8      	movs	r0, #200	; 0xc8
 8010920:	f7ff ff32 	bl	8010788 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010924:	20ff      	movs	r0, #255	; 0xff
 8010926:	f7ff ff59 	bl	80107dc <xchg_spi>
 801092a:	4603      	mov	r3, r0
 801092c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 801092e:	7bfb      	ldrb	r3, [r7, #15]
 8010930:	2bff      	cmp	r3, #255	; 0xff
 8010932:	d104      	bne.n	801093e <rcvr_datablock+0x2a>
 8010934:	f7ff ff3c 	bl	80107b0 <SPI_Timer_Status>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1f2      	bne.n	8010924 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 801093e:	7bfb      	ldrb	r3, [r7, #15]
 8010940:	2bfe      	cmp	r3, #254	; 0xfe
 8010942:	d001      	beq.n	8010948 <rcvr_datablock+0x34>
 8010944:	2300      	movs	r3, #0
 8010946:	e00a      	b.n	801095e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8010948:	6839      	ldr	r1, [r7, #0]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ff5c 	bl	8010808 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010950:	20ff      	movs	r0, #255	; 0xff
 8010952:	f7ff ff43 	bl	80107dc <xchg_spi>
 8010956:	20ff      	movs	r0, #255	; 0xff
 8010958:	f7ff ff40 	bl	80107dc <xchg_spi>

	return 1;						/* Function succeeded */
 801095c:	2301      	movs	r3, #1
}
 801095e:	4618      	mov	r0, r3
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b084      	sub	sp, #16
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	460b      	mov	r3, r1
 8010970:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8010972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010976:	f7ff ff7e 	bl	8010876 <wait_ready>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d101      	bne.n	8010984 <xmit_datablock+0x1e>
 8010980:	2300      	movs	r3, #0
 8010982:	e01e      	b.n	80109c2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8010984:	78fb      	ldrb	r3, [r7, #3]
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff ff28 	bl	80107dc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 801098c:	78fb      	ldrb	r3, [r7, #3]
 801098e:	2bfd      	cmp	r3, #253	; 0xfd
 8010990:	d016      	beq.n	80109c0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8010992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff ff52 	bl	8010840 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 801099c:	20ff      	movs	r0, #255	; 0xff
 801099e:	f7ff ff1d 	bl	80107dc <xchg_spi>
 80109a2:	20ff      	movs	r0, #255	; 0xff
 80109a4:	f7ff ff1a 	bl	80107dc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80109a8:	20ff      	movs	r0, #255	; 0xff
 80109aa:	f7ff ff17 	bl	80107dc <xchg_spi>
 80109ae:	4603      	mov	r3, r0
 80109b0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	f003 031f 	and.w	r3, r3, #31
 80109b8:	2b05      	cmp	r3, #5
 80109ba:	d001      	beq.n	80109c0 <xmit_datablock+0x5a>
 80109bc:	2300      	movs	r3, #0
 80109be:	e000      	b.n	80109c2 <xmit_datablock+0x5c>
	}
	return 1;
 80109c0:	2301      	movs	r3, #1
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	4603      	mov	r3, r0
 80109d2:	6039      	str	r1, [r7, #0]
 80109d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80109d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	da0e      	bge.n	80109fc <send_cmd+0x32>
		cmd &= 0x7F;
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109e4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80109e6:	2100      	movs	r1, #0
 80109e8:	2037      	movs	r0, #55	; 0x37
 80109ea:	f7ff ffee 	bl	80109ca <send_cmd>
 80109ee:	4603      	mov	r3, r0
 80109f0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80109f2:	7bbb      	ldrb	r3, [r7, #14]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d901      	bls.n	80109fc <send_cmd+0x32>
 80109f8:	7bbb      	ldrb	r3, [r7, #14]
 80109fa:	e051      	b.n	8010aa0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80109fc:	79fb      	ldrb	r3, [r7, #7]
 80109fe:	2b0c      	cmp	r3, #12
 8010a00:	d008      	beq.n	8010a14 <send_cmd+0x4a>
		despiselect();
 8010a02:	f7ff ff5b 	bl	80108bc <despiselect>
		if (!spiselect()) return 0xFF;
 8010a06:	f7ff ff69 	bl	80108dc <spiselect>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d101      	bne.n	8010a14 <send_cmd+0x4a>
 8010a10:	23ff      	movs	r3, #255	; 0xff
 8010a12:	e045      	b.n	8010aa0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010a14:	79fb      	ldrb	r3, [r7, #7]
 8010a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7ff fedd 	bl	80107dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	0e1b      	lsrs	r3, r3, #24
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ff fed7 	bl	80107dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	0c1b      	lsrs	r3, r3, #16
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff fed1 	bl	80107dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	0a1b      	lsrs	r3, r3, #8
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff fecb 	bl	80107dc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff fec6 	bl	80107dc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010a50:	2301      	movs	r3, #1
 8010a52:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <send_cmd+0x94>
 8010a5a:	2395      	movs	r3, #149	; 0x95
 8010a5c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010a5e:	79fb      	ldrb	r3, [r7, #7]
 8010a60:	2b08      	cmp	r3, #8
 8010a62:	d101      	bne.n	8010a68 <send_cmd+0x9e>
 8010a64:	2387      	movs	r3, #135	; 0x87
 8010a66:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ff feb6 	bl	80107dc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8010a70:	79fb      	ldrb	r3, [r7, #7]
 8010a72:	2b0c      	cmp	r3, #12
 8010a74:	d102      	bne.n	8010a7c <send_cmd+0xb2>
 8010a76:	20ff      	movs	r0, #255	; 0xff
 8010a78:	f7ff feb0 	bl	80107dc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010a7c:	230a      	movs	r3, #10
 8010a7e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8010a80:	20ff      	movs	r0, #255	; 0xff
 8010a82:	f7ff feab 	bl	80107dc <xchg_spi>
 8010a86:	4603      	mov	r3, r0
 8010a88:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8010a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	da05      	bge.n	8010a9e <send_cmd+0xd4>
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	3b01      	subs	r3, #1
 8010a96:	73fb      	strb	r3, [r7, #15]
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1f0      	bne.n	8010a80 <send_cmd+0xb6>

	return res;							/* Return received response */
 8010a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010aa8:	b590      	push	{r4, r7, lr}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4603      	mov	r3, r0
 8010ab0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8010ab2:	79fb      	ldrb	r3, [r7, #7]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <USER_SPI_initialize+0x14>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e0d4      	b.n	8010c66 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8010abc:	4b6c      	ldr	r3, [pc, #432]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	f003 0302 	and.w	r3, r3, #2
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d003      	beq.n	8010ad2 <USER_SPI_initialize+0x2a>
 8010aca:	4b69      	ldr	r3, [pc, #420]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	e0c9      	b.n	8010c66 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8010ad2:	4b68      	ldr	r3, [pc, #416]	; (8010c74 <USER_SPI_initialize+0x1cc>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	4b66      	ldr	r3, [pc, #408]	; (8010c74 <USER_SPI_initialize+0x1cc>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8010ae0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010ae2:	230a      	movs	r3, #10
 8010ae4:	73fb      	strb	r3, [r7, #15]
 8010ae6:	e005      	b.n	8010af4 <USER_SPI_initialize+0x4c>
 8010ae8:	20ff      	movs	r0, #255	; 0xff
 8010aea:	f7ff fe77 	bl	80107dc <xchg_spi>
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	3b01      	subs	r3, #1
 8010af2:	73fb      	strb	r3, [r7, #15]
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1f6      	bne.n	8010ae8 <USER_SPI_initialize+0x40>

	ty = 0;
 8010afa:	2300      	movs	r3, #0
 8010afc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010afe:	2100      	movs	r1, #0
 8010b00:	2000      	movs	r0, #0
 8010b02:	f7ff ff62 	bl	80109ca <send_cmd>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	f040 808b 	bne.w	8010c24 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010b12:	f7ff fe39 	bl	8010788 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010b16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b1a:	2008      	movs	r0, #8
 8010b1c:	f7ff ff55 	bl	80109ca <send_cmd>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d151      	bne.n	8010bca <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010b26:	2300      	movs	r3, #0
 8010b28:	73fb      	strb	r3, [r7, #15]
 8010b2a:	e00d      	b.n	8010b48 <USER_SPI_initialize+0xa0>
 8010b2c:	7bfc      	ldrb	r4, [r7, #15]
 8010b2e:	20ff      	movs	r0, #255	; 0xff
 8010b30:	f7ff fe54 	bl	80107dc <xchg_spi>
 8010b34:	4603      	mov	r3, r0
 8010b36:	461a      	mov	r2, r3
 8010b38:	f107 0310 	add.w	r3, r7, #16
 8010b3c:	4423      	add	r3, r4
 8010b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
 8010b44:	3301      	adds	r3, #1
 8010b46:	73fb      	strb	r3, [r7, #15]
 8010b48:	7bfb      	ldrb	r3, [r7, #15]
 8010b4a:	2b03      	cmp	r3, #3
 8010b4c:	d9ee      	bls.n	8010b2c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010b4e:	7abb      	ldrb	r3, [r7, #10]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d167      	bne.n	8010c24 <USER_SPI_initialize+0x17c>
 8010b54:	7afb      	ldrb	r3, [r7, #11]
 8010b56:	2baa      	cmp	r3, #170	; 0xaa
 8010b58:	d164      	bne.n	8010c24 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8010b5a:	bf00      	nop
 8010b5c:	f7ff fe28 	bl	80107b0 <SPI_Timer_Status>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d007      	beq.n	8010b76 <USER_SPI_initialize+0xce>
 8010b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010b6a:	20a9      	movs	r0, #169	; 0xa9
 8010b6c:	f7ff ff2d 	bl	80109ca <send_cmd>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1f2      	bne.n	8010b5c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8010b76:	f7ff fe1b 	bl	80107b0 <SPI_Timer_Status>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d051      	beq.n	8010c24 <USER_SPI_initialize+0x17c>
 8010b80:	2100      	movs	r1, #0
 8010b82:	203a      	movs	r0, #58	; 0x3a
 8010b84:	f7ff ff21 	bl	80109ca <send_cmd>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d14a      	bne.n	8010c24 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8010b8e:	2300      	movs	r3, #0
 8010b90:	73fb      	strb	r3, [r7, #15]
 8010b92:	e00d      	b.n	8010bb0 <USER_SPI_initialize+0x108>
 8010b94:	7bfc      	ldrb	r4, [r7, #15]
 8010b96:	20ff      	movs	r0, #255	; 0xff
 8010b98:	f7ff fe20 	bl	80107dc <xchg_spi>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f107 0310 	add.w	r3, r7, #16
 8010ba4:	4423      	add	r3, r4
 8010ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	3301      	adds	r3, #1
 8010bae:	73fb      	strb	r3, [r7, #15]
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	2b03      	cmp	r3, #3
 8010bb4:	d9ee      	bls.n	8010b94 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8010bb6:	7a3b      	ldrb	r3, [r7, #8]
 8010bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <USER_SPI_initialize+0x11c>
 8010bc0:	230c      	movs	r3, #12
 8010bc2:	e000      	b.n	8010bc6 <USER_SPI_initialize+0x11e>
 8010bc4:	2304      	movs	r3, #4
 8010bc6:	737b      	strb	r3, [r7, #13]
 8010bc8:	e02c      	b.n	8010c24 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8010bca:	2100      	movs	r1, #0
 8010bcc:	20a9      	movs	r0, #169	; 0xa9
 8010bce:	f7ff fefc 	bl	80109ca <send_cmd>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d804      	bhi.n	8010be2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8010bd8:	2302      	movs	r3, #2
 8010bda:	737b      	strb	r3, [r7, #13]
 8010bdc:	23a9      	movs	r3, #169	; 0xa9
 8010bde:	73bb      	strb	r3, [r7, #14]
 8010be0:	e003      	b.n	8010bea <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010be2:	2301      	movs	r3, #1
 8010be4:	737b      	strb	r3, [r7, #13]
 8010be6:	2301      	movs	r3, #1
 8010be8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8010bea:	bf00      	nop
 8010bec:	f7ff fde0 	bl	80107b0 <SPI_Timer_Status>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d007      	beq.n	8010c06 <USER_SPI_initialize+0x15e>
 8010bf6:	7bbb      	ldrb	r3, [r7, #14]
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fee5 	bl	80109ca <send_cmd>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1f2      	bne.n	8010bec <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8010c06:	f7ff fdd3 	bl	80107b0 <SPI_Timer_Status>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d007      	beq.n	8010c20 <USER_SPI_initialize+0x178>
 8010c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c14:	2010      	movs	r0, #16
 8010c16:	f7ff fed8 	bl	80109ca <send_cmd>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010c24:	4a14      	ldr	r2, [pc, #80]	; (8010c78 <USER_SPI_initialize+0x1d0>)
 8010c26:	7b7b      	ldrb	r3, [r7, #13]
 8010c28:	7013      	strb	r3, [r2, #0]
	despiselect();
 8010c2a:	f7ff fe47 	bl	80108bc <despiselect>

	if (ty) {			/* OK */
 8010c2e:	7b7b      	ldrb	r3, [r7, #13]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d012      	beq.n	8010c5a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010c34:	4b0f      	ldr	r3, [pc, #60]	; (8010c74 <USER_SPI_initialize+0x1cc>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010c3e:	4b0d      	ldr	r3, [pc, #52]	; (8010c74 <USER_SPI_initialize+0x1cc>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f042 0218 	orr.w	r2, r2, #24
 8010c46:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8010c48:	4b09      	ldr	r3, [pc, #36]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	f023 0301 	bic.w	r3, r3, #1
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	4b06      	ldr	r3, [pc, #24]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e002      	b.n	8010c60 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8010c5a:	4b05      	ldr	r3, [pc, #20]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8010c60:	4b03      	ldr	r3, [pc, #12]	; (8010c70 <USER_SPI_initialize+0x1c8>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	b2db      	uxtb	r3, r3
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd90      	pop	{r4, r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	20000074 	.word	0x20000074
 8010c74:	20005fbc 	.word	0x20005fbc
 8010c78:	20000840 	.word	0x20000840

08010c7c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d001      	beq.n	8010c90 <USER_SPI_status+0x14>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e002      	b.n	8010c96 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8010c90:	4b04      	ldr	r3, [pc, #16]	; (8010ca4 <USER_SPI_status+0x28>)
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	b2db      	uxtb	r3, r3
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	20000074 	.word	0x20000074

08010ca8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60b9      	str	r1, [r7, #8]
 8010cb0:	607a      	str	r2, [r7, #4]
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d102      	bne.n	8010cc4 <USER_SPI_read+0x1c>
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <USER_SPI_read+0x20>
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	e04d      	b.n	8010d64 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010cc8:	4b28      	ldr	r3, [pc, #160]	; (8010d6c <USER_SPI_read+0xc4>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d001      	beq.n	8010cda <USER_SPI_read+0x32>
 8010cd6:	2303      	movs	r3, #3
 8010cd8:	e044      	b.n	8010d64 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8010cda:	4b25      	ldr	r3, [pc, #148]	; (8010d70 <USER_SPI_read+0xc8>)
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	f003 0308 	and.w	r3, r3, #8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d102      	bne.n	8010cec <USER_SPI_read+0x44>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	025b      	lsls	r3, r3, #9
 8010cea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d111      	bne.n	8010d16 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8010cf2:	6879      	ldr	r1, [r7, #4]
 8010cf4:	2011      	movs	r0, #17
 8010cf6:	f7ff fe68 	bl	80109ca <send_cmd>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d129      	bne.n	8010d54 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8010d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	f7ff fe05 	bl	8010914 <rcvr_datablock>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d021      	beq.n	8010d54 <USER_SPI_read+0xac>
			count = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	603b      	str	r3, [r7, #0]
 8010d14:	e01e      	b.n	8010d54 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8010d16:	6879      	ldr	r1, [r7, #4]
 8010d18:	2012      	movs	r0, #18
 8010d1a:	f7ff fe56 	bl	80109ca <send_cmd>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d117      	bne.n	8010d54 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d28:	68b8      	ldr	r0, [r7, #8]
 8010d2a:	f7ff fdf3 	bl	8010914 <rcvr_datablock>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00a      	beq.n	8010d4a <USER_SPI_read+0xa2>
				buff += 512;
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010d3a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	603b      	str	r3, [r7, #0]
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d1ed      	bne.n	8010d24 <USER_SPI_read+0x7c>
 8010d48:	e000      	b.n	8010d4c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8010d4a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	200c      	movs	r0, #12
 8010d50:	f7ff fe3b 	bl	80109ca <send_cmd>
		}
	}
	despiselect();
 8010d54:	f7ff fdb2 	bl	80108bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	bf14      	ite	ne
 8010d5e:	2301      	movne	r3, #1
 8010d60:	2300      	moveq	r3, #0
 8010d62:	b2db      	uxtb	r3, r3
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	20000074 	.word	0x20000074
 8010d70:	20000840 	.word	0x20000840

08010d74 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	4603      	mov	r3, r0
 8010d82:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d102      	bne.n	8010d90 <USER_SPI_write+0x1c>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <USER_SPI_write+0x20>
 8010d90:	2304      	movs	r3, #4
 8010d92:	e063      	b.n	8010e5c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8010d94:	4b33      	ldr	r3, [pc, #204]	; (8010e64 <USER_SPI_write+0xf0>)
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d001      	beq.n	8010da6 <USER_SPI_write+0x32>
 8010da2:	2303      	movs	r3, #3
 8010da4:	e05a      	b.n	8010e5c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8010da6:	4b2f      	ldr	r3, [pc, #188]	; (8010e64 <USER_SPI_write+0xf0>)
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	f003 0304 	and.w	r3, r3, #4
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <USER_SPI_write+0x44>
 8010db4:	2302      	movs	r3, #2
 8010db6:	e051      	b.n	8010e5c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8010db8:	4b2b      	ldr	r3, [pc, #172]	; (8010e68 <USER_SPI_write+0xf4>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	f003 0308 	and.w	r3, r3, #8
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d102      	bne.n	8010dca <USER_SPI_write+0x56>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	025b      	lsls	r3, r3, #9
 8010dc8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d110      	bne.n	8010df2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010dd0:	6879      	ldr	r1, [r7, #4]
 8010dd2:	2018      	movs	r0, #24
 8010dd4:	f7ff fdf9 	bl	80109ca <send_cmd>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d136      	bne.n	8010e4c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010dde:	21fe      	movs	r1, #254	; 0xfe
 8010de0:	68b8      	ldr	r0, [r7, #8]
 8010de2:	f7ff fdc0 	bl	8010966 <xmit_datablock>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d02f      	beq.n	8010e4c <USER_SPI_write+0xd8>
			count = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	603b      	str	r3, [r7, #0]
 8010df0:	e02c      	b.n	8010e4c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010df2:	4b1d      	ldr	r3, [pc, #116]	; (8010e68 <USER_SPI_write+0xf4>)
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	f003 0306 	and.w	r3, r3, #6
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d003      	beq.n	8010e06 <USER_SPI_write+0x92>
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	2097      	movs	r0, #151	; 0x97
 8010e02:	f7ff fde2 	bl	80109ca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010e06:	6879      	ldr	r1, [r7, #4]
 8010e08:	2019      	movs	r0, #25
 8010e0a:	f7ff fdde 	bl	80109ca <send_cmd>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d11b      	bne.n	8010e4c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010e14:	21fc      	movs	r1, #252	; 0xfc
 8010e16:	68b8      	ldr	r0, [r7, #8]
 8010e18:	f7ff fda5 	bl	8010966 <xmit_datablock>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00a      	beq.n	8010e38 <USER_SPI_write+0xc4>
				buff += 512;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010e28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	603b      	str	r3, [r7, #0]
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1ee      	bne.n	8010e14 <USER_SPI_write+0xa0>
 8010e36:	e000      	b.n	8010e3a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010e38:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010e3a:	21fd      	movs	r1, #253	; 0xfd
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f7ff fd92 	bl	8010966 <xmit_datablock>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d101      	bne.n	8010e4c <USER_SPI_write+0xd8>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010e4c:	f7ff fd36 	bl	80108bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bf14      	ite	ne
 8010e56:	2301      	movne	r3, #1
 8010e58:	2300      	moveq	r3, #0
 8010e5a:	b2db      	uxtb	r3, r3
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	20000074 	.word	0x20000074
 8010e68:	20000840 	.word	0x20000840

08010e6c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08c      	sub	sp, #48	; 0x30
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	603a      	str	r2, [r7, #0]
 8010e76:	71fb      	strb	r3, [r7, #7]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d001      	beq.n	8010e86 <USER_SPI_ioctl+0x1a>
 8010e82:	2304      	movs	r3, #4
 8010e84:	e15a      	b.n	801113c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010e86:	4baf      	ldr	r3, [pc, #700]	; (8011144 <USER_SPI_ioctl+0x2d8>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f003 0301 	and.w	r3, r3, #1
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <USER_SPI_ioctl+0x2c>
 8010e94:	2303      	movs	r3, #3
 8010e96:	e151      	b.n	801113c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8010e9e:	79bb      	ldrb	r3, [r7, #6]
 8010ea0:	2b04      	cmp	r3, #4
 8010ea2:	f200 8136 	bhi.w	8011112 <USER_SPI_ioctl+0x2a6>
 8010ea6:	a201      	add	r2, pc, #4	; (adr r2, 8010eac <USER_SPI_ioctl+0x40>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ec1 	.word	0x08010ec1
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08011113 	.word	0x08011113
 8010eb8:	08010f81 	.word	0x08010f81
 8010ebc:	08011077 	.word	0x08011077
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010ec0:	f7ff fd0c 	bl	80108dc <spiselect>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f000 8127 	beq.w	801111a <USER_SPI_ioctl+0x2ae>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010ed2:	e122      	b.n	801111a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	2009      	movs	r0, #9
 8010ed8:	f7ff fd77 	bl	80109ca <send_cmd>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f040 811d 	bne.w	801111e <USER_SPI_ioctl+0x2b2>
 8010ee4:	f107 030c 	add.w	r3, r7, #12
 8010ee8:	2110      	movs	r1, #16
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff fd12 	bl	8010914 <rcvr_datablock>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 8113 	beq.w	801111e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010ef8:	7b3b      	ldrb	r3, [r7, #12]
 8010efa:	099b      	lsrs	r3, r3, #6
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d111      	bne.n	8010f26 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010f02:	7d7b      	ldrb	r3, [r7, #21]
 8010f04:	461a      	mov	r2, r3
 8010f06:	7d3b      	ldrb	r3, [r7, #20]
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	4413      	add	r3, r2
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	7cfb      	ldrb	r3, [r7, #19]
 8010f10:	041b      	lsls	r3, r3, #16
 8010f12:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010f16:	4413      	add	r3, r2
 8010f18:	3301      	adds	r3, #1
 8010f1a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	029a      	lsls	r2, r3, #10
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	e028      	b.n	8010f78 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010f26:	7c7b      	ldrb	r3, [r7, #17]
 8010f28:	f003 030f 	and.w	r3, r3, #15
 8010f2c:	b2da      	uxtb	r2, r3
 8010f2e:	7dbb      	ldrb	r3, [r7, #22]
 8010f30:	09db      	lsrs	r3, r3, #7
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	4413      	add	r3, r2
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	7d7b      	ldrb	r3, [r7, #21]
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	f003 0306 	and.w	r3, r3, #6
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	4413      	add	r3, r2
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	3302      	adds	r3, #2
 8010f4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010f4e:	7d3b      	ldrb	r3, [r7, #20]
 8010f50:	099b      	lsrs	r3, r3, #6
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	461a      	mov	r2, r3
 8010f56:	7cfb      	ldrb	r3, [r7, #19]
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	441a      	add	r2, r3
 8010f5c:	7cbb      	ldrb	r3, [r7, #18]
 8010f5e:	029b      	lsls	r3, r3, #10
 8010f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010f64:	4413      	add	r3, r2
 8010f66:	3301      	adds	r3, #1
 8010f68:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8010f6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010f6e:	3b09      	subs	r3, #9
 8010f70:	69fa      	ldr	r2, [r7, #28]
 8010f72:	409a      	lsls	r2, r3
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010f7e:	e0ce      	b.n	801111e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8010f80:	4b71      	ldr	r3, [pc, #452]	; (8011148 <USER_SPI_ioctl+0x2dc>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	f003 0304 	and.w	r3, r3, #4
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d031      	beq.n	8010ff0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	208d      	movs	r0, #141	; 0x8d
 8010f90:	f7ff fd1b 	bl	80109ca <send_cmd>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f040 80c3 	bne.w	8011122 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8010f9c:	20ff      	movs	r0, #255	; 0xff
 8010f9e:	f7ff fc1d 	bl	80107dc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010fa2:	f107 030c 	add.w	r3, r7, #12
 8010fa6:	2110      	movs	r1, #16
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7ff fcb3 	bl	8010914 <rcvr_datablock>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f000 80b6 	beq.w	8011122 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8010fb6:	2330      	movs	r3, #48	; 0x30
 8010fb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010fbc:	e007      	b.n	8010fce <USER_SPI_ioctl+0x162>
 8010fbe:	20ff      	movs	r0, #255	; 0xff
 8010fc0:	f7ff fc0c 	bl	80107dc <xchg_spi>
 8010fc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010fce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1f3      	bne.n	8010fbe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010fd6:	7dbb      	ldrb	r3, [r7, #22]
 8010fd8:	091b      	lsrs	r3, r3, #4
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	461a      	mov	r2, r3
 8010fde:	2310      	movs	r3, #16
 8010fe0:	fa03 f202 	lsl.w	r2, r3, r2
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8010fee:	e098      	b.n	8011122 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	2009      	movs	r0, #9
 8010ff4:	f7ff fce9 	bl	80109ca <send_cmd>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f040 8091 	bne.w	8011122 <USER_SPI_ioctl+0x2b6>
 8011000:	f107 030c 	add.w	r3, r7, #12
 8011004:	2110      	movs	r1, #16
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff fc84 	bl	8010914 <rcvr_datablock>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 8087 	beq.w	8011122 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8011014:	4b4c      	ldr	r3, [pc, #304]	; (8011148 <USER_SPI_ioctl+0x2dc>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	f003 0302 	and.w	r3, r3, #2
 801101c:	2b00      	cmp	r3, #0
 801101e:	d012      	beq.n	8011046 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8011020:	7dbb      	ldrb	r3, [r7, #22]
 8011022:	005b      	lsls	r3, r3, #1
 8011024:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8011028:	7dfa      	ldrb	r2, [r7, #23]
 801102a:	09d2      	lsrs	r2, r2, #7
 801102c:	b2d2      	uxtb	r2, r2
 801102e:	4413      	add	r3, r2
 8011030:	1c5a      	adds	r2, r3, #1
 8011032:	7e7b      	ldrb	r3, [r7, #25]
 8011034:	099b      	lsrs	r3, r3, #6
 8011036:	b2db      	uxtb	r3, r3
 8011038:	3b01      	subs	r3, #1
 801103a:	fa02 f303 	lsl.w	r3, r2, r3
 801103e:	461a      	mov	r2, r3
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	e013      	b.n	801106e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8011046:	7dbb      	ldrb	r3, [r7, #22]
 8011048:	109b      	asrs	r3, r3, #2
 801104a:	b29b      	uxth	r3, r3
 801104c:	f003 031f 	and.w	r3, r3, #31
 8011050:	3301      	adds	r3, #1
 8011052:	7dfa      	ldrb	r2, [r7, #23]
 8011054:	00d2      	lsls	r2, r2, #3
 8011056:	f002 0218 	and.w	r2, r2, #24
 801105a:	7df9      	ldrb	r1, [r7, #23]
 801105c:	0949      	lsrs	r1, r1, #5
 801105e:	b2c9      	uxtb	r1, r1
 8011060:	440a      	add	r2, r1
 8011062:	3201      	adds	r2, #1
 8011064:	fb02 f303 	mul.w	r3, r2, r3
 8011068:	461a      	mov	r2, r3
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8011074:	e055      	b.n	8011122 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8011076:	4b34      	ldr	r3, [pc, #208]	; (8011148 <USER_SPI_ioctl+0x2dc>)
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 0306 	and.w	r3, r3, #6
 801107e:	2b00      	cmp	r3, #0
 8011080:	d051      	beq.n	8011126 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8011082:	f107 020c 	add.w	r2, r7, #12
 8011086:	79fb      	ldrb	r3, [r7, #7]
 8011088:	210b      	movs	r1, #11
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff feee 	bl	8010e6c <USER_SPI_ioctl>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d149      	bne.n	801112a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8011096:	7b3b      	ldrb	r3, [r7, #12]
 8011098:	099b      	lsrs	r3, r3, #6
 801109a:	b2db      	uxtb	r3, r3
 801109c:	2b00      	cmp	r3, #0
 801109e:	d104      	bne.n	80110aa <USER_SPI_ioctl+0x23e>
 80110a0:	7dbb      	ldrb	r3, [r7, #22]
 80110a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d041      	beq.n	801112e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	623b      	str	r3, [r7, #32]
 80110ae:	6a3b      	ldr	r3, [r7, #32]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80110ba:	4b23      	ldr	r3, [pc, #140]	; (8011148 <USER_SPI_ioctl+0x2dc>)
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 0308 	and.w	r3, r3, #8
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d105      	bne.n	80110d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80110c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c8:	025b      	lsls	r3, r3, #9
 80110ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	025b      	lsls	r3, r3, #9
 80110d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80110d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80110d4:	2020      	movs	r0, #32
 80110d6:	f7ff fc78 	bl	80109ca <send_cmd>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d128      	bne.n	8011132 <USER_SPI_ioctl+0x2c6>
 80110e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110e2:	2021      	movs	r0, #33	; 0x21
 80110e4:	f7ff fc71 	bl	80109ca <send_cmd>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d121      	bne.n	8011132 <USER_SPI_ioctl+0x2c6>
 80110ee:	2100      	movs	r1, #0
 80110f0:	2026      	movs	r0, #38	; 0x26
 80110f2:	f7ff fc6a 	bl	80109ca <send_cmd>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d11a      	bne.n	8011132 <USER_SPI_ioctl+0x2c6>
 80110fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8011100:	f7ff fbb9 	bl	8010876 <wait_ready>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d013      	beq.n	8011132 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 801110a:	2300      	movs	r3, #0
 801110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8011110:	e00f      	b.n	8011132 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8011112:	2304      	movs	r3, #4
 8011114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011118:	e00c      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		break;
 801111a:	bf00      	nop
 801111c:	e00a      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		break;
 801111e:	bf00      	nop
 8011120:	e008      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		break;
 8011122:	bf00      	nop
 8011124:	e006      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8011126:	bf00      	nop
 8011128:	e004      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 801112a:	bf00      	nop
 801112c:	e002      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801112e:	bf00      	nop
 8011130:	e000      	b.n	8011134 <USER_SPI_ioctl+0x2c8>
		break;
 8011132:	bf00      	nop
	}

	despiselect();
 8011134:	f7ff fbc2 	bl	80108bc <despiselect>

	return res;
 8011138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801113c:	4618      	mov	r0, r3
 801113e:	3730      	adds	r7, #48	; 0x30
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	20000074 	.word	0x20000074
 8011148:	20000840 	.word	0x20000840

0801114c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011158:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801115c:	f008 fb74 	bl	8019848 <USBD_static_malloc>
 8011160:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d105      	bne.n	8011174 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011170:	2302      	movs	r3, #2
 8011172:	e066      	b.n	8011242 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	7c1b      	ldrb	r3, [r3, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d119      	bne.n	80111b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011188:	2202      	movs	r2, #2
 801118a:	2181      	movs	r1, #129	; 0x81
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f008 fa38 	bl	8019602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011198:	f44f 7300 	mov.w	r3, #512	; 0x200
 801119c:	2202      	movs	r2, #2
 801119e:	2101      	movs	r1, #1
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f008 fa2e 	bl	8019602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2210      	movs	r2, #16
 80111b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80111b6:	e016      	b.n	80111e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80111b8:	2340      	movs	r3, #64	; 0x40
 80111ba:	2202      	movs	r2, #2
 80111bc:	2181      	movs	r1, #129	; 0x81
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f008 fa1f 	bl	8019602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2201      	movs	r2, #1
 80111c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80111ca:	2340      	movs	r3, #64	; 0x40
 80111cc:	2202      	movs	r2, #2
 80111ce:	2101      	movs	r1, #1
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f008 fa16 	bl	8019602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2201      	movs	r2, #1
 80111da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2210      	movs	r2, #16
 80111e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111e6:	2308      	movs	r3, #8
 80111e8:	2203      	movs	r2, #3
 80111ea:	2182      	movs	r1, #130	; 0x82
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f008 fa08 	bl	8019602 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2201      	movs	r2, #1
 80111f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	7c1b      	ldrb	r3, [r3, #16]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d109      	bne.n	8011230 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011226:	2101      	movs	r1, #1
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f008 fad9 	bl	80197e0 <USBD_LL_PrepareReceive>
 801122e:	e007      	b.n	8011240 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011236:	2340      	movs	r3, #64	; 0x40
 8011238:	2101      	movs	r1, #1
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f008 fad0 	bl	80197e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	460b      	mov	r3, r1
 8011254:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011256:	2181      	movs	r1, #129	; 0x81
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f008 f9f8 	bl	801964e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011264:	2101      	movs	r1, #1
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f008 f9f1 	bl	801964e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011274:	2182      	movs	r1, #130	; 0x82
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f008 f9e9 	bl	801964e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00e      	beq.n	80112b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112a6:	4618      	mov	r0, r3
 80112a8:	f008 fadc 	bl	8019864 <USBD_static_free>
    pdev->pClassData = NULL;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
	...

080112c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80112d2:	2300      	movs	r3, #0
 80112d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80112d6:	2300      	movs	r3, #0
 80112d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80112e4:	2303      	movs	r3, #3
 80112e6:	e0af      	b.n	8011448 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d03f      	beq.n	8011374 <USBD_CDC_Setup+0xb4>
 80112f4:	2b20      	cmp	r3, #32
 80112f6:	f040 809f 	bne.w	8011438 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	88db      	ldrh	r3, [r3, #6]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d02e      	beq.n	8011360 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	b25b      	sxtb	r3, r3
 8011308:	2b00      	cmp	r3, #0
 801130a:	da16      	bge.n	801133a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011312:	689b      	ldr	r3, [r3, #8]
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011318:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	88d2      	ldrh	r2, [r2, #6]
 801131e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	88db      	ldrh	r3, [r3, #6]
 8011324:	2b07      	cmp	r3, #7
 8011326:	bf28      	it	cs
 8011328:	2307      	movcs	r3, #7
 801132a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	89fa      	ldrh	r2, [r7, #14]
 8011330:	4619      	mov	r1, r3
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f001 fae9 	bl	801290a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011338:	e085      	b.n	8011446 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	785a      	ldrb	r2, [r3, #1]
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	88db      	ldrh	r3, [r3, #6]
 8011348:	b2da      	uxtb	r2, r3
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011350:	6939      	ldr	r1, [r7, #16]
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	88db      	ldrh	r3, [r3, #6]
 8011356:	461a      	mov	r2, r3
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f001 fb02 	bl	8012962 <USBD_CtlPrepareRx>
      break;
 801135e:	e072      	b.n	8011446 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	683a      	ldr	r2, [r7, #0]
 801136a:	7850      	ldrb	r0, [r2, #1]
 801136c:	2200      	movs	r2, #0
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	4798      	blx	r3
      break;
 8011372:	e068      	b.n	8011446 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	785b      	ldrb	r3, [r3, #1]
 8011378:	2b0b      	cmp	r3, #11
 801137a:	d852      	bhi.n	8011422 <USBD_CDC_Setup+0x162>
 801137c:	a201      	add	r2, pc, #4	; (adr r2, 8011384 <USBD_CDC_Setup+0xc4>)
 801137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011382:	bf00      	nop
 8011384:	080113b5 	.word	0x080113b5
 8011388:	08011431 	.word	0x08011431
 801138c:	08011423 	.word	0x08011423
 8011390:	08011423 	.word	0x08011423
 8011394:	08011423 	.word	0x08011423
 8011398:	08011423 	.word	0x08011423
 801139c:	08011423 	.word	0x08011423
 80113a0:	08011423 	.word	0x08011423
 80113a4:	08011423 	.word	0x08011423
 80113a8:	08011423 	.word	0x08011423
 80113ac:	080113df 	.word	0x080113df
 80113b0:	08011409 	.word	0x08011409
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b03      	cmp	r3, #3
 80113be:	d107      	bne.n	80113d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80113c0:	f107 030a 	add.w	r3, r7, #10
 80113c4:	2202      	movs	r2, #2
 80113c6:	4619      	mov	r1, r3
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f001 fa9e 	bl	801290a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113ce:	e032      	b.n	8011436 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f001 fa28 	bl	8012828 <USBD_CtlError>
            ret = USBD_FAIL;
 80113d8:	2303      	movs	r3, #3
 80113da:	75fb      	strb	r3, [r7, #23]
          break;
 80113dc:	e02b      	b.n	8011436 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d107      	bne.n	80113fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80113ea:	f107 030d 	add.w	r3, r7, #13
 80113ee:	2201      	movs	r2, #1
 80113f0:	4619      	mov	r1, r3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 fa89 	bl	801290a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80113f8:	e01d      	b.n	8011436 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80113fa:	6839      	ldr	r1, [r7, #0]
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f001 fa13 	bl	8012828 <USBD_CtlError>
            ret = USBD_FAIL;
 8011402:	2303      	movs	r3, #3
 8011404:	75fb      	strb	r3, [r7, #23]
          break;
 8011406:	e016      	b.n	8011436 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801140e:	b2db      	uxtb	r3, r3
 8011410:	2b03      	cmp	r3, #3
 8011412:	d00f      	beq.n	8011434 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011414:	6839      	ldr	r1, [r7, #0]
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f001 fa06 	bl	8012828 <USBD_CtlError>
            ret = USBD_FAIL;
 801141c:	2303      	movs	r3, #3
 801141e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011420:	e008      	b.n	8011434 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011422:	6839      	ldr	r1, [r7, #0]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f001 f9ff 	bl	8012828 <USBD_CtlError>
          ret = USBD_FAIL;
 801142a:	2303      	movs	r3, #3
 801142c:	75fb      	strb	r3, [r7, #23]
          break;
 801142e:	e002      	b.n	8011436 <USBD_CDC_Setup+0x176>
          break;
 8011430:	bf00      	nop
 8011432:	e008      	b.n	8011446 <USBD_CDC_Setup+0x186>
          break;
 8011434:	bf00      	nop
      }
      break;
 8011436:	e006      	b.n	8011446 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011438:	6839      	ldr	r1, [r7, #0]
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f001 f9f4 	bl	8012828 <USBD_CtlError>
      ret = USBD_FAIL;
 8011440:	2303      	movs	r3, #3
 8011442:	75fb      	strb	r3, [r7, #23]
      break;
 8011444:	bf00      	nop
  }

  return (uint8_t)ret;
 8011446:	7dfb      	ldrb	r3, [r7, #23]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3718      	adds	r7, #24
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011462:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801146e:	2303      	movs	r3, #3
 8011470:	e04f      	b.n	8011512 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011478:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801147a:	78fa      	ldrb	r2, [r7, #3]
 801147c:	6879      	ldr	r1, [r7, #4]
 801147e:	4613      	mov	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	440b      	add	r3, r1
 8011488:	3318      	adds	r3, #24
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d029      	beq.n	80114e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011490:	78fa      	ldrb	r2, [r7, #3]
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	4613      	mov	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	440b      	add	r3, r1
 801149e:	3318      	adds	r3, #24
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	78f9      	ldrb	r1, [r7, #3]
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	460b      	mov	r3, r1
 80114a8:	00db      	lsls	r3, r3, #3
 80114aa:	1a5b      	subs	r3, r3, r1
 80114ac:	009b      	lsls	r3, r3, #2
 80114ae:	4403      	add	r3, r0
 80114b0:	3344      	adds	r3, #68	; 0x44
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80114b8:	fb03 f301 	mul.w	r3, r3, r1
 80114bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d110      	bne.n	80114e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80114c2:	78fa      	ldrb	r2, [r7, #3]
 80114c4:	6879      	ldr	r1, [r7, #4]
 80114c6:	4613      	mov	r3, r2
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4413      	add	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	440b      	add	r3, r1
 80114d0:	3318      	adds	r3, #24
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80114d6:	78f9      	ldrb	r1, [r7, #3]
 80114d8:	2300      	movs	r3, #0
 80114da:	2200      	movs	r2, #0
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f008 f95e 	bl	801979e <USBD_LL_Transmit>
 80114e2:	e015      	b.n	8011510 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	2200      	movs	r2, #0
 80114e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00b      	beq.n	8011510 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801150c:	78fa      	ldrb	r2, [r7, #3]
 801150e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	460b      	mov	r3, r1
 8011524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801152c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011534:	2b00      	cmp	r3, #0
 8011536:	d101      	bne.n	801153c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011538:	2303      	movs	r3, #3
 801153a:	e015      	b.n	8011568 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801153c:	78fb      	ldrb	r3, [r7, #3]
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f008 f96e 	bl	8019822 <USBD_LL_GetRxDataSize>
 8011546:	4602      	mov	r2, r0
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801155c:	68fa      	ldr	r2, [r7, #12]
 801155e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011562:	4611      	mov	r1, r2
 8011564:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801157e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d101      	bne.n	801158a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011586:	2303      	movs	r3, #3
 8011588:	e01b      	b.n	80115c2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d015      	beq.n	80115c0 <USBD_CDC_EP0_RxReady+0x50>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801159a:	2bff      	cmp	r3, #255	; 0xff
 801159c:	d010      	beq.n	80115c0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80115ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80115b4:	b292      	uxth	r2, r2
 80115b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	22ff      	movs	r2, #255	; 0xff
 80115bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
	...

080115cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2243      	movs	r2, #67	; 0x43
 80115d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80115da:	4b03      	ldr	r3, [pc, #12]	; (80115e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80115dc:	4618      	mov	r0, r3
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr
 80115e8:	20000100 	.word	0x20000100

080115ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2243      	movs	r2, #67	; 0x43
 80115f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80115fa:	4b03      	ldr	r3, [pc, #12]	; (8011608 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	200000bc 	.word	0x200000bc

0801160c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2243      	movs	r2, #67	; 0x43
 8011618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801161a:	4b03      	ldr	r3, [pc, #12]	; (8011628 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801161c:	4618      	mov	r0, r3
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	20000144 	.word	0x20000144

0801162c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	220a      	movs	r2, #10
 8011638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801163c:	4618      	mov	r0, r3
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	20000078 	.word	0x20000078

0801164c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d101      	bne.n	8011660 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801165c:	2303      	movs	r3, #3
 801165e:	e004      	b.n	801166a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011668:	2300      	movs	r3, #0
}
 801166a:	4618      	mov	r0, r3
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr

08011676 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011676:	b480      	push	{r7}
 8011678:	b087      	sub	sp, #28
 801167a:	af00      	add	r7, sp, #0
 801167c:	60f8      	str	r0, [r7, #12]
 801167e:	60b9      	str	r1, [r7, #8]
 8011680:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011688:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d101      	bne.n	8011694 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011690:	2303      	movs	r3, #3
 8011692:	e008      	b.n	80116a6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	371c      	adds	r7, #28
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80116b2:	b480      	push	{r7}
 80116b4:	b085      	sub	sp, #20
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d101      	bne.n	80116ce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80116ca:	2303      	movs	r3, #3
 80116cc:	e004      	b.n	80116d8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	683a      	ldr	r2, [r7, #0]
 80116d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80116d6:	2300      	movs	r3, #0
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3714      	adds	r7, #20
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80116fe:	2303      	movs	r3, #3
 8011700:	e016      	b.n	8011730 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	7c1b      	ldrb	r3, [r3, #16]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d109      	bne.n	801171e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011714:	2101      	movs	r1, #1
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f008 f862 	bl	80197e0 <USBD_LL_PrepareReceive>
 801171c:	e007      	b.n	801172e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011724:	2340      	movs	r3, #64	; 0x40
 8011726:	2101      	movs	r1, #1
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f008 f859 	bl	80197e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d101      	bne.n	8011750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801174c:	2303      	movs	r3, #3
 801174e:	e01f      	b.n	8011790 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2200      	movs	r2, #0
 801175c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d003      	beq.n	8011776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2201      	movs	r2, #1
 801177a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	79fa      	ldrb	r2, [r7, #7]
 8011782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f007 fed5 	bl	8019534 <USBD_LL_Init>
 801178a:	4603      	mov	r3, r0
 801178c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80117a2:	2300      	movs	r3, #0
 80117a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d101      	bne.n	80117b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80117ac:	2303      	movs	r3, #3
 80117ae:	e016      	b.n	80117de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d00b      	beq.n	80117dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117cc:	f107 020e 	add.w	r2, r7, #14
 80117d0:	4610      	mov	r0, r2
 80117d2:	4798      	blx	r3
 80117d4:	4602      	mov	r2, r0
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80117dc:	2300      	movs	r3, #0
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b082      	sub	sp, #8
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f007 feec 	bl	80195cc <USBD_LL_Start>
 80117f4:	4603      	mov	r3, r0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80117fe:	b480      	push	{r7}
 8011800:	b083      	sub	sp, #12
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011820:	2303      	movs	r3, #3
 8011822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801182a:	2b00      	cmp	r3, #0
 801182c:	d009      	beq.n	8011842 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	78fa      	ldrb	r2, [r7, #3]
 8011838:	4611      	mov	r1, r2
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	4798      	blx	r3
 801183e:	4603      	mov	r3, r0
 8011840:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801185e:	2b00      	cmp	r3, #0
 8011860:	d007      	beq.n	8011872 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	78fa      	ldrb	r2, [r7, #3]
 801186c:	4611      	mov	r1, r2
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	4798      	blx	r3
  }

  return USBD_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801188c:	6839      	ldr	r1, [r7, #0]
 801188e:	4618      	mov	r0, r3
 8011890:	f000 ff90 	bl	80127b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2201      	movs	r2, #1
 8011898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80118a2:	461a      	mov	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80118b0:	f003 031f 	and.w	r3, r3, #31
 80118b4:	2b02      	cmp	r3, #2
 80118b6:	d01a      	beq.n	80118ee <USBD_LL_SetupStage+0x72>
 80118b8:	2b02      	cmp	r3, #2
 80118ba:	d822      	bhi.n	8011902 <USBD_LL_SetupStage+0x86>
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <USBD_LL_SetupStage+0x4a>
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d00a      	beq.n	80118da <USBD_LL_SetupStage+0x5e>
 80118c4:	e01d      	b.n	8011902 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118cc:	4619      	mov	r1, r3
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 fa62 	bl	8011d98 <USBD_StdDevReq>
 80118d4:	4603      	mov	r3, r0
 80118d6:	73fb      	strb	r3, [r7, #15]
      break;
 80118d8:	e020      	b.n	801191c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118e0:	4619      	mov	r1, r3
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fac6 	bl	8011e74 <USBD_StdItfReq>
 80118e8:	4603      	mov	r3, r0
 80118ea:	73fb      	strb	r3, [r7, #15]
      break;
 80118ec:	e016      	b.n	801191c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118f4:	4619      	mov	r1, r3
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fb05 	bl	8011f06 <USBD_StdEPReq>
 80118fc:	4603      	mov	r3, r0
 80118fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011900:	e00c      	b.n	801191c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011908:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801190c:	b2db      	uxtb	r3, r3
 801190e:	4619      	mov	r1, r3
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f007 febb 	bl	801968c <USBD_LL_StallEP>
 8011916:	4603      	mov	r3, r0
 8011918:	73fb      	strb	r3, [r7, #15]
      break;
 801191a:	bf00      	nop
  }

  return ret;
 801191c:	7bfb      	ldrb	r3, [r7, #15]
}
 801191e:	4618      	mov	r0, r3
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b086      	sub	sp, #24
 801192a:	af00      	add	r7, sp, #0
 801192c:	60f8      	str	r0, [r7, #12]
 801192e:	460b      	mov	r3, r1
 8011930:	607a      	str	r2, [r7, #4]
 8011932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011934:	7afb      	ldrb	r3, [r7, #11]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d138      	bne.n	80119ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011940:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011948:	2b03      	cmp	r3, #3
 801194a:	d14a      	bne.n	80119e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	689a      	ldr	r2, [r3, #8]
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	429a      	cmp	r2, r3
 8011956:	d913      	bls.n	8011980 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	689a      	ldr	r2, [r3, #8]
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	1ad2      	subs	r2, r2, r3
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	68da      	ldr	r2, [r3, #12]
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	4293      	cmp	r3, r2
 8011970:	bf28      	it	cs
 8011972:	4613      	movcs	r3, r2
 8011974:	461a      	mov	r2, r3
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f001 f80f 	bl	801299c <USBD_CtlContinueRx>
 801197e:	e030      	b.n	80119e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b03      	cmp	r3, #3
 801198a:	d10b      	bne.n	80119a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d005      	beq.n	80119a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f001 f80a 	bl	80129be <USBD_CtlSendStatus>
 80119aa:	e01a      	b.n	80119e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	2b03      	cmp	r3, #3
 80119b6:	d114      	bne.n	80119e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119be:	699b      	ldr	r3, [r3, #24]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00e      	beq.n	80119e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ca:	699b      	ldr	r3, [r3, #24]
 80119cc:	7afa      	ldrb	r2, [r7, #11]
 80119ce:	4611      	mov	r1, r2
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	4798      	blx	r3
 80119d4:	4603      	mov	r3, r0
 80119d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80119d8:	7dfb      	ldrb	r3, [r7, #23]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d001      	beq.n	80119e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80119de:	7dfb      	ldrb	r3, [r7, #23]
 80119e0:	e000      	b.n	80119e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3718      	adds	r7, #24
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	460b      	mov	r3, r1
 80119f6:	607a      	str	r2, [r7, #4]
 80119f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d16b      	bne.n	8011ad8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	3314      	adds	r3, #20
 8011a04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d156      	bne.n	8011abe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	689a      	ldr	r2, [r3, #8]
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d914      	bls.n	8011a46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	689a      	ldr	r2, [r3, #8]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	1ad2      	subs	r2, r2, r3
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	6879      	ldr	r1, [r7, #4]
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 ff84 	bl	8012940 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a38:	2300      	movs	r3, #0
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	f007 fece 	bl	80197e0 <USBD_LL_PrepareReceive>
 8011a44:	e03b      	b.n	8011abe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	68da      	ldr	r2, [r3, #12]
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d11c      	bne.n	8011a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	685a      	ldr	r2, [r3, #4]
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d316      	bcc.n	8011a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	685a      	ldr	r2, [r3, #4]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d20f      	bcs.n	8011a8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	2100      	movs	r1, #0
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 ff65 	bl	8012940 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2200      	movs	r2, #0
 8011a82:	2100      	movs	r1, #0
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f007 feab 	bl	80197e0 <USBD_LL_PrepareReceive>
 8011a8a:	e018      	b.n	8011abe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b03      	cmp	r3, #3
 8011a96:	d10b      	bne.n	8011ab0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d005      	beq.n	8011ab0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aaa:	68db      	ldr	r3, [r3, #12]
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ab0:	2180      	movs	r1, #128	; 0x80
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f007 fdea 	bl	801968c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f000 ff93 	bl	80129e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d122      	bne.n	8011b0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7ff fe98 	bl	80117fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ad6:	e01a      	b.n	8011b0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b03      	cmp	r3, #3
 8011ae2:	d114      	bne.n	8011b0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aea:	695b      	ldr	r3, [r3, #20]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00e      	beq.n	8011b0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011af6:	695b      	ldr	r3, [r3, #20]
 8011af8:	7afa      	ldrb	r2, [r7, #11]
 8011afa:	4611      	mov	r1, r2
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	4798      	blx	r3
 8011b00:	4603      	mov	r3, r0
 8011b02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011b04:	7dfb      	ldrb	r3, [r7, #23]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d001      	beq.n	8011b0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	e000      	b.n	8011b10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3718      	adds	r7, #24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2201      	movs	r2, #1
 8011b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d101      	bne.n	8011b4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	e02f      	b.n	8011bac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00f      	beq.n	8011b76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d009      	beq.n	8011b76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	6852      	ldr	r2, [r2, #4]
 8011b6e:	b2d2      	uxtb	r2, r2
 8011b70:	4611      	mov	r1, r2
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f007 fd40 	bl	8019602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2201      	movs	r2, #1
 8011b86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2240      	movs	r2, #64	; 0x40
 8011b8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b92:	2340      	movs	r3, #64	; 0x40
 8011b94:	2200      	movs	r2, #0
 8011b96:	2180      	movs	r1, #128	; 0x80
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f007 fd32 	bl	8019602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2240      	movs	r2, #64	; 0x40
 8011ba8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	78fa      	ldrb	r2, [r7, #3]
 8011bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011bc6:	2300      	movs	r3, #0
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2204      	movs	r2, #4
 8011bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011bf2:	2300      	movs	r3, #0
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	2b04      	cmp	r3, #4
 8011c12:	d106      	bne.n	8011c22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011c1a:	b2da      	uxtb	r2, r3
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr

08011c30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d101      	bne.n	8011c46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011c42:	2303      	movs	r3, #3
 8011c44:	e012      	b.n	8011c6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b03      	cmp	r3, #3
 8011c50:	d10b      	bne.n	8011c6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c58:	69db      	ldr	r3, [r3, #28]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d005      	beq.n	8011c6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c64:	69db      	ldr	r3, [r3, #28]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3708      	adds	r7, #8
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	e014      	b.n	8011cb8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b03      	cmp	r3, #3
 8011c98:	d10d      	bne.n	8011cb6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca0:	6a1b      	ldr	r3, [r3, #32]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d007      	beq.n	8011cb6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cac:	6a1b      	ldr	r3, [r3, #32]
 8011cae:	78fa      	ldrb	r2, [r7, #3]
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d101      	bne.n	8011cda <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011cd6:	2303      	movs	r3, #3
 8011cd8:	e014      	b.n	8011d04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d10d      	bne.n	8011d02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfa:	78fa      	ldrb	r2, [r7, #3]
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011d02:	2300      	movs	r3, #0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d14:	2300      	movs	r3, #0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr

08011d22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b082      	sub	sp, #8
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d009      	beq.n	8011d50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	6852      	ldr	r2, [r2, #4]
 8011d48:	b2d2      	uxtb	r2, r2
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	4798      	blx	r3
  }

  return USBD_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3708      	adds	r7, #8
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011d5a:	b480      	push	{r7}
 8011d5c:	b087      	sub	sp, #28
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	3301      	adds	r3, #1
 8011d70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011d78:	8a3b      	ldrh	r3, [r7, #16]
 8011d7a:	021b      	lsls	r3, r3, #8
 8011d7c:	b21a      	sxth	r2, r3
 8011d7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d82:	4313      	orrs	r3, r2
 8011d84:	b21b      	sxth	r3, r3
 8011d86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011d88:	89fb      	ldrh	r3, [r7, #14]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	371c      	adds	r7, #28
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
	...

08011d98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b084      	sub	sp, #16
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dae:	2b40      	cmp	r3, #64	; 0x40
 8011db0:	d005      	beq.n	8011dbe <USBD_StdDevReq+0x26>
 8011db2:	2b40      	cmp	r3, #64	; 0x40
 8011db4:	d853      	bhi.n	8011e5e <USBD_StdDevReq+0xc6>
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00b      	beq.n	8011dd2 <USBD_StdDevReq+0x3a>
 8011dba:	2b20      	cmp	r3, #32
 8011dbc:	d14f      	bne.n	8011e5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	4798      	blx	r3
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]
      break;
 8011dd0:	e04a      	b.n	8011e68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	785b      	ldrb	r3, [r3, #1]
 8011dd6:	2b09      	cmp	r3, #9
 8011dd8:	d83b      	bhi.n	8011e52 <USBD_StdDevReq+0xba>
 8011dda:	a201      	add	r2, pc, #4	; (adr r2, 8011de0 <USBD_StdDevReq+0x48>)
 8011ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de0:	08011e35 	.word	0x08011e35
 8011de4:	08011e49 	.word	0x08011e49
 8011de8:	08011e53 	.word	0x08011e53
 8011dec:	08011e3f 	.word	0x08011e3f
 8011df0:	08011e53 	.word	0x08011e53
 8011df4:	08011e13 	.word	0x08011e13
 8011df8:	08011e09 	.word	0x08011e09
 8011dfc:	08011e53 	.word	0x08011e53
 8011e00:	08011e2b 	.word	0x08011e2b
 8011e04:	08011e1d 	.word	0x08011e1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e08:	6839      	ldr	r1, [r7, #0]
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 f9de 	bl	80121cc <USBD_GetDescriptor>
          break;
 8011e10:	e024      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 fb43 	bl	80124a0 <USBD_SetAddress>
          break;
 8011e1a:	e01f      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011e1c:	6839      	ldr	r1, [r7, #0]
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 fb82 	bl	8012528 <USBD_SetConfig>
 8011e24:	4603      	mov	r3, r0
 8011e26:	73fb      	strb	r3, [r7, #15]
          break;
 8011e28:	e018      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011e2a:	6839      	ldr	r1, [r7, #0]
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f000 fc21 	bl	8012674 <USBD_GetConfig>
          break;
 8011e32:	e013      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fc52 	bl	80126e0 <USBD_GetStatus>
          break;
 8011e3c:	e00e      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011e3e:	6839      	ldr	r1, [r7, #0]
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 fc81 	bl	8012748 <USBD_SetFeature>
          break;
 8011e46:	e009      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fc90 	bl	8012770 <USBD_ClrFeature>
          break;
 8011e50:	e004      	b.n	8011e5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011e52:	6839      	ldr	r1, [r7, #0]
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f000 fce7 	bl	8012828 <USBD_CtlError>
          break;
 8011e5a:	bf00      	nop
      }
      break;
 8011e5c:	e004      	b.n	8011e68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011e5e:	6839      	ldr	r1, [r7, #0]
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f000 fce1 	bl	8012828 <USBD_CtlError>
      break;
 8011e66:	bf00      	nop
  }

  return ret;
 8011e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop

08011e74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e8a:	2b40      	cmp	r3, #64	; 0x40
 8011e8c:	d005      	beq.n	8011e9a <USBD_StdItfReq+0x26>
 8011e8e:	2b40      	cmp	r3, #64	; 0x40
 8011e90:	d82f      	bhi.n	8011ef2 <USBD_StdItfReq+0x7e>
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d001      	beq.n	8011e9a <USBD_StdItfReq+0x26>
 8011e96:	2b20      	cmp	r3, #32
 8011e98:	d12b      	bne.n	8011ef2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	2b02      	cmp	r3, #2
 8011ea6:	d81d      	bhi.n	8011ee4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	889b      	ldrh	r3, [r3, #4]
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d813      	bhi.n	8011eda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	6839      	ldr	r1, [r7, #0]
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	4798      	blx	r3
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	88db      	ldrh	r3, [r3, #6]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d110      	bne.n	8011eee <USBD_StdItfReq+0x7a>
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d10d      	bne.n	8011eee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fd73 	bl	80129be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011ed8:	e009      	b.n	8011eee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011eda:	6839      	ldr	r1, [r7, #0]
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 fca3 	bl	8012828 <USBD_CtlError>
          break;
 8011ee2:	e004      	b.n	8011eee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 fc9e 	bl	8012828 <USBD_CtlError>
          break;
 8011eec:	e000      	b.n	8011ef0 <USBD_StdItfReq+0x7c>
          break;
 8011eee:	bf00      	nop
      }
      break;
 8011ef0:	e004      	b.n	8011efc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 fc97 	bl	8012828 <USBD_CtlError>
      break;
 8011efa:	bf00      	nop
  }

  return ret;
 8011efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b084      	sub	sp, #16
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
 8011f0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	889b      	ldrh	r3, [r3, #4]
 8011f18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f22:	2b40      	cmp	r3, #64	; 0x40
 8011f24:	d007      	beq.n	8011f36 <USBD_StdEPReq+0x30>
 8011f26:	2b40      	cmp	r3, #64	; 0x40
 8011f28:	f200 8145 	bhi.w	80121b6 <USBD_StdEPReq+0x2b0>
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00c      	beq.n	8011f4a <USBD_StdEPReq+0x44>
 8011f30:	2b20      	cmp	r3, #32
 8011f32:	f040 8140 	bne.w	80121b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	6839      	ldr	r1, [r7, #0]
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	4798      	blx	r3
 8011f44:	4603      	mov	r3, r0
 8011f46:	73fb      	strb	r3, [r7, #15]
      break;
 8011f48:	e13a      	b.n	80121c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	785b      	ldrb	r3, [r3, #1]
 8011f4e:	2b03      	cmp	r3, #3
 8011f50:	d007      	beq.n	8011f62 <USBD_StdEPReq+0x5c>
 8011f52:	2b03      	cmp	r3, #3
 8011f54:	f300 8129 	bgt.w	80121aa <USBD_StdEPReq+0x2a4>
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d07f      	beq.n	801205c <USBD_StdEPReq+0x156>
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d03c      	beq.n	8011fda <USBD_StdEPReq+0xd4>
 8011f60:	e123      	b.n	80121aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b02      	cmp	r3, #2
 8011f6c:	d002      	beq.n	8011f74 <USBD_StdEPReq+0x6e>
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d016      	beq.n	8011fa0 <USBD_StdEPReq+0x9a>
 8011f72:	e02c      	b.n	8011fce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f74:	7bbb      	ldrb	r3, [r7, #14]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00d      	beq.n	8011f96 <USBD_StdEPReq+0x90>
 8011f7a:	7bbb      	ldrb	r3, [r7, #14]
 8011f7c:	2b80      	cmp	r3, #128	; 0x80
 8011f7e:	d00a      	beq.n	8011f96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f80:	7bbb      	ldrb	r3, [r7, #14]
 8011f82:	4619      	mov	r1, r3
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f007 fb81 	bl	801968c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f8a:	2180      	movs	r1, #128	; 0x80
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f007 fb7d 	bl	801968c <USBD_LL_StallEP>
 8011f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f94:	e020      	b.n	8011fd8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011f96:	6839      	ldr	r1, [r7, #0]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 fc45 	bl	8012828 <USBD_CtlError>
              break;
 8011f9e:	e01b      	b.n	8011fd8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	885b      	ldrh	r3, [r3, #2]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10e      	bne.n	8011fc6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d00b      	beq.n	8011fc6 <USBD_StdEPReq+0xc0>
 8011fae:	7bbb      	ldrb	r3, [r7, #14]
 8011fb0:	2b80      	cmp	r3, #128	; 0x80
 8011fb2:	d008      	beq.n	8011fc6 <USBD_StdEPReq+0xc0>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	88db      	ldrh	r3, [r3, #6]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d104      	bne.n	8011fc6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011fbc:	7bbb      	ldrb	r3, [r7, #14]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f007 fb63 	bl	801968c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fcf9 	bl	80129be <USBD_CtlSendStatus>

              break;
 8011fcc:	e004      	b.n	8011fd8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fc29 	bl	8012828 <USBD_CtlError>
              break;
 8011fd6:	bf00      	nop
          }
          break;
 8011fd8:	e0ec      	b.n	80121b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d002      	beq.n	8011fec <USBD_StdEPReq+0xe6>
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d016      	beq.n	8012018 <USBD_StdEPReq+0x112>
 8011fea:	e030      	b.n	801204e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fec:	7bbb      	ldrb	r3, [r7, #14]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00d      	beq.n	801200e <USBD_StdEPReq+0x108>
 8011ff2:	7bbb      	ldrb	r3, [r7, #14]
 8011ff4:	2b80      	cmp	r3, #128	; 0x80
 8011ff6:	d00a      	beq.n	801200e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ff8:	7bbb      	ldrb	r3, [r7, #14]
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f007 fb45 	bl	801968c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012002:	2180      	movs	r1, #128	; 0x80
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f007 fb41 	bl	801968c <USBD_LL_StallEP>
 801200a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801200c:	e025      	b.n	801205a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 fc09 	bl	8012828 <USBD_CtlError>
              break;
 8012016:	e020      	b.n	801205a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	885b      	ldrh	r3, [r3, #2]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d11b      	bne.n	8012058 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012020:	7bbb      	ldrb	r3, [r7, #14]
 8012022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012026:	2b00      	cmp	r3, #0
 8012028:	d004      	beq.n	8012034 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801202a:	7bbb      	ldrb	r3, [r7, #14]
 801202c:	4619      	mov	r1, r3
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f007 fb4b 	bl	80196ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 fcc2 	bl	80129be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	4798      	blx	r3
 8012048:	4603      	mov	r3, r0
 801204a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801204c:	e004      	b.n	8012058 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801204e:	6839      	ldr	r1, [r7, #0]
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 fbe9 	bl	8012828 <USBD_CtlError>
              break;
 8012056:	e000      	b.n	801205a <USBD_StdEPReq+0x154>
              break;
 8012058:	bf00      	nop
          }
          break;
 801205a:	e0ab      	b.n	80121b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012062:	b2db      	uxtb	r3, r3
 8012064:	2b02      	cmp	r3, #2
 8012066:	d002      	beq.n	801206e <USBD_StdEPReq+0x168>
 8012068:	2b03      	cmp	r3, #3
 801206a:	d032      	beq.n	80120d2 <USBD_StdEPReq+0x1cc>
 801206c:	e097      	b.n	801219e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801206e:	7bbb      	ldrb	r3, [r7, #14]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d007      	beq.n	8012084 <USBD_StdEPReq+0x17e>
 8012074:	7bbb      	ldrb	r3, [r7, #14]
 8012076:	2b80      	cmp	r3, #128	; 0x80
 8012078:	d004      	beq.n	8012084 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 fbd3 	bl	8012828 <USBD_CtlError>
                break;
 8012082:	e091      	b.n	80121a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012088:	2b00      	cmp	r3, #0
 801208a:	da0b      	bge.n	80120a4 <USBD_StdEPReq+0x19e>
 801208c:	7bbb      	ldrb	r3, [r7, #14]
 801208e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012092:	4613      	mov	r3, r2
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	4413      	add	r3, r2
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	3310      	adds	r3, #16
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	4413      	add	r3, r2
 80120a0:	3304      	adds	r3, #4
 80120a2:	e00b      	b.n	80120bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80120a4:	7bbb      	ldrb	r3, [r7, #14]
 80120a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120aa:	4613      	mov	r3, r2
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	4413      	add	r3, r2
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	4413      	add	r3, r2
 80120ba:	3304      	adds	r3, #4
 80120bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	2200      	movs	r2, #0
 80120c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	2202      	movs	r2, #2
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 fc1d 	bl	801290a <USBD_CtlSendData>
              break;
 80120d0:	e06a      	b.n	80121a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80120d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	da11      	bge.n	80120fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80120da:	7bbb      	ldrb	r3, [r7, #14]
 80120dc:	f003 020f 	and.w	r2, r3, #15
 80120e0:	6879      	ldr	r1, [r7, #4]
 80120e2:	4613      	mov	r3, r2
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	4413      	add	r3, r2
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	440b      	add	r3, r1
 80120ec:	3324      	adds	r3, #36	; 0x24
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d117      	bne.n	8012124 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 fb96 	bl	8012828 <USBD_CtlError>
                  break;
 80120fc:	e054      	b.n	80121a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80120fe:	7bbb      	ldrb	r3, [r7, #14]
 8012100:	f003 020f 	and.w	r2, r3, #15
 8012104:	6879      	ldr	r1, [r7, #4]
 8012106:	4613      	mov	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	440b      	add	r3, r1
 8012110:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d104      	bne.n	8012124 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801211a:	6839      	ldr	r1, [r7, #0]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 fb83 	bl	8012828 <USBD_CtlError>
                  break;
 8012122:	e041      	b.n	80121a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012128:	2b00      	cmp	r3, #0
 801212a:	da0b      	bge.n	8012144 <USBD_StdEPReq+0x23e>
 801212c:	7bbb      	ldrb	r3, [r7, #14]
 801212e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012132:	4613      	mov	r3, r2
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	4413      	add	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	3310      	adds	r3, #16
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	4413      	add	r3, r2
 8012140:	3304      	adds	r3, #4
 8012142:	e00b      	b.n	801215c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012144:	7bbb      	ldrb	r3, [r7, #14]
 8012146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801214a:	4613      	mov	r3, r2
 801214c:	009b      	lsls	r3, r3, #2
 801214e:	4413      	add	r3, r2
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	4413      	add	r3, r2
 801215a:	3304      	adds	r3, #4
 801215c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801215e:	7bbb      	ldrb	r3, [r7, #14]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d002      	beq.n	801216a <USBD_StdEPReq+0x264>
 8012164:	7bbb      	ldrb	r3, [r7, #14]
 8012166:	2b80      	cmp	r3, #128	; 0x80
 8012168:	d103      	bne.n	8012172 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2200      	movs	r2, #0
 801216e:	601a      	str	r2, [r3, #0]
 8012170:	e00e      	b.n	8012190 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012172:	7bbb      	ldrb	r3, [r7, #14]
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f007 fac6 	bl	8019708 <USBD_LL_IsStallEP>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d003      	beq.n	801218a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2201      	movs	r2, #1
 8012186:	601a      	str	r2, [r3, #0]
 8012188:	e002      	b.n	8012190 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	2200      	movs	r2, #0
 801218e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2202      	movs	r2, #2
 8012194:	4619      	mov	r1, r3
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 fbb7 	bl	801290a <USBD_CtlSendData>
              break;
 801219c:	e004      	b.n	80121a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 fb41 	bl	8012828 <USBD_CtlError>
              break;
 80121a6:	bf00      	nop
          }
          break;
 80121a8:	e004      	b.n	80121b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 fb3b 	bl	8012828 <USBD_CtlError>
          break;
 80121b2:	bf00      	nop
      }
      break;
 80121b4:	e004      	b.n	80121c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80121b6:	6839      	ldr	r1, [r7, #0]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fb35 	bl	8012828 <USBD_CtlError>
      break;
 80121be:	bf00      	nop
  }

  return ret;
 80121c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3710      	adds	r7, #16
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
	...

080121cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80121d6:	2300      	movs	r3, #0
 80121d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80121da:	2300      	movs	r3, #0
 80121dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80121de:	2300      	movs	r3, #0
 80121e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	885b      	ldrh	r3, [r3, #2]
 80121e6:	0a1b      	lsrs	r3, r3, #8
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	3b01      	subs	r3, #1
 80121ec:	2b06      	cmp	r3, #6
 80121ee:	f200 8128 	bhi.w	8012442 <USBD_GetDescriptor+0x276>
 80121f2:	a201      	add	r2, pc, #4	; (adr r2, 80121f8 <USBD_GetDescriptor+0x2c>)
 80121f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121f8:	08012215 	.word	0x08012215
 80121fc:	0801222d 	.word	0x0801222d
 8012200:	0801226d 	.word	0x0801226d
 8012204:	08012443 	.word	0x08012443
 8012208:	08012443 	.word	0x08012443
 801220c:	080123e3 	.word	0x080123e3
 8012210:	0801240f 	.word	0x0801240f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	7c12      	ldrb	r2, [r2, #16]
 8012220:	f107 0108 	add.w	r1, r7, #8
 8012224:	4610      	mov	r0, r2
 8012226:	4798      	blx	r3
 8012228:	60f8      	str	r0, [r7, #12]
      break;
 801222a:	e112      	b.n	8012452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	7c1b      	ldrb	r3, [r3, #16]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d10d      	bne.n	8012250 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801223c:	f107 0208 	add.w	r2, r7, #8
 8012240:	4610      	mov	r0, r2
 8012242:	4798      	blx	r3
 8012244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	3301      	adds	r3, #1
 801224a:	2202      	movs	r2, #2
 801224c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801224e:	e100      	b.n	8012452 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012258:	f107 0208 	add.w	r2, r7, #8
 801225c:	4610      	mov	r0, r2
 801225e:	4798      	blx	r3
 8012260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	3301      	adds	r3, #1
 8012266:	2202      	movs	r2, #2
 8012268:	701a      	strb	r2, [r3, #0]
      break;
 801226a:	e0f2      	b.n	8012452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	885b      	ldrh	r3, [r3, #2]
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b05      	cmp	r3, #5
 8012274:	f200 80ac 	bhi.w	80123d0 <USBD_GetDescriptor+0x204>
 8012278:	a201      	add	r2, pc, #4	; (adr r2, 8012280 <USBD_GetDescriptor+0xb4>)
 801227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801227e:	bf00      	nop
 8012280:	08012299 	.word	0x08012299
 8012284:	080122cd 	.word	0x080122cd
 8012288:	08012301 	.word	0x08012301
 801228c:	08012335 	.word	0x08012335
 8012290:	08012369 	.word	0x08012369
 8012294:	0801239d 	.word	0x0801239d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00b      	beq.n	80122bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	7c12      	ldrb	r2, [r2, #16]
 80122b0:	f107 0108 	add.w	r1, r7, #8
 80122b4:	4610      	mov	r0, r2
 80122b6:	4798      	blx	r3
 80122b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122ba:	e091      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fab2 	bl	8012828 <USBD_CtlError>
            err++;
 80122c4:	7afb      	ldrb	r3, [r7, #11]
 80122c6:	3301      	adds	r3, #1
 80122c8:	72fb      	strb	r3, [r7, #11]
          break;
 80122ca:	e089      	b.n	80123e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00b      	beq.n	80122f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	7c12      	ldrb	r2, [r2, #16]
 80122e4:	f107 0108 	add.w	r1, r7, #8
 80122e8:	4610      	mov	r0, r2
 80122ea:	4798      	blx	r3
 80122ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122ee:	e077      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fa98 	bl	8012828 <USBD_CtlError>
            err++;
 80122f8:	7afb      	ldrb	r3, [r7, #11]
 80122fa:	3301      	adds	r3, #1
 80122fc:	72fb      	strb	r3, [r7, #11]
          break;
 80122fe:	e06f      	b.n	80123e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00b      	beq.n	8012324 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	7c12      	ldrb	r2, [r2, #16]
 8012318:	f107 0108 	add.w	r1, r7, #8
 801231c:	4610      	mov	r0, r2
 801231e:	4798      	blx	r3
 8012320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012322:	e05d      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 fa7e 	bl	8012828 <USBD_CtlError>
            err++;
 801232c:	7afb      	ldrb	r3, [r7, #11]
 801232e:	3301      	adds	r3, #1
 8012330:	72fb      	strb	r3, [r7, #11]
          break;
 8012332:	e055      	b.n	80123e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00b      	beq.n	8012358 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	7c12      	ldrb	r2, [r2, #16]
 801234c:	f107 0108 	add.w	r1, r7, #8
 8012350:	4610      	mov	r0, r2
 8012352:	4798      	blx	r3
 8012354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012356:	e043      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 fa64 	bl	8012828 <USBD_CtlError>
            err++;
 8012360:	7afb      	ldrb	r3, [r7, #11]
 8012362:	3301      	adds	r3, #1
 8012364:	72fb      	strb	r3, [r7, #11]
          break;
 8012366:	e03b      	b.n	80123e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801236e:	695b      	ldr	r3, [r3, #20]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00b      	beq.n	801238c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801237a:	695b      	ldr	r3, [r3, #20]
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	7c12      	ldrb	r2, [r2, #16]
 8012380:	f107 0108 	add.w	r1, r7, #8
 8012384:	4610      	mov	r0, r2
 8012386:	4798      	blx	r3
 8012388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801238a:	e029      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801238c:	6839      	ldr	r1, [r7, #0]
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 fa4a 	bl	8012828 <USBD_CtlError>
            err++;
 8012394:	7afb      	ldrb	r3, [r7, #11]
 8012396:	3301      	adds	r3, #1
 8012398:	72fb      	strb	r3, [r7, #11]
          break;
 801239a:	e021      	b.n	80123e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123a2:	699b      	ldr	r3, [r3, #24]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00b      	beq.n	80123c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ae:	699b      	ldr	r3, [r3, #24]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	7c12      	ldrb	r2, [r2, #16]
 80123b4:	f107 0108 	add.w	r1, r7, #8
 80123b8:	4610      	mov	r0, r2
 80123ba:	4798      	blx	r3
 80123bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123be:	e00f      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 fa30 	bl	8012828 <USBD_CtlError>
            err++;
 80123c8:	7afb      	ldrb	r3, [r7, #11]
 80123ca:	3301      	adds	r3, #1
 80123cc:	72fb      	strb	r3, [r7, #11]
          break;
 80123ce:	e007      	b.n	80123e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80123d0:	6839      	ldr	r1, [r7, #0]
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f000 fa28 	bl	8012828 <USBD_CtlError>
          err++;
 80123d8:	7afb      	ldrb	r3, [r7, #11]
 80123da:	3301      	adds	r3, #1
 80123dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80123de:	bf00      	nop
      }
      break;
 80123e0:	e037      	b.n	8012452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	7c1b      	ldrb	r3, [r3, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d109      	bne.n	80123fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f2:	f107 0208 	add.w	r2, r7, #8
 80123f6:	4610      	mov	r0, r2
 80123f8:	4798      	blx	r3
 80123fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123fc:	e029      	b.n	8012452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fa11 	bl	8012828 <USBD_CtlError>
        err++;
 8012406:	7afb      	ldrb	r3, [r7, #11]
 8012408:	3301      	adds	r3, #1
 801240a:	72fb      	strb	r3, [r7, #11]
      break;
 801240c:	e021      	b.n	8012452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	7c1b      	ldrb	r3, [r3, #16]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d10d      	bne.n	8012432 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801241e:	f107 0208 	add.w	r2, r7, #8
 8012422:	4610      	mov	r0, r2
 8012424:	4798      	blx	r3
 8012426:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	3301      	adds	r3, #1
 801242c:	2207      	movs	r2, #7
 801242e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012430:	e00f      	b.n	8012452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012432:	6839      	ldr	r1, [r7, #0]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 f9f7 	bl	8012828 <USBD_CtlError>
        err++;
 801243a:	7afb      	ldrb	r3, [r7, #11]
 801243c:	3301      	adds	r3, #1
 801243e:	72fb      	strb	r3, [r7, #11]
      break;
 8012440:	e007      	b.n	8012452 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f9ef 	bl	8012828 <USBD_CtlError>
      err++;
 801244a:	7afb      	ldrb	r3, [r7, #11]
 801244c:	3301      	adds	r3, #1
 801244e:	72fb      	strb	r3, [r7, #11]
      break;
 8012450:	bf00      	nop
  }

  if (err != 0U)
 8012452:	7afb      	ldrb	r3, [r7, #11]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d11e      	bne.n	8012496 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	88db      	ldrh	r3, [r3, #6]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d016      	beq.n	801248e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012460:	893b      	ldrh	r3, [r7, #8]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00e      	beq.n	8012484 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	88da      	ldrh	r2, [r3, #6]
 801246a:	893b      	ldrh	r3, [r7, #8]
 801246c:	4293      	cmp	r3, r2
 801246e:	bf28      	it	cs
 8012470:	4613      	movcs	r3, r2
 8012472:	b29b      	uxth	r3, r3
 8012474:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012476:	893b      	ldrh	r3, [r7, #8]
 8012478:	461a      	mov	r2, r3
 801247a:	68f9      	ldr	r1, [r7, #12]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 fa44 	bl	801290a <USBD_CtlSendData>
 8012482:	e009      	b.n	8012498 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 f9ce 	bl	8012828 <USBD_CtlError>
 801248c:	e004      	b.n	8012498 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 fa95 	bl	80129be <USBD_CtlSendStatus>
 8012494:	e000      	b.n	8012498 <USBD_GetDescriptor+0x2cc>
    return;
 8012496:	bf00      	nop
  }
}
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop

080124a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	889b      	ldrh	r3, [r3, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d131      	bne.n	8012516 <USBD_SetAddress+0x76>
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	88db      	ldrh	r3, [r3, #6]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d12d      	bne.n	8012516 <USBD_SetAddress+0x76>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	885b      	ldrh	r3, [r3, #2]
 80124be:	2b7f      	cmp	r3, #127	; 0x7f
 80124c0:	d829      	bhi.n	8012516 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	885b      	ldrh	r3, [r3, #2]
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	2b03      	cmp	r3, #3
 80124d8:	d104      	bne.n	80124e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80124da:	6839      	ldr	r1, [r7, #0]
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f9a3 	bl	8012828 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124e2:	e01d      	b.n	8012520 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	7bfa      	ldrb	r2, [r7, #15]
 80124e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80124ec:	7bfb      	ldrb	r3, [r7, #15]
 80124ee:	4619      	mov	r1, r3
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f007 f935 	bl	8019760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 fa61 	bl	80129be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80124fc:	7bfb      	ldrb	r3, [r7, #15]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d004      	beq.n	801250c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2202      	movs	r2, #2
 8012506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801250a:	e009      	b.n	8012520 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2201      	movs	r2, #1
 8012510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012514:	e004      	b.n	8012520 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f985 	bl	8012828 <USBD_CtlError>
  }
}
 801251e:	bf00      	nop
 8012520:	bf00      	nop
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	885b      	ldrh	r3, [r3, #2]
 801253a:	b2da      	uxtb	r2, r3
 801253c:	4b4c      	ldr	r3, [pc, #304]	; (8012670 <USBD_SetConfig+0x148>)
 801253e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012540:	4b4b      	ldr	r3, [pc, #300]	; (8012670 <USBD_SetConfig+0x148>)
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d905      	bls.n	8012554 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012548:	6839      	ldr	r1, [r7, #0]
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f96c 	bl	8012828 <USBD_CtlError>
    return USBD_FAIL;
 8012550:	2303      	movs	r3, #3
 8012552:	e088      	b.n	8012666 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801255a:	b2db      	uxtb	r3, r3
 801255c:	2b02      	cmp	r3, #2
 801255e:	d002      	beq.n	8012566 <USBD_SetConfig+0x3e>
 8012560:	2b03      	cmp	r3, #3
 8012562:	d025      	beq.n	80125b0 <USBD_SetConfig+0x88>
 8012564:	e071      	b.n	801264a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012566:	4b42      	ldr	r3, [pc, #264]	; (8012670 <USBD_SetConfig+0x148>)
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d01c      	beq.n	80125a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801256e:	4b40      	ldr	r3, [pc, #256]	; (8012670 <USBD_SetConfig+0x148>)
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	461a      	mov	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012578:	4b3d      	ldr	r3, [pc, #244]	; (8012670 <USBD_SetConfig+0x148>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	4619      	mov	r1, r3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff f948 	bl	8011814 <USBD_SetClassConfig>
 8012584:	4603      	mov	r3, r0
 8012586:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012588:	7bfb      	ldrb	r3, [r7, #15]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d004      	beq.n	8012598 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 f949 	bl	8012828 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012596:	e065      	b.n	8012664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f000 fa10 	bl	80129be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2203      	movs	r2, #3
 80125a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80125a6:	e05d      	b.n	8012664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 fa08 	bl	80129be <USBD_CtlSendStatus>
      break;
 80125ae:	e059      	b.n	8012664 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80125b0:	4b2f      	ldr	r3, [pc, #188]	; (8012670 <USBD_SetConfig+0x148>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d112      	bne.n	80125de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2202      	movs	r2, #2
 80125bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80125c0:	4b2b      	ldr	r3, [pc, #172]	; (8012670 <USBD_SetConfig+0x148>)
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	461a      	mov	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80125ca:	4b29      	ldr	r3, [pc, #164]	; (8012670 <USBD_SetConfig+0x148>)
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	4619      	mov	r1, r3
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff f93b 	bl	801184c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 f9f1 	bl	80129be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80125dc:	e042      	b.n	8012664 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80125de:	4b24      	ldr	r3, [pc, #144]	; (8012670 <USBD_SetConfig+0x148>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	461a      	mov	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d02a      	beq.n	8012642 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	4619      	mov	r1, r3
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7ff f929 	bl	801184c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80125fa:	4b1d      	ldr	r3, [pc, #116]	; (8012670 <USBD_SetConfig+0x148>)
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	461a      	mov	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012604:	4b1a      	ldr	r3, [pc, #104]	; (8012670 <USBD_SetConfig+0x148>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff f902 	bl	8011814 <USBD_SetClassConfig>
 8012610:	4603      	mov	r3, r0
 8012612:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012614:	7bfb      	ldrb	r3, [r7, #15]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d00f      	beq.n	801263a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801261a:	6839      	ldr	r1, [r7, #0]
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 f903 	bl	8012828 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	b2db      	uxtb	r3, r3
 8012628:	4619      	mov	r1, r3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff f90e 	bl	801184c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2202      	movs	r2, #2
 8012634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012638:	e014      	b.n	8012664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f9bf 	bl	80129be <USBD_CtlSendStatus>
      break;
 8012640:	e010      	b.n	8012664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 f9bb 	bl	80129be <USBD_CtlSendStatus>
      break;
 8012648:	e00c      	b.n	8012664 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 f8eb 	bl	8012828 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012652:	4b07      	ldr	r3, [pc, #28]	; (8012670 <USBD_SetConfig+0x148>)
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	4619      	mov	r1, r3
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7ff f8f7 	bl	801184c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801265e:	2303      	movs	r3, #3
 8012660:	73fb      	strb	r3, [r7, #15]
      break;
 8012662:	bf00      	nop
  }

  return ret;
 8012664:	7bfb      	ldrb	r3, [r7, #15]
}
 8012666:	4618      	mov	r0, r3
 8012668:	3710      	adds	r7, #16
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	20000841 	.word	0x20000841

08012674 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	88db      	ldrh	r3, [r3, #6]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d004      	beq.n	8012690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 f8cd 	bl	8012828 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801268e:	e023      	b.n	80126d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012696:	b2db      	uxtb	r3, r3
 8012698:	2b02      	cmp	r3, #2
 801269a:	dc02      	bgt.n	80126a2 <USBD_GetConfig+0x2e>
 801269c:	2b00      	cmp	r3, #0
 801269e:	dc03      	bgt.n	80126a8 <USBD_GetConfig+0x34>
 80126a0:	e015      	b.n	80126ce <USBD_GetConfig+0x5a>
 80126a2:	2b03      	cmp	r3, #3
 80126a4:	d00b      	beq.n	80126be <USBD_GetConfig+0x4a>
 80126a6:	e012      	b.n	80126ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3308      	adds	r3, #8
 80126b2:	2201      	movs	r2, #1
 80126b4:	4619      	mov	r1, r3
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 f927 	bl	801290a <USBD_CtlSendData>
        break;
 80126bc:	e00c      	b.n	80126d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	3304      	adds	r3, #4
 80126c2:	2201      	movs	r2, #1
 80126c4:	4619      	mov	r1, r3
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 f91f 	bl	801290a <USBD_CtlSendData>
        break;
 80126cc:	e004      	b.n	80126d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f8a9 	bl	8012828 <USBD_CtlError>
        break;
 80126d6:	bf00      	nop
}
 80126d8:	bf00      	nop
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	3b01      	subs	r3, #1
 80126f4:	2b02      	cmp	r3, #2
 80126f6:	d81e      	bhi.n	8012736 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	88db      	ldrh	r3, [r3, #6]
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	d004      	beq.n	801270a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012700:	6839      	ldr	r1, [r7, #0]
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f000 f890 	bl	8012828 <USBD_CtlError>
        break;
 8012708:	e01a      	b.n	8012740 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012716:	2b00      	cmp	r3, #0
 8012718:	d005      	beq.n	8012726 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	f043 0202 	orr.w	r2, r3, #2
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	330c      	adds	r3, #12
 801272a:	2202      	movs	r2, #2
 801272c:	4619      	mov	r1, r3
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 f8eb 	bl	801290a <USBD_CtlSendData>
      break;
 8012734:	e004      	b.n	8012740 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 f875 	bl	8012828 <USBD_CtlError>
      break;
 801273e:	bf00      	nop
  }
}
 8012740:	bf00      	nop
 8012742:	3708      	adds	r7, #8
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	885b      	ldrh	r3, [r3, #2]
 8012756:	2b01      	cmp	r3, #1
 8012758:	d106      	bne.n	8012768 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2201      	movs	r2, #1
 801275e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 f92b 	bl	80129be <USBD_CtlSendStatus>
  }
}
 8012768:	bf00      	nop
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012780:	b2db      	uxtb	r3, r3
 8012782:	3b01      	subs	r3, #1
 8012784:	2b02      	cmp	r3, #2
 8012786:	d80b      	bhi.n	80127a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	885b      	ldrh	r3, [r3, #2]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d10c      	bne.n	80127aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 f910 	bl	80129be <USBD_CtlSendStatus>
      }
      break;
 801279e:	e004      	b.n	80127aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80127a0:	6839      	ldr	r1, [r7, #0]
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 f840 	bl	8012828 <USBD_CtlError>
      break;
 80127a8:	e000      	b.n	80127ac <USBD_ClrFeature+0x3c>
      break;
 80127aa:	bf00      	nop
  }
}
 80127ac:	bf00      	nop
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	781a      	ldrb	r2, [r3, #0]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	3301      	adds	r3, #1
 80127ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	781a      	ldrb	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	3301      	adds	r3, #1
 80127dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f7ff fabb 	bl	8011d5a <SWAPBYTE>
 80127e4:	4603      	mov	r3, r0
 80127e6:	461a      	mov	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	3301      	adds	r3, #1
 80127f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	3301      	adds	r3, #1
 80127f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f7ff faae 	bl	8011d5a <SWAPBYTE>
 80127fe:	4603      	mov	r3, r0
 8012800:	461a      	mov	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	3301      	adds	r3, #1
 801280a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	3301      	adds	r3, #1
 8012810:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f7ff faa1 	bl	8011d5a <SWAPBYTE>
 8012818:	4603      	mov	r3, r0
 801281a:	461a      	mov	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	80da      	strh	r2, [r3, #6]
}
 8012820:	bf00      	nop
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012832:	2180      	movs	r1, #128	; 0x80
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f006 ff29 	bl	801968c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801283a:	2100      	movs	r1, #0
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f006 ff25 	bl	801968c <USBD_LL_StallEP>
}
 8012842:	bf00      	nop
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801284a:	b580      	push	{r7, lr}
 801284c:	b086      	sub	sp, #24
 801284e:	af00      	add	r7, sp, #0
 8012850:	60f8      	str	r0, [r7, #12]
 8012852:	60b9      	str	r1, [r7, #8]
 8012854:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012856:	2300      	movs	r3, #0
 8012858:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d036      	beq.n	80128ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012864:	6938      	ldr	r0, [r7, #16]
 8012866:	f000 f836 	bl	80128d6 <USBD_GetLen>
 801286a:	4603      	mov	r3, r0
 801286c:	3301      	adds	r3, #1
 801286e:	b29b      	uxth	r3, r3
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	b29a      	uxth	r2, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012878:	7dfb      	ldrb	r3, [r7, #23]
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	4413      	add	r3, r2
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	7812      	ldrb	r2, [r2, #0]
 8012882:	701a      	strb	r2, [r3, #0]
  idx++;
 8012884:	7dfb      	ldrb	r3, [r7, #23]
 8012886:	3301      	adds	r3, #1
 8012888:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801288a:	7dfb      	ldrb	r3, [r7, #23]
 801288c:	68ba      	ldr	r2, [r7, #8]
 801288e:	4413      	add	r3, r2
 8012890:	2203      	movs	r2, #3
 8012892:	701a      	strb	r2, [r3, #0]
  idx++;
 8012894:	7dfb      	ldrb	r3, [r7, #23]
 8012896:	3301      	adds	r3, #1
 8012898:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801289a:	e013      	b.n	80128c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801289c:	7dfb      	ldrb	r3, [r7, #23]
 801289e:	68ba      	ldr	r2, [r7, #8]
 80128a0:	4413      	add	r3, r2
 80128a2:	693a      	ldr	r2, [r7, #16]
 80128a4:	7812      	ldrb	r2, [r2, #0]
 80128a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	3301      	adds	r3, #1
 80128ac:	613b      	str	r3, [r7, #16]
    idx++;
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
 80128b0:	3301      	adds	r3, #1
 80128b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80128b4:	7dfb      	ldrb	r3, [r7, #23]
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	4413      	add	r3, r2
 80128ba:	2200      	movs	r2, #0
 80128bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80128be:	7dfb      	ldrb	r3, [r7, #23]
 80128c0:	3301      	adds	r3, #1
 80128c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d1e7      	bne.n	801289c <USBD_GetString+0x52>
 80128cc:	e000      	b.n	80128d0 <USBD_GetString+0x86>
    return;
 80128ce:	bf00      	nop
  }
}
 80128d0:	3718      	adds	r7, #24
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}

080128d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b085      	sub	sp, #20
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80128de:	2300      	movs	r3, #0
 80128e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80128e6:	e005      	b.n	80128f4 <USBD_GetLen+0x1e>
  {
    len++;
 80128e8:	7bfb      	ldrb	r3, [r7, #15]
 80128ea:	3301      	adds	r3, #1
 80128ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	3301      	adds	r3, #1
 80128f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1f5      	bne.n	80128e8 <USBD_GetLen+0x12>
  }

  return len;
 80128fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3714      	adds	r7, #20
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr

0801290a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801290a:	b580      	push	{r7, lr}
 801290c:	b084      	sub	sp, #16
 801290e:	af00      	add	r7, sp, #0
 8012910:	60f8      	str	r0, [r7, #12]
 8012912:	60b9      	str	r1, [r7, #8]
 8012914:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2202      	movs	r2, #2
 801291a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	68ba      	ldr	r2, [r7, #8]
 801292e:	2100      	movs	r1, #0
 8012930:	68f8      	ldr	r0, [r7, #12]
 8012932:	f006 ff34 	bl	801979e <USBD_LL_Transmit>

  return USBD_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	60b9      	str	r1, [r7, #8]
 801294a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	2100      	movs	r1, #0
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f006 ff23 	bl	801979e <USBD_LL_Transmit>

  return USBD_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b084      	sub	sp, #16
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2203      	movs	r2, #3
 8012972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	2100      	movs	r1, #0
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f006 ff27 	bl	80197e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3710      	adds	r7, #16
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	2100      	movs	r1, #0
 80129ae:	68f8      	ldr	r0, [r7, #12]
 80129b0:	f006 ff16 	bl	80197e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b082      	sub	sp, #8
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2204      	movs	r2, #4
 80129ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80129ce:	2300      	movs	r3, #0
 80129d0:	2200      	movs	r2, #0
 80129d2:	2100      	movs	r1, #0
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f006 fee2 	bl	801979e <USBD_LL_Transmit>

  return USBD_OK;
 80129da:	2300      	movs	r3, #0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2205      	movs	r2, #5
 80129f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80129f4:	2300      	movs	r3, #0
 80129f6:	2200      	movs	r2, #0
 80129f8:	2100      	movs	r1, #0
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f006 fef0 	bl	80197e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
	...

08012a0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012a16:	79fb      	ldrb	r3, [r7, #7]
 8012a18:	4a08      	ldr	r2, [pc, #32]	; (8012a3c <disk_status+0x30>)
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	4413      	add	r3, r2
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	79fa      	ldrb	r2, [r7, #7]
 8012a24:	4905      	ldr	r1, [pc, #20]	; (8012a3c <disk_status+0x30>)
 8012a26:	440a      	add	r2, r1
 8012a28:	7a12      	ldrb	r2, [r2, #8]
 8012a2a:	4610      	mov	r0, r2
 8012a2c:	4798      	blx	r3
 8012a2e:	4603      	mov	r3, r0
 8012a30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	2000086c 	.word	0x2000086c

08012a40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012a4e:	79fb      	ldrb	r3, [r7, #7]
 8012a50:	4a0d      	ldr	r2, [pc, #52]	; (8012a88 <disk_initialize+0x48>)
 8012a52:	5cd3      	ldrb	r3, [r2, r3]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d111      	bne.n	8012a7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012a58:	79fb      	ldrb	r3, [r7, #7]
 8012a5a:	4a0b      	ldr	r2, [pc, #44]	; (8012a88 <disk_initialize+0x48>)
 8012a5c:	2101      	movs	r1, #1
 8012a5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012a60:	79fb      	ldrb	r3, [r7, #7]
 8012a62:	4a09      	ldr	r2, [pc, #36]	; (8012a88 <disk_initialize+0x48>)
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	79fa      	ldrb	r2, [r7, #7]
 8012a6e:	4906      	ldr	r1, [pc, #24]	; (8012a88 <disk_initialize+0x48>)
 8012a70:	440a      	add	r2, r1
 8012a72:	7a12      	ldrb	r2, [r2, #8]
 8012a74:	4610      	mov	r0, r2
 8012a76:	4798      	blx	r3
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	2000086c 	.word	0x2000086c

08012a8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012a8c:	b590      	push	{r4, r7, lr}
 8012a8e:	b087      	sub	sp, #28
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	60b9      	str	r1, [r7, #8]
 8012a94:	607a      	str	r2, [r7, #4]
 8012a96:	603b      	str	r3, [r7, #0]
 8012a98:	4603      	mov	r3, r0
 8012a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	4a0a      	ldr	r2, [pc, #40]	; (8012ac8 <disk_read+0x3c>)
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	4413      	add	r3, r2
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	689c      	ldr	r4, [r3, #8]
 8012aa8:	7bfb      	ldrb	r3, [r7, #15]
 8012aaa:	4a07      	ldr	r2, [pc, #28]	; (8012ac8 <disk_read+0x3c>)
 8012aac:	4413      	add	r3, r2
 8012aae:	7a18      	ldrb	r0, [r3, #8]
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	68b9      	ldr	r1, [r7, #8]
 8012ab6:	47a0      	blx	r4
 8012ab8:	4603      	mov	r3, r0
 8012aba:	75fb      	strb	r3, [r7, #23]
  return res;
 8012abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd90      	pop	{r4, r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000086c 	.word	0x2000086c

08012acc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012acc:	b590      	push	{r4, r7, lr}
 8012ace:	b087      	sub	sp, #28
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60b9      	str	r1, [r7, #8]
 8012ad4:	607a      	str	r2, [r7, #4]
 8012ad6:	603b      	str	r3, [r7, #0]
 8012ad8:	4603      	mov	r3, r0
 8012ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012adc:	7bfb      	ldrb	r3, [r7, #15]
 8012ade:	4a0a      	ldr	r2, [pc, #40]	; (8012b08 <disk_write+0x3c>)
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	4413      	add	r3, r2
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	68dc      	ldr	r4, [r3, #12]
 8012ae8:	7bfb      	ldrb	r3, [r7, #15]
 8012aea:	4a07      	ldr	r2, [pc, #28]	; (8012b08 <disk_write+0x3c>)
 8012aec:	4413      	add	r3, r2
 8012aee:	7a18      	ldrb	r0, [r3, #8]
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	68b9      	ldr	r1, [r7, #8]
 8012af6:	47a0      	blx	r4
 8012af8:	4603      	mov	r3, r0
 8012afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8012afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	371c      	adds	r7, #28
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd90      	pop	{r4, r7, pc}
 8012b06:	bf00      	nop
 8012b08:	2000086c 	.word	0x2000086c

08012b0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	4603      	mov	r3, r0
 8012b14:	603a      	str	r2, [r7, #0]
 8012b16:	71fb      	strb	r3, [r7, #7]
 8012b18:	460b      	mov	r3, r1
 8012b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012b1c:	79fb      	ldrb	r3, [r7, #7]
 8012b1e:	4a09      	ldr	r2, [pc, #36]	; (8012b44 <disk_ioctl+0x38>)
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	79fa      	ldrb	r2, [r7, #7]
 8012b2a:	4906      	ldr	r1, [pc, #24]	; (8012b44 <disk_ioctl+0x38>)
 8012b2c:	440a      	add	r2, r1
 8012b2e:	7a10      	ldrb	r0, [r2, #8]
 8012b30:	79b9      	ldrb	r1, [r7, #6]
 8012b32:	683a      	ldr	r2, [r7, #0]
 8012b34:	4798      	blx	r3
 8012b36:	4603      	mov	r3, r0
 8012b38:	73fb      	strb	r3, [r7, #15]
  return res;
 8012b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	2000086c 	.word	0x2000086c

08012b48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	3301      	adds	r3, #1
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012b58:	89fb      	ldrh	r3, [r7, #14]
 8012b5a:	021b      	lsls	r3, r3, #8
 8012b5c:	b21a      	sxth	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	b21b      	sxth	r3, r3
 8012b64:	4313      	orrs	r3, r2
 8012b66:	b21b      	sxth	r3, r3
 8012b68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012b6a:	89fb      	ldrh	r3, [r7, #14]
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3714      	adds	r7, #20
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3303      	adds	r3, #3
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	021b      	lsls	r3, r3, #8
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	3202      	adds	r2, #2
 8012b90:	7812      	ldrb	r2, [r2, #0]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	021b      	lsls	r3, r3, #8
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	3201      	adds	r2, #1
 8012b9e:	7812      	ldrb	r2, [r2, #0]
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	021b      	lsls	r3, r3, #8
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	7812      	ldrb	r2, [r2, #0]
 8012bac:	4313      	orrs	r3, r2
 8012bae:	60fb      	str	r3, [r7, #12]
	return rv;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012bbe:	b480      	push	{r7}
 8012bc0:	b083      	sub	sp, #12
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
 8012bc6:	460b      	mov	r3, r1
 8012bc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	1c5a      	adds	r2, r3, #1
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	887a      	ldrh	r2, [r7, #2]
 8012bd2:	b2d2      	uxtb	r2, r2
 8012bd4:	701a      	strb	r2, [r3, #0]
 8012bd6:	887b      	ldrh	r3, [r7, #2]
 8012bd8:	0a1b      	lsrs	r3, r3, #8
 8012bda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	607a      	str	r2, [r7, #4]
 8012be2:	887a      	ldrh	r2, [r7, #2]
 8012be4:	b2d2      	uxtb	r2, r2
 8012be6:	701a      	strb	r2, [r3, #0]
}
 8012be8:	bf00      	nop
 8012bea:	370c      	adds	r7, #12
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	1c5a      	adds	r2, r3, #1
 8012c02:	607a      	str	r2, [r7, #4]
 8012c04:	683a      	ldr	r2, [r7, #0]
 8012c06:	b2d2      	uxtb	r2, r2
 8012c08:	701a      	strb	r2, [r3, #0]
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	0a1b      	lsrs	r3, r3, #8
 8012c0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	607a      	str	r2, [r7, #4]
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	b2d2      	uxtb	r2, r2
 8012c1a:	701a      	strb	r2, [r3, #0]
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	0a1b      	lsrs	r3, r3, #8
 8012c20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	1c5a      	adds	r2, r3, #1
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	683a      	ldr	r2, [r7, #0]
 8012c2a:	b2d2      	uxtb	r2, r2
 8012c2c:	701a      	strb	r2, [r3, #0]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	0a1b      	lsrs	r3, r3, #8
 8012c32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	607a      	str	r2, [r7, #4]
 8012c3a:	683a      	ldr	r2, [r7, #0]
 8012c3c:	b2d2      	uxtb	r2, r2
 8012c3e:	701a      	strb	r2, [r3, #0]
}
 8012c40:	bf00      	nop
 8012c42:	370c      	adds	r7, #12
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012c4c:	b480      	push	{r7}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d00d      	beq.n	8012c82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	1c53      	adds	r3, r2, #1
 8012c6a:	613b      	str	r3, [r7, #16]
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	1c59      	adds	r1, r3, #1
 8012c70:	6179      	str	r1, [r7, #20]
 8012c72:	7812      	ldrb	r2, [r2, #0]
 8012c74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	607b      	str	r3, [r7, #4]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1f1      	bne.n	8012c66 <mem_cpy+0x1a>
	}
}
 8012c82:	bf00      	nop
 8012c84:	371c      	adds	r7, #28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012c8e:	b480      	push	{r7}
 8012c90:	b087      	sub	sp, #28
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	60f8      	str	r0, [r7, #12]
 8012c96:	60b9      	str	r1, [r7, #8]
 8012c98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	617a      	str	r2, [r7, #20]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	b2d2      	uxtb	r2, r2
 8012ca8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3b01      	subs	r3, #1
 8012cae:	607b      	str	r3, [r7, #4]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d1f3      	bne.n	8012c9e <mem_set+0x10>
}
 8012cb6:	bf00      	nop
 8012cb8:	bf00      	nop
 8012cba:	371c      	adds	r7, #28
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012cc4:	b480      	push	{r7}
 8012cc6:	b089      	sub	sp, #36	; 0x24
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	61fb      	str	r3, [r7, #28]
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	1c5a      	adds	r2, r3, #1
 8012ce0:	61fa      	str	r2, [r7, #28]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	1c5a      	adds	r2, r3, #1
 8012cea:	61ba      	str	r2, [r7, #24]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	1acb      	subs	r3, r1, r3
 8012cf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	607b      	str	r3, [r7, #4]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d002      	beq.n	8012d04 <mem_cmp+0x40>
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d0eb      	beq.n	8012cdc <mem_cmp+0x18>

	return r;
 8012d04:	697b      	ldr	r3, [r7, #20]
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3724      	adds	r7, #36	; 0x24
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr

08012d12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012d12:	b480      	push	{r7}
 8012d14:	b083      	sub	sp, #12
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6078      	str	r0, [r7, #4]
 8012d1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012d1c:	e002      	b.n	8012d24 <chk_chr+0x12>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	3301      	adds	r3, #1
 8012d22:	607b      	str	r3, [r7, #4]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d005      	beq.n	8012d38 <chk_chr+0x26>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	461a      	mov	r2, r3
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d1f2      	bne.n	8012d1e <chk_chr+0xc>
	return *str;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d009      	beq.n	8012d6a <lock_fs+0x22>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f002 fcde 	bl	801571c <ff_req_grant>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <lock_fs+0x22>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e000      	b.n	8012d6c <lock_fs+0x24>
 8012d6a:	2300      	movs	r3, #0
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00d      	beq.n	8012da2 <unlock_fs+0x2e>
 8012d86:	78fb      	ldrb	r3, [r7, #3]
 8012d88:	2b0c      	cmp	r3, #12
 8012d8a:	d00a      	beq.n	8012da2 <unlock_fs+0x2e>
 8012d8c:	78fb      	ldrb	r3, [r7, #3]
 8012d8e:	2b0b      	cmp	r3, #11
 8012d90:	d007      	beq.n	8012da2 <unlock_fs+0x2e>
 8012d92:	78fb      	ldrb	r3, [r7, #3]
 8012d94:	2b0f      	cmp	r3, #15
 8012d96:	d004      	beq.n	8012da2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f002 fcd2 	bl	8015746 <ff_rel_grant>
	}
}
 8012da2:	bf00      	nop
 8012da4:	3708      	adds	r7, #8
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
	...

08012dac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012db6:	2300      	movs	r3, #0
 8012db8:	60bb      	str	r3, [r7, #8]
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	60fb      	str	r3, [r7, #12]
 8012dbe:	e029      	b.n	8012e14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012dc0:	4a27      	ldr	r2, [pc, #156]	; (8012e60 <chk_lock+0xb4>)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	011b      	lsls	r3, r3, #4
 8012dc6:	4413      	add	r3, r2
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d01d      	beq.n	8012e0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012dce:	4a24      	ldr	r2, [pc, #144]	; (8012e60 <chk_lock+0xb4>)
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	011b      	lsls	r3, r3, #4
 8012dd4:	4413      	add	r3, r2
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d116      	bne.n	8012e0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012de0:	4a1f      	ldr	r2, [pc, #124]	; (8012e60 <chk_lock+0xb4>)
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	011b      	lsls	r3, r3, #4
 8012de6:	4413      	add	r3, r2
 8012de8:	3304      	adds	r3, #4
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d10c      	bne.n	8012e0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012df4:	4a1a      	ldr	r2, [pc, #104]	; (8012e60 <chk_lock+0xb4>)
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	011b      	lsls	r3, r3, #4
 8012dfa:	4413      	add	r3, r2
 8012dfc:	3308      	adds	r3, #8
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d102      	bne.n	8012e0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012e08:	e007      	b.n	8012e1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	3301      	adds	r3, #1
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d9d2      	bls.n	8012dc0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b02      	cmp	r3, #2
 8012e1e:	d109      	bne.n	8012e34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <chk_lock+0x80>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d101      	bne.n	8012e30 <chk_lock+0x84>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e010      	b.n	8012e52 <chk_lock+0xa6>
 8012e30:	2312      	movs	r3, #18
 8012e32:	e00e      	b.n	8012e52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d108      	bne.n	8012e4c <chk_lock+0xa0>
 8012e3a:	4a09      	ldr	r2, [pc, #36]	; (8012e60 <chk_lock+0xb4>)
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	011b      	lsls	r3, r3, #4
 8012e40:	4413      	add	r3, r2
 8012e42:	330c      	adds	r3, #12
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e4a:	d101      	bne.n	8012e50 <chk_lock+0xa4>
 8012e4c:	2310      	movs	r3, #16
 8012e4e:	e000      	b.n	8012e52 <chk_lock+0xa6>
 8012e50:	2300      	movs	r3, #0
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3714      	adds	r7, #20
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	2000084c 	.word	0x2000084c

08012e64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	607b      	str	r3, [r7, #4]
 8012e6e:	e002      	b.n	8012e76 <enq_lock+0x12>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	3301      	adds	r3, #1
 8012e74:	607b      	str	r3, [r7, #4]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2b01      	cmp	r3, #1
 8012e7a:	d806      	bhi.n	8012e8a <enq_lock+0x26>
 8012e7c:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <enq_lock+0x40>)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	011b      	lsls	r3, r3, #4
 8012e82:	4413      	add	r3, r2
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1f2      	bne.n	8012e70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	bf14      	ite	ne
 8012e90:	2301      	movne	r3, #1
 8012e92:	2300      	moveq	r3, #0
 8012e94:	b2db      	uxtb	r3, r3
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	2000084c 	.word	0x2000084c

08012ea8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60fb      	str	r3, [r7, #12]
 8012eb6:	e01f      	b.n	8012ef8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012eb8:	4a41      	ldr	r2, [pc, #260]	; (8012fc0 <inc_lock+0x118>)
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	011b      	lsls	r3, r3, #4
 8012ebe:	4413      	add	r3, r2
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d113      	bne.n	8012ef2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012eca:	4a3d      	ldr	r2, [pc, #244]	; (8012fc0 <inc_lock+0x118>)
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	011b      	lsls	r3, r3, #4
 8012ed0:	4413      	add	r3, r2
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d109      	bne.n	8012ef2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012ede:	4a38      	ldr	r2, [pc, #224]	; (8012fc0 <inc_lock+0x118>)
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	011b      	lsls	r3, r3, #4
 8012ee4:	4413      	add	r3, r2
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d006      	beq.n	8012f00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	60fb      	str	r3, [r7, #12]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d9dc      	bls.n	8012eb8 <inc_lock+0x10>
 8012efe:	e000      	b.n	8012f02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012f00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d132      	bne.n	8012f6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	e002      	b.n	8012f14 <inc_lock+0x6c>
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	3301      	adds	r3, #1
 8012f12:	60fb      	str	r3, [r7, #12]
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d806      	bhi.n	8012f28 <inc_lock+0x80>
 8012f1a:	4a29      	ldr	r2, [pc, #164]	; (8012fc0 <inc_lock+0x118>)
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	011b      	lsls	r3, r3, #4
 8012f20:	4413      	add	r3, r2
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d1f2      	bne.n	8012f0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2b02      	cmp	r3, #2
 8012f2c:	d101      	bne.n	8012f32 <inc_lock+0x8a>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	e040      	b.n	8012fb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	4922      	ldr	r1, [pc, #136]	; (8012fc0 <inc_lock+0x118>)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	011b      	lsls	r3, r3, #4
 8012f3c:	440b      	add	r3, r1
 8012f3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	689a      	ldr	r2, [r3, #8]
 8012f44:	491e      	ldr	r1, [pc, #120]	; (8012fc0 <inc_lock+0x118>)
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	011b      	lsls	r3, r3, #4
 8012f4a:	440b      	add	r3, r1
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	695a      	ldr	r2, [r3, #20]
 8012f54:	491a      	ldr	r1, [pc, #104]	; (8012fc0 <inc_lock+0x118>)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	011b      	lsls	r3, r3, #4
 8012f5a:	440b      	add	r3, r1
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012f60:	4a17      	ldr	r2, [pc, #92]	; (8012fc0 <inc_lock+0x118>)
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	011b      	lsls	r3, r3, #4
 8012f66:	4413      	add	r3, r2
 8012f68:	330c      	adds	r3, #12
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d009      	beq.n	8012f88 <inc_lock+0xe0>
 8012f74:	4a12      	ldr	r2, [pc, #72]	; (8012fc0 <inc_lock+0x118>)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	011b      	lsls	r3, r3, #4
 8012f7a:	4413      	add	r3, r2
 8012f7c:	330c      	adds	r3, #12
 8012f7e:	881b      	ldrh	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <inc_lock+0xe0>
 8012f84:	2300      	movs	r3, #0
 8012f86:	e015      	b.n	8012fb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d108      	bne.n	8012fa0 <inc_lock+0xf8>
 8012f8e:	4a0c      	ldr	r2, [pc, #48]	; (8012fc0 <inc_lock+0x118>)
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	011b      	lsls	r3, r3, #4
 8012f94:	4413      	add	r3, r2
 8012f96:	330c      	adds	r3, #12
 8012f98:	881b      	ldrh	r3, [r3, #0]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	e001      	b.n	8012fa4 <inc_lock+0xfc>
 8012fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fa4:	4906      	ldr	r1, [pc, #24]	; (8012fc0 <inc_lock+0x118>)
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	011b      	lsls	r3, r3, #4
 8012faa:	440b      	add	r3, r1
 8012fac:	330c      	adds	r3, #12
 8012fae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	3301      	adds	r3, #1
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr
 8012fc0:	2000084c 	.word	0x2000084c

08012fc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	607b      	str	r3, [r7, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d825      	bhi.n	8013024 <dec_lock+0x60>
		n = Files[i].ctr;
 8012fd8:	4a17      	ldr	r2, [pc, #92]	; (8013038 <dec_lock+0x74>)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	011b      	lsls	r3, r3, #4
 8012fde:	4413      	add	r3, r2
 8012fe0:	330c      	adds	r3, #12
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012fe6:	89fb      	ldrh	r3, [r7, #14]
 8012fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fec:	d101      	bne.n	8012ff2 <dec_lock+0x2e>
 8012fee:	2300      	movs	r3, #0
 8012ff0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012ff2:	89fb      	ldrh	r3, [r7, #14]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <dec_lock+0x3a>
 8012ff8:	89fb      	ldrh	r3, [r7, #14]
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012ffe:	4a0e      	ldr	r2, [pc, #56]	; (8013038 <dec_lock+0x74>)
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	011b      	lsls	r3, r3, #4
 8013004:	4413      	add	r3, r2
 8013006:	330c      	adds	r3, #12
 8013008:	89fa      	ldrh	r2, [r7, #14]
 801300a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801300c:	89fb      	ldrh	r3, [r7, #14]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d105      	bne.n	801301e <dec_lock+0x5a>
 8013012:	4a09      	ldr	r2, [pc, #36]	; (8013038 <dec_lock+0x74>)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	011b      	lsls	r3, r3, #4
 8013018:	4413      	add	r3, r2
 801301a:	2200      	movs	r2, #0
 801301c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801301e:	2300      	movs	r3, #0
 8013020:	737b      	strb	r3, [r7, #13]
 8013022:	e001      	b.n	8013028 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013024:	2302      	movs	r3, #2
 8013026:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013028:	7b7b      	ldrb	r3, [r7, #13]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3714      	adds	r7, #20
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr
 8013036:	bf00      	nop
 8013038:	2000084c 	.word	0x2000084c

0801303c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013044:	2300      	movs	r3, #0
 8013046:	60fb      	str	r3, [r7, #12]
 8013048:	e010      	b.n	801306c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801304a:	4a0d      	ldr	r2, [pc, #52]	; (8013080 <clear_lock+0x44>)
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	011b      	lsls	r3, r3, #4
 8013050:	4413      	add	r3, r2
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	429a      	cmp	r2, r3
 8013058:	d105      	bne.n	8013066 <clear_lock+0x2a>
 801305a:	4a09      	ldr	r2, [pc, #36]	; (8013080 <clear_lock+0x44>)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	011b      	lsls	r3, r3, #4
 8013060:	4413      	add	r3, r2
 8013062:	2200      	movs	r2, #0
 8013064:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	3301      	adds	r3, #1
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d9eb      	bls.n	801304a <clear_lock+0xe>
	}
}
 8013072:	bf00      	nop
 8013074:	bf00      	nop
 8013076:	3714      	adds	r7, #20
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr
 8013080:	2000084c 	.word	0x2000084c

08013084 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801308c:	2300      	movs	r3, #0
 801308e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	78db      	ldrb	r3, [r3, #3]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d034      	beq.n	8013102 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801309c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	7858      	ldrb	r0, [r3, #1]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80130a8:	2301      	movs	r3, #1
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	f7ff fd0e 	bl	8012acc <disk_write>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d002      	beq.n	80130bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80130b6:	2301      	movs	r3, #1
 80130b8:	73fb      	strb	r3, [r7, #15]
 80130ba:	e022      	b.n	8013102 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2200      	movs	r2, #0
 80130c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c6:	697a      	ldr	r2, [r7, #20]
 80130c8:	1ad2      	subs	r2, r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	69db      	ldr	r3, [r3, #28]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d217      	bcs.n	8013102 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	789b      	ldrb	r3, [r3, #2]
 80130d6:	613b      	str	r3, [r7, #16]
 80130d8:	e010      	b.n	80130fc <sync_window+0x78>
					wsect += fs->fsize;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	69db      	ldr	r3, [r3, #28]
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	4413      	add	r3, r2
 80130e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	7858      	ldrb	r0, [r3, #1]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80130ee:	2301      	movs	r3, #1
 80130f0:	697a      	ldr	r2, [r7, #20]
 80130f2:	f7ff fceb 	bl	8012acc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	3b01      	subs	r3, #1
 80130fa:	613b      	str	r3, [r7, #16]
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d8eb      	bhi.n	80130da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013102:	7bfb      	ldrb	r3, [r7, #15]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3718      	adds	r7, #24
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013116:	2300      	movs	r3, #0
 8013118:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801311e:	683a      	ldr	r2, [r7, #0]
 8013120:	429a      	cmp	r2, r3
 8013122:	d01b      	beq.n	801315c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f7ff ffad 	bl	8013084 <sync_window>
 801312a:	4603      	mov	r3, r0
 801312c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801312e:	7bfb      	ldrb	r3, [r7, #15]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d113      	bne.n	801315c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	7858      	ldrb	r0, [r3, #1]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801313e:	2301      	movs	r3, #1
 8013140:	683a      	ldr	r2, [r7, #0]
 8013142:	f7ff fca3 	bl	8012a8c <disk_read>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d004      	beq.n	8013156 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801314c:	f04f 33ff 	mov.w	r3, #4294967295
 8013150:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013152:	2301      	movs	r3, #1
 8013154:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	683a      	ldr	r2, [r7, #0]
 801315a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801315c:	7bfb      	ldrb	r3, [r7, #15]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
	...

08013168 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff ff87 	bl	8013084 <sync_window>
 8013176:	4603      	mov	r3, r0
 8013178:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801317a:	7bfb      	ldrb	r3, [r7, #15]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d158      	bne.n	8013232 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	2b03      	cmp	r3, #3
 8013186:	d148      	bne.n	801321a <sync_fs+0xb2>
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	791b      	ldrb	r3, [r3, #4]
 801318c:	2b01      	cmp	r3, #1
 801318e:	d144      	bne.n	801321a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	3334      	adds	r3, #52	; 0x34
 8013194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013198:	2100      	movs	r1, #0
 801319a:	4618      	mov	r0, r3
 801319c:	f7ff fd77 	bl	8012c8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3334      	adds	r3, #52	; 0x34
 80131a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80131a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff fd06 	bl	8012bbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	3334      	adds	r3, #52	; 0x34
 80131b6:	4921      	ldr	r1, [pc, #132]	; (801323c <sync_fs+0xd4>)
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fd1b 	bl	8012bf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	3334      	adds	r3, #52	; 0x34
 80131c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80131c6:	491e      	ldr	r1, [pc, #120]	; (8013240 <sync_fs+0xd8>)
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff fd13 	bl	8012bf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3334      	adds	r3, #52	; 0x34
 80131d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	695b      	ldr	r3, [r3, #20]
 80131da:	4619      	mov	r1, r3
 80131dc:	4610      	mov	r0, r2
 80131de:	f7ff fd09 	bl	8012bf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	3334      	adds	r3, #52	; 0x34
 80131e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	4619      	mov	r1, r3
 80131f0:	4610      	mov	r0, r2
 80131f2:	f7ff fcff 	bl	8012bf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6a1b      	ldr	r3, [r3, #32]
 80131fa:	1c5a      	adds	r2, r3, #1
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	7858      	ldrb	r0, [r3, #1]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801320e:	2301      	movs	r3, #1
 8013210:	f7ff fc5c 	bl	8012acc <disk_write>
			fs->fsi_flag = 0;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	785b      	ldrb	r3, [r3, #1]
 801321e:	2200      	movs	r2, #0
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fc72 	bl	8012b0c <disk_ioctl>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d001      	beq.n	8013232 <sync_fs+0xca>
 801322e:	2301      	movs	r3, #1
 8013230:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013232:	7bfb      	ldrb	r3, [r7, #15]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3710      	adds	r7, #16
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	41615252 	.word	0x41615252
 8013240:	61417272 	.word	0x61417272

08013244 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	3b02      	subs	r3, #2
 8013252:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	699b      	ldr	r3, [r3, #24]
 8013258:	3b02      	subs	r3, #2
 801325a:	683a      	ldr	r2, [r7, #0]
 801325c:	429a      	cmp	r2, r3
 801325e:	d301      	bcc.n	8013264 <clust2sect+0x20>
 8013260:	2300      	movs	r3, #0
 8013262:	e008      	b.n	8013276 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	895b      	ldrh	r3, [r3, #10]
 8013268:	461a      	mov	r2, r3
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	fb03 f202 	mul.w	r2, r3, r2
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013274:	4413      	add	r3, r2
}
 8013276:	4618      	mov	r0, r3
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013282:	b580      	push	{r7, lr}
 8013284:	b086      	sub	sp, #24
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	2b01      	cmp	r3, #1
 8013296:	d904      	bls.n	80132a2 <get_fat+0x20>
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	699b      	ldr	r3, [r3, #24]
 801329c:	683a      	ldr	r2, [r7, #0]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d302      	bcc.n	80132a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80132a2:	2301      	movs	r3, #1
 80132a4:	617b      	str	r3, [r7, #20]
 80132a6:	e08f      	b.n	80133c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80132a8:	f04f 33ff 	mov.w	r3, #4294967295
 80132ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	2b03      	cmp	r3, #3
 80132b4:	d062      	beq.n	801337c <get_fat+0xfa>
 80132b6:	2b03      	cmp	r3, #3
 80132b8:	dc7c      	bgt.n	80133b4 <get_fat+0x132>
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d002      	beq.n	80132c4 <get_fat+0x42>
 80132be:	2b02      	cmp	r3, #2
 80132c0:	d042      	beq.n	8013348 <get_fat+0xc6>
 80132c2:	e077      	b.n	80133b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	60fb      	str	r3, [r7, #12]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	085b      	lsrs	r3, r3, #1
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	4413      	add	r3, r2
 80132d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	0a5b      	lsrs	r3, r3, #9
 80132da:	4413      	add	r3, r2
 80132dc:	4619      	mov	r1, r3
 80132de:	6938      	ldr	r0, [r7, #16]
 80132e0:	f7ff ff14 	bl	801310c <move_window>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d167      	bne.n	80133ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	1c5a      	adds	r2, r3, #1
 80132ee:	60fa      	str	r2, [r7, #12]
 80132f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f4:	693a      	ldr	r2, [r7, #16]
 80132f6:	4413      	add	r3, r2
 80132f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	0a5b      	lsrs	r3, r3, #9
 8013306:	4413      	add	r3, r2
 8013308:	4619      	mov	r1, r3
 801330a:	6938      	ldr	r0, [r7, #16]
 801330c:	f7ff fefe 	bl	801310c <move_window>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d153      	bne.n	80133be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801331c:	693a      	ldr	r2, [r7, #16]
 801331e:	4413      	add	r3, r2
 8013320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013324:	021b      	lsls	r3, r3, #8
 8013326:	461a      	mov	r2, r3
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	4313      	orrs	r3, r2
 801332c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	f003 0301 	and.w	r3, r3, #1
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <get_fat+0xbc>
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	091b      	lsrs	r3, r3, #4
 801333c:	e002      	b.n	8013344 <get_fat+0xc2>
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013344:	617b      	str	r3, [r7, #20]
			break;
 8013346:	e03f      	b.n	80133c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	0a1b      	lsrs	r3, r3, #8
 8013350:	4413      	add	r3, r2
 8013352:	4619      	mov	r1, r3
 8013354:	6938      	ldr	r0, [r7, #16]
 8013356:	f7ff fed9 	bl	801310c <move_window>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d130      	bne.n	80133c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	005b      	lsls	r3, r3, #1
 801336a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801336e:	4413      	add	r3, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f7ff fbe9 	bl	8012b48 <ld_word>
 8013376:	4603      	mov	r3, r0
 8013378:	617b      	str	r3, [r7, #20]
			break;
 801337a:	e025      	b.n	80133c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	09db      	lsrs	r3, r3, #7
 8013384:	4413      	add	r3, r2
 8013386:	4619      	mov	r1, r3
 8013388:	6938      	ldr	r0, [r7, #16]
 801338a:	f7ff febf 	bl	801310c <move_window>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d118      	bne.n	80133c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80133a2:	4413      	add	r3, r2
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff fbe7 	bl	8012b78 <ld_dword>
 80133aa:	4603      	mov	r3, r0
 80133ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80133b0:	617b      	str	r3, [r7, #20]
			break;
 80133b2:	e009      	b.n	80133c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80133b4:	2301      	movs	r3, #1
 80133b6:	617b      	str	r3, [r7, #20]
 80133b8:	e006      	b.n	80133c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133ba:	bf00      	nop
 80133bc:	e004      	b.n	80133c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80133be:	bf00      	nop
 80133c0:	e002      	b.n	80133c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80133c2:	bf00      	nop
 80133c4:	e000      	b.n	80133c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80133c6:	bf00      	nop
		}
	}

	return val;
 80133c8:	697b      	ldr	r3, [r7, #20]
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3718      	adds	r7, #24
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}

080133d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80133d2:	b590      	push	{r4, r7, lr}
 80133d4:	b089      	sub	sp, #36	; 0x24
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	60f8      	str	r0, [r7, #12]
 80133da:	60b9      	str	r1, [r7, #8]
 80133dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80133de:	2302      	movs	r3, #2
 80133e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	f240 80d2 	bls.w	801358e <put_fat+0x1bc>
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	699b      	ldr	r3, [r3, #24]
 80133ee:	68ba      	ldr	r2, [r7, #8]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	f080 80cc 	bcs.w	801358e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	2b03      	cmp	r3, #3
 80133fc:	f000 8096 	beq.w	801352c <put_fat+0x15a>
 8013400:	2b03      	cmp	r3, #3
 8013402:	f300 80cd 	bgt.w	80135a0 <put_fat+0x1ce>
 8013406:	2b01      	cmp	r3, #1
 8013408:	d002      	beq.n	8013410 <put_fat+0x3e>
 801340a:	2b02      	cmp	r3, #2
 801340c:	d06e      	beq.n	80134ec <put_fat+0x11a>
 801340e:	e0c7      	b.n	80135a0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	61bb      	str	r3, [r7, #24]
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	085b      	lsrs	r3, r3, #1
 8013418:	69ba      	ldr	r2, [r7, #24]
 801341a:	4413      	add	r3, r2
 801341c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	0a5b      	lsrs	r3, r3, #9
 8013426:	4413      	add	r3, r2
 8013428:	4619      	mov	r1, r3
 801342a:	68f8      	ldr	r0, [r7, #12]
 801342c:	f7ff fe6e 	bl	801310c <move_window>
 8013430:	4603      	mov	r3, r0
 8013432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013434:	7ffb      	ldrb	r3, [r7, #31]
 8013436:	2b00      	cmp	r3, #0
 8013438:	f040 80ab 	bne.w	8013592 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	1c59      	adds	r1, r3, #1
 8013446:	61b9      	str	r1, [r7, #24]
 8013448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801344c:	4413      	add	r3, r2
 801344e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	f003 0301 	and.w	r3, r3, #1
 8013456:	2b00      	cmp	r3, #0
 8013458:	d00d      	beq.n	8013476 <put_fat+0xa4>
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	b25b      	sxtb	r3, r3
 8013460:	f003 030f 	and.w	r3, r3, #15
 8013464:	b25a      	sxtb	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	b2db      	uxtb	r3, r3
 801346a:	011b      	lsls	r3, r3, #4
 801346c:	b25b      	sxtb	r3, r3
 801346e:	4313      	orrs	r3, r2
 8013470:	b25b      	sxtb	r3, r3
 8013472:	b2db      	uxtb	r3, r3
 8013474:	e001      	b.n	801347a <put_fat+0xa8>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	b2db      	uxtb	r3, r3
 801347a:	697a      	ldr	r2, [r7, #20]
 801347c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2201      	movs	r2, #1
 8013482:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	0a5b      	lsrs	r3, r3, #9
 801348c:	4413      	add	r3, r2
 801348e:	4619      	mov	r1, r3
 8013490:	68f8      	ldr	r0, [r7, #12]
 8013492:	f7ff fe3b 	bl	801310c <move_window>
 8013496:	4603      	mov	r3, r0
 8013498:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801349a:	7ffb      	ldrb	r3, [r7, #31]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d17a      	bne.n	8013596 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134ac:	4413      	add	r3, r2
 80134ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	f003 0301 	and.w	r3, r3, #1
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d003      	beq.n	80134c2 <put_fat+0xf0>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	091b      	lsrs	r3, r3, #4
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	e00e      	b.n	80134e0 <put_fat+0x10e>
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	b25b      	sxtb	r3, r3
 80134c8:	f023 030f 	bic.w	r3, r3, #15
 80134cc:	b25a      	sxtb	r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	0a1b      	lsrs	r3, r3, #8
 80134d2:	b25b      	sxtb	r3, r3
 80134d4:	f003 030f 	and.w	r3, r3, #15
 80134d8:	b25b      	sxtb	r3, r3
 80134da:	4313      	orrs	r3, r2
 80134dc:	b25b      	sxtb	r3, r3
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2201      	movs	r2, #1
 80134e8:	70da      	strb	r2, [r3, #3]
			break;
 80134ea:	e059      	b.n	80135a0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	0a1b      	lsrs	r3, r3, #8
 80134f4:	4413      	add	r3, r2
 80134f6:	4619      	mov	r1, r3
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f7ff fe07 	bl	801310c <move_window>
 80134fe:	4603      	mov	r3, r0
 8013500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013502:	7ffb      	ldrb	r3, [r7, #31]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d148      	bne.n	801359a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013516:	4413      	add	r3, r2
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	b292      	uxth	r2, r2
 801351c:	4611      	mov	r1, r2
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff fb4d 	bl	8012bbe <st_word>
			fs->wflag = 1;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2201      	movs	r2, #1
 8013528:	70da      	strb	r2, [r3, #3]
			break;
 801352a:	e039      	b.n	80135a0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	09db      	lsrs	r3, r3, #7
 8013534:	4413      	add	r3, r2
 8013536:	4619      	mov	r1, r3
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff fde7 	bl	801310c <move_window>
 801353e:	4603      	mov	r3, r0
 8013540:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013542:	7ffb      	ldrb	r3, [r7, #31]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d12a      	bne.n	801359e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801355c:	4413      	add	r3, r2
 801355e:	4618      	mov	r0, r3
 8013560:	f7ff fb0a 	bl	8012b78 <ld_dword>
 8013564:	4603      	mov	r3, r0
 8013566:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801356a:	4323      	orrs	r3, r4
 801356c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801357c:	4413      	add	r3, r2
 801357e:	6879      	ldr	r1, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff fb37 	bl	8012bf4 <st_dword>
			fs->wflag = 1;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2201      	movs	r2, #1
 801358a:	70da      	strb	r2, [r3, #3]
			break;
 801358c:	e008      	b.n	80135a0 <put_fat+0x1ce>
		}
	}
 801358e:	bf00      	nop
 8013590:	e006      	b.n	80135a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013592:	bf00      	nop
 8013594:	e004      	b.n	80135a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013596:	bf00      	nop
 8013598:	e002      	b.n	80135a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801359a:	bf00      	nop
 801359c:	e000      	b.n	80135a0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801359e:	bf00      	nop
	return res;
 80135a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3724      	adds	r7, #36	; 0x24
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd90      	pop	{r4, r7, pc}

080135aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b088      	sub	sp, #32
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	60f8      	str	r0, [r7, #12]
 80135b2:	60b9      	str	r1, [r7, #8]
 80135b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80135b6:	2300      	movs	r3, #0
 80135b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d904      	bls.n	80135d0 <remove_chain+0x26>
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d301      	bcc.n	80135d4 <remove_chain+0x2a>
 80135d0:	2302      	movs	r3, #2
 80135d2:	e04b      	b.n	801366c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00c      	beq.n	80135f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80135da:	f04f 32ff 	mov.w	r2, #4294967295
 80135de:	6879      	ldr	r1, [r7, #4]
 80135e0:	69b8      	ldr	r0, [r7, #24]
 80135e2:	f7ff fef6 	bl	80133d2 <put_fat>
 80135e6:	4603      	mov	r3, r0
 80135e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80135ea:	7ffb      	ldrb	r3, [r7, #31]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <remove_chain+0x4a>
 80135f0:	7ffb      	ldrb	r3, [r7, #31]
 80135f2:	e03b      	b.n	801366c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80135f4:	68b9      	ldr	r1, [r7, #8]
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f7ff fe43 	bl	8013282 <get_fat>
 80135fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d031      	beq.n	8013668 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	2b01      	cmp	r3, #1
 8013608:	d101      	bne.n	801360e <remove_chain+0x64>
 801360a:	2302      	movs	r3, #2
 801360c:	e02e      	b.n	801366c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013614:	d101      	bne.n	801361a <remove_chain+0x70>
 8013616:	2301      	movs	r3, #1
 8013618:	e028      	b.n	801366c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801361a:	2200      	movs	r2, #0
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	69b8      	ldr	r0, [r7, #24]
 8013620:	f7ff fed7 	bl	80133d2 <put_fat>
 8013624:	4603      	mov	r3, r0
 8013626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013628:	7ffb      	ldrb	r3, [r7, #31]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d001      	beq.n	8013632 <remove_chain+0x88>
 801362e:	7ffb      	ldrb	r3, [r7, #31]
 8013630:	e01c      	b.n	801366c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	695a      	ldr	r2, [r3, #20]
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	3b02      	subs	r3, #2
 801363c:	429a      	cmp	r2, r3
 801363e:	d20b      	bcs.n	8013658 <remove_chain+0xae>
			fs->free_clst++;
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	1c5a      	adds	r2, r3, #1
 8013646:	69bb      	ldr	r3, [r7, #24]
 8013648:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	791b      	ldrb	r3, [r3, #4]
 801364e:	f043 0301 	orr.w	r3, r3, #1
 8013652:	b2da      	uxtb	r2, r3
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	699b      	ldr	r3, [r3, #24]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	429a      	cmp	r2, r3
 8013664:	d3c6      	bcc.n	80135f4 <remove_chain+0x4a>
 8013666:	e000      	b.n	801366a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013668:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801366a:	2300      	movs	r3, #0
}
 801366c:	4618      	mov	r0, r3
 801366e:	3720      	adds	r7, #32
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b088      	sub	sp, #32
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d10d      	bne.n	80136a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d004      	beq.n	80136a0 <create_chain+0x2c>
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	699b      	ldr	r3, [r3, #24]
 801369a:	69ba      	ldr	r2, [r7, #24]
 801369c:	429a      	cmp	r2, r3
 801369e:	d31b      	bcc.n	80136d8 <create_chain+0x64>
 80136a0:	2301      	movs	r3, #1
 80136a2:	61bb      	str	r3, [r7, #24]
 80136a4:	e018      	b.n	80136d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80136a6:	6839      	ldr	r1, [r7, #0]
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff fdea 	bl	8013282 <get_fat>
 80136ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d801      	bhi.n	80136ba <create_chain+0x46>
 80136b6:	2301      	movs	r3, #1
 80136b8:	e070      	b.n	801379c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c0:	d101      	bne.n	80136c6 <create_chain+0x52>
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	e06a      	b.n	801379c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d201      	bcs.n	80136d4 <create_chain+0x60>
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	e063      	b.n	801379c <create_chain+0x128>
		scl = clst;
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	3301      	adds	r3, #1
 80136e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	699b      	ldr	r3, [r3, #24]
 80136e6:	69fa      	ldr	r2, [r7, #28]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d307      	bcc.n	80136fc <create_chain+0x88>
				ncl = 2;
 80136ec:	2302      	movs	r3, #2
 80136ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80136f0:	69fa      	ldr	r2, [r7, #28]
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d901      	bls.n	80136fc <create_chain+0x88>
 80136f8:	2300      	movs	r3, #0
 80136fa:	e04f      	b.n	801379c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80136fc:	69f9      	ldr	r1, [r7, #28]
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7ff fdbf 	bl	8013282 <get_fat>
 8013704:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d00e      	beq.n	801372a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2b01      	cmp	r3, #1
 8013710:	d003      	beq.n	801371a <create_chain+0xa6>
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013718:	d101      	bne.n	801371e <create_chain+0xaa>
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	e03e      	b.n	801379c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801371e:	69fa      	ldr	r2, [r7, #28]
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	429a      	cmp	r2, r3
 8013724:	d1da      	bne.n	80136dc <create_chain+0x68>
 8013726:	2300      	movs	r3, #0
 8013728:	e038      	b.n	801379c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801372a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801372c:	f04f 32ff 	mov.w	r2, #4294967295
 8013730:	69f9      	ldr	r1, [r7, #28]
 8013732:	6938      	ldr	r0, [r7, #16]
 8013734:	f7ff fe4d 	bl	80133d2 <put_fat>
 8013738:	4603      	mov	r3, r0
 801373a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801373c:	7dfb      	ldrb	r3, [r7, #23]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d109      	bne.n	8013756 <create_chain+0xe2>
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d006      	beq.n	8013756 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013748:	69fa      	ldr	r2, [r7, #28]
 801374a:	6839      	ldr	r1, [r7, #0]
 801374c:	6938      	ldr	r0, [r7, #16]
 801374e:	f7ff fe40 	bl	80133d2 <put_fat>
 8013752:	4603      	mov	r3, r0
 8013754:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013756:	7dfb      	ldrb	r3, [r7, #23]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d116      	bne.n	801378a <create_chain+0x116>
		fs->last_clst = ncl;
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	69fa      	ldr	r2, [r7, #28]
 8013760:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	695a      	ldr	r2, [r3, #20]
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	3b02      	subs	r3, #2
 801376c:	429a      	cmp	r2, r3
 801376e:	d804      	bhi.n	801377a <create_chain+0x106>
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	695b      	ldr	r3, [r3, #20]
 8013774:	1e5a      	subs	r2, r3, #1
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	791b      	ldrb	r3, [r3, #4]
 801377e:	f043 0301 	orr.w	r3, r3, #1
 8013782:	b2da      	uxtb	r2, r3
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	711a      	strb	r2, [r3, #4]
 8013788:	e007      	b.n	801379a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801378a:	7dfb      	ldrb	r3, [r7, #23]
 801378c:	2b01      	cmp	r3, #1
 801378e:	d102      	bne.n	8013796 <create_chain+0x122>
 8013790:	f04f 33ff 	mov.w	r3, #4294967295
 8013794:	e000      	b.n	8013798 <create_chain+0x124>
 8013796:	2301      	movs	r3, #1
 8013798:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801379a:	69fb      	ldr	r3, [r7, #28]
}
 801379c:	4618      	mov	r0, r3
 801379e:	3720      	adds	r7, #32
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b087      	sub	sp, #28
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b8:	3304      	adds	r3, #4
 80137ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	0a5b      	lsrs	r3, r3, #9
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	8952      	ldrh	r2, [r2, #10]
 80137c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80137c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	1d1a      	adds	r2, r3, #4
 80137ce:	613a      	str	r2, [r7, #16]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d101      	bne.n	80137de <clmt_clust+0x3a>
 80137da:	2300      	movs	r3, #0
 80137dc:	e010      	b.n	8013800 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d307      	bcc.n	80137f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80137e6:	697a      	ldr	r2, [r7, #20]
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	1ad3      	subs	r3, r2, r3
 80137ec:	617b      	str	r3, [r7, #20]
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	3304      	adds	r3, #4
 80137f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80137f4:	e7e9      	b.n	80137ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80137f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	4413      	add	r3, r2
}
 8013800:	4618      	mov	r0, r3
 8013802:	371c      	adds	r7, #28
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013822:	d204      	bcs.n	801382e <dir_sdi+0x22>
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	f003 031f 	and.w	r3, r3, #31
 801382a:	2b00      	cmp	r3, #0
 801382c:	d001      	beq.n	8013832 <dir_sdi+0x26>
		return FR_INT_ERR;
 801382e:	2302      	movs	r3, #2
 8013830:	e063      	b.n	80138fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	683a      	ldr	r2, [r7, #0]
 8013836:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	689b      	ldr	r3, [r3, #8]
 801383c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d106      	bne.n	8013852 <dir_sdi+0x46>
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	2b02      	cmp	r3, #2
 801384a:	d902      	bls.n	8013852 <dir_sdi+0x46>
		clst = fs->dirbase;
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013850:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d10c      	bne.n	8013872 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	095b      	lsrs	r3, r3, #5
 801385c:	693a      	ldr	r2, [r7, #16]
 801385e:	8912      	ldrh	r2, [r2, #8]
 8013860:	4293      	cmp	r3, r2
 8013862:	d301      	bcc.n	8013868 <dir_sdi+0x5c>
 8013864:	2302      	movs	r3, #2
 8013866:	e048      	b.n	80138fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	61da      	str	r2, [r3, #28]
 8013870:	e029      	b.n	80138c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	895b      	ldrh	r3, [r3, #10]
 8013876:	025b      	lsls	r3, r3, #9
 8013878:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801387a:	e019      	b.n	80138b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6979      	ldr	r1, [r7, #20]
 8013880:	4618      	mov	r0, r3
 8013882:	f7ff fcfe 	bl	8013282 <get_fat>
 8013886:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388e:	d101      	bne.n	8013894 <dir_sdi+0x88>
 8013890:	2301      	movs	r3, #1
 8013892:	e032      	b.n	80138fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	2b01      	cmp	r3, #1
 8013898:	d904      	bls.n	80138a4 <dir_sdi+0x98>
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d301      	bcc.n	80138a8 <dir_sdi+0x9c>
 80138a4:	2302      	movs	r3, #2
 80138a6:	e028      	b.n	80138fa <dir_sdi+0xee>
			ofs -= csz;
 80138a8:	683a      	ldr	r2, [r7, #0]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80138b0:	683a      	ldr	r2, [r7, #0]
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d2e1      	bcs.n	801387c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80138b8:	6979      	ldr	r1, [r7, #20]
 80138ba:	6938      	ldr	r0, [r7, #16]
 80138bc:	f7ff fcc2 	bl	8013244 <clust2sect>
 80138c0:	4602      	mov	r2, r0
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	697a      	ldr	r2, [r7, #20]
 80138ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	69db      	ldr	r3, [r3, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d101      	bne.n	80138d8 <dir_sdi+0xcc>
 80138d4:	2302      	movs	r3, #2
 80138d6:	e010      	b.n	80138fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	69da      	ldr	r2, [r3, #28]
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	0a5b      	lsrs	r3, r3, #9
 80138e0:	441a      	add	r2, r3
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138f2:	441a      	add	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3718      	adds	r7, #24
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b086      	sub	sp, #24
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
 801390a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	695b      	ldr	r3, [r3, #20]
 8013916:	3320      	adds	r3, #32
 8013918:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	69db      	ldr	r3, [r3, #28]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d003      	beq.n	801392a <dir_next+0x28>
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013928:	d301      	bcc.n	801392e <dir_next+0x2c>
 801392a:	2304      	movs	r3, #4
 801392c:	e0aa      	b.n	8013a84 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013934:	2b00      	cmp	r3, #0
 8013936:	f040 8098 	bne.w	8013a6a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	69db      	ldr	r3, [r3, #28]
 801393e:	1c5a      	adds	r2, r3, #1
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	699b      	ldr	r3, [r3, #24]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d10b      	bne.n	8013964 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	095b      	lsrs	r3, r3, #5
 8013950:	68fa      	ldr	r2, [r7, #12]
 8013952:	8912      	ldrh	r2, [r2, #8]
 8013954:	4293      	cmp	r3, r2
 8013956:	f0c0 8088 	bcc.w	8013a6a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2200      	movs	r2, #0
 801395e:	61da      	str	r2, [r3, #28]
 8013960:	2304      	movs	r3, #4
 8013962:	e08f      	b.n	8013a84 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	0a5b      	lsrs	r3, r3, #9
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	8952      	ldrh	r2, [r2, #10]
 801396c:	3a01      	subs	r2, #1
 801396e:	4013      	ands	r3, r2
 8013970:	2b00      	cmp	r3, #0
 8013972:	d17a      	bne.n	8013a6a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	699b      	ldr	r3, [r3, #24]
 801397a:	4619      	mov	r1, r3
 801397c:	4610      	mov	r0, r2
 801397e:	f7ff fc80 	bl	8013282 <get_fat>
 8013982:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	2b01      	cmp	r3, #1
 8013988:	d801      	bhi.n	801398e <dir_next+0x8c>
 801398a:	2302      	movs	r3, #2
 801398c:	e07a      	b.n	8013a84 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013994:	d101      	bne.n	801399a <dir_next+0x98>
 8013996:	2301      	movs	r3, #1
 8013998:	e074      	b.n	8013a84 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	699b      	ldr	r3, [r3, #24]
 801399e:	697a      	ldr	r2, [r7, #20]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d358      	bcc.n	8013a56 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d104      	bne.n	80139b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2200      	movs	r2, #0
 80139ae:	61da      	str	r2, [r3, #28]
 80139b0:	2304      	movs	r3, #4
 80139b2:	e067      	b.n	8013a84 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	699b      	ldr	r3, [r3, #24]
 80139ba:	4619      	mov	r1, r3
 80139bc:	4610      	mov	r0, r2
 80139be:	f7ff fe59 	bl	8013674 <create_chain>
 80139c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d101      	bne.n	80139ce <dir_next+0xcc>
 80139ca:	2307      	movs	r3, #7
 80139cc:	e05a      	b.n	8013a84 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d101      	bne.n	80139d8 <dir_next+0xd6>
 80139d4:	2302      	movs	r3, #2
 80139d6:	e055      	b.n	8013a84 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139de:	d101      	bne.n	80139e4 <dir_next+0xe2>
 80139e0:	2301      	movs	r3, #1
 80139e2:	e04f      	b.n	8013a84 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f7ff fb4d 	bl	8013084 <sync_window>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d001      	beq.n	80139f4 <dir_next+0xf2>
 80139f0:	2301      	movs	r3, #1
 80139f2:	e047      	b.n	8013a84 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	3334      	adds	r3, #52	; 0x34
 80139f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139fc:	2100      	movs	r1, #0
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7ff f945 	bl	8012c8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013a04:	2300      	movs	r3, #0
 8013a06:	613b      	str	r3, [r7, #16]
 8013a08:	6979      	ldr	r1, [r7, #20]
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff fc1a 	bl	8013244 <clust2sect>
 8013a10:	4602      	mov	r2, r0
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	631a      	str	r2, [r3, #48]	; 0x30
 8013a16:	e012      	b.n	8013a3e <dir_next+0x13c>
						fs->wflag = 1;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013a1e:	68f8      	ldr	r0, [r7, #12]
 8013a20:	f7ff fb30 	bl	8013084 <sync_window>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <dir_next+0x12c>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e02a      	b.n	8013a84 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	3301      	adds	r3, #1
 8013a32:	613b      	str	r3, [r7, #16]
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a38:	1c5a      	adds	r2, r3, #1
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	895b      	ldrh	r3, [r3, #10]
 8013a42:	461a      	mov	r2, r3
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d3e6      	bcc.n	8013a18 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	1ad2      	subs	r2, r2, r3
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	697a      	ldr	r2, [r7, #20]
 8013a5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013a5c:	6979      	ldr	r1, [r7, #20]
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f7ff fbf0 	bl	8013244 <clust2sect>
 8013a64:	4602      	mov	r2, r0
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	68ba      	ldr	r2, [r7, #8]
 8013a6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a7c:	441a      	add	r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013a82:	2300      	movs	r3, #0
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3718      	adds	r7, #24
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7ff feb4 	bl	801380c <dir_sdi>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013aa8:	7dfb      	ldrb	r3, [r7, #23]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d12b      	bne.n	8013b06 <dir_alloc+0x7a>
		n = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	69db      	ldr	r3, [r3, #28]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f7ff fb27 	bl	801310c <move_window>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013ac2:	7dfb      	ldrb	r3, [r7, #23]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d11d      	bne.n	8013b04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6a1b      	ldr	r3, [r3, #32]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	2be5      	cmp	r3, #229	; 0xe5
 8013ad0:	d004      	beq.n	8013adc <dir_alloc+0x50>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6a1b      	ldr	r3, [r3, #32]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d107      	bne.n	8013aec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	3301      	adds	r3, #1
 8013ae0:	613b      	str	r3, [r7, #16]
 8013ae2:	693a      	ldr	r2, [r7, #16]
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d102      	bne.n	8013af0 <dir_alloc+0x64>
 8013aea:	e00c      	b.n	8013b06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013aec:	2300      	movs	r3, #0
 8013aee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013af0:	2101      	movs	r1, #1
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7ff ff05 	bl	8013902 <dir_next>
 8013af8:	4603      	mov	r3, r0
 8013afa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013afc:	7dfb      	ldrb	r3, [r7, #23]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d0d7      	beq.n	8013ab2 <dir_alloc+0x26>
 8013b02:	e000      	b.n	8013b06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013b04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013b06:	7dfb      	ldrb	r3, [r7, #23]
 8013b08:	2b04      	cmp	r3, #4
 8013b0a:	d101      	bne.n	8013b10 <dir_alloc+0x84>
 8013b0c:	2307      	movs	r3, #7
 8013b0e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3718      	adds	r7, #24
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b084      	sub	sp, #16
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
 8013b22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	331a      	adds	r3, #26
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7ff f80d 	bl	8012b48 <ld_word>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	2b03      	cmp	r3, #3
 8013b38:	d109      	bne.n	8013b4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	3314      	adds	r3, #20
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff f802 	bl	8012b48 <ld_word>
 8013b44:	4603      	mov	r3, r0
 8013b46:	041b      	lsls	r3, r3, #16
 8013b48:	68fa      	ldr	r2, [r7, #12]
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	331a      	adds	r3, #26
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	b292      	uxth	r2, r2
 8013b6c:	4611      	mov	r1, r2
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7ff f825 	bl	8012bbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d109      	bne.n	8013b90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	f103 0214 	add.w	r2, r3, #20
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	0c1b      	lsrs	r3, r3, #16
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4610      	mov	r0, r2
 8013b8c:	f7ff f817 	bl	8012bbe <st_word>
	}
}
 8013b90:	bf00      	nop
 8013b92:	3710      	adds	r7, #16
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013ba2:	2304      	movs	r3, #4
 8013ba4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013bac:	e03c      	b.n	8013c28 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	69db      	ldr	r3, [r3, #28]
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	6938      	ldr	r0, [r7, #16]
 8013bb6:	f7ff faa9 	bl	801310c <move_window>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013bbe:	7dfb      	ldrb	r3, [r7, #23]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d136      	bne.n	8013c32 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6a1b      	ldr	r3, [r3, #32]
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013bcc:	7bfb      	ldrb	r3, [r7, #15]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d102      	bne.n	8013bd8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013bd2:	2304      	movs	r3, #4
 8013bd4:	75fb      	strb	r3, [r7, #23]
 8013bd6:	e031      	b.n	8013c3c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a1b      	ldr	r3, [r3, #32]
 8013bdc:	330b      	adds	r3, #11
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013be4:	73bb      	strb	r3, [r7, #14]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	7bba      	ldrb	r2, [r7, #14]
 8013bea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013bec:	7bfb      	ldrb	r3, [r7, #15]
 8013bee:	2be5      	cmp	r3, #229	; 0xe5
 8013bf0:	d011      	beq.n	8013c16 <dir_read+0x7e>
 8013bf2:	7bfb      	ldrb	r3, [r7, #15]
 8013bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8013bf6:	d00e      	beq.n	8013c16 <dir_read+0x7e>
 8013bf8:	7bbb      	ldrb	r3, [r7, #14]
 8013bfa:	2b0f      	cmp	r3, #15
 8013bfc:	d00b      	beq.n	8013c16 <dir_read+0x7e>
 8013bfe:	7bbb      	ldrb	r3, [r7, #14]
 8013c00:	f023 0320 	bic.w	r3, r3, #32
 8013c04:	2b08      	cmp	r3, #8
 8013c06:	bf0c      	ite	eq
 8013c08:	2301      	moveq	r3, #1
 8013c0a:	2300      	movne	r3, #0
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	461a      	mov	r2, r3
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d00f      	beq.n	8013c36 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013c16:	2100      	movs	r1, #0
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f7ff fe72 	bl	8013902 <dir_next>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013c22:	7dfb      	ldrb	r3, [r7, #23]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d108      	bne.n	8013c3a <dir_read+0xa2>
	while (dp->sect) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	69db      	ldr	r3, [r3, #28]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1be      	bne.n	8013bae <dir_read+0x16>
 8013c30:	e004      	b.n	8013c3c <dir_read+0xa4>
		if (res != FR_OK) break;
 8013c32:	bf00      	nop
 8013c34:	e002      	b.n	8013c3c <dir_read+0xa4>
				break;
 8013c36:	bf00      	nop
 8013c38:	e000      	b.n	8013c3c <dir_read+0xa4>
		if (res != FR_OK) break;
 8013c3a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013c3c:	7dfb      	ldrb	r3, [r7, #23]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d002      	beq.n	8013c48 <dir_read+0xb0>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	61da      	str	r2, [r3, #28]
	return res;
 8013c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3718      	adds	r7, #24
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}

08013c52 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013c52:	b580      	push	{r7, lr}
 8013c54:	b086      	sub	sp, #24
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013c60:	2100      	movs	r1, #0
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f7ff fdd2 	bl	801380c <dir_sdi>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013c6c:	7dfb      	ldrb	r3, [r7, #23]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d001      	beq.n	8013c76 <dir_find+0x24>
 8013c72:	7dfb      	ldrb	r3, [r7, #23]
 8013c74:	e03e      	b.n	8013cf4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	69db      	ldr	r3, [r3, #28]
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	6938      	ldr	r0, [r7, #16]
 8013c7e:	f7ff fa45 	bl	801310c <move_window>
 8013c82:	4603      	mov	r3, r0
 8013c84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013c86:	7dfb      	ldrb	r3, [r7, #23]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d12f      	bne.n	8013cec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6a1b      	ldr	r3, [r3, #32]
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d102      	bne.n	8013ca0 <dir_find+0x4e>
 8013c9a:	2304      	movs	r3, #4
 8013c9c:	75fb      	strb	r3, [r7, #23]
 8013c9e:	e028      	b.n	8013cf2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6a1b      	ldr	r3, [r3, #32]
 8013ca4:	330b      	adds	r3, #11
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cac:	b2da      	uxtb	r2, r3
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6a1b      	ldr	r3, [r3, #32]
 8013cb6:	330b      	adds	r3, #11
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	f003 0308 	and.w	r3, r3, #8
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d10a      	bne.n	8013cd8 <dir_find+0x86>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a18      	ldr	r0, [r3, #32]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	3324      	adds	r3, #36	; 0x24
 8013cca:	220b      	movs	r2, #11
 8013ccc:	4619      	mov	r1, r3
 8013cce:	f7fe fff9 	bl	8012cc4 <mem_cmp>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00b      	beq.n	8013cf0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013cd8:	2100      	movs	r1, #0
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff fe11 	bl	8013902 <dir_next>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013ce4:	7dfb      	ldrb	r3, [r7, #23]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d0c5      	beq.n	8013c76 <dir_find+0x24>
 8013cea:	e002      	b.n	8013cf2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013cec:	bf00      	nop
 8013cee:	e000      	b.n	8013cf2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013cf0:	bf00      	nop

	return res;
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7ff febd 	bl	8013a8c <dir_alloc>
 8013d12:	4603      	mov	r3, r0
 8013d14:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013d16:	7bfb      	ldrb	r3, [r7, #15]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d11c      	bne.n	8013d56 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	69db      	ldr	r3, [r3, #28]
 8013d20:	4619      	mov	r1, r3
 8013d22:	68b8      	ldr	r0, [r7, #8]
 8013d24:	f7ff f9f2 	bl	801310c <move_window>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d2c:	7bfb      	ldrb	r3, [r7, #15]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d111      	bne.n	8013d56 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a1b      	ldr	r3, [r3, #32]
 8013d36:	2220      	movs	r2, #32
 8013d38:	2100      	movs	r1, #0
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe ffa7 	bl	8012c8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6a18      	ldr	r0, [r3, #32]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	3324      	adds	r3, #36	; 0x24
 8013d48:	220b      	movs	r2, #11
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	f7fe ff7e 	bl	8012c4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	2201      	movs	r2, #1
 8013d54:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3710      	adds	r7, #16
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b086      	sub	sp, #24
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	69db      	ldr	r3, [r3, #28]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d04e      	beq.n	8013e16 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	613b      	str	r3, [r7, #16]
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013d80:	e021      	b.n	8013dc6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6a1a      	ldr	r2, [r3, #32]
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	1c59      	adds	r1, r3, #1
 8013d8a:	6179      	str	r1, [r7, #20]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013d92:	7bfb      	ldrb	r3, [r7, #15]
 8013d94:	2b20      	cmp	r3, #32
 8013d96:	d100      	bne.n	8013d9a <get_fileinfo+0x3a>
 8013d98:	e015      	b.n	8013dc6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013d9a:	7bfb      	ldrb	r3, [r7, #15]
 8013d9c:	2b05      	cmp	r3, #5
 8013d9e:	d101      	bne.n	8013da4 <get_fileinfo+0x44>
 8013da0:	23e5      	movs	r3, #229	; 0xe5
 8013da2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	2b09      	cmp	r3, #9
 8013da8:	d106      	bne.n	8013db8 <get_fileinfo+0x58>
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	1c5a      	adds	r2, r3, #1
 8013dae:	613a      	str	r2, [r7, #16]
 8013db0:	683a      	ldr	r2, [r7, #0]
 8013db2:	4413      	add	r3, r2
 8013db4:	222e      	movs	r2, #46	; 0x2e
 8013db6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	1c5a      	adds	r2, r3, #1
 8013dbc:	613a      	str	r2, [r7, #16]
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	7bfa      	ldrb	r2, [r7, #15]
 8013dc4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	2b0a      	cmp	r3, #10
 8013dca:	d9da      	bls.n	8013d82 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013dcc:	683a      	ldr	r2, [r7, #0]
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	3309      	adds	r3, #9
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6a1b      	ldr	r3, [r3, #32]
 8013ddc:	7ada      	ldrb	r2, [r3, #11]
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6a1b      	ldr	r3, [r3, #32]
 8013de6:	331c      	adds	r3, #28
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fec5 	bl	8012b78 <ld_dword>
 8013dee:	4602      	mov	r2, r0
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6a1b      	ldr	r3, [r3, #32]
 8013df8:	3316      	adds	r3, #22
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fe febc 	bl	8012b78 <ld_dword>
 8013e00:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	80da      	strh	r2, [r3, #6]
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	0c1b      	lsrs	r3, r3, #16
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	809a      	strh	r2, [r3, #4]
 8013e14:	e000      	b.n	8013e18 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013e16:	bf00      	nop
}
 8013e18:	3718      	adds	r7, #24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
	...

08013e20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b088      	sub	sp, #32
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	60fb      	str	r3, [r7, #12]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3324      	adds	r3, #36	; 0x24
 8013e34:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013e36:	220b      	movs	r2, #11
 8013e38:	2120      	movs	r1, #32
 8013e3a:	68b8      	ldr	r0, [r7, #8]
 8013e3c:	f7fe ff27 	bl	8012c8e <mem_set>
	si = i = 0; ni = 8;
 8013e40:	2300      	movs	r3, #0
 8013e42:	613b      	str	r3, [r7, #16]
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	61fb      	str	r3, [r7, #28]
 8013e48:	2308      	movs	r3, #8
 8013e4a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	1c5a      	adds	r2, r3, #1
 8013e50:	61fa      	str	r2, [r7, #28]
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	4413      	add	r3, r2
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013e5a:	7efb      	ldrb	r3, [r7, #27]
 8013e5c:	2b20      	cmp	r3, #32
 8013e5e:	d94e      	bls.n	8013efe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013e60:	7efb      	ldrb	r3, [r7, #27]
 8013e62:	2b2f      	cmp	r3, #47	; 0x2f
 8013e64:	d006      	beq.n	8013e74 <create_name+0x54>
 8013e66:	7efb      	ldrb	r3, [r7, #27]
 8013e68:	2b5c      	cmp	r3, #92	; 0x5c
 8013e6a:	d110      	bne.n	8013e8e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013e6c:	e002      	b.n	8013e74 <create_name+0x54>
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	3301      	adds	r3, #1
 8013e72:	61fb      	str	r3, [r7, #28]
 8013e74:	68fa      	ldr	r2, [r7, #12]
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	4413      	add	r3, r2
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8013e7e:	d0f6      	beq.n	8013e6e <create_name+0x4e>
 8013e80:	68fa      	ldr	r2, [r7, #12]
 8013e82:	69fb      	ldr	r3, [r7, #28]
 8013e84:	4413      	add	r3, r2
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	2b5c      	cmp	r3, #92	; 0x5c
 8013e8a:	d0f0      	beq.n	8013e6e <create_name+0x4e>
			break;
 8013e8c:	e038      	b.n	8013f00 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013e8e:	7efb      	ldrb	r3, [r7, #27]
 8013e90:	2b2e      	cmp	r3, #46	; 0x2e
 8013e92:	d003      	beq.n	8013e9c <create_name+0x7c>
 8013e94:	693a      	ldr	r2, [r7, #16]
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d30c      	bcc.n	8013eb6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b0b      	cmp	r3, #11
 8013ea0:	d002      	beq.n	8013ea8 <create_name+0x88>
 8013ea2:	7efb      	ldrb	r3, [r7, #27]
 8013ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ea6:	d001      	beq.n	8013eac <create_name+0x8c>
 8013ea8:	2306      	movs	r3, #6
 8013eaa:	e044      	b.n	8013f36 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013eac:	2308      	movs	r3, #8
 8013eae:	613b      	str	r3, [r7, #16]
 8013eb0:	230b      	movs	r3, #11
 8013eb2:	617b      	str	r3, [r7, #20]
			continue;
 8013eb4:	e022      	b.n	8013efc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013eb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	da04      	bge.n	8013ec8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013ebe:	7efb      	ldrb	r3, [r7, #27]
 8013ec0:	3b80      	subs	r3, #128	; 0x80
 8013ec2:	4a1f      	ldr	r2, [pc, #124]	; (8013f40 <create_name+0x120>)
 8013ec4:	5cd3      	ldrb	r3, [r2, r3]
 8013ec6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013ec8:	7efb      	ldrb	r3, [r7, #27]
 8013eca:	4619      	mov	r1, r3
 8013ecc:	481d      	ldr	r0, [pc, #116]	; (8013f44 <create_name+0x124>)
 8013ece:	f7fe ff20 	bl	8012d12 <chk_chr>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d001      	beq.n	8013edc <create_name+0xbc>
 8013ed8:	2306      	movs	r3, #6
 8013eda:	e02c      	b.n	8013f36 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013edc:	7efb      	ldrb	r3, [r7, #27]
 8013ede:	2b60      	cmp	r3, #96	; 0x60
 8013ee0:	d905      	bls.n	8013eee <create_name+0xce>
 8013ee2:	7efb      	ldrb	r3, [r7, #27]
 8013ee4:	2b7a      	cmp	r3, #122	; 0x7a
 8013ee6:	d802      	bhi.n	8013eee <create_name+0xce>
 8013ee8:	7efb      	ldrb	r3, [r7, #27]
 8013eea:	3b20      	subs	r3, #32
 8013eec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	1c5a      	adds	r2, r3, #1
 8013ef2:	613a      	str	r2, [r7, #16]
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	7efa      	ldrb	r2, [r7, #27]
 8013efa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013efc:	e7a6      	b.n	8013e4c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013efe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	441a      	add	r2, r3
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d101      	bne.n	8013f14 <create_name+0xf4>
 8013f10:	2306      	movs	r3, #6
 8013f12:	e010      	b.n	8013f36 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	2be5      	cmp	r3, #229	; 0xe5
 8013f1a:	d102      	bne.n	8013f22 <create_name+0x102>
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	2205      	movs	r2, #5
 8013f20:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013f22:	7efb      	ldrb	r3, [r7, #27]
 8013f24:	2b20      	cmp	r3, #32
 8013f26:	d801      	bhi.n	8013f2c <create_name+0x10c>
 8013f28:	2204      	movs	r2, #4
 8013f2a:	e000      	b.n	8013f2e <create_name+0x10e>
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	330b      	adds	r3, #11
 8013f32:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013f34:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3720      	adds	r7, #32
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	08021a18 	.word	0x08021a18
 8013f44:	0802181c 	.word	0x0802181c

08013f48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013f5c:	e002      	b.n	8013f64 <follow_path+0x1c>
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	3301      	adds	r3, #1
 8013f62:	603b      	str	r3, [r7, #0]
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b2f      	cmp	r3, #47	; 0x2f
 8013f6a:	d0f8      	beq.n	8013f5e <follow_path+0x16>
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	2b5c      	cmp	r3, #92	; 0x5c
 8013f72:	d0f4      	beq.n	8013f5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	2200      	movs	r2, #0
 8013f78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	2b1f      	cmp	r3, #31
 8013f80:	d80a      	bhi.n	8013f98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2280      	movs	r2, #128	; 0x80
 8013f86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013f8a:	2100      	movs	r1, #0
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f7ff fc3d 	bl	801380c <dir_sdi>
 8013f92:	4603      	mov	r3, r0
 8013f94:	75fb      	strb	r3, [r7, #23]
 8013f96:	e043      	b.n	8014020 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013f98:	463b      	mov	r3, r7
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ff3f 	bl	8013e20 <create_name>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013fa6:	7dfb      	ldrb	r3, [r7, #23]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d134      	bne.n	8014016 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7ff fe50 	bl	8013c52 <dir_find>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013fbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013fbe:	7dfb      	ldrb	r3, [r7, #23]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00a      	beq.n	8013fda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013fc4:	7dfb      	ldrb	r3, [r7, #23]
 8013fc6:	2b04      	cmp	r3, #4
 8013fc8:	d127      	bne.n	801401a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013fca:	7afb      	ldrb	r3, [r7, #11]
 8013fcc:	f003 0304 	and.w	r3, r3, #4
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d122      	bne.n	801401a <follow_path+0xd2>
 8013fd4:	2305      	movs	r3, #5
 8013fd6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013fd8:	e01f      	b.n	801401a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013fda:	7afb      	ldrb	r3, [r7, #11]
 8013fdc:	f003 0304 	and.w	r3, r3, #4
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d11c      	bne.n	801401e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	799b      	ldrb	r3, [r3, #6]
 8013fe8:	f003 0310 	and.w	r3, r3, #16
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d102      	bne.n	8013ff6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013ff0:	2305      	movs	r3, #5
 8013ff2:	75fb      	strb	r3, [r7, #23]
 8013ff4:	e014      	b.n	8014020 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	695b      	ldr	r3, [r3, #20]
 8014000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014004:	4413      	add	r3, r2
 8014006:	4619      	mov	r1, r3
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f7ff fd86 	bl	8013b1a <ld_clust>
 801400e:	4602      	mov	r2, r0
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014014:	e7c0      	b.n	8013f98 <follow_path+0x50>
			if (res != FR_OK) break;
 8014016:	bf00      	nop
 8014018:	e002      	b.n	8014020 <follow_path+0xd8>
				break;
 801401a:	bf00      	nop
 801401c:	e000      	b.n	8014020 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801401e:	bf00      	nop
			}
		}
	}

	return res;
 8014020:	7dfb      	ldrb	r3, [r7, #23]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3718      	adds	r7, #24
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801402a:	b480      	push	{r7}
 801402c:	b087      	sub	sp, #28
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014032:	f04f 33ff 	mov.w	r3, #4294967295
 8014036:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d031      	beq.n	80140a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	617b      	str	r3, [r7, #20]
 8014046:	e002      	b.n	801404e <get_ldnumber+0x24>
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	3301      	adds	r3, #1
 801404c:	617b      	str	r3, [r7, #20]
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	2b20      	cmp	r3, #32
 8014054:	d903      	bls.n	801405e <get_ldnumber+0x34>
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	2b3a      	cmp	r3, #58	; 0x3a
 801405c:	d1f4      	bne.n	8014048 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	2b3a      	cmp	r3, #58	; 0x3a
 8014064:	d11c      	bne.n	80140a0 <get_ldnumber+0x76>
			tp = *path;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	1c5a      	adds	r2, r3, #1
 8014070:	60fa      	str	r2, [r7, #12]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	3b30      	subs	r3, #48	; 0x30
 8014076:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	2b09      	cmp	r3, #9
 801407c:	d80e      	bhi.n	801409c <get_ldnumber+0x72>
 801407e:	68fa      	ldr	r2, [r7, #12]
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	429a      	cmp	r2, r3
 8014084:	d10a      	bne.n	801409c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d107      	bne.n	801409c <get_ldnumber+0x72>
					vol = (int)i;
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	3301      	adds	r3, #1
 8014094:	617b      	str	r3, [r7, #20]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	e002      	b.n	80140a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80140a0:	2300      	movs	r3, #0
 80140a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80140a4:	693b      	ldr	r3, [r7, #16]
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	371c      	adds	r7, #28
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
	...

080140b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2200      	movs	r2, #0
 80140c2:	70da      	strb	r2, [r3, #3]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f04f 32ff 	mov.w	r2, #4294967295
 80140ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80140cc:	6839      	ldr	r1, [r7, #0]
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7ff f81c 	bl	801310c <move_window>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d001      	beq.n	80140de <check_fs+0x2a>
 80140da:	2304      	movs	r3, #4
 80140dc:	e038      	b.n	8014150 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	3334      	adds	r3, #52	; 0x34
 80140e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe fd2e 	bl	8012b48 <ld_word>
 80140ec:	4603      	mov	r3, r0
 80140ee:	461a      	mov	r2, r3
 80140f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d001      	beq.n	80140fc <check_fs+0x48>
 80140f8:	2303      	movs	r3, #3
 80140fa:	e029      	b.n	8014150 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014102:	2be9      	cmp	r3, #233	; 0xe9
 8014104:	d009      	beq.n	801411a <check_fs+0x66>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801410c:	2beb      	cmp	r3, #235	; 0xeb
 801410e:	d11e      	bne.n	801414e <check_fs+0x9a>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014116:	2b90      	cmp	r3, #144	; 0x90
 8014118:	d119      	bne.n	801414e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	3334      	adds	r3, #52	; 0x34
 801411e:	3336      	adds	r3, #54	; 0x36
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe fd29 	bl	8012b78 <ld_dword>
 8014126:	4603      	mov	r3, r0
 8014128:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801412c:	4a0a      	ldr	r2, [pc, #40]	; (8014158 <check_fs+0xa4>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d101      	bne.n	8014136 <check_fs+0x82>
 8014132:	2300      	movs	r3, #0
 8014134:	e00c      	b.n	8014150 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	3334      	adds	r3, #52	; 0x34
 801413a:	3352      	adds	r3, #82	; 0x52
 801413c:	4618      	mov	r0, r3
 801413e:	f7fe fd1b 	bl	8012b78 <ld_dword>
 8014142:	4603      	mov	r3, r0
 8014144:	4a05      	ldr	r2, [pc, #20]	; (801415c <check_fs+0xa8>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d101      	bne.n	801414e <check_fs+0x9a>
 801414a:	2300      	movs	r3, #0
 801414c:	e000      	b.n	8014150 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801414e:	2302      	movs	r3, #2
}
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	00544146 	.word	0x00544146
 801415c:	33544146 	.word	0x33544146

08014160 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b096      	sub	sp, #88	; 0x58
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	4613      	mov	r3, r2
 801416c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	2200      	movs	r2, #0
 8014172:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014174:	68f8      	ldr	r0, [r7, #12]
 8014176:	f7ff ff58 	bl	801402a <get_ldnumber>
 801417a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801417e:	2b00      	cmp	r3, #0
 8014180:	da01      	bge.n	8014186 <find_volume+0x26>
 8014182:	230b      	movs	r3, #11
 8014184:	e236      	b.n	80145f4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014186:	4aac      	ldr	r2, [pc, #688]	; (8014438 <find_volume+0x2d8>)
 8014188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801418e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014192:	2b00      	cmp	r3, #0
 8014194:	d101      	bne.n	801419a <find_volume+0x3a>
 8014196:	230c      	movs	r3, #12
 8014198:	e22c      	b.n	80145f4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801419a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801419c:	f7fe fdd4 	bl	8012d48 <lock_fs>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d101      	bne.n	80141aa <find_volume+0x4a>
 80141a6:	230f      	movs	r3, #15
 80141a8:	e224      	b.n	80145f4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80141b0:	79fb      	ldrb	r3, [r7, #7]
 80141b2:	f023 0301 	bic.w	r3, r3, #1
 80141b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80141b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d01a      	beq.n	80141f6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80141c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c2:	785b      	ldrb	r3, [r3, #1]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe fc21 	bl	8012a0c <disk_status>
 80141ca:	4603      	mov	r3, r0
 80141cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80141d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80141d4:	f003 0301 	and.w	r3, r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d10c      	bne.n	80141f6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80141dc:	79fb      	ldrb	r3, [r7, #7]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d007      	beq.n	80141f2 <find_volume+0x92>
 80141e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80141e6:	f003 0304 	and.w	r3, r3, #4
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80141ee:	230a      	movs	r3, #10
 80141f0:	e200      	b.n	80145f4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80141f2:	2300      	movs	r3, #0
 80141f4:	e1fe      	b.n	80145f4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80141f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f8:	2200      	movs	r2, #0
 80141fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80141fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141fe:	b2da      	uxtb	r2, r3
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	785b      	ldrb	r3, [r3, #1]
 8014208:	4618      	mov	r0, r3
 801420a:	f7fe fc19 	bl	8012a40 <disk_initialize>
 801420e:	4603      	mov	r3, r0
 8014210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014218:	f003 0301 	and.w	r3, r3, #1
 801421c:	2b00      	cmp	r3, #0
 801421e:	d001      	beq.n	8014224 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014220:	2303      	movs	r3, #3
 8014222:	e1e7      	b.n	80145f4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014224:	79fb      	ldrb	r3, [r7, #7]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d007      	beq.n	801423a <find_volume+0xda>
 801422a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801422e:	f003 0304 	and.w	r3, r3, #4
 8014232:	2b00      	cmp	r3, #0
 8014234:	d001      	beq.n	801423a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8014236:	230a      	movs	r3, #10
 8014238:	e1dc      	b.n	80145f4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801423a:	2300      	movs	r3, #0
 801423c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801423e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014242:	f7ff ff37 	bl	80140b4 <check_fs>
 8014246:	4603      	mov	r3, r0
 8014248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801424c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014250:	2b02      	cmp	r3, #2
 8014252:	d14b      	bne.n	80142ec <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014254:	2300      	movs	r3, #0
 8014256:	643b      	str	r3, [r7, #64]	; 0x40
 8014258:	e01f      	b.n	801429a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014262:	011b      	lsls	r3, r3, #4
 8014264:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014268:	4413      	add	r3, r2
 801426a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426e:	3304      	adds	r3, #4
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d006      	beq.n	8014284 <find_volume+0x124>
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	3308      	adds	r3, #8
 801427a:	4618      	mov	r0, r3
 801427c:	f7fe fc7c 	bl	8012b78 <ld_dword>
 8014280:	4602      	mov	r2, r0
 8014282:	e000      	b.n	8014286 <find_volume+0x126>
 8014284:	2200      	movs	r2, #0
 8014286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801428e:	440b      	add	r3, r1
 8014290:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014296:	3301      	adds	r3, #1
 8014298:	643b      	str	r3, [r7, #64]	; 0x40
 801429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801429c:	2b03      	cmp	r3, #3
 801429e:	d9dc      	bls.n	801425a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80142a0:	2300      	movs	r3, #0
 80142a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80142a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d002      	beq.n	80142b0 <find_volume+0x150>
 80142aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142ac:	3b01      	subs	r3, #1
 80142ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80142b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80142b8:	4413      	add	r3, r2
 80142ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80142be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80142c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d005      	beq.n	80142d2 <find_volume+0x172>
 80142c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80142c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80142ca:	f7ff fef3 	bl	80140b4 <check_fs>
 80142ce:	4603      	mov	r3, r0
 80142d0:	e000      	b.n	80142d4 <find_volume+0x174>
 80142d2:	2303      	movs	r3, #3
 80142d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80142d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d905      	bls.n	80142ec <find_volume+0x18c>
 80142e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e2:	3301      	adds	r3, #1
 80142e4:	643b      	str	r3, [r7, #64]	; 0x40
 80142e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e8:	2b03      	cmp	r3, #3
 80142ea:	d9e1      	bls.n	80142b0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80142ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142f0:	2b04      	cmp	r3, #4
 80142f2:	d101      	bne.n	80142f8 <find_volume+0x198>
 80142f4:	2301      	movs	r3, #1
 80142f6:	e17d      	b.n	80145f4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80142f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d901      	bls.n	8014304 <find_volume+0x1a4>
 8014300:	230d      	movs	r3, #13
 8014302:	e177      	b.n	80145f4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014306:	3334      	adds	r3, #52	; 0x34
 8014308:	330b      	adds	r3, #11
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fc1c 	bl	8012b48 <ld_word>
 8014310:	4603      	mov	r3, r0
 8014312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014316:	d001      	beq.n	801431c <find_volume+0x1bc>
 8014318:	230d      	movs	r3, #13
 801431a:	e16b      	b.n	80145f4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431e:	3334      	adds	r3, #52	; 0x34
 8014320:	3316      	adds	r3, #22
 8014322:	4618      	mov	r0, r3
 8014324:	f7fe fc10 	bl	8012b48 <ld_word>
 8014328:	4603      	mov	r3, r0
 801432a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801432e:	2b00      	cmp	r3, #0
 8014330:	d106      	bne.n	8014340 <find_volume+0x1e0>
 8014332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014334:	3334      	adds	r3, #52	; 0x34
 8014336:	3324      	adds	r3, #36	; 0x24
 8014338:	4618      	mov	r0, r3
 801433a:	f7fe fc1d 	bl	8012b78 <ld_dword>
 801433e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014344:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014348:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801434e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014352:	789b      	ldrb	r3, [r3, #2]
 8014354:	2b01      	cmp	r3, #1
 8014356:	d005      	beq.n	8014364 <find_volume+0x204>
 8014358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435a:	789b      	ldrb	r3, [r3, #2]
 801435c:	2b02      	cmp	r3, #2
 801435e:	d001      	beq.n	8014364 <find_volume+0x204>
 8014360:	230d      	movs	r3, #13
 8014362:	e147      	b.n	80145f4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014366:	789b      	ldrb	r3, [r3, #2]
 8014368:	461a      	mov	r2, r3
 801436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436c:	fb02 f303 	mul.w	r3, r2, r3
 8014370:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014378:	b29a      	uxth	r2, r3
 801437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014380:	895b      	ldrh	r3, [r3, #10]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d008      	beq.n	8014398 <find_volume+0x238>
 8014386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014388:	895b      	ldrh	r3, [r3, #10]
 801438a:	461a      	mov	r2, r3
 801438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438e:	895b      	ldrh	r3, [r3, #10]
 8014390:	3b01      	subs	r3, #1
 8014392:	4013      	ands	r3, r2
 8014394:	2b00      	cmp	r3, #0
 8014396:	d001      	beq.n	801439c <find_volume+0x23c>
 8014398:	230d      	movs	r3, #13
 801439a:	e12b      	b.n	80145f4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439e:	3334      	adds	r3, #52	; 0x34
 80143a0:	3311      	adds	r3, #17
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7fe fbd0 	bl	8012b48 <ld_word>
 80143a8:	4603      	mov	r3, r0
 80143aa:	461a      	mov	r2, r3
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80143b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b2:	891b      	ldrh	r3, [r3, #8]
 80143b4:	f003 030f 	and.w	r3, r3, #15
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d001      	beq.n	80143c2 <find_volume+0x262>
 80143be:	230d      	movs	r3, #13
 80143c0:	e118      	b.n	80145f4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80143c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c4:	3334      	adds	r3, #52	; 0x34
 80143c6:	3313      	adds	r3, #19
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fe fbbd 	bl	8012b48 <ld_word>
 80143ce:	4603      	mov	r3, r0
 80143d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80143d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d106      	bne.n	80143e6 <find_volume+0x286>
 80143d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143da:	3334      	adds	r3, #52	; 0x34
 80143dc:	3320      	adds	r3, #32
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fe fbca 	bl	8012b78 <ld_dword>
 80143e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80143e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e8:	3334      	adds	r3, #52	; 0x34
 80143ea:	330e      	adds	r3, #14
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fe fbab 	bl	8012b48 <ld_word>
 80143f2:	4603      	mov	r3, r0
 80143f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80143f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d101      	bne.n	8014400 <find_volume+0x2a0>
 80143fc:	230d      	movs	r3, #13
 80143fe:	e0f9      	b.n	80145f4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014400:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014404:	4413      	add	r3, r2
 8014406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014408:	8912      	ldrh	r2, [r2, #8]
 801440a:	0912      	lsrs	r2, r2, #4
 801440c:	b292      	uxth	r2, r2
 801440e:	4413      	add	r3, r2
 8014410:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014416:	429a      	cmp	r2, r3
 8014418:	d201      	bcs.n	801441e <find_volume+0x2be>
 801441a:	230d      	movs	r3, #13
 801441c:	e0ea      	b.n	80145f4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014426:	8952      	ldrh	r2, [r2, #10]
 8014428:	fbb3 f3f2 	udiv	r3, r3, r2
 801442c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014430:	2b00      	cmp	r3, #0
 8014432:	d103      	bne.n	801443c <find_volume+0x2dc>
 8014434:	230d      	movs	r3, #13
 8014436:	e0dd      	b.n	80145f4 <find_volume+0x494>
 8014438:	20000844 	.word	0x20000844
		fmt = FS_FAT32;
 801443c:	2303      	movs	r3, #3
 801443e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014444:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014448:	4293      	cmp	r3, r2
 801444a:	d802      	bhi.n	8014452 <find_volume+0x2f2>
 801444c:	2302      	movs	r3, #2
 801444e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014454:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014458:	4293      	cmp	r3, r2
 801445a:	d802      	bhi.n	8014462 <find_volume+0x302>
 801445c:	2301      	movs	r3, #1
 801445e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014464:	1c9a      	adds	r2, r3, #2
 8014466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014468:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801446c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801446e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014474:	441a      	add	r2, r3
 8014476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014478:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801447a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447e:	441a      	add	r2, r3
 8014480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014482:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014488:	2b03      	cmp	r3, #3
 801448a:	d11e      	bne.n	80144ca <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801448e:	3334      	adds	r3, #52	; 0x34
 8014490:	332a      	adds	r3, #42	; 0x2a
 8014492:	4618      	mov	r0, r3
 8014494:	f7fe fb58 	bl	8012b48 <ld_word>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d001      	beq.n	80144a2 <find_volume+0x342>
 801449e:	230d      	movs	r3, #13
 80144a0:	e0a8      	b.n	80145f4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80144a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a4:	891b      	ldrh	r3, [r3, #8]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d001      	beq.n	80144ae <find_volume+0x34e>
 80144aa:	230d      	movs	r3, #13
 80144ac:	e0a2      	b.n	80145f4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80144ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b0:	3334      	adds	r3, #52	; 0x34
 80144b2:	332c      	adds	r3, #44	; 0x2c
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe fb5f 	bl	8012b78 <ld_dword>
 80144ba:	4602      	mov	r2, r0
 80144bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80144c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c2:	699b      	ldr	r3, [r3, #24]
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	647b      	str	r3, [r7, #68]	; 0x44
 80144c8:	e01f      	b.n	801450a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80144ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144cc:	891b      	ldrh	r3, [r3, #8]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <find_volume+0x376>
 80144d2:	230d      	movs	r3, #13
 80144d4:	e08e      	b.n	80145f4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80144d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144dc:	441a      	add	r2, r3
 80144de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80144e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d103      	bne.n	80144f2 <find_volume+0x392>
 80144ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ec:	699b      	ldr	r3, [r3, #24]
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	e00a      	b.n	8014508 <find_volume+0x3a8>
 80144f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f4:	699a      	ldr	r2, [r3, #24]
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	085a      	lsrs	r2, r3, #1
 80144fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014500:	699b      	ldr	r3, [r3, #24]
 8014502:	f003 0301 	and.w	r3, r3, #1
 8014506:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014508:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801450c:	69da      	ldr	r2, [r3, #28]
 801450e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014510:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014514:	0a5b      	lsrs	r3, r3, #9
 8014516:	429a      	cmp	r2, r3
 8014518:	d201      	bcs.n	801451e <find_volume+0x3be>
 801451a:	230d      	movs	r3, #13
 801451c:	e06a      	b.n	80145f4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014520:	f04f 32ff 	mov.w	r2, #4294967295
 8014524:	615a      	str	r2, [r3, #20]
 8014526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014528:	695a      	ldr	r2, [r3, #20]
 801452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014530:	2280      	movs	r2, #128	; 0x80
 8014532:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014538:	2b03      	cmp	r3, #3
 801453a:	d149      	bne.n	80145d0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453e:	3334      	adds	r3, #52	; 0x34
 8014540:	3330      	adds	r3, #48	; 0x30
 8014542:	4618      	mov	r0, r3
 8014544:	f7fe fb00 	bl	8012b48 <ld_word>
 8014548:	4603      	mov	r3, r0
 801454a:	2b01      	cmp	r3, #1
 801454c:	d140      	bne.n	80145d0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014550:	3301      	adds	r3, #1
 8014552:	4619      	mov	r1, r3
 8014554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014556:	f7fe fdd9 	bl	801310c <move_window>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d137      	bne.n	80145d0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014562:	2200      	movs	r2, #0
 8014564:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014568:	3334      	adds	r3, #52	; 0x34
 801456a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801456e:	4618      	mov	r0, r3
 8014570:	f7fe faea 	bl	8012b48 <ld_word>
 8014574:	4603      	mov	r3, r0
 8014576:	461a      	mov	r2, r3
 8014578:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801457c:	429a      	cmp	r2, r3
 801457e:	d127      	bne.n	80145d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014582:	3334      	adds	r3, #52	; 0x34
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe faf7 	bl	8012b78 <ld_dword>
 801458a:	4603      	mov	r3, r0
 801458c:	4a1b      	ldr	r2, [pc, #108]	; (80145fc <find_volume+0x49c>)
 801458e:	4293      	cmp	r3, r2
 8014590:	d11e      	bne.n	80145d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	3334      	adds	r3, #52	; 0x34
 8014596:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801459a:	4618      	mov	r0, r3
 801459c:	f7fe faec 	bl	8012b78 <ld_dword>
 80145a0:	4603      	mov	r3, r0
 80145a2:	4a17      	ldr	r2, [pc, #92]	; (8014600 <find_volume+0x4a0>)
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d113      	bne.n	80145d0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80145a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145aa:	3334      	adds	r3, #52	; 0x34
 80145ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7fe fae1 	bl	8012b78 <ld_dword>
 80145b6:	4602      	mov	r2, r0
 80145b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80145bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145be:	3334      	adds	r3, #52	; 0x34
 80145c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fe fad7 	bl	8012b78 <ld_dword>
 80145ca:	4602      	mov	r2, r0
 80145cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80145d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80145d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80145d8:	4b0a      	ldr	r3, [pc, #40]	; (8014604 <find_volume+0x4a4>)
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	3301      	adds	r3, #1
 80145de:	b29a      	uxth	r2, r3
 80145e0:	4b08      	ldr	r3, [pc, #32]	; (8014604 <find_volume+0x4a4>)
 80145e2:	801a      	strh	r2, [r3, #0]
 80145e4:	4b07      	ldr	r3, [pc, #28]	; (8014604 <find_volume+0x4a4>)
 80145e6:	881a      	ldrh	r2, [r3, #0]
 80145e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80145ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145ee:	f7fe fd25 	bl	801303c <clear_lock>
#endif
	return FR_OK;
 80145f2:	2300      	movs	r3, #0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3758      	adds	r7, #88	; 0x58
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	41615252 	.word	0x41615252
 8014600:	61417272 	.word	0x61417272
 8014604:	20000848 	.word	0x20000848

08014608 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014612:	2309      	movs	r3, #9
 8014614:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d02e      	beq.n	801467a <validate+0x72>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d02a      	beq.n	801467a <validate+0x72>
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d025      	beq.n	801467a <validate+0x72>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	889a      	ldrh	r2, [r3, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	88db      	ldrh	r3, [r3, #6]
 8014638:	429a      	cmp	r2, r3
 801463a:	d11e      	bne.n	801467a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fb81 	bl	8012d48 <lock_fs>
 8014646:	4603      	mov	r3, r0
 8014648:	2b00      	cmp	r3, #0
 801464a:	d014      	beq.n	8014676 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	785b      	ldrb	r3, [r3, #1]
 8014652:	4618      	mov	r0, r3
 8014654:	f7fe f9da 	bl	8012a0c <disk_status>
 8014658:	4603      	mov	r3, r0
 801465a:	f003 0301 	and.w	r3, r3, #1
 801465e:	2b00      	cmp	r3, #0
 8014660:	d102      	bne.n	8014668 <validate+0x60>
				res = FR_OK;
 8014662:	2300      	movs	r3, #0
 8014664:	73fb      	strb	r3, [r7, #15]
 8014666:	e008      	b.n	801467a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	2100      	movs	r1, #0
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe fb80 	bl	8012d74 <unlock_fs>
 8014674:	e001      	b.n	801467a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014676:	230f      	movs	r3, #15
 8014678:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <validate+0x7e>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	e000      	b.n	8014688 <validate+0x80>
 8014686:	2300      	movs	r3, #0
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	6013      	str	r3, [r2, #0]
	return res;
 801468c:	7bfb      	ldrb	r3, [r7, #15]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
	...

08014698 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b088      	sub	sp, #32
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	4613      	mov	r3, r2
 80146a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80146aa:	f107 0310 	add.w	r3, r7, #16
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7ff fcbb 	bl	801402a <get_ldnumber>
 80146b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	da01      	bge.n	80146c0 <f_mount+0x28>
 80146bc:	230b      	movs	r3, #11
 80146be:	e048      	b.n	8014752 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80146c0:	4a26      	ldr	r2, [pc, #152]	; (801475c <f_mount+0xc4>)
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d00f      	beq.n	80146f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80146d0:	69b8      	ldr	r0, [r7, #24]
 80146d2:	f7fe fcb3 	bl	801303c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	68db      	ldr	r3, [r3, #12]
 80146da:	4618      	mov	r0, r3
 80146dc:	f001 f812 	bl	8015704 <ff_del_syncobj>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d101      	bne.n	80146ea <f_mount+0x52>
 80146e6:	2302      	movs	r3, #2
 80146e8:	e033      	b.n	8014752 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	2200      	movs	r2, #0
 80146ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00f      	beq.n	8014716 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2200      	movs	r2, #0
 80146fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	330c      	adds	r3, #12
 8014704:	4619      	mov	r1, r3
 8014706:	4610      	mov	r0, r2
 8014708:	f000 ffe1 	bl	80156ce <ff_cre_syncobj>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d101      	bne.n	8014716 <f_mount+0x7e>
 8014712:	2302      	movs	r3, #2
 8014714:	e01d      	b.n	8014752 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014716:	68fa      	ldr	r2, [r7, #12]
 8014718:	4910      	ldr	r1, [pc, #64]	; (801475c <f_mount+0xc4>)
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d002      	beq.n	801472c <f_mount+0x94>
 8014726:	79fb      	ldrb	r3, [r7, #7]
 8014728:	2b01      	cmp	r3, #1
 801472a:	d001      	beq.n	8014730 <f_mount+0x98>
 801472c:	2300      	movs	r3, #0
 801472e:	e010      	b.n	8014752 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014730:	f107 010c 	add.w	r1, r7, #12
 8014734:	f107 0308 	add.w	r3, r7, #8
 8014738:	2200      	movs	r2, #0
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff fd10 	bl	8014160 <find_volume>
 8014740:	4603      	mov	r3, r0
 8014742:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	7dfa      	ldrb	r2, [r7, #23]
 8014748:	4611      	mov	r1, r2
 801474a:	4618      	mov	r0, r3
 801474c:	f7fe fb12 	bl	8012d74 <unlock_fs>
 8014750:	7dfb      	ldrb	r3, [r7, #23]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3720      	adds	r7, #32
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	20000844 	.word	0x20000844

08014760 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b098      	sub	sp, #96	; 0x60
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	4613      	mov	r3, r2
 801476c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d101      	bne.n	8014778 <f_open+0x18>
 8014774:	2309      	movs	r3, #9
 8014776:	e1b4      	b.n	8014ae2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014778:	79fb      	ldrb	r3, [r7, #7]
 801477a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801477e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014780:	79fa      	ldrb	r2, [r7, #7]
 8014782:	f107 0110 	add.w	r1, r7, #16
 8014786:	f107 0308 	add.w	r3, r7, #8
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff fce8 	bl	8014160 <find_volume>
 8014790:	4603      	mov	r3, r0
 8014792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801479a:	2b00      	cmp	r3, #0
 801479c:	f040 8191 	bne.w	8014ac2 <f_open+0x362>
		dj.obj.fs = fs;
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80147a4:	68ba      	ldr	r2, [r7, #8]
 80147a6:	f107 0314 	add.w	r3, r7, #20
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7ff fbcb 	bl	8013f48 <follow_path>
 80147b2:	4603      	mov	r3, r0
 80147b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80147b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d11a      	bne.n	80147f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80147c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80147c4:	b25b      	sxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da03      	bge.n	80147d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80147ca:	2306      	movs	r3, #6
 80147cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80147d0:	e011      	b.n	80147f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147d2:	79fb      	ldrb	r3, [r7, #7]
 80147d4:	f023 0301 	bic.w	r3, r3, #1
 80147d8:	2b00      	cmp	r3, #0
 80147da:	bf14      	ite	ne
 80147dc:	2301      	movne	r3, #1
 80147de:	2300      	moveq	r3, #0
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	461a      	mov	r2, r3
 80147e4:	f107 0314 	add.w	r3, r7, #20
 80147e8:	4611      	mov	r1, r2
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fe fade 	bl	8012dac <chk_lock>
 80147f0:	4603      	mov	r3, r0
 80147f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80147f6:	79fb      	ldrb	r3, [r7, #7]
 80147f8:	f003 031c 	and.w	r3, r3, #28
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d07f      	beq.n	8014900 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014804:	2b00      	cmp	r3, #0
 8014806:	d017      	beq.n	8014838 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801480c:	2b04      	cmp	r3, #4
 801480e:	d10e      	bne.n	801482e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014810:	f7fe fb28 	bl	8012e64 <enq_lock>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d006      	beq.n	8014828 <f_open+0xc8>
 801481a:	f107 0314 	add.w	r3, r7, #20
 801481e:	4618      	mov	r0, r3
 8014820:	f7ff fa6c 	bl	8013cfc <dir_register>
 8014824:	4603      	mov	r3, r0
 8014826:	e000      	b.n	801482a <f_open+0xca>
 8014828:	2312      	movs	r3, #18
 801482a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801482e:	79fb      	ldrb	r3, [r7, #7]
 8014830:	f043 0308 	orr.w	r3, r3, #8
 8014834:	71fb      	strb	r3, [r7, #7]
 8014836:	e010      	b.n	801485a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014838:	7ebb      	ldrb	r3, [r7, #26]
 801483a:	f003 0311 	and.w	r3, r3, #17
 801483e:	2b00      	cmp	r3, #0
 8014840:	d003      	beq.n	801484a <f_open+0xea>
					res = FR_DENIED;
 8014842:	2307      	movs	r3, #7
 8014844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014848:	e007      	b.n	801485a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801484a:	79fb      	ldrb	r3, [r7, #7]
 801484c:	f003 0304 	and.w	r3, r3, #4
 8014850:	2b00      	cmp	r3, #0
 8014852:	d002      	beq.n	801485a <f_open+0xfa>
 8014854:	2308      	movs	r3, #8
 8014856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801485a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801485e:	2b00      	cmp	r3, #0
 8014860:	d168      	bne.n	8014934 <f_open+0x1d4>
 8014862:	79fb      	ldrb	r3, [r7, #7]
 8014864:	f003 0308 	and.w	r3, r3, #8
 8014868:	2b00      	cmp	r3, #0
 801486a:	d063      	beq.n	8014934 <f_open+0x1d4>
				dw = GET_FATTIME();
 801486c:	f7fb ff2e 	bl	80106cc <get_fattime>
 8014870:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014874:	330e      	adds	r3, #14
 8014876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014878:	4618      	mov	r0, r3
 801487a:	f7fe f9bb 	bl	8012bf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014880:	3316      	adds	r3, #22
 8014882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014884:	4618      	mov	r0, r3
 8014886:	f7fe f9b5 	bl	8012bf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801488c:	330b      	adds	r3, #11
 801488e:	2220      	movs	r2, #32
 8014890:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f7ff f93e 	bl	8013b1a <ld_clust>
 801489e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80148a4:	2200      	movs	r2, #0
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7ff f956 	bl	8013b58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80148ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ae:	331c      	adds	r3, #28
 80148b0:	2100      	movs	r1, #0
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe f99e 	bl	8012bf4 <st_dword>
					fs->wflag = 1;
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	2201      	movs	r2, #1
 80148bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80148be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d037      	beq.n	8014934 <f_open+0x1d4>
						dw = fs->winsect;
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80148ca:	f107 0314 	add.w	r3, r7, #20
 80148ce:	2200      	movs	r2, #0
 80148d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fe69 	bl	80135aa <remove_chain>
 80148d8:	4603      	mov	r3, r0
 80148da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80148de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d126      	bne.n	8014934 <f_open+0x1d4>
							res = move_window(fs, dw);
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7fe fc0e 	bl	801310c <move_window>
 80148f0:	4603      	mov	r3, r0
 80148f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148fa:	3a01      	subs	r2, #1
 80148fc:	611a      	str	r2, [r3, #16]
 80148fe:	e019      	b.n	8014934 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014904:	2b00      	cmp	r3, #0
 8014906:	d115      	bne.n	8014934 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014908:	7ebb      	ldrb	r3, [r7, #26]
 801490a:	f003 0310 	and.w	r3, r3, #16
 801490e:	2b00      	cmp	r3, #0
 8014910:	d003      	beq.n	801491a <f_open+0x1ba>
					res = FR_NO_FILE;
 8014912:	2304      	movs	r3, #4
 8014914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014918:	e00c      	b.n	8014934 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801491a:	79fb      	ldrb	r3, [r7, #7]
 801491c:	f003 0302 	and.w	r3, r3, #2
 8014920:	2b00      	cmp	r3, #0
 8014922:	d007      	beq.n	8014934 <f_open+0x1d4>
 8014924:	7ebb      	ldrb	r3, [r7, #26]
 8014926:	f003 0301 	and.w	r3, r3, #1
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <f_open+0x1d4>
						res = FR_DENIED;
 801492e:	2307      	movs	r3, #7
 8014930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014938:	2b00      	cmp	r3, #0
 801493a:	d128      	bne.n	801498e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801493c:	79fb      	ldrb	r3, [r7, #7]
 801493e:	f003 0308 	and.w	r3, r3, #8
 8014942:	2b00      	cmp	r3, #0
 8014944:	d003      	beq.n	801494e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801494c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801495c:	79fb      	ldrb	r3, [r7, #7]
 801495e:	f023 0301 	bic.w	r3, r3, #1
 8014962:	2b00      	cmp	r3, #0
 8014964:	bf14      	ite	ne
 8014966:	2301      	movne	r3, #1
 8014968:	2300      	moveq	r3, #0
 801496a:	b2db      	uxtb	r3, r3
 801496c:	461a      	mov	r2, r3
 801496e:	f107 0314 	add.w	r3, r7, #20
 8014972:	4611      	mov	r1, r2
 8014974:	4618      	mov	r0, r3
 8014976:	f7fe fa97 	bl	8012ea8 <inc_lock>
 801497a:	4602      	mov	r2, r0
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	691b      	ldr	r3, [r3, #16]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d102      	bne.n	801498e <f_open+0x22e>
 8014988:	2302      	movs	r3, #2
 801498a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801498e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014992:	2b00      	cmp	r3, #0
 8014994:	f040 8095 	bne.w	8014ac2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801499c:	4611      	mov	r1, r2
 801499e:	4618      	mov	r0, r3
 80149a0:	f7ff f8bb 	bl	8013b1a <ld_clust>
 80149a4:	4602      	mov	r2, r0
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80149aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ac:	331c      	adds	r3, #28
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fe f8e2 	bl	8012b78 <ld_dword>
 80149b4:	4602      	mov	r2, r0
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2200      	movs	r2, #0
 80149be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	88da      	ldrh	r2, [r3, #6]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	79fa      	ldrb	r2, [r7, #7]
 80149d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2200      	movs	r2, #0
 80149d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2200      	movs	r2, #0
 80149e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	3330      	adds	r3, #48	; 0x30
 80149ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149ee:	2100      	movs	r1, #0
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fe f94c 	bl	8012c8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80149f6:	79fb      	ldrb	r3, [r7, #7]
 80149f8:	f003 0320 	and.w	r3, r3, #32
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d060      	beq.n	8014ac2 <f_open+0x362>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d05c      	beq.n	8014ac2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	68da      	ldr	r2, [r3, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	895b      	ldrh	r3, [r3, #10]
 8014a14:	025b      	lsls	r3, r3, #9
 8014a16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	657b      	str	r3, [r7, #84]	; 0x54
 8014a24:	e016      	b.n	8014a54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe fc29 	bl	8013282 <get_fat>
 8014a30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d802      	bhi.n	8014a3e <f_open+0x2de>
 8014a38:	2302      	movs	r3, #2
 8014a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a44:	d102      	bne.n	8014a4c <f_open+0x2ec>
 8014a46:	2301      	movs	r3, #1
 8014a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	657b      	str	r3, [r7, #84]	; 0x54
 8014a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d103      	bne.n	8014a64 <f_open+0x304>
 8014a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d8e0      	bhi.n	8014a26 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d127      	bne.n	8014ac2 <f_open+0x362>
 8014a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d022      	beq.n	8014ac2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fe fbdf 	bl	8013244 <clust2sect>
 8014a86:	6478      	str	r0, [r7, #68]	; 0x44
 8014a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d103      	bne.n	8014a96 <f_open+0x336>
						res = FR_INT_ERR;
 8014a8e:	2302      	movs	r3, #2
 8014a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014a94:	e015      	b.n	8014ac2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a98:	0a5a      	lsrs	r2, r3, #9
 8014a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a9c:	441a      	add	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	7858      	ldrb	r0, [r3, #1]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	6a1a      	ldr	r2, [r3, #32]
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	f7fd ffeb 	bl	8012a8c <disk_read>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d002      	beq.n	8014ac2 <f_open+0x362>
 8014abc:	2301      	movs	r3, #1
 8014abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <f_open+0x370>
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fe f94b 	bl	8012d74 <unlock_fs>
 8014ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3760      	adds	r7, #96	; 0x60
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}

08014aea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014aea:	b580      	push	{r7, lr}
 8014aec:	b08c      	sub	sp, #48	; 0x30
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	60f8      	str	r0, [r7, #12]
 8014af2:	60b9      	str	r1, [r7, #8]
 8014af4:	607a      	str	r2, [r7, #4]
 8014af6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	2200      	movs	r2, #0
 8014b00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f107 0210 	add.w	r2, r7, #16
 8014b08:	4611      	mov	r1, r2
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7ff fd7c 	bl	8014608 <validate>
 8014b10:	4603      	mov	r3, r0
 8014b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d107      	bne.n	8014b2e <f_write+0x44>
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	7d5b      	ldrb	r3, [r3, #21]
 8014b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d009      	beq.n	8014b42 <f_write+0x58>
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014b34:	4611      	mov	r1, r2
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7fe f91c 	bl	8012d74 <unlock_fs>
 8014b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b40:	e173      	b.n	8014e2a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	7d1b      	ldrb	r3, [r3, #20]
 8014b46:	f003 0302 	and.w	r3, r3, #2
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d106      	bne.n	8014b5c <f_write+0x72>
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	2107      	movs	r1, #7
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fe f90e 	bl	8012d74 <unlock_fs>
 8014b58:	2307      	movs	r3, #7
 8014b5a:	e166      	b.n	8014e2a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	699a      	ldr	r2, [r3, #24]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	441a      	add	r2, r3
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	699b      	ldr	r3, [r3, #24]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	f080 814b 	bcs.w	8014e04 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	699b      	ldr	r3, [r3, #24]
 8014b72:	43db      	mvns	r3, r3
 8014b74:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014b76:	e145      	b.n	8014e04 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	699b      	ldr	r3, [r3, #24]
 8014b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	f040 8101 	bne.w	8014d88 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	699b      	ldr	r3, [r3, #24]
 8014b8a:	0a5b      	lsrs	r3, r3, #9
 8014b8c:	693a      	ldr	r2, [r7, #16]
 8014b8e:	8952      	ldrh	r2, [r2, #10]
 8014b90:	3a01      	subs	r2, #1
 8014b92:	4013      	ands	r3, r2
 8014b94:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d14d      	bne.n	8014c38 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	699b      	ldr	r3, [r3, #24]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d10c      	bne.n	8014bbe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d11a      	bne.n	8014be6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fe fd5d 	bl	8013674 <create_chain>
 8014bba:	62b8      	str	r0, [r7, #40]	; 0x28
 8014bbc:	e013      	b.n	8014be6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d007      	beq.n	8014bd6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	699b      	ldr	r3, [r3, #24]
 8014bca:	4619      	mov	r1, r3
 8014bcc:	68f8      	ldr	r0, [r7, #12]
 8014bce:	f7fe fde9 	bl	80137a4 <clmt_clust>
 8014bd2:	62b8      	str	r0, [r7, #40]	; 0x28
 8014bd4:	e007      	b.n	8014be6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	69db      	ldr	r3, [r3, #28]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	4610      	mov	r0, r2
 8014be0:	f7fe fd48 	bl	8013674 <create_chain>
 8014be4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f000 8110 	beq.w	8014e0e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d109      	bne.n	8014c08 <f_write+0x11e>
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2202      	movs	r2, #2
 8014bf8:	755a      	strb	r2, [r3, #21]
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	2102      	movs	r1, #2
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fe f8b8 	bl	8012d74 <unlock_fs>
 8014c04:	2302      	movs	r3, #2
 8014c06:	e110      	b.n	8014e2a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d109      	bne.n	8014c24 <f_write+0x13a>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2201      	movs	r2, #1
 8014c14:	755a      	strb	r2, [r3, #21]
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	2101      	movs	r1, #1
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7fe f8aa 	bl	8012d74 <unlock_fs>
 8014c20:	2301      	movs	r3, #1
 8014c22:	e102      	b.n	8014e2a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	689b      	ldr	r3, [r3, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d102      	bne.n	8014c38 <f_write+0x14e>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	7d1b      	ldrb	r3, [r3, #20]
 8014c3c:	b25b      	sxtb	r3, r3
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	da1d      	bge.n	8014c7e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	7858      	ldrb	r0, [r3, #1]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6a1a      	ldr	r2, [r3, #32]
 8014c50:	2301      	movs	r3, #1
 8014c52:	f7fd ff3b 	bl	8012acc <disk_write>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d009      	beq.n	8014c70 <f_write+0x186>
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2201      	movs	r2, #1
 8014c60:	755a      	strb	r2, [r3, #21]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	2101      	movs	r1, #1
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fe f884 	bl	8012d74 <unlock_fs>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	e0dc      	b.n	8014e2a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	7d1b      	ldrb	r3, [r3, #20]
 8014c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014c7e:	693a      	ldr	r2, [r7, #16]
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	69db      	ldr	r3, [r3, #28]
 8014c84:	4619      	mov	r1, r3
 8014c86:	4610      	mov	r0, r2
 8014c88:	f7fe fadc 	bl	8013244 <clust2sect>
 8014c8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d109      	bne.n	8014ca8 <f_write+0x1be>
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2202      	movs	r2, #2
 8014c98:	755a      	strb	r2, [r3, #21]
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	2102      	movs	r1, #2
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7fe f868 	bl	8012d74 <unlock_fs>
 8014ca4:	2302      	movs	r3, #2
 8014ca6:	e0c0      	b.n	8014e2a <f_write+0x340>
			sect += csect;
 8014ca8:	697a      	ldr	r2, [r7, #20]
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	4413      	add	r3, r2
 8014cae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	0a5b      	lsrs	r3, r3, #9
 8014cb4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014cb6:	6a3b      	ldr	r3, [r7, #32]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d041      	beq.n	8014d40 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014cbc:	69ba      	ldr	r2, [r7, #24]
 8014cbe:	6a3b      	ldr	r3, [r7, #32]
 8014cc0:	4413      	add	r3, r2
 8014cc2:	693a      	ldr	r2, [r7, #16]
 8014cc4:	8952      	ldrh	r2, [r2, #10]
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d905      	bls.n	8014cd6 <f_write+0x1ec>
					cc = fs->csize - csect;
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	895b      	ldrh	r3, [r3, #10]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	1ad3      	subs	r3, r2, r3
 8014cd4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	7858      	ldrb	r0, [r3, #1]
 8014cda:	6a3b      	ldr	r3, [r7, #32]
 8014cdc:	697a      	ldr	r2, [r7, #20]
 8014cde:	69f9      	ldr	r1, [r7, #28]
 8014ce0:	f7fd fef4 	bl	8012acc <disk_write>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d009      	beq.n	8014cfe <f_write+0x214>
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2201      	movs	r2, #1
 8014cee:	755a      	strb	r2, [r3, #21]
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	2101      	movs	r1, #1
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7fe f83d 	bl	8012d74 <unlock_fs>
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	e095      	b.n	8014e2a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	6a1a      	ldr	r2, [r3, #32]
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	1ad3      	subs	r3, r2, r3
 8014d06:	6a3a      	ldr	r2, [r7, #32]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d915      	bls.n	8014d38 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	6a1a      	ldr	r2, [r3, #32]
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	025b      	lsls	r3, r3, #9
 8014d1c:	69fa      	ldr	r2, [r7, #28]
 8014d1e:	4413      	add	r3, r2
 8014d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d24:	4619      	mov	r1, r3
 8014d26:	f7fd ff91 	bl	8012c4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	7d1b      	ldrb	r3, [r3, #20]
 8014d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d32:	b2da      	uxtb	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	025b      	lsls	r3, r3, #9
 8014d3c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014d3e:	e044      	b.n	8014dca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6a1b      	ldr	r3, [r3, #32]
 8014d44:	697a      	ldr	r2, [r7, #20]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d01b      	beq.n	8014d82 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	699a      	ldr	r2, [r3, #24]
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d215      	bcs.n	8014d82 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	7858      	ldrb	r0, [r3, #1]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d60:	2301      	movs	r3, #1
 8014d62:	697a      	ldr	r2, [r7, #20]
 8014d64:	f7fd fe92 	bl	8012a8c <disk_read>
 8014d68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d009      	beq.n	8014d82 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	2201      	movs	r2, #1
 8014d72:	755a      	strb	r2, [r3, #21]
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	2101      	movs	r1, #1
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fd fffb 	bl	8012d74 <unlock_fs>
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e053      	b.n	8014e2a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	697a      	ldr	r2, [r7, #20]
 8014d86:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	699b      	ldr	r3, [r3, #24]
 8014d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d90:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014d94:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d901      	bls.n	8014da2 <f_write+0x2b8>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	699b      	ldr	r3, [r3, #24]
 8014dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014db0:	4413      	add	r3, r2
 8014db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014db4:	69f9      	ldr	r1, [r7, #28]
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7fd ff48 	bl	8012c4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	7d1b      	ldrb	r3, [r3, #20]
 8014dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014dc4:	b2da      	uxtb	r2, r3
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014dca:	69fa      	ldr	r2, [r7, #28]
 8014dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dce:	4413      	add	r3, r2
 8014dd0:	61fb      	str	r3, [r7, #28]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	699a      	ldr	r2, [r3, #24]
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	441a      	add	r2, r3
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	619a      	str	r2, [r3, #24]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	68da      	ldr	r2, [r3, #12]
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	699b      	ldr	r3, [r3, #24]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	bf38      	it	cc
 8014dea:	461a      	movcc	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	60da      	str	r2, [r3, #12]
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df6:	441a      	add	r2, r3
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	601a      	str	r2, [r3, #0]
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e00:	1ad3      	subs	r3, r2, r3
 8014e02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f47f aeb6 	bne.w	8014b78 <f_write+0x8e>
 8014e0c:	e000      	b.n	8014e10 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	7d1b      	ldrb	r3, [r3, #20]
 8014e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e18:	b2da      	uxtb	r2, r3
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	2100      	movs	r1, #0
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd ffa6 	bl	8012d74 <unlock_fs>
 8014e28:	2300      	movs	r3, #0
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3730      	adds	r7, #48	; 0x30
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}

08014e32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014e32:	b580      	push	{r7, lr}
 8014e34:	b086      	sub	sp, #24
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f107 0208 	add.w	r2, r7, #8
 8014e40:	4611      	mov	r1, r2
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff fbe0 	bl	8014608 <validate>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014e4c:	7dfb      	ldrb	r3, [r7, #23]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d16d      	bne.n	8014f2e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	7d1b      	ldrb	r3, [r3, #20]
 8014e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d067      	beq.n	8014f2e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	7d1b      	ldrb	r3, [r3, #20]
 8014e62:	b25b      	sxtb	r3, r3
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	da1a      	bge.n	8014e9e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	7858      	ldrb	r0, [r3, #1]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6a1a      	ldr	r2, [r3, #32]
 8014e76:	2301      	movs	r3, #1
 8014e78:	f7fd fe28 	bl	8012acc <disk_write>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d006      	beq.n	8014e90 <f_sync+0x5e>
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	2101      	movs	r1, #1
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fd ff74 	bl	8012d74 <unlock_fs>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e055      	b.n	8014f3c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	7d1b      	ldrb	r3, [r3, #20]
 8014e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e98:	b2da      	uxtb	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014e9e:	f7fb fc15 	bl	80106cc <get_fattime>
 8014ea2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014ea4:	68ba      	ldr	r2, [r7, #8]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eaa:	4619      	mov	r1, r3
 8014eac:	4610      	mov	r0, r2
 8014eae:	f7fe f92d 	bl	801310c <move_window>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014eb6:	7dfb      	ldrb	r3, [r7, #23]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d138      	bne.n	8014f2e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ec0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	330b      	adds	r3, #11
 8014ec6:	781a      	ldrb	r2, [r3, #0]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	330b      	adds	r3, #11
 8014ecc:	f042 0220 	orr.w	r2, r2, #32
 8014ed0:	b2d2      	uxtb	r2, r2
 8014ed2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6818      	ldr	r0, [r3, #0]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	461a      	mov	r2, r3
 8014ede:	68f9      	ldr	r1, [r7, #12]
 8014ee0:	f7fe fe3a 	bl	8013b58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	f103 021c 	add.w	r2, r3, #28
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	4619      	mov	r1, r3
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	f7fd fe7f 	bl	8012bf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	3316      	adds	r3, #22
 8014efa:	6939      	ldr	r1, [r7, #16]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fd fe79 	bl	8012bf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3312      	adds	r3, #18
 8014f06:	2100      	movs	r1, #0
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fd fe58 	bl	8012bbe <st_word>
					fs->wflag = 1;
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	2201      	movs	r2, #1
 8014f12:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fe f926 	bl	8013168 <sync_fs>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	7d1b      	ldrb	r3, [r3, #20]
 8014f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f28:	b2da      	uxtb	r2, r3
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	7dfa      	ldrb	r2, [r7, #23]
 8014f32:	4611      	mov	r1, r2
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fd ff1d 	bl	8012d74 <unlock_fs>
 8014f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3718      	adds	r7, #24
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7ff ff70 	bl	8014e32 <f_sync>
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014f56:	7bfb      	ldrb	r3, [r7, #15]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d11d      	bne.n	8014f98 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f107 0208 	add.w	r2, r7, #8
 8014f62:	4611      	mov	r1, r2
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff fb4f 	bl	8014608 <validate>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014f6e:	7bfb      	ldrb	r3, [r7, #15]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d111      	bne.n	8014f98 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	691b      	ldr	r3, [r3, #16]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7fe f823 	bl	8012fc4 <dec_lock>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014f82:	7bfb      	ldrb	r3, [r7, #15]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d102      	bne.n	8014f8e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	2100      	movs	r1, #0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fd feee 	bl	8012d74 <unlock_fs>
#endif
		}
	}
	return res;
 8014f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3710      	adds	r7, #16
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b090      	sub	sp, #64	; 0x40
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
 8014faa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f107 0208 	add.w	r2, r7, #8
 8014fb2:	4611      	mov	r1, r2
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7ff fb27 	bl	8014608 <validate>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014fc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d103      	bne.n	8014fd0 <f_lseek+0x2e>
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	7d5b      	ldrb	r3, [r3, #21]
 8014fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d009      	beq.n	8014fec <f_lseek+0x4a>
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014fde:	4611      	mov	r1, r2
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7fd fec7 	bl	8012d74 <unlock_fs>
 8014fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014fea:	e229      	b.n	8015440 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f000 80ea 	beq.w	80151ca <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ffc:	d164      	bne.n	80150c8 <f_lseek+0x126>
			tbl = fp->cltbl;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015002:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	1d1a      	adds	r2, r3, #4
 8015008:	627a      	str	r2, [r7, #36]	; 0x24
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	617b      	str	r3, [r7, #20]
 801500e:	2302      	movs	r3, #2
 8015010:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501a:	2b00      	cmp	r3, #0
 801501c:	d044      	beq.n	80150a8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	613b      	str	r3, [r7, #16]
 8015022:	2300      	movs	r3, #0
 8015024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015028:	3302      	adds	r3, #2
 801502a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502e:	60fb      	str	r3, [r7, #12]
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	3301      	adds	r3, #1
 8015034:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801503a:	4618      	mov	r0, r3
 801503c:	f7fe f921 	bl	8013282 <get_fat>
 8015040:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015044:	2b01      	cmp	r3, #1
 8015046:	d809      	bhi.n	801505c <f_lseek+0xba>
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2202      	movs	r2, #2
 801504c:	755a      	strb	r2, [r3, #21]
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	2102      	movs	r1, #2
 8015052:	4618      	mov	r0, r3
 8015054:	f7fd fe8e 	bl	8012d74 <unlock_fs>
 8015058:	2302      	movs	r3, #2
 801505a:	e1f1      	b.n	8015440 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015062:	d109      	bne.n	8015078 <f_lseek+0xd6>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2201      	movs	r2, #1
 8015068:	755a      	strb	r2, [r3, #21]
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	2101      	movs	r1, #1
 801506e:	4618      	mov	r0, r3
 8015070:	f7fd fe80 	bl	8012d74 <unlock_fs>
 8015074:	2301      	movs	r3, #1
 8015076:	e1e3      	b.n	8015440 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	3301      	adds	r3, #1
 801507c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801507e:	429a      	cmp	r2, r3
 8015080:	d0d4      	beq.n	801502c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	429a      	cmp	r2, r3
 8015088:	d809      	bhi.n	801509e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	1d1a      	adds	r2, r3, #4
 801508e:	627a      	str	r2, [r7, #36]	; 0x24
 8015090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015092:	601a      	str	r2, [r3, #0]
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	1d1a      	adds	r2, r3, #4
 8015098:	627a      	str	r2, [r7, #36]	; 0x24
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	699b      	ldr	r3, [r3, #24]
 80150a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d3ba      	bcc.n	801501e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80150b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150b2:	697b      	ldr	r3, [r7, #20]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d803      	bhi.n	80150c0 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80150b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ba:	2200      	movs	r2, #0
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	e1b6      	b.n	801542e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80150c0:	2311      	movs	r3, #17
 80150c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80150c6:	e1b2      	b.n	801542e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	683a      	ldr	r2, [r7, #0]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d902      	bls.n	80150d8 <f_lseek+0x136>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f000 81a4 	beq.w	801542e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	4619      	mov	r1, r3
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7fe fb59 	bl	80137a4 <clmt_clust>
 80150f2:	4602      	mov	r2, r0
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80150f8:	68ba      	ldr	r2, [r7, #8]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	69db      	ldr	r3, [r3, #28]
 80150fe:	4619      	mov	r1, r3
 8015100:	4610      	mov	r0, r2
 8015102:	f7fe f89f 	bl	8013244 <clust2sect>
 8015106:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d109      	bne.n	8015122 <f_lseek+0x180>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2202      	movs	r2, #2
 8015112:	755a      	strb	r2, [r3, #21]
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	2102      	movs	r1, #2
 8015118:	4618      	mov	r0, r3
 801511a:	f7fd fe2b 	bl	8012d74 <unlock_fs>
 801511e:	2302      	movs	r3, #2
 8015120:	e18e      	b.n	8015440 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	3b01      	subs	r3, #1
 8015126:	0a5b      	lsrs	r3, r3, #9
 8015128:	68ba      	ldr	r2, [r7, #8]
 801512a:	8952      	ldrh	r2, [r2, #10]
 801512c:	3a01      	subs	r2, #1
 801512e:	4013      	ands	r3, r2
 8015130:	69ba      	ldr	r2, [r7, #24]
 8015132:	4413      	add	r3, r2
 8015134:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	699b      	ldr	r3, [r3, #24]
 801513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801513e:	2b00      	cmp	r3, #0
 8015140:	f000 8175 	beq.w	801542e <f_lseek+0x48c>
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6a1b      	ldr	r3, [r3, #32]
 8015148:	69ba      	ldr	r2, [r7, #24]
 801514a:	429a      	cmp	r2, r3
 801514c:	f000 816f 	beq.w	801542e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	7d1b      	ldrb	r3, [r3, #20]
 8015154:	b25b      	sxtb	r3, r3
 8015156:	2b00      	cmp	r3, #0
 8015158:	da1d      	bge.n	8015196 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	7858      	ldrb	r0, [r3, #1]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6a1a      	ldr	r2, [r3, #32]
 8015168:	2301      	movs	r3, #1
 801516a:	f7fd fcaf 	bl	8012acc <disk_write>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	d009      	beq.n	8015188 <f_lseek+0x1e6>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2201      	movs	r2, #1
 8015178:	755a      	strb	r2, [r3, #21]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	2101      	movs	r1, #1
 801517e:	4618      	mov	r0, r3
 8015180:	f7fd fdf8 	bl	8012d74 <unlock_fs>
 8015184:	2301      	movs	r3, #1
 8015186:	e15b      	b.n	8015440 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	7d1b      	ldrb	r3, [r3, #20]
 801518c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015190:	b2da      	uxtb	r2, r3
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	7858      	ldrb	r0, [r3, #1]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80151a0:	2301      	movs	r3, #1
 80151a2:	69ba      	ldr	r2, [r7, #24]
 80151a4:	f7fd fc72 	bl	8012a8c <disk_read>
 80151a8:	4603      	mov	r3, r0
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d009      	beq.n	80151c2 <f_lseek+0x220>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2201      	movs	r2, #1
 80151b2:	755a      	strb	r2, [r3, #21]
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	2101      	movs	r1, #1
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7fd fddb 	bl	8012d74 <unlock_fs>
 80151be:	2301      	movs	r3, #1
 80151c0:	e13e      	b.n	8015440 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	69ba      	ldr	r2, [r7, #24]
 80151c6:	621a      	str	r2, [r3, #32]
 80151c8:	e131      	b.n	801542e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	68db      	ldr	r3, [r3, #12]
 80151ce:	683a      	ldr	r2, [r7, #0]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d908      	bls.n	80151e6 <f_lseek+0x244>
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	7d1b      	ldrb	r3, [r3, #20]
 80151d8:	f003 0302 	and.w	r3, r3, #2
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d102      	bne.n	80151e6 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	699b      	ldr	r3, [r3, #24]
 80151ea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80151ec:	2300      	movs	r3, #0
 80151ee:	637b      	str	r3, [r7, #52]	; 0x34
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80151f4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f000 80c0 	beq.w	801537e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	895b      	ldrh	r3, [r3, #10]
 8015202:	025b      	lsls	r3, r3, #9
 8015204:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015206:	6a3b      	ldr	r3, [r7, #32]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d01b      	beq.n	8015244 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	1e5a      	subs	r2, r3, #1
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	fbb2 f2f3 	udiv	r2, r2, r3
 8015216:	6a3b      	ldr	r3, [r7, #32]
 8015218:	1e59      	subs	r1, r3, #1
 801521a:	69fb      	ldr	r3, [r7, #28]
 801521c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015220:	429a      	cmp	r2, r3
 8015222:	d30f      	bcc.n	8015244 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015224:	6a3b      	ldr	r3, [r7, #32]
 8015226:	1e5a      	subs	r2, r3, #1
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	425b      	negs	r3, r3
 801522c:	401a      	ands	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	699b      	ldr	r3, [r3, #24]
 8015236:	683a      	ldr	r2, [r7, #0]
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	69db      	ldr	r3, [r3, #28]
 8015240:	63bb      	str	r3, [r7, #56]	; 0x38
 8015242:	e02c      	b.n	801529e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	689b      	ldr	r3, [r3, #8]
 8015248:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801524c:	2b00      	cmp	r3, #0
 801524e:	d123      	bne.n	8015298 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2100      	movs	r1, #0
 8015254:	4618      	mov	r0, r3
 8015256:	f7fe fa0d 	bl	8013674 <create_chain>
 801525a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801525e:	2b01      	cmp	r3, #1
 8015260:	d109      	bne.n	8015276 <f_lseek+0x2d4>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2202      	movs	r2, #2
 8015266:	755a      	strb	r2, [r3, #21]
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	2102      	movs	r1, #2
 801526c:	4618      	mov	r0, r3
 801526e:	f7fd fd81 	bl	8012d74 <unlock_fs>
 8015272:	2302      	movs	r3, #2
 8015274:	e0e4      	b.n	8015440 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527c:	d109      	bne.n	8015292 <f_lseek+0x2f0>
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2201      	movs	r2, #1
 8015282:	755a      	strb	r2, [r3, #21]
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	2101      	movs	r1, #1
 8015288:	4618      	mov	r0, r3
 801528a:	f7fd fd73 	bl	8012d74 <unlock_fs>
 801528e:	2301      	movs	r3, #1
 8015290:	e0d6      	b.n	8015440 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015296:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801529c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d06c      	beq.n	801537e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80152a4:	e044      	b.n	8015330 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80152a6:	683a      	ldr	r2, [r7, #0]
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	603b      	str	r3, [r7, #0]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	699a      	ldr	r2, [r3, #24]
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	441a      	add	r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	7d1b      	ldrb	r3, [r3, #20]
 80152be:	f003 0302 	and.w	r3, r3, #2
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00b      	beq.n	80152de <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7fe f9d2 	bl	8013674 <create_chain>
 80152d0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80152d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d108      	bne.n	80152ea <f_lseek+0x348>
							ofs = 0; break;
 80152d8:	2300      	movs	r3, #0
 80152da:	603b      	str	r3, [r7, #0]
 80152dc:	e02c      	b.n	8015338 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd ffcd 	bl	8013282 <get_fat>
 80152e8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80152ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152f0:	d109      	bne.n	8015306 <f_lseek+0x364>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2201      	movs	r2, #1
 80152f6:	755a      	strb	r2, [r3, #21]
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	2101      	movs	r1, #1
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fd fd39 	bl	8012d74 <unlock_fs>
 8015302:	2301      	movs	r3, #1
 8015304:	e09c      	b.n	8015440 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015308:	2b01      	cmp	r3, #1
 801530a:	d904      	bls.n	8015316 <f_lseek+0x374>
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	699b      	ldr	r3, [r3, #24]
 8015310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015312:	429a      	cmp	r2, r3
 8015314:	d309      	bcc.n	801532a <f_lseek+0x388>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2202      	movs	r2, #2
 801531a:	755a      	strb	r2, [r3, #21]
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	2102      	movs	r1, #2
 8015320:	4618      	mov	r0, r3
 8015322:	f7fd fd27 	bl	8012d74 <unlock_fs>
 8015326:	2302      	movs	r3, #2
 8015328:	e08a      	b.n	8015440 <f_lseek+0x49e>
					fp->clust = clst;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801532e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015330:	683a      	ldr	r2, [r7, #0]
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	429a      	cmp	r2, r3
 8015336:	d8b6      	bhi.n	80152a6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	699a      	ldr	r2, [r3, #24]
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	441a      	add	r2, r3
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801534a:	2b00      	cmp	r3, #0
 801534c:	d017      	beq.n	801537e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015352:	4618      	mov	r0, r3
 8015354:	f7fd ff76 	bl	8013244 <clust2sect>
 8015358:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801535c:	2b00      	cmp	r3, #0
 801535e:	d109      	bne.n	8015374 <f_lseek+0x3d2>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2202      	movs	r2, #2
 8015364:	755a      	strb	r2, [r3, #21]
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	2102      	movs	r1, #2
 801536a:	4618      	mov	r0, r3
 801536c:	f7fd fd02 	bl	8012d74 <unlock_fs>
 8015370:	2302      	movs	r3, #2
 8015372:	e065      	b.n	8015440 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	0a5b      	lsrs	r3, r3, #9
 8015378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801537a:	4413      	add	r3, r2
 801537c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	699a      	ldr	r2, [r3, #24]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	429a      	cmp	r2, r3
 8015388:	d90a      	bls.n	80153a0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	699a      	ldr	r2, [r3, #24]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	7d1b      	ldrb	r3, [r3, #20]
 8015396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801539a:	b2da      	uxtb	r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d040      	beq.n	801542e <f_lseek+0x48c>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6a1b      	ldr	r3, [r3, #32]
 80153b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d03b      	beq.n	801542e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	7d1b      	ldrb	r3, [r3, #20]
 80153ba:	b25b      	sxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	da1d      	bge.n	80153fc <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	7858      	ldrb	r0, [r3, #1]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6a1a      	ldr	r2, [r3, #32]
 80153ce:	2301      	movs	r3, #1
 80153d0:	f7fd fb7c 	bl	8012acc <disk_write>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d009      	beq.n	80153ee <f_lseek+0x44c>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2201      	movs	r2, #1
 80153de:	755a      	strb	r2, [r3, #21]
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	2101      	movs	r1, #1
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fd fcc5 	bl	8012d74 <unlock_fs>
 80153ea:	2301      	movs	r3, #1
 80153ec:	e028      	b.n	8015440 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	7d1b      	ldrb	r3, [r3, #20]
 80153f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153f6:	b2da      	uxtb	r2, r3
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	7858      	ldrb	r0, [r3, #1]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015406:	2301      	movs	r3, #1
 8015408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801540a:	f7fd fb3f 	bl	8012a8c <disk_read>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d009      	beq.n	8015428 <f_lseek+0x486>
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2201      	movs	r2, #1
 8015418:	755a      	strb	r2, [r3, #21]
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	2101      	movs	r1, #1
 801541e:	4618      	mov	r0, r3
 8015420:	f7fd fca8 	bl	8012d74 <unlock_fs>
 8015424:	2301      	movs	r3, #1
 8015426:	e00b      	b.n	8015440 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801542c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015434:	4611      	mov	r1, r2
 8015436:	4618      	mov	r0, r3
 8015438:	f7fd fc9c 	bl	8012d74 <unlock_fs>
 801543c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015440:	4618      	mov	r0, r3
 8015442:	3740      	adds	r7, #64	; 0x40
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b086      	sub	sp, #24
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d101      	bne.n	801545c <f_opendir+0x14>
 8015458:	2309      	movs	r3, #9
 801545a:	e06a      	b.n	8015532 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015460:	f107 010c 	add.w	r1, r7, #12
 8015464:	463b      	mov	r3, r7
 8015466:	2200      	movs	r2, #0
 8015468:	4618      	mov	r0, r3
 801546a:	f7fe fe79 	bl	8014160 <find_volume>
 801546e:	4603      	mov	r3, r0
 8015470:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015472:	7dfb      	ldrb	r3, [r7, #23]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d14f      	bne.n	8015518 <f_opendir+0xd0>
		obj->fs = fs;
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	4619      	mov	r1, r3
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f7fe fd60 	bl	8013f48 <follow_path>
 8015488:	4603      	mov	r3, r0
 801548a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d13d      	bne.n	801550e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015498:	b25b      	sxtb	r3, r3
 801549a:	2b00      	cmp	r3, #0
 801549c:	db12      	blt.n	80154c4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801549e:	693b      	ldr	r3, [r7, #16]
 80154a0:	799b      	ldrb	r3, [r3, #6]
 80154a2:	f003 0310 	and.w	r3, r3, #16
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00a      	beq.n	80154c0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6a1b      	ldr	r3, [r3, #32]
 80154b0:	4619      	mov	r1, r3
 80154b2:	4610      	mov	r0, r2
 80154b4:	f7fe fb31 	bl	8013b1a <ld_clust>
 80154b8:	4602      	mov	r2, r0
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	609a      	str	r2, [r3, #8]
 80154be:	e001      	b.n	80154c4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80154c0:	2305      	movs	r3, #5
 80154c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80154c4:	7dfb      	ldrb	r3, [r7, #23]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d121      	bne.n	801550e <f_opendir+0xc6>
				obj->id = fs->id;
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	88da      	ldrh	r2, [r3, #6]
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80154d2:	2100      	movs	r1, #0
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f7fe f999 	bl	801380c <dir_sdi>
 80154da:	4603      	mov	r3, r0
 80154dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80154de:	7dfb      	ldrb	r3, [r7, #23]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d114      	bne.n	801550e <f_opendir+0xc6>
					if (obj->sclust) {
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00d      	beq.n	8015508 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80154ec:	2100      	movs	r1, #0
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f7fd fcda 	bl	8012ea8 <inc_lock>
 80154f4:	4602      	mov	r2, r0
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	691b      	ldr	r3, [r3, #16]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d105      	bne.n	801550e <f_opendir+0xc6>
 8015502:	2312      	movs	r3, #18
 8015504:	75fb      	strb	r3, [r7, #23]
 8015506:	e002      	b.n	801550e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	2200      	movs	r2, #0
 801550c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801550e:	7dfb      	ldrb	r3, [r7, #23]
 8015510:	2b04      	cmp	r3, #4
 8015512:	d101      	bne.n	8015518 <f_opendir+0xd0>
 8015514:	2305      	movs	r3, #5
 8015516:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015518:	7dfb      	ldrb	r3, [r7, #23]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d002      	beq.n	8015524 <f_opendir+0xdc>
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	2200      	movs	r2, #0
 8015522:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	7dfa      	ldrb	r2, [r7, #23]
 8015528:	4611      	mov	r1, r2
 801552a:	4618      	mov	r0, r3
 801552c:	f7fd fc22 	bl	8012d74 <unlock_fs>
 8015530:	7dfb      	ldrb	r3, [r7, #23]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3718      	adds	r7, #24
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}

0801553a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801553a:	b580      	push	{r7, lr}
 801553c:	b084      	sub	sp, #16
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f107 0208 	add.w	r2, r7, #8
 8015548:	4611      	mov	r1, r2
 801554a:	4618      	mov	r0, r3
 801554c:	f7ff f85c 	bl	8014608 <validate>
 8015550:	4603      	mov	r3, r0
 8015552:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015554:	7bfb      	ldrb	r3, [r7, #15]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d115      	bne.n	8015586 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	691b      	ldr	r3, [r3, #16]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d006      	beq.n	8015570 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	691b      	ldr	r3, [r3, #16]
 8015566:	4618      	mov	r0, r3
 8015568:	f7fd fd2c 	bl	8012fc4 <dec_lock>
 801556c:	4603      	mov	r3, r0
 801556e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015570:	7bfb      	ldrb	r3, [r7, #15]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d102      	bne.n	801557c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2200      	movs	r2, #0
 801557a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	2100      	movs	r1, #0
 8015580:	4618      	mov	r0, r3
 8015582:	f7fd fbf7 	bl	8012d74 <unlock_fs>
#endif
	}
	return res;
 8015586:	7bfb      	ldrb	r3, [r7, #15]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3710      	adds	r7, #16
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}

08015590 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b084      	sub	sp, #16
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f107 0208 	add.w	r2, r7, #8
 80155a0:	4611      	mov	r1, r2
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7ff f830 	bl	8014608 <validate>
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d126      	bne.n	8015600 <f_readdir+0x70>
		if (!fno) {
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d106      	bne.n	80155c6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80155b8:	2100      	movs	r1, #0
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f7fe f926 	bl	801380c <dir_sdi>
 80155c0:	4603      	mov	r3, r0
 80155c2:	73fb      	strb	r3, [r7, #15]
 80155c4:	e01c      	b.n	8015600 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80155c6:	2100      	movs	r1, #0
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7fe fae5 	bl	8013b98 <dir_read>
 80155ce:	4603      	mov	r3, r0
 80155d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80155d2:	7bfb      	ldrb	r3, [r7, #15]
 80155d4:	2b04      	cmp	r3, #4
 80155d6:	d101      	bne.n	80155dc <f_readdir+0x4c>
 80155d8:	2300      	movs	r3, #0
 80155da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80155dc:	7bfb      	ldrb	r3, [r7, #15]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10e      	bne.n	8015600 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f7fe fbbb 	bl	8013d60 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80155ea:	2100      	movs	r1, #0
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7fe f988 	bl	8013902 <dir_next>
 80155f2:	4603      	mov	r3, r0
 80155f4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80155f6:	7bfb      	ldrb	r3, [r7, #15]
 80155f8:	2b04      	cmp	r3, #4
 80155fa:	d101      	bne.n	8015600 <f_readdir+0x70>
 80155fc:	2300      	movs	r3, #0
 80155fe:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	7bfa      	ldrb	r2, [r7, #15]
 8015604:	4611      	mov	r1, r2
 8015606:	4618      	mov	r0, r3
 8015608:	f7fd fbb4 	bl	8012d74 <unlock_fs>
 801560c:	7bfb      	ldrb	r3, [r7, #15]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
	...

08015618 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015618:	b480      	push	{r7}
 801561a:	b087      	sub	sp, #28
 801561c:	af00      	add	r7, sp, #0
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	4613      	mov	r3, r2
 8015624:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015626:	2301      	movs	r3, #1
 8015628:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801562a:	2300      	movs	r3, #0
 801562c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801562e:	4b1f      	ldr	r3, [pc, #124]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015630:	7a5b      	ldrb	r3, [r3, #9]
 8015632:	b2db      	uxtb	r3, r3
 8015634:	2b00      	cmp	r3, #0
 8015636:	d131      	bne.n	801569c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015638:	4b1c      	ldr	r3, [pc, #112]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 801563a:	7a5b      	ldrb	r3, [r3, #9]
 801563c:	b2db      	uxtb	r3, r3
 801563e:	461a      	mov	r2, r3
 8015640:	4b1a      	ldr	r3, [pc, #104]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015642:	2100      	movs	r1, #0
 8015644:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015646:	4b19      	ldr	r3, [pc, #100]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015648:	7a5b      	ldrb	r3, [r3, #9]
 801564a:	b2db      	uxtb	r3, r3
 801564c:	4a17      	ldr	r2, [pc, #92]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	4413      	add	r3, r2
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015656:	4b15      	ldr	r3, [pc, #84]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015658:	7a5b      	ldrb	r3, [r3, #9]
 801565a:	b2db      	uxtb	r3, r3
 801565c:	461a      	mov	r2, r3
 801565e:	4b13      	ldr	r3, [pc, #76]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015660:	4413      	add	r3, r2
 8015662:	79fa      	ldrb	r2, [r7, #7]
 8015664:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015666:	4b11      	ldr	r3, [pc, #68]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015668:	7a5b      	ldrb	r3, [r3, #9]
 801566a:	b2db      	uxtb	r3, r3
 801566c:	1c5a      	adds	r2, r3, #1
 801566e:	b2d1      	uxtb	r1, r2
 8015670:	4a0e      	ldr	r2, [pc, #56]	; (80156ac <FATFS_LinkDriverEx+0x94>)
 8015672:	7251      	strb	r1, [r2, #9]
 8015674:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015676:	7dbb      	ldrb	r3, [r7, #22]
 8015678:	3330      	adds	r3, #48	; 0x30
 801567a:	b2da      	uxtb	r2, r3
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	3301      	adds	r3, #1
 8015684:	223a      	movs	r2, #58	; 0x3a
 8015686:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	3302      	adds	r3, #2
 801568c:	222f      	movs	r2, #47	; 0x2f
 801568e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	3303      	adds	r3, #3
 8015694:	2200      	movs	r2, #0
 8015696:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015698:	2300      	movs	r3, #0
 801569a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801569c:	7dfb      	ldrb	r3, [r7, #23]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	371c      	adds	r7, #28
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	2000086c 	.word	0x2000086c

080156b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80156ba:	2200      	movs	r2, #0
 80156bc:	6839      	ldr	r1, [r7, #0]
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f7ff ffaa 	bl	8015618 <FATFS_LinkDriverEx>
 80156c4:	4603      	mov	r3, r0
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3708      	adds	r7, #8
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b084      	sub	sp, #16
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	4603      	mov	r3, r0
 80156d6:	6039      	str	r1, [r7, #0]
 80156d8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80156da:	2200      	movs	r2, #0
 80156dc:	2101      	movs	r1, #1
 80156de:	2001      	movs	r0, #1
 80156e0:	f000 f988 	bl	80159f4 <osSemaphoreNew>
 80156e4:	4602      	mov	r2, r0
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	bf14      	ite	ne
 80156f2:	2301      	movne	r3, #1
 80156f4:	2300      	moveq	r3, #0
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	60fb      	str	r3, [r7, #12]

    return ret;
 80156fa:	68fb      	ldr	r3, [r7, #12]
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3710      	adds	r7, #16
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b082      	sub	sp, #8
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f000 fa91 	bl	8015c34 <osSemaphoreDelete>
#endif
    return 1;
 8015712:	2301      	movs	r3, #1
}
 8015714:	4618      	mov	r0, r3
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f000 f9eb 	bl	8015b08 <osSemaphoreAcquire>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015738:	2301      	movs	r3, #1
 801573a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801573c:	68fb      	ldr	r3, [r7, #12]
}
 801573e:	4618      	mov	r0, r3
 8015740:	3710      	adds	r7, #16
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b082      	sub	sp, #8
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f000 fa2c 	bl	8015bac <osSemaphoreRelease>
#endif
}
 8015754:	bf00      	nop
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <__NVIC_SetPriority>:
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	4603      	mov	r3, r0
 8015764:	6039      	str	r1, [r7, #0]
 8015766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801576c:	2b00      	cmp	r3, #0
 801576e:	db0a      	blt.n	8015786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	b2da      	uxtb	r2, r3
 8015774:	490c      	ldr	r1, [pc, #48]	; (80157a8 <__NVIC_SetPriority+0x4c>)
 8015776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801577a:	0112      	lsls	r2, r2, #4
 801577c:	b2d2      	uxtb	r2, r2
 801577e:	440b      	add	r3, r1
 8015780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015784:	e00a      	b.n	801579c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	b2da      	uxtb	r2, r3
 801578a:	4908      	ldr	r1, [pc, #32]	; (80157ac <__NVIC_SetPriority+0x50>)
 801578c:	79fb      	ldrb	r3, [r7, #7]
 801578e:	f003 030f 	and.w	r3, r3, #15
 8015792:	3b04      	subs	r3, #4
 8015794:	0112      	lsls	r2, r2, #4
 8015796:	b2d2      	uxtb	r2, r2
 8015798:	440b      	add	r3, r1
 801579a:	761a      	strb	r2, [r3, #24]
}
 801579c:	bf00      	nop
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr
 80157a8:	e000e100 	.word	0xe000e100
 80157ac:	e000ed00 	.word	0xe000ed00

080157b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80157b0:	b580      	push	{r7, lr}
 80157b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80157b4:	4b05      	ldr	r3, [pc, #20]	; (80157cc <SysTick_Handler+0x1c>)
 80157b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80157b8:	f002 fa20 	bl	8017bfc <xTaskGetSchedulerState>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d001      	beq.n	80157c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80157c2:	f003 f909 	bl	80189d8 <xPortSysTickHandler>
  }
}
 80157c6:	bf00      	nop
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	e000e010 	.word	0xe000e010

080157d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80157d0:	b580      	push	{r7, lr}
 80157d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80157d4:	2100      	movs	r1, #0
 80157d6:	f06f 0004 	mvn.w	r0, #4
 80157da:	f7ff ffbf 	bl	801575c <__NVIC_SetPriority>
#endif
}
 80157de:	bf00      	nop
 80157e0:	bd80      	pop	{r7, pc}
	...

080157e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157ea:	f3ef 8305 	mrs	r3, IPSR
 80157ee:	603b      	str	r3, [r7, #0]
  return(result);
 80157f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d003      	beq.n	80157fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80157f6:	f06f 0305 	mvn.w	r3, #5
 80157fa:	607b      	str	r3, [r7, #4]
 80157fc:	e00c      	b.n	8015818 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80157fe:	4b0a      	ldr	r3, [pc, #40]	; (8015828 <osKernelInitialize+0x44>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d105      	bne.n	8015812 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015806:	4b08      	ldr	r3, [pc, #32]	; (8015828 <osKernelInitialize+0x44>)
 8015808:	2201      	movs	r2, #1
 801580a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801580c:	2300      	movs	r3, #0
 801580e:	607b      	str	r3, [r7, #4]
 8015810:	e002      	b.n	8015818 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015812:	f04f 33ff 	mov.w	r3, #4294967295
 8015816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015818:	687b      	ldr	r3, [r7, #4]
}
 801581a:	4618      	mov	r0, r3
 801581c:	370c      	adds	r7, #12
 801581e:	46bd      	mov	sp, r7
 8015820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015824:	4770      	bx	lr
 8015826:	bf00      	nop
 8015828:	20000878 	.word	0x20000878

0801582c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015832:	f3ef 8305 	mrs	r3, IPSR
 8015836:	603b      	str	r3, [r7, #0]
  return(result);
 8015838:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801583a:	2b00      	cmp	r3, #0
 801583c:	d003      	beq.n	8015846 <osKernelStart+0x1a>
    stat = osErrorISR;
 801583e:	f06f 0305 	mvn.w	r3, #5
 8015842:	607b      	str	r3, [r7, #4]
 8015844:	e010      	b.n	8015868 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015846:	4b0b      	ldr	r3, [pc, #44]	; (8015874 <osKernelStart+0x48>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d109      	bne.n	8015862 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801584e:	f7ff ffbf 	bl	80157d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015852:	4b08      	ldr	r3, [pc, #32]	; (8015874 <osKernelStart+0x48>)
 8015854:	2202      	movs	r2, #2
 8015856:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015858:	f001 fd64 	bl	8017324 <vTaskStartScheduler>
      stat = osOK;
 801585c:	2300      	movs	r3, #0
 801585e:	607b      	str	r3, [r7, #4]
 8015860:	e002      	b.n	8015868 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015862:	f04f 33ff 	mov.w	r3, #4294967295
 8015866:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015868:	687b      	ldr	r3, [r7, #4]
}
 801586a:	4618      	mov	r0, r3
 801586c:	3708      	adds	r7, #8
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	20000878 	.word	0x20000878

08015878 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015878:	b580      	push	{r7, lr}
 801587a:	b08e      	sub	sp, #56	; 0x38
 801587c:	af04      	add	r7, sp, #16
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015884:	2300      	movs	r3, #0
 8015886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015888:	f3ef 8305 	mrs	r3, IPSR
 801588c:	617b      	str	r3, [r7, #20]
  return(result);
 801588e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015890:	2b00      	cmp	r3, #0
 8015892:	d17e      	bne.n	8015992 <osThreadNew+0x11a>
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d07b      	beq.n	8015992 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801589a:	2380      	movs	r3, #128	; 0x80
 801589c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801589e:	2318      	movs	r3, #24
 80158a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80158a2:	2300      	movs	r3, #0
 80158a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80158a6:	f04f 33ff 	mov.w	r3, #4294967295
 80158aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d045      	beq.n	801593e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d002      	beq.n	80158c0 <osThreadNew+0x48>
        name = attr->name;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	699b      	ldr	r3, [r3, #24]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d002      	beq.n	80158ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	699b      	ldr	r3, [r3, #24]
 80158cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d008      	beq.n	80158e6 <osThreadNew+0x6e>
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	2b38      	cmp	r3, #56	; 0x38
 80158d8:	d805      	bhi.n	80158e6 <osThreadNew+0x6e>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	f003 0301 	and.w	r3, r3, #1
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <osThreadNew+0x72>
        return (NULL);
 80158e6:	2300      	movs	r3, #0
 80158e8:	e054      	b.n	8015994 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	695b      	ldr	r3, [r3, #20]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d003      	beq.n	80158fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	695b      	ldr	r3, [r3, #20]
 80158f6:	089b      	lsrs	r3, r3, #2
 80158f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	689b      	ldr	r3, [r3, #8]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d00e      	beq.n	8015920 <osThreadNew+0xa8>
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	2bbb      	cmp	r3, #187	; 0xbb
 8015908:	d90a      	bls.n	8015920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801590e:	2b00      	cmp	r3, #0
 8015910:	d006      	beq.n	8015920 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	695b      	ldr	r3, [r3, #20]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d002      	beq.n	8015920 <osThreadNew+0xa8>
        mem = 1;
 801591a:	2301      	movs	r3, #1
 801591c:	61bb      	str	r3, [r7, #24]
 801591e:	e010      	b.n	8015942 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	689b      	ldr	r3, [r3, #8]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10c      	bne.n	8015942 <osThreadNew+0xca>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d108      	bne.n	8015942 <osThreadNew+0xca>
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	691b      	ldr	r3, [r3, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d104      	bne.n	8015942 <osThreadNew+0xca>
          mem = 0;
 8015938:	2300      	movs	r3, #0
 801593a:	61bb      	str	r3, [r7, #24]
 801593c:	e001      	b.n	8015942 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801593e:	2300      	movs	r3, #0
 8015940:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d110      	bne.n	801596a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015950:	9202      	str	r2, [sp, #8]
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	9300      	str	r3, [sp, #0]
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	6a3a      	ldr	r2, [r7, #32]
 801595c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f001 fa82 	bl	8016e68 <xTaskCreateStatic>
 8015964:	4603      	mov	r3, r0
 8015966:	613b      	str	r3, [r7, #16]
 8015968:	e013      	b.n	8015992 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d110      	bne.n	8015992 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015970:	6a3b      	ldr	r3, [r7, #32]
 8015972:	b29a      	uxth	r2, r3
 8015974:	f107 0310 	add.w	r3, r7, #16
 8015978:	9301      	str	r3, [sp, #4]
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	9300      	str	r3, [sp, #0]
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015982:	68f8      	ldr	r0, [r7, #12]
 8015984:	f001 facd 	bl	8016f22 <xTaskCreate>
 8015988:	4603      	mov	r3, r0
 801598a:	2b01      	cmp	r3, #1
 801598c:	d001      	beq.n	8015992 <osThreadNew+0x11a>
            hTask = NULL;
 801598e:	2300      	movs	r3, #0
 8015990:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015992:	693b      	ldr	r3, [r7, #16]
}
 8015994:	4618      	mov	r0, r3
 8015996:	3728      	adds	r7, #40	; 0x28
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80159a2:	f002 f91b 	bl	8017bdc <xTaskGetCurrentTaskHandle>
 80159a6:	6078      	str	r0, [r7, #4]

  return (id);
 80159a8:	687b      	ldr	r3, [r7, #4]
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3708      	adds	r7, #8
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80159b2:	b580      	push	{r7, lr}
 80159b4:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80159b6:	2000      	movs	r0, #0
 80159b8:	f001 fc0e 	bl	80171d8 <vTaskDelete>
#endif
  for (;;);
 80159bc:	e7fe      	b.n	80159bc <osThreadExit+0xa>

080159be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80159be:	b580      	push	{r7, lr}
 80159c0:	b084      	sub	sp, #16
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159c6:	f3ef 8305 	mrs	r3, IPSR
 80159ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80159cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d003      	beq.n	80159da <osDelay+0x1c>
    stat = osErrorISR;
 80159d2:	f06f 0305 	mvn.w	r3, #5
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	e007      	b.n	80159ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80159da:	2300      	movs	r3, #0
 80159dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d002      	beq.n	80159ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f001 fc69 	bl	80172bc <vTaskDelay>
    }
  }

  return (stat);
 80159ea:	68fb      	ldr	r3, [r7, #12]
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3710      	adds	r7, #16
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b08a      	sub	sp, #40	; 0x28
 80159f8:	af02      	add	r7, sp, #8
 80159fa:	60f8      	str	r0, [r7, #12]
 80159fc:	60b9      	str	r1, [r7, #8]
 80159fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015a00:	2300      	movs	r3, #0
 8015a02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a04:	f3ef 8305 	mrs	r3, IPSR
 8015a08:	613b      	str	r3, [r7, #16]
  return(result);
 8015a0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d175      	bne.n	8015afc <osSemaphoreNew+0x108>
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d072      	beq.n	8015afc <osSemaphoreNew+0x108>
 8015a16:	68ba      	ldr	r2, [r7, #8]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d86e      	bhi.n	8015afc <osSemaphoreNew+0x108>
    mem = -1;
 8015a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d015      	beq.n	8015a56 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	689b      	ldr	r3, [r3, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d006      	beq.n	8015a40 <osSemaphoreNew+0x4c>
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	2b4f      	cmp	r3, #79	; 0x4f
 8015a38:	d902      	bls.n	8015a40 <osSemaphoreNew+0x4c>
        mem = 1;
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	61bb      	str	r3, [r7, #24]
 8015a3e:	e00c      	b.n	8015a5a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	689b      	ldr	r3, [r3, #8]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d108      	bne.n	8015a5a <osSemaphoreNew+0x66>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d104      	bne.n	8015a5a <osSemaphoreNew+0x66>
          mem = 0;
 8015a50:	2300      	movs	r3, #0
 8015a52:	61bb      	str	r3, [r7, #24]
 8015a54:	e001      	b.n	8015a5a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015a56:	2300      	movs	r3, #0
 8015a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a60:	d04c      	beq.n	8015afc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d128      	bne.n	8015aba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	2b01      	cmp	r3, #1
 8015a6c:	d10a      	bne.n	8015a84 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	689b      	ldr	r3, [r3, #8]
 8015a72:	2203      	movs	r2, #3
 8015a74:	9200      	str	r2, [sp, #0]
 8015a76:	2200      	movs	r2, #0
 8015a78:	2100      	movs	r1, #0
 8015a7a:	2001      	movs	r0, #1
 8015a7c:	f000 fa4e 	bl	8015f1c <xQueueGenericCreateStatic>
 8015a80:	61f8      	str	r0, [r7, #28]
 8015a82:	e005      	b.n	8015a90 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015a84:	2203      	movs	r2, #3
 8015a86:	2100      	movs	r1, #0
 8015a88:	2001      	movs	r0, #1
 8015a8a:	f000 fabf 	bl	801600c <xQueueGenericCreate>
 8015a8e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d022      	beq.n	8015adc <osSemaphoreNew+0xe8>
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d01f      	beq.n	8015adc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	69f8      	ldr	r0, [r7, #28]
 8015aa4:	f000 fb7a 	bl	801619c <xQueueGenericSend>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b01      	cmp	r3, #1
 8015aac:	d016      	beq.n	8015adc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015aae:	69f8      	ldr	r0, [r7, #28]
 8015ab0:	f001 f806 	bl	8016ac0 <vQueueDelete>
            hSemaphore = NULL;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	61fb      	str	r3, [r7, #28]
 8015ab8:	e010      	b.n	8015adc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015aba:	69bb      	ldr	r3, [r7, #24]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d108      	bne.n	8015ad2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	689b      	ldr	r3, [r3, #8]
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	68b9      	ldr	r1, [r7, #8]
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f000 fafc 	bl	80160c6 <xQueueCreateCountingSemaphoreStatic>
 8015ace:	61f8      	str	r0, [r7, #28]
 8015ad0:	e004      	b.n	8015adc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f000 fb2d 	bl	8016134 <xQueueCreateCountingSemaphore>
 8015ada:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015adc:	69fb      	ldr	r3, [r7, #28]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d00c      	beq.n	8015afc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d003      	beq.n	8015af0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	617b      	str	r3, [r7, #20]
 8015aee:	e001      	b.n	8015af4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015af0:	2300      	movs	r3, #0
 8015af2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015af4:	6979      	ldr	r1, [r7, #20]
 8015af6:	69f8      	ldr	r0, [r7, #28]
 8015af8:	f001 f92e 	bl	8016d58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015afc:	69fb      	ldr	r3, [r7, #28]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3720      	adds	r7, #32
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
	...

08015b08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b086      	sub	sp, #24
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d103      	bne.n	8015b28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015b20:	f06f 0303 	mvn.w	r3, #3
 8015b24:	617b      	str	r3, [r7, #20]
 8015b26:	e039      	b.n	8015b9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b28:	f3ef 8305 	mrs	r3, IPSR
 8015b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d022      	beq.n	8015b7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d003      	beq.n	8015b42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015b3a:	f06f 0303 	mvn.w	r3, #3
 8015b3e:	617b      	str	r3, [r7, #20]
 8015b40:	e02c      	b.n	8015b9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015b42:	2300      	movs	r3, #0
 8015b44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015b46:	f107 0308 	add.w	r3, r7, #8
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	2100      	movs	r1, #0
 8015b4e:	6938      	ldr	r0, [r7, #16]
 8015b50:	f000 ff36 	bl	80169c0 <xQueueReceiveFromISR>
 8015b54:	4603      	mov	r3, r0
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d003      	beq.n	8015b62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015b5a:	f06f 0302 	mvn.w	r3, #2
 8015b5e:	617b      	str	r3, [r7, #20]
 8015b60:	e01c      	b.n	8015b9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d019      	beq.n	8015b9c <osSemaphoreAcquire+0x94>
 8015b68:	4b0f      	ldr	r3, [pc, #60]	; (8015ba8 <osSemaphoreAcquire+0xa0>)
 8015b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b6e:	601a      	str	r2, [r3, #0]
 8015b70:	f3bf 8f4f 	dsb	sy
 8015b74:	f3bf 8f6f 	isb	sy
 8015b78:	e010      	b.n	8015b9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	6938      	ldr	r0, [r7, #16]
 8015b7e:	f000 fe13 	bl	80167a8 <xQueueSemaphoreTake>
 8015b82:	4603      	mov	r3, r0
 8015b84:	2b01      	cmp	r3, #1
 8015b86:	d009      	beq.n	8015b9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d003      	beq.n	8015b96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015b8e:	f06f 0301 	mvn.w	r3, #1
 8015b92:	617b      	str	r3, [r7, #20]
 8015b94:	e002      	b.n	8015b9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015b96:	f06f 0302 	mvn.w	r3, #2
 8015b9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015b9c:	697b      	ldr	r3, [r7, #20]
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3718      	adds	r7, #24
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	e000ed04 	.word	0xe000ed04

08015bac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d103      	bne.n	8015bca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015bc2:	f06f 0303 	mvn.w	r3, #3
 8015bc6:	617b      	str	r3, [r7, #20]
 8015bc8:	e02c      	b.n	8015c24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bca:	f3ef 8305 	mrs	r3, IPSR
 8015bce:	60fb      	str	r3, [r7, #12]
  return(result);
 8015bd0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d01a      	beq.n	8015c0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015bda:	f107 0308 	add.w	r3, r7, #8
 8015bde:	4619      	mov	r1, r3
 8015be0:	6938      	ldr	r0, [r7, #16]
 8015be2:	f000 fc74 	bl	80164ce <xQueueGiveFromISR>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2b01      	cmp	r3, #1
 8015bea:	d003      	beq.n	8015bf4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015bec:	f06f 0302 	mvn.w	r3, #2
 8015bf0:	617b      	str	r3, [r7, #20]
 8015bf2:	e017      	b.n	8015c24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015bf4:	68bb      	ldr	r3, [r7, #8]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d014      	beq.n	8015c24 <osSemaphoreRelease+0x78>
 8015bfa:	4b0d      	ldr	r3, [pc, #52]	; (8015c30 <osSemaphoreRelease+0x84>)
 8015bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c00:	601a      	str	r2, [r3, #0]
 8015c02:	f3bf 8f4f 	dsb	sy
 8015c06:	f3bf 8f6f 	isb	sy
 8015c0a:	e00b      	b.n	8015c24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	2200      	movs	r2, #0
 8015c10:	2100      	movs	r1, #0
 8015c12:	6938      	ldr	r0, [r7, #16]
 8015c14:	f000 fac2 	bl	801619c <xQueueGenericSend>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	d002      	beq.n	8015c24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015c1e:	f06f 0302 	mvn.w	r3, #2
 8015c22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015c24:	697b      	ldr	r3, [r7, #20]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3718      	adds	r7, #24
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	e000ed04 	.word	0xe000ed04

08015c34 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b086      	sub	sp, #24
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c40:	f3ef 8305 	mrs	r3, IPSR
 8015c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8015c46:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d003      	beq.n	8015c54 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015c4c:	f06f 0305 	mvn.w	r3, #5
 8015c50:	617b      	str	r3, [r7, #20]
 8015c52:	e00e      	b.n	8015c72 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d103      	bne.n	8015c62 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8015c5a:	f06f 0303 	mvn.w	r3, #3
 8015c5e:	617b      	str	r3, [r7, #20]
 8015c60:	e007      	b.n	8015c72 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015c62:	6938      	ldr	r0, [r7, #16]
 8015c64:	f001 f8a2 	bl	8016dac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8015c6c:	6938      	ldr	r0, [r7, #16]
 8015c6e:	f000 ff27 	bl	8016ac0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015c72:	697b      	ldr	r3, [r7, #20]
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3718      	adds	r7, #24
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015c7c:	b480      	push	{r7}
 8015c7e:	b085      	sub	sp, #20
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	4a07      	ldr	r2, [pc, #28]	; (8015ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8015c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	4a06      	ldr	r2, [pc, #24]	; (8015cac <vApplicationGetIdleTaskMemory+0x30>)
 8015c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	2280      	movs	r2, #128	; 0x80
 8015c98:	601a      	str	r2, [r3, #0]
}
 8015c9a:	bf00      	nop
 8015c9c:	3714      	adds	r7, #20
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca4:	4770      	bx	lr
 8015ca6:	bf00      	nop
 8015ca8:	2000087c 	.word	0x2000087c
 8015cac:	20000938 	.word	0x20000938

08015cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	4a07      	ldr	r2, [pc, #28]	; (8015cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8015cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	4a06      	ldr	r2, [pc, #24]	; (8015ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8015cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015cce:	601a      	str	r2, [r3, #0]
}
 8015cd0:	bf00      	nop
 8015cd2:	3714      	adds	r7, #20
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr
 8015cdc:	20000b38 	.word	0x20000b38
 8015ce0:	20000bf4 	.word	0x20000bf4

08015ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f103 0208 	add.w	r2, r3, #8
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8015cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f103 0208 	add.w	r2, r3, #8
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f103 0208 	add.w	r2, r3, #8
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2200      	movs	r2, #0
 8015d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015d18:	bf00      	nop
 8015d1a:	370c      	adds	r7, #12
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d22:	4770      	bx	lr

08015d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015d32:	bf00      	nop
 8015d34:	370c      	adds	r7, #12
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr

08015d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d3e:	b480      	push	{r7}
 8015d40:	b085      	sub	sp, #20
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
 8015d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	689a      	ldr	r2, [r3, #8]
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	689b      	ldr	r3, [r3, #8]
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	1c5a      	adds	r2, r3, #1
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	601a      	str	r2, [r3, #0]
}
 8015d7a:	bf00      	nop
 8015d7c:	3714      	adds	r7, #20
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr

08015d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d86:	b480      	push	{r7}
 8015d88:	b085      	sub	sp, #20
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
 8015d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015d96:	68bb      	ldr	r3, [r7, #8]
 8015d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d9c:	d103      	bne.n	8015da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	691b      	ldr	r3, [r3, #16]
 8015da2:	60fb      	str	r3, [r7, #12]
 8015da4:	e00c      	b.n	8015dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	3308      	adds	r3, #8
 8015daa:	60fb      	str	r3, [r7, #12]
 8015dac:	e002      	b.n	8015db4 <vListInsert+0x2e>
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	60fb      	str	r3, [r7, #12]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d2f6      	bcs.n	8015dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	685a      	ldr	r2, [r3, #4]
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	683a      	ldr	r2, [r7, #0]
 8015dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	68fa      	ldr	r2, [r7, #12]
 8015dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	683a      	ldr	r2, [r7, #0]
 8015dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	1c5a      	adds	r2, r3, #1
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	601a      	str	r2, [r3, #0]
}
 8015dec:	bf00      	nop
 8015dee:	3714      	adds	r7, #20
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	691b      	ldr	r3, [r3, #16]
 8015e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	687a      	ldr	r2, [r7, #4]
 8015e0c:	6892      	ldr	r2, [r2, #8]
 8015e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	689b      	ldr	r3, [r3, #8]
 8015e14:	687a      	ldr	r2, [r7, #4]
 8015e16:	6852      	ldr	r2, [r2, #4]
 8015e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d103      	bne.n	8015e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	689a      	ldr	r2, [r3, #8]
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	1e5a      	subs	r2, r3, #1
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	681b      	ldr	r3, [r3, #0]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3714      	adds	r7, #20
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d10a      	bne.n	8015e76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e64:	f383 8811 	msr	BASEPRI, r3
 8015e68:	f3bf 8f6f 	isb	sy
 8015e6c:	f3bf 8f4f 	dsb	sy
 8015e70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015e72:	bf00      	nop
 8015e74:	e7fe      	b.n	8015e74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015e76:	f002 fd1d 	bl	80188b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e82:	68f9      	ldr	r1, [r7, #12]
 8015e84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015e86:	fb01 f303 	mul.w	r3, r1, r3
 8015e8a:	441a      	add	r2, r3
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2200      	movs	r2, #0
 8015e94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	681a      	ldr	r2, [r3, #0]
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681a      	ldr	r2, [r3, #0]
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	68f9      	ldr	r1, [r7, #12]
 8015eaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015eac:	fb01 f303 	mul.w	r3, r1, r3
 8015eb0:	441a      	add	r2, r3
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	22ff      	movs	r2, #255	; 0xff
 8015eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	22ff      	movs	r2, #255	; 0xff
 8015ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d114      	bne.n	8015ef6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	691b      	ldr	r3, [r3, #16]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d01a      	beq.n	8015f0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	3310      	adds	r3, #16
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f001 fcbd 	bl	8017858 <xTaskRemoveFromEventList>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d012      	beq.n	8015f0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015ee4:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <xQueueGenericReset+0xcc>)
 8015ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015eea:	601a      	str	r2, [r3, #0]
 8015eec:	f3bf 8f4f 	dsb	sy
 8015ef0:	f3bf 8f6f 	isb	sy
 8015ef4:	e009      	b.n	8015f0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	3310      	adds	r3, #16
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7ff fef2 	bl	8015ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	3324      	adds	r3, #36	; 0x24
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff feed 	bl	8015ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015f0a:	f002 fd03 	bl	8018914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015f0e:	2301      	movs	r3, #1
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3710      	adds	r7, #16
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}
 8015f18:	e000ed04 	.word	0xe000ed04

08015f1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b08e      	sub	sp, #56	; 0x38
 8015f20:	af02      	add	r7, sp, #8
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	607a      	str	r2, [r7, #4]
 8015f28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d10a      	bne.n	8015f46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f34:	f383 8811 	msr	BASEPRI, r3
 8015f38:	f3bf 8f6f 	isb	sy
 8015f3c:	f3bf 8f4f 	dsb	sy
 8015f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015f42:	bf00      	nop
 8015f44:	e7fe      	b.n	8015f44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d10a      	bne.n	8015f62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f50:	f383 8811 	msr	BASEPRI, r3
 8015f54:	f3bf 8f6f 	isb	sy
 8015f58:	f3bf 8f4f 	dsb	sy
 8015f5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015f5e:	bf00      	nop
 8015f60:	e7fe      	b.n	8015f60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d002      	beq.n	8015f6e <xQueueGenericCreateStatic+0x52>
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d001      	beq.n	8015f72 <xQueueGenericCreateStatic+0x56>
 8015f6e:	2301      	movs	r3, #1
 8015f70:	e000      	b.n	8015f74 <xQueueGenericCreateStatic+0x58>
 8015f72:	2300      	movs	r3, #0
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d10a      	bne.n	8015f8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f7c:	f383 8811 	msr	BASEPRI, r3
 8015f80:	f3bf 8f6f 	isb	sy
 8015f84:	f3bf 8f4f 	dsb	sy
 8015f88:	623b      	str	r3, [r7, #32]
}
 8015f8a:	bf00      	nop
 8015f8c:	e7fe      	b.n	8015f8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d102      	bne.n	8015f9a <xQueueGenericCreateStatic+0x7e>
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d101      	bne.n	8015f9e <xQueueGenericCreateStatic+0x82>
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	e000      	b.n	8015fa0 <xQueueGenericCreateStatic+0x84>
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d10a      	bne.n	8015fba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa8:	f383 8811 	msr	BASEPRI, r3
 8015fac:	f3bf 8f6f 	isb	sy
 8015fb0:	f3bf 8f4f 	dsb	sy
 8015fb4:	61fb      	str	r3, [r7, #28]
}
 8015fb6:	bf00      	nop
 8015fb8:	e7fe      	b.n	8015fb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015fba:	2350      	movs	r3, #80	; 0x50
 8015fbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015fbe:	697b      	ldr	r3, [r7, #20]
 8015fc0:	2b50      	cmp	r3, #80	; 0x50
 8015fc2:	d00a      	beq.n	8015fda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc8:	f383 8811 	msr	BASEPRI, r3
 8015fcc:	f3bf 8f6f 	isb	sy
 8015fd0:	f3bf 8f4f 	dsb	sy
 8015fd4:	61bb      	str	r3, [r7, #24]
}
 8015fd6:	bf00      	nop
 8015fd8:	e7fe      	b.n	8015fd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015fda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d00d      	beq.n	8016002 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe8:	2201      	movs	r2, #1
 8015fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015fee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff4:	9300      	str	r3, [sp, #0]
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	68b9      	ldr	r1, [r7, #8]
 8015ffc:	68f8      	ldr	r0, [r7, #12]
 8015ffe:	f000 f83f 	bl	8016080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016004:	4618      	mov	r0, r3
 8016006:	3730      	adds	r7, #48	; 0x30
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801600c:	b580      	push	{r7, lr}
 801600e:	b08a      	sub	sp, #40	; 0x28
 8016010:	af02      	add	r7, sp, #8
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	4613      	mov	r3, r2
 8016018:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d10a      	bne.n	8016036 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016024:	f383 8811 	msr	BASEPRI, r3
 8016028:	f3bf 8f6f 	isb	sy
 801602c:	f3bf 8f4f 	dsb	sy
 8016030:	613b      	str	r3, [r7, #16]
}
 8016032:	bf00      	nop
 8016034:	e7fe      	b.n	8016034 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	68ba      	ldr	r2, [r7, #8]
 801603a:	fb02 f303 	mul.w	r3, r2, r3
 801603e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016040:	69fb      	ldr	r3, [r7, #28]
 8016042:	3350      	adds	r3, #80	; 0x50
 8016044:	4618      	mov	r0, r3
 8016046:	f002 fd57 	bl	8018af8 <pvPortMalloc>
 801604a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d011      	beq.n	8016076 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	3350      	adds	r3, #80	; 0x50
 801605a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801605c:	69bb      	ldr	r3, [r7, #24]
 801605e:	2200      	movs	r2, #0
 8016060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016064:	79fa      	ldrb	r2, [r7, #7]
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	9300      	str	r3, [sp, #0]
 801606a:	4613      	mov	r3, r2
 801606c:	697a      	ldr	r2, [r7, #20]
 801606e:	68b9      	ldr	r1, [r7, #8]
 8016070:	68f8      	ldr	r0, [r7, #12]
 8016072:	f000 f805 	bl	8016080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016076:	69bb      	ldr	r3, [r7, #24]
	}
 8016078:	4618      	mov	r0, r3
 801607a:	3720      	adds	r7, #32
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
 801608c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d103      	bne.n	801609c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	69ba      	ldr	r2, [r7, #24]
 8016098:	601a      	str	r2, [r3, #0]
 801609a:	e002      	b.n	80160a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801609c:	69bb      	ldr	r3, [r7, #24]
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80160a8:	69bb      	ldr	r3, [r7, #24]
 80160aa:	68ba      	ldr	r2, [r7, #8]
 80160ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80160ae:	2101      	movs	r1, #1
 80160b0:	69b8      	ldr	r0, [r7, #24]
 80160b2:	f7ff fecb 	bl	8015e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	78fa      	ldrb	r2, [r7, #3]
 80160ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80160be:	bf00      	nop
 80160c0:	3710      	adds	r7, #16
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}

080160c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80160c6:	b580      	push	{r7, lr}
 80160c8:	b08a      	sub	sp, #40	; 0x28
 80160ca:	af02      	add	r7, sp, #8
 80160cc:	60f8      	str	r0, [r7, #12]
 80160ce:	60b9      	str	r1, [r7, #8]
 80160d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d10a      	bne.n	80160ee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80160d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160dc:	f383 8811 	msr	BASEPRI, r3
 80160e0:	f3bf 8f6f 	isb	sy
 80160e4:	f3bf 8f4f 	dsb	sy
 80160e8:	61bb      	str	r3, [r7, #24]
}
 80160ea:	bf00      	nop
 80160ec:	e7fe      	b.n	80160ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80160ee:	68ba      	ldr	r2, [r7, #8]
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d90a      	bls.n	801610c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80160f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fa:	f383 8811 	msr	BASEPRI, r3
 80160fe:	f3bf 8f6f 	isb	sy
 8016102:	f3bf 8f4f 	dsb	sy
 8016106:	617b      	str	r3, [r7, #20]
}
 8016108:	bf00      	nop
 801610a:	e7fe      	b.n	801610a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801610c:	2302      	movs	r3, #2
 801610e:	9300      	str	r3, [sp, #0]
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	2100      	movs	r1, #0
 8016116:	68f8      	ldr	r0, [r7, #12]
 8016118:	f7ff ff00 	bl	8015f1c <xQueueGenericCreateStatic>
 801611c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d002      	beq.n	801612a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801612a:	69fb      	ldr	r3, [r7, #28]
	}
 801612c:	4618      	mov	r0, r3
 801612e:	3720      	adds	r7, #32
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}

08016134 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016134:	b580      	push	{r7, lr}
 8016136:	b086      	sub	sp, #24
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d10a      	bne.n	801615a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016148:	f383 8811 	msr	BASEPRI, r3
 801614c:	f3bf 8f6f 	isb	sy
 8016150:	f3bf 8f4f 	dsb	sy
 8016154:	613b      	str	r3, [r7, #16]
}
 8016156:	bf00      	nop
 8016158:	e7fe      	b.n	8016158 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	429a      	cmp	r2, r3
 8016160:	d90a      	bls.n	8016178 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016166:	f383 8811 	msr	BASEPRI, r3
 801616a:	f3bf 8f6f 	isb	sy
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	60fb      	str	r3, [r7, #12]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016178:	2202      	movs	r2, #2
 801617a:	2100      	movs	r1, #0
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7ff ff45 	bl	801600c <xQueueGenericCreate>
 8016182:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016184:	697b      	ldr	r3, [r7, #20]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d002      	beq.n	8016190 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	683a      	ldr	r2, [r7, #0]
 801618e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016190:	697b      	ldr	r3, [r7, #20]
	}
 8016192:	4618      	mov	r0, r3
 8016194:	3718      	adds	r7, #24
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
	...

0801619c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b08e      	sub	sp, #56	; 0x38
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
 80161a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80161aa:	2300      	movs	r3, #0
 80161ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d10a      	bne.n	80161ce <xQueueGenericSend+0x32>
	__asm volatile
 80161b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161bc:	f383 8811 	msr	BASEPRI, r3
 80161c0:	f3bf 8f6f 	isb	sy
 80161c4:	f3bf 8f4f 	dsb	sy
 80161c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80161ca:	bf00      	nop
 80161cc:	e7fe      	b.n	80161cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d103      	bne.n	80161dc <xQueueGenericSend+0x40>
 80161d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d101      	bne.n	80161e0 <xQueueGenericSend+0x44>
 80161dc:	2301      	movs	r3, #1
 80161de:	e000      	b.n	80161e2 <xQueueGenericSend+0x46>
 80161e0:	2300      	movs	r3, #0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10a      	bne.n	80161fc <xQueueGenericSend+0x60>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ea:	f383 8811 	msr	BASEPRI, r3
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80161f8:	bf00      	nop
 80161fa:	e7fe      	b.n	80161fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	2b02      	cmp	r3, #2
 8016200:	d103      	bne.n	801620a <xQueueGenericSend+0x6e>
 8016202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016206:	2b01      	cmp	r3, #1
 8016208:	d101      	bne.n	801620e <xQueueGenericSend+0x72>
 801620a:	2301      	movs	r3, #1
 801620c:	e000      	b.n	8016210 <xQueueGenericSend+0x74>
 801620e:	2300      	movs	r3, #0
 8016210:	2b00      	cmp	r3, #0
 8016212:	d10a      	bne.n	801622a <xQueueGenericSend+0x8e>
	__asm volatile
 8016214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016218:	f383 8811 	msr	BASEPRI, r3
 801621c:	f3bf 8f6f 	isb	sy
 8016220:	f3bf 8f4f 	dsb	sy
 8016224:	623b      	str	r3, [r7, #32]
}
 8016226:	bf00      	nop
 8016228:	e7fe      	b.n	8016228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801622a:	f001 fce7 	bl	8017bfc <xTaskGetSchedulerState>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d102      	bne.n	801623a <xQueueGenericSend+0x9e>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d101      	bne.n	801623e <xQueueGenericSend+0xa2>
 801623a:	2301      	movs	r3, #1
 801623c:	e000      	b.n	8016240 <xQueueGenericSend+0xa4>
 801623e:	2300      	movs	r3, #0
 8016240:	2b00      	cmp	r3, #0
 8016242:	d10a      	bne.n	801625a <xQueueGenericSend+0xbe>
	__asm volatile
 8016244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016248:	f383 8811 	msr	BASEPRI, r3
 801624c:	f3bf 8f6f 	isb	sy
 8016250:	f3bf 8f4f 	dsb	sy
 8016254:	61fb      	str	r3, [r7, #28]
}
 8016256:	bf00      	nop
 8016258:	e7fe      	b.n	8016258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801625a:	f002 fb2b 	bl	80188b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016266:	429a      	cmp	r2, r3
 8016268:	d302      	bcc.n	8016270 <xQueueGenericSend+0xd4>
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	2b02      	cmp	r3, #2
 801626e:	d129      	bne.n	80162c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016270:	683a      	ldr	r2, [r7, #0]
 8016272:	68b9      	ldr	r1, [r7, #8]
 8016274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016276:	f000 fc5e 	bl	8016b36 <prvCopyDataToQueue>
 801627a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016280:	2b00      	cmp	r3, #0
 8016282:	d010      	beq.n	80162a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016286:	3324      	adds	r3, #36	; 0x24
 8016288:	4618      	mov	r0, r3
 801628a:	f001 fae5 	bl	8017858 <xTaskRemoveFromEventList>
 801628e:	4603      	mov	r3, r0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d013      	beq.n	80162bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016294:	4b3f      	ldr	r3, [pc, #252]	; (8016394 <xQueueGenericSend+0x1f8>)
 8016296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801629a:	601a      	str	r2, [r3, #0]
 801629c:	f3bf 8f4f 	dsb	sy
 80162a0:	f3bf 8f6f 	isb	sy
 80162a4:	e00a      	b.n	80162bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80162a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d007      	beq.n	80162bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80162ac:	4b39      	ldr	r3, [pc, #228]	; (8016394 <xQueueGenericSend+0x1f8>)
 80162ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162b2:	601a      	str	r2, [r3, #0]
 80162b4:	f3bf 8f4f 	dsb	sy
 80162b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80162bc:	f002 fb2a 	bl	8018914 <vPortExitCritical>
				return pdPASS;
 80162c0:	2301      	movs	r3, #1
 80162c2:	e063      	b.n	801638c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d103      	bne.n	80162d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80162ca:	f002 fb23 	bl	8018914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80162ce:	2300      	movs	r3, #0
 80162d0:	e05c      	b.n	801638c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80162d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d106      	bne.n	80162e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80162d8:	f107 0314 	add.w	r3, r7, #20
 80162dc:	4618      	mov	r0, r3
 80162de:	f001 fb1f 	bl	8017920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80162e2:	2301      	movs	r3, #1
 80162e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80162e6:	f002 fb15 	bl	8018914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80162ea:	f001 f88b 	bl	8017404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80162ee:	f002 fae1 	bl	80188b4 <vPortEnterCritical>
 80162f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80162f8:	b25b      	sxtb	r3, r3
 80162fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162fe:	d103      	bne.n	8016308 <xQueueGenericSend+0x16c>
 8016300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016302:	2200      	movs	r2, #0
 8016304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801630e:	b25b      	sxtb	r3, r3
 8016310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016314:	d103      	bne.n	801631e <xQueueGenericSend+0x182>
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	2200      	movs	r2, #0
 801631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801631e:	f002 faf9 	bl	8018914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016322:	1d3a      	adds	r2, r7, #4
 8016324:	f107 0314 	add.w	r3, r7, #20
 8016328:	4611      	mov	r1, r2
 801632a:	4618      	mov	r0, r3
 801632c:	f001 fb0e 	bl	801794c <xTaskCheckForTimeOut>
 8016330:	4603      	mov	r3, r0
 8016332:	2b00      	cmp	r3, #0
 8016334:	d124      	bne.n	8016380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016338:	f000 fcf5 	bl	8016d26 <prvIsQueueFull>
 801633c:	4603      	mov	r3, r0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d018      	beq.n	8016374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016344:	3310      	adds	r3, #16
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	4611      	mov	r1, r2
 801634a:	4618      	mov	r0, r3
 801634c:	f001 fa34 	bl	80177b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016352:	f000 fc80 	bl	8016c56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016356:	f001 f863 	bl	8017420 <xTaskResumeAll>
 801635a:	4603      	mov	r3, r0
 801635c:	2b00      	cmp	r3, #0
 801635e:	f47f af7c 	bne.w	801625a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016362:	4b0c      	ldr	r3, [pc, #48]	; (8016394 <xQueueGenericSend+0x1f8>)
 8016364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016368:	601a      	str	r2, [r3, #0]
 801636a:	f3bf 8f4f 	dsb	sy
 801636e:	f3bf 8f6f 	isb	sy
 8016372:	e772      	b.n	801625a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016376:	f000 fc6e 	bl	8016c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801637a:	f001 f851 	bl	8017420 <xTaskResumeAll>
 801637e:	e76c      	b.n	801625a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016382:	f000 fc68 	bl	8016c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016386:	f001 f84b 	bl	8017420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801638a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801638c:	4618      	mov	r0, r3
 801638e:	3738      	adds	r7, #56	; 0x38
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	e000ed04 	.word	0xe000ed04

08016398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b090      	sub	sp, #64	; 0x40
 801639c:	af00      	add	r7, sp, #0
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
 80163a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80163aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d10a      	bne.n	80163c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80163b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b4:	f383 8811 	msr	BASEPRI, r3
 80163b8:	f3bf 8f6f 	isb	sy
 80163bc:	f3bf 8f4f 	dsb	sy
 80163c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80163c2:	bf00      	nop
 80163c4:	e7fe      	b.n	80163c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d103      	bne.n	80163d4 <xQueueGenericSendFromISR+0x3c>
 80163cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d101      	bne.n	80163d8 <xQueueGenericSendFromISR+0x40>
 80163d4:	2301      	movs	r3, #1
 80163d6:	e000      	b.n	80163da <xQueueGenericSendFromISR+0x42>
 80163d8:	2300      	movs	r3, #0
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d10a      	bne.n	80163f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80163de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e2:	f383 8811 	msr	BASEPRI, r3
 80163e6:	f3bf 8f6f 	isb	sy
 80163ea:	f3bf 8f4f 	dsb	sy
 80163ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80163f0:	bf00      	nop
 80163f2:	e7fe      	b.n	80163f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	2b02      	cmp	r3, #2
 80163f8:	d103      	bne.n	8016402 <xQueueGenericSendFromISR+0x6a>
 80163fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163fe:	2b01      	cmp	r3, #1
 8016400:	d101      	bne.n	8016406 <xQueueGenericSendFromISR+0x6e>
 8016402:	2301      	movs	r3, #1
 8016404:	e000      	b.n	8016408 <xQueueGenericSendFromISR+0x70>
 8016406:	2300      	movs	r3, #0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d10a      	bne.n	8016422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016410:	f383 8811 	msr	BASEPRI, r3
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	f3bf 8f4f 	dsb	sy
 801641c:	623b      	str	r3, [r7, #32]
}
 801641e:	bf00      	nop
 8016420:	e7fe      	b.n	8016420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016422:	f002 fb29 	bl	8018a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016426:	f3ef 8211 	mrs	r2, BASEPRI
 801642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801642e:	f383 8811 	msr	BASEPRI, r3
 8016432:	f3bf 8f6f 	isb	sy
 8016436:	f3bf 8f4f 	dsb	sy
 801643a:	61fa      	str	r2, [r7, #28]
 801643c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801643e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016440:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801644a:	429a      	cmp	r2, r3
 801644c:	d302      	bcc.n	8016454 <xQueueGenericSendFromISR+0xbc>
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	2b02      	cmp	r3, #2
 8016452:	d12f      	bne.n	80164b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016462:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016464:	683a      	ldr	r2, [r7, #0]
 8016466:	68b9      	ldr	r1, [r7, #8]
 8016468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801646a:	f000 fb64 	bl	8016b36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801646e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016476:	d112      	bne.n	801649e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801647c:	2b00      	cmp	r3, #0
 801647e:	d016      	beq.n	80164ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016482:	3324      	adds	r3, #36	; 0x24
 8016484:	4618      	mov	r0, r3
 8016486:	f001 f9e7 	bl	8017858 <xTaskRemoveFromEventList>
 801648a:	4603      	mov	r3, r0
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00e      	beq.n	80164ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d00b      	beq.n	80164ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2201      	movs	r2, #1
 801649a:	601a      	str	r2, [r3, #0]
 801649c:	e007      	b.n	80164ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801649e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164a2:	3301      	adds	r3, #1
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	b25a      	sxtb	r2, r3
 80164a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80164ae:	2301      	movs	r3, #1
 80164b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80164b2:	e001      	b.n	80164b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80164b4:	2300      	movs	r3, #0
 80164b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80164b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80164bc:	697b      	ldr	r3, [r7, #20]
 80164be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80164c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80164c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3740      	adds	r7, #64	; 0x40
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80164ce:	b580      	push	{r7, lr}
 80164d0:	b08e      	sub	sp, #56	; 0x38
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80164dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d10a      	bne.n	80164f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80164e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e6:	f383 8811 	msr	BASEPRI, r3
 80164ea:	f3bf 8f6f 	isb	sy
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	623b      	str	r3, [r7, #32]
}
 80164f4:	bf00      	nop
 80164f6:	e7fe      	b.n	80164f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80164f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00a      	beq.n	8016516 <xQueueGiveFromISR+0x48>
	__asm volatile
 8016500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016504:	f383 8811 	msr	BASEPRI, r3
 8016508:	f3bf 8f6f 	isb	sy
 801650c:	f3bf 8f4f 	dsb	sy
 8016510:	61fb      	str	r3, [r7, #28]
}
 8016512:	bf00      	nop
 8016514:	e7fe      	b.n	8016514 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d103      	bne.n	8016526 <xQueueGiveFromISR+0x58>
 801651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016520:	689b      	ldr	r3, [r3, #8]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d101      	bne.n	801652a <xQueueGiveFromISR+0x5c>
 8016526:	2301      	movs	r3, #1
 8016528:	e000      	b.n	801652c <xQueueGiveFromISR+0x5e>
 801652a:	2300      	movs	r3, #0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d10a      	bne.n	8016546 <xQueueGiveFromISR+0x78>
	__asm volatile
 8016530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016534:	f383 8811 	msr	BASEPRI, r3
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	61bb      	str	r3, [r7, #24]
}
 8016542:	bf00      	nop
 8016544:	e7fe      	b.n	8016544 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016546:	f002 fa97 	bl	8018a78 <vPortValidateInterruptPriority>
	__asm volatile
 801654a:	f3ef 8211 	mrs	r2, BASEPRI
 801654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016552:	f383 8811 	msr	BASEPRI, r3
 8016556:	f3bf 8f6f 	isb	sy
 801655a:	f3bf 8f4f 	dsb	sy
 801655e:	617a      	str	r2, [r7, #20]
 8016560:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016562:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801656a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016572:	429a      	cmp	r2, r3
 8016574:	d22b      	bcs.n	80165ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801657c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	1c5a      	adds	r2, r3, #1
 8016584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016586:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016590:	d112      	bne.n	80165b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016596:	2b00      	cmp	r3, #0
 8016598:	d016      	beq.n	80165c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659c:	3324      	adds	r3, #36	; 0x24
 801659e:	4618      	mov	r0, r3
 80165a0:	f001 f95a 	bl	8017858 <xTaskRemoveFromEventList>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d00e      	beq.n	80165c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80165aa:	683b      	ldr	r3, [r7, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d00b      	beq.n	80165c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	2201      	movs	r2, #1
 80165b4:	601a      	str	r2, [r3, #0]
 80165b6:	e007      	b.n	80165c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80165b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165bc:	3301      	adds	r3, #1
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	b25a      	sxtb	r2, r3
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80165c8:	2301      	movs	r3, #1
 80165ca:	637b      	str	r3, [r7, #52]	; 0x34
 80165cc:	e001      	b.n	80165d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80165ce:	2300      	movs	r3, #0
 80165d0:	637b      	str	r3, [r7, #52]	; 0x34
 80165d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	f383 8811 	msr	BASEPRI, r3
}
 80165dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3738      	adds	r7, #56	; 0x38
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b08c      	sub	sp, #48	; 0x30
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80165f4:	2300      	movs	r3, #0
 80165f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80165fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10a      	bne.n	8016618 <xQueueReceive+0x30>
	__asm volatile
 8016602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016606:	f383 8811 	msr	BASEPRI, r3
 801660a:	f3bf 8f6f 	isb	sy
 801660e:	f3bf 8f4f 	dsb	sy
 8016612:	623b      	str	r3, [r7, #32]
}
 8016614:	bf00      	nop
 8016616:	e7fe      	b.n	8016616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d103      	bne.n	8016626 <xQueueReceive+0x3e>
 801661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016622:	2b00      	cmp	r3, #0
 8016624:	d101      	bne.n	801662a <xQueueReceive+0x42>
 8016626:	2301      	movs	r3, #1
 8016628:	e000      	b.n	801662c <xQueueReceive+0x44>
 801662a:	2300      	movs	r3, #0
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10a      	bne.n	8016646 <xQueueReceive+0x5e>
	__asm volatile
 8016630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016634:	f383 8811 	msr	BASEPRI, r3
 8016638:	f3bf 8f6f 	isb	sy
 801663c:	f3bf 8f4f 	dsb	sy
 8016640:	61fb      	str	r3, [r7, #28]
}
 8016642:	bf00      	nop
 8016644:	e7fe      	b.n	8016644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016646:	f001 fad9 	bl	8017bfc <xTaskGetSchedulerState>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d102      	bne.n	8016656 <xQueueReceive+0x6e>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d101      	bne.n	801665a <xQueueReceive+0x72>
 8016656:	2301      	movs	r3, #1
 8016658:	e000      	b.n	801665c <xQueueReceive+0x74>
 801665a:	2300      	movs	r3, #0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d10a      	bne.n	8016676 <xQueueReceive+0x8e>
	__asm volatile
 8016660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	61bb      	str	r3, [r7, #24]
}
 8016672:	bf00      	nop
 8016674:	e7fe      	b.n	8016674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016676:	f002 f91d 	bl	80188b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801667e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	2b00      	cmp	r3, #0
 8016684:	d01f      	beq.n	80166c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016686:	68b9      	ldr	r1, [r7, #8]
 8016688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801668a:	f000 fabe 	bl	8016c0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016690:	1e5a      	subs	r2, r3, #1
 8016692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016698:	691b      	ldr	r3, [r3, #16]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00f      	beq.n	80166be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a0:	3310      	adds	r3, #16
 80166a2:	4618      	mov	r0, r3
 80166a4:	f001 f8d8 	bl	8017858 <xTaskRemoveFromEventList>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d007      	beq.n	80166be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166ae:	4b3d      	ldr	r3, [pc, #244]	; (80167a4 <xQueueReceive+0x1bc>)
 80166b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166b4:	601a      	str	r2, [r3, #0]
 80166b6:	f3bf 8f4f 	dsb	sy
 80166ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166be:	f002 f929 	bl	8018914 <vPortExitCritical>
				return pdPASS;
 80166c2:	2301      	movs	r3, #1
 80166c4:	e069      	b.n	801679a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d103      	bne.n	80166d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80166cc:	f002 f922 	bl	8018914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80166d0:	2300      	movs	r3, #0
 80166d2:	e062      	b.n	801679a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80166d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80166da:	f107 0310 	add.w	r3, r7, #16
 80166de:	4618      	mov	r0, r3
 80166e0:	f001 f91e 	bl	8017920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80166e4:	2301      	movs	r3, #1
 80166e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80166e8:	f002 f914 	bl	8018914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80166ec:	f000 fe8a 	bl	8017404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80166f0:	f002 f8e0 	bl	80188b4 <vPortEnterCritical>
 80166f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80166fa:	b25b      	sxtb	r3, r3
 80166fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016700:	d103      	bne.n	801670a <xQueueReceive+0x122>
 8016702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016704:	2200      	movs	r2, #0
 8016706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016710:	b25b      	sxtb	r3, r3
 8016712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016716:	d103      	bne.n	8016720 <xQueueReceive+0x138>
 8016718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671a:	2200      	movs	r2, #0
 801671c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016720:	f002 f8f8 	bl	8018914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016724:	1d3a      	adds	r2, r7, #4
 8016726:	f107 0310 	add.w	r3, r7, #16
 801672a:	4611      	mov	r1, r2
 801672c:	4618      	mov	r0, r3
 801672e:	f001 f90d 	bl	801794c <xTaskCheckForTimeOut>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	d123      	bne.n	8016780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801673a:	f000 fade 	bl	8016cfa <prvIsQueueEmpty>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d017      	beq.n	8016774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016746:	3324      	adds	r3, #36	; 0x24
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	4611      	mov	r1, r2
 801674c:	4618      	mov	r0, r3
 801674e:	f001 f833 	bl	80177b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016754:	f000 fa7f 	bl	8016c56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016758:	f000 fe62 	bl	8017420 <xTaskResumeAll>
 801675c:	4603      	mov	r3, r0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d189      	bne.n	8016676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016762:	4b10      	ldr	r3, [pc, #64]	; (80167a4 <xQueueReceive+0x1bc>)
 8016764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016768:	601a      	str	r2, [r3, #0]
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	e780      	b.n	8016676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016776:	f000 fa6e 	bl	8016c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801677a:	f000 fe51 	bl	8017420 <xTaskResumeAll>
 801677e:	e77a      	b.n	8016676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016782:	f000 fa68 	bl	8016c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016786:	f000 fe4b 	bl	8017420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801678a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801678c:	f000 fab5 	bl	8016cfa <prvIsQueueEmpty>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	f43f af6f 	beq.w	8016676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801679a:	4618      	mov	r0, r3
 801679c:	3730      	adds	r7, #48	; 0x30
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	e000ed04 	.word	0xe000ed04

080167a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b08e      	sub	sp, #56	; 0x38
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80167b2:	2300      	movs	r3, #0
 80167b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80167ba:	2300      	movs	r3, #0
 80167bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80167be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d10a      	bne.n	80167da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80167c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c8:	f383 8811 	msr	BASEPRI, r3
 80167cc:	f3bf 8f6f 	isb	sy
 80167d0:	f3bf 8f4f 	dsb	sy
 80167d4:	623b      	str	r3, [r7, #32]
}
 80167d6:	bf00      	nop
 80167d8:	e7fe      	b.n	80167d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80167da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d00a      	beq.n	80167f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80167e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e6:	f383 8811 	msr	BASEPRI, r3
 80167ea:	f3bf 8f6f 	isb	sy
 80167ee:	f3bf 8f4f 	dsb	sy
 80167f2:	61fb      	str	r3, [r7, #28]
}
 80167f4:	bf00      	nop
 80167f6:	e7fe      	b.n	80167f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80167f8:	f001 fa00 	bl	8017bfc <xTaskGetSchedulerState>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d102      	bne.n	8016808 <xQueueSemaphoreTake+0x60>
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d101      	bne.n	801680c <xQueueSemaphoreTake+0x64>
 8016808:	2301      	movs	r3, #1
 801680a:	e000      	b.n	801680e <xQueueSemaphoreTake+0x66>
 801680c:	2300      	movs	r3, #0
 801680e:	2b00      	cmp	r3, #0
 8016810:	d10a      	bne.n	8016828 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016816:	f383 8811 	msr	BASEPRI, r3
 801681a:	f3bf 8f6f 	isb	sy
 801681e:	f3bf 8f4f 	dsb	sy
 8016822:	61bb      	str	r3, [r7, #24]
}
 8016824:	bf00      	nop
 8016826:	e7fe      	b.n	8016826 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016828:	f002 f844 	bl	80188b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016830:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016834:	2b00      	cmp	r3, #0
 8016836:	d024      	beq.n	8016882 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683a:	1e5a      	subs	r2, r3, #1
 801683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d104      	bne.n	8016852 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016848:	f001 fb4e 	bl	8017ee8 <pvTaskIncrementMutexHeldCount>
 801684c:	4602      	mov	r2, r0
 801684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016850:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016854:	691b      	ldr	r3, [r3, #16]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d00f      	beq.n	801687a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685c:	3310      	adds	r3, #16
 801685e:	4618      	mov	r0, r3
 8016860:	f000 fffa 	bl	8017858 <xTaskRemoveFromEventList>
 8016864:	4603      	mov	r3, r0
 8016866:	2b00      	cmp	r3, #0
 8016868:	d007      	beq.n	801687a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801686a:	4b54      	ldr	r3, [pc, #336]	; (80169bc <xQueueSemaphoreTake+0x214>)
 801686c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016870:	601a      	str	r2, [r3, #0]
 8016872:	f3bf 8f4f 	dsb	sy
 8016876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801687a:	f002 f84b 	bl	8018914 <vPortExitCritical>
				return pdPASS;
 801687e:	2301      	movs	r3, #1
 8016880:	e097      	b.n	80169b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d111      	bne.n	80168ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00a      	beq.n	80168a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	617b      	str	r3, [r7, #20]
}
 80168a0:	bf00      	nop
 80168a2:	e7fe      	b.n	80168a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80168a4:	f002 f836 	bl	8018914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80168a8:	2300      	movs	r3, #0
 80168aa:	e082      	b.n	80169b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80168ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d106      	bne.n	80168c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80168b2:	f107 030c 	add.w	r3, r7, #12
 80168b6:	4618      	mov	r0, r3
 80168b8:	f001 f832 	bl	8017920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80168bc:	2301      	movs	r3, #1
 80168be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80168c0:	f002 f828 	bl	8018914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80168c4:	f000 fd9e 	bl	8017404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80168c8:	f001 fff4 	bl	80188b4 <vPortEnterCritical>
 80168cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168d2:	b25b      	sxtb	r3, r3
 80168d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d8:	d103      	bne.n	80168e2 <xQueueSemaphoreTake+0x13a>
 80168da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168dc:	2200      	movs	r2, #0
 80168de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80168e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168e8:	b25b      	sxtb	r3, r3
 80168ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ee:	d103      	bne.n	80168f8 <xQueueSemaphoreTake+0x150>
 80168f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f2:	2200      	movs	r2, #0
 80168f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80168f8:	f002 f80c 	bl	8018914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80168fc:	463a      	mov	r2, r7
 80168fe:	f107 030c 	add.w	r3, r7, #12
 8016902:	4611      	mov	r1, r2
 8016904:	4618      	mov	r0, r3
 8016906:	f001 f821 	bl	801794c <xTaskCheckForTimeOut>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d132      	bne.n	8016976 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016912:	f000 f9f2 	bl	8016cfa <prvIsQueueEmpty>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d026      	beq.n	801696a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d109      	bne.n	8016938 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016924:	f001 ffc6 	bl	80188b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	4618      	mov	r0, r3
 801692e:	f001 f983 	bl	8017c38 <xTaskPriorityInherit>
 8016932:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016934:	f001 ffee 	bl	8018914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801693a:	3324      	adds	r3, #36	; 0x24
 801693c:	683a      	ldr	r2, [r7, #0]
 801693e:	4611      	mov	r1, r2
 8016940:	4618      	mov	r0, r3
 8016942:	f000 ff39 	bl	80177b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016948:	f000 f985 	bl	8016c56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801694c:	f000 fd68 	bl	8017420 <xTaskResumeAll>
 8016950:	4603      	mov	r3, r0
 8016952:	2b00      	cmp	r3, #0
 8016954:	f47f af68 	bne.w	8016828 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016958:	4b18      	ldr	r3, [pc, #96]	; (80169bc <xQueueSemaphoreTake+0x214>)
 801695a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801695e:	601a      	str	r2, [r3, #0]
 8016960:	f3bf 8f4f 	dsb	sy
 8016964:	f3bf 8f6f 	isb	sy
 8016968:	e75e      	b.n	8016828 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801696a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801696c:	f000 f973 	bl	8016c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016970:	f000 fd56 	bl	8017420 <xTaskResumeAll>
 8016974:	e758      	b.n	8016828 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016978:	f000 f96d 	bl	8016c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801697c:	f000 fd50 	bl	8017420 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016982:	f000 f9ba 	bl	8016cfa <prvIsQueueEmpty>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	f43f af4d 	beq.w	8016828 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00d      	beq.n	80169b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016994:	f001 ff8e 	bl	80188b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801699a:	f000 f8b4 	bl	8016b06 <prvGetDisinheritPriorityAfterTimeout>
 801699e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a2:	689b      	ldr	r3, [r3, #8]
 80169a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169a6:	4618      	mov	r0, r3
 80169a8:	f001 fa1c 	bl	8017de4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80169ac:	f001 ffb2 	bl	8018914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3738      	adds	r7, #56	; 0x38
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	e000ed04 	.word	0xe000ed04

080169c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b08e      	sub	sp, #56	; 0x38
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	60b9      	str	r1, [r7, #8]
 80169ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80169d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d10a      	bne.n	80169ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80169d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169da:	f383 8811 	msr	BASEPRI, r3
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	623b      	str	r3, [r7, #32]
}
 80169e8:	bf00      	nop
 80169ea:	e7fe      	b.n	80169ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d103      	bne.n	80169fa <xQueueReceiveFromISR+0x3a>
 80169f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d101      	bne.n	80169fe <xQueueReceiveFromISR+0x3e>
 80169fa:	2301      	movs	r3, #1
 80169fc:	e000      	b.n	8016a00 <xQueueReceiveFromISR+0x40>
 80169fe:	2300      	movs	r3, #0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d10a      	bne.n	8016a1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a08:	f383 8811 	msr	BASEPRI, r3
 8016a0c:	f3bf 8f6f 	isb	sy
 8016a10:	f3bf 8f4f 	dsb	sy
 8016a14:	61fb      	str	r3, [r7, #28]
}
 8016a16:	bf00      	nop
 8016a18:	e7fe      	b.n	8016a18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a1a:	f002 f82d 	bl	8018a78 <vPortValidateInterruptPriority>
	__asm volatile
 8016a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8016a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a26:	f383 8811 	msr	BASEPRI, r3
 8016a2a:	f3bf 8f6f 	isb	sy
 8016a2e:	f3bf 8f4f 	dsb	sy
 8016a32:	61ba      	str	r2, [r7, #24]
 8016a34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016a36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d02f      	beq.n	8016aa6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016a50:	68b9      	ldr	r1, [r7, #8]
 8016a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a54:	f000 f8d9 	bl	8016c0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5a:	1e5a      	subs	r2, r3, #1
 8016a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a68:	d112      	bne.n	8016a90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6c:	691b      	ldr	r3, [r3, #16]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d016      	beq.n	8016aa0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a74:	3310      	adds	r3, #16
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 feee 	bl	8017858 <xTaskRemoveFromEventList>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d00e      	beq.n	8016aa0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d00b      	beq.n	8016aa0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	601a      	str	r2, [r3, #0]
 8016a8e:	e007      	b.n	8016aa0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a94:	3301      	adds	r3, #1
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	b25a      	sxtb	r2, r3
 8016a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8016aa4:	e001      	b.n	8016aaa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8016aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	f383 8811 	msr	BASEPRI, r3
}
 8016ab4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3738      	adds	r7, #56	; 0x38
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d10a      	bne.n	8016ae8 <vQueueDelete+0x28>
	__asm volatile
 8016ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad6:	f383 8811 	msr	BASEPRI, r3
 8016ada:	f3bf 8f6f 	isb	sy
 8016ade:	f3bf 8f4f 	dsb	sy
 8016ae2:	60bb      	str	r3, [r7, #8]
}
 8016ae4:	bf00      	nop
 8016ae6:	e7fe      	b.n	8016ae6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016ae8:	68f8      	ldr	r0, [r7, #12]
 8016aea:	f000 f95f 	bl	8016dac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d102      	bne.n	8016afe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016af8:	68f8      	ldr	r0, [r7, #12]
 8016afa:	f002 f8c9 	bl	8018c90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016afe:	bf00      	nop
 8016b00:	3710      	adds	r7, #16
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}

08016b06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016b06:	b480      	push	{r7}
 8016b08:	b085      	sub	sp, #20
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d006      	beq.n	8016b24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016b20:	60fb      	str	r3, [r7, #12]
 8016b22:	e001      	b.n	8016b28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016b24:	2300      	movs	r3, #0
 8016b26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016b28:	68fb      	ldr	r3, [r7, #12]
	}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3714      	adds	r7, #20
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b34:	4770      	bx	lr

08016b36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016b36:	b580      	push	{r7, lr}
 8016b38:	b086      	sub	sp, #24
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	60f8      	str	r0, [r7, #12]
 8016b3e:	60b9      	str	r1, [r7, #8]
 8016b40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016b42:	2300      	movs	r3, #0
 8016b44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d10d      	bne.n	8016b70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d14d      	bne.n	8016bf8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	689b      	ldr	r3, [r3, #8]
 8016b60:	4618      	mov	r0, r3
 8016b62:	f001 f8d1 	bl	8017d08 <xTaskPriorityDisinherit>
 8016b66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	609a      	str	r2, [r3, #8]
 8016b6e:	e043      	b.n	8016bf8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d119      	bne.n	8016baa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	6858      	ldr	r0, [r3, #4]
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b7e:	461a      	mov	r2, r3
 8016b80:	68b9      	ldr	r1, [r7, #8]
 8016b82:	f003 ffbb 	bl	801aafc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	685a      	ldr	r2, [r3, #4]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b8e:	441a      	add	r2, r3
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	685a      	ldr	r2, [r3, #4]
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	689b      	ldr	r3, [r3, #8]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d32b      	bcc.n	8016bf8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	605a      	str	r2, [r3, #4]
 8016ba8:	e026      	b.n	8016bf8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	68d8      	ldr	r0, [r3, #12]
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	68b9      	ldr	r1, [r7, #8]
 8016bb6:	f003 ffa1 	bl	801aafc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	68da      	ldr	r2, [r3, #12]
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bc2:	425b      	negs	r3, r3
 8016bc4:	441a      	add	r2, r3
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	68da      	ldr	r2, [r3, #12]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d207      	bcs.n	8016be6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	689a      	ldr	r2, [r3, #8]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bde:	425b      	negs	r3, r3
 8016be0:	441a      	add	r2, r3
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	2b02      	cmp	r3, #2
 8016bea:	d105      	bne.n	8016bf8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d002      	beq.n	8016bf8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	1c5a      	adds	r2, r3, #1
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016c00:	697b      	ldr	r3, [r7, #20]
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3718      	adds	r7, #24
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b082      	sub	sp, #8
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
 8016c12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d018      	beq.n	8016c4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	68da      	ldr	r2, [r3, #12]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c24:	441a      	add	r2, r3
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	68da      	ldr	r2, [r3, #12]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	689b      	ldr	r3, [r3, #8]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d303      	bcc.n	8016c3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	68d9      	ldr	r1, [r3, #12]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c46:	461a      	mov	r2, r3
 8016c48:	6838      	ldr	r0, [r7, #0]
 8016c4a:	f003 ff57 	bl	801aafc <memcpy>
	}
}
 8016c4e:	bf00      	nop
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b084      	sub	sp, #16
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016c5e:	f001 fe29 	bl	80188b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c6a:	e011      	b.n	8016c90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d012      	beq.n	8016c9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	3324      	adds	r3, #36	; 0x24
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f000 fded 	bl	8017858 <xTaskRemoveFromEventList>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d001      	beq.n	8016c88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016c84:	f000 fec4 	bl	8017a10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016c88:	7bfb      	ldrb	r3, [r7, #15]
 8016c8a:	3b01      	subs	r3, #1
 8016c8c:	b2db      	uxtb	r3, r3
 8016c8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	dce9      	bgt.n	8016c6c <prvUnlockQueue+0x16>
 8016c98:	e000      	b.n	8016c9c <prvUnlockQueue+0x46>
					break;
 8016c9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	22ff      	movs	r2, #255	; 0xff
 8016ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016ca4:	f001 fe36 	bl	8018914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016ca8:	f001 fe04 	bl	80188b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016cb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016cb4:	e011      	b.n	8016cda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	691b      	ldr	r3, [r3, #16]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d012      	beq.n	8016ce4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	3310      	adds	r3, #16
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fdc8 	bl	8017858 <xTaskRemoveFromEventList>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d001      	beq.n	8016cd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016cce:	f000 fe9f 	bl	8017a10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016cd2:	7bbb      	ldrb	r3, [r7, #14]
 8016cd4:	3b01      	subs	r3, #1
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	dce9      	bgt.n	8016cb6 <prvUnlockQueue+0x60>
 8016ce2:	e000      	b.n	8016ce6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016ce4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	22ff      	movs	r2, #255	; 0xff
 8016cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016cee:	f001 fe11 	bl	8018914 <vPortExitCritical>
}
 8016cf2:	bf00      	nop
 8016cf4:	3710      	adds	r7, #16
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}

08016cfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b084      	sub	sp, #16
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d02:	f001 fdd7 	bl	80188b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d102      	bne.n	8016d14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016d0e:	2301      	movs	r3, #1
 8016d10:	60fb      	str	r3, [r7, #12]
 8016d12:	e001      	b.n	8016d18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016d14:	2300      	movs	r3, #0
 8016d16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d18:	f001 fdfc 	bl	8018914 <vPortExitCritical>

	return xReturn;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3710      	adds	r7, #16
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}

08016d26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016d26:	b580      	push	{r7, lr}
 8016d28:	b084      	sub	sp, #16
 8016d2a:	af00      	add	r7, sp, #0
 8016d2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d2e:	f001 fdc1 	bl	80188b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d102      	bne.n	8016d44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	60fb      	str	r3, [r7, #12]
 8016d42:	e001      	b.n	8016d48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016d44:	2300      	movs	r3, #0
 8016d46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d48:	f001 fde4 	bl	8018914 <vPortExitCritical>

	return xReturn;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
	...

08016d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016d58:	b480      	push	{r7}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016d62:	2300      	movs	r3, #0
 8016d64:	60fb      	str	r3, [r7, #12]
 8016d66:	e014      	b.n	8016d92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016d68:	4a0f      	ldr	r2, [pc, #60]	; (8016da8 <vQueueAddToRegistry+0x50>)
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d10b      	bne.n	8016d8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016d74:	490c      	ldr	r1, [pc, #48]	; (8016da8 <vQueueAddToRegistry+0x50>)
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	683a      	ldr	r2, [r7, #0]
 8016d7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016d7e:	4a0a      	ldr	r2, [pc, #40]	; (8016da8 <vQueueAddToRegistry+0x50>)
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	00db      	lsls	r3, r3, #3
 8016d84:	4413      	add	r3, r2
 8016d86:	687a      	ldr	r2, [r7, #4]
 8016d88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016d8a:	e006      	b.n	8016d9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	3301      	adds	r3, #1
 8016d90:	60fb      	str	r3, [r7, #12]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	2b07      	cmp	r3, #7
 8016d96:	d9e7      	bls.n	8016d68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016d98:	bf00      	nop
 8016d9a:	bf00      	nop
 8016d9c:	3714      	adds	r7, #20
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da4:	4770      	bx	lr
 8016da6:	bf00      	nop
 8016da8:	2000768c 	.word	0x2000768c

08016dac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016dac:	b480      	push	{r7}
 8016dae:	b085      	sub	sp, #20
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016db4:	2300      	movs	r3, #0
 8016db6:	60fb      	str	r3, [r7, #12]
 8016db8:	e016      	b.n	8016de8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016dba:	4a10      	ldr	r2, [pc, #64]	; (8016dfc <vQueueUnregisterQueue+0x50>)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	00db      	lsls	r3, r3, #3
 8016dc0:	4413      	add	r3, r2
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d10b      	bne.n	8016de2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016dca:	4a0c      	ldr	r2, [pc, #48]	; (8016dfc <vQueueUnregisterQueue+0x50>)
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	2100      	movs	r1, #0
 8016dd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016dd4:	4a09      	ldr	r2, [pc, #36]	; (8016dfc <vQueueUnregisterQueue+0x50>)
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	4413      	add	r3, r2
 8016ddc:	2200      	movs	r2, #0
 8016dde:	605a      	str	r2, [r3, #4]
				break;
 8016de0:	e006      	b.n	8016df0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	3301      	adds	r3, #1
 8016de6:	60fb      	str	r3, [r7, #12]
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	2b07      	cmp	r3, #7
 8016dec:	d9e5      	bls.n	8016dba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016dee:	bf00      	nop
 8016df0:	bf00      	nop
 8016df2:	3714      	adds	r7, #20
 8016df4:	46bd      	mov	sp, r7
 8016df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfa:	4770      	bx	lr
 8016dfc:	2000768c 	.word	0x2000768c

08016e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b086      	sub	sp, #24
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016e10:	f001 fd50 	bl	80188b4 <vPortEnterCritical>
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e1a:	b25b      	sxtb	r3, r3
 8016e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e20:	d103      	bne.n	8016e2a <vQueueWaitForMessageRestricted+0x2a>
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	2200      	movs	r2, #0
 8016e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e30:	b25b      	sxtb	r3, r3
 8016e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e36:	d103      	bne.n	8016e40 <vQueueWaitForMessageRestricted+0x40>
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e40:	f001 fd68 	bl	8018914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d106      	bne.n	8016e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	3324      	adds	r3, #36	; 0x24
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	68b9      	ldr	r1, [r7, #8]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f000 fcd3 	bl	8017800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016e5a:	6978      	ldr	r0, [r7, #20]
 8016e5c:	f7ff fefb 	bl	8016c56 <prvUnlockQueue>
	}
 8016e60:	bf00      	nop
 8016e62:	3718      	adds	r7, #24
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b08e      	sub	sp, #56	; 0x38
 8016e6c:	af04      	add	r7, sp, #16
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
 8016e72:	607a      	str	r2, [r7, #4]
 8016e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d10a      	bne.n	8016e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e80:	f383 8811 	msr	BASEPRI, r3
 8016e84:	f3bf 8f6f 	isb	sy
 8016e88:	f3bf 8f4f 	dsb	sy
 8016e8c:	623b      	str	r3, [r7, #32]
}
 8016e8e:	bf00      	nop
 8016e90:	e7fe      	b.n	8016e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d10a      	bne.n	8016eae <xTaskCreateStatic+0x46>
	__asm volatile
 8016e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e9c:	f383 8811 	msr	BASEPRI, r3
 8016ea0:	f3bf 8f6f 	isb	sy
 8016ea4:	f3bf 8f4f 	dsb	sy
 8016ea8:	61fb      	str	r3, [r7, #28]
}
 8016eaa:	bf00      	nop
 8016eac:	e7fe      	b.n	8016eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016eae:	23bc      	movs	r3, #188	; 0xbc
 8016eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	2bbc      	cmp	r3, #188	; 0xbc
 8016eb6:	d00a      	beq.n	8016ece <xTaskCreateStatic+0x66>
	__asm volatile
 8016eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ebc:	f383 8811 	msr	BASEPRI, r3
 8016ec0:	f3bf 8f6f 	isb	sy
 8016ec4:	f3bf 8f4f 	dsb	sy
 8016ec8:	61bb      	str	r3, [r7, #24]
}
 8016eca:	bf00      	nop
 8016ecc:	e7fe      	b.n	8016ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d01e      	beq.n	8016f14 <xTaskCreateStatic+0xac>
 8016ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d01b      	beq.n	8016f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	2202      	movs	r2, #2
 8016eea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016eee:	2300      	movs	r3, #0
 8016ef0:	9303      	str	r3, [sp, #12]
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef4:	9302      	str	r3, [sp, #8]
 8016ef6:	f107 0314 	add.w	r3, r7, #20
 8016efa:	9301      	str	r3, [sp, #4]
 8016efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	683b      	ldr	r3, [r7, #0]
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	68b9      	ldr	r1, [r7, #8]
 8016f06:	68f8      	ldr	r0, [r7, #12]
 8016f08:	f000 f850 	bl	8016fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f0e:	f000 f8f3 	bl	80170f8 <prvAddNewTaskToReadyList>
 8016f12:	e001      	b.n	8016f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016f14:	2300      	movs	r3, #0
 8016f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016f18:	697b      	ldr	r3, [r7, #20]
	}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3728      	adds	r7, #40	; 0x28
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}

08016f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016f22:	b580      	push	{r7, lr}
 8016f24:	b08c      	sub	sp, #48	; 0x30
 8016f26:	af04      	add	r7, sp, #16
 8016f28:	60f8      	str	r0, [r7, #12]
 8016f2a:	60b9      	str	r1, [r7, #8]
 8016f2c:	603b      	str	r3, [r7, #0]
 8016f2e:	4613      	mov	r3, r2
 8016f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016f32:	88fb      	ldrh	r3, [r7, #6]
 8016f34:	009b      	lsls	r3, r3, #2
 8016f36:	4618      	mov	r0, r3
 8016f38:	f001 fdde 	bl	8018af8 <pvPortMalloc>
 8016f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d00e      	beq.n	8016f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016f44:	20bc      	movs	r0, #188	; 0xbc
 8016f46:	f001 fdd7 	bl	8018af8 <pvPortMalloc>
 8016f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d003      	beq.n	8016f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	697a      	ldr	r2, [r7, #20]
 8016f56:	631a      	str	r2, [r3, #48]	; 0x30
 8016f58:	e005      	b.n	8016f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016f5a:	6978      	ldr	r0, [r7, #20]
 8016f5c:	f001 fe98 	bl	8018c90 <vPortFree>
 8016f60:	e001      	b.n	8016f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016f62:	2300      	movs	r3, #0
 8016f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d017      	beq.n	8016f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016f74:	88fa      	ldrh	r2, [r7, #6]
 8016f76:	2300      	movs	r3, #0
 8016f78:	9303      	str	r3, [sp, #12]
 8016f7a:	69fb      	ldr	r3, [r7, #28]
 8016f7c:	9302      	str	r3, [sp, #8]
 8016f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	68b9      	ldr	r1, [r7, #8]
 8016f8a:	68f8      	ldr	r0, [r7, #12]
 8016f8c:	f000 f80e 	bl	8016fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f90:	69f8      	ldr	r0, [r7, #28]
 8016f92:	f000 f8b1 	bl	80170f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016f96:	2301      	movs	r3, #1
 8016f98:	61bb      	str	r3, [r7, #24]
 8016f9a:	e002      	b.n	8016fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3720      	adds	r7, #32
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}

08016fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b088      	sub	sp, #32
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	60b9      	str	r1, [r7, #8]
 8016fb6:	607a      	str	r2, [r7, #4]
 8016fb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	009b      	lsls	r3, r3, #2
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	21a5      	movs	r1, #165	; 0xa5
 8016fc6:	f003 fdc1 	bl	801ab4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016fd4:	3b01      	subs	r3, #1
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	4413      	add	r3, r2
 8016fda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	f023 0307 	bic.w	r3, r3, #7
 8016fe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016fe4:	69bb      	ldr	r3, [r7, #24]
 8016fe6:	f003 0307 	and.w	r3, r3, #7
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d00a      	beq.n	8017004 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff2:	f383 8811 	msr	BASEPRI, r3
 8016ff6:	f3bf 8f6f 	isb	sy
 8016ffa:	f3bf 8f4f 	dsb	sy
 8016ffe:	617b      	str	r3, [r7, #20]
}
 8017000:	bf00      	nop
 8017002:	e7fe      	b.n	8017002 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d01f      	beq.n	801704a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801700a:	2300      	movs	r3, #0
 801700c:	61fb      	str	r3, [r7, #28]
 801700e:	e012      	b.n	8017036 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017010:	68ba      	ldr	r2, [r7, #8]
 8017012:	69fb      	ldr	r3, [r7, #28]
 8017014:	4413      	add	r3, r2
 8017016:	7819      	ldrb	r1, [r3, #0]
 8017018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801701a:	69fb      	ldr	r3, [r7, #28]
 801701c:	4413      	add	r3, r2
 801701e:	3334      	adds	r3, #52	; 0x34
 8017020:	460a      	mov	r2, r1
 8017022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017024:	68ba      	ldr	r2, [r7, #8]
 8017026:	69fb      	ldr	r3, [r7, #28]
 8017028:	4413      	add	r3, r2
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d006      	beq.n	801703e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017030:	69fb      	ldr	r3, [r7, #28]
 8017032:	3301      	adds	r3, #1
 8017034:	61fb      	str	r3, [r7, #28]
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	2b0f      	cmp	r3, #15
 801703a:	d9e9      	bls.n	8017010 <prvInitialiseNewTask+0x64>
 801703c:	e000      	b.n	8017040 <prvInitialiseNewTask+0x94>
			{
				break;
 801703e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017042:	2200      	movs	r2, #0
 8017044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017048:	e003      	b.n	8017052 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801704c:	2200      	movs	r2, #0
 801704e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	2b37      	cmp	r3, #55	; 0x37
 8017056:	d901      	bls.n	801705c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017058:	2337      	movs	r3, #55	; 0x37
 801705a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017060:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017066:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706a:	2200      	movs	r2, #0
 801706c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	3304      	adds	r3, #4
 8017072:	4618      	mov	r0, r3
 8017074:	f7fe fe56 	bl	8015d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707a:	3318      	adds	r3, #24
 801707c:	4618      	mov	r0, r3
 801707e:	f7fe fe51 	bl	8015d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017096:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709a:	2200      	movs	r2, #0
 801709c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80170a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a2:	2200      	movs	r2, #0
 80170a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80170a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170aa:	3354      	adds	r3, #84	; 0x54
 80170ac:	2260      	movs	r2, #96	; 0x60
 80170ae:	2100      	movs	r1, #0
 80170b0:	4618      	mov	r0, r3
 80170b2:	f003 fd4b 	bl	801ab4c <memset>
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	4a0c      	ldr	r2, [pc, #48]	; (80170ec <prvInitialiseNewTask+0x140>)
 80170ba:	659a      	str	r2, [r3, #88]	; 0x58
 80170bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170be:	4a0c      	ldr	r2, [pc, #48]	; (80170f0 <prvInitialiseNewTask+0x144>)
 80170c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80170c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c4:	4a0b      	ldr	r2, [pc, #44]	; (80170f4 <prvInitialiseNewTask+0x148>)
 80170c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	68f9      	ldr	r1, [r7, #12]
 80170cc:	69b8      	ldr	r0, [r7, #24]
 80170ce:	f001 fac1 	bl	8018654 <pxPortInitialiseStack>
 80170d2:	4602      	mov	r2, r0
 80170d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d002      	beq.n	80170e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80170de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80170e4:	bf00      	nop
 80170e6:	3720      	adds	r7, #32
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	08021bfc 	.word	0x08021bfc
 80170f0:	08021c1c 	.word	0x08021c1c
 80170f4:	08021bdc 	.word	0x08021bdc

080170f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017100:	f001 fbd8 	bl	80188b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017104:	4b2d      	ldr	r3, [pc, #180]	; (80171bc <prvAddNewTaskToReadyList+0xc4>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	3301      	adds	r3, #1
 801710a:	4a2c      	ldr	r2, [pc, #176]	; (80171bc <prvAddNewTaskToReadyList+0xc4>)
 801710c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801710e:	4b2c      	ldr	r3, [pc, #176]	; (80171c0 <prvAddNewTaskToReadyList+0xc8>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d109      	bne.n	801712a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017116:	4a2a      	ldr	r2, [pc, #168]	; (80171c0 <prvAddNewTaskToReadyList+0xc8>)
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801711c:	4b27      	ldr	r3, [pc, #156]	; (80171bc <prvAddNewTaskToReadyList+0xc4>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d110      	bne.n	8017146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017124:	f000 fc98 	bl	8017a58 <prvInitialiseTaskLists>
 8017128:	e00d      	b.n	8017146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801712a:	4b26      	ldr	r3, [pc, #152]	; (80171c4 <prvAddNewTaskToReadyList+0xcc>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d109      	bne.n	8017146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017132:	4b23      	ldr	r3, [pc, #140]	; (80171c0 <prvAddNewTaskToReadyList+0xc8>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801713c:	429a      	cmp	r2, r3
 801713e:	d802      	bhi.n	8017146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017140:	4a1f      	ldr	r2, [pc, #124]	; (80171c0 <prvAddNewTaskToReadyList+0xc8>)
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017146:	4b20      	ldr	r3, [pc, #128]	; (80171c8 <prvAddNewTaskToReadyList+0xd0>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	3301      	adds	r3, #1
 801714c:	4a1e      	ldr	r2, [pc, #120]	; (80171c8 <prvAddNewTaskToReadyList+0xd0>)
 801714e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017150:	4b1d      	ldr	r3, [pc, #116]	; (80171c8 <prvAddNewTaskToReadyList+0xd0>)
 8017152:	681a      	ldr	r2, [r3, #0]
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801715c:	4b1b      	ldr	r3, [pc, #108]	; (80171cc <prvAddNewTaskToReadyList+0xd4>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	429a      	cmp	r2, r3
 8017162:	d903      	bls.n	801716c <prvAddNewTaskToReadyList+0x74>
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017168:	4a18      	ldr	r2, [pc, #96]	; (80171cc <prvAddNewTaskToReadyList+0xd4>)
 801716a:	6013      	str	r3, [r2, #0]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017170:	4613      	mov	r3, r2
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	4413      	add	r3, r2
 8017176:	009b      	lsls	r3, r3, #2
 8017178:	4a15      	ldr	r2, [pc, #84]	; (80171d0 <prvAddNewTaskToReadyList+0xd8>)
 801717a:	441a      	add	r2, r3
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	3304      	adds	r3, #4
 8017180:	4619      	mov	r1, r3
 8017182:	4610      	mov	r0, r2
 8017184:	f7fe fddb 	bl	8015d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017188:	f001 fbc4 	bl	8018914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801718c:	4b0d      	ldr	r3, [pc, #52]	; (80171c4 <prvAddNewTaskToReadyList+0xcc>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d00e      	beq.n	80171b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017194:	4b0a      	ldr	r3, [pc, #40]	; (80171c0 <prvAddNewTaskToReadyList+0xc8>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801719e:	429a      	cmp	r2, r3
 80171a0:	d207      	bcs.n	80171b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80171a2:	4b0c      	ldr	r3, [pc, #48]	; (80171d4 <prvAddNewTaskToReadyList+0xdc>)
 80171a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171a8:	601a      	str	r2, [r3, #0]
 80171aa:	f3bf 8f4f 	dsb	sy
 80171ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171b2:	bf00      	nop
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	200014c8 	.word	0x200014c8
 80171c0:	20000ff4 	.word	0x20000ff4
 80171c4:	200014d4 	.word	0x200014d4
 80171c8:	200014e4 	.word	0x200014e4
 80171cc:	200014d0 	.word	0x200014d0
 80171d0:	20000ff8 	.word	0x20000ff8
 80171d4:	e000ed04 	.word	0xe000ed04

080171d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b084      	sub	sp, #16
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80171e0:	f001 fb68 	bl	80188b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d102      	bne.n	80171f0 <vTaskDelete+0x18>
 80171ea:	4b2c      	ldr	r3, [pc, #176]	; (801729c <vTaskDelete+0xc4>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	e000      	b.n	80171f2 <vTaskDelete+0x1a>
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	3304      	adds	r3, #4
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7fe fdfd 	bl	8015df8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017202:	2b00      	cmp	r3, #0
 8017204:	d004      	beq.n	8017210 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	3318      	adds	r3, #24
 801720a:	4618      	mov	r0, r3
 801720c:	f7fe fdf4 	bl	8015df8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017210:	4b23      	ldr	r3, [pc, #140]	; (80172a0 <vTaskDelete+0xc8>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	3301      	adds	r3, #1
 8017216:	4a22      	ldr	r2, [pc, #136]	; (80172a0 <vTaskDelete+0xc8>)
 8017218:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801721a:	4b20      	ldr	r3, [pc, #128]	; (801729c <vTaskDelete+0xc4>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	68fa      	ldr	r2, [r7, #12]
 8017220:	429a      	cmp	r2, r3
 8017222:	d10b      	bne.n	801723c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	3304      	adds	r3, #4
 8017228:	4619      	mov	r1, r3
 801722a:	481e      	ldr	r0, [pc, #120]	; (80172a4 <vTaskDelete+0xcc>)
 801722c:	f7fe fd87 	bl	8015d3e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017230:	4b1d      	ldr	r3, [pc, #116]	; (80172a8 <vTaskDelete+0xd0>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	3301      	adds	r3, #1
 8017236:	4a1c      	ldr	r2, [pc, #112]	; (80172a8 <vTaskDelete+0xd0>)
 8017238:	6013      	str	r3, [r2, #0]
 801723a:	e009      	b.n	8017250 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801723c:	4b1b      	ldr	r3, [pc, #108]	; (80172ac <vTaskDelete+0xd4>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	3b01      	subs	r3, #1
 8017242:	4a1a      	ldr	r2, [pc, #104]	; (80172ac <vTaskDelete+0xd4>)
 8017244:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8017246:	68f8      	ldr	r0, [r7, #12]
 8017248:	f000 fc74 	bl	8017b34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801724c:	f000 fca6 	bl	8017b9c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017250:	f001 fb60 	bl	8018914 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017254:	4b16      	ldr	r3, [pc, #88]	; (80172b0 <vTaskDelete+0xd8>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d01b      	beq.n	8017294 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801725c:	4b0f      	ldr	r3, [pc, #60]	; (801729c <vTaskDelete+0xc4>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	429a      	cmp	r2, r3
 8017264:	d116      	bne.n	8017294 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8017266:	4b13      	ldr	r3, [pc, #76]	; (80172b4 <vTaskDelete+0xdc>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d00a      	beq.n	8017284 <vTaskDelete+0xac>
	__asm volatile
 801726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017272:	f383 8811 	msr	BASEPRI, r3
 8017276:	f3bf 8f6f 	isb	sy
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	60bb      	str	r3, [r7, #8]
}
 8017280:	bf00      	nop
 8017282:	e7fe      	b.n	8017282 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8017284:	4b0c      	ldr	r3, [pc, #48]	; (80172b8 <vTaskDelete+0xe0>)
 8017286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801728a:	601a      	str	r2, [r3, #0]
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017294:	bf00      	nop
 8017296:	3710      	adds	r7, #16
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}
 801729c:	20000ff4 	.word	0x20000ff4
 80172a0:	200014e4 	.word	0x200014e4
 80172a4:	2000149c 	.word	0x2000149c
 80172a8:	200014b0 	.word	0x200014b0
 80172ac:	200014c8 	.word	0x200014c8
 80172b0:	200014d4 	.word	0x200014d4
 80172b4:	200014f0 	.word	0x200014f0
 80172b8:	e000ed04 	.word	0xe000ed04

080172bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80172c4:	2300      	movs	r3, #0
 80172c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d017      	beq.n	80172fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80172ce:	4b13      	ldr	r3, [pc, #76]	; (801731c <vTaskDelay+0x60>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d00a      	beq.n	80172ec <vTaskDelay+0x30>
	__asm volatile
 80172d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172da:	f383 8811 	msr	BASEPRI, r3
 80172de:	f3bf 8f6f 	isb	sy
 80172e2:	f3bf 8f4f 	dsb	sy
 80172e6:	60bb      	str	r3, [r7, #8]
}
 80172e8:	bf00      	nop
 80172ea:	e7fe      	b.n	80172ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80172ec:	f000 f88a 	bl	8017404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80172f0:	2100      	movs	r1, #0
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f000 fe0c 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80172f8:	f000 f892 	bl	8017420 <xTaskResumeAll>
 80172fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d107      	bne.n	8017314 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017304:	4b06      	ldr	r3, [pc, #24]	; (8017320 <vTaskDelay+0x64>)
 8017306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801730a:	601a      	str	r2, [r3, #0]
 801730c:	f3bf 8f4f 	dsb	sy
 8017310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017314:	bf00      	nop
 8017316:	3710      	adds	r7, #16
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}
 801731c:	200014f0 	.word	0x200014f0
 8017320:	e000ed04 	.word	0xe000ed04

08017324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b08a      	sub	sp, #40	; 0x28
 8017328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801732a:	2300      	movs	r3, #0
 801732c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801732e:	2300      	movs	r3, #0
 8017330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017332:	463a      	mov	r2, r7
 8017334:	1d39      	adds	r1, r7, #4
 8017336:	f107 0308 	add.w	r3, r7, #8
 801733a:	4618      	mov	r0, r3
 801733c:	f7fe fc9e 	bl	8015c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017340:	6839      	ldr	r1, [r7, #0]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	9202      	str	r2, [sp, #8]
 8017348:	9301      	str	r3, [sp, #4]
 801734a:	2300      	movs	r3, #0
 801734c:	9300      	str	r3, [sp, #0]
 801734e:	2300      	movs	r3, #0
 8017350:	460a      	mov	r2, r1
 8017352:	4924      	ldr	r1, [pc, #144]	; (80173e4 <vTaskStartScheduler+0xc0>)
 8017354:	4824      	ldr	r0, [pc, #144]	; (80173e8 <vTaskStartScheduler+0xc4>)
 8017356:	f7ff fd87 	bl	8016e68 <xTaskCreateStatic>
 801735a:	4603      	mov	r3, r0
 801735c:	4a23      	ldr	r2, [pc, #140]	; (80173ec <vTaskStartScheduler+0xc8>)
 801735e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017360:	4b22      	ldr	r3, [pc, #136]	; (80173ec <vTaskStartScheduler+0xc8>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d002      	beq.n	801736e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017368:	2301      	movs	r3, #1
 801736a:	617b      	str	r3, [r7, #20]
 801736c:	e001      	b.n	8017372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801736e:	2300      	movs	r3, #0
 8017370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	2b01      	cmp	r3, #1
 8017376:	d102      	bne.n	801737e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017378:	f000 fe1e 	bl	8017fb8 <xTimerCreateTimerTask>
 801737c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801737e:	697b      	ldr	r3, [r7, #20]
 8017380:	2b01      	cmp	r3, #1
 8017382:	d11b      	bne.n	80173bc <vTaskStartScheduler+0x98>
	__asm volatile
 8017384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017388:	f383 8811 	msr	BASEPRI, r3
 801738c:	f3bf 8f6f 	isb	sy
 8017390:	f3bf 8f4f 	dsb	sy
 8017394:	613b      	str	r3, [r7, #16]
}
 8017396:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017398:	4b15      	ldr	r3, [pc, #84]	; (80173f0 <vTaskStartScheduler+0xcc>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	3354      	adds	r3, #84	; 0x54
 801739e:	4a15      	ldr	r2, [pc, #84]	; (80173f4 <vTaskStartScheduler+0xd0>)
 80173a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80173a2:	4b15      	ldr	r3, [pc, #84]	; (80173f8 <vTaskStartScheduler+0xd4>)
 80173a4:	f04f 32ff 	mov.w	r2, #4294967295
 80173a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80173aa:	4b14      	ldr	r3, [pc, #80]	; (80173fc <vTaskStartScheduler+0xd8>)
 80173ac:	2201      	movs	r2, #1
 80173ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80173b0:	4b13      	ldr	r3, [pc, #76]	; (8017400 <vTaskStartScheduler+0xdc>)
 80173b2:	2200      	movs	r2, #0
 80173b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80173b6:	f001 f9db 	bl	8018770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80173ba:	e00e      	b.n	80173da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173c2:	d10a      	bne.n	80173da <vTaskStartScheduler+0xb6>
	__asm volatile
 80173c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173c8:	f383 8811 	msr	BASEPRI, r3
 80173cc:	f3bf 8f6f 	isb	sy
 80173d0:	f3bf 8f4f 	dsb	sy
 80173d4:	60fb      	str	r3, [r7, #12]
}
 80173d6:	bf00      	nop
 80173d8:	e7fe      	b.n	80173d8 <vTaskStartScheduler+0xb4>
}
 80173da:	bf00      	nop
 80173dc:	3718      	adds	r7, #24
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	bf00      	nop
 80173e4:	08021860 	.word	0x08021860
 80173e8:	08017a29 	.word	0x08017a29
 80173ec:	200014ec 	.word	0x200014ec
 80173f0:	20000ff4 	.word	0x20000ff4
 80173f4:	200001f8 	.word	0x200001f8
 80173f8:	200014e8 	.word	0x200014e8
 80173fc:	200014d4 	.word	0x200014d4
 8017400:	200014cc 	.word	0x200014cc

08017404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017404:	b480      	push	{r7}
 8017406:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017408:	4b04      	ldr	r3, [pc, #16]	; (801741c <vTaskSuspendAll+0x18>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	3301      	adds	r3, #1
 801740e:	4a03      	ldr	r2, [pc, #12]	; (801741c <vTaskSuspendAll+0x18>)
 8017410:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017412:	bf00      	nop
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr
 801741c:	200014f0 	.word	0x200014f0

08017420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017426:	2300      	movs	r3, #0
 8017428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801742a:	2300      	movs	r3, #0
 801742c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801742e:	4b42      	ldr	r3, [pc, #264]	; (8017538 <xTaskResumeAll+0x118>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d10a      	bne.n	801744c <xTaskResumeAll+0x2c>
	__asm volatile
 8017436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801743a:	f383 8811 	msr	BASEPRI, r3
 801743e:	f3bf 8f6f 	isb	sy
 8017442:	f3bf 8f4f 	dsb	sy
 8017446:	603b      	str	r3, [r7, #0]
}
 8017448:	bf00      	nop
 801744a:	e7fe      	b.n	801744a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801744c:	f001 fa32 	bl	80188b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017450:	4b39      	ldr	r3, [pc, #228]	; (8017538 <xTaskResumeAll+0x118>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	3b01      	subs	r3, #1
 8017456:	4a38      	ldr	r2, [pc, #224]	; (8017538 <xTaskResumeAll+0x118>)
 8017458:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801745a:	4b37      	ldr	r3, [pc, #220]	; (8017538 <xTaskResumeAll+0x118>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d162      	bne.n	8017528 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017462:	4b36      	ldr	r3, [pc, #216]	; (801753c <xTaskResumeAll+0x11c>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d05e      	beq.n	8017528 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801746a:	e02f      	b.n	80174cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801746c:	4b34      	ldr	r3, [pc, #208]	; (8017540 <xTaskResumeAll+0x120>)
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	68db      	ldr	r3, [r3, #12]
 8017472:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	3318      	adds	r3, #24
 8017478:	4618      	mov	r0, r3
 801747a:	f7fe fcbd 	bl	8015df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	3304      	adds	r3, #4
 8017482:	4618      	mov	r0, r3
 8017484:	f7fe fcb8 	bl	8015df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801748c:	4b2d      	ldr	r3, [pc, #180]	; (8017544 <xTaskResumeAll+0x124>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	429a      	cmp	r2, r3
 8017492:	d903      	bls.n	801749c <xTaskResumeAll+0x7c>
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017498:	4a2a      	ldr	r2, [pc, #168]	; (8017544 <xTaskResumeAll+0x124>)
 801749a:	6013      	str	r3, [r2, #0]
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174a0:	4613      	mov	r3, r2
 80174a2:	009b      	lsls	r3, r3, #2
 80174a4:	4413      	add	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	4a27      	ldr	r2, [pc, #156]	; (8017548 <xTaskResumeAll+0x128>)
 80174aa:	441a      	add	r2, r3
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	3304      	adds	r3, #4
 80174b0:	4619      	mov	r1, r3
 80174b2:	4610      	mov	r0, r2
 80174b4:	f7fe fc43 	bl	8015d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174bc:	4b23      	ldr	r3, [pc, #140]	; (801754c <xTaskResumeAll+0x12c>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d302      	bcc.n	80174cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80174c6:	4b22      	ldr	r3, [pc, #136]	; (8017550 <xTaskResumeAll+0x130>)
 80174c8:	2201      	movs	r2, #1
 80174ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80174cc:	4b1c      	ldr	r3, [pc, #112]	; (8017540 <xTaskResumeAll+0x120>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d1cb      	bne.n	801746c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d001      	beq.n	80174de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80174da:	f000 fb5f 	bl	8017b9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80174de:	4b1d      	ldr	r3, [pc, #116]	; (8017554 <xTaskResumeAll+0x134>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d010      	beq.n	801750c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80174ea:	f000 f847 	bl	801757c <xTaskIncrementTick>
 80174ee:	4603      	mov	r3, r0
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d002      	beq.n	80174fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80174f4:	4b16      	ldr	r3, [pc, #88]	; (8017550 <xTaskResumeAll+0x130>)
 80174f6:	2201      	movs	r2, #1
 80174f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	3b01      	subs	r3, #1
 80174fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d1f1      	bne.n	80174ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017506:	4b13      	ldr	r3, [pc, #76]	; (8017554 <xTaskResumeAll+0x134>)
 8017508:	2200      	movs	r2, #0
 801750a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801750c:	4b10      	ldr	r3, [pc, #64]	; (8017550 <xTaskResumeAll+0x130>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d009      	beq.n	8017528 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017514:	2301      	movs	r3, #1
 8017516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017518:	4b0f      	ldr	r3, [pc, #60]	; (8017558 <xTaskResumeAll+0x138>)
 801751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801751e:	601a      	str	r2, [r3, #0]
 8017520:	f3bf 8f4f 	dsb	sy
 8017524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017528:	f001 f9f4 	bl	8018914 <vPortExitCritical>

	return xAlreadyYielded;
 801752c:	68bb      	ldr	r3, [r7, #8]
}
 801752e:	4618      	mov	r0, r3
 8017530:	3710      	adds	r7, #16
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	200014f0 	.word	0x200014f0
 801753c:	200014c8 	.word	0x200014c8
 8017540:	20001488 	.word	0x20001488
 8017544:	200014d0 	.word	0x200014d0
 8017548:	20000ff8 	.word	0x20000ff8
 801754c:	20000ff4 	.word	0x20000ff4
 8017550:	200014dc 	.word	0x200014dc
 8017554:	200014d8 	.word	0x200014d8
 8017558:	e000ed04 	.word	0xe000ed04

0801755c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017562:	4b05      	ldr	r3, [pc, #20]	; (8017578 <xTaskGetTickCount+0x1c>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017568:	687b      	ldr	r3, [r7, #4]
}
 801756a:	4618      	mov	r0, r3
 801756c:	370c      	adds	r7, #12
 801756e:	46bd      	mov	sp, r7
 8017570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop
 8017578:	200014cc 	.word	0x200014cc

0801757c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b086      	sub	sp, #24
 8017580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017582:	2300      	movs	r3, #0
 8017584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017586:	4b4f      	ldr	r3, [pc, #316]	; (80176c4 <xTaskIncrementTick+0x148>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	f040 808f 	bne.w	80176ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017590:	4b4d      	ldr	r3, [pc, #308]	; (80176c8 <xTaskIncrementTick+0x14c>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	3301      	adds	r3, #1
 8017596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017598:	4a4b      	ldr	r2, [pc, #300]	; (80176c8 <xTaskIncrementTick+0x14c>)
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d120      	bne.n	80175e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80175a4:	4b49      	ldr	r3, [pc, #292]	; (80176cc <xTaskIncrementTick+0x150>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00a      	beq.n	80175c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80175ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b2:	f383 8811 	msr	BASEPRI, r3
 80175b6:	f3bf 8f6f 	isb	sy
 80175ba:	f3bf 8f4f 	dsb	sy
 80175be:	603b      	str	r3, [r7, #0]
}
 80175c0:	bf00      	nop
 80175c2:	e7fe      	b.n	80175c2 <xTaskIncrementTick+0x46>
 80175c4:	4b41      	ldr	r3, [pc, #260]	; (80176cc <xTaskIncrementTick+0x150>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	60fb      	str	r3, [r7, #12]
 80175ca:	4b41      	ldr	r3, [pc, #260]	; (80176d0 <xTaskIncrementTick+0x154>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	4a3f      	ldr	r2, [pc, #252]	; (80176cc <xTaskIncrementTick+0x150>)
 80175d0:	6013      	str	r3, [r2, #0]
 80175d2:	4a3f      	ldr	r2, [pc, #252]	; (80176d0 <xTaskIncrementTick+0x154>)
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	6013      	str	r3, [r2, #0]
 80175d8:	4b3e      	ldr	r3, [pc, #248]	; (80176d4 <xTaskIncrementTick+0x158>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	3301      	adds	r3, #1
 80175de:	4a3d      	ldr	r2, [pc, #244]	; (80176d4 <xTaskIncrementTick+0x158>)
 80175e0:	6013      	str	r3, [r2, #0]
 80175e2:	f000 fadb 	bl	8017b9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80175e6:	4b3c      	ldr	r3, [pc, #240]	; (80176d8 <xTaskIncrementTick+0x15c>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	693a      	ldr	r2, [r7, #16]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d349      	bcc.n	8017684 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80175f0:	4b36      	ldr	r3, [pc, #216]	; (80176cc <xTaskIncrementTick+0x150>)
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d104      	bne.n	8017604 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175fa:	4b37      	ldr	r3, [pc, #220]	; (80176d8 <xTaskIncrementTick+0x15c>)
 80175fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017600:	601a      	str	r2, [r3, #0]
					break;
 8017602:	e03f      	b.n	8017684 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017604:	4b31      	ldr	r3, [pc, #196]	; (80176cc <xTaskIncrementTick+0x150>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	68db      	ldr	r3, [r3, #12]
 801760a:	68db      	ldr	r3, [r3, #12]
 801760c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801760e:	68bb      	ldr	r3, [r7, #8]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017614:	693a      	ldr	r2, [r7, #16]
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	429a      	cmp	r2, r3
 801761a:	d203      	bcs.n	8017624 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801761c:	4a2e      	ldr	r2, [pc, #184]	; (80176d8 <xTaskIncrementTick+0x15c>)
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017622:	e02f      	b.n	8017684 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	3304      	adds	r3, #4
 8017628:	4618      	mov	r0, r3
 801762a:	f7fe fbe5 	bl	8015df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017632:	2b00      	cmp	r3, #0
 8017634:	d004      	beq.n	8017640 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	3318      	adds	r3, #24
 801763a:	4618      	mov	r0, r3
 801763c:	f7fe fbdc 	bl	8015df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017644:	4b25      	ldr	r3, [pc, #148]	; (80176dc <xTaskIncrementTick+0x160>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	429a      	cmp	r2, r3
 801764a:	d903      	bls.n	8017654 <xTaskIncrementTick+0xd8>
 801764c:	68bb      	ldr	r3, [r7, #8]
 801764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017650:	4a22      	ldr	r2, [pc, #136]	; (80176dc <xTaskIncrementTick+0x160>)
 8017652:	6013      	str	r3, [r2, #0]
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017658:	4613      	mov	r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	4413      	add	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4a1f      	ldr	r2, [pc, #124]	; (80176e0 <xTaskIncrementTick+0x164>)
 8017662:	441a      	add	r2, r3
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	3304      	adds	r3, #4
 8017668:	4619      	mov	r1, r3
 801766a:	4610      	mov	r0, r2
 801766c:	f7fe fb67 	bl	8015d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017674:	4b1b      	ldr	r3, [pc, #108]	; (80176e4 <xTaskIncrementTick+0x168>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801767a:	429a      	cmp	r2, r3
 801767c:	d3b8      	bcc.n	80175f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801767e:	2301      	movs	r3, #1
 8017680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017682:	e7b5      	b.n	80175f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017684:	4b17      	ldr	r3, [pc, #92]	; (80176e4 <xTaskIncrementTick+0x168>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801768a:	4915      	ldr	r1, [pc, #84]	; (80176e0 <xTaskIncrementTick+0x164>)
 801768c:	4613      	mov	r3, r2
 801768e:	009b      	lsls	r3, r3, #2
 8017690:	4413      	add	r3, r2
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	440b      	add	r3, r1
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2b01      	cmp	r3, #1
 801769a:	d901      	bls.n	80176a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801769c:	2301      	movs	r3, #1
 801769e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80176a0:	4b11      	ldr	r3, [pc, #68]	; (80176e8 <xTaskIncrementTick+0x16c>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d007      	beq.n	80176b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80176a8:	2301      	movs	r3, #1
 80176aa:	617b      	str	r3, [r7, #20]
 80176ac:	e004      	b.n	80176b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80176ae:	4b0f      	ldr	r3, [pc, #60]	; (80176ec <xTaskIncrementTick+0x170>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	3301      	adds	r3, #1
 80176b4:	4a0d      	ldr	r2, [pc, #52]	; (80176ec <xTaskIncrementTick+0x170>)
 80176b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80176b8:	697b      	ldr	r3, [r7, #20]
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3718      	adds	r7, #24
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	200014f0 	.word	0x200014f0
 80176c8:	200014cc 	.word	0x200014cc
 80176cc:	20001480 	.word	0x20001480
 80176d0:	20001484 	.word	0x20001484
 80176d4:	200014e0 	.word	0x200014e0
 80176d8:	200014e8 	.word	0x200014e8
 80176dc:	200014d0 	.word	0x200014d0
 80176e0:	20000ff8 	.word	0x20000ff8
 80176e4:	20000ff4 	.word	0x20000ff4
 80176e8:	200014dc 	.word	0x200014dc
 80176ec:	200014d8 	.word	0x200014d8

080176f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80176f0:	b480      	push	{r7}
 80176f2:	b085      	sub	sp, #20
 80176f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80176f6:	4b2a      	ldr	r3, [pc, #168]	; (80177a0 <vTaskSwitchContext+0xb0>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d003      	beq.n	8017706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80176fe:	4b29      	ldr	r3, [pc, #164]	; (80177a4 <vTaskSwitchContext+0xb4>)
 8017700:	2201      	movs	r2, #1
 8017702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017704:	e046      	b.n	8017794 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017706:	4b27      	ldr	r3, [pc, #156]	; (80177a4 <vTaskSwitchContext+0xb4>)
 8017708:	2200      	movs	r2, #0
 801770a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801770c:	4b26      	ldr	r3, [pc, #152]	; (80177a8 <vTaskSwitchContext+0xb8>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	60fb      	str	r3, [r7, #12]
 8017712:	e010      	b.n	8017736 <vTaskSwitchContext+0x46>
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d10a      	bne.n	8017730 <vTaskSwitchContext+0x40>
	__asm volatile
 801771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771e:	f383 8811 	msr	BASEPRI, r3
 8017722:	f3bf 8f6f 	isb	sy
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	607b      	str	r3, [r7, #4]
}
 801772c:	bf00      	nop
 801772e:	e7fe      	b.n	801772e <vTaskSwitchContext+0x3e>
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	3b01      	subs	r3, #1
 8017734:	60fb      	str	r3, [r7, #12]
 8017736:	491d      	ldr	r1, [pc, #116]	; (80177ac <vTaskSwitchContext+0xbc>)
 8017738:	68fa      	ldr	r2, [r7, #12]
 801773a:	4613      	mov	r3, r2
 801773c:	009b      	lsls	r3, r3, #2
 801773e:	4413      	add	r3, r2
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	440b      	add	r3, r1
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d0e4      	beq.n	8017714 <vTaskSwitchContext+0x24>
 801774a:	68fa      	ldr	r2, [r7, #12]
 801774c:	4613      	mov	r3, r2
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	4413      	add	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	4a15      	ldr	r2, [pc, #84]	; (80177ac <vTaskSwitchContext+0xbc>)
 8017756:	4413      	add	r3, r2
 8017758:	60bb      	str	r3, [r7, #8]
 801775a:	68bb      	ldr	r3, [r7, #8]
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	685a      	ldr	r2, [r3, #4]
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	605a      	str	r2, [r3, #4]
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	685a      	ldr	r2, [r3, #4]
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	3308      	adds	r3, #8
 801776c:	429a      	cmp	r2, r3
 801776e:	d104      	bne.n	801777a <vTaskSwitchContext+0x8a>
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	685a      	ldr	r2, [r3, #4]
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	605a      	str	r2, [r3, #4]
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	4a0b      	ldr	r2, [pc, #44]	; (80177b0 <vTaskSwitchContext+0xc0>)
 8017782:	6013      	str	r3, [r2, #0]
 8017784:	4a08      	ldr	r2, [pc, #32]	; (80177a8 <vTaskSwitchContext+0xb8>)
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801778a:	4b09      	ldr	r3, [pc, #36]	; (80177b0 <vTaskSwitchContext+0xc0>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	3354      	adds	r3, #84	; 0x54
 8017790:	4a08      	ldr	r2, [pc, #32]	; (80177b4 <vTaskSwitchContext+0xc4>)
 8017792:	6013      	str	r3, [r2, #0]
}
 8017794:	bf00      	nop
 8017796:	3714      	adds	r7, #20
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr
 80177a0:	200014f0 	.word	0x200014f0
 80177a4:	200014dc 	.word	0x200014dc
 80177a8:	200014d0 	.word	0x200014d0
 80177ac:	20000ff8 	.word	0x20000ff8
 80177b0:	20000ff4 	.word	0x20000ff4
 80177b4:	200001f8 	.word	0x200001f8

080177b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d10a      	bne.n	80177de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80177c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177cc:	f383 8811 	msr	BASEPRI, r3
 80177d0:	f3bf 8f6f 	isb	sy
 80177d4:	f3bf 8f4f 	dsb	sy
 80177d8:	60fb      	str	r3, [r7, #12]
}
 80177da:	bf00      	nop
 80177dc:	e7fe      	b.n	80177dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80177de:	4b07      	ldr	r3, [pc, #28]	; (80177fc <vTaskPlaceOnEventList+0x44>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3318      	adds	r3, #24
 80177e4:	4619      	mov	r1, r3
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f7fe facd 	bl	8015d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80177ec:	2101      	movs	r1, #1
 80177ee:	6838      	ldr	r0, [r7, #0]
 80177f0:	f000 fb8e 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
}
 80177f4:	bf00      	nop
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	20000ff4 	.word	0x20000ff4

08017800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017800:	b580      	push	{r7, lr}
 8017802:	b086      	sub	sp, #24
 8017804:	af00      	add	r7, sp, #0
 8017806:	60f8      	str	r0, [r7, #12]
 8017808:	60b9      	str	r1, [r7, #8]
 801780a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d10a      	bne.n	8017828 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017816:	f383 8811 	msr	BASEPRI, r3
 801781a:	f3bf 8f6f 	isb	sy
 801781e:	f3bf 8f4f 	dsb	sy
 8017822:	617b      	str	r3, [r7, #20]
}
 8017824:	bf00      	nop
 8017826:	e7fe      	b.n	8017826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017828:	4b0a      	ldr	r3, [pc, #40]	; (8017854 <vTaskPlaceOnEventListRestricted+0x54>)
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	3318      	adds	r3, #24
 801782e:	4619      	mov	r1, r3
 8017830:	68f8      	ldr	r0, [r7, #12]
 8017832:	f7fe fa84 	bl	8015d3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d002      	beq.n	8017842 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801783c:	f04f 33ff 	mov.w	r3, #4294967295
 8017840:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017842:	6879      	ldr	r1, [r7, #4]
 8017844:	68b8      	ldr	r0, [r7, #8]
 8017846:	f000 fb63 	bl	8017f10 <prvAddCurrentTaskToDelayedList>
	}
 801784a:	bf00      	nop
 801784c:	3718      	adds	r7, #24
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	20000ff4 	.word	0x20000ff4

08017858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b086      	sub	sp, #24
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	68db      	ldr	r3, [r3, #12]
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017868:	693b      	ldr	r3, [r7, #16]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d10a      	bne.n	8017884 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017872:	f383 8811 	msr	BASEPRI, r3
 8017876:	f3bf 8f6f 	isb	sy
 801787a:	f3bf 8f4f 	dsb	sy
 801787e:	60fb      	str	r3, [r7, #12]
}
 8017880:	bf00      	nop
 8017882:	e7fe      	b.n	8017882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	3318      	adds	r3, #24
 8017888:	4618      	mov	r0, r3
 801788a:	f7fe fab5 	bl	8015df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801788e:	4b1e      	ldr	r3, [pc, #120]	; (8017908 <xTaskRemoveFromEventList+0xb0>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d11d      	bne.n	80178d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	3304      	adds	r3, #4
 801789a:	4618      	mov	r0, r3
 801789c:	f7fe faac 	bl	8015df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178a4:	4b19      	ldr	r3, [pc, #100]	; (801790c <xTaskRemoveFromEventList+0xb4>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d903      	bls.n	80178b4 <xTaskRemoveFromEventList+0x5c>
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178b0:	4a16      	ldr	r2, [pc, #88]	; (801790c <xTaskRemoveFromEventList+0xb4>)
 80178b2:	6013      	str	r3, [r2, #0]
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178b8:	4613      	mov	r3, r2
 80178ba:	009b      	lsls	r3, r3, #2
 80178bc:	4413      	add	r3, r2
 80178be:	009b      	lsls	r3, r3, #2
 80178c0:	4a13      	ldr	r2, [pc, #76]	; (8017910 <xTaskRemoveFromEventList+0xb8>)
 80178c2:	441a      	add	r2, r3
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	3304      	adds	r3, #4
 80178c8:	4619      	mov	r1, r3
 80178ca:	4610      	mov	r0, r2
 80178cc:	f7fe fa37 	bl	8015d3e <vListInsertEnd>
 80178d0:	e005      	b.n	80178de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	3318      	adds	r3, #24
 80178d6:	4619      	mov	r1, r3
 80178d8:	480e      	ldr	r0, [pc, #56]	; (8017914 <xTaskRemoveFromEventList+0xbc>)
 80178da:	f7fe fa30 	bl	8015d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e2:	4b0d      	ldr	r3, [pc, #52]	; (8017918 <xTaskRemoveFromEventList+0xc0>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d905      	bls.n	80178f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80178ec:	2301      	movs	r3, #1
 80178ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80178f0:	4b0a      	ldr	r3, [pc, #40]	; (801791c <xTaskRemoveFromEventList+0xc4>)
 80178f2:	2201      	movs	r2, #1
 80178f4:	601a      	str	r2, [r3, #0]
 80178f6:	e001      	b.n	80178fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80178f8:	2300      	movs	r3, #0
 80178fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80178fc:	697b      	ldr	r3, [r7, #20]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3718      	adds	r7, #24
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}
 8017906:	bf00      	nop
 8017908:	200014f0 	.word	0x200014f0
 801790c:	200014d0 	.word	0x200014d0
 8017910:	20000ff8 	.word	0x20000ff8
 8017914:	20001488 	.word	0x20001488
 8017918:	20000ff4 	.word	0x20000ff4
 801791c:	200014dc 	.word	0x200014dc

08017920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017920:	b480      	push	{r7}
 8017922:	b083      	sub	sp, #12
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017928:	4b06      	ldr	r3, [pc, #24]	; (8017944 <vTaskInternalSetTimeOutState+0x24>)
 801792a:	681a      	ldr	r2, [r3, #0]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017930:	4b05      	ldr	r3, [pc, #20]	; (8017948 <vTaskInternalSetTimeOutState+0x28>)
 8017932:	681a      	ldr	r2, [r3, #0]
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	605a      	str	r2, [r3, #4]
}
 8017938:	bf00      	nop
 801793a:	370c      	adds	r7, #12
 801793c:	46bd      	mov	sp, r7
 801793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017942:	4770      	bx	lr
 8017944:	200014e0 	.word	0x200014e0
 8017948:	200014cc 	.word	0x200014cc

0801794c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b088      	sub	sp, #32
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d10a      	bne.n	8017972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017960:	f383 8811 	msr	BASEPRI, r3
 8017964:	f3bf 8f6f 	isb	sy
 8017968:	f3bf 8f4f 	dsb	sy
 801796c:	613b      	str	r3, [r7, #16]
}
 801796e:	bf00      	nop
 8017970:	e7fe      	b.n	8017970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d10a      	bne.n	801798e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801797c:	f383 8811 	msr	BASEPRI, r3
 8017980:	f3bf 8f6f 	isb	sy
 8017984:	f3bf 8f4f 	dsb	sy
 8017988:	60fb      	str	r3, [r7, #12]
}
 801798a:	bf00      	nop
 801798c:	e7fe      	b.n	801798c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801798e:	f000 ff91 	bl	80188b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017992:	4b1d      	ldr	r3, [pc, #116]	; (8017a08 <xTaskCheckForTimeOut+0xbc>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	685b      	ldr	r3, [r3, #4]
 801799c:	69ba      	ldr	r2, [r7, #24]
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179aa:	d102      	bne.n	80179b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80179ac:	2300      	movs	r3, #0
 80179ae:	61fb      	str	r3, [r7, #28]
 80179b0:	e023      	b.n	80179fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	4b15      	ldr	r3, [pc, #84]	; (8017a0c <xTaskCheckForTimeOut+0xc0>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d007      	beq.n	80179ce <xTaskCheckForTimeOut+0x82>
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	69ba      	ldr	r2, [r7, #24]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d302      	bcc.n	80179ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80179c8:	2301      	movs	r3, #1
 80179ca:	61fb      	str	r3, [r7, #28]
 80179cc:	e015      	b.n	80179fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	697a      	ldr	r2, [r7, #20]
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d20b      	bcs.n	80179f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	681a      	ldr	r2, [r3, #0]
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	1ad2      	subs	r2, r2, r3
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f7ff ff9b 	bl	8017920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80179ea:	2300      	movs	r3, #0
 80179ec:	61fb      	str	r3, [r7, #28]
 80179ee:	e004      	b.n	80179fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	2200      	movs	r2, #0
 80179f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80179f6:	2301      	movs	r3, #1
 80179f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80179fa:	f000 ff8b 	bl	8018914 <vPortExitCritical>

	return xReturn;
 80179fe:	69fb      	ldr	r3, [r7, #28]
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3720      	adds	r7, #32
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	200014cc 	.word	0x200014cc
 8017a0c:	200014e0 	.word	0x200014e0

08017a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017a10:	b480      	push	{r7}
 8017a12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017a14:	4b03      	ldr	r3, [pc, #12]	; (8017a24 <vTaskMissedYield+0x14>)
 8017a16:	2201      	movs	r2, #1
 8017a18:	601a      	str	r2, [r3, #0]
}
 8017a1a:	bf00      	nop
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr
 8017a24:	200014dc 	.word	0x200014dc

08017a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017a30:	f000 f852 	bl	8017ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017a34:	4b06      	ldr	r3, [pc, #24]	; (8017a50 <prvIdleTask+0x28>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d9f9      	bls.n	8017a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017a3c:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <prvIdleTask+0x2c>)
 8017a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a42:	601a      	str	r2, [r3, #0]
 8017a44:	f3bf 8f4f 	dsb	sy
 8017a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017a4c:	e7f0      	b.n	8017a30 <prvIdleTask+0x8>
 8017a4e:	bf00      	nop
 8017a50:	20000ff8 	.word	0x20000ff8
 8017a54:	e000ed04 	.word	0xe000ed04

08017a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017a5e:	2300      	movs	r3, #0
 8017a60:	607b      	str	r3, [r7, #4]
 8017a62:	e00c      	b.n	8017a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	4613      	mov	r3, r2
 8017a68:	009b      	lsls	r3, r3, #2
 8017a6a:	4413      	add	r3, r2
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	4a12      	ldr	r2, [pc, #72]	; (8017ab8 <prvInitialiseTaskLists+0x60>)
 8017a70:	4413      	add	r3, r2
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7fe f936 	bl	8015ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	607b      	str	r3, [r7, #4]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2b37      	cmp	r3, #55	; 0x37
 8017a82:	d9ef      	bls.n	8017a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017a84:	480d      	ldr	r0, [pc, #52]	; (8017abc <prvInitialiseTaskLists+0x64>)
 8017a86:	f7fe f92d 	bl	8015ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017a8a:	480d      	ldr	r0, [pc, #52]	; (8017ac0 <prvInitialiseTaskLists+0x68>)
 8017a8c:	f7fe f92a 	bl	8015ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017a90:	480c      	ldr	r0, [pc, #48]	; (8017ac4 <prvInitialiseTaskLists+0x6c>)
 8017a92:	f7fe f927 	bl	8015ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017a96:	480c      	ldr	r0, [pc, #48]	; (8017ac8 <prvInitialiseTaskLists+0x70>)
 8017a98:	f7fe f924 	bl	8015ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017a9c:	480b      	ldr	r0, [pc, #44]	; (8017acc <prvInitialiseTaskLists+0x74>)
 8017a9e:	f7fe f921 	bl	8015ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017aa2:	4b0b      	ldr	r3, [pc, #44]	; (8017ad0 <prvInitialiseTaskLists+0x78>)
 8017aa4:	4a05      	ldr	r2, [pc, #20]	; (8017abc <prvInitialiseTaskLists+0x64>)
 8017aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017aa8:	4b0a      	ldr	r3, [pc, #40]	; (8017ad4 <prvInitialiseTaskLists+0x7c>)
 8017aaa:	4a05      	ldr	r2, [pc, #20]	; (8017ac0 <prvInitialiseTaskLists+0x68>)
 8017aac:	601a      	str	r2, [r3, #0]
}
 8017aae:	bf00      	nop
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	20000ff8 	.word	0x20000ff8
 8017abc:	20001458 	.word	0x20001458
 8017ac0:	2000146c 	.word	0x2000146c
 8017ac4:	20001488 	.word	0x20001488
 8017ac8:	2000149c 	.word	0x2000149c
 8017acc:	200014b4 	.word	0x200014b4
 8017ad0:	20001480 	.word	0x20001480
 8017ad4:	20001484 	.word	0x20001484

08017ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ade:	e019      	b.n	8017b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017ae0:	f000 fee8 	bl	80188b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ae4:	4b10      	ldr	r3, [pc, #64]	; (8017b28 <prvCheckTasksWaitingTermination+0x50>)
 8017ae6:	68db      	ldr	r3, [r3, #12]
 8017ae8:	68db      	ldr	r3, [r3, #12]
 8017aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	3304      	adds	r3, #4
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7fe f981 	bl	8015df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017af6:	4b0d      	ldr	r3, [pc, #52]	; (8017b2c <prvCheckTasksWaitingTermination+0x54>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	3b01      	subs	r3, #1
 8017afc:	4a0b      	ldr	r2, [pc, #44]	; (8017b2c <prvCheckTasksWaitingTermination+0x54>)
 8017afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017b00:	4b0b      	ldr	r3, [pc, #44]	; (8017b30 <prvCheckTasksWaitingTermination+0x58>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	3b01      	subs	r3, #1
 8017b06:	4a0a      	ldr	r2, [pc, #40]	; (8017b30 <prvCheckTasksWaitingTermination+0x58>)
 8017b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017b0a:	f000 ff03 	bl	8018914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f000 f810 	bl	8017b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017b14:	4b06      	ldr	r3, [pc, #24]	; (8017b30 <prvCheckTasksWaitingTermination+0x58>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d1e1      	bne.n	8017ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017b1c:	bf00      	nop
 8017b1e:	bf00      	nop
 8017b20:	3708      	adds	r7, #8
 8017b22:	46bd      	mov	sp, r7
 8017b24:	bd80      	pop	{r7, pc}
 8017b26:	bf00      	nop
 8017b28:	2000149c 	.word	0x2000149c
 8017b2c:	200014c8 	.word	0x200014c8
 8017b30:	200014b0 	.word	0x200014b0

08017b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	3354      	adds	r3, #84	; 0x54
 8017b40:	4618      	mov	r0, r3
 8017b42:	f003 ffcb 	bl	801badc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d108      	bne.n	8017b62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b54:	4618      	mov	r0, r3
 8017b56:	f001 f89b 	bl	8018c90 <vPortFree>
				vPortFree( pxTCB );
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f001 f898 	bl	8018c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017b60:	e018      	b.n	8017b94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d103      	bne.n	8017b74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017b6c:	6878      	ldr	r0, [r7, #4]
 8017b6e:	f001 f88f 	bl	8018c90 <vPortFree>
	}
 8017b72:	e00f      	b.n	8017b94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017b7a:	2b02      	cmp	r3, #2
 8017b7c:	d00a      	beq.n	8017b94 <prvDeleteTCB+0x60>
	__asm volatile
 8017b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b82:	f383 8811 	msr	BASEPRI, r3
 8017b86:	f3bf 8f6f 	isb	sy
 8017b8a:	f3bf 8f4f 	dsb	sy
 8017b8e:	60fb      	str	r3, [r7, #12]
}
 8017b90:	bf00      	nop
 8017b92:	e7fe      	b.n	8017b92 <prvDeleteTCB+0x5e>
	}
 8017b94:	bf00      	nop
 8017b96:	3710      	adds	r7, #16
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	b083      	sub	sp, #12
 8017ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ba2:	4b0c      	ldr	r3, [pc, #48]	; (8017bd4 <prvResetNextTaskUnblockTime+0x38>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d104      	bne.n	8017bb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017bac:	4b0a      	ldr	r3, [pc, #40]	; (8017bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8017bae:	f04f 32ff 	mov.w	r2, #4294967295
 8017bb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017bb4:	e008      	b.n	8017bc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bb6:	4b07      	ldr	r3, [pc, #28]	; (8017bd4 <prvResetNextTaskUnblockTime+0x38>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	4a04      	ldr	r2, [pc, #16]	; (8017bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8017bc6:	6013      	str	r3, [r2, #0]
}
 8017bc8:	bf00      	nop
 8017bca:	370c      	adds	r7, #12
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd2:	4770      	bx	lr
 8017bd4:	20001480 	.word	0x20001480
 8017bd8:	200014e8 	.word	0x200014e8

08017bdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017bdc:	b480      	push	{r7}
 8017bde:	b083      	sub	sp, #12
 8017be0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017be2:	4b05      	ldr	r3, [pc, #20]	; (8017bf8 <xTaskGetCurrentTaskHandle+0x1c>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017be8:	687b      	ldr	r3, [r7, #4]
	}
 8017bea:	4618      	mov	r0, r3
 8017bec:	370c      	adds	r7, #12
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop
 8017bf8:	20000ff4 	.word	0x20000ff4

08017bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017c02:	4b0b      	ldr	r3, [pc, #44]	; (8017c30 <xTaskGetSchedulerState+0x34>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d102      	bne.n	8017c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	607b      	str	r3, [r7, #4]
 8017c0e:	e008      	b.n	8017c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c10:	4b08      	ldr	r3, [pc, #32]	; (8017c34 <xTaskGetSchedulerState+0x38>)
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d102      	bne.n	8017c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017c18:	2302      	movs	r3, #2
 8017c1a:	607b      	str	r3, [r7, #4]
 8017c1c:	e001      	b.n	8017c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017c22:	687b      	ldr	r3, [r7, #4]
	}
 8017c24:	4618      	mov	r0, r3
 8017c26:	370c      	adds	r7, #12
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr
 8017c30:	200014d4 	.word	0x200014d4
 8017c34:	200014f0 	.word	0x200014f0

08017c38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b084      	sub	sp, #16
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017c44:	2300      	movs	r3, #0
 8017c46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d051      	beq.n	8017cf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c52:	4b2a      	ldr	r3, [pc, #168]	; (8017cfc <xTaskPriorityInherit+0xc4>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d241      	bcs.n	8017ce0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	699b      	ldr	r3, [r3, #24]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	db06      	blt.n	8017c72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c64:	4b25      	ldr	r3, [pc, #148]	; (8017cfc <xTaskPriorityInherit+0xc4>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	6959      	ldr	r1, [r3, #20]
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	4413      	add	r3, r2
 8017c80:	009b      	lsls	r3, r3, #2
 8017c82:	4a1f      	ldr	r2, [pc, #124]	; (8017d00 <xTaskPriorityInherit+0xc8>)
 8017c84:	4413      	add	r3, r2
 8017c86:	4299      	cmp	r1, r3
 8017c88:	d122      	bne.n	8017cd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	3304      	adds	r3, #4
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fe f8b2 	bl	8015df8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017c94:	4b19      	ldr	r3, [pc, #100]	; (8017cfc <xTaskPriorityInherit+0xc4>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca2:	4b18      	ldr	r3, [pc, #96]	; (8017d04 <xTaskPriorityInherit+0xcc>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d903      	bls.n	8017cb2 <xTaskPriorityInherit+0x7a>
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cae:	4a15      	ldr	r2, [pc, #84]	; (8017d04 <xTaskPriorityInherit+0xcc>)
 8017cb0:	6013      	str	r3, [r2, #0]
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cb6:	4613      	mov	r3, r2
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	4413      	add	r3, r2
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	4a10      	ldr	r2, [pc, #64]	; (8017d00 <xTaskPriorityInherit+0xc8>)
 8017cc0:	441a      	add	r2, r3
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	3304      	adds	r3, #4
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	4610      	mov	r0, r2
 8017cca:	f7fe f838 	bl	8015d3e <vListInsertEnd>
 8017cce:	e004      	b.n	8017cda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017cd0:	4b0a      	ldr	r3, [pc, #40]	; (8017cfc <xTaskPriorityInherit+0xc4>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017cda:	2301      	movs	r3, #1
 8017cdc:	60fb      	str	r3, [r7, #12]
 8017cde:	e008      	b.n	8017cf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017ce4:	4b05      	ldr	r3, [pc, #20]	; (8017cfc <xTaskPriorityInherit+0xc4>)
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d201      	bcs.n	8017cf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017cee:	2301      	movs	r3, #1
 8017cf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
	}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	3710      	adds	r7, #16
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}
 8017cfc:	20000ff4 	.word	0x20000ff4
 8017d00:	20000ff8 	.word	0x20000ff8
 8017d04:	200014d0 	.word	0x200014d0

08017d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b086      	sub	sp, #24
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017d14:	2300      	movs	r3, #0
 8017d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d056      	beq.n	8017dcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017d1e:	4b2e      	ldr	r3, [pc, #184]	; (8017dd8 <xTaskPriorityDisinherit+0xd0>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	693a      	ldr	r2, [r7, #16]
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d00a      	beq.n	8017d3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d2c:	f383 8811 	msr	BASEPRI, r3
 8017d30:	f3bf 8f6f 	isb	sy
 8017d34:	f3bf 8f4f 	dsb	sy
 8017d38:	60fb      	str	r3, [r7, #12]
}
 8017d3a:	bf00      	nop
 8017d3c:	e7fe      	b.n	8017d3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d10a      	bne.n	8017d5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d4a:	f383 8811 	msr	BASEPRI, r3
 8017d4e:	f3bf 8f6f 	isb	sy
 8017d52:	f3bf 8f4f 	dsb	sy
 8017d56:	60bb      	str	r3, [r7, #8]
}
 8017d58:	bf00      	nop
 8017d5a:	e7fe      	b.n	8017d5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017d5c:	693b      	ldr	r3, [r7, #16]
 8017d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d60:	1e5a      	subs	r2, r3, #1
 8017d62:	693b      	ldr	r3, [r7, #16]
 8017d64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017d66:	693b      	ldr	r3, [r7, #16]
 8017d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d6a:	693b      	ldr	r3, [r7, #16]
 8017d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d02c      	beq.n	8017dcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d128      	bne.n	8017dcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	3304      	adds	r3, #4
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7fe f83a 	bl	8015df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d9c:	4b0f      	ldr	r3, [pc, #60]	; (8017ddc <xTaskPriorityDisinherit+0xd4>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d903      	bls.n	8017dac <xTaskPriorityDisinherit+0xa4>
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da8:	4a0c      	ldr	r2, [pc, #48]	; (8017ddc <xTaskPriorityDisinherit+0xd4>)
 8017daa:	6013      	str	r3, [r2, #0]
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017db0:	4613      	mov	r3, r2
 8017db2:	009b      	lsls	r3, r3, #2
 8017db4:	4413      	add	r3, r2
 8017db6:	009b      	lsls	r3, r3, #2
 8017db8:	4a09      	ldr	r2, [pc, #36]	; (8017de0 <xTaskPriorityDisinherit+0xd8>)
 8017dba:	441a      	add	r2, r3
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	3304      	adds	r3, #4
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	4610      	mov	r0, r2
 8017dc4:	f7fd ffbb 	bl	8015d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017dc8:	2301      	movs	r3, #1
 8017dca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017dcc:	697b      	ldr	r3, [r7, #20]
	}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3718      	adds	r7, #24
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	20000ff4 	.word	0x20000ff4
 8017ddc:	200014d0 	.word	0x200014d0
 8017de0:	20000ff8 	.word	0x20000ff8

08017de4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b088      	sub	sp, #32
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017df2:	2301      	movs	r3, #1
 8017df4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d06a      	beq.n	8017ed2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017dfc:	69bb      	ldr	r3, [r7, #24]
 8017dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d10a      	bne.n	8017e1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e08:	f383 8811 	msr	BASEPRI, r3
 8017e0c:	f3bf 8f6f 	isb	sy
 8017e10:	f3bf 8f4f 	dsb	sy
 8017e14:	60fb      	str	r3, [r7, #12]
}
 8017e16:	bf00      	nop
 8017e18:	e7fe      	b.n	8017e18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e1e:	683a      	ldr	r2, [r7, #0]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d902      	bls.n	8017e2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017e24:	683b      	ldr	r3, [r7, #0]
 8017e26:	61fb      	str	r3, [r7, #28]
 8017e28:	e002      	b.n	8017e30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017e2a:	69bb      	ldr	r3, [r7, #24]
 8017e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e34:	69fa      	ldr	r2, [r7, #28]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d04b      	beq.n	8017ed2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e3e:	697a      	ldr	r2, [r7, #20]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d146      	bne.n	8017ed2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017e44:	4b25      	ldr	r3, [pc, #148]	; (8017edc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	69ba      	ldr	r2, [r7, #24]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d10a      	bne.n	8017e64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e52:	f383 8811 	msr	BASEPRI, r3
 8017e56:	f3bf 8f6f 	isb	sy
 8017e5a:	f3bf 8f4f 	dsb	sy
 8017e5e:	60bb      	str	r3, [r7, #8]
}
 8017e60:	bf00      	nop
 8017e62:	e7fe      	b.n	8017e62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017e64:	69bb      	ldr	r3, [r7, #24]
 8017e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017e6a:	69bb      	ldr	r3, [r7, #24]
 8017e6c:	69fa      	ldr	r2, [r7, #28]
 8017e6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	db04      	blt.n	8017e82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	6959      	ldr	r1, [r3, #20]
 8017e86:	693a      	ldr	r2, [r7, #16]
 8017e88:	4613      	mov	r3, r2
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	4413      	add	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	4a13      	ldr	r2, [pc, #76]	; (8017ee0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017e92:	4413      	add	r3, r2
 8017e94:	4299      	cmp	r1, r3
 8017e96:	d11c      	bne.n	8017ed2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017e98:	69bb      	ldr	r3, [r7, #24]
 8017e9a:	3304      	adds	r3, #4
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7fd ffab 	bl	8015df8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017ea2:	69bb      	ldr	r3, [r7, #24]
 8017ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ea6:	4b0f      	ldr	r3, [pc, #60]	; (8017ee4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d903      	bls.n	8017eb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eb2:	4a0c      	ldr	r2, [pc, #48]	; (8017ee4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017eb4:	6013      	str	r3, [r2, #0]
 8017eb6:	69bb      	ldr	r3, [r7, #24]
 8017eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017eba:	4613      	mov	r3, r2
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	4413      	add	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	4a07      	ldr	r2, [pc, #28]	; (8017ee0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017ec4:	441a      	add	r2, r3
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	3304      	adds	r3, #4
 8017eca:	4619      	mov	r1, r3
 8017ecc:	4610      	mov	r0, r2
 8017ece:	f7fd ff36 	bl	8015d3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017ed2:	bf00      	nop
 8017ed4:	3720      	adds	r7, #32
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}
 8017eda:	bf00      	nop
 8017edc:	20000ff4 	.word	0x20000ff4
 8017ee0:	20000ff8 	.word	0x20000ff8
 8017ee4:	200014d0 	.word	0x200014d0

08017ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017ee8:	b480      	push	{r7}
 8017eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017eec:	4b07      	ldr	r3, [pc, #28]	; (8017f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d004      	beq.n	8017efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017ef4:	4b05      	ldr	r3, [pc, #20]	; (8017f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017efa:	3201      	adds	r2, #1
 8017efc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017efe:	4b03      	ldr	r3, [pc, #12]	; (8017f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8017f00:	681b      	ldr	r3, [r3, #0]
	}
 8017f02:	4618      	mov	r0, r3
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr
 8017f0c:	20000ff4 	.word	0x20000ff4

08017f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b084      	sub	sp, #16
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f1a:	4b21      	ldr	r3, [pc, #132]	; (8017fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f20:	4b20      	ldr	r3, [pc, #128]	; (8017fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	3304      	adds	r3, #4
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7fd ff66 	bl	8015df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f32:	d10a      	bne.n	8017f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d007      	beq.n	8017f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f3a:	4b1a      	ldr	r3, [pc, #104]	; (8017fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	3304      	adds	r3, #4
 8017f40:	4619      	mov	r1, r3
 8017f42:	4819      	ldr	r0, [pc, #100]	; (8017fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017f44:	f7fd fefb 	bl	8015d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017f48:	e026      	b.n	8017f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017f4a:	68fa      	ldr	r2, [r7, #12]
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	4413      	add	r3, r2
 8017f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017f52:	4b14      	ldr	r3, [pc, #80]	; (8017fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	68ba      	ldr	r2, [r7, #8]
 8017f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017f5a:	68ba      	ldr	r2, [r7, #8]
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d209      	bcs.n	8017f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f62:	4b12      	ldr	r3, [pc, #72]	; (8017fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8017f64:	681a      	ldr	r2, [r3, #0]
 8017f66:	4b0f      	ldr	r3, [pc, #60]	; (8017fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	4610      	mov	r0, r2
 8017f70:	f7fd ff09 	bl	8015d86 <vListInsert>
}
 8017f74:	e010      	b.n	8017f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f76:	4b0e      	ldr	r3, [pc, #56]	; (8017fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	4b0a      	ldr	r3, [pc, #40]	; (8017fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	3304      	adds	r3, #4
 8017f80:	4619      	mov	r1, r3
 8017f82:	4610      	mov	r0, r2
 8017f84:	f7fd feff 	bl	8015d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017f88:	4b0a      	ldr	r3, [pc, #40]	; (8017fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	68ba      	ldr	r2, [r7, #8]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d202      	bcs.n	8017f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017f92:	4a08      	ldr	r2, [pc, #32]	; (8017fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	6013      	str	r3, [r2, #0]
}
 8017f98:	bf00      	nop
 8017f9a:	3710      	adds	r7, #16
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}
 8017fa0:	200014cc 	.word	0x200014cc
 8017fa4:	20000ff4 	.word	0x20000ff4
 8017fa8:	200014b4 	.word	0x200014b4
 8017fac:	20001484 	.word	0x20001484
 8017fb0:	20001480 	.word	0x20001480
 8017fb4:	200014e8 	.word	0x200014e8

08017fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b08a      	sub	sp, #40	; 0x28
 8017fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017fc2:	f000 fb07 	bl	80185d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017fc6:	4b1c      	ldr	r3, [pc, #112]	; (8018038 <xTimerCreateTimerTask+0x80>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d021      	beq.n	8018012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017fd6:	1d3a      	adds	r2, r7, #4
 8017fd8:	f107 0108 	add.w	r1, r7, #8
 8017fdc:	f107 030c 	add.w	r3, r7, #12
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7fd fe65 	bl	8015cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017fe6:	6879      	ldr	r1, [r7, #4]
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	68fa      	ldr	r2, [r7, #12]
 8017fec:	9202      	str	r2, [sp, #8]
 8017fee:	9301      	str	r3, [sp, #4]
 8017ff0:	2302      	movs	r3, #2
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	460a      	mov	r2, r1
 8017ff8:	4910      	ldr	r1, [pc, #64]	; (801803c <xTimerCreateTimerTask+0x84>)
 8017ffa:	4811      	ldr	r0, [pc, #68]	; (8018040 <xTimerCreateTimerTask+0x88>)
 8017ffc:	f7fe ff34 	bl	8016e68 <xTaskCreateStatic>
 8018000:	4603      	mov	r3, r0
 8018002:	4a10      	ldr	r2, [pc, #64]	; (8018044 <xTimerCreateTimerTask+0x8c>)
 8018004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018006:	4b0f      	ldr	r3, [pc, #60]	; (8018044 <xTimerCreateTimerTask+0x8c>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d001      	beq.n	8018012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801800e:	2301      	movs	r3, #1
 8018010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d10a      	bne.n	801802e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801801c:	f383 8811 	msr	BASEPRI, r3
 8018020:	f3bf 8f6f 	isb	sy
 8018024:	f3bf 8f4f 	dsb	sy
 8018028:	613b      	str	r3, [r7, #16]
}
 801802a:	bf00      	nop
 801802c:	e7fe      	b.n	801802c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801802e:	697b      	ldr	r3, [r7, #20]
}
 8018030:	4618      	mov	r0, r3
 8018032:	3718      	adds	r7, #24
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	20001524 	.word	0x20001524
 801803c:	08021868 	.word	0x08021868
 8018040:	0801817d 	.word	0x0801817d
 8018044:	20001528 	.word	0x20001528

08018048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b08a      	sub	sp, #40	; 0x28
 801804c:	af00      	add	r7, sp, #0
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	60b9      	str	r1, [r7, #8]
 8018052:	607a      	str	r2, [r7, #4]
 8018054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018056:	2300      	movs	r3, #0
 8018058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d10a      	bne.n	8018076 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018064:	f383 8811 	msr	BASEPRI, r3
 8018068:	f3bf 8f6f 	isb	sy
 801806c:	f3bf 8f4f 	dsb	sy
 8018070:	623b      	str	r3, [r7, #32]
}
 8018072:	bf00      	nop
 8018074:	e7fe      	b.n	8018074 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018076:	4b1a      	ldr	r3, [pc, #104]	; (80180e0 <xTimerGenericCommand+0x98>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d02a      	beq.n	80180d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	2b05      	cmp	r3, #5
 801808e:	dc18      	bgt.n	80180c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018090:	f7ff fdb4 	bl	8017bfc <xTaskGetSchedulerState>
 8018094:	4603      	mov	r3, r0
 8018096:	2b02      	cmp	r3, #2
 8018098:	d109      	bne.n	80180ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801809a:	4b11      	ldr	r3, [pc, #68]	; (80180e0 <xTimerGenericCommand+0x98>)
 801809c:	6818      	ldr	r0, [r3, #0]
 801809e:	f107 0110 	add.w	r1, r7, #16
 80180a2:	2300      	movs	r3, #0
 80180a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180a6:	f7fe f879 	bl	801619c <xQueueGenericSend>
 80180aa:	6278      	str	r0, [r7, #36]	; 0x24
 80180ac:	e012      	b.n	80180d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80180ae:	4b0c      	ldr	r3, [pc, #48]	; (80180e0 <xTimerGenericCommand+0x98>)
 80180b0:	6818      	ldr	r0, [r3, #0]
 80180b2:	f107 0110 	add.w	r1, r7, #16
 80180b6:	2300      	movs	r3, #0
 80180b8:	2200      	movs	r2, #0
 80180ba:	f7fe f86f 	bl	801619c <xQueueGenericSend>
 80180be:	6278      	str	r0, [r7, #36]	; 0x24
 80180c0:	e008      	b.n	80180d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80180c2:	4b07      	ldr	r3, [pc, #28]	; (80180e0 <xTimerGenericCommand+0x98>)
 80180c4:	6818      	ldr	r0, [r3, #0]
 80180c6:	f107 0110 	add.w	r1, r7, #16
 80180ca:	2300      	movs	r3, #0
 80180cc:	683a      	ldr	r2, [r7, #0]
 80180ce:	f7fe f963 	bl	8016398 <xQueueGenericSendFromISR>
 80180d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80180d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3728      	adds	r7, #40	; 0x28
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	20001524 	.word	0x20001524

080180e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b088      	sub	sp, #32
 80180e8:	af02      	add	r7, sp, #8
 80180ea:	6078      	str	r0, [r7, #4]
 80180ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180ee:	4b22      	ldr	r3, [pc, #136]	; (8018178 <prvProcessExpiredTimer+0x94>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	68db      	ldr	r3, [r3, #12]
 80180f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	3304      	adds	r3, #4
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fd fe7b 	bl	8015df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018102:	697b      	ldr	r3, [r7, #20]
 8018104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018108:	f003 0304 	and.w	r3, r3, #4
 801810c:	2b00      	cmp	r3, #0
 801810e:	d022      	beq.n	8018156 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	699a      	ldr	r2, [r3, #24]
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	18d1      	adds	r1, r2, r3
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	683a      	ldr	r2, [r7, #0]
 801811c:	6978      	ldr	r0, [r7, #20]
 801811e:	f000 f8d1 	bl	80182c4 <prvInsertTimerInActiveList>
 8018122:	4603      	mov	r3, r0
 8018124:	2b00      	cmp	r3, #0
 8018126:	d01f      	beq.n	8018168 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018128:	2300      	movs	r3, #0
 801812a:	9300      	str	r3, [sp, #0]
 801812c:	2300      	movs	r3, #0
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	2100      	movs	r1, #0
 8018132:	6978      	ldr	r0, [r7, #20]
 8018134:	f7ff ff88 	bl	8018048 <xTimerGenericCommand>
 8018138:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d113      	bne.n	8018168 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018144:	f383 8811 	msr	BASEPRI, r3
 8018148:	f3bf 8f6f 	isb	sy
 801814c:	f3bf 8f4f 	dsb	sy
 8018150:	60fb      	str	r3, [r7, #12]
}
 8018152:	bf00      	nop
 8018154:	e7fe      	b.n	8018154 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801815c:	f023 0301 	bic.w	r3, r3, #1
 8018160:	b2da      	uxtb	r2, r3
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	6a1b      	ldr	r3, [r3, #32]
 801816c:	6978      	ldr	r0, [r7, #20]
 801816e:	4798      	blx	r3
}
 8018170:	bf00      	nop
 8018172:	3718      	adds	r7, #24
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}
 8018178:	2000151c 	.word	0x2000151c

0801817c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b084      	sub	sp, #16
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018184:	f107 0308 	add.w	r3, r7, #8
 8018188:	4618      	mov	r0, r3
 801818a:	f000 f857 	bl	801823c <prvGetNextExpireTime>
 801818e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	4619      	mov	r1, r3
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f000 f803 	bl	80181a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801819a:	f000 f8d5 	bl	8018348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801819e:	e7f1      	b.n	8018184 <prvTimerTask+0x8>

080181a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b084      	sub	sp, #16
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
 80181a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80181aa:	f7ff f92b 	bl	8017404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80181ae:	f107 0308 	add.w	r3, r7, #8
 80181b2:	4618      	mov	r0, r3
 80181b4:	f000 f866 	bl	8018284 <prvSampleTimeNow>
 80181b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d130      	bne.n	8018222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d10a      	bne.n	80181dc <prvProcessTimerOrBlockTask+0x3c>
 80181c6:	687a      	ldr	r2, [r7, #4]
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d806      	bhi.n	80181dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80181ce:	f7ff f927 	bl	8017420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80181d2:	68f9      	ldr	r1, [r7, #12]
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	f7ff ff85 	bl	80180e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80181da:	e024      	b.n	8018226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d008      	beq.n	80181f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80181e2:	4b13      	ldr	r3, [pc, #76]	; (8018230 <prvProcessTimerOrBlockTask+0x90>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d101      	bne.n	80181f0 <prvProcessTimerOrBlockTask+0x50>
 80181ec:	2301      	movs	r3, #1
 80181ee:	e000      	b.n	80181f2 <prvProcessTimerOrBlockTask+0x52>
 80181f0:	2300      	movs	r3, #0
 80181f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80181f4:	4b0f      	ldr	r3, [pc, #60]	; (8018234 <prvProcessTimerOrBlockTask+0x94>)
 80181f6:	6818      	ldr	r0, [r3, #0]
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	1ad3      	subs	r3, r2, r3
 80181fe:	683a      	ldr	r2, [r7, #0]
 8018200:	4619      	mov	r1, r3
 8018202:	f7fe fdfd 	bl	8016e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018206:	f7ff f90b 	bl	8017420 <xTaskResumeAll>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d10a      	bne.n	8018226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018210:	4b09      	ldr	r3, [pc, #36]	; (8018238 <prvProcessTimerOrBlockTask+0x98>)
 8018212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018216:	601a      	str	r2, [r3, #0]
 8018218:	f3bf 8f4f 	dsb	sy
 801821c:	f3bf 8f6f 	isb	sy
}
 8018220:	e001      	b.n	8018226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018222:	f7ff f8fd 	bl	8017420 <xTaskResumeAll>
}
 8018226:	bf00      	nop
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	20001520 	.word	0x20001520
 8018234:	20001524 	.word	0x20001524
 8018238:	e000ed04 	.word	0xe000ed04

0801823c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801823c:	b480      	push	{r7}
 801823e:	b085      	sub	sp, #20
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018244:	4b0e      	ldr	r3, [pc, #56]	; (8018280 <prvGetNextExpireTime+0x44>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d101      	bne.n	8018252 <prvGetNextExpireTime+0x16>
 801824e:	2201      	movs	r2, #1
 8018250:	e000      	b.n	8018254 <prvGetNextExpireTime+0x18>
 8018252:	2200      	movs	r2, #0
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d105      	bne.n	801826c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018260:	4b07      	ldr	r3, [pc, #28]	; (8018280 <prvGetNextExpireTime+0x44>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	60fb      	str	r3, [r7, #12]
 801826a:	e001      	b.n	8018270 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801826c:	2300      	movs	r3, #0
 801826e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018270:	68fb      	ldr	r3, [r7, #12]
}
 8018272:	4618      	mov	r0, r3
 8018274:	3714      	adds	r7, #20
 8018276:	46bd      	mov	sp, r7
 8018278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827c:	4770      	bx	lr
 801827e:	bf00      	nop
 8018280:	2000151c 	.word	0x2000151c

08018284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b084      	sub	sp, #16
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801828c:	f7ff f966 	bl	801755c <xTaskGetTickCount>
 8018290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018292:	4b0b      	ldr	r3, [pc, #44]	; (80182c0 <prvSampleTimeNow+0x3c>)
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	68fa      	ldr	r2, [r7, #12]
 8018298:	429a      	cmp	r2, r3
 801829a:	d205      	bcs.n	80182a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801829c:	f000 f936 	bl	801850c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2201      	movs	r2, #1
 80182a4:	601a      	str	r2, [r3, #0]
 80182a6:	e002      	b.n	80182ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2200      	movs	r2, #0
 80182ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80182ae:	4a04      	ldr	r2, [pc, #16]	; (80182c0 <prvSampleTimeNow+0x3c>)
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80182b4:	68fb      	ldr	r3, [r7, #12]
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3710      	adds	r7, #16
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	2000152c 	.word	0x2000152c

080182c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b086      	sub	sp, #24
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	60f8      	str	r0, [r7, #12]
 80182cc:	60b9      	str	r1, [r7, #8]
 80182ce:	607a      	str	r2, [r7, #4]
 80182d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80182d2:	2300      	movs	r3, #0
 80182d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	68ba      	ldr	r2, [r7, #8]
 80182da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	68fa      	ldr	r2, [r7, #12]
 80182e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80182e2:	68ba      	ldr	r2, [r7, #8]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d812      	bhi.n	8018310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	1ad2      	subs	r2, r2, r3
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	699b      	ldr	r3, [r3, #24]
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d302      	bcc.n	80182fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80182f8:	2301      	movs	r3, #1
 80182fa:	617b      	str	r3, [r7, #20]
 80182fc:	e01b      	b.n	8018336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80182fe:	4b10      	ldr	r3, [pc, #64]	; (8018340 <prvInsertTimerInActiveList+0x7c>)
 8018300:	681a      	ldr	r2, [r3, #0]
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	3304      	adds	r3, #4
 8018306:	4619      	mov	r1, r3
 8018308:	4610      	mov	r0, r2
 801830a:	f7fd fd3c 	bl	8015d86 <vListInsert>
 801830e:	e012      	b.n	8018336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	429a      	cmp	r2, r3
 8018316:	d206      	bcs.n	8018326 <prvInsertTimerInActiveList+0x62>
 8018318:	68ba      	ldr	r2, [r7, #8]
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	429a      	cmp	r2, r3
 801831e:	d302      	bcc.n	8018326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018320:	2301      	movs	r3, #1
 8018322:	617b      	str	r3, [r7, #20]
 8018324:	e007      	b.n	8018336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018326:	4b07      	ldr	r3, [pc, #28]	; (8018344 <prvInsertTimerInActiveList+0x80>)
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	3304      	adds	r3, #4
 801832e:	4619      	mov	r1, r3
 8018330:	4610      	mov	r0, r2
 8018332:	f7fd fd28 	bl	8015d86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018336:	697b      	ldr	r3, [r7, #20]
}
 8018338:	4618      	mov	r0, r3
 801833a:	3718      	adds	r7, #24
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}
 8018340:	20001520 	.word	0x20001520
 8018344:	2000151c 	.word	0x2000151c

08018348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b08e      	sub	sp, #56	; 0x38
 801834c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801834e:	e0ca      	b.n	80184e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	da18      	bge.n	8018388 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018356:	1d3b      	adds	r3, r7, #4
 8018358:	3304      	adds	r3, #4
 801835a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801835e:	2b00      	cmp	r3, #0
 8018360:	d10a      	bne.n	8018378 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018366:	f383 8811 	msr	BASEPRI, r3
 801836a:	f3bf 8f6f 	isb	sy
 801836e:	f3bf 8f4f 	dsb	sy
 8018372:	61fb      	str	r3, [r7, #28]
}
 8018374:	bf00      	nop
 8018376:	e7fe      	b.n	8018376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801837e:	6850      	ldr	r0, [r2, #4]
 8018380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018382:	6892      	ldr	r2, [r2, #8]
 8018384:	4611      	mov	r1, r2
 8018386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2b00      	cmp	r3, #0
 801838c:	f2c0 80aa 	blt.w	80184e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018396:	695b      	ldr	r3, [r3, #20]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d004      	beq.n	80183a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839e:	3304      	adds	r3, #4
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7fd fd29 	bl	8015df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80183a6:	463b      	mov	r3, r7
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7ff ff6b 	bl	8018284 <prvSampleTimeNow>
 80183ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b09      	cmp	r3, #9
 80183b4:	f200 8097 	bhi.w	80184e6 <prvProcessReceivedCommands+0x19e>
 80183b8:	a201      	add	r2, pc, #4	; (adr r2, 80183c0 <prvProcessReceivedCommands+0x78>)
 80183ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183be:	bf00      	nop
 80183c0:	080183e9 	.word	0x080183e9
 80183c4:	080183e9 	.word	0x080183e9
 80183c8:	080183e9 	.word	0x080183e9
 80183cc:	0801845d 	.word	0x0801845d
 80183d0:	08018471 	.word	0x08018471
 80183d4:	080184bb 	.word	0x080184bb
 80183d8:	080183e9 	.word	0x080183e9
 80183dc:	080183e9 	.word	0x080183e9
 80183e0:	0801845d 	.word	0x0801845d
 80183e4:	08018471 	.word	0x08018471
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80183e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80183ee:	f043 0301 	orr.w	r3, r3, #1
 80183f2:	b2da      	uxtb	r2, r3
 80183f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80183fa:	68ba      	ldr	r2, [r7, #8]
 80183fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fe:	699b      	ldr	r3, [r3, #24]
 8018400:	18d1      	adds	r1, r2, r3
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018408:	f7ff ff5c 	bl	80182c4 <prvInsertTimerInActiveList>
 801840c:	4603      	mov	r3, r0
 801840e:	2b00      	cmp	r3, #0
 8018410:	d069      	beq.n	80184e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018414:	6a1b      	ldr	r3, [r3, #32]
 8018416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801841c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018420:	f003 0304 	and.w	r3, r3, #4
 8018424:	2b00      	cmp	r3, #0
 8018426:	d05e      	beq.n	80184e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018428:	68ba      	ldr	r2, [r7, #8]
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801842c:	699b      	ldr	r3, [r3, #24]
 801842e:	441a      	add	r2, r3
 8018430:	2300      	movs	r3, #0
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	2300      	movs	r3, #0
 8018436:	2100      	movs	r1, #0
 8018438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801843a:	f7ff fe05 	bl	8018048 <xTimerGenericCommand>
 801843e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018440:	6a3b      	ldr	r3, [r7, #32]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d14f      	bne.n	80184e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844a:	f383 8811 	msr	BASEPRI, r3
 801844e:	f3bf 8f6f 	isb	sy
 8018452:	f3bf 8f4f 	dsb	sy
 8018456:	61bb      	str	r3, [r7, #24]
}
 8018458:	bf00      	nop
 801845a:	e7fe      	b.n	801845a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801845e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018462:	f023 0301 	bic.w	r3, r3, #1
 8018466:	b2da      	uxtb	r2, r3
 8018468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801846e:	e03a      	b.n	80184e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018476:	f043 0301 	orr.w	r3, r3, #1
 801847a:	b2da      	uxtb	r2, r3
 801847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018482:	68ba      	ldr	r2, [r7, #8]
 8018484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018486:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848a:	699b      	ldr	r3, [r3, #24]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d10a      	bne.n	80184a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018494:	f383 8811 	msr	BASEPRI, r3
 8018498:	f3bf 8f6f 	isb	sy
 801849c:	f3bf 8f4f 	dsb	sy
 80184a0:	617b      	str	r3, [r7, #20]
}
 80184a2:	bf00      	nop
 80184a4:	e7fe      	b.n	80184a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80184a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a8:	699a      	ldr	r2, [r3, #24]
 80184aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ac:	18d1      	adds	r1, r2, r3
 80184ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184b4:	f7ff ff06 	bl	80182c4 <prvInsertTimerInActiveList>
					break;
 80184b8:	e015      	b.n	80184e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80184ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184c0:	f003 0302 	and.w	r3, r3, #2
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d103      	bne.n	80184d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80184c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184ca:	f000 fbe1 	bl	8018c90 <vPortFree>
 80184ce:	e00a      	b.n	80184e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80184d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184d6:	f023 0301 	bic.w	r3, r3, #1
 80184da:	b2da      	uxtb	r2, r3
 80184dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80184e2:	e000      	b.n	80184e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80184e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80184e6:	4b08      	ldr	r3, [pc, #32]	; (8018508 <prvProcessReceivedCommands+0x1c0>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	1d39      	adds	r1, r7, #4
 80184ec:	2200      	movs	r2, #0
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7fe f87a 	bl	80165e8 <xQueueReceive>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	f47f af2a 	bne.w	8018350 <prvProcessReceivedCommands+0x8>
	}
}
 80184fc:	bf00      	nop
 80184fe:	bf00      	nop
 8018500:	3730      	adds	r7, #48	; 0x30
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	20001524 	.word	0x20001524

0801850c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b088      	sub	sp, #32
 8018510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018512:	e048      	b.n	80185a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018514:	4b2d      	ldr	r3, [pc, #180]	; (80185cc <prvSwitchTimerLists+0xc0>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	68db      	ldr	r3, [r3, #12]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801851e:	4b2b      	ldr	r3, [pc, #172]	; (80185cc <prvSwitchTimerLists+0xc0>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	3304      	adds	r3, #4
 801852c:	4618      	mov	r0, r3
 801852e:	f7fd fc63 	bl	8015df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	6a1b      	ldr	r3, [r3, #32]
 8018536:	68f8      	ldr	r0, [r7, #12]
 8018538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018540:	f003 0304 	and.w	r3, r3, #4
 8018544:	2b00      	cmp	r3, #0
 8018546:	d02e      	beq.n	80185a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	699b      	ldr	r3, [r3, #24]
 801854c:	693a      	ldr	r2, [r7, #16]
 801854e:	4413      	add	r3, r2
 8018550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018552:	68ba      	ldr	r2, [r7, #8]
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	429a      	cmp	r2, r3
 8018558:	d90e      	bls.n	8018578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	68ba      	ldr	r2, [r7, #8]
 801855e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	68fa      	ldr	r2, [r7, #12]
 8018564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018566:	4b19      	ldr	r3, [pc, #100]	; (80185cc <prvSwitchTimerLists+0xc0>)
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	3304      	adds	r3, #4
 801856e:	4619      	mov	r1, r3
 8018570:	4610      	mov	r0, r2
 8018572:	f7fd fc08 	bl	8015d86 <vListInsert>
 8018576:	e016      	b.n	80185a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018578:	2300      	movs	r3, #0
 801857a:	9300      	str	r3, [sp, #0]
 801857c:	2300      	movs	r3, #0
 801857e:	693a      	ldr	r2, [r7, #16]
 8018580:	2100      	movs	r1, #0
 8018582:	68f8      	ldr	r0, [r7, #12]
 8018584:	f7ff fd60 	bl	8018048 <xTimerGenericCommand>
 8018588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d10a      	bne.n	80185a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018594:	f383 8811 	msr	BASEPRI, r3
 8018598:	f3bf 8f6f 	isb	sy
 801859c:	f3bf 8f4f 	dsb	sy
 80185a0:	603b      	str	r3, [r7, #0]
}
 80185a2:	bf00      	nop
 80185a4:	e7fe      	b.n	80185a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80185a6:	4b09      	ldr	r3, [pc, #36]	; (80185cc <prvSwitchTimerLists+0xc0>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d1b1      	bne.n	8018514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80185b0:	4b06      	ldr	r3, [pc, #24]	; (80185cc <prvSwitchTimerLists+0xc0>)
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80185b6:	4b06      	ldr	r3, [pc, #24]	; (80185d0 <prvSwitchTimerLists+0xc4>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	4a04      	ldr	r2, [pc, #16]	; (80185cc <prvSwitchTimerLists+0xc0>)
 80185bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80185be:	4a04      	ldr	r2, [pc, #16]	; (80185d0 <prvSwitchTimerLists+0xc4>)
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	6013      	str	r3, [r2, #0]
}
 80185c4:	bf00      	nop
 80185c6:	3718      	adds	r7, #24
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	2000151c 	.word	0x2000151c
 80185d0:	20001520 	.word	0x20001520

080185d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80185da:	f000 f96b 	bl	80188b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80185de:	4b15      	ldr	r3, [pc, #84]	; (8018634 <prvCheckForValidListAndQueue+0x60>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d120      	bne.n	8018628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80185e6:	4814      	ldr	r0, [pc, #80]	; (8018638 <prvCheckForValidListAndQueue+0x64>)
 80185e8:	f7fd fb7c 	bl	8015ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80185ec:	4813      	ldr	r0, [pc, #76]	; (801863c <prvCheckForValidListAndQueue+0x68>)
 80185ee:	f7fd fb79 	bl	8015ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80185f2:	4b13      	ldr	r3, [pc, #76]	; (8018640 <prvCheckForValidListAndQueue+0x6c>)
 80185f4:	4a10      	ldr	r2, [pc, #64]	; (8018638 <prvCheckForValidListAndQueue+0x64>)
 80185f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80185f8:	4b12      	ldr	r3, [pc, #72]	; (8018644 <prvCheckForValidListAndQueue+0x70>)
 80185fa:	4a10      	ldr	r2, [pc, #64]	; (801863c <prvCheckForValidListAndQueue+0x68>)
 80185fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80185fe:	2300      	movs	r3, #0
 8018600:	9300      	str	r3, [sp, #0]
 8018602:	4b11      	ldr	r3, [pc, #68]	; (8018648 <prvCheckForValidListAndQueue+0x74>)
 8018604:	4a11      	ldr	r2, [pc, #68]	; (801864c <prvCheckForValidListAndQueue+0x78>)
 8018606:	2110      	movs	r1, #16
 8018608:	200a      	movs	r0, #10
 801860a:	f7fd fc87 	bl	8015f1c <xQueueGenericCreateStatic>
 801860e:	4603      	mov	r3, r0
 8018610:	4a08      	ldr	r2, [pc, #32]	; (8018634 <prvCheckForValidListAndQueue+0x60>)
 8018612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018614:	4b07      	ldr	r3, [pc, #28]	; (8018634 <prvCheckForValidListAndQueue+0x60>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d005      	beq.n	8018628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801861c:	4b05      	ldr	r3, [pc, #20]	; (8018634 <prvCheckForValidListAndQueue+0x60>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	490b      	ldr	r1, [pc, #44]	; (8018650 <prvCheckForValidListAndQueue+0x7c>)
 8018622:	4618      	mov	r0, r3
 8018624:	f7fe fb98 	bl	8016d58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018628:	f000 f974 	bl	8018914 <vPortExitCritical>
}
 801862c:	bf00      	nop
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	20001524 	.word	0x20001524
 8018638:	200014f4 	.word	0x200014f4
 801863c:	20001508 	.word	0x20001508
 8018640:	2000151c 	.word	0x2000151c
 8018644:	20001520 	.word	0x20001520
 8018648:	200015d0 	.word	0x200015d0
 801864c:	20001530 	.word	0x20001530
 8018650:	08021870 	.word	0x08021870

08018654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018654:	b480      	push	{r7}
 8018656:	b085      	sub	sp, #20
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	60b9      	str	r1, [r7, #8]
 801865e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	3b04      	subs	r3, #4
 8018664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801866c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	3b04      	subs	r3, #4
 8018672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	f023 0201 	bic.w	r2, r3, #1
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	3b04      	subs	r3, #4
 8018682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018684:	4a0c      	ldr	r2, [pc, #48]	; (80186b8 <pxPortInitialiseStack+0x64>)
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	3b14      	subs	r3, #20
 801868e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018690:	687a      	ldr	r2, [r7, #4]
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	3b04      	subs	r3, #4
 801869a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	f06f 0202 	mvn.w	r2, #2
 80186a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	3b20      	subs	r3, #32
 80186a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80186aa:	68fb      	ldr	r3, [r7, #12]
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	3714      	adds	r7, #20
 80186b0:	46bd      	mov	sp, r7
 80186b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b6:	4770      	bx	lr
 80186b8:	080186bd 	.word	0x080186bd

080186bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80186bc:	b480      	push	{r7}
 80186be:	b085      	sub	sp, #20
 80186c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80186c2:	2300      	movs	r3, #0
 80186c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80186c6:	4b12      	ldr	r3, [pc, #72]	; (8018710 <prvTaskExitError+0x54>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186ce:	d00a      	beq.n	80186e6 <prvTaskExitError+0x2a>
	__asm volatile
 80186d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d4:	f383 8811 	msr	BASEPRI, r3
 80186d8:	f3bf 8f6f 	isb	sy
 80186dc:	f3bf 8f4f 	dsb	sy
 80186e0:	60fb      	str	r3, [r7, #12]
}
 80186e2:	bf00      	nop
 80186e4:	e7fe      	b.n	80186e4 <prvTaskExitError+0x28>
	__asm volatile
 80186e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ea:	f383 8811 	msr	BASEPRI, r3
 80186ee:	f3bf 8f6f 	isb	sy
 80186f2:	f3bf 8f4f 	dsb	sy
 80186f6:	60bb      	str	r3, [r7, #8]
}
 80186f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80186fa:	bf00      	nop
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d0fc      	beq.n	80186fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018702:	bf00      	nop
 8018704:	bf00      	nop
 8018706:	3714      	adds	r7, #20
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr
 8018710:	20000188 	.word	0x20000188
	...

08018720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018720:	4b07      	ldr	r3, [pc, #28]	; (8018740 <pxCurrentTCBConst2>)
 8018722:	6819      	ldr	r1, [r3, #0]
 8018724:	6808      	ldr	r0, [r1, #0]
 8018726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801872a:	f380 8809 	msr	PSP, r0
 801872e:	f3bf 8f6f 	isb	sy
 8018732:	f04f 0000 	mov.w	r0, #0
 8018736:	f380 8811 	msr	BASEPRI, r0
 801873a:	4770      	bx	lr
 801873c:	f3af 8000 	nop.w

08018740 <pxCurrentTCBConst2>:
 8018740:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018744:	bf00      	nop
 8018746:	bf00      	nop

08018748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018748:	4808      	ldr	r0, [pc, #32]	; (801876c <prvPortStartFirstTask+0x24>)
 801874a:	6800      	ldr	r0, [r0, #0]
 801874c:	6800      	ldr	r0, [r0, #0]
 801874e:	f380 8808 	msr	MSP, r0
 8018752:	f04f 0000 	mov.w	r0, #0
 8018756:	f380 8814 	msr	CONTROL, r0
 801875a:	b662      	cpsie	i
 801875c:	b661      	cpsie	f
 801875e:	f3bf 8f4f 	dsb	sy
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	df00      	svc	0
 8018768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801876a:	bf00      	nop
 801876c:	e000ed08 	.word	0xe000ed08

08018770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b086      	sub	sp, #24
 8018774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018776:	4b46      	ldr	r3, [pc, #280]	; (8018890 <xPortStartScheduler+0x120>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	4a46      	ldr	r2, [pc, #280]	; (8018894 <xPortStartScheduler+0x124>)
 801877c:	4293      	cmp	r3, r2
 801877e:	d10a      	bne.n	8018796 <xPortStartScheduler+0x26>
	__asm volatile
 8018780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018784:	f383 8811 	msr	BASEPRI, r3
 8018788:	f3bf 8f6f 	isb	sy
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	613b      	str	r3, [r7, #16]
}
 8018792:	bf00      	nop
 8018794:	e7fe      	b.n	8018794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018796:	4b3e      	ldr	r3, [pc, #248]	; (8018890 <xPortStartScheduler+0x120>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	4a3f      	ldr	r2, [pc, #252]	; (8018898 <xPortStartScheduler+0x128>)
 801879c:	4293      	cmp	r3, r2
 801879e:	d10a      	bne.n	80187b6 <xPortStartScheduler+0x46>
	__asm volatile
 80187a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a4:	f383 8811 	msr	BASEPRI, r3
 80187a8:	f3bf 8f6f 	isb	sy
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	60fb      	str	r3, [r7, #12]
}
 80187b2:	bf00      	nop
 80187b4:	e7fe      	b.n	80187b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80187b6:	4b39      	ldr	r3, [pc, #228]	; (801889c <xPortStartScheduler+0x12c>)
 80187b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80187c2:	697b      	ldr	r3, [r7, #20]
 80187c4:	22ff      	movs	r2, #255	; 0xff
 80187c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	781b      	ldrb	r3, [r3, #0]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80187d0:	78fb      	ldrb	r3, [r7, #3]
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80187d8:	b2da      	uxtb	r2, r3
 80187da:	4b31      	ldr	r3, [pc, #196]	; (80188a0 <xPortStartScheduler+0x130>)
 80187dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80187de:	4b31      	ldr	r3, [pc, #196]	; (80188a4 <xPortStartScheduler+0x134>)
 80187e0:	2207      	movs	r2, #7
 80187e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187e4:	e009      	b.n	80187fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80187e6:	4b2f      	ldr	r3, [pc, #188]	; (80188a4 <xPortStartScheduler+0x134>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	3b01      	subs	r3, #1
 80187ec:	4a2d      	ldr	r2, [pc, #180]	; (80188a4 <xPortStartScheduler+0x134>)
 80187ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80187f0:	78fb      	ldrb	r3, [r7, #3]
 80187f2:	b2db      	uxtb	r3, r3
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187fa:	78fb      	ldrb	r3, [r7, #3]
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018802:	2b80      	cmp	r3, #128	; 0x80
 8018804:	d0ef      	beq.n	80187e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018806:	4b27      	ldr	r3, [pc, #156]	; (80188a4 <xPortStartScheduler+0x134>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f1c3 0307 	rsb	r3, r3, #7
 801880e:	2b04      	cmp	r3, #4
 8018810:	d00a      	beq.n	8018828 <xPortStartScheduler+0xb8>
	__asm volatile
 8018812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018816:	f383 8811 	msr	BASEPRI, r3
 801881a:	f3bf 8f6f 	isb	sy
 801881e:	f3bf 8f4f 	dsb	sy
 8018822:	60bb      	str	r3, [r7, #8]
}
 8018824:	bf00      	nop
 8018826:	e7fe      	b.n	8018826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018828:	4b1e      	ldr	r3, [pc, #120]	; (80188a4 <xPortStartScheduler+0x134>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	021b      	lsls	r3, r3, #8
 801882e:	4a1d      	ldr	r2, [pc, #116]	; (80188a4 <xPortStartScheduler+0x134>)
 8018830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018832:	4b1c      	ldr	r3, [pc, #112]	; (80188a4 <xPortStartScheduler+0x134>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801883a:	4a1a      	ldr	r2, [pc, #104]	; (80188a4 <xPortStartScheduler+0x134>)
 801883c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	b2da      	uxtb	r2, r3
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018846:	4b18      	ldr	r3, [pc, #96]	; (80188a8 <xPortStartScheduler+0x138>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4a17      	ldr	r2, [pc, #92]	; (80188a8 <xPortStartScheduler+0x138>)
 801884c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018852:	4b15      	ldr	r3, [pc, #84]	; (80188a8 <xPortStartScheduler+0x138>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a14      	ldr	r2, [pc, #80]	; (80188a8 <xPortStartScheduler+0x138>)
 8018858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801885c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801885e:	f000 f8dd 	bl	8018a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018862:	4b12      	ldr	r3, [pc, #72]	; (80188ac <xPortStartScheduler+0x13c>)
 8018864:	2200      	movs	r2, #0
 8018866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018868:	f000 f8fc 	bl	8018a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801886c:	4b10      	ldr	r3, [pc, #64]	; (80188b0 <xPortStartScheduler+0x140>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a0f      	ldr	r2, [pc, #60]	; (80188b0 <xPortStartScheduler+0x140>)
 8018872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018878:	f7ff ff66 	bl	8018748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801887c:	f7fe ff38 	bl	80176f0 <vTaskSwitchContext>
	prvTaskExitError();
 8018880:	f7ff ff1c 	bl	80186bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018884:	2300      	movs	r3, #0
}
 8018886:	4618      	mov	r0, r3
 8018888:	3718      	adds	r7, #24
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	e000ed00 	.word	0xe000ed00
 8018894:	410fc271 	.word	0x410fc271
 8018898:	410fc270 	.word	0x410fc270
 801889c:	e000e400 	.word	0xe000e400
 80188a0:	20001620 	.word	0x20001620
 80188a4:	20001624 	.word	0x20001624
 80188a8:	e000ed20 	.word	0xe000ed20
 80188ac:	20000188 	.word	0x20000188
 80188b0:	e000ef34 	.word	0xe000ef34

080188b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80188b4:	b480      	push	{r7}
 80188b6:	b083      	sub	sp, #12
 80188b8:	af00      	add	r7, sp, #0
	__asm volatile
 80188ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188be:	f383 8811 	msr	BASEPRI, r3
 80188c2:	f3bf 8f6f 	isb	sy
 80188c6:	f3bf 8f4f 	dsb	sy
 80188ca:	607b      	str	r3, [r7, #4]
}
 80188cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80188ce:	4b0f      	ldr	r3, [pc, #60]	; (801890c <vPortEnterCritical+0x58>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	3301      	adds	r3, #1
 80188d4:	4a0d      	ldr	r2, [pc, #52]	; (801890c <vPortEnterCritical+0x58>)
 80188d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80188d8:	4b0c      	ldr	r3, [pc, #48]	; (801890c <vPortEnterCritical+0x58>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d10f      	bne.n	8018900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80188e0:	4b0b      	ldr	r3, [pc, #44]	; (8018910 <vPortEnterCritical+0x5c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d00a      	beq.n	8018900 <vPortEnterCritical+0x4c>
	__asm volatile
 80188ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ee:	f383 8811 	msr	BASEPRI, r3
 80188f2:	f3bf 8f6f 	isb	sy
 80188f6:	f3bf 8f4f 	dsb	sy
 80188fa:	603b      	str	r3, [r7, #0]
}
 80188fc:	bf00      	nop
 80188fe:	e7fe      	b.n	80188fe <vPortEnterCritical+0x4a>
	}
}
 8018900:	bf00      	nop
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr
 801890c:	20000188 	.word	0x20000188
 8018910:	e000ed04 	.word	0xe000ed04

08018914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018914:	b480      	push	{r7}
 8018916:	b083      	sub	sp, #12
 8018918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801891a:	4b12      	ldr	r3, [pc, #72]	; (8018964 <vPortExitCritical+0x50>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d10a      	bne.n	8018938 <vPortExitCritical+0x24>
	__asm volatile
 8018922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018926:	f383 8811 	msr	BASEPRI, r3
 801892a:	f3bf 8f6f 	isb	sy
 801892e:	f3bf 8f4f 	dsb	sy
 8018932:	607b      	str	r3, [r7, #4]
}
 8018934:	bf00      	nop
 8018936:	e7fe      	b.n	8018936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018938:	4b0a      	ldr	r3, [pc, #40]	; (8018964 <vPortExitCritical+0x50>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	3b01      	subs	r3, #1
 801893e:	4a09      	ldr	r2, [pc, #36]	; (8018964 <vPortExitCritical+0x50>)
 8018940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018942:	4b08      	ldr	r3, [pc, #32]	; (8018964 <vPortExitCritical+0x50>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d105      	bne.n	8018956 <vPortExitCritical+0x42>
 801894a:	2300      	movs	r3, #0
 801894c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	f383 8811 	msr	BASEPRI, r3
}
 8018954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018956:	bf00      	nop
 8018958:	370c      	adds	r7, #12
 801895a:	46bd      	mov	sp, r7
 801895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018960:	4770      	bx	lr
 8018962:	bf00      	nop
 8018964:	20000188 	.word	0x20000188
	...

08018970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018970:	f3ef 8009 	mrs	r0, PSP
 8018974:	f3bf 8f6f 	isb	sy
 8018978:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <pxCurrentTCBConst>)
 801897a:	681a      	ldr	r2, [r3, #0]
 801897c:	f01e 0f10 	tst.w	lr, #16
 8018980:	bf08      	it	eq
 8018982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898a:	6010      	str	r0, [r2, #0]
 801898c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018994:	f380 8811 	msr	BASEPRI, r0
 8018998:	f3bf 8f4f 	dsb	sy
 801899c:	f3bf 8f6f 	isb	sy
 80189a0:	f7fe fea6 	bl	80176f0 <vTaskSwitchContext>
 80189a4:	f04f 0000 	mov.w	r0, #0
 80189a8:	f380 8811 	msr	BASEPRI, r0
 80189ac:	bc09      	pop	{r0, r3}
 80189ae:	6819      	ldr	r1, [r3, #0]
 80189b0:	6808      	ldr	r0, [r1, #0]
 80189b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b6:	f01e 0f10 	tst.w	lr, #16
 80189ba:	bf08      	it	eq
 80189bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80189c0:	f380 8809 	msr	PSP, r0
 80189c4:	f3bf 8f6f 	isb	sy
 80189c8:	4770      	bx	lr
 80189ca:	bf00      	nop
 80189cc:	f3af 8000 	nop.w

080189d0 <pxCurrentTCBConst>:
 80189d0:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80189d4:	bf00      	nop
 80189d6:	bf00      	nop

080189d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
	__asm volatile
 80189de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e2:	f383 8811 	msr	BASEPRI, r3
 80189e6:	f3bf 8f6f 	isb	sy
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	607b      	str	r3, [r7, #4]
}
 80189f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80189f2:	f7fe fdc3 	bl	801757c <xTaskIncrementTick>
 80189f6:	4603      	mov	r3, r0
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d003      	beq.n	8018a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80189fc:	4b06      	ldr	r3, [pc, #24]	; (8018a18 <xPortSysTickHandler+0x40>)
 80189fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a02:	601a      	str	r2, [r3, #0]
 8018a04:	2300      	movs	r3, #0
 8018a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	f383 8811 	msr	BASEPRI, r3
}
 8018a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018a10:	bf00      	nop
 8018a12:	3708      	adds	r7, #8
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	e000ed04 	.word	0xe000ed04

08018a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018a20:	4b0b      	ldr	r3, [pc, #44]	; (8018a50 <vPortSetupTimerInterrupt+0x34>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018a26:	4b0b      	ldr	r3, [pc, #44]	; (8018a54 <vPortSetupTimerInterrupt+0x38>)
 8018a28:	2200      	movs	r2, #0
 8018a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018a2c:	4b0a      	ldr	r3, [pc, #40]	; (8018a58 <vPortSetupTimerInterrupt+0x3c>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	4a0a      	ldr	r2, [pc, #40]	; (8018a5c <vPortSetupTimerInterrupt+0x40>)
 8018a32:	fba2 2303 	umull	r2, r3, r2, r3
 8018a36:	099b      	lsrs	r3, r3, #6
 8018a38:	4a09      	ldr	r2, [pc, #36]	; (8018a60 <vPortSetupTimerInterrupt+0x44>)
 8018a3a:	3b01      	subs	r3, #1
 8018a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018a3e:	4b04      	ldr	r3, [pc, #16]	; (8018a50 <vPortSetupTimerInterrupt+0x34>)
 8018a40:	2207      	movs	r2, #7
 8018a42:	601a      	str	r2, [r3, #0]
}
 8018a44:	bf00      	nop
 8018a46:	46bd      	mov	sp, r7
 8018a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4c:	4770      	bx	lr
 8018a4e:	bf00      	nop
 8018a50:	e000e010 	.word	0xe000e010
 8018a54:	e000e018 	.word	0xe000e018
 8018a58:	20000000 	.word	0x20000000
 8018a5c:	10624dd3 	.word	0x10624dd3
 8018a60:	e000e014 	.word	0xe000e014

08018a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a74 <vPortEnableVFP+0x10>
 8018a68:	6801      	ldr	r1, [r0, #0]
 8018a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a6e:	6001      	str	r1, [r0, #0]
 8018a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a72:	bf00      	nop
 8018a74:	e000ed88 	.word	0xe000ed88

08018a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018a78:	b480      	push	{r7}
 8018a7a:	b085      	sub	sp, #20
 8018a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018a7e:	f3ef 8305 	mrs	r3, IPSR
 8018a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2b0f      	cmp	r3, #15
 8018a88:	d914      	bls.n	8018ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018a8a:	4a17      	ldr	r2, [pc, #92]	; (8018ae8 <vPortValidateInterruptPriority+0x70>)
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	4413      	add	r3, r2
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018a94:	4b15      	ldr	r3, [pc, #84]	; (8018aec <vPortValidateInterruptPriority+0x74>)
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	7afa      	ldrb	r2, [r7, #11]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d20a      	bcs.n	8018ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa2:	f383 8811 	msr	BASEPRI, r3
 8018aa6:	f3bf 8f6f 	isb	sy
 8018aaa:	f3bf 8f4f 	dsb	sy
 8018aae:	607b      	str	r3, [r7, #4]
}
 8018ab0:	bf00      	nop
 8018ab2:	e7fe      	b.n	8018ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018ab4:	4b0e      	ldr	r3, [pc, #56]	; (8018af0 <vPortValidateInterruptPriority+0x78>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018abc:	4b0d      	ldr	r3, [pc, #52]	; (8018af4 <vPortValidateInterruptPriority+0x7c>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d90a      	bls.n	8018ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	603b      	str	r3, [r7, #0]
}
 8018ad6:	bf00      	nop
 8018ad8:	e7fe      	b.n	8018ad8 <vPortValidateInterruptPriority+0x60>
	}
 8018ada:	bf00      	nop
 8018adc:	3714      	adds	r7, #20
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop
 8018ae8:	e000e3f0 	.word	0xe000e3f0
 8018aec:	20001620 	.word	0x20001620
 8018af0:	e000ed0c 	.word	0xe000ed0c
 8018af4:	20001624 	.word	0x20001624

08018af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b08a      	sub	sp, #40	; 0x28
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018b00:	2300      	movs	r3, #0
 8018b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018b04:	f7fe fc7e 	bl	8017404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018b08:	4b5b      	ldr	r3, [pc, #364]	; (8018c78 <pvPortMalloc+0x180>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d101      	bne.n	8018b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018b10:	f000 f920 	bl	8018d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018b14:	4b59      	ldr	r3, [pc, #356]	; (8018c7c <pvPortMalloc+0x184>)
 8018b16:	681a      	ldr	r2, [r3, #0]
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	4013      	ands	r3, r2
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f040 8093 	bne.w	8018c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d01d      	beq.n	8018b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018b28:	2208      	movs	r2, #8
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	4413      	add	r3, r2
 8018b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f003 0307 	and.w	r3, r3, #7
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d014      	beq.n	8018b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f023 0307 	bic.w	r3, r3, #7
 8018b40:	3308      	adds	r3, #8
 8018b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f003 0307 	and.w	r3, r3, #7
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d00a      	beq.n	8018b64 <pvPortMalloc+0x6c>
	__asm volatile
 8018b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b52:	f383 8811 	msr	BASEPRI, r3
 8018b56:	f3bf 8f6f 	isb	sy
 8018b5a:	f3bf 8f4f 	dsb	sy
 8018b5e:	617b      	str	r3, [r7, #20]
}
 8018b60:	bf00      	nop
 8018b62:	e7fe      	b.n	8018b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d06e      	beq.n	8018c48 <pvPortMalloc+0x150>
 8018b6a:	4b45      	ldr	r3, [pc, #276]	; (8018c80 <pvPortMalloc+0x188>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d869      	bhi.n	8018c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018b74:	4b43      	ldr	r3, [pc, #268]	; (8018c84 <pvPortMalloc+0x18c>)
 8018b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018b78:	4b42      	ldr	r3, [pc, #264]	; (8018c84 <pvPortMalloc+0x18c>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b7e:	e004      	b.n	8018b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d903      	bls.n	8018b9c <pvPortMalloc+0xa4>
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d1f1      	bne.n	8018b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018b9c:	4b36      	ldr	r3, [pc, #216]	; (8018c78 <pvPortMalloc+0x180>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d050      	beq.n	8018c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018ba6:	6a3b      	ldr	r3, [r7, #32]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	2208      	movs	r2, #8
 8018bac:	4413      	add	r3, r2
 8018bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	6a3b      	ldr	r3, [r7, #32]
 8018bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bba:	685a      	ldr	r2, [r3, #4]
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	1ad2      	subs	r2, r2, r3
 8018bc0:	2308      	movs	r3, #8
 8018bc2:	005b      	lsls	r3, r3, #1
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d91f      	bls.n	8018c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4413      	add	r3, r2
 8018bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018bd0:	69bb      	ldr	r3, [r7, #24]
 8018bd2:	f003 0307 	and.w	r3, r3, #7
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00a      	beq.n	8018bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8018bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bde:	f383 8811 	msr	BASEPRI, r3
 8018be2:	f3bf 8f6f 	isb	sy
 8018be6:	f3bf 8f4f 	dsb	sy
 8018bea:	613b      	str	r3, [r7, #16]
}
 8018bec:	bf00      	nop
 8018bee:	e7fe      	b.n	8018bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf2:	685a      	ldr	r2, [r3, #4]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	1ad2      	subs	r2, r2, r3
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfe:	687a      	ldr	r2, [r7, #4]
 8018c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018c02:	69b8      	ldr	r0, [r7, #24]
 8018c04:	f000 f908 	bl	8018e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018c08:	4b1d      	ldr	r3, [pc, #116]	; (8018c80 <pvPortMalloc+0x188>)
 8018c0a:	681a      	ldr	r2, [r3, #0]
 8018c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c0e:	685b      	ldr	r3, [r3, #4]
 8018c10:	1ad3      	subs	r3, r2, r3
 8018c12:	4a1b      	ldr	r2, [pc, #108]	; (8018c80 <pvPortMalloc+0x188>)
 8018c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018c16:	4b1a      	ldr	r3, [pc, #104]	; (8018c80 <pvPortMalloc+0x188>)
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	4b1b      	ldr	r3, [pc, #108]	; (8018c88 <pvPortMalloc+0x190>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d203      	bcs.n	8018c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018c22:	4b17      	ldr	r3, [pc, #92]	; (8018c80 <pvPortMalloc+0x188>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	4a18      	ldr	r2, [pc, #96]	; (8018c88 <pvPortMalloc+0x190>)
 8018c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2c:	685a      	ldr	r2, [r3, #4]
 8018c2e:	4b13      	ldr	r3, [pc, #76]	; (8018c7c <pvPortMalloc+0x184>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	431a      	orrs	r2, r3
 8018c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018c3e:	4b13      	ldr	r3, [pc, #76]	; (8018c8c <pvPortMalloc+0x194>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	3301      	adds	r3, #1
 8018c44:	4a11      	ldr	r2, [pc, #68]	; (8018c8c <pvPortMalloc+0x194>)
 8018c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018c48:	f7fe fbea 	bl	8017420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018c4c:	69fb      	ldr	r3, [r7, #28]
 8018c4e:	f003 0307 	and.w	r3, r3, #7
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d00a      	beq.n	8018c6c <pvPortMalloc+0x174>
	__asm volatile
 8018c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c5a:	f383 8811 	msr	BASEPRI, r3
 8018c5e:	f3bf 8f6f 	isb	sy
 8018c62:	f3bf 8f4f 	dsb	sy
 8018c66:	60fb      	str	r3, [r7, #12]
}
 8018c68:	bf00      	nop
 8018c6a:	e7fe      	b.n	8018c6a <pvPortMalloc+0x172>
	return pvReturn;
 8018c6c:	69fb      	ldr	r3, [r7, #28]
}
 8018c6e:	4618      	mov	r0, r3
 8018c70:	3728      	adds	r7, #40	; 0x28
 8018c72:	46bd      	mov	sp, r7
 8018c74:	bd80      	pop	{r7, pc}
 8018c76:	bf00      	nop
 8018c78:	20005c80 	.word	0x20005c80
 8018c7c:	20005c94 	.word	0x20005c94
 8018c80:	20005c84 	.word	0x20005c84
 8018c84:	20005c78 	.word	0x20005c78
 8018c88:	20005c88 	.word	0x20005c88
 8018c8c:	20005c8c 	.word	0x20005c8c

08018c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b086      	sub	sp, #24
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d04d      	beq.n	8018d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018ca2:	2308      	movs	r3, #8
 8018ca4:	425b      	negs	r3, r3
 8018ca6:	697a      	ldr	r2, [r7, #20]
 8018ca8:	4413      	add	r3, r2
 8018caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018cb0:	693b      	ldr	r3, [r7, #16]
 8018cb2:	685a      	ldr	r2, [r3, #4]
 8018cb4:	4b24      	ldr	r3, [pc, #144]	; (8018d48 <vPortFree+0xb8>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4013      	ands	r3, r2
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d10a      	bne.n	8018cd4 <vPortFree+0x44>
	__asm volatile
 8018cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cc2:	f383 8811 	msr	BASEPRI, r3
 8018cc6:	f3bf 8f6f 	isb	sy
 8018cca:	f3bf 8f4f 	dsb	sy
 8018cce:	60fb      	str	r3, [r7, #12]
}
 8018cd0:	bf00      	nop
 8018cd2:	e7fe      	b.n	8018cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d00a      	beq.n	8018cf2 <vPortFree+0x62>
	__asm volatile
 8018cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce0:	f383 8811 	msr	BASEPRI, r3
 8018ce4:	f3bf 8f6f 	isb	sy
 8018ce8:	f3bf 8f4f 	dsb	sy
 8018cec:	60bb      	str	r3, [r7, #8]
}
 8018cee:	bf00      	nop
 8018cf0:	e7fe      	b.n	8018cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018cf2:	693b      	ldr	r3, [r7, #16]
 8018cf4:	685a      	ldr	r2, [r3, #4]
 8018cf6:	4b14      	ldr	r3, [pc, #80]	; (8018d48 <vPortFree+0xb8>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4013      	ands	r3, r2
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d01e      	beq.n	8018d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d11a      	bne.n	8018d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	685a      	ldr	r2, [r3, #4]
 8018d0c:	4b0e      	ldr	r3, [pc, #56]	; (8018d48 <vPortFree+0xb8>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	43db      	mvns	r3, r3
 8018d12:	401a      	ands	r2, r3
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018d18:	f7fe fb74 	bl	8017404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	685a      	ldr	r2, [r3, #4]
 8018d20:	4b0a      	ldr	r3, [pc, #40]	; (8018d4c <vPortFree+0xbc>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	4413      	add	r3, r2
 8018d26:	4a09      	ldr	r2, [pc, #36]	; (8018d4c <vPortFree+0xbc>)
 8018d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018d2a:	6938      	ldr	r0, [r7, #16]
 8018d2c:	f000 f874 	bl	8018e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018d30:	4b07      	ldr	r3, [pc, #28]	; (8018d50 <vPortFree+0xc0>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	3301      	adds	r3, #1
 8018d36:	4a06      	ldr	r2, [pc, #24]	; (8018d50 <vPortFree+0xc0>)
 8018d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018d3a:	f7fe fb71 	bl	8017420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018d3e:	bf00      	nop
 8018d40:	3718      	adds	r7, #24
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	20005c94 	.word	0x20005c94
 8018d4c:	20005c84 	.word	0x20005c84
 8018d50:	20005c90 	.word	0x20005c90

08018d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018d54:	b480      	push	{r7}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018d5a:	f244 6350 	movw	r3, #18000	; 0x4650
 8018d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018d60:	4b27      	ldr	r3, [pc, #156]	; (8018e00 <prvHeapInit+0xac>)
 8018d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	f003 0307 	and.w	r3, r3, #7
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d00c      	beq.n	8018d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	3307      	adds	r3, #7
 8018d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f023 0307 	bic.w	r3, r3, #7
 8018d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018d7c:	68ba      	ldr	r2, [r7, #8]
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	1ad3      	subs	r3, r2, r3
 8018d82:	4a1f      	ldr	r2, [pc, #124]	; (8018e00 <prvHeapInit+0xac>)
 8018d84:	4413      	add	r3, r2
 8018d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018d8c:	4a1d      	ldr	r2, [pc, #116]	; (8018e04 <prvHeapInit+0xb0>)
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018d92:	4b1c      	ldr	r3, [pc, #112]	; (8018e04 <prvHeapInit+0xb0>)
 8018d94:	2200      	movs	r2, #0
 8018d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018da0:	2208      	movs	r2, #8
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	1a9b      	subs	r3, r3, r2
 8018da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	f023 0307 	bic.w	r3, r3, #7
 8018dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	4a15      	ldr	r2, [pc, #84]	; (8018e08 <prvHeapInit+0xb4>)
 8018db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018db6:	4b14      	ldr	r3, [pc, #80]	; (8018e08 <prvHeapInit+0xb4>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018dbe:	4b12      	ldr	r3, [pc, #72]	; (8018e08 <prvHeapInit+0xb4>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	68fa      	ldr	r2, [r7, #12]
 8018dce:	1ad2      	subs	r2, r2, r3
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018dd4:	4b0c      	ldr	r3, [pc, #48]	; (8018e08 <prvHeapInit+0xb4>)
 8018dd6:	681a      	ldr	r2, [r3, #0]
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	4a0a      	ldr	r2, [pc, #40]	; (8018e0c <prvHeapInit+0xb8>)
 8018de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	685b      	ldr	r3, [r3, #4]
 8018de8:	4a09      	ldr	r2, [pc, #36]	; (8018e10 <prvHeapInit+0xbc>)
 8018dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018dec:	4b09      	ldr	r3, [pc, #36]	; (8018e14 <prvHeapInit+0xc0>)
 8018dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018df2:	601a      	str	r2, [r3, #0]
}
 8018df4:	bf00      	nop
 8018df6:	3714      	adds	r7, #20
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfe:	4770      	bx	lr
 8018e00:	20001628 	.word	0x20001628
 8018e04:	20005c78 	.word	0x20005c78
 8018e08:	20005c80 	.word	0x20005c80
 8018e0c:	20005c88 	.word	0x20005c88
 8018e10:	20005c84 	.word	0x20005c84
 8018e14:	20005c94 	.word	0x20005c94

08018e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b085      	sub	sp, #20
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018e20:	4b28      	ldr	r3, [pc, #160]	; (8018ec4 <prvInsertBlockIntoFreeList+0xac>)
 8018e22:	60fb      	str	r3, [r7, #12]
 8018e24:	e002      	b.n	8018e2c <prvInsertBlockIntoFreeList+0x14>
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	60fb      	str	r3, [r7, #12]
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d8f7      	bhi.n	8018e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	685b      	ldr	r3, [r3, #4]
 8018e3e:	68ba      	ldr	r2, [r7, #8]
 8018e40:	4413      	add	r3, r2
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	429a      	cmp	r2, r3
 8018e46:	d108      	bne.n	8018e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	685a      	ldr	r2, [r3, #4]
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	441a      	add	r2, r3
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	68ba      	ldr	r2, [r7, #8]
 8018e64:	441a      	add	r2, r3
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d118      	bne.n	8018ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	681a      	ldr	r2, [r3, #0]
 8018e72:	4b15      	ldr	r3, [pc, #84]	; (8018ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d00d      	beq.n	8018e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	685a      	ldr	r2, [r3, #4]
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	685b      	ldr	r3, [r3, #4]
 8018e84:	441a      	add	r2, r3
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	681a      	ldr	r2, [r3, #0]
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	601a      	str	r2, [r3, #0]
 8018e94:	e008      	b.n	8018ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018e96:	4b0c      	ldr	r3, [pc, #48]	; (8018ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8018e98:	681a      	ldr	r2, [r3, #0]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	601a      	str	r2, [r3, #0]
 8018e9e:	e003      	b.n	8018ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018ea8:	68fa      	ldr	r2, [r7, #12]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d002      	beq.n	8018eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018eb6:	bf00      	nop
 8018eb8:	3714      	adds	r7, #20
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop
 8018ec4:	20005c78 	.word	0x20005c78
 8018ec8:	20005c80 	.word	0x20005c80

08018ecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	4912      	ldr	r1, [pc, #72]	; (8018f1c <MX_USB_DEVICE_Init+0x50>)
 8018ed4:	4812      	ldr	r0, [pc, #72]	; (8018f20 <MX_USB_DEVICE_Init+0x54>)
 8018ed6:	f7f8 fc2f 	bl	8011738 <USBD_Init>
 8018eda:	4603      	mov	r3, r0
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d001      	beq.n	8018ee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018ee0:	f7e9 fd4e 	bl	8002980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018ee4:	490f      	ldr	r1, [pc, #60]	; (8018f24 <MX_USB_DEVICE_Init+0x58>)
 8018ee6:	480e      	ldr	r0, [pc, #56]	; (8018f20 <MX_USB_DEVICE_Init+0x54>)
 8018ee8:	f7f8 fc56 	bl	8011798 <USBD_RegisterClass>
 8018eec:	4603      	mov	r3, r0
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d001      	beq.n	8018ef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018ef2:	f7e9 fd45 	bl	8002980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018ef6:	490c      	ldr	r1, [pc, #48]	; (8018f28 <MX_USB_DEVICE_Init+0x5c>)
 8018ef8:	4809      	ldr	r0, [pc, #36]	; (8018f20 <MX_USB_DEVICE_Init+0x54>)
 8018efa:	f7f8 fba7 	bl	801164c <USBD_CDC_RegisterInterface>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d001      	beq.n	8018f08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018f04:	f7e9 fd3c 	bl	8002980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018f08:	4805      	ldr	r0, [pc, #20]	; (8018f20 <MX_USB_DEVICE_Init+0x54>)
 8018f0a:	f7f8 fc6c 	bl	80117e6 <USBD_Start>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d001      	beq.n	8018f18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018f14:	f7e9 fd34 	bl	8002980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018f18:	bf00      	nop
 8018f1a:	bd80      	pop	{r7, pc}
 8018f1c:	200001a0 	.word	0x200001a0
 8018f20:	200076cc 	.word	0x200076cc
 8018f24:	20000084 	.word	0x20000084
 8018f28:	2000018c 	.word	0x2000018c

08018f2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018f30:	2200      	movs	r2, #0
 8018f32:	4905      	ldr	r1, [pc, #20]	; (8018f48 <CDC_Init_FS+0x1c>)
 8018f34:	4805      	ldr	r0, [pc, #20]	; (8018f4c <CDC_Init_FS+0x20>)
 8018f36:	f7f8 fb9e 	bl	8011676 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018f3a:	4905      	ldr	r1, [pc, #20]	; (8018f50 <CDC_Init_FS+0x24>)
 8018f3c:	4803      	ldr	r0, [pc, #12]	; (8018f4c <CDC_Init_FS+0x20>)
 8018f3e:	f7f8 fbb8 	bl	80116b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018f42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	bd80      	pop	{r7, pc}
 8018f48:	2000819c 	.word	0x2000819c
 8018f4c:	200076cc 	.word	0x200076cc
 8018f50:	2000799c 	.word	0x2000799c

08018f54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018f54:	b480      	push	{r7}
 8018f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018f58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f62:	4770      	bx	lr

08018f64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018f64:	b480      	push	{r7}
 8018f66:	b083      	sub	sp, #12
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	6039      	str	r1, [r7, #0]
 8018f6e:	71fb      	strb	r3, [r7, #7]
 8018f70:	4613      	mov	r3, r2
 8018f72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018f74:	79fb      	ldrb	r3, [r7, #7]
 8018f76:	2b23      	cmp	r3, #35	; 0x23
 8018f78:	d84a      	bhi.n	8019010 <CDC_Control_FS+0xac>
 8018f7a:	a201      	add	r2, pc, #4	; (adr r2, 8018f80 <CDC_Control_FS+0x1c>)
 8018f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f80:	08019011 	.word	0x08019011
 8018f84:	08019011 	.word	0x08019011
 8018f88:	08019011 	.word	0x08019011
 8018f8c:	08019011 	.word	0x08019011
 8018f90:	08019011 	.word	0x08019011
 8018f94:	08019011 	.word	0x08019011
 8018f98:	08019011 	.word	0x08019011
 8018f9c:	08019011 	.word	0x08019011
 8018fa0:	08019011 	.word	0x08019011
 8018fa4:	08019011 	.word	0x08019011
 8018fa8:	08019011 	.word	0x08019011
 8018fac:	08019011 	.word	0x08019011
 8018fb0:	08019011 	.word	0x08019011
 8018fb4:	08019011 	.word	0x08019011
 8018fb8:	08019011 	.word	0x08019011
 8018fbc:	08019011 	.word	0x08019011
 8018fc0:	08019011 	.word	0x08019011
 8018fc4:	08019011 	.word	0x08019011
 8018fc8:	08019011 	.word	0x08019011
 8018fcc:	08019011 	.word	0x08019011
 8018fd0:	08019011 	.word	0x08019011
 8018fd4:	08019011 	.word	0x08019011
 8018fd8:	08019011 	.word	0x08019011
 8018fdc:	08019011 	.word	0x08019011
 8018fe0:	08019011 	.word	0x08019011
 8018fe4:	08019011 	.word	0x08019011
 8018fe8:	08019011 	.word	0x08019011
 8018fec:	08019011 	.word	0x08019011
 8018ff0:	08019011 	.word	0x08019011
 8018ff4:	08019011 	.word	0x08019011
 8018ff8:	08019011 	.word	0x08019011
 8018ffc:	08019011 	.word	0x08019011
 8019000:	08019011 	.word	0x08019011
 8019004:	08019011 	.word	0x08019011
 8019008:	08019011 	.word	0x08019011
 801900c:	08019011 	.word	0x08019011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019010:	bf00      	nop
  }

  return (USBD_OK);
 8019012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019014:	4618      	mov	r0, r3
 8019016:	370c      	adds	r7, #12
 8019018:	46bd      	mov	sp, r7
 801901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901e:	4770      	bx	lr

08019020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
 8019028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801902a:	6879      	ldr	r1, [r7, #4]
 801902c:	4805      	ldr	r0, [pc, #20]	; (8019044 <CDC_Receive_FS+0x24>)
 801902e:	f7f8 fb40 	bl	80116b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019032:	4804      	ldr	r0, [pc, #16]	; (8019044 <CDC_Receive_FS+0x24>)
 8019034:	f7f8 fb56 	bl	80116e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801903a:	4618      	mov	r0, r3
 801903c:	3708      	adds	r7, #8
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	200076cc 	.word	0x200076cc

08019048 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019048:	b480      	push	{r7}
 801904a:	b087      	sub	sp, #28
 801904c:	af00      	add	r7, sp, #0
 801904e:	60f8      	str	r0, [r7, #12]
 8019050:	60b9      	str	r1, [r7, #8]
 8019052:	4613      	mov	r3, r2
 8019054:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019056:	2300      	movs	r3, #0
 8019058:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801905a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801905e:	4618      	mov	r0, r3
 8019060:	371c      	adds	r7, #28
 8019062:	46bd      	mov	sp, r7
 8019064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019068:	4770      	bx	lr
	...

0801906c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	4603      	mov	r3, r0
 8019074:	6039      	str	r1, [r7, #0]
 8019076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	2212      	movs	r2, #18
 801907c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801907e:	4b03      	ldr	r3, [pc, #12]	; (801908c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019080:	4618      	mov	r0, r3
 8019082:	370c      	adds	r7, #12
 8019084:	46bd      	mov	sp, r7
 8019086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908a:	4770      	bx	lr
 801908c:	200001bc 	.word	0x200001bc

08019090 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019090:	b480      	push	{r7}
 8019092:	b083      	sub	sp, #12
 8019094:	af00      	add	r7, sp, #0
 8019096:	4603      	mov	r3, r0
 8019098:	6039      	str	r1, [r7, #0]
 801909a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	2204      	movs	r2, #4
 80190a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80190a2:	4b03      	ldr	r3, [pc, #12]	; (80190b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80190a4:	4618      	mov	r0, r3
 80190a6:	370c      	adds	r7, #12
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr
 80190b0:	200001d0 	.word	0x200001d0

080190b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	4603      	mov	r3, r0
 80190bc:	6039      	str	r1, [r7, #0]
 80190be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80190c0:	79fb      	ldrb	r3, [r7, #7]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d105      	bne.n	80190d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80190c6:	683a      	ldr	r2, [r7, #0]
 80190c8:	4907      	ldr	r1, [pc, #28]	; (80190e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80190ca:	4808      	ldr	r0, [pc, #32]	; (80190ec <USBD_FS_ProductStrDescriptor+0x38>)
 80190cc:	f7f9 fbbd 	bl	801284a <USBD_GetString>
 80190d0:	e004      	b.n	80190dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80190d2:	683a      	ldr	r2, [r7, #0]
 80190d4:	4904      	ldr	r1, [pc, #16]	; (80190e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80190d6:	4805      	ldr	r0, [pc, #20]	; (80190ec <USBD_FS_ProductStrDescriptor+0x38>)
 80190d8:	f7f9 fbb7 	bl	801284a <USBD_GetString>
  }
  return USBD_StrDesc;
 80190dc:	4b02      	ldr	r3, [pc, #8]	; (80190e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3708      	adds	r7, #8
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}
 80190e6:	bf00      	nop
 80190e8:	2000899c 	.word	0x2000899c
 80190ec:	08021878 	.word	0x08021878

080190f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	4603      	mov	r3, r0
 80190f8:	6039      	str	r1, [r7, #0]
 80190fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80190fc:	683a      	ldr	r2, [r7, #0]
 80190fe:	4904      	ldr	r1, [pc, #16]	; (8019110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019100:	4804      	ldr	r0, [pc, #16]	; (8019114 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019102:	f7f9 fba2 	bl	801284a <USBD_GetString>
  return USBD_StrDesc;
 8019106:	4b02      	ldr	r3, [pc, #8]	; (8019110 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019108:	4618      	mov	r0, r3
 801910a:	3708      	adds	r7, #8
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}
 8019110:	2000899c 	.word	0x2000899c
 8019114:	08021890 	.word	0x08021890

08019118 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	4603      	mov	r3, r0
 8019120:	6039      	str	r1, [r7, #0]
 8019122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	221a      	movs	r2, #26
 8019128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801912a:	f000 f843 	bl	80191b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801912e:	4b02      	ldr	r3, [pc, #8]	; (8019138 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019130:	4618      	mov	r0, r3
 8019132:	3708      	adds	r7, #8
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}
 8019138:	200001d4 	.word	0x200001d4

0801913c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	4603      	mov	r3, r0
 8019144:	6039      	str	r1, [r7, #0]
 8019146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019148:	79fb      	ldrb	r3, [r7, #7]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d105      	bne.n	801915a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801914e:	683a      	ldr	r2, [r7, #0]
 8019150:	4907      	ldr	r1, [pc, #28]	; (8019170 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019152:	4808      	ldr	r0, [pc, #32]	; (8019174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019154:	f7f9 fb79 	bl	801284a <USBD_GetString>
 8019158:	e004      	b.n	8019164 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801915a:	683a      	ldr	r2, [r7, #0]
 801915c:	4904      	ldr	r1, [pc, #16]	; (8019170 <USBD_FS_ConfigStrDescriptor+0x34>)
 801915e:	4805      	ldr	r0, [pc, #20]	; (8019174 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019160:	f7f9 fb73 	bl	801284a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019164:	4b02      	ldr	r3, [pc, #8]	; (8019170 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019166:	4618      	mov	r0, r3
 8019168:	3708      	adds	r7, #8
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	2000899c 	.word	0x2000899c
 8019174:	080218a4 	.word	0x080218a4

08019178 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
 801917e:	4603      	mov	r3, r0
 8019180:	6039      	str	r1, [r7, #0]
 8019182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019184:	79fb      	ldrb	r3, [r7, #7]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d105      	bne.n	8019196 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801918a:	683a      	ldr	r2, [r7, #0]
 801918c:	4907      	ldr	r1, [pc, #28]	; (80191ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801918e:	4808      	ldr	r0, [pc, #32]	; (80191b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019190:	f7f9 fb5b 	bl	801284a <USBD_GetString>
 8019194:	e004      	b.n	80191a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019196:	683a      	ldr	r2, [r7, #0]
 8019198:	4904      	ldr	r1, [pc, #16]	; (80191ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801919a:	4805      	ldr	r0, [pc, #20]	; (80191b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801919c:	f7f9 fb55 	bl	801284a <USBD_GetString>
  }
  return USBD_StrDesc;
 80191a0:	4b02      	ldr	r3, [pc, #8]	; (80191ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80191a2:	4618      	mov	r0, r3
 80191a4:	3708      	adds	r7, #8
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}
 80191aa:	bf00      	nop
 80191ac:	2000899c 	.word	0x2000899c
 80191b0:	080218b0 	.word	0x080218b0

080191b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80191ba:	4b0f      	ldr	r3, [pc, #60]	; (80191f8 <Get_SerialNum+0x44>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80191c0:	4b0e      	ldr	r3, [pc, #56]	; (80191fc <Get_SerialNum+0x48>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80191c6:	4b0e      	ldr	r3, [pc, #56]	; (8019200 <Get_SerialNum+0x4c>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80191cc:	68fa      	ldr	r2, [r7, #12]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	4413      	add	r3, r2
 80191d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d009      	beq.n	80191ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80191da:	2208      	movs	r2, #8
 80191dc:	4909      	ldr	r1, [pc, #36]	; (8019204 <Get_SerialNum+0x50>)
 80191de:	68f8      	ldr	r0, [r7, #12]
 80191e0:	f000 f814 	bl	801920c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80191e4:	2204      	movs	r2, #4
 80191e6:	4908      	ldr	r1, [pc, #32]	; (8019208 <Get_SerialNum+0x54>)
 80191e8:	68b8      	ldr	r0, [r7, #8]
 80191ea:	f000 f80f 	bl	801920c <IntToUnicode>
  }
}
 80191ee:	bf00      	nop
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	1fff7a10 	.word	0x1fff7a10
 80191fc:	1fff7a14 	.word	0x1fff7a14
 8019200:	1fff7a18 	.word	0x1fff7a18
 8019204:	200001d6 	.word	0x200001d6
 8019208:	200001e6 	.word	0x200001e6

0801920c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801920c:	b480      	push	{r7}
 801920e:	b087      	sub	sp, #28
 8019210:	af00      	add	r7, sp, #0
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	4613      	mov	r3, r2
 8019218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801921a:	2300      	movs	r3, #0
 801921c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801921e:	2300      	movs	r3, #0
 8019220:	75fb      	strb	r3, [r7, #23]
 8019222:	e027      	b.n	8019274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	0f1b      	lsrs	r3, r3, #28
 8019228:	2b09      	cmp	r3, #9
 801922a:	d80b      	bhi.n	8019244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	0f1b      	lsrs	r3, r3, #28
 8019230:	b2da      	uxtb	r2, r3
 8019232:	7dfb      	ldrb	r3, [r7, #23]
 8019234:	005b      	lsls	r3, r3, #1
 8019236:	4619      	mov	r1, r3
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	440b      	add	r3, r1
 801923c:	3230      	adds	r2, #48	; 0x30
 801923e:	b2d2      	uxtb	r2, r2
 8019240:	701a      	strb	r2, [r3, #0]
 8019242:	e00a      	b.n	801925a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	0f1b      	lsrs	r3, r3, #28
 8019248:	b2da      	uxtb	r2, r3
 801924a:	7dfb      	ldrb	r3, [r7, #23]
 801924c:	005b      	lsls	r3, r3, #1
 801924e:	4619      	mov	r1, r3
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	440b      	add	r3, r1
 8019254:	3237      	adds	r2, #55	; 0x37
 8019256:	b2d2      	uxtb	r2, r2
 8019258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	011b      	lsls	r3, r3, #4
 801925e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019260:	7dfb      	ldrb	r3, [r7, #23]
 8019262:	005b      	lsls	r3, r3, #1
 8019264:	3301      	adds	r3, #1
 8019266:	68ba      	ldr	r2, [r7, #8]
 8019268:	4413      	add	r3, r2
 801926a:	2200      	movs	r2, #0
 801926c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801926e:	7dfb      	ldrb	r3, [r7, #23]
 8019270:	3301      	adds	r3, #1
 8019272:	75fb      	strb	r3, [r7, #23]
 8019274:	7dfa      	ldrb	r2, [r7, #23]
 8019276:	79fb      	ldrb	r3, [r7, #7]
 8019278:	429a      	cmp	r2, r3
 801927a:	d3d3      	bcc.n	8019224 <IntToUnicode+0x18>
  }
}
 801927c:	bf00      	nop
 801927e:	bf00      	nop
 8019280:	371c      	adds	r7, #28
 8019282:	46bd      	mov	sp, r7
 8019284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019288:	4770      	bx	lr
	...

0801928c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b08a      	sub	sp, #40	; 0x28
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019294:	f107 0314 	add.w	r3, r7, #20
 8019298:	2200      	movs	r2, #0
 801929a:	601a      	str	r2, [r3, #0]
 801929c:	605a      	str	r2, [r3, #4]
 801929e:	609a      	str	r2, [r3, #8]
 80192a0:	60da      	str	r2, [r3, #12]
 80192a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80192ac:	d147      	bne.n	801933e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80192ae:	2300      	movs	r3, #0
 80192b0:	613b      	str	r3, [r7, #16]
 80192b2:	4b25      	ldr	r3, [pc, #148]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 80192b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b6:	4a24      	ldr	r2, [pc, #144]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 80192b8:	f043 0301 	orr.w	r3, r3, #1
 80192bc:	6313      	str	r3, [r2, #48]	; 0x30
 80192be:	4b22      	ldr	r3, [pc, #136]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 80192c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192c2:	f003 0301 	and.w	r3, r3, #1
 80192c6:	613b      	str	r3, [r7, #16]
 80192c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80192ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80192ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80192d0:	2300      	movs	r3, #0
 80192d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192d4:	2300      	movs	r3, #0
 80192d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192d8:	f107 0314 	add.w	r3, r7, #20
 80192dc:	4619      	mov	r1, r3
 80192de:	481b      	ldr	r0, [pc, #108]	; (801934c <HAL_PCD_MspInit+0xc0>)
 80192e0:	f7ef fdfe 	bl	8008ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80192e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80192e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80192ea:	2302      	movs	r3, #2
 80192ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192ee:	2300      	movs	r3, #0
 80192f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80192f2:	2303      	movs	r3, #3
 80192f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80192f6:	230a      	movs	r3, #10
 80192f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192fa:	f107 0314 	add.w	r3, r7, #20
 80192fe:	4619      	mov	r1, r3
 8019300:	4812      	ldr	r0, [pc, #72]	; (801934c <HAL_PCD_MspInit+0xc0>)
 8019302:	f7ef fded 	bl	8008ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019306:	4b10      	ldr	r3, [pc, #64]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 8019308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801930a:	4a0f      	ldr	r2, [pc, #60]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 801930c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019310:	6353      	str	r3, [r2, #52]	; 0x34
 8019312:	2300      	movs	r3, #0
 8019314:	60fb      	str	r3, [r7, #12]
 8019316:	4b0c      	ldr	r3, [pc, #48]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 8019318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801931a:	4a0b      	ldr	r2, [pc, #44]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 801931c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019320:	6453      	str	r3, [r2, #68]	; 0x44
 8019322:	4b09      	ldr	r3, [pc, #36]	; (8019348 <HAL_PCD_MspInit+0xbc>)
 8019324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801932a:	60fb      	str	r3, [r7, #12]
 801932c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801932e:	2200      	movs	r2, #0
 8019330:	2105      	movs	r1, #5
 8019332:	2043      	movs	r0, #67	; 0x43
 8019334:	f7ef fd9c 	bl	8008e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019338:	2043      	movs	r0, #67	; 0x43
 801933a:	f7ef fdb5 	bl	8008ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801933e:	bf00      	nop
 8019340:	3728      	adds	r7, #40	; 0x28
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}
 8019346:	bf00      	nop
 8019348:	40023800 	.word	0x40023800
 801934c:	40020000 	.word	0x40020000

08019350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019364:	4619      	mov	r1, r3
 8019366:	4610      	mov	r0, r2
 8019368:	f7f8 fa88 	bl	801187c <USBD_LL_SetupStage>
}
 801936c:	bf00      	nop
 801936e:	3708      	adds	r7, #8
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b082      	sub	sp, #8
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	460b      	mov	r3, r1
 801937e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019386:	78fa      	ldrb	r2, [r7, #3]
 8019388:	6879      	ldr	r1, [r7, #4]
 801938a:	4613      	mov	r3, r2
 801938c:	00db      	lsls	r3, r3, #3
 801938e:	1a9b      	subs	r3, r3, r2
 8019390:	009b      	lsls	r3, r3, #2
 8019392:	440b      	add	r3, r1
 8019394:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019398:	681a      	ldr	r2, [r3, #0]
 801939a:	78fb      	ldrb	r3, [r7, #3]
 801939c:	4619      	mov	r1, r3
 801939e:	f7f8 fac2 	bl	8011926 <USBD_LL_DataOutStage>
}
 80193a2:	bf00      	nop
 80193a4:	3708      	adds	r7, #8
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}

080193aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80193aa:	b580      	push	{r7, lr}
 80193ac:	b082      	sub	sp, #8
 80193ae:	af00      	add	r7, sp, #0
 80193b0:	6078      	str	r0, [r7, #4]
 80193b2:	460b      	mov	r3, r1
 80193b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80193bc:	78fa      	ldrb	r2, [r7, #3]
 80193be:	6879      	ldr	r1, [r7, #4]
 80193c0:	4613      	mov	r3, r2
 80193c2:	00db      	lsls	r3, r3, #3
 80193c4:	1a9b      	subs	r3, r3, r2
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	440b      	add	r3, r1
 80193ca:	3348      	adds	r3, #72	; 0x48
 80193cc:	681a      	ldr	r2, [r3, #0]
 80193ce:	78fb      	ldrb	r3, [r7, #3]
 80193d0:	4619      	mov	r1, r3
 80193d2:	f7f8 fb0b 	bl	80119ec <USBD_LL_DataInStage>
}
 80193d6:	bf00      	nop
 80193d8:	3708      	adds	r7, #8
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80193de:	b580      	push	{r7, lr}
 80193e0:	b082      	sub	sp, #8
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7f8 fc1f 	bl	8011c30 <USBD_LL_SOF>
}
 80193f2:	bf00      	nop
 80193f4:	3708      	adds	r7, #8
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80193fa:	b580      	push	{r7, lr}
 80193fc:	b084      	sub	sp, #16
 80193fe:	af00      	add	r7, sp, #0
 8019400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019402:	2301      	movs	r3, #1
 8019404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	68db      	ldr	r3, [r3, #12]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d102      	bne.n	8019414 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801940e:	2300      	movs	r3, #0
 8019410:	73fb      	strb	r3, [r7, #15]
 8019412:	e008      	b.n	8019426 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	68db      	ldr	r3, [r3, #12]
 8019418:	2b02      	cmp	r3, #2
 801941a:	d102      	bne.n	8019422 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801941c:	2301      	movs	r3, #1
 801941e:	73fb      	strb	r3, [r7, #15]
 8019420:	e001      	b.n	8019426 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019422:	f7e9 faad 	bl	8002980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801942c:	7bfa      	ldrb	r2, [r7, #15]
 801942e:	4611      	mov	r1, r2
 8019430:	4618      	mov	r0, r3
 8019432:	f7f8 fbbf 	bl	8011bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801943c:	4618      	mov	r0, r3
 801943e:	f7f8 fb6b 	bl	8011b18 <USBD_LL_Reset>
}
 8019442:	bf00      	nop
 8019444:	3710      	adds	r7, #16
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}
	...

0801944c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801945a:	4618      	mov	r0, r3
 801945c:	f7f8 fbba 	bl	8011bd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	687a      	ldr	r2, [r7, #4]
 801946c:	6812      	ldr	r2, [r2, #0]
 801946e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019472:	f043 0301 	orr.w	r3, r3, #1
 8019476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6a1b      	ldr	r3, [r3, #32]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d005      	beq.n	801948c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019480:	4b04      	ldr	r3, [pc, #16]	; (8019494 <HAL_PCD_SuspendCallback+0x48>)
 8019482:	691b      	ldr	r3, [r3, #16]
 8019484:	4a03      	ldr	r2, [pc, #12]	; (8019494 <HAL_PCD_SuspendCallback+0x48>)
 8019486:	f043 0306 	orr.w	r3, r3, #6
 801948a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801948c:	bf00      	nop
 801948e:	3708      	adds	r7, #8
 8019490:	46bd      	mov	sp, r7
 8019492:	bd80      	pop	{r7, pc}
 8019494:	e000ed00 	.word	0xe000ed00

08019498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7f8 fbaa 	bl	8011c00 <USBD_LL_Resume>
}
 80194ac:	bf00      	nop
 80194ae:	3708      	adds	r7, #8
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}

080194b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b082      	sub	sp, #8
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
 80194bc:	460b      	mov	r3, r1
 80194be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80194c6:	78fa      	ldrb	r2, [r7, #3]
 80194c8:	4611      	mov	r1, r2
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7f8 fbf8 	bl	8011cc0 <USBD_LL_IsoOUTIncomplete>
}
 80194d0:	bf00      	nop
 80194d2:	3708      	adds	r7, #8
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}

080194d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b082      	sub	sp, #8
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	460b      	mov	r3, r1
 80194e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80194ea:	78fa      	ldrb	r2, [r7, #3]
 80194ec:	4611      	mov	r1, r2
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7f8 fbc0 	bl	8011c74 <USBD_LL_IsoINIncomplete>
}
 80194f4:	bf00      	nop
 80194f6:	3708      	adds	r7, #8
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}

080194fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801950a:	4618      	mov	r0, r3
 801950c:	f7f8 fbfe 	bl	8011d0c <USBD_LL_DevConnected>
}
 8019510:	bf00      	nop
 8019512:	3708      	adds	r7, #8
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}

08019518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019526:	4618      	mov	r0, r3
 8019528:	f7f8 fbfb 	bl	8011d22 <USBD_LL_DevDisconnected>
}
 801952c:	bf00      	nop
 801952e:	3708      	adds	r7, #8
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}

08019534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b082      	sub	sp, #8
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d13c      	bne.n	80195be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019544:	4a20      	ldr	r2, [pc, #128]	; (80195c8 <USBD_LL_Init+0x94>)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	4a1e      	ldr	r2, [pc, #120]	; (80195c8 <USBD_LL_Init+0x94>)
 8019550:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019554:	4b1c      	ldr	r3, [pc, #112]	; (80195c8 <USBD_LL_Init+0x94>)
 8019556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801955a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801955c:	4b1a      	ldr	r3, [pc, #104]	; (80195c8 <USBD_LL_Init+0x94>)
 801955e:	2204      	movs	r2, #4
 8019560:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019562:	4b19      	ldr	r3, [pc, #100]	; (80195c8 <USBD_LL_Init+0x94>)
 8019564:	2202      	movs	r2, #2
 8019566:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019568:	4b17      	ldr	r3, [pc, #92]	; (80195c8 <USBD_LL_Init+0x94>)
 801956a:	2200      	movs	r2, #0
 801956c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801956e:	4b16      	ldr	r3, [pc, #88]	; (80195c8 <USBD_LL_Init+0x94>)
 8019570:	2202      	movs	r2, #2
 8019572:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019574:	4b14      	ldr	r3, [pc, #80]	; (80195c8 <USBD_LL_Init+0x94>)
 8019576:	2200      	movs	r2, #0
 8019578:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801957a:	4b13      	ldr	r3, [pc, #76]	; (80195c8 <USBD_LL_Init+0x94>)
 801957c:	2200      	movs	r2, #0
 801957e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019580:	4b11      	ldr	r3, [pc, #68]	; (80195c8 <USBD_LL_Init+0x94>)
 8019582:	2200      	movs	r2, #0
 8019584:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019586:	4b10      	ldr	r3, [pc, #64]	; (80195c8 <USBD_LL_Init+0x94>)
 8019588:	2201      	movs	r2, #1
 801958a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801958c:	4b0e      	ldr	r3, [pc, #56]	; (80195c8 <USBD_LL_Init+0x94>)
 801958e:	2200      	movs	r2, #0
 8019590:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019592:	480d      	ldr	r0, [pc, #52]	; (80195c8 <USBD_LL_Init+0x94>)
 8019594:	f7f0 ff5c 	bl	800a450 <HAL_PCD_Init>
 8019598:	4603      	mov	r3, r0
 801959a:	2b00      	cmp	r3, #0
 801959c:	d001      	beq.n	80195a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801959e:	f7e9 f9ef 	bl	8002980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80195a2:	2180      	movs	r1, #128	; 0x80
 80195a4:	4808      	ldr	r0, [pc, #32]	; (80195c8 <USBD_LL_Init+0x94>)
 80195a6:	f7f2 f8ba 	bl	800b71e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80195aa:	2240      	movs	r2, #64	; 0x40
 80195ac:	2100      	movs	r1, #0
 80195ae:	4806      	ldr	r0, [pc, #24]	; (80195c8 <USBD_LL_Init+0x94>)
 80195b0:	f7f2 f86e 	bl	800b690 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80195b4:	2280      	movs	r2, #128	; 0x80
 80195b6:	2101      	movs	r1, #1
 80195b8:	4803      	ldr	r0, [pc, #12]	; (80195c8 <USBD_LL_Init+0x94>)
 80195ba:	f7f2 f869 	bl	800b690 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80195be:	2300      	movs	r3, #0
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	3708      	adds	r7, #8
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}
 80195c8:	20008b9c 	.word	0x20008b9c

080195cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b084      	sub	sp, #16
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80195d4:	2300      	movs	r3, #0
 80195d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195d8:	2300      	movs	r3, #0
 80195da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7f1 f851 	bl	800a68a <HAL_PCD_Start>
 80195e8:	4603      	mov	r3, r0
 80195ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80195ec:	7bfb      	ldrb	r3, [r7, #15]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f000 f942 	bl	8019878 <USBD_Get_USB_Status>
 80195f4:	4603      	mov	r3, r0
 80195f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80195f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	3710      	adds	r7, #16
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}

08019602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019602:	b580      	push	{r7, lr}
 8019604:	b084      	sub	sp, #16
 8019606:	af00      	add	r7, sp, #0
 8019608:	6078      	str	r0, [r7, #4]
 801960a:	4608      	mov	r0, r1
 801960c:	4611      	mov	r1, r2
 801960e:	461a      	mov	r2, r3
 8019610:	4603      	mov	r3, r0
 8019612:	70fb      	strb	r3, [r7, #3]
 8019614:	460b      	mov	r3, r1
 8019616:	70bb      	strb	r3, [r7, #2]
 8019618:	4613      	mov	r3, r2
 801961a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801961c:	2300      	movs	r3, #0
 801961e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019620:	2300      	movs	r3, #0
 8019622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801962a:	78bb      	ldrb	r3, [r7, #2]
 801962c:	883a      	ldrh	r2, [r7, #0]
 801962e:	78f9      	ldrb	r1, [r7, #3]
 8019630:	f7f1 fc35 	bl	800ae9e <HAL_PCD_EP_Open>
 8019634:	4603      	mov	r3, r0
 8019636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019638:	7bfb      	ldrb	r3, [r7, #15]
 801963a:	4618      	mov	r0, r3
 801963c:	f000 f91c 	bl	8019878 <USBD_Get_USB_Status>
 8019640:	4603      	mov	r3, r0
 8019642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019644:	7bbb      	ldrb	r3, [r7, #14]
}
 8019646:	4618      	mov	r0, r3
 8019648:	3710      	adds	r7, #16
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b084      	sub	sp, #16
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
 8019656:	460b      	mov	r3, r1
 8019658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801965a:	2300      	movs	r3, #0
 801965c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801965e:	2300      	movs	r3, #0
 8019660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019668:	78fa      	ldrb	r2, [r7, #3]
 801966a:	4611      	mov	r1, r2
 801966c:	4618      	mov	r0, r3
 801966e:	f7f1 fc7e 	bl	800af6e <HAL_PCD_EP_Close>
 8019672:	4603      	mov	r3, r0
 8019674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019676:	7bfb      	ldrb	r3, [r7, #15]
 8019678:	4618      	mov	r0, r3
 801967a:	f000 f8fd 	bl	8019878 <USBD_Get_USB_Status>
 801967e:	4603      	mov	r3, r0
 8019680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019682:	7bbb      	ldrb	r3, [r7, #14]
}
 8019684:	4618      	mov	r0, r3
 8019686:	3710      	adds	r7, #16
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}

0801968c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b084      	sub	sp, #16
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
 8019694:	460b      	mov	r3, r1
 8019696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019698:	2300      	movs	r3, #0
 801969a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801969c:	2300      	movs	r3, #0
 801969e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80196a6:	78fa      	ldrb	r2, [r7, #3]
 80196a8:	4611      	mov	r1, r2
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7f1 fd56 	bl	800b15c <HAL_PCD_EP_SetStall>
 80196b0:	4603      	mov	r3, r0
 80196b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80196b4:	7bfb      	ldrb	r3, [r7, #15]
 80196b6:	4618      	mov	r0, r3
 80196b8:	f000 f8de 	bl	8019878 <USBD_Get_USB_Status>
 80196bc:	4603      	mov	r3, r0
 80196be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80196c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3710      	adds	r7, #16
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}

080196ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80196ca:	b580      	push	{r7, lr}
 80196cc:	b084      	sub	sp, #16
 80196ce:	af00      	add	r7, sp, #0
 80196d0:	6078      	str	r0, [r7, #4]
 80196d2:	460b      	mov	r3, r1
 80196d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196d6:	2300      	movs	r3, #0
 80196d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196da:	2300      	movs	r3, #0
 80196dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80196e4:	78fa      	ldrb	r2, [r7, #3]
 80196e6:	4611      	mov	r1, r2
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7f1 fd9b 	bl	800b224 <HAL_PCD_EP_ClrStall>
 80196ee:	4603      	mov	r3, r0
 80196f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80196f2:	7bfb      	ldrb	r3, [r7, #15]
 80196f4:	4618      	mov	r0, r3
 80196f6:	f000 f8bf 	bl	8019878 <USBD_Get_USB_Status>
 80196fa:	4603      	mov	r3, r0
 80196fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80196fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8019700:	4618      	mov	r0, r3
 8019702:	3710      	adds	r7, #16
 8019704:	46bd      	mov	sp, r7
 8019706:	bd80      	pop	{r7, pc}

08019708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019708:	b480      	push	{r7}
 801970a:	b085      	sub	sp, #20
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
 8019710:	460b      	mov	r3, r1
 8019712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801971a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801971c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019720:	2b00      	cmp	r3, #0
 8019722:	da0b      	bge.n	801973c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019724:	78fb      	ldrb	r3, [r7, #3]
 8019726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801972a:	68f9      	ldr	r1, [r7, #12]
 801972c:	4613      	mov	r3, r2
 801972e:	00db      	lsls	r3, r3, #3
 8019730:	1a9b      	subs	r3, r3, r2
 8019732:	009b      	lsls	r3, r3, #2
 8019734:	440b      	add	r3, r1
 8019736:	333e      	adds	r3, #62	; 0x3e
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	e00b      	b.n	8019754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801973c:	78fb      	ldrb	r3, [r7, #3]
 801973e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019742:	68f9      	ldr	r1, [r7, #12]
 8019744:	4613      	mov	r3, r2
 8019746:	00db      	lsls	r3, r3, #3
 8019748:	1a9b      	subs	r3, r3, r2
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	440b      	add	r3, r1
 801974e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019752:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019754:	4618      	mov	r0, r3
 8019756:	3714      	adds	r7, #20
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr

08019760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
 8019768:	460b      	mov	r3, r1
 801976a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801976c:	2300      	movs	r3, #0
 801976e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019770:	2300      	movs	r3, #0
 8019772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801977a:	78fa      	ldrb	r2, [r7, #3]
 801977c:	4611      	mov	r1, r2
 801977e:	4618      	mov	r0, r3
 8019780:	f7f1 fb68 	bl	800ae54 <HAL_PCD_SetAddress>
 8019784:	4603      	mov	r3, r0
 8019786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019788:	7bfb      	ldrb	r3, [r7, #15]
 801978a:	4618      	mov	r0, r3
 801978c:	f000 f874 	bl	8019878 <USBD_Get_USB_Status>
 8019790:	4603      	mov	r3, r0
 8019792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019794:	7bbb      	ldrb	r3, [r7, #14]
}
 8019796:	4618      	mov	r0, r3
 8019798:	3710      	adds	r7, #16
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}

0801979e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801979e:	b580      	push	{r7, lr}
 80197a0:	b086      	sub	sp, #24
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	60f8      	str	r0, [r7, #12]
 80197a6:	607a      	str	r2, [r7, #4]
 80197a8:	603b      	str	r3, [r7, #0]
 80197aa:	460b      	mov	r3, r1
 80197ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197ae:	2300      	movs	r3, #0
 80197b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197b2:	2300      	movs	r3, #0
 80197b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80197bc:	7af9      	ldrb	r1, [r7, #11]
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	687a      	ldr	r2, [r7, #4]
 80197c2:	f7f1 fc81 	bl	800b0c8 <HAL_PCD_EP_Transmit>
 80197c6:	4603      	mov	r3, r0
 80197c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197ca:	7dfb      	ldrb	r3, [r7, #23]
 80197cc:	4618      	mov	r0, r3
 80197ce:	f000 f853 	bl	8019878 <USBD_Get_USB_Status>
 80197d2:	4603      	mov	r3, r0
 80197d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80197d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80197d8:	4618      	mov	r0, r3
 80197da:	3718      	adds	r7, #24
 80197dc:	46bd      	mov	sp, r7
 80197de:	bd80      	pop	{r7, pc}

080197e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b086      	sub	sp, #24
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	607a      	str	r2, [r7, #4]
 80197ea:	603b      	str	r3, [r7, #0]
 80197ec:	460b      	mov	r3, r1
 80197ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197f0:	2300      	movs	r3, #0
 80197f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197f4:	2300      	movs	r3, #0
 80197f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80197fe:	7af9      	ldrb	r1, [r7, #11]
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	687a      	ldr	r2, [r7, #4]
 8019804:	f7f1 fbfd 	bl	800b002 <HAL_PCD_EP_Receive>
 8019808:	4603      	mov	r3, r0
 801980a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801980c:	7dfb      	ldrb	r3, [r7, #23]
 801980e:	4618      	mov	r0, r3
 8019810:	f000 f832 	bl	8019878 <USBD_Get_USB_Status>
 8019814:	4603      	mov	r3, r0
 8019816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019818:	7dbb      	ldrb	r3, [r7, #22]
}
 801981a:	4618      	mov	r0, r3
 801981c:	3718      	adds	r7, #24
 801981e:	46bd      	mov	sp, r7
 8019820:	bd80      	pop	{r7, pc}

08019822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019822:	b580      	push	{r7, lr}
 8019824:	b082      	sub	sp, #8
 8019826:	af00      	add	r7, sp, #0
 8019828:	6078      	str	r0, [r7, #4]
 801982a:	460b      	mov	r3, r1
 801982c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019834:	78fa      	ldrb	r2, [r7, #3]
 8019836:	4611      	mov	r1, r2
 8019838:	4618      	mov	r0, r3
 801983a:	f7f1 fc2d 	bl	800b098 <HAL_PCD_EP_GetRxCount>
 801983e:	4603      	mov	r3, r0
}
 8019840:	4618      	mov	r0, r3
 8019842:	3708      	adds	r7, #8
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}

08019848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019848:	b480      	push	{r7}
 801984a:	b083      	sub	sp, #12
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019850:	4b03      	ldr	r3, [pc, #12]	; (8019860 <USBD_static_malloc+0x18>)
}
 8019852:	4618      	mov	r0, r3
 8019854:	370c      	adds	r7, #12
 8019856:	46bd      	mov	sp, r7
 8019858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985c:	4770      	bx	lr
 801985e:	bf00      	nop
 8019860:	20005c98 	.word	0x20005c98

08019864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019864:	b480      	push	{r7}
 8019866:	b083      	sub	sp, #12
 8019868:	af00      	add	r7, sp, #0
 801986a:	6078      	str	r0, [r7, #4]

}
 801986c:	bf00      	nop
 801986e:	370c      	adds	r7, #12
 8019870:	46bd      	mov	sp, r7
 8019872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019876:	4770      	bx	lr

08019878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019878:	b480      	push	{r7}
 801987a:	b085      	sub	sp, #20
 801987c:	af00      	add	r7, sp, #0
 801987e:	4603      	mov	r3, r0
 8019880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019882:	2300      	movs	r3, #0
 8019884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019886:	79fb      	ldrb	r3, [r7, #7]
 8019888:	2b03      	cmp	r3, #3
 801988a:	d817      	bhi.n	80198bc <USBD_Get_USB_Status+0x44>
 801988c:	a201      	add	r2, pc, #4	; (adr r2, 8019894 <USBD_Get_USB_Status+0x1c>)
 801988e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019892:	bf00      	nop
 8019894:	080198a5 	.word	0x080198a5
 8019898:	080198ab 	.word	0x080198ab
 801989c:	080198b1 	.word	0x080198b1
 80198a0:	080198b7 	.word	0x080198b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80198a4:	2300      	movs	r3, #0
 80198a6:	73fb      	strb	r3, [r7, #15]
    break;
 80198a8:	e00b      	b.n	80198c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80198aa:	2303      	movs	r3, #3
 80198ac:	73fb      	strb	r3, [r7, #15]
    break;
 80198ae:	e008      	b.n	80198c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80198b0:	2301      	movs	r3, #1
 80198b2:	73fb      	strb	r3, [r7, #15]
    break;
 80198b4:	e005      	b.n	80198c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80198b6:	2303      	movs	r3, #3
 80198b8:	73fb      	strb	r3, [r7, #15]
    break;
 80198ba:	e002      	b.n	80198c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80198bc:	2303      	movs	r3, #3
 80198be:	73fb      	strb	r3, [r7, #15]
    break;
 80198c0:	bf00      	nop
  }
  return usb_status;
 80198c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3714      	adds	r7, #20
 80198c8:	46bd      	mov	sp, r7
 80198ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ce:	4770      	bx	lr

080198d0 <_Znwj>:
 80198d0:	2801      	cmp	r0, #1
 80198d2:	bf38      	it	cc
 80198d4:	2001      	movcc	r0, #1
 80198d6:	b510      	push	{r4, lr}
 80198d8:	4604      	mov	r4, r0
 80198da:	4620      	mov	r0, r4
 80198dc:	f001 f906 	bl	801aaec <malloc>
 80198e0:	b930      	cbnz	r0, 80198f0 <_Znwj+0x20>
 80198e2:	f000 f81b 	bl	801991c <_ZSt15get_new_handlerv>
 80198e6:	b908      	cbnz	r0, 80198ec <_Znwj+0x1c>
 80198e8:	f000 ffd4 	bl	801a894 <abort>
 80198ec:	4780      	blx	r0
 80198ee:	e7f4      	b.n	80198da <_Znwj+0xa>
 80198f0:	bd10      	pop	{r4, pc}

080198f2 <__cxa_pure_virtual>:
 80198f2:	b508      	push	{r3, lr}
 80198f4:	f000 f80c 	bl	8019910 <_ZSt9terminatev>

080198f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80198f8:	b508      	push	{r3, lr}
 80198fa:	4780      	blx	r0
 80198fc:	f000 ffca 	bl	801a894 <abort>

08019900 <_ZSt13get_terminatev>:
 8019900:	4b02      	ldr	r3, [pc, #8]	; (801990c <_ZSt13get_terminatev+0xc>)
 8019902:	6818      	ldr	r0, [r3, #0]
 8019904:	f3bf 8f5b 	dmb	ish
 8019908:	4770      	bx	lr
 801990a:	bf00      	nop
 801990c:	200001f0 	.word	0x200001f0

08019910 <_ZSt9terminatev>:
 8019910:	b508      	push	{r3, lr}
 8019912:	f7ff fff5 	bl	8019900 <_ZSt13get_terminatev>
 8019916:	f7ff ffef 	bl	80198f8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801991c <_ZSt15get_new_handlerv>:
 801991c:	4b02      	ldr	r3, [pc, #8]	; (8019928 <_ZSt15get_new_handlerv+0xc>)
 801991e:	6818      	ldr	r0, [r3, #0]
 8019920:	f3bf 8f5b 	dmb	ish
 8019924:	4770      	bx	lr
 8019926:	bf00      	nop
 8019928:	20005eb8 	.word	0x20005eb8

0801992c <pow>:
 801992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019930:	ec59 8b10 	vmov	r8, r9, d0
 8019934:	ec57 6b11 	vmov	r6, r7, d1
 8019938:	f000 f8a6 	bl	8019a88 <__ieee754_pow>
 801993c:	4b4e      	ldr	r3, [pc, #312]	; (8019a78 <pow+0x14c>)
 801993e:	f993 3000 	ldrsb.w	r3, [r3]
 8019942:	3301      	adds	r3, #1
 8019944:	ec55 4b10 	vmov	r4, r5, d0
 8019948:	d015      	beq.n	8019976 <pow+0x4a>
 801994a:	4632      	mov	r2, r6
 801994c:	463b      	mov	r3, r7
 801994e:	4630      	mov	r0, r6
 8019950:	4639      	mov	r1, r7
 8019952:	f7e7 f8fb 	bl	8000b4c <__aeabi_dcmpun>
 8019956:	b970      	cbnz	r0, 8019976 <pow+0x4a>
 8019958:	4642      	mov	r2, r8
 801995a:	464b      	mov	r3, r9
 801995c:	4640      	mov	r0, r8
 801995e:	4649      	mov	r1, r9
 8019960:	f7e7 f8f4 	bl	8000b4c <__aeabi_dcmpun>
 8019964:	2200      	movs	r2, #0
 8019966:	2300      	movs	r3, #0
 8019968:	b148      	cbz	r0, 801997e <pow+0x52>
 801996a:	4630      	mov	r0, r6
 801996c:	4639      	mov	r1, r7
 801996e:	f7e7 f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8019972:	2800      	cmp	r0, #0
 8019974:	d17d      	bne.n	8019a72 <pow+0x146>
 8019976:	ec45 4b10 	vmov	d0, r4, r5
 801997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801997e:	4640      	mov	r0, r8
 8019980:	4649      	mov	r1, r9
 8019982:	f7e7 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8019986:	b1e0      	cbz	r0, 80199c2 <pow+0x96>
 8019988:	2200      	movs	r2, #0
 801998a:	2300      	movs	r3, #0
 801998c:	4630      	mov	r0, r6
 801998e:	4639      	mov	r1, r7
 8019990:	f7e7 f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8019994:	2800      	cmp	r0, #0
 8019996:	d16c      	bne.n	8019a72 <pow+0x146>
 8019998:	ec47 6b10 	vmov	d0, r6, r7
 801999c:	f000 fe53 	bl	801a646 <finite>
 80199a0:	2800      	cmp	r0, #0
 80199a2:	d0e8      	beq.n	8019976 <pow+0x4a>
 80199a4:	2200      	movs	r2, #0
 80199a6:	2300      	movs	r3, #0
 80199a8:	4630      	mov	r0, r6
 80199aa:	4639      	mov	r1, r7
 80199ac:	f7e7 f8a6 	bl	8000afc <__aeabi_dcmplt>
 80199b0:	2800      	cmp	r0, #0
 80199b2:	d0e0      	beq.n	8019976 <pow+0x4a>
 80199b4:	f000 ff76 	bl	801a8a4 <__errno>
 80199b8:	2321      	movs	r3, #33	; 0x21
 80199ba:	6003      	str	r3, [r0, #0]
 80199bc:	2400      	movs	r4, #0
 80199be:	4d2f      	ldr	r5, [pc, #188]	; (8019a7c <pow+0x150>)
 80199c0:	e7d9      	b.n	8019976 <pow+0x4a>
 80199c2:	ec45 4b10 	vmov	d0, r4, r5
 80199c6:	f000 fe3e 	bl	801a646 <finite>
 80199ca:	bbb8      	cbnz	r0, 8019a3c <pow+0x110>
 80199cc:	ec49 8b10 	vmov	d0, r8, r9
 80199d0:	f000 fe39 	bl	801a646 <finite>
 80199d4:	b390      	cbz	r0, 8019a3c <pow+0x110>
 80199d6:	ec47 6b10 	vmov	d0, r6, r7
 80199da:	f000 fe34 	bl	801a646 <finite>
 80199de:	b368      	cbz	r0, 8019a3c <pow+0x110>
 80199e0:	4622      	mov	r2, r4
 80199e2:	462b      	mov	r3, r5
 80199e4:	4620      	mov	r0, r4
 80199e6:	4629      	mov	r1, r5
 80199e8:	f7e7 f8b0 	bl	8000b4c <__aeabi_dcmpun>
 80199ec:	b160      	cbz	r0, 8019a08 <pow+0xdc>
 80199ee:	f000 ff59 	bl	801a8a4 <__errno>
 80199f2:	2321      	movs	r3, #33	; 0x21
 80199f4:	6003      	str	r3, [r0, #0]
 80199f6:	2200      	movs	r2, #0
 80199f8:	2300      	movs	r3, #0
 80199fa:	4610      	mov	r0, r2
 80199fc:	4619      	mov	r1, r3
 80199fe:	f7e6 ff35 	bl	800086c <__aeabi_ddiv>
 8019a02:	4604      	mov	r4, r0
 8019a04:	460d      	mov	r5, r1
 8019a06:	e7b6      	b.n	8019976 <pow+0x4a>
 8019a08:	f000 ff4c 	bl	801a8a4 <__errno>
 8019a0c:	2322      	movs	r3, #34	; 0x22
 8019a0e:	6003      	str	r3, [r0, #0]
 8019a10:	2200      	movs	r2, #0
 8019a12:	2300      	movs	r3, #0
 8019a14:	4640      	mov	r0, r8
 8019a16:	4649      	mov	r1, r9
 8019a18:	f7e7 f870 	bl	8000afc <__aeabi_dcmplt>
 8019a1c:	2400      	movs	r4, #0
 8019a1e:	b158      	cbz	r0, 8019a38 <pow+0x10c>
 8019a20:	ec47 6b10 	vmov	d0, r6, r7
 8019a24:	f000 fe24 	bl	801a670 <rint>
 8019a28:	4632      	mov	r2, r6
 8019a2a:	ec51 0b10 	vmov	r0, r1, d0
 8019a2e:	463b      	mov	r3, r7
 8019a30:	f7e7 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 8019a34:	2800      	cmp	r0, #0
 8019a36:	d0c2      	beq.n	80199be <pow+0x92>
 8019a38:	4d11      	ldr	r5, [pc, #68]	; (8019a80 <pow+0x154>)
 8019a3a:	e79c      	b.n	8019976 <pow+0x4a>
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	2300      	movs	r3, #0
 8019a40:	4620      	mov	r0, r4
 8019a42:	4629      	mov	r1, r5
 8019a44:	f7e7 f850 	bl	8000ae8 <__aeabi_dcmpeq>
 8019a48:	2800      	cmp	r0, #0
 8019a4a:	d094      	beq.n	8019976 <pow+0x4a>
 8019a4c:	ec49 8b10 	vmov	d0, r8, r9
 8019a50:	f000 fdf9 	bl	801a646 <finite>
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d08e      	beq.n	8019976 <pow+0x4a>
 8019a58:	ec47 6b10 	vmov	d0, r6, r7
 8019a5c:	f000 fdf3 	bl	801a646 <finite>
 8019a60:	2800      	cmp	r0, #0
 8019a62:	d088      	beq.n	8019976 <pow+0x4a>
 8019a64:	f000 ff1e 	bl	801a8a4 <__errno>
 8019a68:	2322      	movs	r3, #34	; 0x22
 8019a6a:	6003      	str	r3, [r0, #0]
 8019a6c:	2400      	movs	r4, #0
 8019a6e:	2500      	movs	r5, #0
 8019a70:	e781      	b.n	8019976 <pow+0x4a>
 8019a72:	4d04      	ldr	r5, [pc, #16]	; (8019a84 <pow+0x158>)
 8019a74:	2400      	movs	r4, #0
 8019a76:	e77e      	b.n	8019976 <pow+0x4a>
 8019a78:	200001f4 	.word	0x200001f4
 8019a7c:	fff00000 	.word	0xfff00000
 8019a80:	7ff00000 	.word	0x7ff00000
 8019a84:	3ff00000 	.word	0x3ff00000

08019a88 <__ieee754_pow>:
 8019a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a8c:	ed2d 8b06 	vpush	{d8-d10}
 8019a90:	b08d      	sub	sp, #52	; 0x34
 8019a92:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019a96:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8019a9a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8019a9e:	ea56 0100 	orrs.w	r1, r6, r0
 8019aa2:	ec53 2b10 	vmov	r2, r3, d0
 8019aa6:	f000 84d1 	beq.w	801a44c <__ieee754_pow+0x9c4>
 8019aaa:	497f      	ldr	r1, [pc, #508]	; (8019ca8 <__ieee754_pow+0x220>)
 8019aac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8019ab0:	428c      	cmp	r4, r1
 8019ab2:	ee10 8a10 	vmov	r8, s0
 8019ab6:	4699      	mov	r9, r3
 8019ab8:	dc09      	bgt.n	8019ace <__ieee754_pow+0x46>
 8019aba:	d103      	bne.n	8019ac4 <__ieee754_pow+0x3c>
 8019abc:	b97a      	cbnz	r2, 8019ade <__ieee754_pow+0x56>
 8019abe:	42a6      	cmp	r6, r4
 8019ac0:	dd02      	ble.n	8019ac8 <__ieee754_pow+0x40>
 8019ac2:	e00c      	b.n	8019ade <__ieee754_pow+0x56>
 8019ac4:	428e      	cmp	r6, r1
 8019ac6:	dc02      	bgt.n	8019ace <__ieee754_pow+0x46>
 8019ac8:	428e      	cmp	r6, r1
 8019aca:	d110      	bne.n	8019aee <__ieee754_pow+0x66>
 8019acc:	b178      	cbz	r0, 8019aee <__ieee754_pow+0x66>
 8019ace:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019ad2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019ad6:	ea54 0308 	orrs.w	r3, r4, r8
 8019ada:	f000 84b7 	beq.w	801a44c <__ieee754_pow+0x9c4>
 8019ade:	4873      	ldr	r0, [pc, #460]	; (8019cac <__ieee754_pow+0x224>)
 8019ae0:	b00d      	add	sp, #52	; 0x34
 8019ae2:	ecbd 8b06 	vpop	{d8-d10}
 8019ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aea:	f000 bdb9 	b.w	801a660 <nan>
 8019aee:	f1b9 0f00 	cmp.w	r9, #0
 8019af2:	da36      	bge.n	8019b62 <__ieee754_pow+0xda>
 8019af4:	496e      	ldr	r1, [pc, #440]	; (8019cb0 <__ieee754_pow+0x228>)
 8019af6:	428e      	cmp	r6, r1
 8019af8:	dc51      	bgt.n	8019b9e <__ieee754_pow+0x116>
 8019afa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8019afe:	428e      	cmp	r6, r1
 8019b00:	f340 84af 	ble.w	801a462 <__ieee754_pow+0x9da>
 8019b04:	1531      	asrs	r1, r6, #20
 8019b06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8019b0a:	2914      	cmp	r1, #20
 8019b0c:	dd0f      	ble.n	8019b2e <__ieee754_pow+0xa6>
 8019b0e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8019b12:	fa20 fc01 	lsr.w	ip, r0, r1
 8019b16:	fa0c f101 	lsl.w	r1, ip, r1
 8019b1a:	4281      	cmp	r1, r0
 8019b1c:	f040 84a1 	bne.w	801a462 <__ieee754_pow+0x9da>
 8019b20:	f00c 0c01 	and.w	ip, ip, #1
 8019b24:	f1cc 0102 	rsb	r1, ip, #2
 8019b28:	9100      	str	r1, [sp, #0]
 8019b2a:	b180      	cbz	r0, 8019b4e <__ieee754_pow+0xc6>
 8019b2c:	e059      	b.n	8019be2 <__ieee754_pow+0x15a>
 8019b2e:	2800      	cmp	r0, #0
 8019b30:	d155      	bne.n	8019bde <__ieee754_pow+0x156>
 8019b32:	f1c1 0114 	rsb	r1, r1, #20
 8019b36:	fa46 fc01 	asr.w	ip, r6, r1
 8019b3a:	fa0c f101 	lsl.w	r1, ip, r1
 8019b3e:	42b1      	cmp	r1, r6
 8019b40:	f040 848c 	bne.w	801a45c <__ieee754_pow+0x9d4>
 8019b44:	f00c 0c01 	and.w	ip, ip, #1
 8019b48:	f1cc 0102 	rsb	r1, ip, #2
 8019b4c:	9100      	str	r1, [sp, #0]
 8019b4e:	4959      	ldr	r1, [pc, #356]	; (8019cb4 <__ieee754_pow+0x22c>)
 8019b50:	428e      	cmp	r6, r1
 8019b52:	d12d      	bne.n	8019bb0 <__ieee754_pow+0x128>
 8019b54:	2f00      	cmp	r7, #0
 8019b56:	da79      	bge.n	8019c4c <__ieee754_pow+0x1c4>
 8019b58:	4956      	ldr	r1, [pc, #344]	; (8019cb4 <__ieee754_pow+0x22c>)
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f7e6 fe86 	bl	800086c <__aeabi_ddiv>
 8019b60:	e016      	b.n	8019b90 <__ieee754_pow+0x108>
 8019b62:	2100      	movs	r1, #0
 8019b64:	9100      	str	r1, [sp, #0]
 8019b66:	2800      	cmp	r0, #0
 8019b68:	d13b      	bne.n	8019be2 <__ieee754_pow+0x15a>
 8019b6a:	494f      	ldr	r1, [pc, #316]	; (8019ca8 <__ieee754_pow+0x220>)
 8019b6c:	428e      	cmp	r6, r1
 8019b6e:	d1ee      	bne.n	8019b4e <__ieee754_pow+0xc6>
 8019b70:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019b74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019b78:	ea53 0308 	orrs.w	r3, r3, r8
 8019b7c:	f000 8466 	beq.w	801a44c <__ieee754_pow+0x9c4>
 8019b80:	4b4d      	ldr	r3, [pc, #308]	; (8019cb8 <__ieee754_pow+0x230>)
 8019b82:	429c      	cmp	r4, r3
 8019b84:	dd0d      	ble.n	8019ba2 <__ieee754_pow+0x11a>
 8019b86:	2f00      	cmp	r7, #0
 8019b88:	f280 8464 	bge.w	801a454 <__ieee754_pow+0x9cc>
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	2100      	movs	r1, #0
 8019b90:	ec41 0b10 	vmov	d0, r0, r1
 8019b94:	b00d      	add	sp, #52	; 0x34
 8019b96:	ecbd 8b06 	vpop	{d8-d10}
 8019b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9e:	2102      	movs	r1, #2
 8019ba0:	e7e0      	b.n	8019b64 <__ieee754_pow+0xdc>
 8019ba2:	2f00      	cmp	r7, #0
 8019ba4:	daf2      	bge.n	8019b8c <__ieee754_pow+0x104>
 8019ba6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8019baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019bae:	e7ef      	b.n	8019b90 <__ieee754_pow+0x108>
 8019bb0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8019bb4:	d104      	bne.n	8019bc0 <__ieee754_pow+0x138>
 8019bb6:	4610      	mov	r0, r2
 8019bb8:	4619      	mov	r1, r3
 8019bba:	f7e6 fd2d 	bl	8000618 <__aeabi_dmul>
 8019bbe:	e7e7      	b.n	8019b90 <__ieee754_pow+0x108>
 8019bc0:	493e      	ldr	r1, [pc, #248]	; (8019cbc <__ieee754_pow+0x234>)
 8019bc2:	428f      	cmp	r7, r1
 8019bc4:	d10d      	bne.n	8019be2 <__ieee754_pow+0x15a>
 8019bc6:	f1b9 0f00 	cmp.w	r9, #0
 8019bca:	db0a      	blt.n	8019be2 <__ieee754_pow+0x15a>
 8019bcc:	ec43 2b10 	vmov	d0, r2, r3
 8019bd0:	b00d      	add	sp, #52	; 0x34
 8019bd2:	ecbd 8b06 	vpop	{d8-d10}
 8019bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bda:	f000 bc77 	b.w	801a4cc <__ieee754_sqrt>
 8019bde:	2100      	movs	r1, #0
 8019be0:	9100      	str	r1, [sp, #0]
 8019be2:	ec43 2b10 	vmov	d0, r2, r3
 8019be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019bea:	f000 fd23 	bl	801a634 <fabs>
 8019bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019bf2:	ec51 0b10 	vmov	r0, r1, d0
 8019bf6:	f1b8 0f00 	cmp.w	r8, #0
 8019bfa:	d12a      	bne.n	8019c52 <__ieee754_pow+0x1ca>
 8019bfc:	b12c      	cbz	r4, 8019c0a <__ieee754_pow+0x182>
 8019bfe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8019cb4 <__ieee754_pow+0x22c>
 8019c02:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8019c06:	45e6      	cmp	lr, ip
 8019c08:	d123      	bne.n	8019c52 <__ieee754_pow+0x1ca>
 8019c0a:	2f00      	cmp	r7, #0
 8019c0c:	da05      	bge.n	8019c1a <__ieee754_pow+0x192>
 8019c0e:	4602      	mov	r2, r0
 8019c10:	460b      	mov	r3, r1
 8019c12:	2000      	movs	r0, #0
 8019c14:	4927      	ldr	r1, [pc, #156]	; (8019cb4 <__ieee754_pow+0x22c>)
 8019c16:	f7e6 fe29 	bl	800086c <__aeabi_ddiv>
 8019c1a:	f1b9 0f00 	cmp.w	r9, #0
 8019c1e:	dab7      	bge.n	8019b90 <__ieee754_pow+0x108>
 8019c20:	9b00      	ldr	r3, [sp, #0]
 8019c22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019c26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019c2a:	4323      	orrs	r3, r4
 8019c2c:	d108      	bne.n	8019c40 <__ieee754_pow+0x1b8>
 8019c2e:	4602      	mov	r2, r0
 8019c30:	460b      	mov	r3, r1
 8019c32:	4610      	mov	r0, r2
 8019c34:	4619      	mov	r1, r3
 8019c36:	f7e6 fb37 	bl	80002a8 <__aeabi_dsub>
 8019c3a:	4602      	mov	r2, r0
 8019c3c:	460b      	mov	r3, r1
 8019c3e:	e78d      	b.n	8019b5c <__ieee754_pow+0xd4>
 8019c40:	9b00      	ldr	r3, [sp, #0]
 8019c42:	2b01      	cmp	r3, #1
 8019c44:	d1a4      	bne.n	8019b90 <__ieee754_pow+0x108>
 8019c46:	4602      	mov	r2, r0
 8019c48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c4c:	4610      	mov	r0, r2
 8019c4e:	4619      	mov	r1, r3
 8019c50:	e79e      	b.n	8019b90 <__ieee754_pow+0x108>
 8019c52:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019c56:	f10c 35ff 	add.w	r5, ip, #4294967295
 8019c5a:	950a      	str	r5, [sp, #40]	; 0x28
 8019c5c:	9d00      	ldr	r5, [sp, #0]
 8019c5e:	46ac      	mov	ip, r5
 8019c60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019c62:	ea5c 0505 	orrs.w	r5, ip, r5
 8019c66:	d0e4      	beq.n	8019c32 <__ieee754_pow+0x1aa>
 8019c68:	4b15      	ldr	r3, [pc, #84]	; (8019cc0 <__ieee754_pow+0x238>)
 8019c6a:	429e      	cmp	r6, r3
 8019c6c:	f340 80fc 	ble.w	8019e68 <__ieee754_pow+0x3e0>
 8019c70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019c74:	429e      	cmp	r6, r3
 8019c76:	4b10      	ldr	r3, [pc, #64]	; (8019cb8 <__ieee754_pow+0x230>)
 8019c78:	dd07      	ble.n	8019c8a <__ieee754_pow+0x202>
 8019c7a:	429c      	cmp	r4, r3
 8019c7c:	dc0a      	bgt.n	8019c94 <__ieee754_pow+0x20c>
 8019c7e:	2f00      	cmp	r7, #0
 8019c80:	da84      	bge.n	8019b8c <__ieee754_pow+0x104>
 8019c82:	a307      	add	r3, pc, #28	; (adr r3, 8019ca0 <__ieee754_pow+0x218>)
 8019c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c88:	e795      	b.n	8019bb6 <__ieee754_pow+0x12e>
 8019c8a:	429c      	cmp	r4, r3
 8019c8c:	dbf7      	blt.n	8019c7e <__ieee754_pow+0x1f6>
 8019c8e:	4b09      	ldr	r3, [pc, #36]	; (8019cb4 <__ieee754_pow+0x22c>)
 8019c90:	429c      	cmp	r4, r3
 8019c92:	dd17      	ble.n	8019cc4 <__ieee754_pow+0x23c>
 8019c94:	2f00      	cmp	r7, #0
 8019c96:	dcf4      	bgt.n	8019c82 <__ieee754_pow+0x1fa>
 8019c98:	e778      	b.n	8019b8c <__ieee754_pow+0x104>
 8019c9a:	bf00      	nop
 8019c9c:	f3af 8000 	nop.w
 8019ca0:	8800759c 	.word	0x8800759c
 8019ca4:	7e37e43c 	.word	0x7e37e43c
 8019ca8:	7ff00000 	.word	0x7ff00000
 8019cac:	08021d03 	.word	0x08021d03
 8019cb0:	433fffff 	.word	0x433fffff
 8019cb4:	3ff00000 	.word	0x3ff00000
 8019cb8:	3fefffff 	.word	0x3fefffff
 8019cbc:	3fe00000 	.word	0x3fe00000
 8019cc0:	41e00000 	.word	0x41e00000
 8019cc4:	4b64      	ldr	r3, [pc, #400]	; (8019e58 <__ieee754_pow+0x3d0>)
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f7e6 faee 	bl	80002a8 <__aeabi_dsub>
 8019ccc:	a356      	add	r3, pc, #344	; (adr r3, 8019e28 <__ieee754_pow+0x3a0>)
 8019cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd2:	4604      	mov	r4, r0
 8019cd4:	460d      	mov	r5, r1
 8019cd6:	f7e6 fc9f 	bl	8000618 <__aeabi_dmul>
 8019cda:	a355      	add	r3, pc, #340	; (adr r3, 8019e30 <__ieee754_pow+0x3a8>)
 8019cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce0:	4606      	mov	r6, r0
 8019ce2:	460f      	mov	r7, r1
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	4629      	mov	r1, r5
 8019ce8:	f7e6 fc96 	bl	8000618 <__aeabi_dmul>
 8019cec:	4b5b      	ldr	r3, [pc, #364]	; (8019e5c <__ieee754_pow+0x3d4>)
 8019cee:	4682      	mov	sl, r0
 8019cf0:	468b      	mov	fp, r1
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	4629      	mov	r1, r5
 8019cf8:	f7e6 fc8e 	bl	8000618 <__aeabi_dmul>
 8019cfc:	4602      	mov	r2, r0
 8019cfe:	460b      	mov	r3, r1
 8019d00:	a14d      	add	r1, pc, #308	; (adr r1, 8019e38 <__ieee754_pow+0x3b0>)
 8019d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d06:	f7e6 facf 	bl	80002a8 <__aeabi_dsub>
 8019d0a:	4622      	mov	r2, r4
 8019d0c:	462b      	mov	r3, r5
 8019d0e:	f7e6 fc83 	bl	8000618 <__aeabi_dmul>
 8019d12:	4602      	mov	r2, r0
 8019d14:	460b      	mov	r3, r1
 8019d16:	2000      	movs	r0, #0
 8019d18:	4951      	ldr	r1, [pc, #324]	; (8019e60 <__ieee754_pow+0x3d8>)
 8019d1a:	f7e6 fac5 	bl	80002a8 <__aeabi_dsub>
 8019d1e:	4622      	mov	r2, r4
 8019d20:	4680      	mov	r8, r0
 8019d22:	4689      	mov	r9, r1
 8019d24:	462b      	mov	r3, r5
 8019d26:	4620      	mov	r0, r4
 8019d28:	4629      	mov	r1, r5
 8019d2a:	f7e6 fc75 	bl	8000618 <__aeabi_dmul>
 8019d2e:	4602      	mov	r2, r0
 8019d30:	460b      	mov	r3, r1
 8019d32:	4640      	mov	r0, r8
 8019d34:	4649      	mov	r1, r9
 8019d36:	f7e6 fc6f 	bl	8000618 <__aeabi_dmul>
 8019d3a:	a341      	add	r3, pc, #260	; (adr r3, 8019e40 <__ieee754_pow+0x3b8>)
 8019d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d40:	f7e6 fc6a 	bl	8000618 <__aeabi_dmul>
 8019d44:	4602      	mov	r2, r0
 8019d46:	460b      	mov	r3, r1
 8019d48:	4650      	mov	r0, sl
 8019d4a:	4659      	mov	r1, fp
 8019d4c:	f7e6 faac 	bl	80002a8 <__aeabi_dsub>
 8019d50:	4602      	mov	r2, r0
 8019d52:	460b      	mov	r3, r1
 8019d54:	4680      	mov	r8, r0
 8019d56:	4689      	mov	r9, r1
 8019d58:	4630      	mov	r0, r6
 8019d5a:	4639      	mov	r1, r7
 8019d5c:	f7e6 faa6 	bl	80002ac <__adddf3>
 8019d60:	2400      	movs	r4, #0
 8019d62:	4632      	mov	r2, r6
 8019d64:	463b      	mov	r3, r7
 8019d66:	4620      	mov	r0, r4
 8019d68:	460d      	mov	r5, r1
 8019d6a:	f7e6 fa9d 	bl	80002a8 <__aeabi_dsub>
 8019d6e:	4602      	mov	r2, r0
 8019d70:	460b      	mov	r3, r1
 8019d72:	4640      	mov	r0, r8
 8019d74:	4649      	mov	r1, r9
 8019d76:	f7e6 fa97 	bl	80002a8 <__aeabi_dsub>
 8019d7a:	9b00      	ldr	r3, [sp, #0]
 8019d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	4313      	orrs	r3, r2
 8019d82:	4682      	mov	sl, r0
 8019d84:	468b      	mov	fp, r1
 8019d86:	f040 81f1 	bne.w	801a16c <__ieee754_pow+0x6e4>
 8019d8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019e48 <__ieee754_pow+0x3c0>
 8019d8e:	eeb0 8a47 	vmov.f32	s16, s14
 8019d92:	eef0 8a67 	vmov.f32	s17, s15
 8019d96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019d9a:	2600      	movs	r6, #0
 8019d9c:	4632      	mov	r2, r6
 8019d9e:	463b      	mov	r3, r7
 8019da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019da4:	f7e6 fa80 	bl	80002a8 <__aeabi_dsub>
 8019da8:	4622      	mov	r2, r4
 8019daa:	462b      	mov	r3, r5
 8019dac:	f7e6 fc34 	bl	8000618 <__aeabi_dmul>
 8019db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019db4:	4680      	mov	r8, r0
 8019db6:	4689      	mov	r9, r1
 8019db8:	4650      	mov	r0, sl
 8019dba:	4659      	mov	r1, fp
 8019dbc:	f7e6 fc2c 	bl	8000618 <__aeabi_dmul>
 8019dc0:	4602      	mov	r2, r0
 8019dc2:	460b      	mov	r3, r1
 8019dc4:	4640      	mov	r0, r8
 8019dc6:	4649      	mov	r1, r9
 8019dc8:	f7e6 fa70 	bl	80002ac <__adddf3>
 8019dcc:	4632      	mov	r2, r6
 8019dce:	463b      	mov	r3, r7
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	4689      	mov	r9, r1
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	4629      	mov	r1, r5
 8019dd8:	f7e6 fc1e 	bl	8000618 <__aeabi_dmul>
 8019ddc:	460b      	mov	r3, r1
 8019dde:	4604      	mov	r4, r0
 8019de0:	460d      	mov	r5, r1
 8019de2:	4602      	mov	r2, r0
 8019de4:	4649      	mov	r1, r9
 8019de6:	4640      	mov	r0, r8
 8019de8:	f7e6 fa60 	bl	80002ac <__adddf3>
 8019dec:	4b1d      	ldr	r3, [pc, #116]	; (8019e64 <__ieee754_pow+0x3dc>)
 8019dee:	4299      	cmp	r1, r3
 8019df0:	ec45 4b19 	vmov	d9, r4, r5
 8019df4:	4606      	mov	r6, r0
 8019df6:	460f      	mov	r7, r1
 8019df8:	468b      	mov	fp, r1
 8019dfa:	f340 82fe 	ble.w	801a3fa <__ieee754_pow+0x972>
 8019dfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019e02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019e06:	4303      	orrs	r3, r0
 8019e08:	f000 81f0 	beq.w	801a1ec <__ieee754_pow+0x764>
 8019e0c:	a310      	add	r3, pc, #64	; (adr r3, 8019e50 <__ieee754_pow+0x3c8>)
 8019e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e12:	ec51 0b18 	vmov	r0, r1, d8
 8019e16:	f7e6 fbff 	bl	8000618 <__aeabi_dmul>
 8019e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8019e50 <__ieee754_pow+0x3c8>)
 8019e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e20:	e6cb      	b.n	8019bba <__ieee754_pow+0x132>
 8019e22:	bf00      	nop
 8019e24:	f3af 8000 	nop.w
 8019e28:	60000000 	.word	0x60000000
 8019e2c:	3ff71547 	.word	0x3ff71547
 8019e30:	f85ddf44 	.word	0xf85ddf44
 8019e34:	3e54ae0b 	.word	0x3e54ae0b
 8019e38:	55555555 	.word	0x55555555
 8019e3c:	3fd55555 	.word	0x3fd55555
 8019e40:	652b82fe 	.word	0x652b82fe
 8019e44:	3ff71547 	.word	0x3ff71547
 8019e48:	00000000 	.word	0x00000000
 8019e4c:	bff00000 	.word	0xbff00000
 8019e50:	8800759c 	.word	0x8800759c
 8019e54:	7e37e43c 	.word	0x7e37e43c
 8019e58:	3ff00000 	.word	0x3ff00000
 8019e5c:	3fd00000 	.word	0x3fd00000
 8019e60:	3fe00000 	.word	0x3fe00000
 8019e64:	408fffff 	.word	0x408fffff
 8019e68:	4bd7      	ldr	r3, [pc, #860]	; (801a1c8 <__ieee754_pow+0x740>)
 8019e6a:	ea03 0309 	and.w	r3, r3, r9
 8019e6e:	2200      	movs	r2, #0
 8019e70:	b92b      	cbnz	r3, 8019e7e <__ieee754_pow+0x3f6>
 8019e72:	4bd6      	ldr	r3, [pc, #856]	; (801a1cc <__ieee754_pow+0x744>)
 8019e74:	f7e6 fbd0 	bl	8000618 <__aeabi_dmul>
 8019e78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019e7c:	460c      	mov	r4, r1
 8019e7e:	1523      	asrs	r3, r4, #20
 8019e80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019e84:	4413      	add	r3, r2
 8019e86:	9309      	str	r3, [sp, #36]	; 0x24
 8019e88:	4bd1      	ldr	r3, [pc, #836]	; (801a1d0 <__ieee754_pow+0x748>)
 8019e8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019e8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019e92:	429c      	cmp	r4, r3
 8019e94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019e98:	dd08      	ble.n	8019eac <__ieee754_pow+0x424>
 8019e9a:	4bce      	ldr	r3, [pc, #824]	; (801a1d4 <__ieee754_pow+0x74c>)
 8019e9c:	429c      	cmp	r4, r3
 8019e9e:	f340 8163 	ble.w	801a168 <__ieee754_pow+0x6e0>
 8019ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ea4:	3301      	adds	r3, #1
 8019ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ea8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019eac:	2400      	movs	r4, #0
 8019eae:	00e3      	lsls	r3, r4, #3
 8019eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019eb2:	4bc9      	ldr	r3, [pc, #804]	; (801a1d8 <__ieee754_pow+0x750>)
 8019eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019eb8:	ed93 7b00 	vldr	d7, [r3]
 8019ebc:	4629      	mov	r1, r5
 8019ebe:	ec53 2b17 	vmov	r2, r3, d7
 8019ec2:	eeb0 8a47 	vmov.f32	s16, s14
 8019ec6:	eef0 8a67 	vmov.f32	s17, s15
 8019eca:	4682      	mov	sl, r0
 8019ecc:	f7e6 f9ec 	bl	80002a8 <__aeabi_dsub>
 8019ed0:	4652      	mov	r2, sl
 8019ed2:	4606      	mov	r6, r0
 8019ed4:	460f      	mov	r7, r1
 8019ed6:	462b      	mov	r3, r5
 8019ed8:	ec51 0b18 	vmov	r0, r1, d8
 8019edc:	f7e6 f9e6 	bl	80002ac <__adddf3>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	2000      	movs	r0, #0
 8019ee6:	49bd      	ldr	r1, [pc, #756]	; (801a1dc <__ieee754_pow+0x754>)
 8019ee8:	f7e6 fcc0 	bl	800086c <__aeabi_ddiv>
 8019eec:	ec41 0b19 	vmov	d9, r0, r1
 8019ef0:	4602      	mov	r2, r0
 8019ef2:	460b      	mov	r3, r1
 8019ef4:	4630      	mov	r0, r6
 8019ef6:	4639      	mov	r1, r7
 8019ef8:	f7e6 fb8e 	bl	8000618 <__aeabi_dmul>
 8019efc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019f08:	2300      	movs	r3, #0
 8019f0a:	9304      	str	r3, [sp, #16]
 8019f0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019f10:	46ab      	mov	fp, r5
 8019f12:	106d      	asrs	r5, r5, #1
 8019f14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019f18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019f1c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019f20:	2200      	movs	r2, #0
 8019f22:	4640      	mov	r0, r8
 8019f24:	4649      	mov	r1, r9
 8019f26:	4614      	mov	r4, r2
 8019f28:	461d      	mov	r5, r3
 8019f2a:	f7e6 fb75 	bl	8000618 <__aeabi_dmul>
 8019f2e:	4602      	mov	r2, r0
 8019f30:	460b      	mov	r3, r1
 8019f32:	4630      	mov	r0, r6
 8019f34:	4639      	mov	r1, r7
 8019f36:	f7e6 f9b7 	bl	80002a8 <__aeabi_dsub>
 8019f3a:	ec53 2b18 	vmov	r2, r3, d8
 8019f3e:	4606      	mov	r6, r0
 8019f40:	460f      	mov	r7, r1
 8019f42:	4620      	mov	r0, r4
 8019f44:	4629      	mov	r1, r5
 8019f46:	f7e6 f9af 	bl	80002a8 <__aeabi_dsub>
 8019f4a:	4602      	mov	r2, r0
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	4650      	mov	r0, sl
 8019f50:	4659      	mov	r1, fp
 8019f52:	f7e6 f9a9 	bl	80002a8 <__aeabi_dsub>
 8019f56:	4642      	mov	r2, r8
 8019f58:	464b      	mov	r3, r9
 8019f5a:	f7e6 fb5d 	bl	8000618 <__aeabi_dmul>
 8019f5e:	4602      	mov	r2, r0
 8019f60:	460b      	mov	r3, r1
 8019f62:	4630      	mov	r0, r6
 8019f64:	4639      	mov	r1, r7
 8019f66:	f7e6 f99f 	bl	80002a8 <__aeabi_dsub>
 8019f6a:	ec53 2b19 	vmov	r2, r3, d9
 8019f6e:	f7e6 fb53 	bl	8000618 <__aeabi_dmul>
 8019f72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f76:	ec41 0b18 	vmov	d8, r0, r1
 8019f7a:	4610      	mov	r0, r2
 8019f7c:	4619      	mov	r1, r3
 8019f7e:	f7e6 fb4b 	bl	8000618 <__aeabi_dmul>
 8019f82:	a37d      	add	r3, pc, #500	; (adr r3, 801a178 <__ieee754_pow+0x6f0>)
 8019f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f88:	4604      	mov	r4, r0
 8019f8a:	460d      	mov	r5, r1
 8019f8c:	f7e6 fb44 	bl	8000618 <__aeabi_dmul>
 8019f90:	a37b      	add	r3, pc, #492	; (adr r3, 801a180 <__ieee754_pow+0x6f8>)
 8019f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f96:	f7e6 f989 	bl	80002ac <__adddf3>
 8019f9a:	4622      	mov	r2, r4
 8019f9c:	462b      	mov	r3, r5
 8019f9e:	f7e6 fb3b 	bl	8000618 <__aeabi_dmul>
 8019fa2:	a379      	add	r3, pc, #484	; (adr r3, 801a188 <__ieee754_pow+0x700>)
 8019fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa8:	f7e6 f980 	bl	80002ac <__adddf3>
 8019fac:	4622      	mov	r2, r4
 8019fae:	462b      	mov	r3, r5
 8019fb0:	f7e6 fb32 	bl	8000618 <__aeabi_dmul>
 8019fb4:	a376      	add	r3, pc, #472	; (adr r3, 801a190 <__ieee754_pow+0x708>)
 8019fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fba:	f7e6 f977 	bl	80002ac <__adddf3>
 8019fbe:	4622      	mov	r2, r4
 8019fc0:	462b      	mov	r3, r5
 8019fc2:	f7e6 fb29 	bl	8000618 <__aeabi_dmul>
 8019fc6:	a374      	add	r3, pc, #464	; (adr r3, 801a198 <__ieee754_pow+0x710>)
 8019fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fcc:	f7e6 f96e 	bl	80002ac <__adddf3>
 8019fd0:	4622      	mov	r2, r4
 8019fd2:	462b      	mov	r3, r5
 8019fd4:	f7e6 fb20 	bl	8000618 <__aeabi_dmul>
 8019fd8:	a371      	add	r3, pc, #452	; (adr r3, 801a1a0 <__ieee754_pow+0x718>)
 8019fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fde:	f7e6 f965 	bl	80002ac <__adddf3>
 8019fe2:	4622      	mov	r2, r4
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	460f      	mov	r7, r1
 8019fe8:	462b      	mov	r3, r5
 8019fea:	4620      	mov	r0, r4
 8019fec:	4629      	mov	r1, r5
 8019fee:	f7e6 fb13 	bl	8000618 <__aeabi_dmul>
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	4639      	mov	r1, r7
 8019ffa:	f7e6 fb0d 	bl	8000618 <__aeabi_dmul>
 8019ffe:	4642      	mov	r2, r8
 801a000:	4604      	mov	r4, r0
 801a002:	460d      	mov	r5, r1
 801a004:	464b      	mov	r3, r9
 801a006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a00a:	f7e6 f94f 	bl	80002ac <__adddf3>
 801a00e:	ec53 2b18 	vmov	r2, r3, d8
 801a012:	f7e6 fb01 	bl	8000618 <__aeabi_dmul>
 801a016:	4622      	mov	r2, r4
 801a018:	462b      	mov	r3, r5
 801a01a:	f7e6 f947 	bl	80002ac <__adddf3>
 801a01e:	4642      	mov	r2, r8
 801a020:	4682      	mov	sl, r0
 801a022:	468b      	mov	fp, r1
 801a024:	464b      	mov	r3, r9
 801a026:	4640      	mov	r0, r8
 801a028:	4649      	mov	r1, r9
 801a02a:	f7e6 faf5 	bl	8000618 <__aeabi_dmul>
 801a02e:	4b6c      	ldr	r3, [pc, #432]	; (801a1e0 <__ieee754_pow+0x758>)
 801a030:	2200      	movs	r2, #0
 801a032:	4606      	mov	r6, r0
 801a034:	460f      	mov	r7, r1
 801a036:	f7e6 f939 	bl	80002ac <__adddf3>
 801a03a:	4652      	mov	r2, sl
 801a03c:	465b      	mov	r3, fp
 801a03e:	f7e6 f935 	bl	80002ac <__adddf3>
 801a042:	9c04      	ldr	r4, [sp, #16]
 801a044:	460d      	mov	r5, r1
 801a046:	4622      	mov	r2, r4
 801a048:	460b      	mov	r3, r1
 801a04a:	4640      	mov	r0, r8
 801a04c:	4649      	mov	r1, r9
 801a04e:	f7e6 fae3 	bl	8000618 <__aeabi_dmul>
 801a052:	4b63      	ldr	r3, [pc, #396]	; (801a1e0 <__ieee754_pow+0x758>)
 801a054:	4680      	mov	r8, r0
 801a056:	4689      	mov	r9, r1
 801a058:	2200      	movs	r2, #0
 801a05a:	4620      	mov	r0, r4
 801a05c:	4629      	mov	r1, r5
 801a05e:	f7e6 f923 	bl	80002a8 <__aeabi_dsub>
 801a062:	4632      	mov	r2, r6
 801a064:	463b      	mov	r3, r7
 801a066:	f7e6 f91f 	bl	80002a8 <__aeabi_dsub>
 801a06a:	4602      	mov	r2, r0
 801a06c:	460b      	mov	r3, r1
 801a06e:	4650      	mov	r0, sl
 801a070:	4659      	mov	r1, fp
 801a072:	f7e6 f919 	bl	80002a8 <__aeabi_dsub>
 801a076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a07a:	f7e6 facd 	bl	8000618 <__aeabi_dmul>
 801a07e:	4622      	mov	r2, r4
 801a080:	4606      	mov	r6, r0
 801a082:	460f      	mov	r7, r1
 801a084:	462b      	mov	r3, r5
 801a086:	ec51 0b18 	vmov	r0, r1, d8
 801a08a:	f7e6 fac5 	bl	8000618 <__aeabi_dmul>
 801a08e:	4602      	mov	r2, r0
 801a090:	460b      	mov	r3, r1
 801a092:	4630      	mov	r0, r6
 801a094:	4639      	mov	r1, r7
 801a096:	f7e6 f909 	bl	80002ac <__adddf3>
 801a09a:	4606      	mov	r6, r0
 801a09c:	460f      	mov	r7, r1
 801a09e:	4602      	mov	r2, r0
 801a0a0:	460b      	mov	r3, r1
 801a0a2:	4640      	mov	r0, r8
 801a0a4:	4649      	mov	r1, r9
 801a0a6:	f7e6 f901 	bl	80002ac <__adddf3>
 801a0aa:	9c04      	ldr	r4, [sp, #16]
 801a0ac:	a33e      	add	r3, pc, #248	; (adr r3, 801a1a8 <__ieee754_pow+0x720>)
 801a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	460d      	mov	r5, r1
 801a0b6:	f7e6 faaf 	bl	8000618 <__aeabi_dmul>
 801a0ba:	4642      	mov	r2, r8
 801a0bc:	ec41 0b18 	vmov	d8, r0, r1
 801a0c0:	464b      	mov	r3, r9
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	4629      	mov	r1, r5
 801a0c6:	f7e6 f8ef 	bl	80002a8 <__aeabi_dsub>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	460b      	mov	r3, r1
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	4639      	mov	r1, r7
 801a0d2:	f7e6 f8e9 	bl	80002a8 <__aeabi_dsub>
 801a0d6:	a336      	add	r3, pc, #216	; (adr r3, 801a1b0 <__ieee754_pow+0x728>)
 801a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0dc:	f7e6 fa9c 	bl	8000618 <__aeabi_dmul>
 801a0e0:	a335      	add	r3, pc, #212	; (adr r3, 801a1b8 <__ieee754_pow+0x730>)
 801a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e6:	4606      	mov	r6, r0
 801a0e8:	460f      	mov	r7, r1
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	f7e6 fa93 	bl	8000618 <__aeabi_dmul>
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	460b      	mov	r3, r1
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	4639      	mov	r1, r7
 801a0fa:	f7e6 f8d7 	bl	80002ac <__adddf3>
 801a0fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a100:	4b38      	ldr	r3, [pc, #224]	; (801a1e4 <__ieee754_pow+0x75c>)
 801a102:	4413      	add	r3, r2
 801a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a108:	f7e6 f8d0 	bl	80002ac <__adddf3>
 801a10c:	4682      	mov	sl, r0
 801a10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a110:	468b      	mov	fp, r1
 801a112:	f7e6 fa17 	bl	8000544 <__aeabi_i2d>
 801a116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a118:	4b33      	ldr	r3, [pc, #204]	; (801a1e8 <__ieee754_pow+0x760>)
 801a11a:	4413      	add	r3, r2
 801a11c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a120:	4606      	mov	r6, r0
 801a122:	460f      	mov	r7, r1
 801a124:	4652      	mov	r2, sl
 801a126:	465b      	mov	r3, fp
 801a128:	ec51 0b18 	vmov	r0, r1, d8
 801a12c:	f7e6 f8be 	bl	80002ac <__adddf3>
 801a130:	4642      	mov	r2, r8
 801a132:	464b      	mov	r3, r9
 801a134:	f7e6 f8ba 	bl	80002ac <__adddf3>
 801a138:	4632      	mov	r2, r6
 801a13a:	463b      	mov	r3, r7
 801a13c:	f7e6 f8b6 	bl	80002ac <__adddf3>
 801a140:	9c04      	ldr	r4, [sp, #16]
 801a142:	4632      	mov	r2, r6
 801a144:	463b      	mov	r3, r7
 801a146:	4620      	mov	r0, r4
 801a148:	460d      	mov	r5, r1
 801a14a:	f7e6 f8ad 	bl	80002a8 <__aeabi_dsub>
 801a14e:	4642      	mov	r2, r8
 801a150:	464b      	mov	r3, r9
 801a152:	f7e6 f8a9 	bl	80002a8 <__aeabi_dsub>
 801a156:	ec53 2b18 	vmov	r2, r3, d8
 801a15a:	f7e6 f8a5 	bl	80002a8 <__aeabi_dsub>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	4650      	mov	r0, sl
 801a164:	4659      	mov	r1, fp
 801a166:	e606      	b.n	8019d76 <__ieee754_pow+0x2ee>
 801a168:	2401      	movs	r4, #1
 801a16a:	e6a0      	b.n	8019eae <__ieee754_pow+0x426>
 801a16c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801a1c0 <__ieee754_pow+0x738>
 801a170:	e60d      	b.n	8019d8e <__ieee754_pow+0x306>
 801a172:	bf00      	nop
 801a174:	f3af 8000 	nop.w
 801a178:	4a454eef 	.word	0x4a454eef
 801a17c:	3fca7e28 	.word	0x3fca7e28
 801a180:	93c9db65 	.word	0x93c9db65
 801a184:	3fcd864a 	.word	0x3fcd864a
 801a188:	a91d4101 	.word	0xa91d4101
 801a18c:	3fd17460 	.word	0x3fd17460
 801a190:	518f264d 	.word	0x518f264d
 801a194:	3fd55555 	.word	0x3fd55555
 801a198:	db6fabff 	.word	0xdb6fabff
 801a19c:	3fdb6db6 	.word	0x3fdb6db6
 801a1a0:	33333303 	.word	0x33333303
 801a1a4:	3fe33333 	.word	0x3fe33333
 801a1a8:	e0000000 	.word	0xe0000000
 801a1ac:	3feec709 	.word	0x3feec709
 801a1b0:	dc3a03fd 	.word	0xdc3a03fd
 801a1b4:	3feec709 	.word	0x3feec709
 801a1b8:	145b01f5 	.word	0x145b01f5
 801a1bc:	be3e2fe0 	.word	0xbe3e2fe0
 801a1c0:	00000000 	.word	0x00000000
 801a1c4:	3ff00000 	.word	0x3ff00000
 801a1c8:	7ff00000 	.word	0x7ff00000
 801a1cc:	43400000 	.word	0x43400000
 801a1d0:	0003988e 	.word	0x0003988e
 801a1d4:	000bb679 	.word	0x000bb679
 801a1d8:	08021a98 	.word	0x08021a98
 801a1dc:	3ff00000 	.word	0x3ff00000
 801a1e0:	40080000 	.word	0x40080000
 801a1e4:	08021ab8 	.word	0x08021ab8
 801a1e8:	08021aa8 	.word	0x08021aa8
 801a1ec:	a3b5      	add	r3, pc, #724	; (adr r3, 801a4c4 <__ieee754_pow+0xa3c>)
 801a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f2:	4640      	mov	r0, r8
 801a1f4:	4649      	mov	r1, r9
 801a1f6:	f7e6 f859 	bl	80002ac <__adddf3>
 801a1fa:	4622      	mov	r2, r4
 801a1fc:	ec41 0b1a 	vmov	d10, r0, r1
 801a200:	462b      	mov	r3, r5
 801a202:	4630      	mov	r0, r6
 801a204:	4639      	mov	r1, r7
 801a206:	f7e6 f84f 	bl	80002a8 <__aeabi_dsub>
 801a20a:	4602      	mov	r2, r0
 801a20c:	460b      	mov	r3, r1
 801a20e:	ec51 0b1a 	vmov	r0, r1, d10
 801a212:	f7e6 fc91 	bl	8000b38 <__aeabi_dcmpgt>
 801a216:	2800      	cmp	r0, #0
 801a218:	f47f adf8 	bne.w	8019e0c <__ieee754_pow+0x384>
 801a21c:	4aa4      	ldr	r2, [pc, #656]	; (801a4b0 <__ieee754_pow+0xa28>)
 801a21e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a222:	4293      	cmp	r3, r2
 801a224:	f340 810b 	ble.w	801a43e <__ieee754_pow+0x9b6>
 801a228:	151b      	asrs	r3, r3, #20
 801a22a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a22e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a232:	fa4a f303 	asr.w	r3, sl, r3
 801a236:	445b      	add	r3, fp
 801a238:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a23c:	4e9d      	ldr	r6, [pc, #628]	; (801a4b4 <__ieee754_pow+0xa2c>)
 801a23e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a242:	4116      	asrs	r6, r2
 801a244:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801a248:	2000      	movs	r0, #0
 801a24a:	ea23 0106 	bic.w	r1, r3, r6
 801a24e:	f1c2 0214 	rsb	r2, r2, #20
 801a252:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a256:	fa4a fa02 	asr.w	sl, sl, r2
 801a25a:	f1bb 0f00 	cmp.w	fp, #0
 801a25e:	4602      	mov	r2, r0
 801a260:	460b      	mov	r3, r1
 801a262:	4620      	mov	r0, r4
 801a264:	4629      	mov	r1, r5
 801a266:	bfb8      	it	lt
 801a268:	f1ca 0a00 	rsblt	sl, sl, #0
 801a26c:	f7e6 f81c 	bl	80002a8 <__aeabi_dsub>
 801a270:	ec41 0b19 	vmov	d9, r0, r1
 801a274:	4642      	mov	r2, r8
 801a276:	464b      	mov	r3, r9
 801a278:	ec51 0b19 	vmov	r0, r1, d9
 801a27c:	f7e6 f816 	bl	80002ac <__adddf3>
 801a280:	2400      	movs	r4, #0
 801a282:	a379      	add	r3, pc, #484	; (adr r3, 801a468 <__ieee754_pow+0x9e0>)
 801a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a288:	4620      	mov	r0, r4
 801a28a:	460d      	mov	r5, r1
 801a28c:	f7e6 f9c4 	bl	8000618 <__aeabi_dmul>
 801a290:	ec53 2b19 	vmov	r2, r3, d9
 801a294:	4606      	mov	r6, r0
 801a296:	460f      	mov	r7, r1
 801a298:	4620      	mov	r0, r4
 801a29a:	4629      	mov	r1, r5
 801a29c:	f7e6 f804 	bl	80002a8 <__aeabi_dsub>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	4640      	mov	r0, r8
 801a2a6:	4649      	mov	r1, r9
 801a2a8:	f7e5 fffe 	bl	80002a8 <__aeabi_dsub>
 801a2ac:	a370      	add	r3, pc, #448	; (adr r3, 801a470 <__ieee754_pow+0x9e8>)
 801a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2b2:	f7e6 f9b1 	bl	8000618 <__aeabi_dmul>
 801a2b6:	a370      	add	r3, pc, #448	; (adr r3, 801a478 <__ieee754_pow+0x9f0>)
 801a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2bc:	4680      	mov	r8, r0
 801a2be:	4689      	mov	r9, r1
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	4629      	mov	r1, r5
 801a2c4:	f7e6 f9a8 	bl	8000618 <__aeabi_dmul>
 801a2c8:	4602      	mov	r2, r0
 801a2ca:	460b      	mov	r3, r1
 801a2cc:	4640      	mov	r0, r8
 801a2ce:	4649      	mov	r1, r9
 801a2d0:	f7e5 ffec 	bl	80002ac <__adddf3>
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	460d      	mov	r5, r1
 801a2d8:	4602      	mov	r2, r0
 801a2da:	460b      	mov	r3, r1
 801a2dc:	4630      	mov	r0, r6
 801a2de:	4639      	mov	r1, r7
 801a2e0:	f7e5 ffe4 	bl	80002ac <__adddf3>
 801a2e4:	4632      	mov	r2, r6
 801a2e6:	463b      	mov	r3, r7
 801a2e8:	4680      	mov	r8, r0
 801a2ea:	4689      	mov	r9, r1
 801a2ec:	f7e5 ffdc 	bl	80002a8 <__aeabi_dsub>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	4629      	mov	r1, r5
 801a2f8:	f7e5 ffd6 	bl	80002a8 <__aeabi_dsub>
 801a2fc:	4642      	mov	r2, r8
 801a2fe:	4606      	mov	r6, r0
 801a300:	460f      	mov	r7, r1
 801a302:	464b      	mov	r3, r9
 801a304:	4640      	mov	r0, r8
 801a306:	4649      	mov	r1, r9
 801a308:	f7e6 f986 	bl	8000618 <__aeabi_dmul>
 801a30c:	a35c      	add	r3, pc, #368	; (adr r3, 801a480 <__ieee754_pow+0x9f8>)
 801a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a312:	4604      	mov	r4, r0
 801a314:	460d      	mov	r5, r1
 801a316:	f7e6 f97f 	bl	8000618 <__aeabi_dmul>
 801a31a:	a35b      	add	r3, pc, #364	; (adr r3, 801a488 <__ieee754_pow+0xa00>)
 801a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a320:	f7e5 ffc2 	bl	80002a8 <__aeabi_dsub>
 801a324:	4622      	mov	r2, r4
 801a326:	462b      	mov	r3, r5
 801a328:	f7e6 f976 	bl	8000618 <__aeabi_dmul>
 801a32c:	a358      	add	r3, pc, #352	; (adr r3, 801a490 <__ieee754_pow+0xa08>)
 801a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a332:	f7e5 ffbb 	bl	80002ac <__adddf3>
 801a336:	4622      	mov	r2, r4
 801a338:	462b      	mov	r3, r5
 801a33a:	f7e6 f96d 	bl	8000618 <__aeabi_dmul>
 801a33e:	a356      	add	r3, pc, #344	; (adr r3, 801a498 <__ieee754_pow+0xa10>)
 801a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a344:	f7e5 ffb0 	bl	80002a8 <__aeabi_dsub>
 801a348:	4622      	mov	r2, r4
 801a34a:	462b      	mov	r3, r5
 801a34c:	f7e6 f964 	bl	8000618 <__aeabi_dmul>
 801a350:	a353      	add	r3, pc, #332	; (adr r3, 801a4a0 <__ieee754_pow+0xa18>)
 801a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a356:	f7e5 ffa9 	bl	80002ac <__adddf3>
 801a35a:	4622      	mov	r2, r4
 801a35c:	462b      	mov	r3, r5
 801a35e:	f7e6 f95b 	bl	8000618 <__aeabi_dmul>
 801a362:	4602      	mov	r2, r0
 801a364:	460b      	mov	r3, r1
 801a366:	4640      	mov	r0, r8
 801a368:	4649      	mov	r1, r9
 801a36a:	f7e5 ff9d 	bl	80002a8 <__aeabi_dsub>
 801a36e:	4604      	mov	r4, r0
 801a370:	460d      	mov	r5, r1
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	4640      	mov	r0, r8
 801a378:	4649      	mov	r1, r9
 801a37a:	f7e6 f94d 	bl	8000618 <__aeabi_dmul>
 801a37e:	2200      	movs	r2, #0
 801a380:	ec41 0b19 	vmov	d9, r0, r1
 801a384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a388:	4620      	mov	r0, r4
 801a38a:	4629      	mov	r1, r5
 801a38c:	f7e5 ff8c 	bl	80002a8 <__aeabi_dsub>
 801a390:	4602      	mov	r2, r0
 801a392:	460b      	mov	r3, r1
 801a394:	ec51 0b19 	vmov	r0, r1, d9
 801a398:	f7e6 fa68 	bl	800086c <__aeabi_ddiv>
 801a39c:	4632      	mov	r2, r6
 801a39e:	4604      	mov	r4, r0
 801a3a0:	460d      	mov	r5, r1
 801a3a2:	463b      	mov	r3, r7
 801a3a4:	4640      	mov	r0, r8
 801a3a6:	4649      	mov	r1, r9
 801a3a8:	f7e6 f936 	bl	8000618 <__aeabi_dmul>
 801a3ac:	4632      	mov	r2, r6
 801a3ae:	463b      	mov	r3, r7
 801a3b0:	f7e5 ff7c 	bl	80002ac <__adddf3>
 801a3b4:	4602      	mov	r2, r0
 801a3b6:	460b      	mov	r3, r1
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	4629      	mov	r1, r5
 801a3bc:	f7e5 ff74 	bl	80002a8 <__aeabi_dsub>
 801a3c0:	4642      	mov	r2, r8
 801a3c2:	464b      	mov	r3, r9
 801a3c4:	f7e5 ff70 	bl	80002a8 <__aeabi_dsub>
 801a3c8:	460b      	mov	r3, r1
 801a3ca:	4602      	mov	r2, r0
 801a3cc:	493a      	ldr	r1, [pc, #232]	; (801a4b8 <__ieee754_pow+0xa30>)
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	f7e5 ff6a 	bl	80002a8 <__aeabi_dsub>
 801a3d4:	e9cd 0100 	strd	r0, r1, [sp]
 801a3d8:	9b01      	ldr	r3, [sp, #4]
 801a3da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a3de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a3e2:	da2f      	bge.n	801a444 <__ieee754_pow+0x9bc>
 801a3e4:	4650      	mov	r0, sl
 801a3e6:	ed9d 0b00 	vldr	d0, [sp]
 801a3ea:	f000 f9cd 	bl	801a788 <scalbn>
 801a3ee:	ec51 0b10 	vmov	r0, r1, d0
 801a3f2:	ec53 2b18 	vmov	r2, r3, d8
 801a3f6:	f7ff bbe0 	b.w	8019bba <__ieee754_pow+0x132>
 801a3fa:	4b30      	ldr	r3, [pc, #192]	; (801a4bc <__ieee754_pow+0xa34>)
 801a3fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a400:	429e      	cmp	r6, r3
 801a402:	f77f af0b 	ble.w	801a21c <__ieee754_pow+0x794>
 801a406:	4b2e      	ldr	r3, [pc, #184]	; (801a4c0 <__ieee754_pow+0xa38>)
 801a408:	440b      	add	r3, r1
 801a40a:	4303      	orrs	r3, r0
 801a40c:	d00b      	beq.n	801a426 <__ieee754_pow+0x99e>
 801a40e:	a326      	add	r3, pc, #152	; (adr r3, 801a4a8 <__ieee754_pow+0xa20>)
 801a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a414:	ec51 0b18 	vmov	r0, r1, d8
 801a418:	f7e6 f8fe 	bl	8000618 <__aeabi_dmul>
 801a41c:	a322      	add	r3, pc, #136	; (adr r3, 801a4a8 <__ieee754_pow+0xa20>)
 801a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a422:	f7ff bbca 	b.w	8019bba <__ieee754_pow+0x132>
 801a426:	4622      	mov	r2, r4
 801a428:	462b      	mov	r3, r5
 801a42a:	f7e5 ff3d 	bl	80002a8 <__aeabi_dsub>
 801a42e:	4642      	mov	r2, r8
 801a430:	464b      	mov	r3, r9
 801a432:	f7e6 fb77 	bl	8000b24 <__aeabi_dcmpge>
 801a436:	2800      	cmp	r0, #0
 801a438:	f43f aef0 	beq.w	801a21c <__ieee754_pow+0x794>
 801a43c:	e7e7      	b.n	801a40e <__ieee754_pow+0x986>
 801a43e:	f04f 0a00 	mov.w	sl, #0
 801a442:	e717      	b.n	801a274 <__ieee754_pow+0x7ec>
 801a444:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a448:	4619      	mov	r1, r3
 801a44a:	e7d2      	b.n	801a3f2 <__ieee754_pow+0x96a>
 801a44c:	491a      	ldr	r1, [pc, #104]	; (801a4b8 <__ieee754_pow+0xa30>)
 801a44e:	2000      	movs	r0, #0
 801a450:	f7ff bb9e 	b.w	8019b90 <__ieee754_pow+0x108>
 801a454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a458:	f7ff bb9a 	b.w	8019b90 <__ieee754_pow+0x108>
 801a45c:	9000      	str	r0, [sp, #0]
 801a45e:	f7ff bb76 	b.w	8019b4e <__ieee754_pow+0xc6>
 801a462:	2100      	movs	r1, #0
 801a464:	f7ff bb60 	b.w	8019b28 <__ieee754_pow+0xa0>
 801a468:	00000000 	.word	0x00000000
 801a46c:	3fe62e43 	.word	0x3fe62e43
 801a470:	fefa39ef 	.word	0xfefa39ef
 801a474:	3fe62e42 	.word	0x3fe62e42
 801a478:	0ca86c39 	.word	0x0ca86c39
 801a47c:	be205c61 	.word	0xbe205c61
 801a480:	72bea4d0 	.word	0x72bea4d0
 801a484:	3e663769 	.word	0x3e663769
 801a488:	c5d26bf1 	.word	0xc5d26bf1
 801a48c:	3ebbbd41 	.word	0x3ebbbd41
 801a490:	af25de2c 	.word	0xaf25de2c
 801a494:	3f11566a 	.word	0x3f11566a
 801a498:	16bebd93 	.word	0x16bebd93
 801a49c:	3f66c16c 	.word	0x3f66c16c
 801a4a0:	5555553e 	.word	0x5555553e
 801a4a4:	3fc55555 	.word	0x3fc55555
 801a4a8:	c2f8f359 	.word	0xc2f8f359
 801a4ac:	01a56e1f 	.word	0x01a56e1f
 801a4b0:	3fe00000 	.word	0x3fe00000
 801a4b4:	000fffff 	.word	0x000fffff
 801a4b8:	3ff00000 	.word	0x3ff00000
 801a4bc:	4090cbff 	.word	0x4090cbff
 801a4c0:	3f6f3400 	.word	0x3f6f3400
 801a4c4:	652b82fe 	.word	0x652b82fe
 801a4c8:	3c971547 	.word	0x3c971547

0801a4cc <__ieee754_sqrt>:
 801a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d0:	ec55 4b10 	vmov	r4, r5, d0
 801a4d4:	4e56      	ldr	r6, [pc, #344]	; (801a630 <__ieee754_sqrt+0x164>)
 801a4d6:	43ae      	bics	r6, r5
 801a4d8:	ee10 0a10 	vmov	r0, s0
 801a4dc:	ee10 3a10 	vmov	r3, s0
 801a4e0:	4629      	mov	r1, r5
 801a4e2:	462a      	mov	r2, r5
 801a4e4:	d110      	bne.n	801a508 <__ieee754_sqrt+0x3c>
 801a4e6:	ee10 2a10 	vmov	r2, s0
 801a4ea:	462b      	mov	r3, r5
 801a4ec:	f7e6 f894 	bl	8000618 <__aeabi_dmul>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	460b      	mov	r3, r1
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	4629      	mov	r1, r5
 801a4f8:	f7e5 fed8 	bl	80002ac <__adddf3>
 801a4fc:	4604      	mov	r4, r0
 801a4fe:	460d      	mov	r5, r1
 801a500:	ec45 4b10 	vmov	d0, r4, r5
 801a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a508:	2d00      	cmp	r5, #0
 801a50a:	dc10      	bgt.n	801a52e <__ieee754_sqrt+0x62>
 801a50c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a510:	4330      	orrs	r0, r6
 801a512:	d0f5      	beq.n	801a500 <__ieee754_sqrt+0x34>
 801a514:	b15d      	cbz	r5, 801a52e <__ieee754_sqrt+0x62>
 801a516:	ee10 2a10 	vmov	r2, s0
 801a51a:	462b      	mov	r3, r5
 801a51c:	ee10 0a10 	vmov	r0, s0
 801a520:	f7e5 fec2 	bl	80002a8 <__aeabi_dsub>
 801a524:	4602      	mov	r2, r0
 801a526:	460b      	mov	r3, r1
 801a528:	f7e6 f9a0 	bl	800086c <__aeabi_ddiv>
 801a52c:	e7e6      	b.n	801a4fc <__ieee754_sqrt+0x30>
 801a52e:	1509      	asrs	r1, r1, #20
 801a530:	d076      	beq.n	801a620 <__ieee754_sqrt+0x154>
 801a532:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a536:	07ce      	lsls	r6, r1, #31
 801a538:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a53c:	bf5e      	ittt	pl
 801a53e:	0fda      	lsrpl	r2, r3, #31
 801a540:	005b      	lslpl	r3, r3, #1
 801a542:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a546:	0fda      	lsrs	r2, r3, #31
 801a548:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a54c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a550:	2000      	movs	r0, #0
 801a552:	106d      	asrs	r5, r5, #1
 801a554:	005b      	lsls	r3, r3, #1
 801a556:	f04f 0e16 	mov.w	lr, #22
 801a55a:	4684      	mov	ip, r0
 801a55c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a560:	eb0c 0401 	add.w	r4, ip, r1
 801a564:	4294      	cmp	r4, r2
 801a566:	bfde      	ittt	le
 801a568:	1b12      	suble	r2, r2, r4
 801a56a:	eb04 0c01 	addle.w	ip, r4, r1
 801a56e:	1840      	addle	r0, r0, r1
 801a570:	0052      	lsls	r2, r2, #1
 801a572:	f1be 0e01 	subs.w	lr, lr, #1
 801a576:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a57a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a57e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a582:	d1ed      	bne.n	801a560 <__ieee754_sqrt+0x94>
 801a584:	4671      	mov	r1, lr
 801a586:	2720      	movs	r7, #32
 801a588:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a58c:	4562      	cmp	r2, ip
 801a58e:	eb04 060e 	add.w	r6, r4, lr
 801a592:	dc02      	bgt.n	801a59a <__ieee754_sqrt+0xce>
 801a594:	d113      	bne.n	801a5be <__ieee754_sqrt+0xf2>
 801a596:	429e      	cmp	r6, r3
 801a598:	d811      	bhi.n	801a5be <__ieee754_sqrt+0xf2>
 801a59a:	2e00      	cmp	r6, #0
 801a59c:	eb06 0e04 	add.w	lr, r6, r4
 801a5a0:	da43      	bge.n	801a62a <__ieee754_sqrt+0x15e>
 801a5a2:	f1be 0f00 	cmp.w	lr, #0
 801a5a6:	db40      	blt.n	801a62a <__ieee754_sqrt+0x15e>
 801a5a8:	f10c 0801 	add.w	r8, ip, #1
 801a5ac:	eba2 020c 	sub.w	r2, r2, ip
 801a5b0:	429e      	cmp	r6, r3
 801a5b2:	bf88      	it	hi
 801a5b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a5b8:	1b9b      	subs	r3, r3, r6
 801a5ba:	4421      	add	r1, r4
 801a5bc:	46c4      	mov	ip, r8
 801a5be:	0052      	lsls	r2, r2, #1
 801a5c0:	3f01      	subs	r7, #1
 801a5c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a5c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a5ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a5ce:	d1dd      	bne.n	801a58c <__ieee754_sqrt+0xc0>
 801a5d0:	4313      	orrs	r3, r2
 801a5d2:	d006      	beq.n	801a5e2 <__ieee754_sqrt+0x116>
 801a5d4:	1c4c      	adds	r4, r1, #1
 801a5d6:	bf13      	iteet	ne
 801a5d8:	3101      	addne	r1, #1
 801a5da:	3001      	addeq	r0, #1
 801a5dc:	4639      	moveq	r1, r7
 801a5de:	f021 0101 	bicne.w	r1, r1, #1
 801a5e2:	1043      	asrs	r3, r0, #1
 801a5e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a5e8:	0849      	lsrs	r1, r1, #1
 801a5ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a5ee:	07c2      	lsls	r2, r0, #31
 801a5f0:	bf48      	it	mi
 801a5f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a5f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a5fa:	460c      	mov	r4, r1
 801a5fc:	463d      	mov	r5, r7
 801a5fe:	e77f      	b.n	801a500 <__ieee754_sqrt+0x34>
 801a600:	0ada      	lsrs	r2, r3, #11
 801a602:	3815      	subs	r0, #21
 801a604:	055b      	lsls	r3, r3, #21
 801a606:	2a00      	cmp	r2, #0
 801a608:	d0fa      	beq.n	801a600 <__ieee754_sqrt+0x134>
 801a60a:	02d7      	lsls	r7, r2, #11
 801a60c:	d50a      	bpl.n	801a624 <__ieee754_sqrt+0x158>
 801a60e:	f1c1 0420 	rsb	r4, r1, #32
 801a612:	fa23 f404 	lsr.w	r4, r3, r4
 801a616:	1e4d      	subs	r5, r1, #1
 801a618:	408b      	lsls	r3, r1
 801a61a:	4322      	orrs	r2, r4
 801a61c:	1b41      	subs	r1, r0, r5
 801a61e:	e788      	b.n	801a532 <__ieee754_sqrt+0x66>
 801a620:	4608      	mov	r0, r1
 801a622:	e7f0      	b.n	801a606 <__ieee754_sqrt+0x13a>
 801a624:	0052      	lsls	r2, r2, #1
 801a626:	3101      	adds	r1, #1
 801a628:	e7ef      	b.n	801a60a <__ieee754_sqrt+0x13e>
 801a62a:	46e0      	mov	r8, ip
 801a62c:	e7be      	b.n	801a5ac <__ieee754_sqrt+0xe0>
 801a62e:	bf00      	nop
 801a630:	7ff00000 	.word	0x7ff00000

0801a634 <fabs>:
 801a634:	ec51 0b10 	vmov	r0, r1, d0
 801a638:	ee10 2a10 	vmov	r2, s0
 801a63c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a640:	ec43 2b10 	vmov	d0, r2, r3
 801a644:	4770      	bx	lr

0801a646 <finite>:
 801a646:	b082      	sub	sp, #8
 801a648:	ed8d 0b00 	vstr	d0, [sp]
 801a64c:	9801      	ldr	r0, [sp, #4]
 801a64e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a652:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a656:	0fc0      	lsrs	r0, r0, #31
 801a658:	b002      	add	sp, #8
 801a65a:	4770      	bx	lr
 801a65c:	0000      	movs	r0, r0
	...

0801a660 <nan>:
 801a660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a668 <nan+0x8>
 801a664:	4770      	bx	lr
 801a666:	bf00      	nop
 801a668:	00000000 	.word	0x00000000
 801a66c:	7ff80000 	.word	0x7ff80000

0801a670 <rint>:
 801a670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a672:	ec51 0b10 	vmov	r0, r1, d0
 801a676:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a67a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a67e:	2e13      	cmp	r6, #19
 801a680:	ee10 4a10 	vmov	r4, s0
 801a684:	460b      	mov	r3, r1
 801a686:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a68a:	dc58      	bgt.n	801a73e <rint+0xce>
 801a68c:	2e00      	cmp	r6, #0
 801a68e:	da2b      	bge.n	801a6e8 <rint+0x78>
 801a690:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a694:	4302      	orrs	r2, r0
 801a696:	d023      	beq.n	801a6e0 <rint+0x70>
 801a698:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a69c:	4302      	orrs	r2, r0
 801a69e:	4254      	negs	r4, r2
 801a6a0:	4314      	orrs	r4, r2
 801a6a2:	0c4b      	lsrs	r3, r1, #17
 801a6a4:	0b24      	lsrs	r4, r4, #12
 801a6a6:	045b      	lsls	r3, r3, #17
 801a6a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a6ac:	ea44 0103 	orr.w	r1, r4, r3
 801a6b0:	4b32      	ldr	r3, [pc, #200]	; (801a77c <rint+0x10c>)
 801a6b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a6b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	4630      	mov	r0, r6
 801a6c0:	4639      	mov	r1, r7
 801a6c2:	f7e5 fdf3 	bl	80002ac <__adddf3>
 801a6c6:	e9cd 0100 	strd	r0, r1, [sp]
 801a6ca:	463b      	mov	r3, r7
 801a6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a6d0:	4632      	mov	r2, r6
 801a6d2:	f7e5 fde9 	bl	80002a8 <__aeabi_dsub>
 801a6d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a6da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a6de:	4639      	mov	r1, r7
 801a6e0:	ec41 0b10 	vmov	d0, r0, r1
 801a6e4:	b003      	add	sp, #12
 801a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6e8:	4a25      	ldr	r2, [pc, #148]	; (801a780 <rint+0x110>)
 801a6ea:	4132      	asrs	r2, r6
 801a6ec:	ea01 0702 	and.w	r7, r1, r2
 801a6f0:	4307      	orrs	r7, r0
 801a6f2:	d0f5      	beq.n	801a6e0 <rint+0x70>
 801a6f4:	0851      	lsrs	r1, r2, #1
 801a6f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a6fa:	4314      	orrs	r4, r2
 801a6fc:	d00c      	beq.n	801a718 <rint+0xa8>
 801a6fe:	ea23 0201 	bic.w	r2, r3, r1
 801a702:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a706:	2e13      	cmp	r6, #19
 801a708:	fa43 f606 	asr.w	r6, r3, r6
 801a70c:	bf0c      	ite	eq
 801a70e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a712:	2400      	movne	r4, #0
 801a714:	ea42 0306 	orr.w	r3, r2, r6
 801a718:	4918      	ldr	r1, [pc, #96]	; (801a77c <rint+0x10c>)
 801a71a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a71e:	4622      	mov	r2, r4
 801a720:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a724:	4620      	mov	r0, r4
 801a726:	4629      	mov	r1, r5
 801a728:	f7e5 fdc0 	bl	80002ac <__adddf3>
 801a72c:	e9cd 0100 	strd	r0, r1, [sp]
 801a730:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a734:	4622      	mov	r2, r4
 801a736:	462b      	mov	r3, r5
 801a738:	f7e5 fdb6 	bl	80002a8 <__aeabi_dsub>
 801a73c:	e7d0      	b.n	801a6e0 <rint+0x70>
 801a73e:	2e33      	cmp	r6, #51	; 0x33
 801a740:	dd07      	ble.n	801a752 <rint+0xe2>
 801a742:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a746:	d1cb      	bne.n	801a6e0 <rint+0x70>
 801a748:	ee10 2a10 	vmov	r2, s0
 801a74c:	f7e5 fdae 	bl	80002ac <__adddf3>
 801a750:	e7c6      	b.n	801a6e0 <rint+0x70>
 801a752:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a756:	f04f 36ff 	mov.w	r6, #4294967295
 801a75a:	40d6      	lsrs	r6, r2
 801a75c:	4230      	tst	r0, r6
 801a75e:	d0bf      	beq.n	801a6e0 <rint+0x70>
 801a760:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a764:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a768:	bf1f      	itttt	ne
 801a76a:	ea24 0101 	bicne.w	r1, r4, r1
 801a76e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a772:	fa44 f202 	asrne.w	r2, r4, r2
 801a776:	ea41 0402 	orrne.w	r4, r1, r2
 801a77a:	e7cd      	b.n	801a718 <rint+0xa8>
 801a77c:	08021ac8 	.word	0x08021ac8
 801a780:	000fffff 	.word	0x000fffff
 801a784:	00000000 	.word	0x00000000

0801a788 <scalbn>:
 801a788:	b570      	push	{r4, r5, r6, lr}
 801a78a:	ec55 4b10 	vmov	r4, r5, d0
 801a78e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a792:	4606      	mov	r6, r0
 801a794:	462b      	mov	r3, r5
 801a796:	b99a      	cbnz	r2, 801a7c0 <scalbn+0x38>
 801a798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a79c:	4323      	orrs	r3, r4
 801a79e:	d036      	beq.n	801a80e <scalbn+0x86>
 801a7a0:	4b39      	ldr	r3, [pc, #228]	; (801a888 <scalbn+0x100>)
 801a7a2:	4629      	mov	r1, r5
 801a7a4:	ee10 0a10 	vmov	r0, s0
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	f7e5 ff35 	bl	8000618 <__aeabi_dmul>
 801a7ae:	4b37      	ldr	r3, [pc, #220]	; (801a88c <scalbn+0x104>)
 801a7b0:	429e      	cmp	r6, r3
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	460d      	mov	r5, r1
 801a7b6:	da10      	bge.n	801a7da <scalbn+0x52>
 801a7b8:	a32b      	add	r3, pc, #172	; (adr r3, 801a868 <scalbn+0xe0>)
 801a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7be:	e03a      	b.n	801a836 <scalbn+0xae>
 801a7c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a7c4:	428a      	cmp	r2, r1
 801a7c6:	d10c      	bne.n	801a7e2 <scalbn+0x5a>
 801a7c8:	ee10 2a10 	vmov	r2, s0
 801a7cc:	4620      	mov	r0, r4
 801a7ce:	4629      	mov	r1, r5
 801a7d0:	f7e5 fd6c 	bl	80002ac <__adddf3>
 801a7d4:	4604      	mov	r4, r0
 801a7d6:	460d      	mov	r5, r1
 801a7d8:	e019      	b.n	801a80e <scalbn+0x86>
 801a7da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a7de:	460b      	mov	r3, r1
 801a7e0:	3a36      	subs	r2, #54	; 0x36
 801a7e2:	4432      	add	r2, r6
 801a7e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a7e8:	428a      	cmp	r2, r1
 801a7ea:	dd08      	ble.n	801a7fe <scalbn+0x76>
 801a7ec:	2d00      	cmp	r5, #0
 801a7ee:	a120      	add	r1, pc, #128	; (adr r1, 801a870 <scalbn+0xe8>)
 801a7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7f4:	da1c      	bge.n	801a830 <scalbn+0xa8>
 801a7f6:	a120      	add	r1, pc, #128	; (adr r1, 801a878 <scalbn+0xf0>)
 801a7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7fc:	e018      	b.n	801a830 <scalbn+0xa8>
 801a7fe:	2a00      	cmp	r2, #0
 801a800:	dd08      	ble.n	801a814 <scalbn+0x8c>
 801a802:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a80a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a80e:	ec45 4b10 	vmov	d0, r4, r5
 801a812:	bd70      	pop	{r4, r5, r6, pc}
 801a814:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a818:	da19      	bge.n	801a84e <scalbn+0xc6>
 801a81a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a81e:	429e      	cmp	r6, r3
 801a820:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a824:	dd0a      	ble.n	801a83c <scalbn+0xb4>
 801a826:	a112      	add	r1, pc, #72	; (adr r1, 801a870 <scalbn+0xe8>)
 801a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d1e2      	bne.n	801a7f6 <scalbn+0x6e>
 801a830:	a30f      	add	r3, pc, #60	; (adr r3, 801a870 <scalbn+0xe8>)
 801a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a836:	f7e5 feef 	bl	8000618 <__aeabi_dmul>
 801a83a:	e7cb      	b.n	801a7d4 <scalbn+0x4c>
 801a83c:	a10a      	add	r1, pc, #40	; (adr r1, 801a868 <scalbn+0xe0>)
 801a83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d0b8      	beq.n	801a7b8 <scalbn+0x30>
 801a846:	a10e      	add	r1, pc, #56	; (adr r1, 801a880 <scalbn+0xf8>)
 801a848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a84c:	e7b4      	b.n	801a7b8 <scalbn+0x30>
 801a84e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a852:	3236      	adds	r2, #54	; 0x36
 801a854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a858:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a85c:	4620      	mov	r0, r4
 801a85e:	4b0c      	ldr	r3, [pc, #48]	; (801a890 <scalbn+0x108>)
 801a860:	2200      	movs	r2, #0
 801a862:	e7e8      	b.n	801a836 <scalbn+0xae>
 801a864:	f3af 8000 	nop.w
 801a868:	c2f8f359 	.word	0xc2f8f359
 801a86c:	01a56e1f 	.word	0x01a56e1f
 801a870:	8800759c 	.word	0x8800759c
 801a874:	7e37e43c 	.word	0x7e37e43c
 801a878:	8800759c 	.word	0x8800759c
 801a87c:	fe37e43c 	.word	0xfe37e43c
 801a880:	c2f8f359 	.word	0xc2f8f359
 801a884:	81a56e1f 	.word	0x81a56e1f
 801a888:	43500000 	.word	0x43500000
 801a88c:	ffff3cb0 	.word	0xffff3cb0
 801a890:	3c900000 	.word	0x3c900000

0801a894 <abort>:
 801a894:	b508      	push	{r3, lr}
 801a896:	2006      	movs	r0, #6
 801a898:	f001 f9ba 	bl	801bc10 <raise>
 801a89c:	2001      	movs	r0, #1
 801a89e:	f7e8 fc63 	bl	8003168 <_exit>
	...

0801a8a4 <__errno>:
 801a8a4:	4b01      	ldr	r3, [pc, #4]	; (801a8ac <__errno+0x8>)
 801a8a6:	6818      	ldr	r0, [r3, #0]
 801a8a8:	4770      	bx	lr
 801a8aa:	bf00      	nop
 801a8ac:	200001f8 	.word	0x200001f8

0801a8b0 <std>:
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	b510      	push	{r4, lr}
 801a8b4:	4604      	mov	r4, r0
 801a8b6:	e9c0 3300 	strd	r3, r3, [r0]
 801a8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a8be:	6083      	str	r3, [r0, #8]
 801a8c0:	8181      	strh	r1, [r0, #12]
 801a8c2:	6643      	str	r3, [r0, #100]	; 0x64
 801a8c4:	81c2      	strh	r2, [r0, #14]
 801a8c6:	6183      	str	r3, [r0, #24]
 801a8c8:	4619      	mov	r1, r3
 801a8ca:	2208      	movs	r2, #8
 801a8cc:	305c      	adds	r0, #92	; 0x5c
 801a8ce:	f000 f93d 	bl	801ab4c <memset>
 801a8d2:	4b05      	ldr	r3, [pc, #20]	; (801a8e8 <std+0x38>)
 801a8d4:	6263      	str	r3, [r4, #36]	; 0x24
 801a8d6:	4b05      	ldr	r3, [pc, #20]	; (801a8ec <std+0x3c>)
 801a8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a8da:	4b05      	ldr	r3, [pc, #20]	; (801a8f0 <std+0x40>)
 801a8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a8de:	4b05      	ldr	r3, [pc, #20]	; (801a8f4 <std+0x44>)
 801a8e0:	6224      	str	r4, [r4, #32]
 801a8e2:	6323      	str	r3, [r4, #48]	; 0x30
 801a8e4:	bd10      	pop	{r4, pc}
 801a8e6:	bf00      	nop
 801a8e8:	0801bce1 	.word	0x0801bce1
 801a8ec:	0801bd07 	.word	0x0801bd07
 801a8f0:	0801bd3f 	.word	0x0801bd3f
 801a8f4:	0801bd63 	.word	0x0801bd63

0801a8f8 <_cleanup_r>:
 801a8f8:	4901      	ldr	r1, [pc, #4]	; (801a900 <_cleanup_r+0x8>)
 801a8fa:	f000 b8af 	b.w	801aa5c <_fwalk_reent>
 801a8fe:	bf00      	nop
 801a900:	0801dc9d 	.word	0x0801dc9d

0801a904 <__sfmoreglue>:
 801a904:	b570      	push	{r4, r5, r6, lr}
 801a906:	1e4a      	subs	r2, r1, #1
 801a908:	2568      	movs	r5, #104	; 0x68
 801a90a:	4355      	muls	r5, r2
 801a90c:	460e      	mov	r6, r1
 801a90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a912:	f000 f973 	bl	801abfc <_malloc_r>
 801a916:	4604      	mov	r4, r0
 801a918:	b140      	cbz	r0, 801a92c <__sfmoreglue+0x28>
 801a91a:	2100      	movs	r1, #0
 801a91c:	e9c0 1600 	strd	r1, r6, [r0]
 801a920:	300c      	adds	r0, #12
 801a922:	60a0      	str	r0, [r4, #8]
 801a924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a928:	f000 f910 	bl	801ab4c <memset>
 801a92c:	4620      	mov	r0, r4
 801a92e:	bd70      	pop	{r4, r5, r6, pc}

0801a930 <__sfp_lock_acquire>:
 801a930:	4801      	ldr	r0, [pc, #4]	; (801a938 <__sfp_lock_acquire+0x8>)
 801a932:	f000 b8d8 	b.w	801aae6 <__retarget_lock_acquire_recursive>
 801a936:	bf00      	nop
 801a938:	20008fac 	.word	0x20008fac

0801a93c <__sfp_lock_release>:
 801a93c:	4801      	ldr	r0, [pc, #4]	; (801a944 <__sfp_lock_release+0x8>)
 801a93e:	f000 b8d3 	b.w	801aae8 <__retarget_lock_release_recursive>
 801a942:	bf00      	nop
 801a944:	20008fac 	.word	0x20008fac

0801a948 <__sinit_lock_acquire>:
 801a948:	4801      	ldr	r0, [pc, #4]	; (801a950 <__sinit_lock_acquire+0x8>)
 801a94a:	f000 b8cc 	b.w	801aae6 <__retarget_lock_acquire_recursive>
 801a94e:	bf00      	nop
 801a950:	20008fa7 	.word	0x20008fa7

0801a954 <__sinit_lock_release>:
 801a954:	4801      	ldr	r0, [pc, #4]	; (801a95c <__sinit_lock_release+0x8>)
 801a956:	f000 b8c7 	b.w	801aae8 <__retarget_lock_release_recursive>
 801a95a:	bf00      	nop
 801a95c:	20008fa7 	.word	0x20008fa7

0801a960 <__sinit>:
 801a960:	b510      	push	{r4, lr}
 801a962:	4604      	mov	r4, r0
 801a964:	f7ff fff0 	bl	801a948 <__sinit_lock_acquire>
 801a968:	69a3      	ldr	r3, [r4, #24]
 801a96a:	b11b      	cbz	r3, 801a974 <__sinit+0x14>
 801a96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a970:	f7ff bff0 	b.w	801a954 <__sinit_lock_release>
 801a974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a978:	6523      	str	r3, [r4, #80]	; 0x50
 801a97a:	4b13      	ldr	r3, [pc, #76]	; (801a9c8 <__sinit+0x68>)
 801a97c:	4a13      	ldr	r2, [pc, #76]	; (801a9cc <__sinit+0x6c>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	62a2      	str	r2, [r4, #40]	; 0x28
 801a982:	42a3      	cmp	r3, r4
 801a984:	bf04      	itt	eq
 801a986:	2301      	moveq	r3, #1
 801a988:	61a3      	streq	r3, [r4, #24]
 801a98a:	4620      	mov	r0, r4
 801a98c:	f000 f820 	bl	801a9d0 <__sfp>
 801a990:	6060      	str	r0, [r4, #4]
 801a992:	4620      	mov	r0, r4
 801a994:	f000 f81c 	bl	801a9d0 <__sfp>
 801a998:	60a0      	str	r0, [r4, #8]
 801a99a:	4620      	mov	r0, r4
 801a99c:	f000 f818 	bl	801a9d0 <__sfp>
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	60e0      	str	r0, [r4, #12]
 801a9a4:	2104      	movs	r1, #4
 801a9a6:	6860      	ldr	r0, [r4, #4]
 801a9a8:	f7ff ff82 	bl	801a8b0 <std>
 801a9ac:	68a0      	ldr	r0, [r4, #8]
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	2109      	movs	r1, #9
 801a9b2:	f7ff ff7d 	bl	801a8b0 <std>
 801a9b6:	68e0      	ldr	r0, [r4, #12]
 801a9b8:	2202      	movs	r2, #2
 801a9ba:	2112      	movs	r1, #18
 801a9bc:	f7ff ff78 	bl	801a8b0 <std>
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	61a3      	str	r3, [r4, #24]
 801a9c4:	e7d2      	b.n	801a96c <__sinit+0xc>
 801a9c6:	bf00      	nop
 801a9c8:	08021c3c 	.word	0x08021c3c
 801a9cc:	0801a8f9 	.word	0x0801a8f9

0801a9d0 <__sfp>:
 801a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9d2:	4607      	mov	r7, r0
 801a9d4:	f7ff ffac 	bl	801a930 <__sfp_lock_acquire>
 801a9d8:	4b1e      	ldr	r3, [pc, #120]	; (801aa54 <__sfp+0x84>)
 801a9da:	681e      	ldr	r6, [r3, #0]
 801a9dc:	69b3      	ldr	r3, [r6, #24]
 801a9de:	b913      	cbnz	r3, 801a9e6 <__sfp+0x16>
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	f7ff ffbd 	bl	801a960 <__sinit>
 801a9e6:	3648      	adds	r6, #72	; 0x48
 801a9e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a9ec:	3b01      	subs	r3, #1
 801a9ee:	d503      	bpl.n	801a9f8 <__sfp+0x28>
 801a9f0:	6833      	ldr	r3, [r6, #0]
 801a9f2:	b30b      	cbz	r3, 801aa38 <__sfp+0x68>
 801a9f4:	6836      	ldr	r6, [r6, #0]
 801a9f6:	e7f7      	b.n	801a9e8 <__sfp+0x18>
 801a9f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a9fc:	b9d5      	cbnz	r5, 801aa34 <__sfp+0x64>
 801a9fe:	4b16      	ldr	r3, [pc, #88]	; (801aa58 <__sfp+0x88>)
 801aa00:	60e3      	str	r3, [r4, #12]
 801aa02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa06:	6665      	str	r5, [r4, #100]	; 0x64
 801aa08:	f000 f86c 	bl	801aae4 <__retarget_lock_init_recursive>
 801aa0c:	f7ff ff96 	bl	801a93c <__sfp_lock_release>
 801aa10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aa14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aa18:	6025      	str	r5, [r4, #0]
 801aa1a:	61a5      	str	r5, [r4, #24]
 801aa1c:	2208      	movs	r2, #8
 801aa1e:	4629      	mov	r1, r5
 801aa20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aa24:	f000 f892 	bl	801ab4c <memset>
 801aa28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aa2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aa30:	4620      	mov	r0, r4
 801aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa34:	3468      	adds	r4, #104	; 0x68
 801aa36:	e7d9      	b.n	801a9ec <__sfp+0x1c>
 801aa38:	2104      	movs	r1, #4
 801aa3a:	4638      	mov	r0, r7
 801aa3c:	f7ff ff62 	bl	801a904 <__sfmoreglue>
 801aa40:	4604      	mov	r4, r0
 801aa42:	6030      	str	r0, [r6, #0]
 801aa44:	2800      	cmp	r0, #0
 801aa46:	d1d5      	bne.n	801a9f4 <__sfp+0x24>
 801aa48:	f7ff ff78 	bl	801a93c <__sfp_lock_release>
 801aa4c:	230c      	movs	r3, #12
 801aa4e:	603b      	str	r3, [r7, #0]
 801aa50:	e7ee      	b.n	801aa30 <__sfp+0x60>
 801aa52:	bf00      	nop
 801aa54:	08021c3c 	.word	0x08021c3c
 801aa58:	ffff0001 	.word	0xffff0001

0801aa5c <_fwalk_reent>:
 801aa5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa60:	4606      	mov	r6, r0
 801aa62:	4688      	mov	r8, r1
 801aa64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa68:	2700      	movs	r7, #0
 801aa6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa6e:	f1b9 0901 	subs.w	r9, r9, #1
 801aa72:	d505      	bpl.n	801aa80 <_fwalk_reent+0x24>
 801aa74:	6824      	ldr	r4, [r4, #0]
 801aa76:	2c00      	cmp	r4, #0
 801aa78:	d1f7      	bne.n	801aa6a <_fwalk_reent+0xe>
 801aa7a:	4638      	mov	r0, r7
 801aa7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa80:	89ab      	ldrh	r3, [r5, #12]
 801aa82:	2b01      	cmp	r3, #1
 801aa84:	d907      	bls.n	801aa96 <_fwalk_reent+0x3a>
 801aa86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aa8a:	3301      	adds	r3, #1
 801aa8c:	d003      	beq.n	801aa96 <_fwalk_reent+0x3a>
 801aa8e:	4629      	mov	r1, r5
 801aa90:	4630      	mov	r0, r6
 801aa92:	47c0      	blx	r8
 801aa94:	4307      	orrs	r7, r0
 801aa96:	3568      	adds	r5, #104	; 0x68
 801aa98:	e7e9      	b.n	801aa6e <_fwalk_reent+0x12>
	...

0801aa9c <__libc_init_array>:
 801aa9c:	b570      	push	{r4, r5, r6, lr}
 801aa9e:	4d0d      	ldr	r5, [pc, #52]	; (801aad4 <__libc_init_array+0x38>)
 801aaa0:	4c0d      	ldr	r4, [pc, #52]	; (801aad8 <__libc_init_array+0x3c>)
 801aaa2:	1b64      	subs	r4, r4, r5
 801aaa4:	10a4      	asrs	r4, r4, #2
 801aaa6:	2600      	movs	r6, #0
 801aaa8:	42a6      	cmp	r6, r4
 801aaaa:	d109      	bne.n	801aac0 <__libc_init_array+0x24>
 801aaac:	4d0b      	ldr	r5, [pc, #44]	; (801aadc <__libc_init_array+0x40>)
 801aaae:	4c0c      	ldr	r4, [pc, #48]	; (801aae0 <__libc_init_array+0x44>)
 801aab0:	f005 f8cc 	bl	801fc4c <_init>
 801aab4:	1b64      	subs	r4, r4, r5
 801aab6:	10a4      	asrs	r4, r4, #2
 801aab8:	2600      	movs	r6, #0
 801aaba:	42a6      	cmp	r6, r4
 801aabc:	d105      	bne.n	801aaca <__libc_init_array+0x2e>
 801aabe:	bd70      	pop	{r4, r5, r6, pc}
 801aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 801aac4:	4798      	blx	r3
 801aac6:	3601      	adds	r6, #1
 801aac8:	e7ee      	b.n	801aaa8 <__libc_init_array+0xc>
 801aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 801aace:	4798      	blx	r3
 801aad0:	3601      	adds	r6, #1
 801aad2:	e7f2      	b.n	801aaba <__libc_init_array+0x1e>
 801aad4:	08021fa8 	.word	0x08021fa8
 801aad8:	08021fa8 	.word	0x08021fa8
 801aadc:	08021fa8 	.word	0x08021fa8
 801aae0:	08021fb0 	.word	0x08021fb0

0801aae4 <__retarget_lock_init_recursive>:
 801aae4:	4770      	bx	lr

0801aae6 <__retarget_lock_acquire_recursive>:
 801aae6:	4770      	bx	lr

0801aae8 <__retarget_lock_release_recursive>:
 801aae8:	4770      	bx	lr
	...

0801aaec <malloc>:
 801aaec:	4b02      	ldr	r3, [pc, #8]	; (801aaf8 <malloc+0xc>)
 801aaee:	4601      	mov	r1, r0
 801aaf0:	6818      	ldr	r0, [r3, #0]
 801aaf2:	f000 b883 	b.w	801abfc <_malloc_r>
 801aaf6:	bf00      	nop
 801aaf8:	200001f8 	.word	0x200001f8

0801aafc <memcpy>:
 801aafc:	440a      	add	r2, r1
 801aafe:	4291      	cmp	r1, r2
 801ab00:	f100 33ff 	add.w	r3, r0, #4294967295
 801ab04:	d100      	bne.n	801ab08 <memcpy+0xc>
 801ab06:	4770      	bx	lr
 801ab08:	b510      	push	{r4, lr}
 801ab0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab12:	4291      	cmp	r1, r2
 801ab14:	d1f9      	bne.n	801ab0a <memcpy+0xe>
 801ab16:	bd10      	pop	{r4, pc}

0801ab18 <memmove>:
 801ab18:	4288      	cmp	r0, r1
 801ab1a:	b510      	push	{r4, lr}
 801ab1c:	eb01 0402 	add.w	r4, r1, r2
 801ab20:	d902      	bls.n	801ab28 <memmove+0x10>
 801ab22:	4284      	cmp	r4, r0
 801ab24:	4623      	mov	r3, r4
 801ab26:	d807      	bhi.n	801ab38 <memmove+0x20>
 801ab28:	1e43      	subs	r3, r0, #1
 801ab2a:	42a1      	cmp	r1, r4
 801ab2c:	d008      	beq.n	801ab40 <memmove+0x28>
 801ab2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab32:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab36:	e7f8      	b.n	801ab2a <memmove+0x12>
 801ab38:	4402      	add	r2, r0
 801ab3a:	4601      	mov	r1, r0
 801ab3c:	428a      	cmp	r2, r1
 801ab3e:	d100      	bne.n	801ab42 <memmove+0x2a>
 801ab40:	bd10      	pop	{r4, pc}
 801ab42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab4a:	e7f7      	b.n	801ab3c <memmove+0x24>

0801ab4c <memset>:
 801ab4c:	4402      	add	r2, r0
 801ab4e:	4603      	mov	r3, r0
 801ab50:	4293      	cmp	r3, r2
 801ab52:	d100      	bne.n	801ab56 <memset+0xa>
 801ab54:	4770      	bx	lr
 801ab56:	f803 1b01 	strb.w	r1, [r3], #1
 801ab5a:	e7f9      	b.n	801ab50 <memset+0x4>

0801ab5c <_free_r>:
 801ab5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab5e:	2900      	cmp	r1, #0
 801ab60:	d048      	beq.n	801abf4 <_free_r+0x98>
 801ab62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab66:	9001      	str	r0, [sp, #4]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	f1a1 0404 	sub.w	r4, r1, #4
 801ab6e:	bfb8      	it	lt
 801ab70:	18e4      	addlt	r4, r4, r3
 801ab72:	f003 fcdd 	bl	801e530 <__malloc_lock>
 801ab76:	4a20      	ldr	r2, [pc, #128]	; (801abf8 <_free_r+0x9c>)
 801ab78:	9801      	ldr	r0, [sp, #4]
 801ab7a:	6813      	ldr	r3, [r2, #0]
 801ab7c:	4615      	mov	r5, r2
 801ab7e:	b933      	cbnz	r3, 801ab8e <_free_r+0x32>
 801ab80:	6063      	str	r3, [r4, #4]
 801ab82:	6014      	str	r4, [r2, #0]
 801ab84:	b003      	add	sp, #12
 801ab86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab8a:	f003 bcd7 	b.w	801e53c <__malloc_unlock>
 801ab8e:	42a3      	cmp	r3, r4
 801ab90:	d90b      	bls.n	801abaa <_free_r+0x4e>
 801ab92:	6821      	ldr	r1, [r4, #0]
 801ab94:	1862      	adds	r2, r4, r1
 801ab96:	4293      	cmp	r3, r2
 801ab98:	bf04      	itt	eq
 801ab9a:	681a      	ldreq	r2, [r3, #0]
 801ab9c:	685b      	ldreq	r3, [r3, #4]
 801ab9e:	6063      	str	r3, [r4, #4]
 801aba0:	bf04      	itt	eq
 801aba2:	1852      	addeq	r2, r2, r1
 801aba4:	6022      	streq	r2, [r4, #0]
 801aba6:	602c      	str	r4, [r5, #0]
 801aba8:	e7ec      	b.n	801ab84 <_free_r+0x28>
 801abaa:	461a      	mov	r2, r3
 801abac:	685b      	ldr	r3, [r3, #4]
 801abae:	b10b      	cbz	r3, 801abb4 <_free_r+0x58>
 801abb0:	42a3      	cmp	r3, r4
 801abb2:	d9fa      	bls.n	801abaa <_free_r+0x4e>
 801abb4:	6811      	ldr	r1, [r2, #0]
 801abb6:	1855      	adds	r5, r2, r1
 801abb8:	42a5      	cmp	r5, r4
 801abba:	d10b      	bne.n	801abd4 <_free_r+0x78>
 801abbc:	6824      	ldr	r4, [r4, #0]
 801abbe:	4421      	add	r1, r4
 801abc0:	1854      	adds	r4, r2, r1
 801abc2:	42a3      	cmp	r3, r4
 801abc4:	6011      	str	r1, [r2, #0]
 801abc6:	d1dd      	bne.n	801ab84 <_free_r+0x28>
 801abc8:	681c      	ldr	r4, [r3, #0]
 801abca:	685b      	ldr	r3, [r3, #4]
 801abcc:	6053      	str	r3, [r2, #4]
 801abce:	4421      	add	r1, r4
 801abd0:	6011      	str	r1, [r2, #0]
 801abd2:	e7d7      	b.n	801ab84 <_free_r+0x28>
 801abd4:	d902      	bls.n	801abdc <_free_r+0x80>
 801abd6:	230c      	movs	r3, #12
 801abd8:	6003      	str	r3, [r0, #0]
 801abda:	e7d3      	b.n	801ab84 <_free_r+0x28>
 801abdc:	6825      	ldr	r5, [r4, #0]
 801abde:	1961      	adds	r1, r4, r5
 801abe0:	428b      	cmp	r3, r1
 801abe2:	bf04      	itt	eq
 801abe4:	6819      	ldreq	r1, [r3, #0]
 801abe6:	685b      	ldreq	r3, [r3, #4]
 801abe8:	6063      	str	r3, [r4, #4]
 801abea:	bf04      	itt	eq
 801abec:	1949      	addeq	r1, r1, r5
 801abee:	6021      	streq	r1, [r4, #0]
 801abf0:	6054      	str	r4, [r2, #4]
 801abf2:	e7c7      	b.n	801ab84 <_free_r+0x28>
 801abf4:	b003      	add	sp, #12
 801abf6:	bd30      	pop	{r4, r5, pc}
 801abf8:	20005ebc 	.word	0x20005ebc

0801abfc <_malloc_r>:
 801abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abfe:	1ccd      	adds	r5, r1, #3
 801ac00:	f025 0503 	bic.w	r5, r5, #3
 801ac04:	3508      	adds	r5, #8
 801ac06:	2d0c      	cmp	r5, #12
 801ac08:	bf38      	it	cc
 801ac0a:	250c      	movcc	r5, #12
 801ac0c:	2d00      	cmp	r5, #0
 801ac0e:	4606      	mov	r6, r0
 801ac10:	db01      	blt.n	801ac16 <_malloc_r+0x1a>
 801ac12:	42a9      	cmp	r1, r5
 801ac14:	d903      	bls.n	801ac1e <_malloc_r+0x22>
 801ac16:	230c      	movs	r3, #12
 801ac18:	6033      	str	r3, [r6, #0]
 801ac1a:	2000      	movs	r0, #0
 801ac1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac1e:	f003 fc87 	bl	801e530 <__malloc_lock>
 801ac22:	4921      	ldr	r1, [pc, #132]	; (801aca8 <_malloc_r+0xac>)
 801ac24:	680a      	ldr	r2, [r1, #0]
 801ac26:	4614      	mov	r4, r2
 801ac28:	b99c      	cbnz	r4, 801ac52 <_malloc_r+0x56>
 801ac2a:	4f20      	ldr	r7, [pc, #128]	; (801acac <_malloc_r+0xb0>)
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	b923      	cbnz	r3, 801ac3a <_malloc_r+0x3e>
 801ac30:	4621      	mov	r1, r4
 801ac32:	4630      	mov	r0, r6
 801ac34:	f000 ffae 	bl	801bb94 <_sbrk_r>
 801ac38:	6038      	str	r0, [r7, #0]
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	f000 ffa9 	bl	801bb94 <_sbrk_r>
 801ac42:	1c43      	adds	r3, r0, #1
 801ac44:	d123      	bne.n	801ac8e <_malloc_r+0x92>
 801ac46:	230c      	movs	r3, #12
 801ac48:	6033      	str	r3, [r6, #0]
 801ac4a:	4630      	mov	r0, r6
 801ac4c:	f003 fc76 	bl	801e53c <__malloc_unlock>
 801ac50:	e7e3      	b.n	801ac1a <_malloc_r+0x1e>
 801ac52:	6823      	ldr	r3, [r4, #0]
 801ac54:	1b5b      	subs	r3, r3, r5
 801ac56:	d417      	bmi.n	801ac88 <_malloc_r+0x8c>
 801ac58:	2b0b      	cmp	r3, #11
 801ac5a:	d903      	bls.n	801ac64 <_malloc_r+0x68>
 801ac5c:	6023      	str	r3, [r4, #0]
 801ac5e:	441c      	add	r4, r3
 801ac60:	6025      	str	r5, [r4, #0]
 801ac62:	e004      	b.n	801ac6e <_malloc_r+0x72>
 801ac64:	6863      	ldr	r3, [r4, #4]
 801ac66:	42a2      	cmp	r2, r4
 801ac68:	bf0c      	ite	eq
 801ac6a:	600b      	streq	r3, [r1, #0]
 801ac6c:	6053      	strne	r3, [r2, #4]
 801ac6e:	4630      	mov	r0, r6
 801ac70:	f003 fc64 	bl	801e53c <__malloc_unlock>
 801ac74:	f104 000b 	add.w	r0, r4, #11
 801ac78:	1d23      	adds	r3, r4, #4
 801ac7a:	f020 0007 	bic.w	r0, r0, #7
 801ac7e:	1ac2      	subs	r2, r0, r3
 801ac80:	d0cc      	beq.n	801ac1c <_malloc_r+0x20>
 801ac82:	1a1b      	subs	r3, r3, r0
 801ac84:	50a3      	str	r3, [r4, r2]
 801ac86:	e7c9      	b.n	801ac1c <_malloc_r+0x20>
 801ac88:	4622      	mov	r2, r4
 801ac8a:	6864      	ldr	r4, [r4, #4]
 801ac8c:	e7cc      	b.n	801ac28 <_malloc_r+0x2c>
 801ac8e:	1cc4      	adds	r4, r0, #3
 801ac90:	f024 0403 	bic.w	r4, r4, #3
 801ac94:	42a0      	cmp	r0, r4
 801ac96:	d0e3      	beq.n	801ac60 <_malloc_r+0x64>
 801ac98:	1a21      	subs	r1, r4, r0
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	f000 ff7a 	bl	801bb94 <_sbrk_r>
 801aca0:	3001      	adds	r0, #1
 801aca2:	d1dd      	bne.n	801ac60 <_malloc_r+0x64>
 801aca4:	e7cf      	b.n	801ac46 <_malloc_r+0x4a>
 801aca6:	bf00      	nop
 801aca8:	20005ebc 	.word	0x20005ebc
 801acac:	20005ec0 	.word	0x20005ec0

0801acb0 <__cvt>:
 801acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801acb4:	ec55 4b10 	vmov	r4, r5, d0
 801acb8:	2d00      	cmp	r5, #0
 801acba:	460e      	mov	r6, r1
 801acbc:	4619      	mov	r1, r3
 801acbe:	462b      	mov	r3, r5
 801acc0:	bfbb      	ittet	lt
 801acc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801acc6:	461d      	movlt	r5, r3
 801acc8:	2300      	movge	r3, #0
 801acca:	232d      	movlt	r3, #45	; 0x2d
 801accc:	700b      	strb	r3, [r1, #0]
 801acce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801acd4:	4691      	mov	r9, r2
 801acd6:	f023 0820 	bic.w	r8, r3, #32
 801acda:	bfbc      	itt	lt
 801acdc:	4622      	movlt	r2, r4
 801acde:	4614      	movlt	r4, r2
 801ace0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ace4:	d005      	beq.n	801acf2 <__cvt+0x42>
 801ace6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801acea:	d100      	bne.n	801acee <__cvt+0x3e>
 801acec:	3601      	adds	r6, #1
 801acee:	2102      	movs	r1, #2
 801acf0:	e000      	b.n	801acf4 <__cvt+0x44>
 801acf2:	2103      	movs	r1, #3
 801acf4:	ab03      	add	r3, sp, #12
 801acf6:	9301      	str	r3, [sp, #4]
 801acf8:	ab02      	add	r3, sp, #8
 801acfa:	9300      	str	r3, [sp, #0]
 801acfc:	ec45 4b10 	vmov	d0, r4, r5
 801ad00:	4653      	mov	r3, sl
 801ad02:	4632      	mov	r2, r6
 801ad04:	f002 f958 	bl	801cfb8 <_dtoa_r>
 801ad08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ad0c:	4607      	mov	r7, r0
 801ad0e:	d102      	bne.n	801ad16 <__cvt+0x66>
 801ad10:	f019 0f01 	tst.w	r9, #1
 801ad14:	d022      	beq.n	801ad5c <__cvt+0xac>
 801ad16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ad1a:	eb07 0906 	add.w	r9, r7, r6
 801ad1e:	d110      	bne.n	801ad42 <__cvt+0x92>
 801ad20:	783b      	ldrb	r3, [r7, #0]
 801ad22:	2b30      	cmp	r3, #48	; 0x30
 801ad24:	d10a      	bne.n	801ad3c <__cvt+0x8c>
 801ad26:	2200      	movs	r2, #0
 801ad28:	2300      	movs	r3, #0
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	4629      	mov	r1, r5
 801ad2e:	f7e5 fedb 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad32:	b918      	cbnz	r0, 801ad3c <__cvt+0x8c>
 801ad34:	f1c6 0601 	rsb	r6, r6, #1
 801ad38:	f8ca 6000 	str.w	r6, [sl]
 801ad3c:	f8da 3000 	ldr.w	r3, [sl]
 801ad40:	4499      	add	r9, r3
 801ad42:	2200      	movs	r2, #0
 801ad44:	2300      	movs	r3, #0
 801ad46:	4620      	mov	r0, r4
 801ad48:	4629      	mov	r1, r5
 801ad4a:	f7e5 fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad4e:	b108      	cbz	r0, 801ad54 <__cvt+0xa4>
 801ad50:	f8cd 900c 	str.w	r9, [sp, #12]
 801ad54:	2230      	movs	r2, #48	; 0x30
 801ad56:	9b03      	ldr	r3, [sp, #12]
 801ad58:	454b      	cmp	r3, r9
 801ad5a:	d307      	bcc.n	801ad6c <__cvt+0xbc>
 801ad5c:	9b03      	ldr	r3, [sp, #12]
 801ad5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ad60:	1bdb      	subs	r3, r3, r7
 801ad62:	4638      	mov	r0, r7
 801ad64:	6013      	str	r3, [r2, #0]
 801ad66:	b004      	add	sp, #16
 801ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad6c:	1c59      	adds	r1, r3, #1
 801ad6e:	9103      	str	r1, [sp, #12]
 801ad70:	701a      	strb	r2, [r3, #0]
 801ad72:	e7f0      	b.n	801ad56 <__cvt+0xa6>

0801ad74 <__exponent>:
 801ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad76:	4603      	mov	r3, r0
 801ad78:	2900      	cmp	r1, #0
 801ad7a:	bfb8      	it	lt
 801ad7c:	4249      	neglt	r1, r1
 801ad7e:	f803 2b02 	strb.w	r2, [r3], #2
 801ad82:	bfb4      	ite	lt
 801ad84:	222d      	movlt	r2, #45	; 0x2d
 801ad86:	222b      	movge	r2, #43	; 0x2b
 801ad88:	2909      	cmp	r1, #9
 801ad8a:	7042      	strb	r2, [r0, #1]
 801ad8c:	dd2a      	ble.n	801ade4 <__exponent+0x70>
 801ad8e:	f10d 0407 	add.w	r4, sp, #7
 801ad92:	46a4      	mov	ip, r4
 801ad94:	270a      	movs	r7, #10
 801ad96:	46a6      	mov	lr, r4
 801ad98:	460a      	mov	r2, r1
 801ad9a:	fb91 f6f7 	sdiv	r6, r1, r7
 801ad9e:	fb07 1516 	mls	r5, r7, r6, r1
 801ada2:	3530      	adds	r5, #48	; 0x30
 801ada4:	2a63      	cmp	r2, #99	; 0x63
 801ada6:	f104 34ff 	add.w	r4, r4, #4294967295
 801adaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801adae:	4631      	mov	r1, r6
 801adb0:	dcf1      	bgt.n	801ad96 <__exponent+0x22>
 801adb2:	3130      	adds	r1, #48	; 0x30
 801adb4:	f1ae 0502 	sub.w	r5, lr, #2
 801adb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801adbc:	1c44      	adds	r4, r0, #1
 801adbe:	4629      	mov	r1, r5
 801adc0:	4561      	cmp	r1, ip
 801adc2:	d30a      	bcc.n	801adda <__exponent+0x66>
 801adc4:	f10d 0209 	add.w	r2, sp, #9
 801adc8:	eba2 020e 	sub.w	r2, r2, lr
 801adcc:	4565      	cmp	r5, ip
 801adce:	bf88      	it	hi
 801add0:	2200      	movhi	r2, #0
 801add2:	4413      	add	r3, r2
 801add4:	1a18      	subs	r0, r3, r0
 801add6:	b003      	add	sp, #12
 801add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adda:	f811 2b01 	ldrb.w	r2, [r1], #1
 801adde:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ade2:	e7ed      	b.n	801adc0 <__exponent+0x4c>
 801ade4:	2330      	movs	r3, #48	; 0x30
 801ade6:	3130      	adds	r1, #48	; 0x30
 801ade8:	7083      	strb	r3, [r0, #2]
 801adea:	70c1      	strb	r1, [r0, #3]
 801adec:	1d03      	adds	r3, r0, #4
 801adee:	e7f1      	b.n	801add4 <__exponent+0x60>

0801adf0 <_printf_float>:
 801adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adf4:	ed2d 8b02 	vpush	{d8}
 801adf8:	b08d      	sub	sp, #52	; 0x34
 801adfa:	460c      	mov	r4, r1
 801adfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ae00:	4616      	mov	r6, r2
 801ae02:	461f      	mov	r7, r3
 801ae04:	4605      	mov	r5, r0
 801ae06:	f003 fb07 	bl	801e418 <_localeconv_r>
 801ae0a:	f8d0 a000 	ldr.w	sl, [r0]
 801ae0e:	4650      	mov	r0, sl
 801ae10:	f7e5 f9ee 	bl	80001f0 <strlen>
 801ae14:	2300      	movs	r3, #0
 801ae16:	930a      	str	r3, [sp, #40]	; 0x28
 801ae18:	6823      	ldr	r3, [r4, #0]
 801ae1a:	9305      	str	r3, [sp, #20]
 801ae1c:	f8d8 3000 	ldr.w	r3, [r8]
 801ae20:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ae24:	3307      	adds	r3, #7
 801ae26:	f023 0307 	bic.w	r3, r3, #7
 801ae2a:	f103 0208 	add.w	r2, r3, #8
 801ae2e:	f8c8 2000 	str.w	r2, [r8]
 801ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ae3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ae3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ae42:	9307      	str	r3, [sp, #28]
 801ae44:	f8cd 8018 	str.w	r8, [sp, #24]
 801ae48:	ee08 0a10 	vmov	s16, r0
 801ae4c:	4b9f      	ldr	r3, [pc, #636]	; (801b0cc <_printf_float+0x2dc>)
 801ae4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae52:	f04f 32ff 	mov.w	r2, #4294967295
 801ae56:	f7e5 fe79 	bl	8000b4c <__aeabi_dcmpun>
 801ae5a:	bb88      	cbnz	r0, 801aec0 <_printf_float+0xd0>
 801ae5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae60:	4b9a      	ldr	r3, [pc, #616]	; (801b0cc <_printf_float+0x2dc>)
 801ae62:	f04f 32ff 	mov.w	r2, #4294967295
 801ae66:	f7e5 fe53 	bl	8000b10 <__aeabi_dcmple>
 801ae6a:	bb48      	cbnz	r0, 801aec0 <_printf_float+0xd0>
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	2300      	movs	r3, #0
 801ae70:	4640      	mov	r0, r8
 801ae72:	4649      	mov	r1, r9
 801ae74:	f7e5 fe42 	bl	8000afc <__aeabi_dcmplt>
 801ae78:	b110      	cbz	r0, 801ae80 <_printf_float+0x90>
 801ae7a:	232d      	movs	r3, #45	; 0x2d
 801ae7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae80:	4b93      	ldr	r3, [pc, #588]	; (801b0d0 <_printf_float+0x2e0>)
 801ae82:	4894      	ldr	r0, [pc, #592]	; (801b0d4 <_printf_float+0x2e4>)
 801ae84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ae88:	bf94      	ite	ls
 801ae8a:	4698      	movls	r8, r3
 801ae8c:	4680      	movhi	r8, r0
 801ae8e:	2303      	movs	r3, #3
 801ae90:	6123      	str	r3, [r4, #16]
 801ae92:	9b05      	ldr	r3, [sp, #20]
 801ae94:	f023 0204 	bic.w	r2, r3, #4
 801ae98:	6022      	str	r2, [r4, #0]
 801ae9a:	f04f 0900 	mov.w	r9, #0
 801ae9e:	9700      	str	r7, [sp, #0]
 801aea0:	4633      	mov	r3, r6
 801aea2:	aa0b      	add	r2, sp, #44	; 0x2c
 801aea4:	4621      	mov	r1, r4
 801aea6:	4628      	mov	r0, r5
 801aea8:	f000 f9d8 	bl	801b25c <_printf_common>
 801aeac:	3001      	adds	r0, #1
 801aeae:	f040 8090 	bne.w	801afd2 <_printf_float+0x1e2>
 801aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb6:	b00d      	add	sp, #52	; 0x34
 801aeb8:	ecbd 8b02 	vpop	{d8}
 801aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aec0:	4642      	mov	r2, r8
 801aec2:	464b      	mov	r3, r9
 801aec4:	4640      	mov	r0, r8
 801aec6:	4649      	mov	r1, r9
 801aec8:	f7e5 fe40 	bl	8000b4c <__aeabi_dcmpun>
 801aecc:	b140      	cbz	r0, 801aee0 <_printf_float+0xf0>
 801aece:	464b      	mov	r3, r9
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	bfbc      	itt	lt
 801aed4:	232d      	movlt	r3, #45	; 0x2d
 801aed6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aeda:	487f      	ldr	r0, [pc, #508]	; (801b0d8 <_printf_float+0x2e8>)
 801aedc:	4b7f      	ldr	r3, [pc, #508]	; (801b0dc <_printf_float+0x2ec>)
 801aede:	e7d1      	b.n	801ae84 <_printf_float+0x94>
 801aee0:	6863      	ldr	r3, [r4, #4]
 801aee2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801aee6:	9206      	str	r2, [sp, #24]
 801aee8:	1c5a      	adds	r2, r3, #1
 801aeea:	d13f      	bne.n	801af6c <_printf_float+0x17c>
 801aeec:	2306      	movs	r3, #6
 801aeee:	6063      	str	r3, [r4, #4]
 801aef0:	9b05      	ldr	r3, [sp, #20]
 801aef2:	6861      	ldr	r1, [r4, #4]
 801aef4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aef8:	2300      	movs	r3, #0
 801aefa:	9303      	str	r3, [sp, #12]
 801aefc:	ab0a      	add	r3, sp, #40	; 0x28
 801aefe:	e9cd b301 	strd	fp, r3, [sp, #4]
 801af02:	ab09      	add	r3, sp, #36	; 0x24
 801af04:	ec49 8b10 	vmov	d0, r8, r9
 801af08:	9300      	str	r3, [sp, #0]
 801af0a:	6022      	str	r2, [r4, #0]
 801af0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801af10:	4628      	mov	r0, r5
 801af12:	f7ff fecd 	bl	801acb0 <__cvt>
 801af16:	9b06      	ldr	r3, [sp, #24]
 801af18:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af1a:	2b47      	cmp	r3, #71	; 0x47
 801af1c:	4680      	mov	r8, r0
 801af1e:	d108      	bne.n	801af32 <_printf_float+0x142>
 801af20:	1cc8      	adds	r0, r1, #3
 801af22:	db02      	blt.n	801af2a <_printf_float+0x13a>
 801af24:	6863      	ldr	r3, [r4, #4]
 801af26:	4299      	cmp	r1, r3
 801af28:	dd41      	ble.n	801afae <_printf_float+0x1be>
 801af2a:	f1ab 0b02 	sub.w	fp, fp, #2
 801af2e:	fa5f fb8b 	uxtb.w	fp, fp
 801af32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801af36:	d820      	bhi.n	801af7a <_printf_float+0x18a>
 801af38:	3901      	subs	r1, #1
 801af3a:	465a      	mov	r2, fp
 801af3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801af40:	9109      	str	r1, [sp, #36]	; 0x24
 801af42:	f7ff ff17 	bl	801ad74 <__exponent>
 801af46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af48:	1813      	adds	r3, r2, r0
 801af4a:	2a01      	cmp	r2, #1
 801af4c:	4681      	mov	r9, r0
 801af4e:	6123      	str	r3, [r4, #16]
 801af50:	dc02      	bgt.n	801af58 <_printf_float+0x168>
 801af52:	6822      	ldr	r2, [r4, #0]
 801af54:	07d2      	lsls	r2, r2, #31
 801af56:	d501      	bpl.n	801af5c <_printf_float+0x16c>
 801af58:	3301      	adds	r3, #1
 801af5a:	6123      	str	r3, [r4, #16]
 801af5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801af60:	2b00      	cmp	r3, #0
 801af62:	d09c      	beq.n	801ae9e <_printf_float+0xae>
 801af64:	232d      	movs	r3, #45	; 0x2d
 801af66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af6a:	e798      	b.n	801ae9e <_printf_float+0xae>
 801af6c:	9a06      	ldr	r2, [sp, #24]
 801af6e:	2a47      	cmp	r2, #71	; 0x47
 801af70:	d1be      	bne.n	801aef0 <_printf_float+0x100>
 801af72:	2b00      	cmp	r3, #0
 801af74:	d1bc      	bne.n	801aef0 <_printf_float+0x100>
 801af76:	2301      	movs	r3, #1
 801af78:	e7b9      	b.n	801aeee <_printf_float+0xfe>
 801af7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801af7e:	d118      	bne.n	801afb2 <_printf_float+0x1c2>
 801af80:	2900      	cmp	r1, #0
 801af82:	6863      	ldr	r3, [r4, #4]
 801af84:	dd0b      	ble.n	801af9e <_printf_float+0x1ae>
 801af86:	6121      	str	r1, [r4, #16]
 801af88:	b913      	cbnz	r3, 801af90 <_printf_float+0x1a0>
 801af8a:	6822      	ldr	r2, [r4, #0]
 801af8c:	07d0      	lsls	r0, r2, #31
 801af8e:	d502      	bpl.n	801af96 <_printf_float+0x1a6>
 801af90:	3301      	adds	r3, #1
 801af92:	440b      	add	r3, r1
 801af94:	6123      	str	r3, [r4, #16]
 801af96:	65a1      	str	r1, [r4, #88]	; 0x58
 801af98:	f04f 0900 	mov.w	r9, #0
 801af9c:	e7de      	b.n	801af5c <_printf_float+0x16c>
 801af9e:	b913      	cbnz	r3, 801afa6 <_printf_float+0x1b6>
 801afa0:	6822      	ldr	r2, [r4, #0]
 801afa2:	07d2      	lsls	r2, r2, #31
 801afa4:	d501      	bpl.n	801afaa <_printf_float+0x1ba>
 801afa6:	3302      	adds	r3, #2
 801afa8:	e7f4      	b.n	801af94 <_printf_float+0x1a4>
 801afaa:	2301      	movs	r3, #1
 801afac:	e7f2      	b.n	801af94 <_printf_float+0x1a4>
 801afae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afb4:	4299      	cmp	r1, r3
 801afb6:	db05      	blt.n	801afc4 <_printf_float+0x1d4>
 801afb8:	6823      	ldr	r3, [r4, #0]
 801afba:	6121      	str	r1, [r4, #16]
 801afbc:	07d8      	lsls	r0, r3, #31
 801afbe:	d5ea      	bpl.n	801af96 <_printf_float+0x1a6>
 801afc0:	1c4b      	adds	r3, r1, #1
 801afc2:	e7e7      	b.n	801af94 <_printf_float+0x1a4>
 801afc4:	2900      	cmp	r1, #0
 801afc6:	bfd4      	ite	le
 801afc8:	f1c1 0202 	rsble	r2, r1, #2
 801afcc:	2201      	movgt	r2, #1
 801afce:	4413      	add	r3, r2
 801afd0:	e7e0      	b.n	801af94 <_printf_float+0x1a4>
 801afd2:	6823      	ldr	r3, [r4, #0]
 801afd4:	055a      	lsls	r2, r3, #21
 801afd6:	d407      	bmi.n	801afe8 <_printf_float+0x1f8>
 801afd8:	6923      	ldr	r3, [r4, #16]
 801afda:	4642      	mov	r2, r8
 801afdc:	4631      	mov	r1, r6
 801afde:	4628      	mov	r0, r5
 801afe0:	47b8      	blx	r7
 801afe2:	3001      	adds	r0, #1
 801afe4:	d12c      	bne.n	801b040 <_printf_float+0x250>
 801afe6:	e764      	b.n	801aeb2 <_printf_float+0xc2>
 801afe8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801afec:	f240 80e0 	bls.w	801b1b0 <_printf_float+0x3c0>
 801aff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aff4:	2200      	movs	r2, #0
 801aff6:	2300      	movs	r3, #0
 801aff8:	f7e5 fd76 	bl	8000ae8 <__aeabi_dcmpeq>
 801affc:	2800      	cmp	r0, #0
 801affe:	d034      	beq.n	801b06a <_printf_float+0x27a>
 801b000:	4a37      	ldr	r2, [pc, #220]	; (801b0e0 <_printf_float+0x2f0>)
 801b002:	2301      	movs	r3, #1
 801b004:	4631      	mov	r1, r6
 801b006:	4628      	mov	r0, r5
 801b008:	47b8      	blx	r7
 801b00a:	3001      	adds	r0, #1
 801b00c:	f43f af51 	beq.w	801aeb2 <_printf_float+0xc2>
 801b010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b014:	429a      	cmp	r2, r3
 801b016:	db02      	blt.n	801b01e <_printf_float+0x22e>
 801b018:	6823      	ldr	r3, [r4, #0]
 801b01a:	07d8      	lsls	r0, r3, #31
 801b01c:	d510      	bpl.n	801b040 <_printf_float+0x250>
 801b01e:	ee18 3a10 	vmov	r3, s16
 801b022:	4652      	mov	r2, sl
 801b024:	4631      	mov	r1, r6
 801b026:	4628      	mov	r0, r5
 801b028:	47b8      	blx	r7
 801b02a:	3001      	adds	r0, #1
 801b02c:	f43f af41 	beq.w	801aeb2 <_printf_float+0xc2>
 801b030:	f04f 0800 	mov.w	r8, #0
 801b034:	f104 091a 	add.w	r9, r4, #26
 801b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b03a:	3b01      	subs	r3, #1
 801b03c:	4543      	cmp	r3, r8
 801b03e:	dc09      	bgt.n	801b054 <_printf_float+0x264>
 801b040:	6823      	ldr	r3, [r4, #0]
 801b042:	079b      	lsls	r3, r3, #30
 801b044:	f100 8105 	bmi.w	801b252 <_printf_float+0x462>
 801b048:	68e0      	ldr	r0, [r4, #12]
 801b04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b04c:	4298      	cmp	r0, r3
 801b04e:	bfb8      	it	lt
 801b050:	4618      	movlt	r0, r3
 801b052:	e730      	b.n	801aeb6 <_printf_float+0xc6>
 801b054:	2301      	movs	r3, #1
 801b056:	464a      	mov	r2, r9
 801b058:	4631      	mov	r1, r6
 801b05a:	4628      	mov	r0, r5
 801b05c:	47b8      	blx	r7
 801b05e:	3001      	adds	r0, #1
 801b060:	f43f af27 	beq.w	801aeb2 <_printf_float+0xc2>
 801b064:	f108 0801 	add.w	r8, r8, #1
 801b068:	e7e6      	b.n	801b038 <_printf_float+0x248>
 801b06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	dc39      	bgt.n	801b0e4 <_printf_float+0x2f4>
 801b070:	4a1b      	ldr	r2, [pc, #108]	; (801b0e0 <_printf_float+0x2f0>)
 801b072:	2301      	movs	r3, #1
 801b074:	4631      	mov	r1, r6
 801b076:	4628      	mov	r0, r5
 801b078:	47b8      	blx	r7
 801b07a:	3001      	adds	r0, #1
 801b07c:	f43f af19 	beq.w	801aeb2 <_printf_float+0xc2>
 801b080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b084:	4313      	orrs	r3, r2
 801b086:	d102      	bne.n	801b08e <_printf_float+0x29e>
 801b088:	6823      	ldr	r3, [r4, #0]
 801b08a:	07d9      	lsls	r1, r3, #31
 801b08c:	d5d8      	bpl.n	801b040 <_printf_float+0x250>
 801b08e:	ee18 3a10 	vmov	r3, s16
 801b092:	4652      	mov	r2, sl
 801b094:	4631      	mov	r1, r6
 801b096:	4628      	mov	r0, r5
 801b098:	47b8      	blx	r7
 801b09a:	3001      	adds	r0, #1
 801b09c:	f43f af09 	beq.w	801aeb2 <_printf_float+0xc2>
 801b0a0:	f04f 0900 	mov.w	r9, #0
 801b0a4:	f104 0a1a 	add.w	sl, r4, #26
 801b0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0aa:	425b      	negs	r3, r3
 801b0ac:	454b      	cmp	r3, r9
 801b0ae:	dc01      	bgt.n	801b0b4 <_printf_float+0x2c4>
 801b0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0b2:	e792      	b.n	801afda <_printf_float+0x1ea>
 801b0b4:	2301      	movs	r3, #1
 801b0b6:	4652      	mov	r2, sl
 801b0b8:	4631      	mov	r1, r6
 801b0ba:	4628      	mov	r0, r5
 801b0bc:	47b8      	blx	r7
 801b0be:	3001      	adds	r0, #1
 801b0c0:	f43f aef7 	beq.w	801aeb2 <_printf_float+0xc2>
 801b0c4:	f109 0901 	add.w	r9, r9, #1
 801b0c8:	e7ee      	b.n	801b0a8 <_printf_float+0x2b8>
 801b0ca:	bf00      	nop
 801b0cc:	7fefffff 	.word	0x7fefffff
 801b0d0:	08021c40 	.word	0x08021c40
 801b0d4:	08021c44 	.word	0x08021c44
 801b0d8:	08021c4c 	.word	0x08021c4c
 801b0dc:	08021c48 	.word	0x08021c48
 801b0e0:	08021f89 	.word	0x08021f89
 801b0e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b0e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	bfa8      	it	ge
 801b0ec:	461a      	movge	r2, r3
 801b0ee:	2a00      	cmp	r2, #0
 801b0f0:	4691      	mov	r9, r2
 801b0f2:	dc37      	bgt.n	801b164 <_printf_float+0x374>
 801b0f4:	f04f 0b00 	mov.w	fp, #0
 801b0f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b0fc:	f104 021a 	add.w	r2, r4, #26
 801b100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b102:	9305      	str	r3, [sp, #20]
 801b104:	eba3 0309 	sub.w	r3, r3, r9
 801b108:	455b      	cmp	r3, fp
 801b10a:	dc33      	bgt.n	801b174 <_printf_float+0x384>
 801b10c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b110:	429a      	cmp	r2, r3
 801b112:	db3b      	blt.n	801b18c <_printf_float+0x39c>
 801b114:	6823      	ldr	r3, [r4, #0]
 801b116:	07da      	lsls	r2, r3, #31
 801b118:	d438      	bmi.n	801b18c <_printf_float+0x39c>
 801b11a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b11c:	9b05      	ldr	r3, [sp, #20]
 801b11e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	eba2 0901 	sub.w	r9, r2, r1
 801b126:	4599      	cmp	r9, r3
 801b128:	bfa8      	it	ge
 801b12a:	4699      	movge	r9, r3
 801b12c:	f1b9 0f00 	cmp.w	r9, #0
 801b130:	dc35      	bgt.n	801b19e <_printf_float+0x3ae>
 801b132:	f04f 0800 	mov.w	r8, #0
 801b136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b13a:	f104 0a1a 	add.w	sl, r4, #26
 801b13e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b142:	1a9b      	subs	r3, r3, r2
 801b144:	eba3 0309 	sub.w	r3, r3, r9
 801b148:	4543      	cmp	r3, r8
 801b14a:	f77f af79 	ble.w	801b040 <_printf_float+0x250>
 801b14e:	2301      	movs	r3, #1
 801b150:	4652      	mov	r2, sl
 801b152:	4631      	mov	r1, r6
 801b154:	4628      	mov	r0, r5
 801b156:	47b8      	blx	r7
 801b158:	3001      	adds	r0, #1
 801b15a:	f43f aeaa 	beq.w	801aeb2 <_printf_float+0xc2>
 801b15e:	f108 0801 	add.w	r8, r8, #1
 801b162:	e7ec      	b.n	801b13e <_printf_float+0x34e>
 801b164:	4613      	mov	r3, r2
 801b166:	4631      	mov	r1, r6
 801b168:	4642      	mov	r2, r8
 801b16a:	4628      	mov	r0, r5
 801b16c:	47b8      	blx	r7
 801b16e:	3001      	adds	r0, #1
 801b170:	d1c0      	bne.n	801b0f4 <_printf_float+0x304>
 801b172:	e69e      	b.n	801aeb2 <_printf_float+0xc2>
 801b174:	2301      	movs	r3, #1
 801b176:	4631      	mov	r1, r6
 801b178:	4628      	mov	r0, r5
 801b17a:	9205      	str	r2, [sp, #20]
 801b17c:	47b8      	blx	r7
 801b17e:	3001      	adds	r0, #1
 801b180:	f43f ae97 	beq.w	801aeb2 <_printf_float+0xc2>
 801b184:	9a05      	ldr	r2, [sp, #20]
 801b186:	f10b 0b01 	add.w	fp, fp, #1
 801b18a:	e7b9      	b.n	801b100 <_printf_float+0x310>
 801b18c:	ee18 3a10 	vmov	r3, s16
 801b190:	4652      	mov	r2, sl
 801b192:	4631      	mov	r1, r6
 801b194:	4628      	mov	r0, r5
 801b196:	47b8      	blx	r7
 801b198:	3001      	adds	r0, #1
 801b19a:	d1be      	bne.n	801b11a <_printf_float+0x32a>
 801b19c:	e689      	b.n	801aeb2 <_printf_float+0xc2>
 801b19e:	9a05      	ldr	r2, [sp, #20]
 801b1a0:	464b      	mov	r3, r9
 801b1a2:	4442      	add	r2, r8
 801b1a4:	4631      	mov	r1, r6
 801b1a6:	4628      	mov	r0, r5
 801b1a8:	47b8      	blx	r7
 801b1aa:	3001      	adds	r0, #1
 801b1ac:	d1c1      	bne.n	801b132 <_printf_float+0x342>
 801b1ae:	e680      	b.n	801aeb2 <_printf_float+0xc2>
 801b1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1b2:	2a01      	cmp	r2, #1
 801b1b4:	dc01      	bgt.n	801b1ba <_printf_float+0x3ca>
 801b1b6:	07db      	lsls	r3, r3, #31
 801b1b8:	d538      	bpl.n	801b22c <_printf_float+0x43c>
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	4642      	mov	r2, r8
 801b1be:	4631      	mov	r1, r6
 801b1c0:	4628      	mov	r0, r5
 801b1c2:	47b8      	blx	r7
 801b1c4:	3001      	adds	r0, #1
 801b1c6:	f43f ae74 	beq.w	801aeb2 <_printf_float+0xc2>
 801b1ca:	ee18 3a10 	vmov	r3, s16
 801b1ce:	4652      	mov	r2, sl
 801b1d0:	4631      	mov	r1, r6
 801b1d2:	4628      	mov	r0, r5
 801b1d4:	47b8      	blx	r7
 801b1d6:	3001      	adds	r0, #1
 801b1d8:	f43f ae6b 	beq.w	801aeb2 <_printf_float+0xc2>
 801b1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	f7e5 fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 801b1e8:	b9d8      	cbnz	r0, 801b222 <_printf_float+0x432>
 801b1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1ec:	f108 0201 	add.w	r2, r8, #1
 801b1f0:	3b01      	subs	r3, #1
 801b1f2:	4631      	mov	r1, r6
 801b1f4:	4628      	mov	r0, r5
 801b1f6:	47b8      	blx	r7
 801b1f8:	3001      	adds	r0, #1
 801b1fa:	d10e      	bne.n	801b21a <_printf_float+0x42a>
 801b1fc:	e659      	b.n	801aeb2 <_printf_float+0xc2>
 801b1fe:	2301      	movs	r3, #1
 801b200:	4652      	mov	r2, sl
 801b202:	4631      	mov	r1, r6
 801b204:	4628      	mov	r0, r5
 801b206:	47b8      	blx	r7
 801b208:	3001      	adds	r0, #1
 801b20a:	f43f ae52 	beq.w	801aeb2 <_printf_float+0xc2>
 801b20e:	f108 0801 	add.w	r8, r8, #1
 801b212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b214:	3b01      	subs	r3, #1
 801b216:	4543      	cmp	r3, r8
 801b218:	dcf1      	bgt.n	801b1fe <_printf_float+0x40e>
 801b21a:	464b      	mov	r3, r9
 801b21c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b220:	e6dc      	b.n	801afdc <_printf_float+0x1ec>
 801b222:	f04f 0800 	mov.w	r8, #0
 801b226:	f104 0a1a 	add.w	sl, r4, #26
 801b22a:	e7f2      	b.n	801b212 <_printf_float+0x422>
 801b22c:	2301      	movs	r3, #1
 801b22e:	4642      	mov	r2, r8
 801b230:	e7df      	b.n	801b1f2 <_printf_float+0x402>
 801b232:	2301      	movs	r3, #1
 801b234:	464a      	mov	r2, r9
 801b236:	4631      	mov	r1, r6
 801b238:	4628      	mov	r0, r5
 801b23a:	47b8      	blx	r7
 801b23c:	3001      	adds	r0, #1
 801b23e:	f43f ae38 	beq.w	801aeb2 <_printf_float+0xc2>
 801b242:	f108 0801 	add.w	r8, r8, #1
 801b246:	68e3      	ldr	r3, [r4, #12]
 801b248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b24a:	1a5b      	subs	r3, r3, r1
 801b24c:	4543      	cmp	r3, r8
 801b24e:	dcf0      	bgt.n	801b232 <_printf_float+0x442>
 801b250:	e6fa      	b.n	801b048 <_printf_float+0x258>
 801b252:	f04f 0800 	mov.w	r8, #0
 801b256:	f104 0919 	add.w	r9, r4, #25
 801b25a:	e7f4      	b.n	801b246 <_printf_float+0x456>

0801b25c <_printf_common>:
 801b25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b260:	4616      	mov	r6, r2
 801b262:	4699      	mov	r9, r3
 801b264:	688a      	ldr	r2, [r1, #8]
 801b266:	690b      	ldr	r3, [r1, #16]
 801b268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b26c:	4293      	cmp	r3, r2
 801b26e:	bfb8      	it	lt
 801b270:	4613      	movlt	r3, r2
 801b272:	6033      	str	r3, [r6, #0]
 801b274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b278:	4607      	mov	r7, r0
 801b27a:	460c      	mov	r4, r1
 801b27c:	b10a      	cbz	r2, 801b282 <_printf_common+0x26>
 801b27e:	3301      	adds	r3, #1
 801b280:	6033      	str	r3, [r6, #0]
 801b282:	6823      	ldr	r3, [r4, #0]
 801b284:	0699      	lsls	r1, r3, #26
 801b286:	bf42      	ittt	mi
 801b288:	6833      	ldrmi	r3, [r6, #0]
 801b28a:	3302      	addmi	r3, #2
 801b28c:	6033      	strmi	r3, [r6, #0]
 801b28e:	6825      	ldr	r5, [r4, #0]
 801b290:	f015 0506 	ands.w	r5, r5, #6
 801b294:	d106      	bne.n	801b2a4 <_printf_common+0x48>
 801b296:	f104 0a19 	add.w	sl, r4, #25
 801b29a:	68e3      	ldr	r3, [r4, #12]
 801b29c:	6832      	ldr	r2, [r6, #0]
 801b29e:	1a9b      	subs	r3, r3, r2
 801b2a0:	42ab      	cmp	r3, r5
 801b2a2:	dc26      	bgt.n	801b2f2 <_printf_common+0x96>
 801b2a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b2a8:	1e13      	subs	r3, r2, #0
 801b2aa:	6822      	ldr	r2, [r4, #0]
 801b2ac:	bf18      	it	ne
 801b2ae:	2301      	movne	r3, #1
 801b2b0:	0692      	lsls	r2, r2, #26
 801b2b2:	d42b      	bmi.n	801b30c <_printf_common+0xb0>
 801b2b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2b8:	4649      	mov	r1, r9
 801b2ba:	4638      	mov	r0, r7
 801b2bc:	47c0      	blx	r8
 801b2be:	3001      	adds	r0, #1
 801b2c0:	d01e      	beq.n	801b300 <_printf_common+0xa4>
 801b2c2:	6823      	ldr	r3, [r4, #0]
 801b2c4:	68e5      	ldr	r5, [r4, #12]
 801b2c6:	6832      	ldr	r2, [r6, #0]
 801b2c8:	f003 0306 	and.w	r3, r3, #6
 801b2cc:	2b04      	cmp	r3, #4
 801b2ce:	bf08      	it	eq
 801b2d0:	1aad      	subeq	r5, r5, r2
 801b2d2:	68a3      	ldr	r3, [r4, #8]
 801b2d4:	6922      	ldr	r2, [r4, #16]
 801b2d6:	bf0c      	ite	eq
 801b2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b2dc:	2500      	movne	r5, #0
 801b2de:	4293      	cmp	r3, r2
 801b2e0:	bfc4      	itt	gt
 801b2e2:	1a9b      	subgt	r3, r3, r2
 801b2e4:	18ed      	addgt	r5, r5, r3
 801b2e6:	2600      	movs	r6, #0
 801b2e8:	341a      	adds	r4, #26
 801b2ea:	42b5      	cmp	r5, r6
 801b2ec:	d11a      	bne.n	801b324 <_printf_common+0xc8>
 801b2ee:	2000      	movs	r0, #0
 801b2f0:	e008      	b.n	801b304 <_printf_common+0xa8>
 801b2f2:	2301      	movs	r3, #1
 801b2f4:	4652      	mov	r2, sl
 801b2f6:	4649      	mov	r1, r9
 801b2f8:	4638      	mov	r0, r7
 801b2fa:	47c0      	blx	r8
 801b2fc:	3001      	adds	r0, #1
 801b2fe:	d103      	bne.n	801b308 <_printf_common+0xac>
 801b300:	f04f 30ff 	mov.w	r0, #4294967295
 801b304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b308:	3501      	adds	r5, #1
 801b30a:	e7c6      	b.n	801b29a <_printf_common+0x3e>
 801b30c:	18e1      	adds	r1, r4, r3
 801b30e:	1c5a      	adds	r2, r3, #1
 801b310:	2030      	movs	r0, #48	; 0x30
 801b312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b316:	4422      	add	r2, r4
 801b318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b31c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b320:	3302      	adds	r3, #2
 801b322:	e7c7      	b.n	801b2b4 <_printf_common+0x58>
 801b324:	2301      	movs	r3, #1
 801b326:	4622      	mov	r2, r4
 801b328:	4649      	mov	r1, r9
 801b32a:	4638      	mov	r0, r7
 801b32c:	47c0      	blx	r8
 801b32e:	3001      	adds	r0, #1
 801b330:	d0e6      	beq.n	801b300 <_printf_common+0xa4>
 801b332:	3601      	adds	r6, #1
 801b334:	e7d9      	b.n	801b2ea <_printf_common+0x8e>
	...

0801b338 <_printf_i>:
 801b338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b33c:	460c      	mov	r4, r1
 801b33e:	4691      	mov	r9, r2
 801b340:	7e27      	ldrb	r7, [r4, #24]
 801b342:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b344:	2f78      	cmp	r7, #120	; 0x78
 801b346:	4680      	mov	r8, r0
 801b348:	469a      	mov	sl, r3
 801b34a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b34e:	d807      	bhi.n	801b360 <_printf_i+0x28>
 801b350:	2f62      	cmp	r7, #98	; 0x62
 801b352:	d80a      	bhi.n	801b36a <_printf_i+0x32>
 801b354:	2f00      	cmp	r7, #0
 801b356:	f000 80d8 	beq.w	801b50a <_printf_i+0x1d2>
 801b35a:	2f58      	cmp	r7, #88	; 0x58
 801b35c:	f000 80a3 	beq.w	801b4a6 <_printf_i+0x16e>
 801b360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b368:	e03a      	b.n	801b3e0 <_printf_i+0xa8>
 801b36a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b36e:	2b15      	cmp	r3, #21
 801b370:	d8f6      	bhi.n	801b360 <_printf_i+0x28>
 801b372:	a001      	add	r0, pc, #4	; (adr r0, 801b378 <_printf_i+0x40>)
 801b374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b378:	0801b3d1 	.word	0x0801b3d1
 801b37c:	0801b3e5 	.word	0x0801b3e5
 801b380:	0801b361 	.word	0x0801b361
 801b384:	0801b361 	.word	0x0801b361
 801b388:	0801b361 	.word	0x0801b361
 801b38c:	0801b361 	.word	0x0801b361
 801b390:	0801b3e5 	.word	0x0801b3e5
 801b394:	0801b361 	.word	0x0801b361
 801b398:	0801b361 	.word	0x0801b361
 801b39c:	0801b361 	.word	0x0801b361
 801b3a0:	0801b361 	.word	0x0801b361
 801b3a4:	0801b4f1 	.word	0x0801b4f1
 801b3a8:	0801b415 	.word	0x0801b415
 801b3ac:	0801b4d3 	.word	0x0801b4d3
 801b3b0:	0801b361 	.word	0x0801b361
 801b3b4:	0801b361 	.word	0x0801b361
 801b3b8:	0801b513 	.word	0x0801b513
 801b3bc:	0801b361 	.word	0x0801b361
 801b3c0:	0801b415 	.word	0x0801b415
 801b3c4:	0801b361 	.word	0x0801b361
 801b3c8:	0801b361 	.word	0x0801b361
 801b3cc:	0801b4db 	.word	0x0801b4db
 801b3d0:	680b      	ldr	r3, [r1, #0]
 801b3d2:	1d1a      	adds	r2, r3, #4
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	600a      	str	r2, [r1, #0]
 801b3d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b3dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b3e0:	2301      	movs	r3, #1
 801b3e2:	e0a3      	b.n	801b52c <_printf_i+0x1f4>
 801b3e4:	6825      	ldr	r5, [r4, #0]
 801b3e6:	6808      	ldr	r0, [r1, #0]
 801b3e8:	062e      	lsls	r6, r5, #24
 801b3ea:	f100 0304 	add.w	r3, r0, #4
 801b3ee:	d50a      	bpl.n	801b406 <_printf_i+0xce>
 801b3f0:	6805      	ldr	r5, [r0, #0]
 801b3f2:	600b      	str	r3, [r1, #0]
 801b3f4:	2d00      	cmp	r5, #0
 801b3f6:	da03      	bge.n	801b400 <_printf_i+0xc8>
 801b3f8:	232d      	movs	r3, #45	; 0x2d
 801b3fa:	426d      	negs	r5, r5
 801b3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b400:	485e      	ldr	r0, [pc, #376]	; (801b57c <_printf_i+0x244>)
 801b402:	230a      	movs	r3, #10
 801b404:	e019      	b.n	801b43a <_printf_i+0x102>
 801b406:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b40a:	6805      	ldr	r5, [r0, #0]
 801b40c:	600b      	str	r3, [r1, #0]
 801b40e:	bf18      	it	ne
 801b410:	b22d      	sxthne	r5, r5
 801b412:	e7ef      	b.n	801b3f4 <_printf_i+0xbc>
 801b414:	680b      	ldr	r3, [r1, #0]
 801b416:	6825      	ldr	r5, [r4, #0]
 801b418:	1d18      	adds	r0, r3, #4
 801b41a:	6008      	str	r0, [r1, #0]
 801b41c:	0628      	lsls	r0, r5, #24
 801b41e:	d501      	bpl.n	801b424 <_printf_i+0xec>
 801b420:	681d      	ldr	r5, [r3, #0]
 801b422:	e002      	b.n	801b42a <_printf_i+0xf2>
 801b424:	0669      	lsls	r1, r5, #25
 801b426:	d5fb      	bpl.n	801b420 <_printf_i+0xe8>
 801b428:	881d      	ldrh	r5, [r3, #0]
 801b42a:	4854      	ldr	r0, [pc, #336]	; (801b57c <_printf_i+0x244>)
 801b42c:	2f6f      	cmp	r7, #111	; 0x6f
 801b42e:	bf0c      	ite	eq
 801b430:	2308      	moveq	r3, #8
 801b432:	230a      	movne	r3, #10
 801b434:	2100      	movs	r1, #0
 801b436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b43a:	6866      	ldr	r6, [r4, #4]
 801b43c:	60a6      	str	r6, [r4, #8]
 801b43e:	2e00      	cmp	r6, #0
 801b440:	bfa2      	ittt	ge
 801b442:	6821      	ldrge	r1, [r4, #0]
 801b444:	f021 0104 	bicge.w	r1, r1, #4
 801b448:	6021      	strge	r1, [r4, #0]
 801b44a:	b90d      	cbnz	r5, 801b450 <_printf_i+0x118>
 801b44c:	2e00      	cmp	r6, #0
 801b44e:	d04d      	beq.n	801b4ec <_printf_i+0x1b4>
 801b450:	4616      	mov	r6, r2
 801b452:	fbb5 f1f3 	udiv	r1, r5, r3
 801b456:	fb03 5711 	mls	r7, r3, r1, r5
 801b45a:	5dc7      	ldrb	r7, [r0, r7]
 801b45c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b460:	462f      	mov	r7, r5
 801b462:	42bb      	cmp	r3, r7
 801b464:	460d      	mov	r5, r1
 801b466:	d9f4      	bls.n	801b452 <_printf_i+0x11a>
 801b468:	2b08      	cmp	r3, #8
 801b46a:	d10b      	bne.n	801b484 <_printf_i+0x14c>
 801b46c:	6823      	ldr	r3, [r4, #0]
 801b46e:	07df      	lsls	r7, r3, #31
 801b470:	d508      	bpl.n	801b484 <_printf_i+0x14c>
 801b472:	6923      	ldr	r3, [r4, #16]
 801b474:	6861      	ldr	r1, [r4, #4]
 801b476:	4299      	cmp	r1, r3
 801b478:	bfde      	ittt	le
 801b47a:	2330      	movle	r3, #48	; 0x30
 801b47c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b480:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b484:	1b92      	subs	r2, r2, r6
 801b486:	6122      	str	r2, [r4, #16]
 801b488:	f8cd a000 	str.w	sl, [sp]
 801b48c:	464b      	mov	r3, r9
 801b48e:	aa03      	add	r2, sp, #12
 801b490:	4621      	mov	r1, r4
 801b492:	4640      	mov	r0, r8
 801b494:	f7ff fee2 	bl	801b25c <_printf_common>
 801b498:	3001      	adds	r0, #1
 801b49a:	d14c      	bne.n	801b536 <_printf_i+0x1fe>
 801b49c:	f04f 30ff 	mov.w	r0, #4294967295
 801b4a0:	b004      	add	sp, #16
 801b4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4a6:	4835      	ldr	r0, [pc, #212]	; (801b57c <_printf_i+0x244>)
 801b4a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b4ac:	6823      	ldr	r3, [r4, #0]
 801b4ae:	680e      	ldr	r6, [r1, #0]
 801b4b0:	061f      	lsls	r7, r3, #24
 801b4b2:	f856 5b04 	ldr.w	r5, [r6], #4
 801b4b6:	600e      	str	r6, [r1, #0]
 801b4b8:	d514      	bpl.n	801b4e4 <_printf_i+0x1ac>
 801b4ba:	07d9      	lsls	r1, r3, #31
 801b4bc:	bf44      	itt	mi
 801b4be:	f043 0320 	orrmi.w	r3, r3, #32
 801b4c2:	6023      	strmi	r3, [r4, #0]
 801b4c4:	b91d      	cbnz	r5, 801b4ce <_printf_i+0x196>
 801b4c6:	6823      	ldr	r3, [r4, #0]
 801b4c8:	f023 0320 	bic.w	r3, r3, #32
 801b4cc:	6023      	str	r3, [r4, #0]
 801b4ce:	2310      	movs	r3, #16
 801b4d0:	e7b0      	b.n	801b434 <_printf_i+0xfc>
 801b4d2:	6823      	ldr	r3, [r4, #0]
 801b4d4:	f043 0320 	orr.w	r3, r3, #32
 801b4d8:	6023      	str	r3, [r4, #0]
 801b4da:	2378      	movs	r3, #120	; 0x78
 801b4dc:	4828      	ldr	r0, [pc, #160]	; (801b580 <_printf_i+0x248>)
 801b4de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b4e2:	e7e3      	b.n	801b4ac <_printf_i+0x174>
 801b4e4:	065e      	lsls	r6, r3, #25
 801b4e6:	bf48      	it	mi
 801b4e8:	b2ad      	uxthmi	r5, r5
 801b4ea:	e7e6      	b.n	801b4ba <_printf_i+0x182>
 801b4ec:	4616      	mov	r6, r2
 801b4ee:	e7bb      	b.n	801b468 <_printf_i+0x130>
 801b4f0:	680b      	ldr	r3, [r1, #0]
 801b4f2:	6826      	ldr	r6, [r4, #0]
 801b4f4:	6960      	ldr	r0, [r4, #20]
 801b4f6:	1d1d      	adds	r5, r3, #4
 801b4f8:	600d      	str	r5, [r1, #0]
 801b4fa:	0635      	lsls	r5, r6, #24
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	d501      	bpl.n	801b504 <_printf_i+0x1cc>
 801b500:	6018      	str	r0, [r3, #0]
 801b502:	e002      	b.n	801b50a <_printf_i+0x1d2>
 801b504:	0671      	lsls	r1, r6, #25
 801b506:	d5fb      	bpl.n	801b500 <_printf_i+0x1c8>
 801b508:	8018      	strh	r0, [r3, #0]
 801b50a:	2300      	movs	r3, #0
 801b50c:	6123      	str	r3, [r4, #16]
 801b50e:	4616      	mov	r6, r2
 801b510:	e7ba      	b.n	801b488 <_printf_i+0x150>
 801b512:	680b      	ldr	r3, [r1, #0]
 801b514:	1d1a      	adds	r2, r3, #4
 801b516:	600a      	str	r2, [r1, #0]
 801b518:	681e      	ldr	r6, [r3, #0]
 801b51a:	6862      	ldr	r2, [r4, #4]
 801b51c:	2100      	movs	r1, #0
 801b51e:	4630      	mov	r0, r6
 801b520:	f7e4 fe6e 	bl	8000200 <memchr>
 801b524:	b108      	cbz	r0, 801b52a <_printf_i+0x1f2>
 801b526:	1b80      	subs	r0, r0, r6
 801b528:	6060      	str	r0, [r4, #4]
 801b52a:	6863      	ldr	r3, [r4, #4]
 801b52c:	6123      	str	r3, [r4, #16]
 801b52e:	2300      	movs	r3, #0
 801b530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b534:	e7a8      	b.n	801b488 <_printf_i+0x150>
 801b536:	6923      	ldr	r3, [r4, #16]
 801b538:	4632      	mov	r2, r6
 801b53a:	4649      	mov	r1, r9
 801b53c:	4640      	mov	r0, r8
 801b53e:	47d0      	blx	sl
 801b540:	3001      	adds	r0, #1
 801b542:	d0ab      	beq.n	801b49c <_printf_i+0x164>
 801b544:	6823      	ldr	r3, [r4, #0]
 801b546:	079b      	lsls	r3, r3, #30
 801b548:	d413      	bmi.n	801b572 <_printf_i+0x23a>
 801b54a:	68e0      	ldr	r0, [r4, #12]
 801b54c:	9b03      	ldr	r3, [sp, #12]
 801b54e:	4298      	cmp	r0, r3
 801b550:	bfb8      	it	lt
 801b552:	4618      	movlt	r0, r3
 801b554:	e7a4      	b.n	801b4a0 <_printf_i+0x168>
 801b556:	2301      	movs	r3, #1
 801b558:	4632      	mov	r2, r6
 801b55a:	4649      	mov	r1, r9
 801b55c:	4640      	mov	r0, r8
 801b55e:	47d0      	blx	sl
 801b560:	3001      	adds	r0, #1
 801b562:	d09b      	beq.n	801b49c <_printf_i+0x164>
 801b564:	3501      	adds	r5, #1
 801b566:	68e3      	ldr	r3, [r4, #12]
 801b568:	9903      	ldr	r1, [sp, #12]
 801b56a:	1a5b      	subs	r3, r3, r1
 801b56c:	42ab      	cmp	r3, r5
 801b56e:	dcf2      	bgt.n	801b556 <_printf_i+0x21e>
 801b570:	e7eb      	b.n	801b54a <_printf_i+0x212>
 801b572:	2500      	movs	r5, #0
 801b574:	f104 0619 	add.w	r6, r4, #25
 801b578:	e7f5      	b.n	801b566 <_printf_i+0x22e>
 801b57a:	bf00      	nop
 801b57c:	08021c50 	.word	0x08021c50
 801b580:	08021c61 	.word	0x08021c61

0801b584 <_scanf_float>:
 801b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b588:	b087      	sub	sp, #28
 801b58a:	4617      	mov	r7, r2
 801b58c:	9303      	str	r3, [sp, #12]
 801b58e:	688b      	ldr	r3, [r1, #8]
 801b590:	1e5a      	subs	r2, r3, #1
 801b592:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b596:	bf83      	ittte	hi
 801b598:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b59c:	195b      	addhi	r3, r3, r5
 801b59e:	9302      	strhi	r3, [sp, #8]
 801b5a0:	2300      	movls	r3, #0
 801b5a2:	bf86      	itte	hi
 801b5a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b5a8:	608b      	strhi	r3, [r1, #8]
 801b5aa:	9302      	strls	r3, [sp, #8]
 801b5ac:	680b      	ldr	r3, [r1, #0]
 801b5ae:	468b      	mov	fp, r1
 801b5b0:	2500      	movs	r5, #0
 801b5b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b5b6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b5ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b5be:	4680      	mov	r8, r0
 801b5c0:	460c      	mov	r4, r1
 801b5c2:	465e      	mov	r6, fp
 801b5c4:	46aa      	mov	sl, r5
 801b5c6:	46a9      	mov	r9, r5
 801b5c8:	9501      	str	r5, [sp, #4]
 801b5ca:	68a2      	ldr	r2, [r4, #8]
 801b5cc:	b152      	cbz	r2, 801b5e4 <_scanf_float+0x60>
 801b5ce:	683b      	ldr	r3, [r7, #0]
 801b5d0:	781b      	ldrb	r3, [r3, #0]
 801b5d2:	2b4e      	cmp	r3, #78	; 0x4e
 801b5d4:	d864      	bhi.n	801b6a0 <_scanf_float+0x11c>
 801b5d6:	2b40      	cmp	r3, #64	; 0x40
 801b5d8:	d83c      	bhi.n	801b654 <_scanf_float+0xd0>
 801b5da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b5de:	b2c8      	uxtb	r0, r1
 801b5e0:	280e      	cmp	r0, #14
 801b5e2:	d93a      	bls.n	801b65a <_scanf_float+0xd6>
 801b5e4:	f1b9 0f00 	cmp.w	r9, #0
 801b5e8:	d003      	beq.n	801b5f2 <_scanf_float+0x6e>
 801b5ea:	6823      	ldr	r3, [r4, #0]
 801b5ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b5f0:	6023      	str	r3, [r4, #0]
 801b5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b5f6:	f1ba 0f01 	cmp.w	sl, #1
 801b5fa:	f200 8113 	bhi.w	801b824 <_scanf_float+0x2a0>
 801b5fe:	455e      	cmp	r6, fp
 801b600:	f200 8105 	bhi.w	801b80e <_scanf_float+0x28a>
 801b604:	2501      	movs	r5, #1
 801b606:	4628      	mov	r0, r5
 801b608:	b007      	add	sp, #28
 801b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b612:	2a0d      	cmp	r2, #13
 801b614:	d8e6      	bhi.n	801b5e4 <_scanf_float+0x60>
 801b616:	a101      	add	r1, pc, #4	; (adr r1, 801b61c <_scanf_float+0x98>)
 801b618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b61c:	0801b75b 	.word	0x0801b75b
 801b620:	0801b5e5 	.word	0x0801b5e5
 801b624:	0801b5e5 	.word	0x0801b5e5
 801b628:	0801b5e5 	.word	0x0801b5e5
 801b62c:	0801b7bb 	.word	0x0801b7bb
 801b630:	0801b793 	.word	0x0801b793
 801b634:	0801b5e5 	.word	0x0801b5e5
 801b638:	0801b5e5 	.word	0x0801b5e5
 801b63c:	0801b769 	.word	0x0801b769
 801b640:	0801b5e5 	.word	0x0801b5e5
 801b644:	0801b5e5 	.word	0x0801b5e5
 801b648:	0801b5e5 	.word	0x0801b5e5
 801b64c:	0801b5e5 	.word	0x0801b5e5
 801b650:	0801b721 	.word	0x0801b721
 801b654:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b658:	e7db      	b.n	801b612 <_scanf_float+0x8e>
 801b65a:	290e      	cmp	r1, #14
 801b65c:	d8c2      	bhi.n	801b5e4 <_scanf_float+0x60>
 801b65e:	a001      	add	r0, pc, #4	; (adr r0, 801b664 <_scanf_float+0xe0>)
 801b660:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b664:	0801b713 	.word	0x0801b713
 801b668:	0801b5e5 	.word	0x0801b5e5
 801b66c:	0801b713 	.word	0x0801b713
 801b670:	0801b7a7 	.word	0x0801b7a7
 801b674:	0801b5e5 	.word	0x0801b5e5
 801b678:	0801b6c1 	.word	0x0801b6c1
 801b67c:	0801b6fd 	.word	0x0801b6fd
 801b680:	0801b6fd 	.word	0x0801b6fd
 801b684:	0801b6fd 	.word	0x0801b6fd
 801b688:	0801b6fd 	.word	0x0801b6fd
 801b68c:	0801b6fd 	.word	0x0801b6fd
 801b690:	0801b6fd 	.word	0x0801b6fd
 801b694:	0801b6fd 	.word	0x0801b6fd
 801b698:	0801b6fd 	.word	0x0801b6fd
 801b69c:	0801b6fd 	.word	0x0801b6fd
 801b6a0:	2b6e      	cmp	r3, #110	; 0x6e
 801b6a2:	d809      	bhi.n	801b6b8 <_scanf_float+0x134>
 801b6a4:	2b60      	cmp	r3, #96	; 0x60
 801b6a6:	d8b2      	bhi.n	801b60e <_scanf_float+0x8a>
 801b6a8:	2b54      	cmp	r3, #84	; 0x54
 801b6aa:	d077      	beq.n	801b79c <_scanf_float+0x218>
 801b6ac:	2b59      	cmp	r3, #89	; 0x59
 801b6ae:	d199      	bne.n	801b5e4 <_scanf_float+0x60>
 801b6b0:	2d07      	cmp	r5, #7
 801b6b2:	d197      	bne.n	801b5e4 <_scanf_float+0x60>
 801b6b4:	2508      	movs	r5, #8
 801b6b6:	e029      	b.n	801b70c <_scanf_float+0x188>
 801b6b8:	2b74      	cmp	r3, #116	; 0x74
 801b6ba:	d06f      	beq.n	801b79c <_scanf_float+0x218>
 801b6bc:	2b79      	cmp	r3, #121	; 0x79
 801b6be:	e7f6      	b.n	801b6ae <_scanf_float+0x12a>
 801b6c0:	6821      	ldr	r1, [r4, #0]
 801b6c2:	05c8      	lsls	r0, r1, #23
 801b6c4:	d51a      	bpl.n	801b6fc <_scanf_float+0x178>
 801b6c6:	9b02      	ldr	r3, [sp, #8]
 801b6c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b6cc:	6021      	str	r1, [r4, #0]
 801b6ce:	f109 0901 	add.w	r9, r9, #1
 801b6d2:	b11b      	cbz	r3, 801b6dc <_scanf_float+0x158>
 801b6d4:	3b01      	subs	r3, #1
 801b6d6:	3201      	adds	r2, #1
 801b6d8:	9302      	str	r3, [sp, #8]
 801b6da:	60a2      	str	r2, [r4, #8]
 801b6dc:	68a3      	ldr	r3, [r4, #8]
 801b6de:	3b01      	subs	r3, #1
 801b6e0:	60a3      	str	r3, [r4, #8]
 801b6e2:	6923      	ldr	r3, [r4, #16]
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	6123      	str	r3, [r4, #16]
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	3b01      	subs	r3, #1
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	607b      	str	r3, [r7, #4]
 801b6f0:	f340 8084 	ble.w	801b7fc <_scanf_float+0x278>
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	3301      	adds	r3, #1
 801b6f8:	603b      	str	r3, [r7, #0]
 801b6fa:	e766      	b.n	801b5ca <_scanf_float+0x46>
 801b6fc:	eb1a 0f05 	cmn.w	sl, r5
 801b700:	f47f af70 	bne.w	801b5e4 <_scanf_float+0x60>
 801b704:	6822      	ldr	r2, [r4, #0]
 801b706:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b70a:	6022      	str	r2, [r4, #0]
 801b70c:	f806 3b01 	strb.w	r3, [r6], #1
 801b710:	e7e4      	b.n	801b6dc <_scanf_float+0x158>
 801b712:	6822      	ldr	r2, [r4, #0]
 801b714:	0610      	lsls	r0, r2, #24
 801b716:	f57f af65 	bpl.w	801b5e4 <_scanf_float+0x60>
 801b71a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b71e:	e7f4      	b.n	801b70a <_scanf_float+0x186>
 801b720:	f1ba 0f00 	cmp.w	sl, #0
 801b724:	d10e      	bne.n	801b744 <_scanf_float+0x1c0>
 801b726:	f1b9 0f00 	cmp.w	r9, #0
 801b72a:	d10e      	bne.n	801b74a <_scanf_float+0x1c6>
 801b72c:	6822      	ldr	r2, [r4, #0]
 801b72e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b732:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b736:	d108      	bne.n	801b74a <_scanf_float+0x1c6>
 801b738:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b73c:	6022      	str	r2, [r4, #0]
 801b73e:	f04f 0a01 	mov.w	sl, #1
 801b742:	e7e3      	b.n	801b70c <_scanf_float+0x188>
 801b744:	f1ba 0f02 	cmp.w	sl, #2
 801b748:	d055      	beq.n	801b7f6 <_scanf_float+0x272>
 801b74a:	2d01      	cmp	r5, #1
 801b74c:	d002      	beq.n	801b754 <_scanf_float+0x1d0>
 801b74e:	2d04      	cmp	r5, #4
 801b750:	f47f af48 	bne.w	801b5e4 <_scanf_float+0x60>
 801b754:	3501      	adds	r5, #1
 801b756:	b2ed      	uxtb	r5, r5
 801b758:	e7d8      	b.n	801b70c <_scanf_float+0x188>
 801b75a:	f1ba 0f01 	cmp.w	sl, #1
 801b75e:	f47f af41 	bne.w	801b5e4 <_scanf_float+0x60>
 801b762:	f04f 0a02 	mov.w	sl, #2
 801b766:	e7d1      	b.n	801b70c <_scanf_float+0x188>
 801b768:	b97d      	cbnz	r5, 801b78a <_scanf_float+0x206>
 801b76a:	f1b9 0f00 	cmp.w	r9, #0
 801b76e:	f47f af3c 	bne.w	801b5ea <_scanf_float+0x66>
 801b772:	6822      	ldr	r2, [r4, #0]
 801b774:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b778:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b77c:	f47f af39 	bne.w	801b5f2 <_scanf_float+0x6e>
 801b780:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b784:	6022      	str	r2, [r4, #0]
 801b786:	2501      	movs	r5, #1
 801b788:	e7c0      	b.n	801b70c <_scanf_float+0x188>
 801b78a:	2d03      	cmp	r5, #3
 801b78c:	d0e2      	beq.n	801b754 <_scanf_float+0x1d0>
 801b78e:	2d05      	cmp	r5, #5
 801b790:	e7de      	b.n	801b750 <_scanf_float+0x1cc>
 801b792:	2d02      	cmp	r5, #2
 801b794:	f47f af26 	bne.w	801b5e4 <_scanf_float+0x60>
 801b798:	2503      	movs	r5, #3
 801b79a:	e7b7      	b.n	801b70c <_scanf_float+0x188>
 801b79c:	2d06      	cmp	r5, #6
 801b79e:	f47f af21 	bne.w	801b5e4 <_scanf_float+0x60>
 801b7a2:	2507      	movs	r5, #7
 801b7a4:	e7b2      	b.n	801b70c <_scanf_float+0x188>
 801b7a6:	6822      	ldr	r2, [r4, #0]
 801b7a8:	0591      	lsls	r1, r2, #22
 801b7aa:	f57f af1b 	bpl.w	801b5e4 <_scanf_float+0x60>
 801b7ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b7b2:	6022      	str	r2, [r4, #0]
 801b7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b7b8:	e7a8      	b.n	801b70c <_scanf_float+0x188>
 801b7ba:	6822      	ldr	r2, [r4, #0]
 801b7bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b7c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b7c4:	d006      	beq.n	801b7d4 <_scanf_float+0x250>
 801b7c6:	0550      	lsls	r0, r2, #21
 801b7c8:	f57f af0c 	bpl.w	801b5e4 <_scanf_float+0x60>
 801b7cc:	f1b9 0f00 	cmp.w	r9, #0
 801b7d0:	f43f af0f 	beq.w	801b5f2 <_scanf_float+0x6e>
 801b7d4:	0591      	lsls	r1, r2, #22
 801b7d6:	bf58      	it	pl
 801b7d8:	9901      	ldrpl	r1, [sp, #4]
 801b7da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b7de:	bf58      	it	pl
 801b7e0:	eba9 0101 	subpl.w	r1, r9, r1
 801b7e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b7e8:	bf58      	it	pl
 801b7ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b7ee:	6022      	str	r2, [r4, #0]
 801b7f0:	f04f 0900 	mov.w	r9, #0
 801b7f4:	e78a      	b.n	801b70c <_scanf_float+0x188>
 801b7f6:	f04f 0a03 	mov.w	sl, #3
 801b7fa:	e787      	b.n	801b70c <_scanf_float+0x188>
 801b7fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b800:	4639      	mov	r1, r7
 801b802:	4640      	mov	r0, r8
 801b804:	4798      	blx	r3
 801b806:	2800      	cmp	r0, #0
 801b808:	f43f aedf 	beq.w	801b5ca <_scanf_float+0x46>
 801b80c:	e6ea      	b.n	801b5e4 <_scanf_float+0x60>
 801b80e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b816:	463a      	mov	r2, r7
 801b818:	4640      	mov	r0, r8
 801b81a:	4798      	blx	r3
 801b81c:	6923      	ldr	r3, [r4, #16]
 801b81e:	3b01      	subs	r3, #1
 801b820:	6123      	str	r3, [r4, #16]
 801b822:	e6ec      	b.n	801b5fe <_scanf_float+0x7a>
 801b824:	1e6b      	subs	r3, r5, #1
 801b826:	2b06      	cmp	r3, #6
 801b828:	d825      	bhi.n	801b876 <_scanf_float+0x2f2>
 801b82a:	2d02      	cmp	r5, #2
 801b82c:	d836      	bhi.n	801b89c <_scanf_float+0x318>
 801b82e:	455e      	cmp	r6, fp
 801b830:	f67f aee8 	bls.w	801b604 <_scanf_float+0x80>
 801b834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b838:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b83c:	463a      	mov	r2, r7
 801b83e:	4640      	mov	r0, r8
 801b840:	4798      	blx	r3
 801b842:	6923      	ldr	r3, [r4, #16]
 801b844:	3b01      	subs	r3, #1
 801b846:	6123      	str	r3, [r4, #16]
 801b848:	e7f1      	b.n	801b82e <_scanf_float+0x2aa>
 801b84a:	9802      	ldr	r0, [sp, #8]
 801b84c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b850:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b854:	9002      	str	r0, [sp, #8]
 801b856:	463a      	mov	r2, r7
 801b858:	4640      	mov	r0, r8
 801b85a:	4798      	blx	r3
 801b85c:	6923      	ldr	r3, [r4, #16]
 801b85e:	3b01      	subs	r3, #1
 801b860:	6123      	str	r3, [r4, #16]
 801b862:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b866:	fa5f fa8a 	uxtb.w	sl, sl
 801b86a:	f1ba 0f02 	cmp.w	sl, #2
 801b86e:	d1ec      	bne.n	801b84a <_scanf_float+0x2c6>
 801b870:	3d03      	subs	r5, #3
 801b872:	b2ed      	uxtb	r5, r5
 801b874:	1b76      	subs	r6, r6, r5
 801b876:	6823      	ldr	r3, [r4, #0]
 801b878:	05da      	lsls	r2, r3, #23
 801b87a:	d52f      	bpl.n	801b8dc <_scanf_float+0x358>
 801b87c:	055b      	lsls	r3, r3, #21
 801b87e:	d510      	bpl.n	801b8a2 <_scanf_float+0x31e>
 801b880:	455e      	cmp	r6, fp
 801b882:	f67f aebf 	bls.w	801b604 <_scanf_float+0x80>
 801b886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b88a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b88e:	463a      	mov	r2, r7
 801b890:	4640      	mov	r0, r8
 801b892:	4798      	blx	r3
 801b894:	6923      	ldr	r3, [r4, #16]
 801b896:	3b01      	subs	r3, #1
 801b898:	6123      	str	r3, [r4, #16]
 801b89a:	e7f1      	b.n	801b880 <_scanf_float+0x2fc>
 801b89c:	46aa      	mov	sl, r5
 801b89e:	9602      	str	r6, [sp, #8]
 801b8a0:	e7df      	b.n	801b862 <_scanf_float+0x2de>
 801b8a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b8a6:	6923      	ldr	r3, [r4, #16]
 801b8a8:	2965      	cmp	r1, #101	; 0x65
 801b8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801b8ae:	f106 35ff 	add.w	r5, r6, #4294967295
 801b8b2:	6123      	str	r3, [r4, #16]
 801b8b4:	d00c      	beq.n	801b8d0 <_scanf_float+0x34c>
 801b8b6:	2945      	cmp	r1, #69	; 0x45
 801b8b8:	d00a      	beq.n	801b8d0 <_scanf_float+0x34c>
 801b8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8be:	463a      	mov	r2, r7
 801b8c0:	4640      	mov	r0, r8
 801b8c2:	4798      	blx	r3
 801b8c4:	6923      	ldr	r3, [r4, #16]
 801b8c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b8ca:	3b01      	subs	r3, #1
 801b8cc:	1eb5      	subs	r5, r6, #2
 801b8ce:	6123      	str	r3, [r4, #16]
 801b8d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8d4:	463a      	mov	r2, r7
 801b8d6:	4640      	mov	r0, r8
 801b8d8:	4798      	blx	r3
 801b8da:	462e      	mov	r6, r5
 801b8dc:	6825      	ldr	r5, [r4, #0]
 801b8de:	f015 0510 	ands.w	r5, r5, #16
 801b8e2:	d158      	bne.n	801b996 <_scanf_float+0x412>
 801b8e4:	7035      	strb	r5, [r6, #0]
 801b8e6:	6823      	ldr	r3, [r4, #0]
 801b8e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b8ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b8f0:	d11c      	bne.n	801b92c <_scanf_float+0x3a8>
 801b8f2:	9b01      	ldr	r3, [sp, #4]
 801b8f4:	454b      	cmp	r3, r9
 801b8f6:	eba3 0209 	sub.w	r2, r3, r9
 801b8fa:	d124      	bne.n	801b946 <_scanf_float+0x3c2>
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	4659      	mov	r1, fp
 801b900:	4640      	mov	r0, r8
 801b902:	f001 f873 	bl	801c9ec <_strtod_r>
 801b906:	9b03      	ldr	r3, [sp, #12]
 801b908:	6821      	ldr	r1, [r4, #0]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	f011 0f02 	tst.w	r1, #2
 801b910:	ec57 6b10 	vmov	r6, r7, d0
 801b914:	f103 0204 	add.w	r2, r3, #4
 801b918:	d020      	beq.n	801b95c <_scanf_float+0x3d8>
 801b91a:	9903      	ldr	r1, [sp, #12]
 801b91c:	600a      	str	r2, [r1, #0]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	e9c3 6700 	strd	r6, r7, [r3]
 801b924:	68e3      	ldr	r3, [r4, #12]
 801b926:	3301      	adds	r3, #1
 801b928:	60e3      	str	r3, [r4, #12]
 801b92a:	e66c      	b.n	801b606 <_scanf_float+0x82>
 801b92c:	9b04      	ldr	r3, [sp, #16]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d0e4      	beq.n	801b8fc <_scanf_float+0x378>
 801b932:	9905      	ldr	r1, [sp, #20]
 801b934:	230a      	movs	r3, #10
 801b936:	462a      	mov	r2, r5
 801b938:	3101      	adds	r1, #1
 801b93a:	4640      	mov	r0, r8
 801b93c:	f001 f8e0 	bl	801cb00 <_strtol_r>
 801b940:	9b04      	ldr	r3, [sp, #16]
 801b942:	9e05      	ldr	r6, [sp, #20]
 801b944:	1ac2      	subs	r2, r0, r3
 801b946:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b94a:	429e      	cmp	r6, r3
 801b94c:	bf28      	it	cs
 801b94e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b952:	4912      	ldr	r1, [pc, #72]	; (801b99c <_scanf_float+0x418>)
 801b954:	4630      	mov	r0, r6
 801b956:	f000 f977 	bl	801bc48 <siprintf>
 801b95a:	e7cf      	b.n	801b8fc <_scanf_float+0x378>
 801b95c:	f011 0f04 	tst.w	r1, #4
 801b960:	9903      	ldr	r1, [sp, #12]
 801b962:	600a      	str	r2, [r1, #0]
 801b964:	d1db      	bne.n	801b91e <_scanf_float+0x39a>
 801b966:	f8d3 8000 	ldr.w	r8, [r3]
 801b96a:	ee10 2a10 	vmov	r2, s0
 801b96e:	ee10 0a10 	vmov	r0, s0
 801b972:	463b      	mov	r3, r7
 801b974:	4639      	mov	r1, r7
 801b976:	f7e5 f8e9 	bl	8000b4c <__aeabi_dcmpun>
 801b97a:	b128      	cbz	r0, 801b988 <_scanf_float+0x404>
 801b97c:	4808      	ldr	r0, [pc, #32]	; (801b9a0 <_scanf_float+0x41c>)
 801b97e:	f000 f919 	bl	801bbb4 <nanf>
 801b982:	ed88 0a00 	vstr	s0, [r8]
 801b986:	e7cd      	b.n	801b924 <_scanf_float+0x3a0>
 801b988:	4630      	mov	r0, r6
 801b98a:	4639      	mov	r1, r7
 801b98c:	f7e5 f93c 	bl	8000c08 <__aeabi_d2f>
 801b990:	f8c8 0000 	str.w	r0, [r8]
 801b994:	e7c6      	b.n	801b924 <_scanf_float+0x3a0>
 801b996:	2500      	movs	r5, #0
 801b998:	e635      	b.n	801b606 <_scanf_float+0x82>
 801b99a:	bf00      	nop
 801b99c:	08021c72 	.word	0x08021c72
 801b9a0:	08021d03 	.word	0x08021d03

0801b9a4 <iprintf>:
 801b9a4:	b40f      	push	{r0, r1, r2, r3}
 801b9a6:	4b0a      	ldr	r3, [pc, #40]	; (801b9d0 <iprintf+0x2c>)
 801b9a8:	b513      	push	{r0, r1, r4, lr}
 801b9aa:	681c      	ldr	r4, [r3, #0]
 801b9ac:	b124      	cbz	r4, 801b9b8 <iprintf+0x14>
 801b9ae:	69a3      	ldr	r3, [r4, #24]
 801b9b0:	b913      	cbnz	r3, 801b9b8 <iprintf+0x14>
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	f7fe ffd4 	bl	801a960 <__sinit>
 801b9b8:	ab05      	add	r3, sp, #20
 801b9ba:	9a04      	ldr	r2, [sp, #16]
 801b9bc:	68a1      	ldr	r1, [r4, #8]
 801b9be:	9301      	str	r3, [sp, #4]
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	f003 fe09 	bl	801f5d8 <_vfiprintf_r>
 801b9c6:	b002      	add	sp, #8
 801b9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9cc:	b004      	add	sp, #16
 801b9ce:	4770      	bx	lr
 801b9d0:	200001f8 	.word	0x200001f8

0801b9d4 <_puts_r>:
 801b9d4:	b570      	push	{r4, r5, r6, lr}
 801b9d6:	460e      	mov	r6, r1
 801b9d8:	4605      	mov	r5, r0
 801b9da:	b118      	cbz	r0, 801b9e4 <_puts_r+0x10>
 801b9dc:	6983      	ldr	r3, [r0, #24]
 801b9de:	b90b      	cbnz	r3, 801b9e4 <_puts_r+0x10>
 801b9e0:	f7fe ffbe 	bl	801a960 <__sinit>
 801b9e4:	69ab      	ldr	r3, [r5, #24]
 801b9e6:	68ac      	ldr	r4, [r5, #8]
 801b9e8:	b913      	cbnz	r3, 801b9f0 <_puts_r+0x1c>
 801b9ea:	4628      	mov	r0, r5
 801b9ec:	f7fe ffb8 	bl	801a960 <__sinit>
 801b9f0:	4b2c      	ldr	r3, [pc, #176]	; (801baa4 <_puts_r+0xd0>)
 801b9f2:	429c      	cmp	r4, r3
 801b9f4:	d120      	bne.n	801ba38 <_puts_r+0x64>
 801b9f6:	686c      	ldr	r4, [r5, #4]
 801b9f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9fa:	07db      	lsls	r3, r3, #31
 801b9fc:	d405      	bmi.n	801ba0a <_puts_r+0x36>
 801b9fe:	89a3      	ldrh	r3, [r4, #12]
 801ba00:	0598      	lsls	r0, r3, #22
 801ba02:	d402      	bmi.n	801ba0a <_puts_r+0x36>
 801ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba06:	f7ff f86e 	bl	801aae6 <__retarget_lock_acquire_recursive>
 801ba0a:	89a3      	ldrh	r3, [r4, #12]
 801ba0c:	0719      	lsls	r1, r3, #28
 801ba0e:	d51d      	bpl.n	801ba4c <_puts_r+0x78>
 801ba10:	6923      	ldr	r3, [r4, #16]
 801ba12:	b1db      	cbz	r3, 801ba4c <_puts_r+0x78>
 801ba14:	3e01      	subs	r6, #1
 801ba16:	68a3      	ldr	r3, [r4, #8]
 801ba18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ba1c:	3b01      	subs	r3, #1
 801ba1e:	60a3      	str	r3, [r4, #8]
 801ba20:	bb39      	cbnz	r1, 801ba72 <_puts_r+0x9e>
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	da38      	bge.n	801ba98 <_puts_r+0xc4>
 801ba26:	4622      	mov	r2, r4
 801ba28:	210a      	movs	r1, #10
 801ba2a:	4628      	mov	r0, r5
 801ba2c:	f001 f936 	bl	801cc9c <__swbuf_r>
 801ba30:	3001      	adds	r0, #1
 801ba32:	d011      	beq.n	801ba58 <_puts_r+0x84>
 801ba34:	250a      	movs	r5, #10
 801ba36:	e011      	b.n	801ba5c <_puts_r+0x88>
 801ba38:	4b1b      	ldr	r3, [pc, #108]	; (801baa8 <_puts_r+0xd4>)
 801ba3a:	429c      	cmp	r4, r3
 801ba3c:	d101      	bne.n	801ba42 <_puts_r+0x6e>
 801ba3e:	68ac      	ldr	r4, [r5, #8]
 801ba40:	e7da      	b.n	801b9f8 <_puts_r+0x24>
 801ba42:	4b1a      	ldr	r3, [pc, #104]	; (801baac <_puts_r+0xd8>)
 801ba44:	429c      	cmp	r4, r3
 801ba46:	bf08      	it	eq
 801ba48:	68ec      	ldreq	r4, [r5, #12]
 801ba4a:	e7d5      	b.n	801b9f8 <_puts_r+0x24>
 801ba4c:	4621      	mov	r1, r4
 801ba4e:	4628      	mov	r0, r5
 801ba50:	f001 f988 	bl	801cd64 <__swsetup_r>
 801ba54:	2800      	cmp	r0, #0
 801ba56:	d0dd      	beq.n	801ba14 <_puts_r+0x40>
 801ba58:	f04f 35ff 	mov.w	r5, #4294967295
 801ba5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba5e:	07da      	lsls	r2, r3, #31
 801ba60:	d405      	bmi.n	801ba6e <_puts_r+0x9a>
 801ba62:	89a3      	ldrh	r3, [r4, #12]
 801ba64:	059b      	lsls	r3, r3, #22
 801ba66:	d402      	bmi.n	801ba6e <_puts_r+0x9a>
 801ba68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba6a:	f7ff f83d 	bl	801aae8 <__retarget_lock_release_recursive>
 801ba6e:	4628      	mov	r0, r5
 801ba70:	bd70      	pop	{r4, r5, r6, pc}
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	da04      	bge.n	801ba80 <_puts_r+0xac>
 801ba76:	69a2      	ldr	r2, [r4, #24]
 801ba78:	429a      	cmp	r2, r3
 801ba7a:	dc06      	bgt.n	801ba8a <_puts_r+0xb6>
 801ba7c:	290a      	cmp	r1, #10
 801ba7e:	d004      	beq.n	801ba8a <_puts_r+0xb6>
 801ba80:	6823      	ldr	r3, [r4, #0]
 801ba82:	1c5a      	adds	r2, r3, #1
 801ba84:	6022      	str	r2, [r4, #0]
 801ba86:	7019      	strb	r1, [r3, #0]
 801ba88:	e7c5      	b.n	801ba16 <_puts_r+0x42>
 801ba8a:	4622      	mov	r2, r4
 801ba8c:	4628      	mov	r0, r5
 801ba8e:	f001 f905 	bl	801cc9c <__swbuf_r>
 801ba92:	3001      	adds	r0, #1
 801ba94:	d1bf      	bne.n	801ba16 <_puts_r+0x42>
 801ba96:	e7df      	b.n	801ba58 <_puts_r+0x84>
 801ba98:	6823      	ldr	r3, [r4, #0]
 801ba9a:	250a      	movs	r5, #10
 801ba9c:	1c5a      	adds	r2, r3, #1
 801ba9e:	6022      	str	r2, [r4, #0]
 801baa0:	701d      	strb	r5, [r3, #0]
 801baa2:	e7db      	b.n	801ba5c <_puts_r+0x88>
 801baa4:	08021bfc 	.word	0x08021bfc
 801baa8:	08021c1c 	.word	0x08021c1c
 801baac:	08021bdc 	.word	0x08021bdc

0801bab0 <puts>:
 801bab0:	4b02      	ldr	r3, [pc, #8]	; (801babc <puts+0xc>)
 801bab2:	4601      	mov	r1, r0
 801bab4:	6818      	ldr	r0, [r3, #0]
 801bab6:	f7ff bf8d 	b.w	801b9d4 <_puts_r>
 801baba:	bf00      	nop
 801babc:	200001f8 	.word	0x200001f8

0801bac0 <cleanup_glue>:
 801bac0:	b538      	push	{r3, r4, r5, lr}
 801bac2:	460c      	mov	r4, r1
 801bac4:	6809      	ldr	r1, [r1, #0]
 801bac6:	4605      	mov	r5, r0
 801bac8:	b109      	cbz	r1, 801bace <cleanup_glue+0xe>
 801baca:	f7ff fff9 	bl	801bac0 <cleanup_glue>
 801bace:	4621      	mov	r1, r4
 801bad0:	4628      	mov	r0, r5
 801bad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bad6:	f7ff b841 	b.w	801ab5c <_free_r>
	...

0801badc <_reclaim_reent>:
 801badc:	4b2c      	ldr	r3, [pc, #176]	; (801bb90 <_reclaim_reent+0xb4>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	4283      	cmp	r3, r0
 801bae2:	b570      	push	{r4, r5, r6, lr}
 801bae4:	4604      	mov	r4, r0
 801bae6:	d051      	beq.n	801bb8c <_reclaim_reent+0xb0>
 801bae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801baea:	b143      	cbz	r3, 801bafe <_reclaim_reent+0x22>
 801baec:	68db      	ldr	r3, [r3, #12]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d14a      	bne.n	801bb88 <_reclaim_reent+0xac>
 801baf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801baf4:	6819      	ldr	r1, [r3, #0]
 801baf6:	b111      	cbz	r1, 801bafe <_reclaim_reent+0x22>
 801baf8:	4620      	mov	r0, r4
 801bafa:	f7ff f82f 	bl	801ab5c <_free_r>
 801bafe:	6961      	ldr	r1, [r4, #20]
 801bb00:	b111      	cbz	r1, 801bb08 <_reclaim_reent+0x2c>
 801bb02:	4620      	mov	r0, r4
 801bb04:	f7ff f82a 	bl	801ab5c <_free_r>
 801bb08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bb0a:	b111      	cbz	r1, 801bb12 <_reclaim_reent+0x36>
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	f7ff f825 	bl	801ab5c <_free_r>
 801bb12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bb14:	b111      	cbz	r1, 801bb1c <_reclaim_reent+0x40>
 801bb16:	4620      	mov	r0, r4
 801bb18:	f7ff f820 	bl	801ab5c <_free_r>
 801bb1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bb1e:	b111      	cbz	r1, 801bb26 <_reclaim_reent+0x4a>
 801bb20:	4620      	mov	r0, r4
 801bb22:	f7ff f81b 	bl	801ab5c <_free_r>
 801bb26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bb28:	b111      	cbz	r1, 801bb30 <_reclaim_reent+0x54>
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	f7ff f816 	bl	801ab5c <_free_r>
 801bb30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bb32:	b111      	cbz	r1, 801bb3a <_reclaim_reent+0x5e>
 801bb34:	4620      	mov	r0, r4
 801bb36:	f7ff f811 	bl	801ab5c <_free_r>
 801bb3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bb3c:	b111      	cbz	r1, 801bb44 <_reclaim_reent+0x68>
 801bb3e:	4620      	mov	r0, r4
 801bb40:	f7ff f80c 	bl	801ab5c <_free_r>
 801bb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb46:	b111      	cbz	r1, 801bb4e <_reclaim_reent+0x72>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f7ff f807 	bl	801ab5c <_free_r>
 801bb4e:	69a3      	ldr	r3, [r4, #24]
 801bb50:	b1e3      	cbz	r3, 801bb8c <_reclaim_reent+0xb0>
 801bb52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bb54:	4620      	mov	r0, r4
 801bb56:	4798      	blx	r3
 801bb58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bb5a:	b1b9      	cbz	r1, 801bb8c <_reclaim_reent+0xb0>
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb62:	f7ff bfad 	b.w	801bac0 <cleanup_glue>
 801bb66:	5949      	ldr	r1, [r1, r5]
 801bb68:	b941      	cbnz	r1, 801bb7c <_reclaim_reent+0xa0>
 801bb6a:	3504      	adds	r5, #4
 801bb6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bb6e:	2d80      	cmp	r5, #128	; 0x80
 801bb70:	68d9      	ldr	r1, [r3, #12]
 801bb72:	d1f8      	bne.n	801bb66 <_reclaim_reent+0x8a>
 801bb74:	4620      	mov	r0, r4
 801bb76:	f7fe fff1 	bl	801ab5c <_free_r>
 801bb7a:	e7ba      	b.n	801baf2 <_reclaim_reent+0x16>
 801bb7c:	680e      	ldr	r6, [r1, #0]
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f7fe ffec 	bl	801ab5c <_free_r>
 801bb84:	4631      	mov	r1, r6
 801bb86:	e7ef      	b.n	801bb68 <_reclaim_reent+0x8c>
 801bb88:	2500      	movs	r5, #0
 801bb8a:	e7ef      	b.n	801bb6c <_reclaim_reent+0x90>
 801bb8c:	bd70      	pop	{r4, r5, r6, pc}
 801bb8e:	bf00      	nop
 801bb90:	200001f8 	.word	0x200001f8

0801bb94 <_sbrk_r>:
 801bb94:	b538      	push	{r3, r4, r5, lr}
 801bb96:	4d06      	ldr	r5, [pc, #24]	; (801bbb0 <_sbrk_r+0x1c>)
 801bb98:	2300      	movs	r3, #0
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	4608      	mov	r0, r1
 801bb9e:	602b      	str	r3, [r5, #0]
 801bba0:	f7e7 fb5a 	bl	8003258 <_sbrk>
 801bba4:	1c43      	adds	r3, r0, #1
 801bba6:	d102      	bne.n	801bbae <_sbrk_r+0x1a>
 801bba8:	682b      	ldr	r3, [r5, #0]
 801bbaa:	b103      	cbz	r3, 801bbae <_sbrk_r+0x1a>
 801bbac:	6023      	str	r3, [r4, #0]
 801bbae:	bd38      	pop	{r3, r4, r5, pc}
 801bbb0:	20008fb0 	.word	0x20008fb0

0801bbb4 <nanf>:
 801bbb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bbbc <nanf+0x8>
 801bbb8:	4770      	bx	lr
 801bbba:	bf00      	nop
 801bbbc:	7fc00000 	.word	0x7fc00000

0801bbc0 <_raise_r>:
 801bbc0:	291f      	cmp	r1, #31
 801bbc2:	b538      	push	{r3, r4, r5, lr}
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	460d      	mov	r5, r1
 801bbc8:	d904      	bls.n	801bbd4 <_raise_r+0x14>
 801bbca:	2316      	movs	r3, #22
 801bbcc:	6003      	str	r3, [r0, #0]
 801bbce:	f04f 30ff 	mov.w	r0, #4294967295
 801bbd2:	bd38      	pop	{r3, r4, r5, pc}
 801bbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bbd6:	b112      	cbz	r2, 801bbde <_raise_r+0x1e>
 801bbd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbdc:	b94b      	cbnz	r3, 801bbf2 <_raise_r+0x32>
 801bbde:	4620      	mov	r0, r4
 801bbe0:	f000 f830 	bl	801bc44 <_getpid_r>
 801bbe4:	462a      	mov	r2, r5
 801bbe6:	4601      	mov	r1, r0
 801bbe8:	4620      	mov	r0, r4
 801bbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbee:	f000 b817 	b.w	801bc20 <_kill_r>
 801bbf2:	2b01      	cmp	r3, #1
 801bbf4:	d00a      	beq.n	801bc0c <_raise_r+0x4c>
 801bbf6:	1c59      	adds	r1, r3, #1
 801bbf8:	d103      	bne.n	801bc02 <_raise_r+0x42>
 801bbfa:	2316      	movs	r3, #22
 801bbfc:	6003      	str	r3, [r0, #0]
 801bbfe:	2001      	movs	r0, #1
 801bc00:	e7e7      	b.n	801bbd2 <_raise_r+0x12>
 801bc02:	2400      	movs	r4, #0
 801bc04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bc08:	4628      	mov	r0, r5
 801bc0a:	4798      	blx	r3
 801bc0c:	2000      	movs	r0, #0
 801bc0e:	e7e0      	b.n	801bbd2 <_raise_r+0x12>

0801bc10 <raise>:
 801bc10:	4b02      	ldr	r3, [pc, #8]	; (801bc1c <raise+0xc>)
 801bc12:	4601      	mov	r1, r0
 801bc14:	6818      	ldr	r0, [r3, #0]
 801bc16:	f7ff bfd3 	b.w	801bbc0 <_raise_r>
 801bc1a:	bf00      	nop
 801bc1c:	200001f8 	.word	0x200001f8

0801bc20 <_kill_r>:
 801bc20:	b538      	push	{r3, r4, r5, lr}
 801bc22:	4d07      	ldr	r5, [pc, #28]	; (801bc40 <_kill_r+0x20>)
 801bc24:	2300      	movs	r3, #0
 801bc26:	4604      	mov	r4, r0
 801bc28:	4608      	mov	r0, r1
 801bc2a:	4611      	mov	r1, r2
 801bc2c:	602b      	str	r3, [r5, #0]
 801bc2e:	f7e7 fa8b 	bl	8003148 <_kill>
 801bc32:	1c43      	adds	r3, r0, #1
 801bc34:	d102      	bne.n	801bc3c <_kill_r+0x1c>
 801bc36:	682b      	ldr	r3, [r5, #0]
 801bc38:	b103      	cbz	r3, 801bc3c <_kill_r+0x1c>
 801bc3a:	6023      	str	r3, [r4, #0]
 801bc3c:	bd38      	pop	{r3, r4, r5, pc}
 801bc3e:	bf00      	nop
 801bc40:	20008fb0 	.word	0x20008fb0

0801bc44 <_getpid_r>:
 801bc44:	f7e7 ba78 	b.w	8003138 <_getpid>

0801bc48 <siprintf>:
 801bc48:	b40e      	push	{r1, r2, r3}
 801bc4a:	b500      	push	{lr}
 801bc4c:	b09c      	sub	sp, #112	; 0x70
 801bc4e:	ab1d      	add	r3, sp, #116	; 0x74
 801bc50:	9002      	str	r0, [sp, #8]
 801bc52:	9006      	str	r0, [sp, #24]
 801bc54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bc58:	4809      	ldr	r0, [pc, #36]	; (801bc80 <siprintf+0x38>)
 801bc5a:	9107      	str	r1, [sp, #28]
 801bc5c:	9104      	str	r1, [sp, #16]
 801bc5e:	4909      	ldr	r1, [pc, #36]	; (801bc84 <siprintf+0x3c>)
 801bc60:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc64:	9105      	str	r1, [sp, #20]
 801bc66:	6800      	ldr	r0, [r0, #0]
 801bc68:	9301      	str	r3, [sp, #4]
 801bc6a:	a902      	add	r1, sp, #8
 801bc6c:	f003 f9b8 	bl	801efe0 <_svfiprintf_r>
 801bc70:	9b02      	ldr	r3, [sp, #8]
 801bc72:	2200      	movs	r2, #0
 801bc74:	701a      	strb	r2, [r3, #0]
 801bc76:	b01c      	add	sp, #112	; 0x70
 801bc78:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc7c:	b003      	add	sp, #12
 801bc7e:	4770      	bx	lr
 801bc80:	200001f8 	.word	0x200001f8
 801bc84:	ffff0208 	.word	0xffff0208

0801bc88 <siscanf>:
 801bc88:	b40e      	push	{r1, r2, r3}
 801bc8a:	b510      	push	{r4, lr}
 801bc8c:	b09f      	sub	sp, #124	; 0x7c
 801bc8e:	ac21      	add	r4, sp, #132	; 0x84
 801bc90:	f44f 7101 	mov.w	r1, #516	; 0x204
 801bc94:	f854 2b04 	ldr.w	r2, [r4], #4
 801bc98:	9201      	str	r2, [sp, #4]
 801bc9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bc9e:	9004      	str	r0, [sp, #16]
 801bca0:	9008      	str	r0, [sp, #32]
 801bca2:	f7e4 faa5 	bl	80001f0 <strlen>
 801bca6:	4b0c      	ldr	r3, [pc, #48]	; (801bcd8 <siscanf+0x50>)
 801bca8:	9005      	str	r0, [sp, #20]
 801bcaa:	9009      	str	r0, [sp, #36]	; 0x24
 801bcac:	930d      	str	r3, [sp, #52]	; 0x34
 801bcae:	480b      	ldr	r0, [pc, #44]	; (801bcdc <siscanf+0x54>)
 801bcb0:	9a01      	ldr	r2, [sp, #4]
 801bcb2:	6800      	ldr	r0, [r0, #0]
 801bcb4:	9403      	str	r4, [sp, #12]
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	9311      	str	r3, [sp, #68]	; 0x44
 801bcba:	9316      	str	r3, [sp, #88]	; 0x58
 801bcbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bcc4:	a904      	add	r1, sp, #16
 801bcc6:	4623      	mov	r3, r4
 801bcc8:	f003 fae4 	bl	801f294 <__ssvfiscanf_r>
 801bccc:	b01f      	add	sp, #124	; 0x7c
 801bcce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcd2:	b003      	add	sp, #12
 801bcd4:	4770      	bx	lr
 801bcd6:	bf00      	nop
 801bcd8:	0801bd03 	.word	0x0801bd03
 801bcdc:	200001f8 	.word	0x200001f8

0801bce0 <__sread>:
 801bce0:	b510      	push	{r4, lr}
 801bce2:	460c      	mov	r4, r1
 801bce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bce8:	f003 fef2 	bl	801fad0 <_read_r>
 801bcec:	2800      	cmp	r0, #0
 801bcee:	bfab      	itete	ge
 801bcf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bcf2:	89a3      	ldrhlt	r3, [r4, #12]
 801bcf4:	181b      	addge	r3, r3, r0
 801bcf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bcfa:	bfac      	ite	ge
 801bcfc:	6563      	strge	r3, [r4, #84]	; 0x54
 801bcfe:	81a3      	strhlt	r3, [r4, #12]
 801bd00:	bd10      	pop	{r4, pc}

0801bd02 <__seofread>:
 801bd02:	2000      	movs	r0, #0
 801bd04:	4770      	bx	lr

0801bd06 <__swrite>:
 801bd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd0a:	461f      	mov	r7, r3
 801bd0c:	898b      	ldrh	r3, [r1, #12]
 801bd0e:	05db      	lsls	r3, r3, #23
 801bd10:	4605      	mov	r5, r0
 801bd12:	460c      	mov	r4, r1
 801bd14:	4616      	mov	r6, r2
 801bd16:	d505      	bpl.n	801bd24 <__swrite+0x1e>
 801bd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd1c:	2302      	movs	r3, #2
 801bd1e:	2200      	movs	r2, #0
 801bd20:	f002 fb7e 	bl	801e420 <_lseek_r>
 801bd24:	89a3      	ldrh	r3, [r4, #12]
 801bd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd2e:	81a3      	strh	r3, [r4, #12]
 801bd30:	4632      	mov	r2, r6
 801bd32:	463b      	mov	r3, r7
 801bd34:	4628      	mov	r0, r5
 801bd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd3a:	f001 b801 	b.w	801cd40 <_write_r>

0801bd3e <__sseek>:
 801bd3e:	b510      	push	{r4, lr}
 801bd40:	460c      	mov	r4, r1
 801bd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd46:	f002 fb6b 	bl	801e420 <_lseek_r>
 801bd4a:	1c43      	adds	r3, r0, #1
 801bd4c:	89a3      	ldrh	r3, [r4, #12]
 801bd4e:	bf15      	itete	ne
 801bd50:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd5a:	81a3      	strheq	r3, [r4, #12]
 801bd5c:	bf18      	it	ne
 801bd5e:	81a3      	strhne	r3, [r4, #12]
 801bd60:	bd10      	pop	{r4, pc}

0801bd62 <__sclose>:
 801bd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd66:	f001 b889 	b.w	801ce7c <_close_r>

0801bd6a <strcpy>:
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd70:	f803 2b01 	strb.w	r2, [r3], #1
 801bd74:	2a00      	cmp	r2, #0
 801bd76:	d1f9      	bne.n	801bd6c <strcpy+0x2>
 801bd78:	4770      	bx	lr

0801bd7a <strncmp>:
 801bd7a:	b510      	push	{r4, lr}
 801bd7c:	b16a      	cbz	r2, 801bd9a <strncmp+0x20>
 801bd7e:	3901      	subs	r1, #1
 801bd80:	1884      	adds	r4, r0, r2
 801bd82:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bd86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bd8a:	4293      	cmp	r3, r2
 801bd8c:	d103      	bne.n	801bd96 <strncmp+0x1c>
 801bd8e:	42a0      	cmp	r0, r4
 801bd90:	d001      	beq.n	801bd96 <strncmp+0x1c>
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d1f5      	bne.n	801bd82 <strncmp+0x8>
 801bd96:	1a98      	subs	r0, r3, r2
 801bd98:	bd10      	pop	{r4, pc}
 801bd9a:	4610      	mov	r0, r2
 801bd9c:	e7fc      	b.n	801bd98 <strncmp+0x1e>

0801bd9e <sulp>:
 801bd9e:	b570      	push	{r4, r5, r6, lr}
 801bda0:	4604      	mov	r4, r0
 801bda2:	460d      	mov	r5, r1
 801bda4:	ec45 4b10 	vmov	d0, r4, r5
 801bda8:	4616      	mov	r6, r2
 801bdaa:	f002 ff39 	bl	801ec20 <__ulp>
 801bdae:	ec51 0b10 	vmov	r0, r1, d0
 801bdb2:	b17e      	cbz	r6, 801bdd4 <sulp+0x36>
 801bdb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bdb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	dd09      	ble.n	801bdd4 <sulp+0x36>
 801bdc0:	051b      	lsls	r3, r3, #20
 801bdc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801bdc6:	2400      	movs	r4, #0
 801bdc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801bdcc:	4622      	mov	r2, r4
 801bdce:	462b      	mov	r3, r5
 801bdd0:	f7e4 fc22 	bl	8000618 <__aeabi_dmul>
 801bdd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bdd8 <_strtod_l>:
 801bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bddc:	b0a3      	sub	sp, #140	; 0x8c
 801bdde:	461f      	mov	r7, r3
 801bde0:	2300      	movs	r3, #0
 801bde2:	931e      	str	r3, [sp, #120]	; 0x78
 801bde4:	4ba4      	ldr	r3, [pc, #656]	; (801c078 <_strtod_l+0x2a0>)
 801bde6:	9219      	str	r2, [sp, #100]	; 0x64
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	9307      	str	r3, [sp, #28]
 801bdec:	4604      	mov	r4, r0
 801bdee:	4618      	mov	r0, r3
 801bdf0:	4688      	mov	r8, r1
 801bdf2:	f7e4 f9fd 	bl	80001f0 <strlen>
 801bdf6:	f04f 0a00 	mov.w	sl, #0
 801bdfa:	4605      	mov	r5, r0
 801bdfc:	f04f 0b00 	mov.w	fp, #0
 801be00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801be04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801be06:	781a      	ldrb	r2, [r3, #0]
 801be08:	2a2b      	cmp	r2, #43	; 0x2b
 801be0a:	d04c      	beq.n	801bea6 <_strtod_l+0xce>
 801be0c:	d839      	bhi.n	801be82 <_strtod_l+0xaa>
 801be0e:	2a0d      	cmp	r2, #13
 801be10:	d832      	bhi.n	801be78 <_strtod_l+0xa0>
 801be12:	2a08      	cmp	r2, #8
 801be14:	d832      	bhi.n	801be7c <_strtod_l+0xa4>
 801be16:	2a00      	cmp	r2, #0
 801be18:	d03c      	beq.n	801be94 <_strtod_l+0xbc>
 801be1a:	2300      	movs	r3, #0
 801be1c:	930e      	str	r3, [sp, #56]	; 0x38
 801be1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801be20:	7833      	ldrb	r3, [r6, #0]
 801be22:	2b30      	cmp	r3, #48	; 0x30
 801be24:	f040 80b4 	bne.w	801bf90 <_strtod_l+0x1b8>
 801be28:	7873      	ldrb	r3, [r6, #1]
 801be2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801be2e:	2b58      	cmp	r3, #88	; 0x58
 801be30:	d16c      	bne.n	801bf0c <_strtod_l+0x134>
 801be32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be34:	9301      	str	r3, [sp, #4]
 801be36:	ab1e      	add	r3, sp, #120	; 0x78
 801be38:	9702      	str	r7, [sp, #8]
 801be3a:	9300      	str	r3, [sp, #0]
 801be3c:	4a8f      	ldr	r2, [pc, #572]	; (801c07c <_strtod_l+0x2a4>)
 801be3e:	ab1f      	add	r3, sp, #124	; 0x7c
 801be40:	a91d      	add	r1, sp, #116	; 0x74
 801be42:	4620      	mov	r0, r4
 801be44:	f001 ffe0 	bl	801de08 <__gethex>
 801be48:	f010 0707 	ands.w	r7, r0, #7
 801be4c:	4605      	mov	r5, r0
 801be4e:	d005      	beq.n	801be5c <_strtod_l+0x84>
 801be50:	2f06      	cmp	r7, #6
 801be52:	d12a      	bne.n	801beaa <_strtod_l+0xd2>
 801be54:	3601      	adds	r6, #1
 801be56:	2300      	movs	r3, #0
 801be58:	961d      	str	r6, [sp, #116]	; 0x74
 801be5a:	930e      	str	r3, [sp, #56]	; 0x38
 801be5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801be5e:	2b00      	cmp	r3, #0
 801be60:	f040 8596 	bne.w	801c990 <_strtod_l+0xbb8>
 801be64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be66:	b1db      	cbz	r3, 801bea0 <_strtod_l+0xc8>
 801be68:	4652      	mov	r2, sl
 801be6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801be6e:	ec43 2b10 	vmov	d0, r2, r3
 801be72:	b023      	add	sp, #140	; 0x8c
 801be74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be78:	2a20      	cmp	r2, #32
 801be7a:	d1ce      	bne.n	801be1a <_strtod_l+0x42>
 801be7c:	3301      	adds	r3, #1
 801be7e:	931d      	str	r3, [sp, #116]	; 0x74
 801be80:	e7c0      	b.n	801be04 <_strtod_l+0x2c>
 801be82:	2a2d      	cmp	r2, #45	; 0x2d
 801be84:	d1c9      	bne.n	801be1a <_strtod_l+0x42>
 801be86:	2201      	movs	r2, #1
 801be88:	920e      	str	r2, [sp, #56]	; 0x38
 801be8a:	1c5a      	adds	r2, r3, #1
 801be8c:	921d      	str	r2, [sp, #116]	; 0x74
 801be8e:	785b      	ldrb	r3, [r3, #1]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1c4      	bne.n	801be1e <_strtod_l+0x46>
 801be94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801be96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	f040 8576 	bne.w	801c98c <_strtod_l+0xbb4>
 801bea0:	4652      	mov	r2, sl
 801bea2:	465b      	mov	r3, fp
 801bea4:	e7e3      	b.n	801be6e <_strtod_l+0x96>
 801bea6:	2200      	movs	r2, #0
 801bea8:	e7ee      	b.n	801be88 <_strtod_l+0xb0>
 801beaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801beac:	b13a      	cbz	r2, 801bebe <_strtod_l+0xe6>
 801beae:	2135      	movs	r1, #53	; 0x35
 801beb0:	a820      	add	r0, sp, #128	; 0x80
 801beb2:	f002 ffc0 	bl	801ee36 <__copybits>
 801beb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801beb8:	4620      	mov	r0, r4
 801beba:	f002 fb85 	bl	801e5c8 <_Bfree>
 801bebe:	3f01      	subs	r7, #1
 801bec0:	2f05      	cmp	r7, #5
 801bec2:	d807      	bhi.n	801bed4 <_strtod_l+0xfc>
 801bec4:	e8df f007 	tbb	[pc, r7]
 801bec8:	1d180b0e 	.word	0x1d180b0e
 801becc:	030e      	.short	0x030e
 801bece:	f04f 0b00 	mov.w	fp, #0
 801bed2:	46da      	mov	sl, fp
 801bed4:	0728      	lsls	r0, r5, #28
 801bed6:	d5c1      	bpl.n	801be5c <_strtod_l+0x84>
 801bed8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801bedc:	e7be      	b.n	801be5c <_strtod_l+0x84>
 801bede:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801bee2:	e7f7      	b.n	801bed4 <_strtod_l+0xfc>
 801bee4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801bee8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801beea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801beee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bef2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801bef6:	e7ed      	b.n	801bed4 <_strtod_l+0xfc>
 801bef8:	f8df b184 	ldr.w	fp, [pc, #388]	; 801c080 <_strtod_l+0x2a8>
 801befc:	f04f 0a00 	mov.w	sl, #0
 801bf00:	e7e8      	b.n	801bed4 <_strtod_l+0xfc>
 801bf02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801bf06:	f04f 3aff 	mov.w	sl, #4294967295
 801bf0a:	e7e3      	b.n	801bed4 <_strtod_l+0xfc>
 801bf0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bf0e:	1c5a      	adds	r2, r3, #1
 801bf10:	921d      	str	r2, [sp, #116]	; 0x74
 801bf12:	785b      	ldrb	r3, [r3, #1]
 801bf14:	2b30      	cmp	r3, #48	; 0x30
 801bf16:	d0f9      	beq.n	801bf0c <_strtod_l+0x134>
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d09f      	beq.n	801be5c <_strtod_l+0x84>
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	f04f 0900 	mov.w	r9, #0
 801bf22:	9304      	str	r3, [sp, #16]
 801bf24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bf26:	930a      	str	r3, [sp, #40]	; 0x28
 801bf28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bf2c:	464f      	mov	r7, r9
 801bf2e:	220a      	movs	r2, #10
 801bf30:	981d      	ldr	r0, [sp, #116]	; 0x74
 801bf32:	7806      	ldrb	r6, [r0, #0]
 801bf34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801bf38:	b2d9      	uxtb	r1, r3
 801bf3a:	2909      	cmp	r1, #9
 801bf3c:	d92a      	bls.n	801bf94 <_strtod_l+0x1bc>
 801bf3e:	9907      	ldr	r1, [sp, #28]
 801bf40:	462a      	mov	r2, r5
 801bf42:	f7ff ff1a 	bl	801bd7a <strncmp>
 801bf46:	b398      	cbz	r0, 801bfb0 <_strtod_l+0x1d8>
 801bf48:	2000      	movs	r0, #0
 801bf4a:	4633      	mov	r3, r6
 801bf4c:	463d      	mov	r5, r7
 801bf4e:	9007      	str	r0, [sp, #28]
 801bf50:	4602      	mov	r2, r0
 801bf52:	2b65      	cmp	r3, #101	; 0x65
 801bf54:	d001      	beq.n	801bf5a <_strtod_l+0x182>
 801bf56:	2b45      	cmp	r3, #69	; 0x45
 801bf58:	d118      	bne.n	801bf8c <_strtod_l+0x1b4>
 801bf5a:	b91d      	cbnz	r5, 801bf64 <_strtod_l+0x18c>
 801bf5c:	9b04      	ldr	r3, [sp, #16]
 801bf5e:	4303      	orrs	r3, r0
 801bf60:	d098      	beq.n	801be94 <_strtod_l+0xbc>
 801bf62:	2500      	movs	r5, #0
 801bf64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801bf68:	f108 0301 	add.w	r3, r8, #1
 801bf6c:	931d      	str	r3, [sp, #116]	; 0x74
 801bf6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801bf72:	2b2b      	cmp	r3, #43	; 0x2b
 801bf74:	d075      	beq.n	801c062 <_strtod_l+0x28a>
 801bf76:	2b2d      	cmp	r3, #45	; 0x2d
 801bf78:	d07b      	beq.n	801c072 <_strtod_l+0x29a>
 801bf7a:	f04f 0c00 	mov.w	ip, #0
 801bf7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bf82:	2909      	cmp	r1, #9
 801bf84:	f240 8082 	bls.w	801c08c <_strtod_l+0x2b4>
 801bf88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801bf8c:	2600      	movs	r6, #0
 801bf8e:	e09d      	b.n	801c0cc <_strtod_l+0x2f4>
 801bf90:	2300      	movs	r3, #0
 801bf92:	e7c4      	b.n	801bf1e <_strtod_l+0x146>
 801bf94:	2f08      	cmp	r7, #8
 801bf96:	bfd8      	it	le
 801bf98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bf9a:	f100 0001 	add.w	r0, r0, #1
 801bf9e:	bfda      	itte	le
 801bfa0:	fb02 3301 	mlale	r3, r2, r1, r3
 801bfa4:	9309      	strle	r3, [sp, #36]	; 0x24
 801bfa6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bfaa:	3701      	adds	r7, #1
 801bfac:	901d      	str	r0, [sp, #116]	; 0x74
 801bfae:	e7bf      	b.n	801bf30 <_strtod_l+0x158>
 801bfb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bfb2:	195a      	adds	r2, r3, r5
 801bfb4:	921d      	str	r2, [sp, #116]	; 0x74
 801bfb6:	5d5b      	ldrb	r3, [r3, r5]
 801bfb8:	2f00      	cmp	r7, #0
 801bfba:	d037      	beq.n	801c02c <_strtod_l+0x254>
 801bfbc:	9007      	str	r0, [sp, #28]
 801bfbe:	463d      	mov	r5, r7
 801bfc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bfc4:	2a09      	cmp	r2, #9
 801bfc6:	d912      	bls.n	801bfee <_strtod_l+0x216>
 801bfc8:	2201      	movs	r2, #1
 801bfca:	e7c2      	b.n	801bf52 <_strtod_l+0x17a>
 801bfcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bfce:	1c5a      	adds	r2, r3, #1
 801bfd0:	921d      	str	r2, [sp, #116]	; 0x74
 801bfd2:	785b      	ldrb	r3, [r3, #1]
 801bfd4:	3001      	adds	r0, #1
 801bfd6:	2b30      	cmp	r3, #48	; 0x30
 801bfd8:	d0f8      	beq.n	801bfcc <_strtod_l+0x1f4>
 801bfda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801bfde:	2a08      	cmp	r2, #8
 801bfe0:	f200 84db 	bhi.w	801c99a <_strtod_l+0xbc2>
 801bfe4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bfe6:	9007      	str	r0, [sp, #28]
 801bfe8:	2000      	movs	r0, #0
 801bfea:	920a      	str	r2, [sp, #40]	; 0x28
 801bfec:	4605      	mov	r5, r0
 801bfee:	3b30      	subs	r3, #48	; 0x30
 801bff0:	f100 0201 	add.w	r2, r0, #1
 801bff4:	d014      	beq.n	801c020 <_strtod_l+0x248>
 801bff6:	9907      	ldr	r1, [sp, #28]
 801bff8:	4411      	add	r1, r2
 801bffa:	9107      	str	r1, [sp, #28]
 801bffc:	462a      	mov	r2, r5
 801bffe:	eb00 0e05 	add.w	lr, r0, r5
 801c002:	210a      	movs	r1, #10
 801c004:	4572      	cmp	r2, lr
 801c006:	d113      	bne.n	801c030 <_strtod_l+0x258>
 801c008:	182a      	adds	r2, r5, r0
 801c00a:	2a08      	cmp	r2, #8
 801c00c:	f105 0501 	add.w	r5, r5, #1
 801c010:	4405      	add	r5, r0
 801c012:	dc1c      	bgt.n	801c04e <_strtod_l+0x276>
 801c014:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c016:	220a      	movs	r2, #10
 801c018:	fb02 3301 	mla	r3, r2, r1, r3
 801c01c:	9309      	str	r3, [sp, #36]	; 0x24
 801c01e:	2200      	movs	r2, #0
 801c020:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c022:	1c59      	adds	r1, r3, #1
 801c024:	911d      	str	r1, [sp, #116]	; 0x74
 801c026:	785b      	ldrb	r3, [r3, #1]
 801c028:	4610      	mov	r0, r2
 801c02a:	e7c9      	b.n	801bfc0 <_strtod_l+0x1e8>
 801c02c:	4638      	mov	r0, r7
 801c02e:	e7d2      	b.n	801bfd6 <_strtod_l+0x1fe>
 801c030:	2a08      	cmp	r2, #8
 801c032:	dc04      	bgt.n	801c03e <_strtod_l+0x266>
 801c034:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c036:	434e      	muls	r6, r1
 801c038:	9609      	str	r6, [sp, #36]	; 0x24
 801c03a:	3201      	adds	r2, #1
 801c03c:	e7e2      	b.n	801c004 <_strtod_l+0x22c>
 801c03e:	f102 0c01 	add.w	ip, r2, #1
 801c042:	f1bc 0f10 	cmp.w	ip, #16
 801c046:	bfd8      	it	le
 801c048:	fb01 f909 	mulle.w	r9, r1, r9
 801c04c:	e7f5      	b.n	801c03a <_strtod_l+0x262>
 801c04e:	2d10      	cmp	r5, #16
 801c050:	bfdc      	itt	le
 801c052:	220a      	movle	r2, #10
 801c054:	fb02 3909 	mlale	r9, r2, r9, r3
 801c058:	e7e1      	b.n	801c01e <_strtod_l+0x246>
 801c05a:	2300      	movs	r3, #0
 801c05c:	9307      	str	r3, [sp, #28]
 801c05e:	2201      	movs	r2, #1
 801c060:	e77c      	b.n	801bf5c <_strtod_l+0x184>
 801c062:	f04f 0c00 	mov.w	ip, #0
 801c066:	f108 0302 	add.w	r3, r8, #2
 801c06a:	931d      	str	r3, [sp, #116]	; 0x74
 801c06c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801c070:	e785      	b.n	801bf7e <_strtod_l+0x1a6>
 801c072:	f04f 0c01 	mov.w	ip, #1
 801c076:	e7f6      	b.n	801c066 <_strtod_l+0x28e>
 801c078:	08021e04 	.word	0x08021e04
 801c07c:	08021c78 	.word	0x08021c78
 801c080:	7ff00000 	.word	0x7ff00000
 801c084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c086:	1c59      	adds	r1, r3, #1
 801c088:	911d      	str	r1, [sp, #116]	; 0x74
 801c08a:	785b      	ldrb	r3, [r3, #1]
 801c08c:	2b30      	cmp	r3, #48	; 0x30
 801c08e:	d0f9      	beq.n	801c084 <_strtod_l+0x2ac>
 801c090:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801c094:	2908      	cmp	r1, #8
 801c096:	f63f af79 	bhi.w	801bf8c <_strtod_l+0x1b4>
 801c09a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801c09e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0a0:	9308      	str	r3, [sp, #32]
 801c0a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0a4:	1c59      	adds	r1, r3, #1
 801c0a6:	911d      	str	r1, [sp, #116]	; 0x74
 801c0a8:	785b      	ldrb	r3, [r3, #1]
 801c0aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801c0ae:	2e09      	cmp	r6, #9
 801c0b0:	d937      	bls.n	801c122 <_strtod_l+0x34a>
 801c0b2:	9e08      	ldr	r6, [sp, #32]
 801c0b4:	1b89      	subs	r1, r1, r6
 801c0b6:	2908      	cmp	r1, #8
 801c0b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c0bc:	dc02      	bgt.n	801c0c4 <_strtod_l+0x2ec>
 801c0be:	4576      	cmp	r6, lr
 801c0c0:	bfa8      	it	ge
 801c0c2:	4676      	movge	r6, lr
 801c0c4:	f1bc 0f00 	cmp.w	ip, #0
 801c0c8:	d000      	beq.n	801c0cc <_strtod_l+0x2f4>
 801c0ca:	4276      	negs	r6, r6
 801c0cc:	2d00      	cmp	r5, #0
 801c0ce:	d14f      	bne.n	801c170 <_strtod_l+0x398>
 801c0d0:	9904      	ldr	r1, [sp, #16]
 801c0d2:	4301      	orrs	r1, r0
 801c0d4:	f47f aec2 	bne.w	801be5c <_strtod_l+0x84>
 801c0d8:	2a00      	cmp	r2, #0
 801c0da:	f47f aedb 	bne.w	801be94 <_strtod_l+0xbc>
 801c0de:	2b69      	cmp	r3, #105	; 0x69
 801c0e0:	d027      	beq.n	801c132 <_strtod_l+0x35a>
 801c0e2:	dc24      	bgt.n	801c12e <_strtod_l+0x356>
 801c0e4:	2b49      	cmp	r3, #73	; 0x49
 801c0e6:	d024      	beq.n	801c132 <_strtod_l+0x35a>
 801c0e8:	2b4e      	cmp	r3, #78	; 0x4e
 801c0ea:	f47f aed3 	bne.w	801be94 <_strtod_l+0xbc>
 801c0ee:	499e      	ldr	r1, [pc, #632]	; (801c368 <_strtod_l+0x590>)
 801c0f0:	a81d      	add	r0, sp, #116	; 0x74
 801c0f2:	f002 f8e1 	bl	801e2b8 <__match>
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	f43f aecc 	beq.w	801be94 <_strtod_l+0xbc>
 801c0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0fe:	781b      	ldrb	r3, [r3, #0]
 801c100:	2b28      	cmp	r3, #40	; 0x28
 801c102:	d12d      	bne.n	801c160 <_strtod_l+0x388>
 801c104:	4999      	ldr	r1, [pc, #612]	; (801c36c <_strtod_l+0x594>)
 801c106:	aa20      	add	r2, sp, #128	; 0x80
 801c108:	a81d      	add	r0, sp, #116	; 0x74
 801c10a:	f002 f8e9 	bl	801e2e0 <__hexnan>
 801c10e:	2805      	cmp	r0, #5
 801c110:	d126      	bne.n	801c160 <_strtod_l+0x388>
 801c112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c114:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801c118:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c11c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c120:	e69c      	b.n	801be5c <_strtod_l+0x84>
 801c122:	210a      	movs	r1, #10
 801c124:	fb01 3e0e 	mla	lr, r1, lr, r3
 801c128:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c12c:	e7b9      	b.n	801c0a2 <_strtod_l+0x2ca>
 801c12e:	2b6e      	cmp	r3, #110	; 0x6e
 801c130:	e7db      	b.n	801c0ea <_strtod_l+0x312>
 801c132:	498f      	ldr	r1, [pc, #572]	; (801c370 <_strtod_l+0x598>)
 801c134:	a81d      	add	r0, sp, #116	; 0x74
 801c136:	f002 f8bf 	bl	801e2b8 <__match>
 801c13a:	2800      	cmp	r0, #0
 801c13c:	f43f aeaa 	beq.w	801be94 <_strtod_l+0xbc>
 801c140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c142:	498c      	ldr	r1, [pc, #560]	; (801c374 <_strtod_l+0x59c>)
 801c144:	3b01      	subs	r3, #1
 801c146:	a81d      	add	r0, sp, #116	; 0x74
 801c148:	931d      	str	r3, [sp, #116]	; 0x74
 801c14a:	f002 f8b5 	bl	801e2b8 <__match>
 801c14e:	b910      	cbnz	r0, 801c156 <_strtod_l+0x37e>
 801c150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c152:	3301      	adds	r3, #1
 801c154:	931d      	str	r3, [sp, #116]	; 0x74
 801c156:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801c384 <_strtod_l+0x5ac>
 801c15a:	f04f 0a00 	mov.w	sl, #0
 801c15e:	e67d      	b.n	801be5c <_strtod_l+0x84>
 801c160:	4885      	ldr	r0, [pc, #532]	; (801c378 <_strtod_l+0x5a0>)
 801c162:	f7fe fa7d 	bl	801a660 <nan>
 801c166:	ed8d 0b04 	vstr	d0, [sp, #16]
 801c16a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801c16e:	e675      	b.n	801be5c <_strtod_l+0x84>
 801c170:	9b07      	ldr	r3, [sp, #28]
 801c172:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c174:	1af3      	subs	r3, r6, r3
 801c176:	2f00      	cmp	r7, #0
 801c178:	bf08      	it	eq
 801c17a:	462f      	moveq	r7, r5
 801c17c:	2d10      	cmp	r5, #16
 801c17e:	9308      	str	r3, [sp, #32]
 801c180:	46a8      	mov	r8, r5
 801c182:	bfa8      	it	ge
 801c184:	f04f 0810 	movge.w	r8, #16
 801c188:	f7e4 f9cc 	bl	8000524 <__aeabi_ui2d>
 801c18c:	2d09      	cmp	r5, #9
 801c18e:	4682      	mov	sl, r0
 801c190:	468b      	mov	fp, r1
 801c192:	dd13      	ble.n	801c1bc <_strtod_l+0x3e4>
 801c194:	4b79      	ldr	r3, [pc, #484]	; (801c37c <_strtod_l+0x5a4>)
 801c196:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c19a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c19e:	f7e4 fa3b 	bl	8000618 <__aeabi_dmul>
 801c1a2:	4682      	mov	sl, r0
 801c1a4:	4648      	mov	r0, r9
 801c1a6:	468b      	mov	fp, r1
 801c1a8:	f7e4 f9bc 	bl	8000524 <__aeabi_ui2d>
 801c1ac:	4602      	mov	r2, r0
 801c1ae:	460b      	mov	r3, r1
 801c1b0:	4650      	mov	r0, sl
 801c1b2:	4659      	mov	r1, fp
 801c1b4:	f7e4 f87a 	bl	80002ac <__adddf3>
 801c1b8:	4682      	mov	sl, r0
 801c1ba:	468b      	mov	fp, r1
 801c1bc:	2d0f      	cmp	r5, #15
 801c1be:	dc38      	bgt.n	801c232 <_strtod_l+0x45a>
 801c1c0:	9b08      	ldr	r3, [sp, #32]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	f43f ae4a 	beq.w	801be5c <_strtod_l+0x84>
 801c1c8:	dd24      	ble.n	801c214 <_strtod_l+0x43c>
 801c1ca:	2b16      	cmp	r3, #22
 801c1cc:	dc0b      	bgt.n	801c1e6 <_strtod_l+0x40e>
 801c1ce:	4d6b      	ldr	r5, [pc, #428]	; (801c37c <_strtod_l+0x5a4>)
 801c1d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801c1d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c1d8:	4652      	mov	r2, sl
 801c1da:	465b      	mov	r3, fp
 801c1dc:	f7e4 fa1c 	bl	8000618 <__aeabi_dmul>
 801c1e0:	4682      	mov	sl, r0
 801c1e2:	468b      	mov	fp, r1
 801c1e4:	e63a      	b.n	801be5c <_strtod_l+0x84>
 801c1e6:	9a08      	ldr	r2, [sp, #32]
 801c1e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c1ec:	4293      	cmp	r3, r2
 801c1ee:	db20      	blt.n	801c232 <_strtod_l+0x45a>
 801c1f0:	4c62      	ldr	r4, [pc, #392]	; (801c37c <_strtod_l+0x5a4>)
 801c1f2:	f1c5 050f 	rsb	r5, r5, #15
 801c1f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c1fa:	4652      	mov	r2, sl
 801c1fc:	465b      	mov	r3, fp
 801c1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c202:	f7e4 fa09 	bl	8000618 <__aeabi_dmul>
 801c206:	9b08      	ldr	r3, [sp, #32]
 801c208:	1b5d      	subs	r5, r3, r5
 801c20a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c20e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c212:	e7e3      	b.n	801c1dc <_strtod_l+0x404>
 801c214:	9b08      	ldr	r3, [sp, #32]
 801c216:	3316      	adds	r3, #22
 801c218:	db0b      	blt.n	801c232 <_strtod_l+0x45a>
 801c21a:	9b07      	ldr	r3, [sp, #28]
 801c21c:	4a57      	ldr	r2, [pc, #348]	; (801c37c <_strtod_l+0x5a4>)
 801c21e:	1b9e      	subs	r6, r3, r6
 801c220:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801c224:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c228:	4650      	mov	r0, sl
 801c22a:	4659      	mov	r1, fp
 801c22c:	f7e4 fb1e 	bl	800086c <__aeabi_ddiv>
 801c230:	e7d6      	b.n	801c1e0 <_strtod_l+0x408>
 801c232:	9b08      	ldr	r3, [sp, #32]
 801c234:	eba5 0808 	sub.w	r8, r5, r8
 801c238:	4498      	add	r8, r3
 801c23a:	f1b8 0f00 	cmp.w	r8, #0
 801c23e:	dd71      	ble.n	801c324 <_strtod_l+0x54c>
 801c240:	f018 030f 	ands.w	r3, r8, #15
 801c244:	d00a      	beq.n	801c25c <_strtod_l+0x484>
 801c246:	494d      	ldr	r1, [pc, #308]	; (801c37c <_strtod_l+0x5a4>)
 801c248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c24c:	4652      	mov	r2, sl
 801c24e:	465b      	mov	r3, fp
 801c250:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c254:	f7e4 f9e0 	bl	8000618 <__aeabi_dmul>
 801c258:	4682      	mov	sl, r0
 801c25a:	468b      	mov	fp, r1
 801c25c:	f038 080f 	bics.w	r8, r8, #15
 801c260:	d04d      	beq.n	801c2fe <_strtod_l+0x526>
 801c262:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c266:	dd22      	ble.n	801c2ae <_strtod_l+0x4d6>
 801c268:	2500      	movs	r5, #0
 801c26a:	462e      	mov	r6, r5
 801c26c:	9509      	str	r5, [sp, #36]	; 0x24
 801c26e:	9507      	str	r5, [sp, #28]
 801c270:	2322      	movs	r3, #34	; 0x22
 801c272:	f8df b110 	ldr.w	fp, [pc, #272]	; 801c384 <_strtod_l+0x5ac>
 801c276:	6023      	str	r3, [r4, #0]
 801c278:	f04f 0a00 	mov.w	sl, #0
 801c27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c27e:	2b00      	cmp	r3, #0
 801c280:	f43f adec 	beq.w	801be5c <_strtod_l+0x84>
 801c284:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c286:	4620      	mov	r0, r4
 801c288:	f002 f99e 	bl	801e5c8 <_Bfree>
 801c28c:	9907      	ldr	r1, [sp, #28]
 801c28e:	4620      	mov	r0, r4
 801c290:	f002 f99a 	bl	801e5c8 <_Bfree>
 801c294:	4631      	mov	r1, r6
 801c296:	4620      	mov	r0, r4
 801c298:	f002 f996 	bl	801e5c8 <_Bfree>
 801c29c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c29e:	4620      	mov	r0, r4
 801c2a0:	f002 f992 	bl	801e5c8 <_Bfree>
 801c2a4:	4629      	mov	r1, r5
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	f002 f98e 	bl	801e5c8 <_Bfree>
 801c2ac:	e5d6      	b.n	801be5c <_strtod_l+0x84>
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c2b4:	4650      	mov	r0, sl
 801c2b6:	4659      	mov	r1, fp
 801c2b8:	4699      	mov	r9, r3
 801c2ba:	f1b8 0f01 	cmp.w	r8, #1
 801c2be:	dc21      	bgt.n	801c304 <_strtod_l+0x52c>
 801c2c0:	b10b      	cbz	r3, 801c2c6 <_strtod_l+0x4ee>
 801c2c2:	4682      	mov	sl, r0
 801c2c4:	468b      	mov	fp, r1
 801c2c6:	4b2e      	ldr	r3, [pc, #184]	; (801c380 <_strtod_l+0x5a8>)
 801c2c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c2cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c2d0:	4652      	mov	r2, sl
 801c2d2:	465b      	mov	r3, fp
 801c2d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c2d8:	f7e4 f99e 	bl	8000618 <__aeabi_dmul>
 801c2dc:	4b29      	ldr	r3, [pc, #164]	; (801c384 <_strtod_l+0x5ac>)
 801c2de:	460a      	mov	r2, r1
 801c2e0:	400b      	ands	r3, r1
 801c2e2:	4929      	ldr	r1, [pc, #164]	; (801c388 <_strtod_l+0x5b0>)
 801c2e4:	428b      	cmp	r3, r1
 801c2e6:	4682      	mov	sl, r0
 801c2e8:	d8be      	bhi.n	801c268 <_strtod_l+0x490>
 801c2ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c2ee:	428b      	cmp	r3, r1
 801c2f0:	bf86      	itte	hi
 801c2f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801c38c <_strtod_l+0x5b4>
 801c2f6:	f04f 3aff 	movhi.w	sl, #4294967295
 801c2fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c2fe:	2300      	movs	r3, #0
 801c300:	9304      	str	r3, [sp, #16]
 801c302:	e081      	b.n	801c408 <_strtod_l+0x630>
 801c304:	f018 0f01 	tst.w	r8, #1
 801c308:	d007      	beq.n	801c31a <_strtod_l+0x542>
 801c30a:	4b1d      	ldr	r3, [pc, #116]	; (801c380 <_strtod_l+0x5a8>)
 801c30c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c314:	f7e4 f980 	bl	8000618 <__aeabi_dmul>
 801c318:	2301      	movs	r3, #1
 801c31a:	f109 0901 	add.w	r9, r9, #1
 801c31e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c322:	e7ca      	b.n	801c2ba <_strtod_l+0x4e2>
 801c324:	d0eb      	beq.n	801c2fe <_strtod_l+0x526>
 801c326:	f1c8 0800 	rsb	r8, r8, #0
 801c32a:	f018 020f 	ands.w	r2, r8, #15
 801c32e:	d00a      	beq.n	801c346 <_strtod_l+0x56e>
 801c330:	4b12      	ldr	r3, [pc, #72]	; (801c37c <_strtod_l+0x5a4>)
 801c332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c336:	4650      	mov	r0, sl
 801c338:	4659      	mov	r1, fp
 801c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33e:	f7e4 fa95 	bl	800086c <__aeabi_ddiv>
 801c342:	4682      	mov	sl, r0
 801c344:	468b      	mov	fp, r1
 801c346:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c34a:	d0d8      	beq.n	801c2fe <_strtod_l+0x526>
 801c34c:	f1b8 0f1f 	cmp.w	r8, #31
 801c350:	dd1e      	ble.n	801c390 <_strtod_l+0x5b8>
 801c352:	2500      	movs	r5, #0
 801c354:	462e      	mov	r6, r5
 801c356:	9509      	str	r5, [sp, #36]	; 0x24
 801c358:	9507      	str	r5, [sp, #28]
 801c35a:	2322      	movs	r3, #34	; 0x22
 801c35c:	f04f 0a00 	mov.w	sl, #0
 801c360:	f04f 0b00 	mov.w	fp, #0
 801c364:	6023      	str	r3, [r4, #0]
 801c366:	e789      	b.n	801c27c <_strtod_l+0x4a4>
 801c368:	08021c4d 	.word	0x08021c4d
 801c36c:	08021c8c 	.word	0x08021c8c
 801c370:	08021c45 	.word	0x08021c45
 801c374:	08021d07 	.word	0x08021d07
 801c378:	08021d03 	.word	0x08021d03
 801c37c:	08021ea0 	.word	0x08021ea0
 801c380:	08021e78 	.word	0x08021e78
 801c384:	7ff00000 	.word	0x7ff00000
 801c388:	7ca00000 	.word	0x7ca00000
 801c38c:	7fefffff 	.word	0x7fefffff
 801c390:	f018 0310 	ands.w	r3, r8, #16
 801c394:	bf18      	it	ne
 801c396:	236a      	movne	r3, #106	; 0x6a
 801c398:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c750 <_strtod_l+0x978>
 801c39c:	9304      	str	r3, [sp, #16]
 801c39e:	4650      	mov	r0, sl
 801c3a0:	4659      	mov	r1, fp
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	f018 0f01 	tst.w	r8, #1
 801c3a8:	d004      	beq.n	801c3b4 <_strtod_l+0x5dc>
 801c3aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c3ae:	f7e4 f933 	bl	8000618 <__aeabi_dmul>
 801c3b2:	2301      	movs	r3, #1
 801c3b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c3b8:	f109 0908 	add.w	r9, r9, #8
 801c3bc:	d1f2      	bne.n	801c3a4 <_strtod_l+0x5cc>
 801c3be:	b10b      	cbz	r3, 801c3c4 <_strtod_l+0x5ec>
 801c3c0:	4682      	mov	sl, r0
 801c3c2:	468b      	mov	fp, r1
 801c3c4:	9b04      	ldr	r3, [sp, #16]
 801c3c6:	b1bb      	cbz	r3, 801c3f8 <_strtod_l+0x620>
 801c3c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c3cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	4659      	mov	r1, fp
 801c3d4:	dd10      	ble.n	801c3f8 <_strtod_l+0x620>
 801c3d6:	2b1f      	cmp	r3, #31
 801c3d8:	f340 8128 	ble.w	801c62c <_strtod_l+0x854>
 801c3dc:	2b34      	cmp	r3, #52	; 0x34
 801c3de:	bfde      	ittt	le
 801c3e0:	3b20      	suble	r3, #32
 801c3e2:	f04f 32ff 	movle.w	r2, #4294967295
 801c3e6:	fa02 f303 	lslle.w	r3, r2, r3
 801c3ea:	f04f 0a00 	mov.w	sl, #0
 801c3ee:	bfcc      	ite	gt
 801c3f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c3f4:	ea03 0b01 	andle.w	fp, r3, r1
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	4650      	mov	r0, sl
 801c3fe:	4659      	mov	r1, fp
 801c400:	f7e4 fb72 	bl	8000ae8 <__aeabi_dcmpeq>
 801c404:	2800      	cmp	r0, #0
 801c406:	d1a4      	bne.n	801c352 <_strtod_l+0x57a>
 801c408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c40a:	9300      	str	r3, [sp, #0]
 801c40c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c40e:	462b      	mov	r3, r5
 801c410:	463a      	mov	r2, r7
 801c412:	4620      	mov	r0, r4
 801c414:	f002 f944 	bl	801e6a0 <__s2b>
 801c418:	9009      	str	r0, [sp, #36]	; 0x24
 801c41a:	2800      	cmp	r0, #0
 801c41c:	f43f af24 	beq.w	801c268 <_strtod_l+0x490>
 801c420:	9b07      	ldr	r3, [sp, #28]
 801c422:	1b9e      	subs	r6, r3, r6
 801c424:	9b08      	ldr	r3, [sp, #32]
 801c426:	2b00      	cmp	r3, #0
 801c428:	bfb4      	ite	lt
 801c42a:	4633      	movlt	r3, r6
 801c42c:	2300      	movge	r3, #0
 801c42e:	9310      	str	r3, [sp, #64]	; 0x40
 801c430:	9b08      	ldr	r3, [sp, #32]
 801c432:	2500      	movs	r5, #0
 801c434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c438:	9318      	str	r3, [sp, #96]	; 0x60
 801c43a:	462e      	mov	r6, r5
 801c43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c43e:	4620      	mov	r0, r4
 801c440:	6859      	ldr	r1, [r3, #4]
 801c442:	f002 f881 	bl	801e548 <_Balloc>
 801c446:	9007      	str	r0, [sp, #28]
 801c448:	2800      	cmp	r0, #0
 801c44a:	f43f af11 	beq.w	801c270 <_strtod_l+0x498>
 801c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c450:	691a      	ldr	r2, [r3, #16]
 801c452:	3202      	adds	r2, #2
 801c454:	f103 010c 	add.w	r1, r3, #12
 801c458:	0092      	lsls	r2, r2, #2
 801c45a:	300c      	adds	r0, #12
 801c45c:	f7fe fb4e 	bl	801aafc <memcpy>
 801c460:	ec4b ab10 	vmov	d0, sl, fp
 801c464:	aa20      	add	r2, sp, #128	; 0x80
 801c466:	a91f      	add	r1, sp, #124	; 0x7c
 801c468:	4620      	mov	r0, r4
 801c46a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801c46e:	f002 fc53 	bl	801ed18 <__d2b>
 801c472:	901e      	str	r0, [sp, #120]	; 0x78
 801c474:	2800      	cmp	r0, #0
 801c476:	f43f aefb 	beq.w	801c270 <_strtod_l+0x498>
 801c47a:	2101      	movs	r1, #1
 801c47c:	4620      	mov	r0, r4
 801c47e:	f002 f9a9 	bl	801e7d4 <__i2b>
 801c482:	4606      	mov	r6, r0
 801c484:	2800      	cmp	r0, #0
 801c486:	f43f aef3 	beq.w	801c270 <_strtod_l+0x498>
 801c48a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c48c:	9904      	ldr	r1, [sp, #16]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	bfab      	itete	ge
 801c492:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801c494:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801c496:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801c498:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801c49c:	bfac      	ite	ge
 801c49e:	eb03 0902 	addge.w	r9, r3, r2
 801c4a2:	1ad7      	sublt	r7, r2, r3
 801c4a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c4a6:	eba3 0801 	sub.w	r8, r3, r1
 801c4aa:	4490      	add	r8, r2
 801c4ac:	4ba3      	ldr	r3, [pc, #652]	; (801c73c <_strtod_l+0x964>)
 801c4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 801c4b2:	4598      	cmp	r8, r3
 801c4b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c4b8:	f280 80cc 	bge.w	801c654 <_strtod_l+0x87c>
 801c4bc:	eba3 0308 	sub.w	r3, r3, r8
 801c4c0:	2b1f      	cmp	r3, #31
 801c4c2:	eba2 0203 	sub.w	r2, r2, r3
 801c4c6:	f04f 0101 	mov.w	r1, #1
 801c4ca:	f300 80b6 	bgt.w	801c63a <_strtod_l+0x862>
 801c4ce:	fa01 f303 	lsl.w	r3, r1, r3
 801c4d2:	9311      	str	r3, [sp, #68]	; 0x44
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	930c      	str	r3, [sp, #48]	; 0x30
 801c4d8:	eb09 0802 	add.w	r8, r9, r2
 801c4dc:	9b04      	ldr	r3, [sp, #16]
 801c4de:	45c1      	cmp	r9, r8
 801c4e0:	4417      	add	r7, r2
 801c4e2:	441f      	add	r7, r3
 801c4e4:	464b      	mov	r3, r9
 801c4e6:	bfa8      	it	ge
 801c4e8:	4643      	movge	r3, r8
 801c4ea:	42bb      	cmp	r3, r7
 801c4ec:	bfa8      	it	ge
 801c4ee:	463b      	movge	r3, r7
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	bfc2      	ittt	gt
 801c4f4:	eba8 0803 	subgt.w	r8, r8, r3
 801c4f8:	1aff      	subgt	r7, r7, r3
 801c4fa:	eba9 0903 	subgt.w	r9, r9, r3
 801c4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c500:	2b00      	cmp	r3, #0
 801c502:	dd17      	ble.n	801c534 <_strtod_l+0x75c>
 801c504:	4631      	mov	r1, r6
 801c506:	461a      	mov	r2, r3
 801c508:	4620      	mov	r0, r4
 801c50a:	f002 fa1f 	bl	801e94c <__pow5mult>
 801c50e:	4606      	mov	r6, r0
 801c510:	2800      	cmp	r0, #0
 801c512:	f43f aead 	beq.w	801c270 <_strtod_l+0x498>
 801c516:	4601      	mov	r1, r0
 801c518:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c51a:	4620      	mov	r0, r4
 801c51c:	f002 f970 	bl	801e800 <__multiply>
 801c520:	900f      	str	r0, [sp, #60]	; 0x3c
 801c522:	2800      	cmp	r0, #0
 801c524:	f43f aea4 	beq.w	801c270 <_strtod_l+0x498>
 801c528:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c52a:	4620      	mov	r0, r4
 801c52c:	f002 f84c 	bl	801e5c8 <_Bfree>
 801c530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c532:	931e      	str	r3, [sp, #120]	; 0x78
 801c534:	f1b8 0f00 	cmp.w	r8, #0
 801c538:	f300 8091 	bgt.w	801c65e <_strtod_l+0x886>
 801c53c:	9b08      	ldr	r3, [sp, #32]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	dd08      	ble.n	801c554 <_strtod_l+0x77c>
 801c542:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c544:	9907      	ldr	r1, [sp, #28]
 801c546:	4620      	mov	r0, r4
 801c548:	f002 fa00 	bl	801e94c <__pow5mult>
 801c54c:	9007      	str	r0, [sp, #28]
 801c54e:	2800      	cmp	r0, #0
 801c550:	f43f ae8e 	beq.w	801c270 <_strtod_l+0x498>
 801c554:	2f00      	cmp	r7, #0
 801c556:	dd08      	ble.n	801c56a <_strtod_l+0x792>
 801c558:	9907      	ldr	r1, [sp, #28]
 801c55a:	463a      	mov	r2, r7
 801c55c:	4620      	mov	r0, r4
 801c55e:	f002 fa4f 	bl	801ea00 <__lshift>
 801c562:	9007      	str	r0, [sp, #28]
 801c564:	2800      	cmp	r0, #0
 801c566:	f43f ae83 	beq.w	801c270 <_strtod_l+0x498>
 801c56a:	f1b9 0f00 	cmp.w	r9, #0
 801c56e:	dd08      	ble.n	801c582 <_strtod_l+0x7aa>
 801c570:	4631      	mov	r1, r6
 801c572:	464a      	mov	r2, r9
 801c574:	4620      	mov	r0, r4
 801c576:	f002 fa43 	bl	801ea00 <__lshift>
 801c57a:	4606      	mov	r6, r0
 801c57c:	2800      	cmp	r0, #0
 801c57e:	f43f ae77 	beq.w	801c270 <_strtod_l+0x498>
 801c582:	9a07      	ldr	r2, [sp, #28]
 801c584:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c586:	4620      	mov	r0, r4
 801c588:	f002 fac2 	bl	801eb10 <__mdiff>
 801c58c:	4605      	mov	r5, r0
 801c58e:	2800      	cmp	r0, #0
 801c590:	f43f ae6e 	beq.w	801c270 <_strtod_l+0x498>
 801c594:	68c3      	ldr	r3, [r0, #12]
 801c596:	930f      	str	r3, [sp, #60]	; 0x3c
 801c598:	2300      	movs	r3, #0
 801c59a:	60c3      	str	r3, [r0, #12]
 801c59c:	4631      	mov	r1, r6
 801c59e:	f002 fa9b 	bl	801ead8 <__mcmp>
 801c5a2:	2800      	cmp	r0, #0
 801c5a4:	da65      	bge.n	801c672 <_strtod_l+0x89a>
 801c5a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5a8:	ea53 030a 	orrs.w	r3, r3, sl
 801c5ac:	f040 8087 	bne.w	801c6be <_strtod_l+0x8e6>
 801c5b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	f040 8082 	bne.w	801c6be <_strtod_l+0x8e6>
 801c5ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c5be:	0d1b      	lsrs	r3, r3, #20
 801c5c0:	051b      	lsls	r3, r3, #20
 801c5c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c5c6:	d97a      	bls.n	801c6be <_strtod_l+0x8e6>
 801c5c8:	696b      	ldr	r3, [r5, #20]
 801c5ca:	b913      	cbnz	r3, 801c5d2 <_strtod_l+0x7fa>
 801c5cc:	692b      	ldr	r3, [r5, #16]
 801c5ce:	2b01      	cmp	r3, #1
 801c5d0:	dd75      	ble.n	801c6be <_strtod_l+0x8e6>
 801c5d2:	4629      	mov	r1, r5
 801c5d4:	2201      	movs	r2, #1
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	f002 fa12 	bl	801ea00 <__lshift>
 801c5dc:	4631      	mov	r1, r6
 801c5de:	4605      	mov	r5, r0
 801c5e0:	f002 fa7a 	bl	801ead8 <__mcmp>
 801c5e4:	2800      	cmp	r0, #0
 801c5e6:	dd6a      	ble.n	801c6be <_strtod_l+0x8e6>
 801c5e8:	9904      	ldr	r1, [sp, #16]
 801c5ea:	4a55      	ldr	r2, [pc, #340]	; (801c740 <_strtod_l+0x968>)
 801c5ec:	465b      	mov	r3, fp
 801c5ee:	2900      	cmp	r1, #0
 801c5f0:	f000 8085 	beq.w	801c6fe <_strtod_l+0x926>
 801c5f4:	ea02 010b 	and.w	r1, r2, fp
 801c5f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c5fc:	dc7f      	bgt.n	801c6fe <_strtod_l+0x926>
 801c5fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c602:	f77f aeaa 	ble.w	801c35a <_strtod_l+0x582>
 801c606:	4a4f      	ldr	r2, [pc, #316]	; (801c744 <_strtod_l+0x96c>)
 801c608:	2300      	movs	r3, #0
 801c60a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c60e:	4650      	mov	r0, sl
 801c610:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c614:	4659      	mov	r1, fp
 801c616:	f7e3 ffff 	bl	8000618 <__aeabi_dmul>
 801c61a:	460b      	mov	r3, r1
 801c61c:	4303      	orrs	r3, r0
 801c61e:	bf08      	it	eq
 801c620:	2322      	moveq	r3, #34	; 0x22
 801c622:	4682      	mov	sl, r0
 801c624:	468b      	mov	fp, r1
 801c626:	bf08      	it	eq
 801c628:	6023      	streq	r3, [r4, #0]
 801c62a:	e62b      	b.n	801c284 <_strtod_l+0x4ac>
 801c62c:	f04f 32ff 	mov.w	r2, #4294967295
 801c630:	fa02 f303 	lsl.w	r3, r2, r3
 801c634:	ea03 0a0a 	and.w	sl, r3, sl
 801c638:	e6de      	b.n	801c3f8 <_strtod_l+0x620>
 801c63a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c63e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c642:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c646:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c64a:	fa01 f308 	lsl.w	r3, r1, r8
 801c64e:	930c      	str	r3, [sp, #48]	; 0x30
 801c650:	9111      	str	r1, [sp, #68]	; 0x44
 801c652:	e741      	b.n	801c4d8 <_strtod_l+0x700>
 801c654:	2300      	movs	r3, #0
 801c656:	930c      	str	r3, [sp, #48]	; 0x30
 801c658:	2301      	movs	r3, #1
 801c65a:	9311      	str	r3, [sp, #68]	; 0x44
 801c65c:	e73c      	b.n	801c4d8 <_strtod_l+0x700>
 801c65e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c660:	4642      	mov	r2, r8
 801c662:	4620      	mov	r0, r4
 801c664:	f002 f9cc 	bl	801ea00 <__lshift>
 801c668:	901e      	str	r0, [sp, #120]	; 0x78
 801c66a:	2800      	cmp	r0, #0
 801c66c:	f47f af66 	bne.w	801c53c <_strtod_l+0x764>
 801c670:	e5fe      	b.n	801c270 <_strtod_l+0x498>
 801c672:	465f      	mov	r7, fp
 801c674:	d16e      	bne.n	801c754 <_strtod_l+0x97c>
 801c676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c67c:	b342      	cbz	r2, 801c6d0 <_strtod_l+0x8f8>
 801c67e:	4a32      	ldr	r2, [pc, #200]	; (801c748 <_strtod_l+0x970>)
 801c680:	4293      	cmp	r3, r2
 801c682:	d128      	bne.n	801c6d6 <_strtod_l+0x8fe>
 801c684:	9b04      	ldr	r3, [sp, #16]
 801c686:	4650      	mov	r0, sl
 801c688:	b1eb      	cbz	r3, 801c6c6 <_strtod_l+0x8ee>
 801c68a:	4a2d      	ldr	r2, [pc, #180]	; (801c740 <_strtod_l+0x968>)
 801c68c:	403a      	ands	r2, r7
 801c68e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c692:	f04f 31ff 	mov.w	r1, #4294967295
 801c696:	d819      	bhi.n	801c6cc <_strtod_l+0x8f4>
 801c698:	0d12      	lsrs	r2, r2, #20
 801c69a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c69e:	fa01 f303 	lsl.w	r3, r1, r3
 801c6a2:	4298      	cmp	r0, r3
 801c6a4:	d117      	bne.n	801c6d6 <_strtod_l+0x8fe>
 801c6a6:	4b29      	ldr	r3, [pc, #164]	; (801c74c <_strtod_l+0x974>)
 801c6a8:	429f      	cmp	r7, r3
 801c6aa:	d102      	bne.n	801c6b2 <_strtod_l+0x8da>
 801c6ac:	3001      	adds	r0, #1
 801c6ae:	f43f addf 	beq.w	801c270 <_strtod_l+0x498>
 801c6b2:	4b23      	ldr	r3, [pc, #140]	; (801c740 <_strtod_l+0x968>)
 801c6b4:	403b      	ands	r3, r7
 801c6b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c6ba:	f04f 0a00 	mov.w	sl, #0
 801c6be:	9b04      	ldr	r3, [sp, #16]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d1a0      	bne.n	801c606 <_strtod_l+0x82e>
 801c6c4:	e5de      	b.n	801c284 <_strtod_l+0x4ac>
 801c6c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ca:	e7ea      	b.n	801c6a2 <_strtod_l+0x8ca>
 801c6cc:	460b      	mov	r3, r1
 801c6ce:	e7e8      	b.n	801c6a2 <_strtod_l+0x8ca>
 801c6d0:	ea53 030a 	orrs.w	r3, r3, sl
 801c6d4:	d088      	beq.n	801c5e8 <_strtod_l+0x810>
 801c6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6d8:	b1db      	cbz	r3, 801c712 <_strtod_l+0x93a>
 801c6da:	423b      	tst	r3, r7
 801c6dc:	d0ef      	beq.n	801c6be <_strtod_l+0x8e6>
 801c6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6e0:	9a04      	ldr	r2, [sp, #16]
 801c6e2:	4650      	mov	r0, sl
 801c6e4:	4659      	mov	r1, fp
 801c6e6:	b1c3      	cbz	r3, 801c71a <_strtod_l+0x942>
 801c6e8:	f7ff fb59 	bl	801bd9e <sulp>
 801c6ec:	4602      	mov	r2, r0
 801c6ee:	460b      	mov	r3, r1
 801c6f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c6f4:	f7e3 fdda 	bl	80002ac <__adddf3>
 801c6f8:	4682      	mov	sl, r0
 801c6fa:	468b      	mov	fp, r1
 801c6fc:	e7df      	b.n	801c6be <_strtod_l+0x8e6>
 801c6fe:	4013      	ands	r3, r2
 801c700:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c704:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c708:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c70c:	f04f 3aff 	mov.w	sl, #4294967295
 801c710:	e7d5      	b.n	801c6be <_strtod_l+0x8e6>
 801c712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c714:	ea13 0f0a 	tst.w	r3, sl
 801c718:	e7e0      	b.n	801c6dc <_strtod_l+0x904>
 801c71a:	f7ff fb40 	bl	801bd9e <sulp>
 801c71e:	4602      	mov	r2, r0
 801c720:	460b      	mov	r3, r1
 801c722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c726:	f7e3 fdbf 	bl	80002a8 <__aeabi_dsub>
 801c72a:	2200      	movs	r2, #0
 801c72c:	2300      	movs	r3, #0
 801c72e:	4682      	mov	sl, r0
 801c730:	468b      	mov	fp, r1
 801c732:	f7e4 f9d9 	bl	8000ae8 <__aeabi_dcmpeq>
 801c736:	2800      	cmp	r0, #0
 801c738:	d0c1      	beq.n	801c6be <_strtod_l+0x8e6>
 801c73a:	e60e      	b.n	801c35a <_strtod_l+0x582>
 801c73c:	fffffc02 	.word	0xfffffc02
 801c740:	7ff00000 	.word	0x7ff00000
 801c744:	39500000 	.word	0x39500000
 801c748:	000fffff 	.word	0x000fffff
 801c74c:	7fefffff 	.word	0x7fefffff
 801c750:	08021ca0 	.word	0x08021ca0
 801c754:	4631      	mov	r1, r6
 801c756:	4628      	mov	r0, r5
 801c758:	f002 fb3a 	bl	801edd0 <__ratio>
 801c75c:	ec59 8b10 	vmov	r8, r9, d0
 801c760:	ee10 0a10 	vmov	r0, s0
 801c764:	2200      	movs	r2, #0
 801c766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c76a:	4649      	mov	r1, r9
 801c76c:	f7e4 f9d0 	bl	8000b10 <__aeabi_dcmple>
 801c770:	2800      	cmp	r0, #0
 801c772:	d07c      	beq.n	801c86e <_strtod_l+0xa96>
 801c774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c776:	2b00      	cmp	r3, #0
 801c778:	d04c      	beq.n	801c814 <_strtod_l+0xa3c>
 801c77a:	4b95      	ldr	r3, [pc, #596]	; (801c9d0 <_strtod_l+0xbf8>)
 801c77c:	2200      	movs	r2, #0
 801c77e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c782:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c9d0 <_strtod_l+0xbf8>
 801c786:	f04f 0800 	mov.w	r8, #0
 801c78a:	4b92      	ldr	r3, [pc, #584]	; (801c9d4 <_strtod_l+0xbfc>)
 801c78c:	403b      	ands	r3, r7
 801c78e:	9311      	str	r3, [sp, #68]	; 0x44
 801c790:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c792:	4b91      	ldr	r3, [pc, #580]	; (801c9d8 <_strtod_l+0xc00>)
 801c794:	429a      	cmp	r2, r3
 801c796:	f040 80b2 	bne.w	801c8fe <_strtod_l+0xb26>
 801c79a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c7a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c7a6:	ec4b ab10 	vmov	d0, sl, fp
 801c7aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c7ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c7b2:	f002 fa35 	bl	801ec20 <__ulp>
 801c7b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c7ba:	ec53 2b10 	vmov	r2, r3, d0
 801c7be:	f7e3 ff2b 	bl	8000618 <__aeabi_dmul>
 801c7c2:	4652      	mov	r2, sl
 801c7c4:	465b      	mov	r3, fp
 801c7c6:	f7e3 fd71 	bl	80002ac <__adddf3>
 801c7ca:	460b      	mov	r3, r1
 801c7cc:	4981      	ldr	r1, [pc, #516]	; (801c9d4 <_strtod_l+0xbfc>)
 801c7ce:	4a83      	ldr	r2, [pc, #524]	; (801c9dc <_strtod_l+0xc04>)
 801c7d0:	4019      	ands	r1, r3
 801c7d2:	4291      	cmp	r1, r2
 801c7d4:	4682      	mov	sl, r0
 801c7d6:	d95e      	bls.n	801c896 <_strtod_l+0xabe>
 801c7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c7de:	4293      	cmp	r3, r2
 801c7e0:	d103      	bne.n	801c7ea <_strtod_l+0xa12>
 801c7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	f43f ad43 	beq.w	801c270 <_strtod_l+0x498>
 801c7ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c9e8 <_strtod_l+0xc10>
 801c7ee:	f04f 3aff 	mov.w	sl, #4294967295
 801c7f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	f001 fee7 	bl	801e5c8 <_Bfree>
 801c7fa:	9907      	ldr	r1, [sp, #28]
 801c7fc:	4620      	mov	r0, r4
 801c7fe:	f001 fee3 	bl	801e5c8 <_Bfree>
 801c802:	4631      	mov	r1, r6
 801c804:	4620      	mov	r0, r4
 801c806:	f001 fedf 	bl	801e5c8 <_Bfree>
 801c80a:	4629      	mov	r1, r5
 801c80c:	4620      	mov	r0, r4
 801c80e:	f001 fedb 	bl	801e5c8 <_Bfree>
 801c812:	e613      	b.n	801c43c <_strtod_l+0x664>
 801c814:	f1ba 0f00 	cmp.w	sl, #0
 801c818:	d11b      	bne.n	801c852 <_strtod_l+0xa7a>
 801c81a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c81e:	b9f3      	cbnz	r3, 801c85e <_strtod_l+0xa86>
 801c820:	4b6b      	ldr	r3, [pc, #428]	; (801c9d0 <_strtod_l+0xbf8>)
 801c822:	2200      	movs	r2, #0
 801c824:	4640      	mov	r0, r8
 801c826:	4649      	mov	r1, r9
 801c828:	f7e4 f968 	bl	8000afc <__aeabi_dcmplt>
 801c82c:	b9d0      	cbnz	r0, 801c864 <_strtod_l+0xa8c>
 801c82e:	4640      	mov	r0, r8
 801c830:	4649      	mov	r1, r9
 801c832:	4b6b      	ldr	r3, [pc, #428]	; (801c9e0 <_strtod_l+0xc08>)
 801c834:	2200      	movs	r2, #0
 801c836:	f7e3 feef 	bl	8000618 <__aeabi_dmul>
 801c83a:	4680      	mov	r8, r0
 801c83c:	4689      	mov	r9, r1
 801c83e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c842:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c846:	931b      	str	r3, [sp, #108]	; 0x6c
 801c848:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c84c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c850:	e79b      	b.n	801c78a <_strtod_l+0x9b2>
 801c852:	f1ba 0f01 	cmp.w	sl, #1
 801c856:	d102      	bne.n	801c85e <_strtod_l+0xa86>
 801c858:	2f00      	cmp	r7, #0
 801c85a:	f43f ad7e 	beq.w	801c35a <_strtod_l+0x582>
 801c85e:	4b61      	ldr	r3, [pc, #388]	; (801c9e4 <_strtod_l+0xc0c>)
 801c860:	2200      	movs	r2, #0
 801c862:	e78c      	b.n	801c77e <_strtod_l+0x9a6>
 801c864:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c9e0 <_strtod_l+0xc08>
 801c868:	f04f 0800 	mov.w	r8, #0
 801c86c:	e7e7      	b.n	801c83e <_strtod_l+0xa66>
 801c86e:	4b5c      	ldr	r3, [pc, #368]	; (801c9e0 <_strtod_l+0xc08>)
 801c870:	4640      	mov	r0, r8
 801c872:	4649      	mov	r1, r9
 801c874:	2200      	movs	r2, #0
 801c876:	f7e3 fecf 	bl	8000618 <__aeabi_dmul>
 801c87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c87c:	4680      	mov	r8, r0
 801c87e:	4689      	mov	r9, r1
 801c880:	b933      	cbnz	r3, 801c890 <_strtod_l+0xab8>
 801c882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c886:	9012      	str	r0, [sp, #72]	; 0x48
 801c888:	9313      	str	r3, [sp, #76]	; 0x4c
 801c88a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c88e:	e7dd      	b.n	801c84c <_strtod_l+0xa74>
 801c890:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c894:	e7f9      	b.n	801c88a <_strtod_l+0xab2>
 801c896:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c89a:	9b04      	ldr	r3, [sp, #16]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d1a8      	bne.n	801c7f2 <_strtod_l+0xa1a>
 801c8a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c8a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8a6:	0d1b      	lsrs	r3, r3, #20
 801c8a8:	051b      	lsls	r3, r3, #20
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d1a1      	bne.n	801c7f2 <_strtod_l+0xa1a>
 801c8ae:	4640      	mov	r0, r8
 801c8b0:	4649      	mov	r1, r9
 801c8b2:	f7e4 fa11 	bl	8000cd8 <__aeabi_d2lz>
 801c8b6:	f7e3 fe81 	bl	80005bc <__aeabi_l2d>
 801c8ba:	4602      	mov	r2, r0
 801c8bc:	460b      	mov	r3, r1
 801c8be:	4640      	mov	r0, r8
 801c8c0:	4649      	mov	r1, r9
 801c8c2:	f7e3 fcf1 	bl	80002a8 <__aeabi_dsub>
 801c8c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c8cc:	ea43 030a 	orr.w	r3, r3, sl
 801c8d0:	4313      	orrs	r3, r2
 801c8d2:	4680      	mov	r8, r0
 801c8d4:	4689      	mov	r9, r1
 801c8d6:	d053      	beq.n	801c980 <_strtod_l+0xba8>
 801c8d8:	a335      	add	r3, pc, #212	; (adr r3, 801c9b0 <_strtod_l+0xbd8>)
 801c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8de:	f7e4 f90d 	bl	8000afc <__aeabi_dcmplt>
 801c8e2:	2800      	cmp	r0, #0
 801c8e4:	f47f acce 	bne.w	801c284 <_strtod_l+0x4ac>
 801c8e8:	a333      	add	r3, pc, #204	; (adr r3, 801c9b8 <_strtod_l+0xbe0>)
 801c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ee:	4640      	mov	r0, r8
 801c8f0:	4649      	mov	r1, r9
 801c8f2:	f7e4 f921 	bl	8000b38 <__aeabi_dcmpgt>
 801c8f6:	2800      	cmp	r0, #0
 801c8f8:	f43f af7b 	beq.w	801c7f2 <_strtod_l+0xa1a>
 801c8fc:	e4c2      	b.n	801c284 <_strtod_l+0x4ac>
 801c8fe:	9b04      	ldr	r3, [sp, #16]
 801c900:	b333      	cbz	r3, 801c950 <_strtod_l+0xb78>
 801c902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c904:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c908:	d822      	bhi.n	801c950 <_strtod_l+0xb78>
 801c90a:	a32d      	add	r3, pc, #180	; (adr r3, 801c9c0 <_strtod_l+0xbe8>)
 801c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c910:	4640      	mov	r0, r8
 801c912:	4649      	mov	r1, r9
 801c914:	f7e4 f8fc 	bl	8000b10 <__aeabi_dcmple>
 801c918:	b1a0      	cbz	r0, 801c944 <_strtod_l+0xb6c>
 801c91a:	4649      	mov	r1, r9
 801c91c:	4640      	mov	r0, r8
 801c91e:	f7e4 f953 	bl	8000bc8 <__aeabi_d2uiz>
 801c922:	2801      	cmp	r0, #1
 801c924:	bf38      	it	cc
 801c926:	2001      	movcc	r0, #1
 801c928:	f7e3 fdfc 	bl	8000524 <__aeabi_ui2d>
 801c92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c92e:	4680      	mov	r8, r0
 801c930:	4689      	mov	r9, r1
 801c932:	bb13      	cbnz	r3, 801c97a <_strtod_l+0xba2>
 801c934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c938:	9014      	str	r0, [sp, #80]	; 0x50
 801c93a:	9315      	str	r3, [sp, #84]	; 0x54
 801c93c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c940:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c946:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c948:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c94c:	1a9b      	subs	r3, r3, r2
 801c94e:	930d      	str	r3, [sp, #52]	; 0x34
 801c950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c954:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c95c:	f002 f960 	bl	801ec20 <__ulp>
 801c960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c964:	ec53 2b10 	vmov	r2, r3, d0
 801c968:	f7e3 fe56 	bl	8000618 <__aeabi_dmul>
 801c96c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c970:	f7e3 fc9c 	bl	80002ac <__adddf3>
 801c974:	4682      	mov	sl, r0
 801c976:	468b      	mov	fp, r1
 801c978:	e78f      	b.n	801c89a <_strtod_l+0xac2>
 801c97a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c97e:	e7dd      	b.n	801c93c <_strtod_l+0xb64>
 801c980:	a311      	add	r3, pc, #68	; (adr r3, 801c9c8 <_strtod_l+0xbf0>)
 801c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c986:	f7e4 f8b9 	bl	8000afc <__aeabi_dcmplt>
 801c98a:	e7b4      	b.n	801c8f6 <_strtod_l+0xb1e>
 801c98c:	2300      	movs	r3, #0
 801c98e:	930e      	str	r3, [sp, #56]	; 0x38
 801c990:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c994:	6013      	str	r3, [r2, #0]
 801c996:	f7ff ba65 	b.w	801be64 <_strtod_l+0x8c>
 801c99a:	2b65      	cmp	r3, #101	; 0x65
 801c99c:	f43f ab5d 	beq.w	801c05a <_strtod_l+0x282>
 801c9a0:	2b45      	cmp	r3, #69	; 0x45
 801c9a2:	f43f ab5a 	beq.w	801c05a <_strtod_l+0x282>
 801c9a6:	2201      	movs	r2, #1
 801c9a8:	f7ff bb92 	b.w	801c0d0 <_strtod_l+0x2f8>
 801c9ac:	f3af 8000 	nop.w
 801c9b0:	94a03595 	.word	0x94a03595
 801c9b4:	3fdfffff 	.word	0x3fdfffff
 801c9b8:	35afe535 	.word	0x35afe535
 801c9bc:	3fe00000 	.word	0x3fe00000
 801c9c0:	ffc00000 	.word	0xffc00000
 801c9c4:	41dfffff 	.word	0x41dfffff
 801c9c8:	94a03595 	.word	0x94a03595
 801c9cc:	3fcfffff 	.word	0x3fcfffff
 801c9d0:	3ff00000 	.word	0x3ff00000
 801c9d4:	7ff00000 	.word	0x7ff00000
 801c9d8:	7fe00000 	.word	0x7fe00000
 801c9dc:	7c9fffff 	.word	0x7c9fffff
 801c9e0:	3fe00000 	.word	0x3fe00000
 801c9e4:	bff00000 	.word	0xbff00000
 801c9e8:	7fefffff 	.word	0x7fefffff

0801c9ec <_strtod_r>:
 801c9ec:	4b01      	ldr	r3, [pc, #4]	; (801c9f4 <_strtod_r+0x8>)
 801c9ee:	f7ff b9f3 	b.w	801bdd8 <_strtod_l>
 801c9f2:	bf00      	nop
 801c9f4:	20000260 	.word	0x20000260

0801c9f8 <_strtol_l.isra.0>:
 801c9f8:	2b01      	cmp	r3, #1
 801c9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9fe:	d001      	beq.n	801ca04 <_strtol_l.isra.0+0xc>
 801ca00:	2b24      	cmp	r3, #36	; 0x24
 801ca02:	d906      	bls.n	801ca12 <_strtol_l.isra.0+0x1a>
 801ca04:	f7fd ff4e 	bl	801a8a4 <__errno>
 801ca08:	2316      	movs	r3, #22
 801ca0a:	6003      	str	r3, [r0, #0]
 801ca0c:	2000      	movs	r0, #0
 801ca0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca12:	4f3a      	ldr	r7, [pc, #232]	; (801cafc <_strtol_l.isra.0+0x104>)
 801ca14:	468e      	mov	lr, r1
 801ca16:	4676      	mov	r6, lr
 801ca18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ca1c:	5de5      	ldrb	r5, [r4, r7]
 801ca1e:	f015 0508 	ands.w	r5, r5, #8
 801ca22:	d1f8      	bne.n	801ca16 <_strtol_l.isra.0+0x1e>
 801ca24:	2c2d      	cmp	r4, #45	; 0x2d
 801ca26:	d134      	bne.n	801ca92 <_strtol_l.isra.0+0x9a>
 801ca28:	f89e 4000 	ldrb.w	r4, [lr]
 801ca2c:	f04f 0801 	mov.w	r8, #1
 801ca30:	f106 0e02 	add.w	lr, r6, #2
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d05c      	beq.n	801caf2 <_strtol_l.isra.0+0xfa>
 801ca38:	2b10      	cmp	r3, #16
 801ca3a:	d10c      	bne.n	801ca56 <_strtol_l.isra.0+0x5e>
 801ca3c:	2c30      	cmp	r4, #48	; 0x30
 801ca3e:	d10a      	bne.n	801ca56 <_strtol_l.isra.0+0x5e>
 801ca40:	f89e 4000 	ldrb.w	r4, [lr]
 801ca44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ca48:	2c58      	cmp	r4, #88	; 0x58
 801ca4a:	d14d      	bne.n	801cae8 <_strtol_l.isra.0+0xf0>
 801ca4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ca50:	2310      	movs	r3, #16
 801ca52:	f10e 0e02 	add.w	lr, lr, #2
 801ca56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ca5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ca5e:	2600      	movs	r6, #0
 801ca60:	fbbc f9f3 	udiv	r9, ip, r3
 801ca64:	4635      	mov	r5, r6
 801ca66:	fb03 ca19 	mls	sl, r3, r9, ip
 801ca6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ca6e:	2f09      	cmp	r7, #9
 801ca70:	d818      	bhi.n	801caa4 <_strtol_l.isra.0+0xac>
 801ca72:	463c      	mov	r4, r7
 801ca74:	42a3      	cmp	r3, r4
 801ca76:	dd24      	ble.n	801cac2 <_strtol_l.isra.0+0xca>
 801ca78:	2e00      	cmp	r6, #0
 801ca7a:	db1f      	blt.n	801cabc <_strtol_l.isra.0+0xc4>
 801ca7c:	45a9      	cmp	r9, r5
 801ca7e:	d31d      	bcc.n	801cabc <_strtol_l.isra.0+0xc4>
 801ca80:	d101      	bne.n	801ca86 <_strtol_l.isra.0+0x8e>
 801ca82:	45a2      	cmp	sl, r4
 801ca84:	db1a      	blt.n	801cabc <_strtol_l.isra.0+0xc4>
 801ca86:	fb05 4503 	mla	r5, r5, r3, r4
 801ca8a:	2601      	movs	r6, #1
 801ca8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ca90:	e7eb      	b.n	801ca6a <_strtol_l.isra.0+0x72>
 801ca92:	2c2b      	cmp	r4, #43	; 0x2b
 801ca94:	bf08      	it	eq
 801ca96:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ca9a:	46a8      	mov	r8, r5
 801ca9c:	bf08      	it	eq
 801ca9e:	f106 0e02 	addeq.w	lr, r6, #2
 801caa2:	e7c7      	b.n	801ca34 <_strtol_l.isra.0+0x3c>
 801caa4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801caa8:	2f19      	cmp	r7, #25
 801caaa:	d801      	bhi.n	801cab0 <_strtol_l.isra.0+0xb8>
 801caac:	3c37      	subs	r4, #55	; 0x37
 801caae:	e7e1      	b.n	801ca74 <_strtol_l.isra.0+0x7c>
 801cab0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801cab4:	2f19      	cmp	r7, #25
 801cab6:	d804      	bhi.n	801cac2 <_strtol_l.isra.0+0xca>
 801cab8:	3c57      	subs	r4, #87	; 0x57
 801caba:	e7db      	b.n	801ca74 <_strtol_l.isra.0+0x7c>
 801cabc:	f04f 36ff 	mov.w	r6, #4294967295
 801cac0:	e7e4      	b.n	801ca8c <_strtol_l.isra.0+0x94>
 801cac2:	2e00      	cmp	r6, #0
 801cac4:	da05      	bge.n	801cad2 <_strtol_l.isra.0+0xda>
 801cac6:	2322      	movs	r3, #34	; 0x22
 801cac8:	6003      	str	r3, [r0, #0]
 801caca:	4665      	mov	r5, ip
 801cacc:	b942      	cbnz	r2, 801cae0 <_strtol_l.isra.0+0xe8>
 801cace:	4628      	mov	r0, r5
 801cad0:	e79d      	b.n	801ca0e <_strtol_l.isra.0+0x16>
 801cad2:	f1b8 0f00 	cmp.w	r8, #0
 801cad6:	d000      	beq.n	801cada <_strtol_l.isra.0+0xe2>
 801cad8:	426d      	negs	r5, r5
 801cada:	2a00      	cmp	r2, #0
 801cadc:	d0f7      	beq.n	801cace <_strtol_l.isra.0+0xd6>
 801cade:	b10e      	cbz	r6, 801cae4 <_strtol_l.isra.0+0xec>
 801cae0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801cae4:	6011      	str	r1, [r2, #0]
 801cae6:	e7f2      	b.n	801cace <_strtol_l.isra.0+0xd6>
 801cae8:	2430      	movs	r4, #48	; 0x30
 801caea:	2b00      	cmp	r3, #0
 801caec:	d1b3      	bne.n	801ca56 <_strtol_l.isra.0+0x5e>
 801caee:	2308      	movs	r3, #8
 801caf0:	e7b1      	b.n	801ca56 <_strtol_l.isra.0+0x5e>
 801caf2:	2c30      	cmp	r4, #48	; 0x30
 801caf4:	d0a4      	beq.n	801ca40 <_strtol_l.isra.0+0x48>
 801caf6:	230a      	movs	r3, #10
 801caf8:	e7ad      	b.n	801ca56 <_strtol_l.isra.0+0x5e>
 801cafa:	bf00      	nop
 801cafc:	08021ad9 	.word	0x08021ad9

0801cb00 <_strtol_r>:
 801cb00:	f7ff bf7a 	b.w	801c9f8 <_strtol_l.isra.0>

0801cb04 <strtol>:
 801cb04:	4613      	mov	r3, r2
 801cb06:	460a      	mov	r2, r1
 801cb08:	4601      	mov	r1, r0
 801cb0a:	4802      	ldr	r0, [pc, #8]	; (801cb14 <strtol+0x10>)
 801cb0c:	6800      	ldr	r0, [r0, #0]
 801cb0e:	f7ff bf73 	b.w	801c9f8 <_strtol_l.isra.0>
 801cb12:	bf00      	nop
 801cb14:	200001f8 	.word	0x200001f8

0801cb18 <_strtoul_l.isra.0>:
 801cb18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb1c:	4e3b      	ldr	r6, [pc, #236]	; (801cc0c <_strtoul_l.isra.0+0xf4>)
 801cb1e:	4686      	mov	lr, r0
 801cb20:	468c      	mov	ip, r1
 801cb22:	4660      	mov	r0, ip
 801cb24:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801cb28:	5da5      	ldrb	r5, [r4, r6]
 801cb2a:	f015 0508 	ands.w	r5, r5, #8
 801cb2e:	d1f8      	bne.n	801cb22 <_strtoul_l.isra.0+0xa>
 801cb30:	2c2d      	cmp	r4, #45	; 0x2d
 801cb32:	d134      	bne.n	801cb9e <_strtoul_l.isra.0+0x86>
 801cb34:	f89c 4000 	ldrb.w	r4, [ip]
 801cb38:	f04f 0801 	mov.w	r8, #1
 801cb3c:	f100 0c02 	add.w	ip, r0, #2
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d05e      	beq.n	801cc02 <_strtoul_l.isra.0+0xea>
 801cb44:	2b10      	cmp	r3, #16
 801cb46:	d10c      	bne.n	801cb62 <_strtoul_l.isra.0+0x4a>
 801cb48:	2c30      	cmp	r4, #48	; 0x30
 801cb4a:	d10a      	bne.n	801cb62 <_strtoul_l.isra.0+0x4a>
 801cb4c:	f89c 0000 	ldrb.w	r0, [ip]
 801cb50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801cb54:	2858      	cmp	r0, #88	; 0x58
 801cb56:	d14f      	bne.n	801cbf8 <_strtoul_l.isra.0+0xe0>
 801cb58:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801cb5c:	2310      	movs	r3, #16
 801cb5e:	f10c 0c02 	add.w	ip, ip, #2
 801cb62:	f04f 37ff 	mov.w	r7, #4294967295
 801cb66:	2500      	movs	r5, #0
 801cb68:	fbb7 f7f3 	udiv	r7, r7, r3
 801cb6c:	fb03 f907 	mul.w	r9, r3, r7
 801cb70:	ea6f 0909 	mvn.w	r9, r9
 801cb74:	4628      	mov	r0, r5
 801cb76:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801cb7a:	2e09      	cmp	r6, #9
 801cb7c:	d818      	bhi.n	801cbb0 <_strtoul_l.isra.0+0x98>
 801cb7e:	4634      	mov	r4, r6
 801cb80:	42a3      	cmp	r3, r4
 801cb82:	dd24      	ble.n	801cbce <_strtoul_l.isra.0+0xb6>
 801cb84:	2d00      	cmp	r5, #0
 801cb86:	db1f      	blt.n	801cbc8 <_strtoul_l.isra.0+0xb0>
 801cb88:	4287      	cmp	r7, r0
 801cb8a:	d31d      	bcc.n	801cbc8 <_strtoul_l.isra.0+0xb0>
 801cb8c:	d101      	bne.n	801cb92 <_strtoul_l.isra.0+0x7a>
 801cb8e:	45a1      	cmp	r9, r4
 801cb90:	db1a      	blt.n	801cbc8 <_strtoul_l.isra.0+0xb0>
 801cb92:	fb00 4003 	mla	r0, r0, r3, r4
 801cb96:	2501      	movs	r5, #1
 801cb98:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801cb9c:	e7eb      	b.n	801cb76 <_strtoul_l.isra.0+0x5e>
 801cb9e:	2c2b      	cmp	r4, #43	; 0x2b
 801cba0:	bf08      	it	eq
 801cba2:	f89c 4000 	ldrbeq.w	r4, [ip]
 801cba6:	46a8      	mov	r8, r5
 801cba8:	bf08      	it	eq
 801cbaa:	f100 0c02 	addeq.w	ip, r0, #2
 801cbae:	e7c7      	b.n	801cb40 <_strtoul_l.isra.0+0x28>
 801cbb0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801cbb4:	2e19      	cmp	r6, #25
 801cbb6:	d801      	bhi.n	801cbbc <_strtoul_l.isra.0+0xa4>
 801cbb8:	3c37      	subs	r4, #55	; 0x37
 801cbba:	e7e1      	b.n	801cb80 <_strtoul_l.isra.0+0x68>
 801cbbc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801cbc0:	2e19      	cmp	r6, #25
 801cbc2:	d804      	bhi.n	801cbce <_strtoul_l.isra.0+0xb6>
 801cbc4:	3c57      	subs	r4, #87	; 0x57
 801cbc6:	e7db      	b.n	801cb80 <_strtoul_l.isra.0+0x68>
 801cbc8:	f04f 35ff 	mov.w	r5, #4294967295
 801cbcc:	e7e4      	b.n	801cb98 <_strtoul_l.isra.0+0x80>
 801cbce:	2d00      	cmp	r5, #0
 801cbd0:	da07      	bge.n	801cbe2 <_strtoul_l.isra.0+0xca>
 801cbd2:	2322      	movs	r3, #34	; 0x22
 801cbd4:	f8ce 3000 	str.w	r3, [lr]
 801cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbdc:	b942      	cbnz	r2, 801cbf0 <_strtoul_l.isra.0+0xd8>
 801cbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbe2:	f1b8 0f00 	cmp.w	r8, #0
 801cbe6:	d000      	beq.n	801cbea <_strtoul_l.isra.0+0xd2>
 801cbe8:	4240      	negs	r0, r0
 801cbea:	2a00      	cmp	r2, #0
 801cbec:	d0f7      	beq.n	801cbde <_strtoul_l.isra.0+0xc6>
 801cbee:	b10d      	cbz	r5, 801cbf4 <_strtoul_l.isra.0+0xdc>
 801cbf0:	f10c 31ff 	add.w	r1, ip, #4294967295
 801cbf4:	6011      	str	r1, [r2, #0]
 801cbf6:	e7f2      	b.n	801cbde <_strtoul_l.isra.0+0xc6>
 801cbf8:	2430      	movs	r4, #48	; 0x30
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d1b1      	bne.n	801cb62 <_strtoul_l.isra.0+0x4a>
 801cbfe:	2308      	movs	r3, #8
 801cc00:	e7af      	b.n	801cb62 <_strtoul_l.isra.0+0x4a>
 801cc02:	2c30      	cmp	r4, #48	; 0x30
 801cc04:	d0a2      	beq.n	801cb4c <_strtoul_l.isra.0+0x34>
 801cc06:	230a      	movs	r3, #10
 801cc08:	e7ab      	b.n	801cb62 <_strtoul_l.isra.0+0x4a>
 801cc0a:	bf00      	nop
 801cc0c:	08021ad9 	.word	0x08021ad9

0801cc10 <_strtoul_r>:
 801cc10:	f7ff bf82 	b.w	801cb18 <_strtoul_l.isra.0>

0801cc14 <strtoul>:
 801cc14:	4613      	mov	r3, r2
 801cc16:	460a      	mov	r2, r1
 801cc18:	4601      	mov	r1, r0
 801cc1a:	4802      	ldr	r0, [pc, #8]	; (801cc24 <strtoul+0x10>)
 801cc1c:	6800      	ldr	r0, [r0, #0]
 801cc1e:	f7ff bf7b 	b.w	801cb18 <_strtoul_l.isra.0>
 801cc22:	bf00      	nop
 801cc24:	200001f8 	.word	0x200001f8

0801cc28 <_vsniprintf_r>:
 801cc28:	b530      	push	{r4, r5, lr}
 801cc2a:	1e14      	subs	r4, r2, #0
 801cc2c:	4605      	mov	r5, r0
 801cc2e:	b09b      	sub	sp, #108	; 0x6c
 801cc30:	4618      	mov	r0, r3
 801cc32:	da05      	bge.n	801cc40 <_vsniprintf_r+0x18>
 801cc34:	238b      	movs	r3, #139	; 0x8b
 801cc36:	602b      	str	r3, [r5, #0]
 801cc38:	f04f 30ff 	mov.w	r0, #4294967295
 801cc3c:	b01b      	add	sp, #108	; 0x6c
 801cc3e:	bd30      	pop	{r4, r5, pc}
 801cc40:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cc44:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cc48:	bf14      	ite	ne
 801cc4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cc4e:	4623      	moveq	r3, r4
 801cc50:	9302      	str	r3, [sp, #8]
 801cc52:	9305      	str	r3, [sp, #20]
 801cc54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc58:	9100      	str	r1, [sp, #0]
 801cc5a:	9104      	str	r1, [sp, #16]
 801cc5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cc60:	4602      	mov	r2, r0
 801cc62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cc64:	4669      	mov	r1, sp
 801cc66:	4628      	mov	r0, r5
 801cc68:	f002 f9ba 	bl	801efe0 <_svfiprintf_r>
 801cc6c:	1c43      	adds	r3, r0, #1
 801cc6e:	bfbc      	itt	lt
 801cc70:	238b      	movlt	r3, #139	; 0x8b
 801cc72:	602b      	strlt	r3, [r5, #0]
 801cc74:	2c00      	cmp	r4, #0
 801cc76:	d0e1      	beq.n	801cc3c <_vsniprintf_r+0x14>
 801cc78:	9b00      	ldr	r3, [sp, #0]
 801cc7a:	2200      	movs	r2, #0
 801cc7c:	701a      	strb	r2, [r3, #0]
 801cc7e:	e7dd      	b.n	801cc3c <_vsniprintf_r+0x14>

0801cc80 <vsniprintf>:
 801cc80:	b507      	push	{r0, r1, r2, lr}
 801cc82:	9300      	str	r3, [sp, #0]
 801cc84:	4613      	mov	r3, r2
 801cc86:	460a      	mov	r2, r1
 801cc88:	4601      	mov	r1, r0
 801cc8a:	4803      	ldr	r0, [pc, #12]	; (801cc98 <vsniprintf+0x18>)
 801cc8c:	6800      	ldr	r0, [r0, #0]
 801cc8e:	f7ff ffcb 	bl	801cc28 <_vsniprintf_r>
 801cc92:	b003      	add	sp, #12
 801cc94:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc98:	200001f8 	.word	0x200001f8

0801cc9c <__swbuf_r>:
 801cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc9e:	460e      	mov	r6, r1
 801cca0:	4614      	mov	r4, r2
 801cca2:	4605      	mov	r5, r0
 801cca4:	b118      	cbz	r0, 801ccae <__swbuf_r+0x12>
 801cca6:	6983      	ldr	r3, [r0, #24]
 801cca8:	b90b      	cbnz	r3, 801ccae <__swbuf_r+0x12>
 801ccaa:	f7fd fe59 	bl	801a960 <__sinit>
 801ccae:	4b21      	ldr	r3, [pc, #132]	; (801cd34 <__swbuf_r+0x98>)
 801ccb0:	429c      	cmp	r4, r3
 801ccb2:	d12b      	bne.n	801cd0c <__swbuf_r+0x70>
 801ccb4:	686c      	ldr	r4, [r5, #4]
 801ccb6:	69a3      	ldr	r3, [r4, #24]
 801ccb8:	60a3      	str	r3, [r4, #8]
 801ccba:	89a3      	ldrh	r3, [r4, #12]
 801ccbc:	071a      	lsls	r2, r3, #28
 801ccbe:	d52f      	bpl.n	801cd20 <__swbuf_r+0x84>
 801ccc0:	6923      	ldr	r3, [r4, #16]
 801ccc2:	b36b      	cbz	r3, 801cd20 <__swbuf_r+0x84>
 801ccc4:	6923      	ldr	r3, [r4, #16]
 801ccc6:	6820      	ldr	r0, [r4, #0]
 801ccc8:	1ac0      	subs	r0, r0, r3
 801ccca:	6963      	ldr	r3, [r4, #20]
 801cccc:	b2f6      	uxtb	r6, r6
 801ccce:	4283      	cmp	r3, r0
 801ccd0:	4637      	mov	r7, r6
 801ccd2:	dc04      	bgt.n	801ccde <__swbuf_r+0x42>
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	4628      	mov	r0, r5
 801ccd8:	f000 ffe0 	bl	801dc9c <_fflush_r>
 801ccdc:	bb30      	cbnz	r0, 801cd2c <__swbuf_r+0x90>
 801ccde:	68a3      	ldr	r3, [r4, #8]
 801cce0:	3b01      	subs	r3, #1
 801cce2:	60a3      	str	r3, [r4, #8]
 801cce4:	6823      	ldr	r3, [r4, #0]
 801cce6:	1c5a      	adds	r2, r3, #1
 801cce8:	6022      	str	r2, [r4, #0]
 801ccea:	701e      	strb	r6, [r3, #0]
 801ccec:	6963      	ldr	r3, [r4, #20]
 801ccee:	3001      	adds	r0, #1
 801ccf0:	4283      	cmp	r3, r0
 801ccf2:	d004      	beq.n	801ccfe <__swbuf_r+0x62>
 801ccf4:	89a3      	ldrh	r3, [r4, #12]
 801ccf6:	07db      	lsls	r3, r3, #31
 801ccf8:	d506      	bpl.n	801cd08 <__swbuf_r+0x6c>
 801ccfa:	2e0a      	cmp	r6, #10
 801ccfc:	d104      	bne.n	801cd08 <__swbuf_r+0x6c>
 801ccfe:	4621      	mov	r1, r4
 801cd00:	4628      	mov	r0, r5
 801cd02:	f000 ffcb 	bl	801dc9c <_fflush_r>
 801cd06:	b988      	cbnz	r0, 801cd2c <__swbuf_r+0x90>
 801cd08:	4638      	mov	r0, r7
 801cd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd0c:	4b0a      	ldr	r3, [pc, #40]	; (801cd38 <__swbuf_r+0x9c>)
 801cd0e:	429c      	cmp	r4, r3
 801cd10:	d101      	bne.n	801cd16 <__swbuf_r+0x7a>
 801cd12:	68ac      	ldr	r4, [r5, #8]
 801cd14:	e7cf      	b.n	801ccb6 <__swbuf_r+0x1a>
 801cd16:	4b09      	ldr	r3, [pc, #36]	; (801cd3c <__swbuf_r+0xa0>)
 801cd18:	429c      	cmp	r4, r3
 801cd1a:	bf08      	it	eq
 801cd1c:	68ec      	ldreq	r4, [r5, #12]
 801cd1e:	e7ca      	b.n	801ccb6 <__swbuf_r+0x1a>
 801cd20:	4621      	mov	r1, r4
 801cd22:	4628      	mov	r0, r5
 801cd24:	f000 f81e 	bl	801cd64 <__swsetup_r>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	d0cb      	beq.n	801ccc4 <__swbuf_r+0x28>
 801cd2c:	f04f 37ff 	mov.w	r7, #4294967295
 801cd30:	e7ea      	b.n	801cd08 <__swbuf_r+0x6c>
 801cd32:	bf00      	nop
 801cd34:	08021bfc 	.word	0x08021bfc
 801cd38:	08021c1c 	.word	0x08021c1c
 801cd3c:	08021bdc 	.word	0x08021bdc

0801cd40 <_write_r>:
 801cd40:	b538      	push	{r3, r4, r5, lr}
 801cd42:	4d07      	ldr	r5, [pc, #28]	; (801cd60 <_write_r+0x20>)
 801cd44:	4604      	mov	r4, r0
 801cd46:	4608      	mov	r0, r1
 801cd48:	4611      	mov	r1, r2
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	602a      	str	r2, [r5, #0]
 801cd4e:	461a      	mov	r2, r3
 801cd50:	f7e6 fa31 	bl	80031b6 <_write>
 801cd54:	1c43      	adds	r3, r0, #1
 801cd56:	d102      	bne.n	801cd5e <_write_r+0x1e>
 801cd58:	682b      	ldr	r3, [r5, #0]
 801cd5a:	b103      	cbz	r3, 801cd5e <_write_r+0x1e>
 801cd5c:	6023      	str	r3, [r4, #0]
 801cd5e:	bd38      	pop	{r3, r4, r5, pc}
 801cd60:	20008fb0 	.word	0x20008fb0

0801cd64 <__swsetup_r>:
 801cd64:	4b32      	ldr	r3, [pc, #200]	; (801ce30 <__swsetup_r+0xcc>)
 801cd66:	b570      	push	{r4, r5, r6, lr}
 801cd68:	681d      	ldr	r5, [r3, #0]
 801cd6a:	4606      	mov	r6, r0
 801cd6c:	460c      	mov	r4, r1
 801cd6e:	b125      	cbz	r5, 801cd7a <__swsetup_r+0x16>
 801cd70:	69ab      	ldr	r3, [r5, #24]
 801cd72:	b913      	cbnz	r3, 801cd7a <__swsetup_r+0x16>
 801cd74:	4628      	mov	r0, r5
 801cd76:	f7fd fdf3 	bl	801a960 <__sinit>
 801cd7a:	4b2e      	ldr	r3, [pc, #184]	; (801ce34 <__swsetup_r+0xd0>)
 801cd7c:	429c      	cmp	r4, r3
 801cd7e:	d10f      	bne.n	801cda0 <__swsetup_r+0x3c>
 801cd80:	686c      	ldr	r4, [r5, #4]
 801cd82:	89a3      	ldrh	r3, [r4, #12]
 801cd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cd88:	0719      	lsls	r1, r3, #28
 801cd8a:	d42c      	bmi.n	801cde6 <__swsetup_r+0x82>
 801cd8c:	06dd      	lsls	r5, r3, #27
 801cd8e:	d411      	bmi.n	801cdb4 <__swsetup_r+0x50>
 801cd90:	2309      	movs	r3, #9
 801cd92:	6033      	str	r3, [r6, #0]
 801cd94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cd98:	81a3      	strh	r3, [r4, #12]
 801cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 801cd9e:	e03e      	b.n	801ce1e <__swsetup_r+0xba>
 801cda0:	4b25      	ldr	r3, [pc, #148]	; (801ce38 <__swsetup_r+0xd4>)
 801cda2:	429c      	cmp	r4, r3
 801cda4:	d101      	bne.n	801cdaa <__swsetup_r+0x46>
 801cda6:	68ac      	ldr	r4, [r5, #8]
 801cda8:	e7eb      	b.n	801cd82 <__swsetup_r+0x1e>
 801cdaa:	4b24      	ldr	r3, [pc, #144]	; (801ce3c <__swsetup_r+0xd8>)
 801cdac:	429c      	cmp	r4, r3
 801cdae:	bf08      	it	eq
 801cdb0:	68ec      	ldreq	r4, [r5, #12]
 801cdb2:	e7e6      	b.n	801cd82 <__swsetup_r+0x1e>
 801cdb4:	0758      	lsls	r0, r3, #29
 801cdb6:	d512      	bpl.n	801cdde <__swsetup_r+0x7a>
 801cdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cdba:	b141      	cbz	r1, 801cdce <__swsetup_r+0x6a>
 801cdbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cdc0:	4299      	cmp	r1, r3
 801cdc2:	d002      	beq.n	801cdca <__swsetup_r+0x66>
 801cdc4:	4630      	mov	r0, r6
 801cdc6:	f7fd fec9 	bl	801ab5c <_free_r>
 801cdca:	2300      	movs	r3, #0
 801cdcc:	6363      	str	r3, [r4, #52]	; 0x34
 801cdce:	89a3      	ldrh	r3, [r4, #12]
 801cdd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cdd4:	81a3      	strh	r3, [r4, #12]
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	6063      	str	r3, [r4, #4]
 801cdda:	6923      	ldr	r3, [r4, #16]
 801cddc:	6023      	str	r3, [r4, #0]
 801cdde:	89a3      	ldrh	r3, [r4, #12]
 801cde0:	f043 0308 	orr.w	r3, r3, #8
 801cde4:	81a3      	strh	r3, [r4, #12]
 801cde6:	6923      	ldr	r3, [r4, #16]
 801cde8:	b94b      	cbnz	r3, 801cdfe <__swsetup_r+0x9a>
 801cdea:	89a3      	ldrh	r3, [r4, #12]
 801cdec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdf4:	d003      	beq.n	801cdfe <__swsetup_r+0x9a>
 801cdf6:	4621      	mov	r1, r4
 801cdf8:	4630      	mov	r0, r6
 801cdfa:	f001 fb47 	bl	801e48c <__smakebuf_r>
 801cdfe:	89a0      	ldrh	r0, [r4, #12]
 801ce00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ce04:	f010 0301 	ands.w	r3, r0, #1
 801ce08:	d00a      	beq.n	801ce20 <__swsetup_r+0xbc>
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	60a3      	str	r3, [r4, #8]
 801ce0e:	6963      	ldr	r3, [r4, #20]
 801ce10:	425b      	negs	r3, r3
 801ce12:	61a3      	str	r3, [r4, #24]
 801ce14:	6923      	ldr	r3, [r4, #16]
 801ce16:	b943      	cbnz	r3, 801ce2a <__swsetup_r+0xc6>
 801ce18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ce1c:	d1ba      	bne.n	801cd94 <__swsetup_r+0x30>
 801ce1e:	bd70      	pop	{r4, r5, r6, pc}
 801ce20:	0781      	lsls	r1, r0, #30
 801ce22:	bf58      	it	pl
 801ce24:	6963      	ldrpl	r3, [r4, #20]
 801ce26:	60a3      	str	r3, [r4, #8]
 801ce28:	e7f4      	b.n	801ce14 <__swsetup_r+0xb0>
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	e7f7      	b.n	801ce1e <__swsetup_r+0xba>
 801ce2e:	bf00      	nop
 801ce30:	200001f8 	.word	0x200001f8
 801ce34:	08021bfc 	.word	0x08021bfc
 801ce38:	08021c1c 	.word	0x08021c1c
 801ce3c:	08021bdc 	.word	0x08021bdc

0801ce40 <__assert_func>:
 801ce40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce42:	4614      	mov	r4, r2
 801ce44:	461a      	mov	r2, r3
 801ce46:	4b09      	ldr	r3, [pc, #36]	; (801ce6c <__assert_func+0x2c>)
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	4605      	mov	r5, r0
 801ce4c:	68d8      	ldr	r0, [r3, #12]
 801ce4e:	b14c      	cbz	r4, 801ce64 <__assert_func+0x24>
 801ce50:	4b07      	ldr	r3, [pc, #28]	; (801ce70 <__assert_func+0x30>)
 801ce52:	9100      	str	r1, [sp, #0]
 801ce54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ce58:	4906      	ldr	r1, [pc, #24]	; (801ce74 <__assert_func+0x34>)
 801ce5a:	462b      	mov	r3, r5
 801ce5c:	f000 ff5a 	bl	801dd14 <fiprintf>
 801ce60:	f7fd fd18 	bl	801a894 <abort>
 801ce64:	4b04      	ldr	r3, [pc, #16]	; (801ce78 <__assert_func+0x38>)
 801ce66:	461c      	mov	r4, r3
 801ce68:	e7f3      	b.n	801ce52 <__assert_func+0x12>
 801ce6a:	bf00      	nop
 801ce6c:	200001f8 	.word	0x200001f8
 801ce70:	08021cc8 	.word	0x08021cc8
 801ce74:	08021cd5 	.word	0x08021cd5
 801ce78:	08021d03 	.word	0x08021d03

0801ce7c <_close_r>:
 801ce7c:	b538      	push	{r3, r4, r5, lr}
 801ce7e:	4d06      	ldr	r5, [pc, #24]	; (801ce98 <_close_r+0x1c>)
 801ce80:	2300      	movs	r3, #0
 801ce82:	4604      	mov	r4, r0
 801ce84:	4608      	mov	r0, r1
 801ce86:	602b      	str	r3, [r5, #0]
 801ce88:	f7e6 f9b1 	bl	80031ee <_close>
 801ce8c:	1c43      	adds	r3, r0, #1
 801ce8e:	d102      	bne.n	801ce96 <_close_r+0x1a>
 801ce90:	682b      	ldr	r3, [r5, #0]
 801ce92:	b103      	cbz	r3, 801ce96 <_close_r+0x1a>
 801ce94:	6023      	str	r3, [r4, #0]
 801ce96:	bd38      	pop	{r3, r4, r5, pc}
 801ce98:	20008fb0 	.word	0x20008fb0

0801ce9c <quorem>:
 801ce9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cea0:	6903      	ldr	r3, [r0, #16]
 801cea2:	690c      	ldr	r4, [r1, #16]
 801cea4:	42a3      	cmp	r3, r4
 801cea6:	4607      	mov	r7, r0
 801cea8:	f2c0 8081 	blt.w	801cfae <quorem+0x112>
 801ceac:	3c01      	subs	r4, #1
 801ceae:	f101 0814 	add.w	r8, r1, #20
 801ceb2:	f100 0514 	add.w	r5, r0, #20
 801ceb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ceba:	9301      	str	r3, [sp, #4]
 801cebc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cec4:	3301      	adds	r3, #1
 801cec6:	429a      	cmp	r2, r3
 801cec8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cecc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ced0:	fbb2 f6f3 	udiv	r6, r2, r3
 801ced4:	d331      	bcc.n	801cf3a <quorem+0x9e>
 801ced6:	f04f 0e00 	mov.w	lr, #0
 801ceda:	4640      	mov	r0, r8
 801cedc:	46ac      	mov	ip, r5
 801cede:	46f2      	mov	sl, lr
 801cee0:	f850 2b04 	ldr.w	r2, [r0], #4
 801cee4:	b293      	uxth	r3, r2
 801cee6:	fb06 e303 	mla	r3, r6, r3, lr
 801ceea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ceee:	b29b      	uxth	r3, r3
 801cef0:	ebaa 0303 	sub.w	r3, sl, r3
 801cef4:	0c12      	lsrs	r2, r2, #16
 801cef6:	f8dc a000 	ldr.w	sl, [ip]
 801cefa:	fb06 e202 	mla	r2, r6, r2, lr
 801cefe:	fa13 f38a 	uxtah	r3, r3, sl
 801cf02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cf06:	fa1f fa82 	uxth.w	sl, r2
 801cf0a:	f8dc 2000 	ldr.w	r2, [ip]
 801cf0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cf12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf16:	b29b      	uxth	r3, r3
 801cf18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf1c:	4581      	cmp	r9, r0
 801cf1e:	f84c 3b04 	str.w	r3, [ip], #4
 801cf22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cf26:	d2db      	bcs.n	801cee0 <quorem+0x44>
 801cf28:	f855 300b 	ldr.w	r3, [r5, fp]
 801cf2c:	b92b      	cbnz	r3, 801cf3a <quorem+0x9e>
 801cf2e:	9b01      	ldr	r3, [sp, #4]
 801cf30:	3b04      	subs	r3, #4
 801cf32:	429d      	cmp	r5, r3
 801cf34:	461a      	mov	r2, r3
 801cf36:	d32e      	bcc.n	801cf96 <quorem+0xfa>
 801cf38:	613c      	str	r4, [r7, #16]
 801cf3a:	4638      	mov	r0, r7
 801cf3c:	f001 fdcc 	bl	801ead8 <__mcmp>
 801cf40:	2800      	cmp	r0, #0
 801cf42:	db24      	blt.n	801cf8e <quorem+0xf2>
 801cf44:	3601      	adds	r6, #1
 801cf46:	4628      	mov	r0, r5
 801cf48:	f04f 0c00 	mov.w	ip, #0
 801cf4c:	f858 2b04 	ldr.w	r2, [r8], #4
 801cf50:	f8d0 e000 	ldr.w	lr, [r0]
 801cf54:	b293      	uxth	r3, r2
 801cf56:	ebac 0303 	sub.w	r3, ip, r3
 801cf5a:	0c12      	lsrs	r2, r2, #16
 801cf5c:	fa13 f38e 	uxtah	r3, r3, lr
 801cf60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cf64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf68:	b29b      	uxth	r3, r3
 801cf6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf6e:	45c1      	cmp	r9, r8
 801cf70:	f840 3b04 	str.w	r3, [r0], #4
 801cf74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cf78:	d2e8      	bcs.n	801cf4c <quorem+0xb0>
 801cf7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf82:	b922      	cbnz	r2, 801cf8e <quorem+0xf2>
 801cf84:	3b04      	subs	r3, #4
 801cf86:	429d      	cmp	r5, r3
 801cf88:	461a      	mov	r2, r3
 801cf8a:	d30a      	bcc.n	801cfa2 <quorem+0x106>
 801cf8c:	613c      	str	r4, [r7, #16]
 801cf8e:	4630      	mov	r0, r6
 801cf90:	b003      	add	sp, #12
 801cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf96:	6812      	ldr	r2, [r2, #0]
 801cf98:	3b04      	subs	r3, #4
 801cf9a:	2a00      	cmp	r2, #0
 801cf9c:	d1cc      	bne.n	801cf38 <quorem+0x9c>
 801cf9e:	3c01      	subs	r4, #1
 801cfa0:	e7c7      	b.n	801cf32 <quorem+0x96>
 801cfa2:	6812      	ldr	r2, [r2, #0]
 801cfa4:	3b04      	subs	r3, #4
 801cfa6:	2a00      	cmp	r2, #0
 801cfa8:	d1f0      	bne.n	801cf8c <quorem+0xf0>
 801cfaa:	3c01      	subs	r4, #1
 801cfac:	e7eb      	b.n	801cf86 <quorem+0xea>
 801cfae:	2000      	movs	r0, #0
 801cfb0:	e7ee      	b.n	801cf90 <quorem+0xf4>
 801cfb2:	0000      	movs	r0, r0
 801cfb4:	0000      	movs	r0, r0
	...

0801cfb8 <_dtoa_r>:
 801cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfbc:	ed2d 8b02 	vpush	{d8}
 801cfc0:	ec57 6b10 	vmov	r6, r7, d0
 801cfc4:	b095      	sub	sp, #84	; 0x54
 801cfc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cfc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801cfcc:	9105      	str	r1, [sp, #20]
 801cfce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	9209      	str	r2, [sp, #36]	; 0x24
 801cfd6:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfd8:	b975      	cbnz	r5, 801cff8 <_dtoa_r+0x40>
 801cfda:	2010      	movs	r0, #16
 801cfdc:	f7fd fd86 	bl	801aaec <malloc>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	6260      	str	r0, [r4, #36]	; 0x24
 801cfe4:	b920      	cbnz	r0, 801cff0 <_dtoa_r+0x38>
 801cfe6:	4bb2      	ldr	r3, [pc, #712]	; (801d2b0 <_dtoa_r+0x2f8>)
 801cfe8:	21ea      	movs	r1, #234	; 0xea
 801cfea:	48b2      	ldr	r0, [pc, #712]	; (801d2b4 <_dtoa_r+0x2fc>)
 801cfec:	f7ff ff28 	bl	801ce40 <__assert_func>
 801cff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cff4:	6005      	str	r5, [r0, #0]
 801cff6:	60c5      	str	r5, [r0, #12]
 801cff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cffa:	6819      	ldr	r1, [r3, #0]
 801cffc:	b151      	cbz	r1, 801d014 <_dtoa_r+0x5c>
 801cffe:	685a      	ldr	r2, [r3, #4]
 801d000:	604a      	str	r2, [r1, #4]
 801d002:	2301      	movs	r3, #1
 801d004:	4093      	lsls	r3, r2
 801d006:	608b      	str	r3, [r1, #8]
 801d008:	4620      	mov	r0, r4
 801d00a:	f001 fadd 	bl	801e5c8 <_Bfree>
 801d00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d010:	2200      	movs	r2, #0
 801d012:	601a      	str	r2, [r3, #0]
 801d014:	1e3b      	subs	r3, r7, #0
 801d016:	bfb9      	ittee	lt
 801d018:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d01c:	9303      	strlt	r3, [sp, #12]
 801d01e:	2300      	movge	r3, #0
 801d020:	f8c8 3000 	strge.w	r3, [r8]
 801d024:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d028:	4ba3      	ldr	r3, [pc, #652]	; (801d2b8 <_dtoa_r+0x300>)
 801d02a:	bfbc      	itt	lt
 801d02c:	2201      	movlt	r2, #1
 801d02e:	f8c8 2000 	strlt.w	r2, [r8]
 801d032:	ea33 0309 	bics.w	r3, r3, r9
 801d036:	d11b      	bne.n	801d070 <_dtoa_r+0xb8>
 801d038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d03a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d03e:	6013      	str	r3, [r2, #0]
 801d040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d044:	4333      	orrs	r3, r6
 801d046:	f000 857a 	beq.w	801db3e <_dtoa_r+0xb86>
 801d04a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d04c:	b963      	cbnz	r3, 801d068 <_dtoa_r+0xb0>
 801d04e:	4b9b      	ldr	r3, [pc, #620]	; (801d2bc <_dtoa_r+0x304>)
 801d050:	e024      	b.n	801d09c <_dtoa_r+0xe4>
 801d052:	4b9b      	ldr	r3, [pc, #620]	; (801d2c0 <_dtoa_r+0x308>)
 801d054:	9300      	str	r3, [sp, #0]
 801d056:	3308      	adds	r3, #8
 801d058:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d05a:	6013      	str	r3, [r2, #0]
 801d05c:	9800      	ldr	r0, [sp, #0]
 801d05e:	b015      	add	sp, #84	; 0x54
 801d060:	ecbd 8b02 	vpop	{d8}
 801d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d068:	4b94      	ldr	r3, [pc, #592]	; (801d2bc <_dtoa_r+0x304>)
 801d06a:	9300      	str	r3, [sp, #0]
 801d06c:	3303      	adds	r3, #3
 801d06e:	e7f3      	b.n	801d058 <_dtoa_r+0xa0>
 801d070:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d074:	2200      	movs	r2, #0
 801d076:	ec51 0b17 	vmov	r0, r1, d7
 801d07a:	2300      	movs	r3, #0
 801d07c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d080:	f7e3 fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 801d084:	4680      	mov	r8, r0
 801d086:	b158      	cbz	r0, 801d0a0 <_dtoa_r+0xe8>
 801d088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d08a:	2301      	movs	r3, #1
 801d08c:	6013      	str	r3, [r2, #0]
 801d08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d090:	2b00      	cmp	r3, #0
 801d092:	f000 8551 	beq.w	801db38 <_dtoa_r+0xb80>
 801d096:	488b      	ldr	r0, [pc, #556]	; (801d2c4 <_dtoa_r+0x30c>)
 801d098:	6018      	str	r0, [r3, #0]
 801d09a:	1e43      	subs	r3, r0, #1
 801d09c:	9300      	str	r3, [sp, #0]
 801d09e:	e7dd      	b.n	801d05c <_dtoa_r+0xa4>
 801d0a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d0a4:	aa12      	add	r2, sp, #72	; 0x48
 801d0a6:	a913      	add	r1, sp, #76	; 0x4c
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	f001 fe35 	bl	801ed18 <__d2b>
 801d0ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d0b2:	4683      	mov	fp, r0
 801d0b4:	2d00      	cmp	r5, #0
 801d0b6:	d07c      	beq.n	801d1b2 <_dtoa_r+0x1fa>
 801d0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801d0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801d0c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d0ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d0d2:	4b7d      	ldr	r3, [pc, #500]	; (801d2c8 <_dtoa_r+0x310>)
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	4630      	mov	r0, r6
 801d0d8:	4639      	mov	r1, r7
 801d0da:	f7e3 f8e5 	bl	80002a8 <__aeabi_dsub>
 801d0de:	a36e      	add	r3, pc, #440	; (adr r3, 801d298 <_dtoa_r+0x2e0>)
 801d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e4:	f7e3 fa98 	bl	8000618 <__aeabi_dmul>
 801d0e8:	a36d      	add	r3, pc, #436	; (adr r3, 801d2a0 <_dtoa_r+0x2e8>)
 801d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ee:	f7e3 f8dd 	bl	80002ac <__adddf3>
 801d0f2:	4606      	mov	r6, r0
 801d0f4:	4628      	mov	r0, r5
 801d0f6:	460f      	mov	r7, r1
 801d0f8:	f7e3 fa24 	bl	8000544 <__aeabi_i2d>
 801d0fc:	a36a      	add	r3, pc, #424	; (adr r3, 801d2a8 <_dtoa_r+0x2f0>)
 801d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d102:	f7e3 fa89 	bl	8000618 <__aeabi_dmul>
 801d106:	4602      	mov	r2, r0
 801d108:	460b      	mov	r3, r1
 801d10a:	4630      	mov	r0, r6
 801d10c:	4639      	mov	r1, r7
 801d10e:	f7e3 f8cd 	bl	80002ac <__adddf3>
 801d112:	4606      	mov	r6, r0
 801d114:	460f      	mov	r7, r1
 801d116:	f7e3 fd2f 	bl	8000b78 <__aeabi_d2iz>
 801d11a:	2200      	movs	r2, #0
 801d11c:	4682      	mov	sl, r0
 801d11e:	2300      	movs	r3, #0
 801d120:	4630      	mov	r0, r6
 801d122:	4639      	mov	r1, r7
 801d124:	f7e3 fcea 	bl	8000afc <__aeabi_dcmplt>
 801d128:	b148      	cbz	r0, 801d13e <_dtoa_r+0x186>
 801d12a:	4650      	mov	r0, sl
 801d12c:	f7e3 fa0a 	bl	8000544 <__aeabi_i2d>
 801d130:	4632      	mov	r2, r6
 801d132:	463b      	mov	r3, r7
 801d134:	f7e3 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 801d138:	b908      	cbnz	r0, 801d13e <_dtoa_r+0x186>
 801d13a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d13e:	f1ba 0f16 	cmp.w	sl, #22
 801d142:	d854      	bhi.n	801d1ee <_dtoa_r+0x236>
 801d144:	4b61      	ldr	r3, [pc, #388]	; (801d2cc <_dtoa_r+0x314>)
 801d146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d152:	f7e3 fcd3 	bl	8000afc <__aeabi_dcmplt>
 801d156:	2800      	cmp	r0, #0
 801d158:	d04b      	beq.n	801d1f2 <_dtoa_r+0x23a>
 801d15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d15e:	2300      	movs	r3, #0
 801d160:	930e      	str	r3, [sp, #56]	; 0x38
 801d162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d164:	1b5d      	subs	r5, r3, r5
 801d166:	1e6b      	subs	r3, r5, #1
 801d168:	9304      	str	r3, [sp, #16]
 801d16a:	bf43      	ittte	mi
 801d16c:	2300      	movmi	r3, #0
 801d16e:	f1c5 0801 	rsbmi	r8, r5, #1
 801d172:	9304      	strmi	r3, [sp, #16]
 801d174:	f04f 0800 	movpl.w	r8, #0
 801d178:	f1ba 0f00 	cmp.w	sl, #0
 801d17c:	db3b      	blt.n	801d1f6 <_dtoa_r+0x23e>
 801d17e:	9b04      	ldr	r3, [sp, #16]
 801d180:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d184:	4453      	add	r3, sl
 801d186:	9304      	str	r3, [sp, #16]
 801d188:	2300      	movs	r3, #0
 801d18a:	9306      	str	r3, [sp, #24]
 801d18c:	9b05      	ldr	r3, [sp, #20]
 801d18e:	2b09      	cmp	r3, #9
 801d190:	d869      	bhi.n	801d266 <_dtoa_r+0x2ae>
 801d192:	2b05      	cmp	r3, #5
 801d194:	bfc4      	itt	gt
 801d196:	3b04      	subgt	r3, #4
 801d198:	9305      	strgt	r3, [sp, #20]
 801d19a:	9b05      	ldr	r3, [sp, #20]
 801d19c:	f1a3 0302 	sub.w	r3, r3, #2
 801d1a0:	bfcc      	ite	gt
 801d1a2:	2500      	movgt	r5, #0
 801d1a4:	2501      	movle	r5, #1
 801d1a6:	2b03      	cmp	r3, #3
 801d1a8:	d869      	bhi.n	801d27e <_dtoa_r+0x2c6>
 801d1aa:	e8df f003 	tbb	[pc, r3]
 801d1ae:	4e2c      	.short	0x4e2c
 801d1b0:	5a4c      	.short	0x5a4c
 801d1b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801d1b6:	441d      	add	r5, r3
 801d1b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d1bc:	2b20      	cmp	r3, #32
 801d1be:	bfc1      	itttt	gt
 801d1c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d1c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d1c8:	fa09 f303 	lslgt.w	r3, r9, r3
 801d1cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d1d0:	bfda      	itte	le
 801d1d2:	f1c3 0320 	rsble	r3, r3, #32
 801d1d6:	fa06 f003 	lslle.w	r0, r6, r3
 801d1da:	4318      	orrgt	r0, r3
 801d1dc:	f7e3 f9a2 	bl	8000524 <__aeabi_ui2d>
 801d1e0:	2301      	movs	r3, #1
 801d1e2:	4606      	mov	r6, r0
 801d1e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d1e8:	3d01      	subs	r5, #1
 801d1ea:	9310      	str	r3, [sp, #64]	; 0x40
 801d1ec:	e771      	b.n	801d0d2 <_dtoa_r+0x11a>
 801d1ee:	2301      	movs	r3, #1
 801d1f0:	e7b6      	b.n	801d160 <_dtoa_r+0x1a8>
 801d1f2:	900e      	str	r0, [sp, #56]	; 0x38
 801d1f4:	e7b5      	b.n	801d162 <_dtoa_r+0x1aa>
 801d1f6:	f1ca 0300 	rsb	r3, sl, #0
 801d1fa:	9306      	str	r3, [sp, #24]
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	eba8 080a 	sub.w	r8, r8, sl
 801d202:	930d      	str	r3, [sp, #52]	; 0x34
 801d204:	e7c2      	b.n	801d18c <_dtoa_r+0x1d4>
 801d206:	2300      	movs	r3, #0
 801d208:	9308      	str	r3, [sp, #32]
 801d20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	dc39      	bgt.n	801d284 <_dtoa_r+0x2cc>
 801d210:	f04f 0901 	mov.w	r9, #1
 801d214:	f8cd 9004 	str.w	r9, [sp, #4]
 801d218:	464b      	mov	r3, r9
 801d21a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d21e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d220:	2200      	movs	r2, #0
 801d222:	6042      	str	r2, [r0, #4]
 801d224:	2204      	movs	r2, #4
 801d226:	f102 0614 	add.w	r6, r2, #20
 801d22a:	429e      	cmp	r6, r3
 801d22c:	6841      	ldr	r1, [r0, #4]
 801d22e:	d92f      	bls.n	801d290 <_dtoa_r+0x2d8>
 801d230:	4620      	mov	r0, r4
 801d232:	f001 f989 	bl	801e548 <_Balloc>
 801d236:	9000      	str	r0, [sp, #0]
 801d238:	2800      	cmp	r0, #0
 801d23a:	d14b      	bne.n	801d2d4 <_dtoa_r+0x31c>
 801d23c:	4b24      	ldr	r3, [pc, #144]	; (801d2d0 <_dtoa_r+0x318>)
 801d23e:	4602      	mov	r2, r0
 801d240:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d244:	e6d1      	b.n	801cfea <_dtoa_r+0x32>
 801d246:	2301      	movs	r3, #1
 801d248:	e7de      	b.n	801d208 <_dtoa_r+0x250>
 801d24a:	2300      	movs	r3, #0
 801d24c:	9308      	str	r3, [sp, #32]
 801d24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d250:	eb0a 0903 	add.w	r9, sl, r3
 801d254:	f109 0301 	add.w	r3, r9, #1
 801d258:	2b01      	cmp	r3, #1
 801d25a:	9301      	str	r3, [sp, #4]
 801d25c:	bfb8      	it	lt
 801d25e:	2301      	movlt	r3, #1
 801d260:	e7dd      	b.n	801d21e <_dtoa_r+0x266>
 801d262:	2301      	movs	r3, #1
 801d264:	e7f2      	b.n	801d24c <_dtoa_r+0x294>
 801d266:	2501      	movs	r5, #1
 801d268:	2300      	movs	r3, #0
 801d26a:	9305      	str	r3, [sp, #20]
 801d26c:	9508      	str	r5, [sp, #32]
 801d26e:	f04f 39ff 	mov.w	r9, #4294967295
 801d272:	2200      	movs	r2, #0
 801d274:	f8cd 9004 	str.w	r9, [sp, #4]
 801d278:	2312      	movs	r3, #18
 801d27a:	9209      	str	r2, [sp, #36]	; 0x24
 801d27c:	e7cf      	b.n	801d21e <_dtoa_r+0x266>
 801d27e:	2301      	movs	r3, #1
 801d280:	9308      	str	r3, [sp, #32]
 801d282:	e7f4      	b.n	801d26e <_dtoa_r+0x2b6>
 801d284:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d288:	f8cd 9004 	str.w	r9, [sp, #4]
 801d28c:	464b      	mov	r3, r9
 801d28e:	e7c6      	b.n	801d21e <_dtoa_r+0x266>
 801d290:	3101      	adds	r1, #1
 801d292:	6041      	str	r1, [r0, #4]
 801d294:	0052      	lsls	r2, r2, #1
 801d296:	e7c6      	b.n	801d226 <_dtoa_r+0x26e>
 801d298:	636f4361 	.word	0x636f4361
 801d29c:	3fd287a7 	.word	0x3fd287a7
 801d2a0:	8b60c8b3 	.word	0x8b60c8b3
 801d2a4:	3fc68a28 	.word	0x3fc68a28
 801d2a8:	509f79fb 	.word	0x509f79fb
 801d2ac:	3fd34413 	.word	0x3fd34413
 801d2b0:	08021d11 	.word	0x08021d11
 801d2b4:	08021d28 	.word	0x08021d28
 801d2b8:	7ff00000 	.word	0x7ff00000
 801d2bc:	08021d0d 	.word	0x08021d0d
 801d2c0:	08021d04 	.word	0x08021d04
 801d2c4:	08021f8a 	.word	0x08021f8a
 801d2c8:	3ff80000 	.word	0x3ff80000
 801d2cc:	08021ea0 	.word	0x08021ea0
 801d2d0:	08021d87 	.word	0x08021d87
 801d2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2d6:	9a00      	ldr	r2, [sp, #0]
 801d2d8:	601a      	str	r2, [r3, #0]
 801d2da:	9b01      	ldr	r3, [sp, #4]
 801d2dc:	2b0e      	cmp	r3, #14
 801d2de:	f200 80ad 	bhi.w	801d43c <_dtoa_r+0x484>
 801d2e2:	2d00      	cmp	r5, #0
 801d2e4:	f000 80aa 	beq.w	801d43c <_dtoa_r+0x484>
 801d2e8:	f1ba 0f00 	cmp.w	sl, #0
 801d2ec:	dd36      	ble.n	801d35c <_dtoa_r+0x3a4>
 801d2ee:	4ac3      	ldr	r2, [pc, #780]	; (801d5fc <_dtoa_r+0x644>)
 801d2f0:	f00a 030f 	and.w	r3, sl, #15
 801d2f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d2f8:	ed93 7b00 	vldr	d7, [r3]
 801d2fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801d300:	ea4f 172a 	mov.w	r7, sl, asr #4
 801d304:	eeb0 8a47 	vmov.f32	s16, s14
 801d308:	eef0 8a67 	vmov.f32	s17, s15
 801d30c:	d016      	beq.n	801d33c <_dtoa_r+0x384>
 801d30e:	4bbc      	ldr	r3, [pc, #752]	; (801d600 <_dtoa_r+0x648>)
 801d310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d318:	f7e3 faa8 	bl	800086c <__aeabi_ddiv>
 801d31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d320:	f007 070f 	and.w	r7, r7, #15
 801d324:	2503      	movs	r5, #3
 801d326:	4eb6      	ldr	r6, [pc, #728]	; (801d600 <_dtoa_r+0x648>)
 801d328:	b957      	cbnz	r7, 801d340 <_dtoa_r+0x388>
 801d32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d32e:	ec53 2b18 	vmov	r2, r3, d8
 801d332:	f7e3 fa9b 	bl	800086c <__aeabi_ddiv>
 801d336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d33a:	e029      	b.n	801d390 <_dtoa_r+0x3d8>
 801d33c:	2502      	movs	r5, #2
 801d33e:	e7f2      	b.n	801d326 <_dtoa_r+0x36e>
 801d340:	07f9      	lsls	r1, r7, #31
 801d342:	d508      	bpl.n	801d356 <_dtoa_r+0x39e>
 801d344:	ec51 0b18 	vmov	r0, r1, d8
 801d348:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d34c:	f7e3 f964 	bl	8000618 <__aeabi_dmul>
 801d350:	ec41 0b18 	vmov	d8, r0, r1
 801d354:	3501      	adds	r5, #1
 801d356:	107f      	asrs	r7, r7, #1
 801d358:	3608      	adds	r6, #8
 801d35a:	e7e5      	b.n	801d328 <_dtoa_r+0x370>
 801d35c:	f000 80a6 	beq.w	801d4ac <_dtoa_r+0x4f4>
 801d360:	f1ca 0600 	rsb	r6, sl, #0
 801d364:	4ba5      	ldr	r3, [pc, #660]	; (801d5fc <_dtoa_r+0x644>)
 801d366:	4fa6      	ldr	r7, [pc, #664]	; (801d600 <_dtoa_r+0x648>)
 801d368:	f006 020f 	and.w	r2, r6, #15
 801d36c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d374:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d378:	f7e3 f94e 	bl	8000618 <__aeabi_dmul>
 801d37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d380:	1136      	asrs	r6, r6, #4
 801d382:	2300      	movs	r3, #0
 801d384:	2502      	movs	r5, #2
 801d386:	2e00      	cmp	r6, #0
 801d388:	f040 8085 	bne.w	801d496 <_dtoa_r+0x4de>
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d1d2      	bne.n	801d336 <_dtoa_r+0x37e>
 801d390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d392:	2b00      	cmp	r3, #0
 801d394:	f000 808c 	beq.w	801d4b0 <_dtoa_r+0x4f8>
 801d398:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d39c:	4b99      	ldr	r3, [pc, #612]	; (801d604 <_dtoa_r+0x64c>)
 801d39e:	2200      	movs	r2, #0
 801d3a0:	4630      	mov	r0, r6
 801d3a2:	4639      	mov	r1, r7
 801d3a4:	f7e3 fbaa 	bl	8000afc <__aeabi_dcmplt>
 801d3a8:	2800      	cmp	r0, #0
 801d3aa:	f000 8081 	beq.w	801d4b0 <_dtoa_r+0x4f8>
 801d3ae:	9b01      	ldr	r3, [sp, #4]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d07d      	beq.n	801d4b0 <_dtoa_r+0x4f8>
 801d3b4:	f1b9 0f00 	cmp.w	r9, #0
 801d3b8:	dd3c      	ble.n	801d434 <_dtoa_r+0x47c>
 801d3ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d3be:	9307      	str	r3, [sp, #28]
 801d3c0:	2200      	movs	r2, #0
 801d3c2:	4b91      	ldr	r3, [pc, #580]	; (801d608 <_dtoa_r+0x650>)
 801d3c4:	4630      	mov	r0, r6
 801d3c6:	4639      	mov	r1, r7
 801d3c8:	f7e3 f926 	bl	8000618 <__aeabi_dmul>
 801d3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3d0:	3501      	adds	r5, #1
 801d3d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d3d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d3da:	4628      	mov	r0, r5
 801d3dc:	f7e3 f8b2 	bl	8000544 <__aeabi_i2d>
 801d3e0:	4632      	mov	r2, r6
 801d3e2:	463b      	mov	r3, r7
 801d3e4:	f7e3 f918 	bl	8000618 <__aeabi_dmul>
 801d3e8:	4b88      	ldr	r3, [pc, #544]	; (801d60c <_dtoa_r+0x654>)
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	f7e2 ff5e 	bl	80002ac <__adddf3>
 801d3f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3f8:	9303      	str	r3, [sp, #12]
 801d3fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d15c      	bne.n	801d4ba <_dtoa_r+0x502>
 801d400:	4b83      	ldr	r3, [pc, #524]	; (801d610 <_dtoa_r+0x658>)
 801d402:	2200      	movs	r2, #0
 801d404:	4630      	mov	r0, r6
 801d406:	4639      	mov	r1, r7
 801d408:	f7e2 ff4e 	bl	80002a8 <__aeabi_dsub>
 801d40c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d410:	4606      	mov	r6, r0
 801d412:	460f      	mov	r7, r1
 801d414:	f7e3 fb90 	bl	8000b38 <__aeabi_dcmpgt>
 801d418:	2800      	cmp	r0, #0
 801d41a:	f040 8296 	bne.w	801d94a <_dtoa_r+0x992>
 801d41e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d422:	4630      	mov	r0, r6
 801d424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d428:	4639      	mov	r1, r7
 801d42a:	f7e3 fb67 	bl	8000afc <__aeabi_dcmplt>
 801d42e:	2800      	cmp	r0, #0
 801d430:	f040 8288 	bne.w	801d944 <_dtoa_r+0x98c>
 801d434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d438:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d43c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d43e:	2b00      	cmp	r3, #0
 801d440:	f2c0 8158 	blt.w	801d6f4 <_dtoa_r+0x73c>
 801d444:	f1ba 0f0e 	cmp.w	sl, #14
 801d448:	f300 8154 	bgt.w	801d6f4 <_dtoa_r+0x73c>
 801d44c:	4b6b      	ldr	r3, [pc, #428]	; (801d5fc <_dtoa_r+0x644>)
 801d44e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d452:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f280 80e3 	bge.w	801d624 <_dtoa_r+0x66c>
 801d45e:	9b01      	ldr	r3, [sp, #4]
 801d460:	2b00      	cmp	r3, #0
 801d462:	f300 80df 	bgt.w	801d624 <_dtoa_r+0x66c>
 801d466:	f040 826d 	bne.w	801d944 <_dtoa_r+0x98c>
 801d46a:	4b69      	ldr	r3, [pc, #420]	; (801d610 <_dtoa_r+0x658>)
 801d46c:	2200      	movs	r2, #0
 801d46e:	4640      	mov	r0, r8
 801d470:	4649      	mov	r1, r9
 801d472:	f7e3 f8d1 	bl	8000618 <__aeabi_dmul>
 801d476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d47a:	f7e3 fb53 	bl	8000b24 <__aeabi_dcmpge>
 801d47e:	9e01      	ldr	r6, [sp, #4]
 801d480:	4637      	mov	r7, r6
 801d482:	2800      	cmp	r0, #0
 801d484:	f040 8243 	bne.w	801d90e <_dtoa_r+0x956>
 801d488:	9d00      	ldr	r5, [sp, #0]
 801d48a:	2331      	movs	r3, #49	; 0x31
 801d48c:	f805 3b01 	strb.w	r3, [r5], #1
 801d490:	f10a 0a01 	add.w	sl, sl, #1
 801d494:	e23f      	b.n	801d916 <_dtoa_r+0x95e>
 801d496:	07f2      	lsls	r2, r6, #31
 801d498:	d505      	bpl.n	801d4a6 <_dtoa_r+0x4ee>
 801d49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d49e:	f7e3 f8bb 	bl	8000618 <__aeabi_dmul>
 801d4a2:	3501      	adds	r5, #1
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	1076      	asrs	r6, r6, #1
 801d4a8:	3708      	adds	r7, #8
 801d4aa:	e76c      	b.n	801d386 <_dtoa_r+0x3ce>
 801d4ac:	2502      	movs	r5, #2
 801d4ae:	e76f      	b.n	801d390 <_dtoa_r+0x3d8>
 801d4b0:	9b01      	ldr	r3, [sp, #4]
 801d4b2:	f8cd a01c 	str.w	sl, [sp, #28]
 801d4b6:	930c      	str	r3, [sp, #48]	; 0x30
 801d4b8:	e78d      	b.n	801d3d6 <_dtoa_r+0x41e>
 801d4ba:	9900      	ldr	r1, [sp, #0]
 801d4bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d4be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d4c0:	4b4e      	ldr	r3, [pc, #312]	; (801d5fc <_dtoa_r+0x644>)
 801d4c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d4c6:	4401      	add	r1, r0
 801d4c8:	9102      	str	r1, [sp, #8]
 801d4ca:	9908      	ldr	r1, [sp, #32]
 801d4cc:	eeb0 8a47 	vmov.f32	s16, s14
 801d4d0:	eef0 8a67 	vmov.f32	s17, s15
 801d4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d4d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d4dc:	2900      	cmp	r1, #0
 801d4de:	d045      	beq.n	801d56c <_dtoa_r+0x5b4>
 801d4e0:	494c      	ldr	r1, [pc, #304]	; (801d614 <_dtoa_r+0x65c>)
 801d4e2:	2000      	movs	r0, #0
 801d4e4:	f7e3 f9c2 	bl	800086c <__aeabi_ddiv>
 801d4e8:	ec53 2b18 	vmov	r2, r3, d8
 801d4ec:	f7e2 fedc 	bl	80002a8 <__aeabi_dsub>
 801d4f0:	9d00      	ldr	r5, [sp, #0]
 801d4f2:	ec41 0b18 	vmov	d8, r0, r1
 801d4f6:	4639      	mov	r1, r7
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	f7e3 fb3d 	bl	8000b78 <__aeabi_d2iz>
 801d4fe:	900c      	str	r0, [sp, #48]	; 0x30
 801d500:	f7e3 f820 	bl	8000544 <__aeabi_i2d>
 801d504:	4602      	mov	r2, r0
 801d506:	460b      	mov	r3, r1
 801d508:	4630      	mov	r0, r6
 801d50a:	4639      	mov	r1, r7
 801d50c:	f7e2 fecc 	bl	80002a8 <__aeabi_dsub>
 801d510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d512:	3330      	adds	r3, #48	; 0x30
 801d514:	f805 3b01 	strb.w	r3, [r5], #1
 801d518:	ec53 2b18 	vmov	r2, r3, d8
 801d51c:	4606      	mov	r6, r0
 801d51e:	460f      	mov	r7, r1
 801d520:	f7e3 faec 	bl	8000afc <__aeabi_dcmplt>
 801d524:	2800      	cmp	r0, #0
 801d526:	d165      	bne.n	801d5f4 <_dtoa_r+0x63c>
 801d528:	4632      	mov	r2, r6
 801d52a:	463b      	mov	r3, r7
 801d52c:	4935      	ldr	r1, [pc, #212]	; (801d604 <_dtoa_r+0x64c>)
 801d52e:	2000      	movs	r0, #0
 801d530:	f7e2 feba 	bl	80002a8 <__aeabi_dsub>
 801d534:	ec53 2b18 	vmov	r2, r3, d8
 801d538:	f7e3 fae0 	bl	8000afc <__aeabi_dcmplt>
 801d53c:	2800      	cmp	r0, #0
 801d53e:	f040 80b9 	bne.w	801d6b4 <_dtoa_r+0x6fc>
 801d542:	9b02      	ldr	r3, [sp, #8]
 801d544:	429d      	cmp	r5, r3
 801d546:	f43f af75 	beq.w	801d434 <_dtoa_r+0x47c>
 801d54a:	4b2f      	ldr	r3, [pc, #188]	; (801d608 <_dtoa_r+0x650>)
 801d54c:	ec51 0b18 	vmov	r0, r1, d8
 801d550:	2200      	movs	r2, #0
 801d552:	f7e3 f861 	bl	8000618 <__aeabi_dmul>
 801d556:	4b2c      	ldr	r3, [pc, #176]	; (801d608 <_dtoa_r+0x650>)
 801d558:	ec41 0b18 	vmov	d8, r0, r1
 801d55c:	2200      	movs	r2, #0
 801d55e:	4630      	mov	r0, r6
 801d560:	4639      	mov	r1, r7
 801d562:	f7e3 f859 	bl	8000618 <__aeabi_dmul>
 801d566:	4606      	mov	r6, r0
 801d568:	460f      	mov	r7, r1
 801d56a:	e7c4      	b.n	801d4f6 <_dtoa_r+0x53e>
 801d56c:	ec51 0b17 	vmov	r0, r1, d7
 801d570:	f7e3 f852 	bl	8000618 <__aeabi_dmul>
 801d574:	9b02      	ldr	r3, [sp, #8]
 801d576:	9d00      	ldr	r5, [sp, #0]
 801d578:	930c      	str	r3, [sp, #48]	; 0x30
 801d57a:	ec41 0b18 	vmov	d8, r0, r1
 801d57e:	4639      	mov	r1, r7
 801d580:	4630      	mov	r0, r6
 801d582:	f7e3 faf9 	bl	8000b78 <__aeabi_d2iz>
 801d586:	9011      	str	r0, [sp, #68]	; 0x44
 801d588:	f7e2 ffdc 	bl	8000544 <__aeabi_i2d>
 801d58c:	4602      	mov	r2, r0
 801d58e:	460b      	mov	r3, r1
 801d590:	4630      	mov	r0, r6
 801d592:	4639      	mov	r1, r7
 801d594:	f7e2 fe88 	bl	80002a8 <__aeabi_dsub>
 801d598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d59a:	3330      	adds	r3, #48	; 0x30
 801d59c:	f805 3b01 	strb.w	r3, [r5], #1
 801d5a0:	9b02      	ldr	r3, [sp, #8]
 801d5a2:	429d      	cmp	r5, r3
 801d5a4:	4606      	mov	r6, r0
 801d5a6:	460f      	mov	r7, r1
 801d5a8:	f04f 0200 	mov.w	r2, #0
 801d5ac:	d134      	bne.n	801d618 <_dtoa_r+0x660>
 801d5ae:	4b19      	ldr	r3, [pc, #100]	; (801d614 <_dtoa_r+0x65c>)
 801d5b0:	ec51 0b18 	vmov	r0, r1, d8
 801d5b4:	f7e2 fe7a 	bl	80002ac <__adddf3>
 801d5b8:	4602      	mov	r2, r0
 801d5ba:	460b      	mov	r3, r1
 801d5bc:	4630      	mov	r0, r6
 801d5be:	4639      	mov	r1, r7
 801d5c0:	f7e3 faba 	bl	8000b38 <__aeabi_dcmpgt>
 801d5c4:	2800      	cmp	r0, #0
 801d5c6:	d175      	bne.n	801d6b4 <_dtoa_r+0x6fc>
 801d5c8:	ec53 2b18 	vmov	r2, r3, d8
 801d5cc:	4911      	ldr	r1, [pc, #68]	; (801d614 <_dtoa_r+0x65c>)
 801d5ce:	2000      	movs	r0, #0
 801d5d0:	f7e2 fe6a 	bl	80002a8 <__aeabi_dsub>
 801d5d4:	4602      	mov	r2, r0
 801d5d6:	460b      	mov	r3, r1
 801d5d8:	4630      	mov	r0, r6
 801d5da:	4639      	mov	r1, r7
 801d5dc:	f7e3 fa8e 	bl	8000afc <__aeabi_dcmplt>
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	f43f af27 	beq.w	801d434 <_dtoa_r+0x47c>
 801d5e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d5e8:	1e6b      	subs	r3, r5, #1
 801d5ea:	930c      	str	r3, [sp, #48]	; 0x30
 801d5ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d5f0:	2b30      	cmp	r3, #48	; 0x30
 801d5f2:	d0f8      	beq.n	801d5e6 <_dtoa_r+0x62e>
 801d5f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d5f8:	e04a      	b.n	801d690 <_dtoa_r+0x6d8>
 801d5fa:	bf00      	nop
 801d5fc:	08021ea0 	.word	0x08021ea0
 801d600:	08021e78 	.word	0x08021e78
 801d604:	3ff00000 	.word	0x3ff00000
 801d608:	40240000 	.word	0x40240000
 801d60c:	401c0000 	.word	0x401c0000
 801d610:	40140000 	.word	0x40140000
 801d614:	3fe00000 	.word	0x3fe00000
 801d618:	4baf      	ldr	r3, [pc, #700]	; (801d8d8 <_dtoa_r+0x920>)
 801d61a:	f7e2 fffd 	bl	8000618 <__aeabi_dmul>
 801d61e:	4606      	mov	r6, r0
 801d620:	460f      	mov	r7, r1
 801d622:	e7ac      	b.n	801d57e <_dtoa_r+0x5c6>
 801d624:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d628:	9d00      	ldr	r5, [sp, #0]
 801d62a:	4642      	mov	r2, r8
 801d62c:	464b      	mov	r3, r9
 801d62e:	4630      	mov	r0, r6
 801d630:	4639      	mov	r1, r7
 801d632:	f7e3 f91b 	bl	800086c <__aeabi_ddiv>
 801d636:	f7e3 fa9f 	bl	8000b78 <__aeabi_d2iz>
 801d63a:	9002      	str	r0, [sp, #8]
 801d63c:	f7e2 ff82 	bl	8000544 <__aeabi_i2d>
 801d640:	4642      	mov	r2, r8
 801d642:	464b      	mov	r3, r9
 801d644:	f7e2 ffe8 	bl	8000618 <__aeabi_dmul>
 801d648:	4602      	mov	r2, r0
 801d64a:	460b      	mov	r3, r1
 801d64c:	4630      	mov	r0, r6
 801d64e:	4639      	mov	r1, r7
 801d650:	f7e2 fe2a 	bl	80002a8 <__aeabi_dsub>
 801d654:	9e02      	ldr	r6, [sp, #8]
 801d656:	9f01      	ldr	r7, [sp, #4]
 801d658:	3630      	adds	r6, #48	; 0x30
 801d65a:	f805 6b01 	strb.w	r6, [r5], #1
 801d65e:	9e00      	ldr	r6, [sp, #0]
 801d660:	1bae      	subs	r6, r5, r6
 801d662:	42b7      	cmp	r7, r6
 801d664:	4602      	mov	r2, r0
 801d666:	460b      	mov	r3, r1
 801d668:	d137      	bne.n	801d6da <_dtoa_r+0x722>
 801d66a:	f7e2 fe1f 	bl	80002ac <__adddf3>
 801d66e:	4642      	mov	r2, r8
 801d670:	464b      	mov	r3, r9
 801d672:	4606      	mov	r6, r0
 801d674:	460f      	mov	r7, r1
 801d676:	f7e3 fa5f 	bl	8000b38 <__aeabi_dcmpgt>
 801d67a:	b9c8      	cbnz	r0, 801d6b0 <_dtoa_r+0x6f8>
 801d67c:	4642      	mov	r2, r8
 801d67e:	464b      	mov	r3, r9
 801d680:	4630      	mov	r0, r6
 801d682:	4639      	mov	r1, r7
 801d684:	f7e3 fa30 	bl	8000ae8 <__aeabi_dcmpeq>
 801d688:	b110      	cbz	r0, 801d690 <_dtoa_r+0x6d8>
 801d68a:	9b02      	ldr	r3, [sp, #8]
 801d68c:	07d9      	lsls	r1, r3, #31
 801d68e:	d40f      	bmi.n	801d6b0 <_dtoa_r+0x6f8>
 801d690:	4620      	mov	r0, r4
 801d692:	4659      	mov	r1, fp
 801d694:	f000 ff98 	bl	801e5c8 <_Bfree>
 801d698:	2300      	movs	r3, #0
 801d69a:	702b      	strb	r3, [r5, #0]
 801d69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d69e:	f10a 0001 	add.w	r0, sl, #1
 801d6a2:	6018      	str	r0, [r3, #0]
 801d6a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	f43f acd8 	beq.w	801d05c <_dtoa_r+0xa4>
 801d6ac:	601d      	str	r5, [r3, #0]
 801d6ae:	e4d5      	b.n	801d05c <_dtoa_r+0xa4>
 801d6b0:	f8cd a01c 	str.w	sl, [sp, #28]
 801d6b4:	462b      	mov	r3, r5
 801d6b6:	461d      	mov	r5, r3
 801d6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d6bc:	2a39      	cmp	r2, #57	; 0x39
 801d6be:	d108      	bne.n	801d6d2 <_dtoa_r+0x71a>
 801d6c0:	9a00      	ldr	r2, [sp, #0]
 801d6c2:	429a      	cmp	r2, r3
 801d6c4:	d1f7      	bne.n	801d6b6 <_dtoa_r+0x6fe>
 801d6c6:	9a07      	ldr	r2, [sp, #28]
 801d6c8:	9900      	ldr	r1, [sp, #0]
 801d6ca:	3201      	adds	r2, #1
 801d6cc:	9207      	str	r2, [sp, #28]
 801d6ce:	2230      	movs	r2, #48	; 0x30
 801d6d0:	700a      	strb	r2, [r1, #0]
 801d6d2:	781a      	ldrb	r2, [r3, #0]
 801d6d4:	3201      	adds	r2, #1
 801d6d6:	701a      	strb	r2, [r3, #0]
 801d6d8:	e78c      	b.n	801d5f4 <_dtoa_r+0x63c>
 801d6da:	4b7f      	ldr	r3, [pc, #508]	; (801d8d8 <_dtoa_r+0x920>)
 801d6dc:	2200      	movs	r2, #0
 801d6de:	f7e2 ff9b 	bl	8000618 <__aeabi_dmul>
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	460f      	mov	r7, r1
 801d6ea:	f7e3 f9fd 	bl	8000ae8 <__aeabi_dcmpeq>
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	d09b      	beq.n	801d62a <_dtoa_r+0x672>
 801d6f2:	e7cd      	b.n	801d690 <_dtoa_r+0x6d8>
 801d6f4:	9a08      	ldr	r2, [sp, #32]
 801d6f6:	2a00      	cmp	r2, #0
 801d6f8:	f000 80c4 	beq.w	801d884 <_dtoa_r+0x8cc>
 801d6fc:	9a05      	ldr	r2, [sp, #20]
 801d6fe:	2a01      	cmp	r2, #1
 801d700:	f300 80a8 	bgt.w	801d854 <_dtoa_r+0x89c>
 801d704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d706:	2a00      	cmp	r2, #0
 801d708:	f000 80a0 	beq.w	801d84c <_dtoa_r+0x894>
 801d70c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d710:	9e06      	ldr	r6, [sp, #24]
 801d712:	4645      	mov	r5, r8
 801d714:	9a04      	ldr	r2, [sp, #16]
 801d716:	2101      	movs	r1, #1
 801d718:	441a      	add	r2, r3
 801d71a:	4620      	mov	r0, r4
 801d71c:	4498      	add	r8, r3
 801d71e:	9204      	str	r2, [sp, #16]
 801d720:	f001 f858 	bl	801e7d4 <__i2b>
 801d724:	4607      	mov	r7, r0
 801d726:	2d00      	cmp	r5, #0
 801d728:	dd0b      	ble.n	801d742 <_dtoa_r+0x78a>
 801d72a:	9b04      	ldr	r3, [sp, #16]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	dd08      	ble.n	801d742 <_dtoa_r+0x78a>
 801d730:	42ab      	cmp	r3, r5
 801d732:	9a04      	ldr	r2, [sp, #16]
 801d734:	bfa8      	it	ge
 801d736:	462b      	movge	r3, r5
 801d738:	eba8 0803 	sub.w	r8, r8, r3
 801d73c:	1aed      	subs	r5, r5, r3
 801d73e:	1ad3      	subs	r3, r2, r3
 801d740:	9304      	str	r3, [sp, #16]
 801d742:	9b06      	ldr	r3, [sp, #24]
 801d744:	b1fb      	cbz	r3, 801d786 <_dtoa_r+0x7ce>
 801d746:	9b08      	ldr	r3, [sp, #32]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	f000 809f 	beq.w	801d88c <_dtoa_r+0x8d4>
 801d74e:	2e00      	cmp	r6, #0
 801d750:	dd11      	ble.n	801d776 <_dtoa_r+0x7be>
 801d752:	4639      	mov	r1, r7
 801d754:	4632      	mov	r2, r6
 801d756:	4620      	mov	r0, r4
 801d758:	f001 f8f8 	bl	801e94c <__pow5mult>
 801d75c:	465a      	mov	r2, fp
 801d75e:	4601      	mov	r1, r0
 801d760:	4607      	mov	r7, r0
 801d762:	4620      	mov	r0, r4
 801d764:	f001 f84c 	bl	801e800 <__multiply>
 801d768:	4659      	mov	r1, fp
 801d76a:	9007      	str	r0, [sp, #28]
 801d76c:	4620      	mov	r0, r4
 801d76e:	f000 ff2b 	bl	801e5c8 <_Bfree>
 801d772:	9b07      	ldr	r3, [sp, #28]
 801d774:	469b      	mov	fp, r3
 801d776:	9b06      	ldr	r3, [sp, #24]
 801d778:	1b9a      	subs	r2, r3, r6
 801d77a:	d004      	beq.n	801d786 <_dtoa_r+0x7ce>
 801d77c:	4659      	mov	r1, fp
 801d77e:	4620      	mov	r0, r4
 801d780:	f001 f8e4 	bl	801e94c <__pow5mult>
 801d784:	4683      	mov	fp, r0
 801d786:	2101      	movs	r1, #1
 801d788:	4620      	mov	r0, r4
 801d78a:	f001 f823 	bl	801e7d4 <__i2b>
 801d78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d790:	2b00      	cmp	r3, #0
 801d792:	4606      	mov	r6, r0
 801d794:	dd7c      	ble.n	801d890 <_dtoa_r+0x8d8>
 801d796:	461a      	mov	r2, r3
 801d798:	4601      	mov	r1, r0
 801d79a:	4620      	mov	r0, r4
 801d79c:	f001 f8d6 	bl	801e94c <__pow5mult>
 801d7a0:	9b05      	ldr	r3, [sp, #20]
 801d7a2:	2b01      	cmp	r3, #1
 801d7a4:	4606      	mov	r6, r0
 801d7a6:	dd76      	ble.n	801d896 <_dtoa_r+0x8de>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	9306      	str	r3, [sp, #24]
 801d7ac:	6933      	ldr	r3, [r6, #16]
 801d7ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d7b2:	6918      	ldr	r0, [r3, #16]
 801d7b4:	f000 ffbe 	bl	801e734 <__hi0bits>
 801d7b8:	f1c0 0020 	rsb	r0, r0, #32
 801d7bc:	9b04      	ldr	r3, [sp, #16]
 801d7be:	4418      	add	r0, r3
 801d7c0:	f010 001f 	ands.w	r0, r0, #31
 801d7c4:	f000 8086 	beq.w	801d8d4 <_dtoa_r+0x91c>
 801d7c8:	f1c0 0320 	rsb	r3, r0, #32
 801d7cc:	2b04      	cmp	r3, #4
 801d7ce:	dd7f      	ble.n	801d8d0 <_dtoa_r+0x918>
 801d7d0:	f1c0 001c 	rsb	r0, r0, #28
 801d7d4:	9b04      	ldr	r3, [sp, #16]
 801d7d6:	4403      	add	r3, r0
 801d7d8:	4480      	add	r8, r0
 801d7da:	4405      	add	r5, r0
 801d7dc:	9304      	str	r3, [sp, #16]
 801d7de:	f1b8 0f00 	cmp.w	r8, #0
 801d7e2:	dd05      	ble.n	801d7f0 <_dtoa_r+0x838>
 801d7e4:	4659      	mov	r1, fp
 801d7e6:	4642      	mov	r2, r8
 801d7e8:	4620      	mov	r0, r4
 801d7ea:	f001 f909 	bl	801ea00 <__lshift>
 801d7ee:	4683      	mov	fp, r0
 801d7f0:	9b04      	ldr	r3, [sp, #16]
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	dd05      	ble.n	801d802 <_dtoa_r+0x84a>
 801d7f6:	4631      	mov	r1, r6
 801d7f8:	461a      	mov	r2, r3
 801d7fa:	4620      	mov	r0, r4
 801d7fc:	f001 f900 	bl	801ea00 <__lshift>
 801d800:	4606      	mov	r6, r0
 801d802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d804:	2b00      	cmp	r3, #0
 801d806:	d069      	beq.n	801d8dc <_dtoa_r+0x924>
 801d808:	4631      	mov	r1, r6
 801d80a:	4658      	mov	r0, fp
 801d80c:	f001 f964 	bl	801ead8 <__mcmp>
 801d810:	2800      	cmp	r0, #0
 801d812:	da63      	bge.n	801d8dc <_dtoa_r+0x924>
 801d814:	2300      	movs	r3, #0
 801d816:	4659      	mov	r1, fp
 801d818:	220a      	movs	r2, #10
 801d81a:	4620      	mov	r0, r4
 801d81c:	f000 fef6 	bl	801e60c <__multadd>
 801d820:	9b08      	ldr	r3, [sp, #32]
 801d822:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d826:	4683      	mov	fp, r0
 801d828:	2b00      	cmp	r3, #0
 801d82a:	f000 818f 	beq.w	801db4c <_dtoa_r+0xb94>
 801d82e:	4639      	mov	r1, r7
 801d830:	2300      	movs	r3, #0
 801d832:	220a      	movs	r2, #10
 801d834:	4620      	mov	r0, r4
 801d836:	f000 fee9 	bl	801e60c <__multadd>
 801d83a:	f1b9 0f00 	cmp.w	r9, #0
 801d83e:	4607      	mov	r7, r0
 801d840:	f300 808e 	bgt.w	801d960 <_dtoa_r+0x9a8>
 801d844:	9b05      	ldr	r3, [sp, #20]
 801d846:	2b02      	cmp	r3, #2
 801d848:	dc50      	bgt.n	801d8ec <_dtoa_r+0x934>
 801d84a:	e089      	b.n	801d960 <_dtoa_r+0x9a8>
 801d84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d852:	e75d      	b.n	801d710 <_dtoa_r+0x758>
 801d854:	9b01      	ldr	r3, [sp, #4]
 801d856:	1e5e      	subs	r6, r3, #1
 801d858:	9b06      	ldr	r3, [sp, #24]
 801d85a:	42b3      	cmp	r3, r6
 801d85c:	bfbf      	itttt	lt
 801d85e:	9b06      	ldrlt	r3, [sp, #24]
 801d860:	9606      	strlt	r6, [sp, #24]
 801d862:	1af2      	sublt	r2, r6, r3
 801d864:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d866:	bfb6      	itet	lt
 801d868:	189b      	addlt	r3, r3, r2
 801d86a:	1b9e      	subge	r6, r3, r6
 801d86c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d86e:	9b01      	ldr	r3, [sp, #4]
 801d870:	bfb8      	it	lt
 801d872:	2600      	movlt	r6, #0
 801d874:	2b00      	cmp	r3, #0
 801d876:	bfb5      	itete	lt
 801d878:	eba8 0503 	sublt.w	r5, r8, r3
 801d87c:	9b01      	ldrge	r3, [sp, #4]
 801d87e:	2300      	movlt	r3, #0
 801d880:	4645      	movge	r5, r8
 801d882:	e747      	b.n	801d714 <_dtoa_r+0x75c>
 801d884:	9e06      	ldr	r6, [sp, #24]
 801d886:	9f08      	ldr	r7, [sp, #32]
 801d888:	4645      	mov	r5, r8
 801d88a:	e74c      	b.n	801d726 <_dtoa_r+0x76e>
 801d88c:	9a06      	ldr	r2, [sp, #24]
 801d88e:	e775      	b.n	801d77c <_dtoa_r+0x7c4>
 801d890:	9b05      	ldr	r3, [sp, #20]
 801d892:	2b01      	cmp	r3, #1
 801d894:	dc18      	bgt.n	801d8c8 <_dtoa_r+0x910>
 801d896:	9b02      	ldr	r3, [sp, #8]
 801d898:	b9b3      	cbnz	r3, 801d8c8 <_dtoa_r+0x910>
 801d89a:	9b03      	ldr	r3, [sp, #12]
 801d89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d8a0:	b9a3      	cbnz	r3, 801d8cc <_dtoa_r+0x914>
 801d8a2:	9b03      	ldr	r3, [sp, #12]
 801d8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d8a8:	0d1b      	lsrs	r3, r3, #20
 801d8aa:	051b      	lsls	r3, r3, #20
 801d8ac:	b12b      	cbz	r3, 801d8ba <_dtoa_r+0x902>
 801d8ae:	9b04      	ldr	r3, [sp, #16]
 801d8b0:	3301      	adds	r3, #1
 801d8b2:	9304      	str	r3, [sp, #16]
 801d8b4:	f108 0801 	add.w	r8, r8, #1
 801d8b8:	2301      	movs	r3, #1
 801d8ba:	9306      	str	r3, [sp, #24]
 801d8bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	f47f af74 	bne.w	801d7ac <_dtoa_r+0x7f4>
 801d8c4:	2001      	movs	r0, #1
 801d8c6:	e779      	b.n	801d7bc <_dtoa_r+0x804>
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	e7f6      	b.n	801d8ba <_dtoa_r+0x902>
 801d8cc:	9b02      	ldr	r3, [sp, #8]
 801d8ce:	e7f4      	b.n	801d8ba <_dtoa_r+0x902>
 801d8d0:	d085      	beq.n	801d7de <_dtoa_r+0x826>
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	301c      	adds	r0, #28
 801d8d6:	e77d      	b.n	801d7d4 <_dtoa_r+0x81c>
 801d8d8:	40240000 	.word	0x40240000
 801d8dc:	9b01      	ldr	r3, [sp, #4]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	dc38      	bgt.n	801d954 <_dtoa_r+0x99c>
 801d8e2:	9b05      	ldr	r3, [sp, #20]
 801d8e4:	2b02      	cmp	r3, #2
 801d8e6:	dd35      	ble.n	801d954 <_dtoa_r+0x99c>
 801d8e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d8ec:	f1b9 0f00 	cmp.w	r9, #0
 801d8f0:	d10d      	bne.n	801d90e <_dtoa_r+0x956>
 801d8f2:	4631      	mov	r1, r6
 801d8f4:	464b      	mov	r3, r9
 801d8f6:	2205      	movs	r2, #5
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f000 fe87 	bl	801e60c <__multadd>
 801d8fe:	4601      	mov	r1, r0
 801d900:	4606      	mov	r6, r0
 801d902:	4658      	mov	r0, fp
 801d904:	f001 f8e8 	bl	801ead8 <__mcmp>
 801d908:	2800      	cmp	r0, #0
 801d90a:	f73f adbd 	bgt.w	801d488 <_dtoa_r+0x4d0>
 801d90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d910:	9d00      	ldr	r5, [sp, #0]
 801d912:	ea6f 0a03 	mvn.w	sl, r3
 801d916:	f04f 0800 	mov.w	r8, #0
 801d91a:	4631      	mov	r1, r6
 801d91c:	4620      	mov	r0, r4
 801d91e:	f000 fe53 	bl	801e5c8 <_Bfree>
 801d922:	2f00      	cmp	r7, #0
 801d924:	f43f aeb4 	beq.w	801d690 <_dtoa_r+0x6d8>
 801d928:	f1b8 0f00 	cmp.w	r8, #0
 801d92c:	d005      	beq.n	801d93a <_dtoa_r+0x982>
 801d92e:	45b8      	cmp	r8, r7
 801d930:	d003      	beq.n	801d93a <_dtoa_r+0x982>
 801d932:	4641      	mov	r1, r8
 801d934:	4620      	mov	r0, r4
 801d936:	f000 fe47 	bl	801e5c8 <_Bfree>
 801d93a:	4639      	mov	r1, r7
 801d93c:	4620      	mov	r0, r4
 801d93e:	f000 fe43 	bl	801e5c8 <_Bfree>
 801d942:	e6a5      	b.n	801d690 <_dtoa_r+0x6d8>
 801d944:	2600      	movs	r6, #0
 801d946:	4637      	mov	r7, r6
 801d948:	e7e1      	b.n	801d90e <_dtoa_r+0x956>
 801d94a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d94c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d950:	4637      	mov	r7, r6
 801d952:	e599      	b.n	801d488 <_dtoa_r+0x4d0>
 801d954:	9b08      	ldr	r3, [sp, #32]
 801d956:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	f000 80fd 	beq.w	801db5a <_dtoa_r+0xba2>
 801d960:	2d00      	cmp	r5, #0
 801d962:	dd05      	ble.n	801d970 <_dtoa_r+0x9b8>
 801d964:	4639      	mov	r1, r7
 801d966:	462a      	mov	r2, r5
 801d968:	4620      	mov	r0, r4
 801d96a:	f001 f849 	bl	801ea00 <__lshift>
 801d96e:	4607      	mov	r7, r0
 801d970:	9b06      	ldr	r3, [sp, #24]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d05c      	beq.n	801da30 <_dtoa_r+0xa78>
 801d976:	6879      	ldr	r1, [r7, #4]
 801d978:	4620      	mov	r0, r4
 801d97a:	f000 fde5 	bl	801e548 <_Balloc>
 801d97e:	4605      	mov	r5, r0
 801d980:	b928      	cbnz	r0, 801d98e <_dtoa_r+0x9d6>
 801d982:	4b80      	ldr	r3, [pc, #512]	; (801db84 <_dtoa_r+0xbcc>)
 801d984:	4602      	mov	r2, r0
 801d986:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d98a:	f7ff bb2e 	b.w	801cfea <_dtoa_r+0x32>
 801d98e:	693a      	ldr	r2, [r7, #16]
 801d990:	3202      	adds	r2, #2
 801d992:	0092      	lsls	r2, r2, #2
 801d994:	f107 010c 	add.w	r1, r7, #12
 801d998:	300c      	adds	r0, #12
 801d99a:	f7fd f8af 	bl	801aafc <memcpy>
 801d99e:	2201      	movs	r2, #1
 801d9a0:	4629      	mov	r1, r5
 801d9a2:	4620      	mov	r0, r4
 801d9a4:	f001 f82c 	bl	801ea00 <__lshift>
 801d9a8:	9b00      	ldr	r3, [sp, #0]
 801d9aa:	3301      	adds	r3, #1
 801d9ac:	9301      	str	r3, [sp, #4]
 801d9ae:	9b00      	ldr	r3, [sp, #0]
 801d9b0:	444b      	add	r3, r9
 801d9b2:	9307      	str	r3, [sp, #28]
 801d9b4:	9b02      	ldr	r3, [sp, #8]
 801d9b6:	f003 0301 	and.w	r3, r3, #1
 801d9ba:	46b8      	mov	r8, r7
 801d9bc:	9306      	str	r3, [sp, #24]
 801d9be:	4607      	mov	r7, r0
 801d9c0:	9b01      	ldr	r3, [sp, #4]
 801d9c2:	4631      	mov	r1, r6
 801d9c4:	3b01      	subs	r3, #1
 801d9c6:	4658      	mov	r0, fp
 801d9c8:	9302      	str	r3, [sp, #8]
 801d9ca:	f7ff fa67 	bl	801ce9c <quorem>
 801d9ce:	4603      	mov	r3, r0
 801d9d0:	3330      	adds	r3, #48	; 0x30
 801d9d2:	9004      	str	r0, [sp, #16]
 801d9d4:	4641      	mov	r1, r8
 801d9d6:	4658      	mov	r0, fp
 801d9d8:	9308      	str	r3, [sp, #32]
 801d9da:	f001 f87d 	bl	801ead8 <__mcmp>
 801d9de:	463a      	mov	r2, r7
 801d9e0:	4681      	mov	r9, r0
 801d9e2:	4631      	mov	r1, r6
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f001 f893 	bl	801eb10 <__mdiff>
 801d9ea:	68c2      	ldr	r2, [r0, #12]
 801d9ec:	9b08      	ldr	r3, [sp, #32]
 801d9ee:	4605      	mov	r5, r0
 801d9f0:	bb02      	cbnz	r2, 801da34 <_dtoa_r+0xa7c>
 801d9f2:	4601      	mov	r1, r0
 801d9f4:	4658      	mov	r0, fp
 801d9f6:	f001 f86f 	bl	801ead8 <__mcmp>
 801d9fa:	9b08      	ldr	r3, [sp, #32]
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	4629      	mov	r1, r5
 801da00:	4620      	mov	r0, r4
 801da02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801da06:	f000 fddf 	bl	801e5c8 <_Bfree>
 801da0a:	9b05      	ldr	r3, [sp, #20]
 801da0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da0e:	9d01      	ldr	r5, [sp, #4]
 801da10:	ea43 0102 	orr.w	r1, r3, r2
 801da14:	9b06      	ldr	r3, [sp, #24]
 801da16:	430b      	orrs	r3, r1
 801da18:	9b08      	ldr	r3, [sp, #32]
 801da1a:	d10d      	bne.n	801da38 <_dtoa_r+0xa80>
 801da1c:	2b39      	cmp	r3, #57	; 0x39
 801da1e:	d029      	beq.n	801da74 <_dtoa_r+0xabc>
 801da20:	f1b9 0f00 	cmp.w	r9, #0
 801da24:	dd01      	ble.n	801da2a <_dtoa_r+0xa72>
 801da26:	9b04      	ldr	r3, [sp, #16]
 801da28:	3331      	adds	r3, #49	; 0x31
 801da2a:	9a02      	ldr	r2, [sp, #8]
 801da2c:	7013      	strb	r3, [r2, #0]
 801da2e:	e774      	b.n	801d91a <_dtoa_r+0x962>
 801da30:	4638      	mov	r0, r7
 801da32:	e7b9      	b.n	801d9a8 <_dtoa_r+0x9f0>
 801da34:	2201      	movs	r2, #1
 801da36:	e7e2      	b.n	801d9fe <_dtoa_r+0xa46>
 801da38:	f1b9 0f00 	cmp.w	r9, #0
 801da3c:	db06      	blt.n	801da4c <_dtoa_r+0xa94>
 801da3e:	9905      	ldr	r1, [sp, #20]
 801da40:	ea41 0909 	orr.w	r9, r1, r9
 801da44:	9906      	ldr	r1, [sp, #24]
 801da46:	ea59 0101 	orrs.w	r1, r9, r1
 801da4a:	d120      	bne.n	801da8e <_dtoa_r+0xad6>
 801da4c:	2a00      	cmp	r2, #0
 801da4e:	ddec      	ble.n	801da2a <_dtoa_r+0xa72>
 801da50:	4659      	mov	r1, fp
 801da52:	2201      	movs	r2, #1
 801da54:	4620      	mov	r0, r4
 801da56:	9301      	str	r3, [sp, #4]
 801da58:	f000 ffd2 	bl	801ea00 <__lshift>
 801da5c:	4631      	mov	r1, r6
 801da5e:	4683      	mov	fp, r0
 801da60:	f001 f83a 	bl	801ead8 <__mcmp>
 801da64:	2800      	cmp	r0, #0
 801da66:	9b01      	ldr	r3, [sp, #4]
 801da68:	dc02      	bgt.n	801da70 <_dtoa_r+0xab8>
 801da6a:	d1de      	bne.n	801da2a <_dtoa_r+0xa72>
 801da6c:	07da      	lsls	r2, r3, #31
 801da6e:	d5dc      	bpl.n	801da2a <_dtoa_r+0xa72>
 801da70:	2b39      	cmp	r3, #57	; 0x39
 801da72:	d1d8      	bne.n	801da26 <_dtoa_r+0xa6e>
 801da74:	9a02      	ldr	r2, [sp, #8]
 801da76:	2339      	movs	r3, #57	; 0x39
 801da78:	7013      	strb	r3, [r2, #0]
 801da7a:	462b      	mov	r3, r5
 801da7c:	461d      	mov	r5, r3
 801da7e:	3b01      	subs	r3, #1
 801da80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801da84:	2a39      	cmp	r2, #57	; 0x39
 801da86:	d050      	beq.n	801db2a <_dtoa_r+0xb72>
 801da88:	3201      	adds	r2, #1
 801da8a:	701a      	strb	r2, [r3, #0]
 801da8c:	e745      	b.n	801d91a <_dtoa_r+0x962>
 801da8e:	2a00      	cmp	r2, #0
 801da90:	dd03      	ble.n	801da9a <_dtoa_r+0xae2>
 801da92:	2b39      	cmp	r3, #57	; 0x39
 801da94:	d0ee      	beq.n	801da74 <_dtoa_r+0xabc>
 801da96:	3301      	adds	r3, #1
 801da98:	e7c7      	b.n	801da2a <_dtoa_r+0xa72>
 801da9a:	9a01      	ldr	r2, [sp, #4]
 801da9c:	9907      	ldr	r1, [sp, #28]
 801da9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801daa2:	428a      	cmp	r2, r1
 801daa4:	d02a      	beq.n	801dafc <_dtoa_r+0xb44>
 801daa6:	4659      	mov	r1, fp
 801daa8:	2300      	movs	r3, #0
 801daaa:	220a      	movs	r2, #10
 801daac:	4620      	mov	r0, r4
 801daae:	f000 fdad 	bl	801e60c <__multadd>
 801dab2:	45b8      	cmp	r8, r7
 801dab4:	4683      	mov	fp, r0
 801dab6:	f04f 0300 	mov.w	r3, #0
 801daba:	f04f 020a 	mov.w	r2, #10
 801dabe:	4641      	mov	r1, r8
 801dac0:	4620      	mov	r0, r4
 801dac2:	d107      	bne.n	801dad4 <_dtoa_r+0xb1c>
 801dac4:	f000 fda2 	bl	801e60c <__multadd>
 801dac8:	4680      	mov	r8, r0
 801daca:	4607      	mov	r7, r0
 801dacc:	9b01      	ldr	r3, [sp, #4]
 801dace:	3301      	adds	r3, #1
 801dad0:	9301      	str	r3, [sp, #4]
 801dad2:	e775      	b.n	801d9c0 <_dtoa_r+0xa08>
 801dad4:	f000 fd9a 	bl	801e60c <__multadd>
 801dad8:	4639      	mov	r1, r7
 801dada:	4680      	mov	r8, r0
 801dadc:	2300      	movs	r3, #0
 801dade:	220a      	movs	r2, #10
 801dae0:	4620      	mov	r0, r4
 801dae2:	f000 fd93 	bl	801e60c <__multadd>
 801dae6:	4607      	mov	r7, r0
 801dae8:	e7f0      	b.n	801dacc <_dtoa_r+0xb14>
 801daea:	f1b9 0f00 	cmp.w	r9, #0
 801daee:	9a00      	ldr	r2, [sp, #0]
 801daf0:	bfcc      	ite	gt
 801daf2:	464d      	movgt	r5, r9
 801daf4:	2501      	movle	r5, #1
 801daf6:	4415      	add	r5, r2
 801daf8:	f04f 0800 	mov.w	r8, #0
 801dafc:	4659      	mov	r1, fp
 801dafe:	2201      	movs	r2, #1
 801db00:	4620      	mov	r0, r4
 801db02:	9301      	str	r3, [sp, #4]
 801db04:	f000 ff7c 	bl	801ea00 <__lshift>
 801db08:	4631      	mov	r1, r6
 801db0a:	4683      	mov	fp, r0
 801db0c:	f000 ffe4 	bl	801ead8 <__mcmp>
 801db10:	2800      	cmp	r0, #0
 801db12:	dcb2      	bgt.n	801da7a <_dtoa_r+0xac2>
 801db14:	d102      	bne.n	801db1c <_dtoa_r+0xb64>
 801db16:	9b01      	ldr	r3, [sp, #4]
 801db18:	07db      	lsls	r3, r3, #31
 801db1a:	d4ae      	bmi.n	801da7a <_dtoa_r+0xac2>
 801db1c:	462b      	mov	r3, r5
 801db1e:	461d      	mov	r5, r3
 801db20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801db24:	2a30      	cmp	r2, #48	; 0x30
 801db26:	d0fa      	beq.n	801db1e <_dtoa_r+0xb66>
 801db28:	e6f7      	b.n	801d91a <_dtoa_r+0x962>
 801db2a:	9a00      	ldr	r2, [sp, #0]
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d1a5      	bne.n	801da7c <_dtoa_r+0xac4>
 801db30:	f10a 0a01 	add.w	sl, sl, #1
 801db34:	2331      	movs	r3, #49	; 0x31
 801db36:	e779      	b.n	801da2c <_dtoa_r+0xa74>
 801db38:	4b13      	ldr	r3, [pc, #76]	; (801db88 <_dtoa_r+0xbd0>)
 801db3a:	f7ff baaf 	b.w	801d09c <_dtoa_r+0xe4>
 801db3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db40:	2b00      	cmp	r3, #0
 801db42:	f47f aa86 	bne.w	801d052 <_dtoa_r+0x9a>
 801db46:	4b11      	ldr	r3, [pc, #68]	; (801db8c <_dtoa_r+0xbd4>)
 801db48:	f7ff baa8 	b.w	801d09c <_dtoa_r+0xe4>
 801db4c:	f1b9 0f00 	cmp.w	r9, #0
 801db50:	dc03      	bgt.n	801db5a <_dtoa_r+0xba2>
 801db52:	9b05      	ldr	r3, [sp, #20]
 801db54:	2b02      	cmp	r3, #2
 801db56:	f73f aec9 	bgt.w	801d8ec <_dtoa_r+0x934>
 801db5a:	9d00      	ldr	r5, [sp, #0]
 801db5c:	4631      	mov	r1, r6
 801db5e:	4658      	mov	r0, fp
 801db60:	f7ff f99c 	bl	801ce9c <quorem>
 801db64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801db68:	f805 3b01 	strb.w	r3, [r5], #1
 801db6c:	9a00      	ldr	r2, [sp, #0]
 801db6e:	1aaa      	subs	r2, r5, r2
 801db70:	4591      	cmp	r9, r2
 801db72:	ddba      	ble.n	801daea <_dtoa_r+0xb32>
 801db74:	4659      	mov	r1, fp
 801db76:	2300      	movs	r3, #0
 801db78:	220a      	movs	r2, #10
 801db7a:	4620      	mov	r0, r4
 801db7c:	f000 fd46 	bl	801e60c <__multadd>
 801db80:	4683      	mov	fp, r0
 801db82:	e7eb      	b.n	801db5c <_dtoa_r+0xba4>
 801db84:	08021d87 	.word	0x08021d87
 801db88:	08021f89 	.word	0x08021f89
 801db8c:	08021d04 	.word	0x08021d04

0801db90 <__sflush_r>:
 801db90:	898a      	ldrh	r2, [r1, #12]
 801db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db96:	4605      	mov	r5, r0
 801db98:	0710      	lsls	r0, r2, #28
 801db9a:	460c      	mov	r4, r1
 801db9c:	d458      	bmi.n	801dc50 <__sflush_r+0xc0>
 801db9e:	684b      	ldr	r3, [r1, #4]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	dc05      	bgt.n	801dbb0 <__sflush_r+0x20>
 801dba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	dc02      	bgt.n	801dbb0 <__sflush_r+0x20>
 801dbaa:	2000      	movs	r0, #0
 801dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbb2:	2e00      	cmp	r6, #0
 801dbb4:	d0f9      	beq.n	801dbaa <__sflush_r+0x1a>
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbbc:	682f      	ldr	r7, [r5, #0]
 801dbbe:	602b      	str	r3, [r5, #0]
 801dbc0:	d032      	beq.n	801dc28 <__sflush_r+0x98>
 801dbc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbc4:	89a3      	ldrh	r3, [r4, #12]
 801dbc6:	075a      	lsls	r2, r3, #29
 801dbc8:	d505      	bpl.n	801dbd6 <__sflush_r+0x46>
 801dbca:	6863      	ldr	r3, [r4, #4]
 801dbcc:	1ac0      	subs	r0, r0, r3
 801dbce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbd0:	b10b      	cbz	r3, 801dbd6 <__sflush_r+0x46>
 801dbd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbd4:	1ac0      	subs	r0, r0, r3
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	4602      	mov	r2, r0
 801dbda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbdc:	6a21      	ldr	r1, [r4, #32]
 801dbde:	4628      	mov	r0, r5
 801dbe0:	47b0      	blx	r6
 801dbe2:	1c43      	adds	r3, r0, #1
 801dbe4:	89a3      	ldrh	r3, [r4, #12]
 801dbe6:	d106      	bne.n	801dbf6 <__sflush_r+0x66>
 801dbe8:	6829      	ldr	r1, [r5, #0]
 801dbea:	291d      	cmp	r1, #29
 801dbec:	d82c      	bhi.n	801dc48 <__sflush_r+0xb8>
 801dbee:	4a2a      	ldr	r2, [pc, #168]	; (801dc98 <__sflush_r+0x108>)
 801dbf0:	40ca      	lsrs	r2, r1
 801dbf2:	07d6      	lsls	r6, r2, #31
 801dbf4:	d528      	bpl.n	801dc48 <__sflush_r+0xb8>
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	6062      	str	r2, [r4, #4]
 801dbfa:	04d9      	lsls	r1, r3, #19
 801dbfc:	6922      	ldr	r2, [r4, #16]
 801dbfe:	6022      	str	r2, [r4, #0]
 801dc00:	d504      	bpl.n	801dc0c <__sflush_r+0x7c>
 801dc02:	1c42      	adds	r2, r0, #1
 801dc04:	d101      	bne.n	801dc0a <__sflush_r+0x7a>
 801dc06:	682b      	ldr	r3, [r5, #0]
 801dc08:	b903      	cbnz	r3, 801dc0c <__sflush_r+0x7c>
 801dc0a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc0e:	602f      	str	r7, [r5, #0]
 801dc10:	2900      	cmp	r1, #0
 801dc12:	d0ca      	beq.n	801dbaa <__sflush_r+0x1a>
 801dc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc18:	4299      	cmp	r1, r3
 801dc1a:	d002      	beq.n	801dc22 <__sflush_r+0x92>
 801dc1c:	4628      	mov	r0, r5
 801dc1e:	f7fc ff9d 	bl	801ab5c <_free_r>
 801dc22:	2000      	movs	r0, #0
 801dc24:	6360      	str	r0, [r4, #52]	; 0x34
 801dc26:	e7c1      	b.n	801dbac <__sflush_r+0x1c>
 801dc28:	6a21      	ldr	r1, [r4, #32]
 801dc2a:	2301      	movs	r3, #1
 801dc2c:	4628      	mov	r0, r5
 801dc2e:	47b0      	blx	r6
 801dc30:	1c41      	adds	r1, r0, #1
 801dc32:	d1c7      	bne.n	801dbc4 <__sflush_r+0x34>
 801dc34:	682b      	ldr	r3, [r5, #0]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d0c4      	beq.n	801dbc4 <__sflush_r+0x34>
 801dc3a:	2b1d      	cmp	r3, #29
 801dc3c:	d001      	beq.n	801dc42 <__sflush_r+0xb2>
 801dc3e:	2b16      	cmp	r3, #22
 801dc40:	d101      	bne.n	801dc46 <__sflush_r+0xb6>
 801dc42:	602f      	str	r7, [r5, #0]
 801dc44:	e7b1      	b.n	801dbaa <__sflush_r+0x1a>
 801dc46:	89a3      	ldrh	r3, [r4, #12]
 801dc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc4c:	81a3      	strh	r3, [r4, #12]
 801dc4e:	e7ad      	b.n	801dbac <__sflush_r+0x1c>
 801dc50:	690f      	ldr	r7, [r1, #16]
 801dc52:	2f00      	cmp	r7, #0
 801dc54:	d0a9      	beq.n	801dbaa <__sflush_r+0x1a>
 801dc56:	0793      	lsls	r3, r2, #30
 801dc58:	680e      	ldr	r6, [r1, #0]
 801dc5a:	bf08      	it	eq
 801dc5c:	694b      	ldreq	r3, [r1, #20]
 801dc5e:	600f      	str	r7, [r1, #0]
 801dc60:	bf18      	it	ne
 801dc62:	2300      	movne	r3, #0
 801dc64:	eba6 0807 	sub.w	r8, r6, r7
 801dc68:	608b      	str	r3, [r1, #8]
 801dc6a:	f1b8 0f00 	cmp.w	r8, #0
 801dc6e:	dd9c      	ble.n	801dbaa <__sflush_r+0x1a>
 801dc70:	6a21      	ldr	r1, [r4, #32]
 801dc72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc74:	4643      	mov	r3, r8
 801dc76:	463a      	mov	r2, r7
 801dc78:	4628      	mov	r0, r5
 801dc7a:	47b0      	blx	r6
 801dc7c:	2800      	cmp	r0, #0
 801dc7e:	dc06      	bgt.n	801dc8e <__sflush_r+0xfe>
 801dc80:	89a3      	ldrh	r3, [r4, #12]
 801dc82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc86:	81a3      	strh	r3, [r4, #12]
 801dc88:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8c:	e78e      	b.n	801dbac <__sflush_r+0x1c>
 801dc8e:	4407      	add	r7, r0
 801dc90:	eba8 0800 	sub.w	r8, r8, r0
 801dc94:	e7e9      	b.n	801dc6a <__sflush_r+0xda>
 801dc96:	bf00      	nop
 801dc98:	20400001 	.word	0x20400001

0801dc9c <_fflush_r>:
 801dc9c:	b538      	push	{r3, r4, r5, lr}
 801dc9e:	690b      	ldr	r3, [r1, #16]
 801dca0:	4605      	mov	r5, r0
 801dca2:	460c      	mov	r4, r1
 801dca4:	b913      	cbnz	r3, 801dcac <_fflush_r+0x10>
 801dca6:	2500      	movs	r5, #0
 801dca8:	4628      	mov	r0, r5
 801dcaa:	bd38      	pop	{r3, r4, r5, pc}
 801dcac:	b118      	cbz	r0, 801dcb6 <_fflush_r+0x1a>
 801dcae:	6983      	ldr	r3, [r0, #24]
 801dcb0:	b90b      	cbnz	r3, 801dcb6 <_fflush_r+0x1a>
 801dcb2:	f7fc fe55 	bl	801a960 <__sinit>
 801dcb6:	4b14      	ldr	r3, [pc, #80]	; (801dd08 <_fflush_r+0x6c>)
 801dcb8:	429c      	cmp	r4, r3
 801dcba:	d11b      	bne.n	801dcf4 <_fflush_r+0x58>
 801dcbc:	686c      	ldr	r4, [r5, #4]
 801dcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d0ef      	beq.n	801dca6 <_fflush_r+0xa>
 801dcc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dcc8:	07d0      	lsls	r0, r2, #31
 801dcca:	d404      	bmi.n	801dcd6 <_fflush_r+0x3a>
 801dccc:	0599      	lsls	r1, r3, #22
 801dcce:	d402      	bmi.n	801dcd6 <_fflush_r+0x3a>
 801dcd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcd2:	f7fc ff08 	bl	801aae6 <__retarget_lock_acquire_recursive>
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	4621      	mov	r1, r4
 801dcda:	f7ff ff59 	bl	801db90 <__sflush_r>
 801dcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dce0:	07da      	lsls	r2, r3, #31
 801dce2:	4605      	mov	r5, r0
 801dce4:	d4e0      	bmi.n	801dca8 <_fflush_r+0xc>
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	059b      	lsls	r3, r3, #22
 801dcea:	d4dd      	bmi.n	801dca8 <_fflush_r+0xc>
 801dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcee:	f7fc fefb 	bl	801aae8 <__retarget_lock_release_recursive>
 801dcf2:	e7d9      	b.n	801dca8 <_fflush_r+0xc>
 801dcf4:	4b05      	ldr	r3, [pc, #20]	; (801dd0c <_fflush_r+0x70>)
 801dcf6:	429c      	cmp	r4, r3
 801dcf8:	d101      	bne.n	801dcfe <_fflush_r+0x62>
 801dcfa:	68ac      	ldr	r4, [r5, #8]
 801dcfc:	e7df      	b.n	801dcbe <_fflush_r+0x22>
 801dcfe:	4b04      	ldr	r3, [pc, #16]	; (801dd10 <_fflush_r+0x74>)
 801dd00:	429c      	cmp	r4, r3
 801dd02:	bf08      	it	eq
 801dd04:	68ec      	ldreq	r4, [r5, #12]
 801dd06:	e7da      	b.n	801dcbe <_fflush_r+0x22>
 801dd08:	08021bfc 	.word	0x08021bfc
 801dd0c:	08021c1c 	.word	0x08021c1c
 801dd10:	08021bdc 	.word	0x08021bdc

0801dd14 <fiprintf>:
 801dd14:	b40e      	push	{r1, r2, r3}
 801dd16:	b503      	push	{r0, r1, lr}
 801dd18:	4601      	mov	r1, r0
 801dd1a:	ab03      	add	r3, sp, #12
 801dd1c:	4805      	ldr	r0, [pc, #20]	; (801dd34 <fiprintf+0x20>)
 801dd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd22:	6800      	ldr	r0, [r0, #0]
 801dd24:	9301      	str	r3, [sp, #4]
 801dd26:	f001 fc57 	bl	801f5d8 <_vfiprintf_r>
 801dd2a:	b002      	add	sp, #8
 801dd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd30:	b003      	add	sp, #12
 801dd32:	4770      	bx	lr
 801dd34:	200001f8 	.word	0x200001f8

0801dd38 <rshift>:
 801dd38:	6903      	ldr	r3, [r0, #16]
 801dd3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801dd3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd42:	ea4f 1261 	mov.w	r2, r1, asr #5
 801dd46:	f100 0414 	add.w	r4, r0, #20
 801dd4a:	dd45      	ble.n	801ddd8 <rshift+0xa0>
 801dd4c:	f011 011f 	ands.w	r1, r1, #31
 801dd50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801dd54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801dd58:	d10c      	bne.n	801dd74 <rshift+0x3c>
 801dd5a:	f100 0710 	add.w	r7, r0, #16
 801dd5e:	4629      	mov	r1, r5
 801dd60:	42b1      	cmp	r1, r6
 801dd62:	d334      	bcc.n	801ddce <rshift+0x96>
 801dd64:	1a9b      	subs	r3, r3, r2
 801dd66:	009b      	lsls	r3, r3, #2
 801dd68:	1eea      	subs	r2, r5, #3
 801dd6a:	4296      	cmp	r6, r2
 801dd6c:	bf38      	it	cc
 801dd6e:	2300      	movcc	r3, #0
 801dd70:	4423      	add	r3, r4
 801dd72:	e015      	b.n	801dda0 <rshift+0x68>
 801dd74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801dd78:	f1c1 0820 	rsb	r8, r1, #32
 801dd7c:	40cf      	lsrs	r7, r1
 801dd7e:	f105 0e04 	add.w	lr, r5, #4
 801dd82:	46a1      	mov	r9, r4
 801dd84:	4576      	cmp	r6, lr
 801dd86:	46f4      	mov	ip, lr
 801dd88:	d815      	bhi.n	801ddb6 <rshift+0x7e>
 801dd8a:	1a9b      	subs	r3, r3, r2
 801dd8c:	009a      	lsls	r2, r3, #2
 801dd8e:	3a04      	subs	r2, #4
 801dd90:	3501      	adds	r5, #1
 801dd92:	42ae      	cmp	r6, r5
 801dd94:	bf38      	it	cc
 801dd96:	2200      	movcc	r2, #0
 801dd98:	18a3      	adds	r3, r4, r2
 801dd9a:	50a7      	str	r7, [r4, r2]
 801dd9c:	b107      	cbz	r7, 801dda0 <rshift+0x68>
 801dd9e:	3304      	adds	r3, #4
 801dda0:	1b1a      	subs	r2, r3, r4
 801dda2:	42a3      	cmp	r3, r4
 801dda4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801dda8:	bf08      	it	eq
 801ddaa:	2300      	moveq	r3, #0
 801ddac:	6102      	str	r2, [r0, #16]
 801ddae:	bf08      	it	eq
 801ddb0:	6143      	streq	r3, [r0, #20]
 801ddb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ddb6:	f8dc c000 	ldr.w	ip, [ip]
 801ddba:	fa0c fc08 	lsl.w	ip, ip, r8
 801ddbe:	ea4c 0707 	orr.w	r7, ip, r7
 801ddc2:	f849 7b04 	str.w	r7, [r9], #4
 801ddc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ddca:	40cf      	lsrs	r7, r1
 801ddcc:	e7da      	b.n	801dd84 <rshift+0x4c>
 801ddce:	f851 cb04 	ldr.w	ip, [r1], #4
 801ddd2:	f847 cf04 	str.w	ip, [r7, #4]!
 801ddd6:	e7c3      	b.n	801dd60 <rshift+0x28>
 801ddd8:	4623      	mov	r3, r4
 801ddda:	e7e1      	b.n	801dda0 <rshift+0x68>

0801dddc <__hexdig_fun>:
 801dddc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801dde0:	2b09      	cmp	r3, #9
 801dde2:	d802      	bhi.n	801ddea <__hexdig_fun+0xe>
 801dde4:	3820      	subs	r0, #32
 801dde6:	b2c0      	uxtb	r0, r0
 801dde8:	4770      	bx	lr
 801ddea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ddee:	2b05      	cmp	r3, #5
 801ddf0:	d801      	bhi.n	801ddf6 <__hexdig_fun+0x1a>
 801ddf2:	3847      	subs	r0, #71	; 0x47
 801ddf4:	e7f7      	b.n	801dde6 <__hexdig_fun+0xa>
 801ddf6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ddfa:	2b05      	cmp	r3, #5
 801ddfc:	d801      	bhi.n	801de02 <__hexdig_fun+0x26>
 801ddfe:	3827      	subs	r0, #39	; 0x27
 801de00:	e7f1      	b.n	801dde6 <__hexdig_fun+0xa>
 801de02:	2000      	movs	r0, #0
 801de04:	4770      	bx	lr
	...

0801de08 <__gethex>:
 801de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de0c:	ed2d 8b02 	vpush	{d8}
 801de10:	b089      	sub	sp, #36	; 0x24
 801de12:	ee08 0a10 	vmov	s16, r0
 801de16:	9304      	str	r3, [sp, #16]
 801de18:	4bbc      	ldr	r3, [pc, #752]	; (801e10c <__gethex+0x304>)
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	9301      	str	r3, [sp, #4]
 801de1e:	4618      	mov	r0, r3
 801de20:	468b      	mov	fp, r1
 801de22:	4690      	mov	r8, r2
 801de24:	f7e2 f9e4 	bl	80001f0 <strlen>
 801de28:	9b01      	ldr	r3, [sp, #4]
 801de2a:	f8db 2000 	ldr.w	r2, [fp]
 801de2e:	4403      	add	r3, r0
 801de30:	4682      	mov	sl, r0
 801de32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801de36:	9305      	str	r3, [sp, #20]
 801de38:	1c93      	adds	r3, r2, #2
 801de3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801de3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801de42:	32fe      	adds	r2, #254	; 0xfe
 801de44:	18d1      	adds	r1, r2, r3
 801de46:	461f      	mov	r7, r3
 801de48:	f813 0b01 	ldrb.w	r0, [r3], #1
 801de4c:	9100      	str	r1, [sp, #0]
 801de4e:	2830      	cmp	r0, #48	; 0x30
 801de50:	d0f8      	beq.n	801de44 <__gethex+0x3c>
 801de52:	f7ff ffc3 	bl	801dddc <__hexdig_fun>
 801de56:	4604      	mov	r4, r0
 801de58:	2800      	cmp	r0, #0
 801de5a:	d13a      	bne.n	801ded2 <__gethex+0xca>
 801de5c:	9901      	ldr	r1, [sp, #4]
 801de5e:	4652      	mov	r2, sl
 801de60:	4638      	mov	r0, r7
 801de62:	f7fd ff8a 	bl	801bd7a <strncmp>
 801de66:	4605      	mov	r5, r0
 801de68:	2800      	cmp	r0, #0
 801de6a:	d168      	bne.n	801df3e <__gethex+0x136>
 801de6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801de70:	eb07 060a 	add.w	r6, r7, sl
 801de74:	f7ff ffb2 	bl	801dddc <__hexdig_fun>
 801de78:	2800      	cmp	r0, #0
 801de7a:	d062      	beq.n	801df42 <__gethex+0x13a>
 801de7c:	4633      	mov	r3, r6
 801de7e:	7818      	ldrb	r0, [r3, #0]
 801de80:	2830      	cmp	r0, #48	; 0x30
 801de82:	461f      	mov	r7, r3
 801de84:	f103 0301 	add.w	r3, r3, #1
 801de88:	d0f9      	beq.n	801de7e <__gethex+0x76>
 801de8a:	f7ff ffa7 	bl	801dddc <__hexdig_fun>
 801de8e:	2301      	movs	r3, #1
 801de90:	fab0 f480 	clz	r4, r0
 801de94:	0964      	lsrs	r4, r4, #5
 801de96:	4635      	mov	r5, r6
 801de98:	9300      	str	r3, [sp, #0]
 801de9a:	463a      	mov	r2, r7
 801de9c:	4616      	mov	r6, r2
 801de9e:	3201      	adds	r2, #1
 801dea0:	7830      	ldrb	r0, [r6, #0]
 801dea2:	f7ff ff9b 	bl	801dddc <__hexdig_fun>
 801dea6:	2800      	cmp	r0, #0
 801dea8:	d1f8      	bne.n	801de9c <__gethex+0x94>
 801deaa:	9901      	ldr	r1, [sp, #4]
 801deac:	4652      	mov	r2, sl
 801deae:	4630      	mov	r0, r6
 801deb0:	f7fd ff63 	bl	801bd7a <strncmp>
 801deb4:	b980      	cbnz	r0, 801ded8 <__gethex+0xd0>
 801deb6:	b94d      	cbnz	r5, 801decc <__gethex+0xc4>
 801deb8:	eb06 050a 	add.w	r5, r6, sl
 801debc:	462a      	mov	r2, r5
 801debe:	4616      	mov	r6, r2
 801dec0:	3201      	adds	r2, #1
 801dec2:	7830      	ldrb	r0, [r6, #0]
 801dec4:	f7ff ff8a 	bl	801dddc <__hexdig_fun>
 801dec8:	2800      	cmp	r0, #0
 801deca:	d1f8      	bne.n	801debe <__gethex+0xb6>
 801decc:	1bad      	subs	r5, r5, r6
 801dece:	00ad      	lsls	r5, r5, #2
 801ded0:	e004      	b.n	801dedc <__gethex+0xd4>
 801ded2:	2400      	movs	r4, #0
 801ded4:	4625      	mov	r5, r4
 801ded6:	e7e0      	b.n	801de9a <__gethex+0x92>
 801ded8:	2d00      	cmp	r5, #0
 801deda:	d1f7      	bne.n	801decc <__gethex+0xc4>
 801dedc:	7833      	ldrb	r3, [r6, #0]
 801dede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dee2:	2b50      	cmp	r3, #80	; 0x50
 801dee4:	d13b      	bne.n	801df5e <__gethex+0x156>
 801dee6:	7873      	ldrb	r3, [r6, #1]
 801dee8:	2b2b      	cmp	r3, #43	; 0x2b
 801deea:	d02c      	beq.n	801df46 <__gethex+0x13e>
 801deec:	2b2d      	cmp	r3, #45	; 0x2d
 801deee:	d02e      	beq.n	801df4e <__gethex+0x146>
 801def0:	1c71      	adds	r1, r6, #1
 801def2:	f04f 0900 	mov.w	r9, #0
 801def6:	7808      	ldrb	r0, [r1, #0]
 801def8:	f7ff ff70 	bl	801dddc <__hexdig_fun>
 801defc:	1e43      	subs	r3, r0, #1
 801defe:	b2db      	uxtb	r3, r3
 801df00:	2b18      	cmp	r3, #24
 801df02:	d82c      	bhi.n	801df5e <__gethex+0x156>
 801df04:	f1a0 0210 	sub.w	r2, r0, #16
 801df08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df0c:	f7ff ff66 	bl	801dddc <__hexdig_fun>
 801df10:	1e43      	subs	r3, r0, #1
 801df12:	b2db      	uxtb	r3, r3
 801df14:	2b18      	cmp	r3, #24
 801df16:	d91d      	bls.n	801df54 <__gethex+0x14c>
 801df18:	f1b9 0f00 	cmp.w	r9, #0
 801df1c:	d000      	beq.n	801df20 <__gethex+0x118>
 801df1e:	4252      	negs	r2, r2
 801df20:	4415      	add	r5, r2
 801df22:	f8cb 1000 	str.w	r1, [fp]
 801df26:	b1e4      	cbz	r4, 801df62 <__gethex+0x15a>
 801df28:	9b00      	ldr	r3, [sp, #0]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	bf14      	ite	ne
 801df2e:	2700      	movne	r7, #0
 801df30:	2706      	moveq	r7, #6
 801df32:	4638      	mov	r0, r7
 801df34:	b009      	add	sp, #36	; 0x24
 801df36:	ecbd 8b02 	vpop	{d8}
 801df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3e:	463e      	mov	r6, r7
 801df40:	4625      	mov	r5, r4
 801df42:	2401      	movs	r4, #1
 801df44:	e7ca      	b.n	801dedc <__gethex+0xd4>
 801df46:	f04f 0900 	mov.w	r9, #0
 801df4a:	1cb1      	adds	r1, r6, #2
 801df4c:	e7d3      	b.n	801def6 <__gethex+0xee>
 801df4e:	f04f 0901 	mov.w	r9, #1
 801df52:	e7fa      	b.n	801df4a <__gethex+0x142>
 801df54:	230a      	movs	r3, #10
 801df56:	fb03 0202 	mla	r2, r3, r2, r0
 801df5a:	3a10      	subs	r2, #16
 801df5c:	e7d4      	b.n	801df08 <__gethex+0x100>
 801df5e:	4631      	mov	r1, r6
 801df60:	e7df      	b.n	801df22 <__gethex+0x11a>
 801df62:	1bf3      	subs	r3, r6, r7
 801df64:	3b01      	subs	r3, #1
 801df66:	4621      	mov	r1, r4
 801df68:	2b07      	cmp	r3, #7
 801df6a:	dc0b      	bgt.n	801df84 <__gethex+0x17c>
 801df6c:	ee18 0a10 	vmov	r0, s16
 801df70:	f000 faea 	bl	801e548 <_Balloc>
 801df74:	4604      	mov	r4, r0
 801df76:	b940      	cbnz	r0, 801df8a <__gethex+0x182>
 801df78:	4b65      	ldr	r3, [pc, #404]	; (801e110 <__gethex+0x308>)
 801df7a:	4602      	mov	r2, r0
 801df7c:	21de      	movs	r1, #222	; 0xde
 801df7e:	4865      	ldr	r0, [pc, #404]	; (801e114 <__gethex+0x30c>)
 801df80:	f7fe ff5e 	bl	801ce40 <__assert_func>
 801df84:	3101      	adds	r1, #1
 801df86:	105b      	asrs	r3, r3, #1
 801df88:	e7ee      	b.n	801df68 <__gethex+0x160>
 801df8a:	f100 0914 	add.w	r9, r0, #20
 801df8e:	f04f 0b00 	mov.w	fp, #0
 801df92:	f1ca 0301 	rsb	r3, sl, #1
 801df96:	f8cd 9008 	str.w	r9, [sp, #8]
 801df9a:	f8cd b000 	str.w	fp, [sp]
 801df9e:	9306      	str	r3, [sp, #24]
 801dfa0:	42b7      	cmp	r7, r6
 801dfa2:	d340      	bcc.n	801e026 <__gethex+0x21e>
 801dfa4:	9802      	ldr	r0, [sp, #8]
 801dfa6:	9b00      	ldr	r3, [sp, #0]
 801dfa8:	f840 3b04 	str.w	r3, [r0], #4
 801dfac:	eba0 0009 	sub.w	r0, r0, r9
 801dfb0:	1080      	asrs	r0, r0, #2
 801dfb2:	0146      	lsls	r6, r0, #5
 801dfb4:	6120      	str	r0, [r4, #16]
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	f000 fbbc 	bl	801e734 <__hi0bits>
 801dfbc:	1a30      	subs	r0, r6, r0
 801dfbe:	f8d8 6000 	ldr.w	r6, [r8]
 801dfc2:	42b0      	cmp	r0, r6
 801dfc4:	dd63      	ble.n	801e08e <__gethex+0x286>
 801dfc6:	1b87      	subs	r7, r0, r6
 801dfc8:	4639      	mov	r1, r7
 801dfca:	4620      	mov	r0, r4
 801dfcc:	f000 ff56 	bl	801ee7c <__any_on>
 801dfd0:	4682      	mov	sl, r0
 801dfd2:	b1a8      	cbz	r0, 801e000 <__gethex+0x1f8>
 801dfd4:	1e7b      	subs	r3, r7, #1
 801dfd6:	1159      	asrs	r1, r3, #5
 801dfd8:	f003 021f 	and.w	r2, r3, #31
 801dfdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801dfe0:	f04f 0a01 	mov.w	sl, #1
 801dfe4:	fa0a f202 	lsl.w	r2, sl, r2
 801dfe8:	420a      	tst	r2, r1
 801dfea:	d009      	beq.n	801e000 <__gethex+0x1f8>
 801dfec:	4553      	cmp	r3, sl
 801dfee:	dd05      	ble.n	801dffc <__gethex+0x1f4>
 801dff0:	1eb9      	subs	r1, r7, #2
 801dff2:	4620      	mov	r0, r4
 801dff4:	f000 ff42 	bl	801ee7c <__any_on>
 801dff8:	2800      	cmp	r0, #0
 801dffa:	d145      	bne.n	801e088 <__gethex+0x280>
 801dffc:	f04f 0a02 	mov.w	sl, #2
 801e000:	4639      	mov	r1, r7
 801e002:	4620      	mov	r0, r4
 801e004:	f7ff fe98 	bl	801dd38 <rshift>
 801e008:	443d      	add	r5, r7
 801e00a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e00e:	42ab      	cmp	r3, r5
 801e010:	da4c      	bge.n	801e0ac <__gethex+0x2a4>
 801e012:	ee18 0a10 	vmov	r0, s16
 801e016:	4621      	mov	r1, r4
 801e018:	f000 fad6 	bl	801e5c8 <_Bfree>
 801e01c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e01e:	2300      	movs	r3, #0
 801e020:	6013      	str	r3, [r2, #0]
 801e022:	27a3      	movs	r7, #163	; 0xa3
 801e024:	e785      	b.n	801df32 <__gethex+0x12a>
 801e026:	1e73      	subs	r3, r6, #1
 801e028:	9a05      	ldr	r2, [sp, #20]
 801e02a:	9303      	str	r3, [sp, #12]
 801e02c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e030:	4293      	cmp	r3, r2
 801e032:	d019      	beq.n	801e068 <__gethex+0x260>
 801e034:	f1bb 0f20 	cmp.w	fp, #32
 801e038:	d107      	bne.n	801e04a <__gethex+0x242>
 801e03a:	9b02      	ldr	r3, [sp, #8]
 801e03c:	9a00      	ldr	r2, [sp, #0]
 801e03e:	f843 2b04 	str.w	r2, [r3], #4
 801e042:	9302      	str	r3, [sp, #8]
 801e044:	2300      	movs	r3, #0
 801e046:	9300      	str	r3, [sp, #0]
 801e048:	469b      	mov	fp, r3
 801e04a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e04e:	f7ff fec5 	bl	801dddc <__hexdig_fun>
 801e052:	9b00      	ldr	r3, [sp, #0]
 801e054:	f000 000f 	and.w	r0, r0, #15
 801e058:	fa00 f00b 	lsl.w	r0, r0, fp
 801e05c:	4303      	orrs	r3, r0
 801e05e:	9300      	str	r3, [sp, #0]
 801e060:	f10b 0b04 	add.w	fp, fp, #4
 801e064:	9b03      	ldr	r3, [sp, #12]
 801e066:	e00d      	b.n	801e084 <__gethex+0x27c>
 801e068:	9b03      	ldr	r3, [sp, #12]
 801e06a:	9a06      	ldr	r2, [sp, #24]
 801e06c:	4413      	add	r3, r2
 801e06e:	42bb      	cmp	r3, r7
 801e070:	d3e0      	bcc.n	801e034 <__gethex+0x22c>
 801e072:	4618      	mov	r0, r3
 801e074:	9901      	ldr	r1, [sp, #4]
 801e076:	9307      	str	r3, [sp, #28]
 801e078:	4652      	mov	r2, sl
 801e07a:	f7fd fe7e 	bl	801bd7a <strncmp>
 801e07e:	9b07      	ldr	r3, [sp, #28]
 801e080:	2800      	cmp	r0, #0
 801e082:	d1d7      	bne.n	801e034 <__gethex+0x22c>
 801e084:	461e      	mov	r6, r3
 801e086:	e78b      	b.n	801dfa0 <__gethex+0x198>
 801e088:	f04f 0a03 	mov.w	sl, #3
 801e08c:	e7b8      	b.n	801e000 <__gethex+0x1f8>
 801e08e:	da0a      	bge.n	801e0a6 <__gethex+0x29e>
 801e090:	1a37      	subs	r7, r6, r0
 801e092:	4621      	mov	r1, r4
 801e094:	ee18 0a10 	vmov	r0, s16
 801e098:	463a      	mov	r2, r7
 801e09a:	f000 fcb1 	bl	801ea00 <__lshift>
 801e09e:	1bed      	subs	r5, r5, r7
 801e0a0:	4604      	mov	r4, r0
 801e0a2:	f100 0914 	add.w	r9, r0, #20
 801e0a6:	f04f 0a00 	mov.w	sl, #0
 801e0aa:	e7ae      	b.n	801e00a <__gethex+0x202>
 801e0ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e0b0:	42a8      	cmp	r0, r5
 801e0b2:	dd72      	ble.n	801e19a <__gethex+0x392>
 801e0b4:	1b45      	subs	r5, r0, r5
 801e0b6:	42ae      	cmp	r6, r5
 801e0b8:	dc36      	bgt.n	801e128 <__gethex+0x320>
 801e0ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e0be:	2b02      	cmp	r3, #2
 801e0c0:	d02a      	beq.n	801e118 <__gethex+0x310>
 801e0c2:	2b03      	cmp	r3, #3
 801e0c4:	d02c      	beq.n	801e120 <__gethex+0x318>
 801e0c6:	2b01      	cmp	r3, #1
 801e0c8:	d115      	bne.n	801e0f6 <__gethex+0x2ee>
 801e0ca:	42ae      	cmp	r6, r5
 801e0cc:	d113      	bne.n	801e0f6 <__gethex+0x2ee>
 801e0ce:	2e01      	cmp	r6, #1
 801e0d0:	d10b      	bne.n	801e0ea <__gethex+0x2e2>
 801e0d2:	9a04      	ldr	r2, [sp, #16]
 801e0d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e0d8:	6013      	str	r3, [r2, #0]
 801e0da:	2301      	movs	r3, #1
 801e0dc:	6123      	str	r3, [r4, #16]
 801e0de:	f8c9 3000 	str.w	r3, [r9]
 801e0e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e0e4:	2762      	movs	r7, #98	; 0x62
 801e0e6:	601c      	str	r4, [r3, #0]
 801e0e8:	e723      	b.n	801df32 <__gethex+0x12a>
 801e0ea:	1e71      	subs	r1, r6, #1
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f000 fec5 	bl	801ee7c <__any_on>
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	d1ed      	bne.n	801e0d2 <__gethex+0x2ca>
 801e0f6:	ee18 0a10 	vmov	r0, s16
 801e0fa:	4621      	mov	r1, r4
 801e0fc:	f000 fa64 	bl	801e5c8 <_Bfree>
 801e100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e102:	2300      	movs	r3, #0
 801e104:	6013      	str	r3, [r2, #0]
 801e106:	2750      	movs	r7, #80	; 0x50
 801e108:	e713      	b.n	801df32 <__gethex+0x12a>
 801e10a:	bf00      	nop
 801e10c:	08021e04 	.word	0x08021e04
 801e110:	08021d87 	.word	0x08021d87
 801e114:	08021d98 	.word	0x08021d98
 801e118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d1eb      	bne.n	801e0f6 <__gethex+0x2ee>
 801e11e:	e7d8      	b.n	801e0d2 <__gethex+0x2ca>
 801e120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e122:	2b00      	cmp	r3, #0
 801e124:	d1d5      	bne.n	801e0d2 <__gethex+0x2ca>
 801e126:	e7e6      	b.n	801e0f6 <__gethex+0x2ee>
 801e128:	1e6f      	subs	r7, r5, #1
 801e12a:	f1ba 0f00 	cmp.w	sl, #0
 801e12e:	d131      	bne.n	801e194 <__gethex+0x38c>
 801e130:	b127      	cbz	r7, 801e13c <__gethex+0x334>
 801e132:	4639      	mov	r1, r7
 801e134:	4620      	mov	r0, r4
 801e136:	f000 fea1 	bl	801ee7c <__any_on>
 801e13a:	4682      	mov	sl, r0
 801e13c:	117b      	asrs	r3, r7, #5
 801e13e:	2101      	movs	r1, #1
 801e140:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e144:	f007 071f 	and.w	r7, r7, #31
 801e148:	fa01 f707 	lsl.w	r7, r1, r7
 801e14c:	421f      	tst	r7, r3
 801e14e:	4629      	mov	r1, r5
 801e150:	4620      	mov	r0, r4
 801e152:	bf18      	it	ne
 801e154:	f04a 0a02 	orrne.w	sl, sl, #2
 801e158:	1b76      	subs	r6, r6, r5
 801e15a:	f7ff fded 	bl	801dd38 <rshift>
 801e15e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e162:	2702      	movs	r7, #2
 801e164:	f1ba 0f00 	cmp.w	sl, #0
 801e168:	d048      	beq.n	801e1fc <__gethex+0x3f4>
 801e16a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e16e:	2b02      	cmp	r3, #2
 801e170:	d015      	beq.n	801e19e <__gethex+0x396>
 801e172:	2b03      	cmp	r3, #3
 801e174:	d017      	beq.n	801e1a6 <__gethex+0x39e>
 801e176:	2b01      	cmp	r3, #1
 801e178:	d109      	bne.n	801e18e <__gethex+0x386>
 801e17a:	f01a 0f02 	tst.w	sl, #2
 801e17e:	d006      	beq.n	801e18e <__gethex+0x386>
 801e180:	f8d9 0000 	ldr.w	r0, [r9]
 801e184:	ea4a 0a00 	orr.w	sl, sl, r0
 801e188:	f01a 0f01 	tst.w	sl, #1
 801e18c:	d10e      	bne.n	801e1ac <__gethex+0x3a4>
 801e18e:	f047 0710 	orr.w	r7, r7, #16
 801e192:	e033      	b.n	801e1fc <__gethex+0x3f4>
 801e194:	f04f 0a01 	mov.w	sl, #1
 801e198:	e7d0      	b.n	801e13c <__gethex+0x334>
 801e19a:	2701      	movs	r7, #1
 801e19c:	e7e2      	b.n	801e164 <__gethex+0x35c>
 801e19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1a0:	f1c3 0301 	rsb	r3, r3, #1
 801e1a4:	9315      	str	r3, [sp, #84]	; 0x54
 801e1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d0f0      	beq.n	801e18e <__gethex+0x386>
 801e1ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e1b0:	f104 0314 	add.w	r3, r4, #20
 801e1b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e1b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e1bc:	f04f 0c00 	mov.w	ip, #0
 801e1c0:	4618      	mov	r0, r3
 801e1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e1ca:	d01c      	beq.n	801e206 <__gethex+0x3fe>
 801e1cc:	3201      	adds	r2, #1
 801e1ce:	6002      	str	r2, [r0, #0]
 801e1d0:	2f02      	cmp	r7, #2
 801e1d2:	f104 0314 	add.w	r3, r4, #20
 801e1d6:	d13f      	bne.n	801e258 <__gethex+0x450>
 801e1d8:	f8d8 2000 	ldr.w	r2, [r8]
 801e1dc:	3a01      	subs	r2, #1
 801e1de:	42b2      	cmp	r2, r6
 801e1e0:	d10a      	bne.n	801e1f8 <__gethex+0x3f0>
 801e1e2:	1171      	asrs	r1, r6, #5
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e1ea:	f006 061f 	and.w	r6, r6, #31
 801e1ee:	fa02 f606 	lsl.w	r6, r2, r6
 801e1f2:	421e      	tst	r6, r3
 801e1f4:	bf18      	it	ne
 801e1f6:	4617      	movne	r7, r2
 801e1f8:	f047 0720 	orr.w	r7, r7, #32
 801e1fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1fe:	601c      	str	r4, [r3, #0]
 801e200:	9b04      	ldr	r3, [sp, #16]
 801e202:	601d      	str	r5, [r3, #0]
 801e204:	e695      	b.n	801df32 <__gethex+0x12a>
 801e206:	4299      	cmp	r1, r3
 801e208:	f843 cc04 	str.w	ip, [r3, #-4]
 801e20c:	d8d8      	bhi.n	801e1c0 <__gethex+0x3b8>
 801e20e:	68a3      	ldr	r3, [r4, #8]
 801e210:	459b      	cmp	fp, r3
 801e212:	db19      	blt.n	801e248 <__gethex+0x440>
 801e214:	6861      	ldr	r1, [r4, #4]
 801e216:	ee18 0a10 	vmov	r0, s16
 801e21a:	3101      	adds	r1, #1
 801e21c:	f000 f994 	bl	801e548 <_Balloc>
 801e220:	4681      	mov	r9, r0
 801e222:	b918      	cbnz	r0, 801e22c <__gethex+0x424>
 801e224:	4b1a      	ldr	r3, [pc, #104]	; (801e290 <__gethex+0x488>)
 801e226:	4602      	mov	r2, r0
 801e228:	2184      	movs	r1, #132	; 0x84
 801e22a:	e6a8      	b.n	801df7e <__gethex+0x176>
 801e22c:	6922      	ldr	r2, [r4, #16]
 801e22e:	3202      	adds	r2, #2
 801e230:	f104 010c 	add.w	r1, r4, #12
 801e234:	0092      	lsls	r2, r2, #2
 801e236:	300c      	adds	r0, #12
 801e238:	f7fc fc60 	bl	801aafc <memcpy>
 801e23c:	4621      	mov	r1, r4
 801e23e:	ee18 0a10 	vmov	r0, s16
 801e242:	f000 f9c1 	bl	801e5c8 <_Bfree>
 801e246:	464c      	mov	r4, r9
 801e248:	6923      	ldr	r3, [r4, #16]
 801e24a:	1c5a      	adds	r2, r3, #1
 801e24c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e250:	6122      	str	r2, [r4, #16]
 801e252:	2201      	movs	r2, #1
 801e254:	615a      	str	r2, [r3, #20]
 801e256:	e7bb      	b.n	801e1d0 <__gethex+0x3c8>
 801e258:	6922      	ldr	r2, [r4, #16]
 801e25a:	455a      	cmp	r2, fp
 801e25c:	dd0b      	ble.n	801e276 <__gethex+0x46e>
 801e25e:	2101      	movs	r1, #1
 801e260:	4620      	mov	r0, r4
 801e262:	f7ff fd69 	bl	801dd38 <rshift>
 801e266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e26a:	3501      	adds	r5, #1
 801e26c:	42ab      	cmp	r3, r5
 801e26e:	f6ff aed0 	blt.w	801e012 <__gethex+0x20a>
 801e272:	2701      	movs	r7, #1
 801e274:	e7c0      	b.n	801e1f8 <__gethex+0x3f0>
 801e276:	f016 061f 	ands.w	r6, r6, #31
 801e27a:	d0fa      	beq.n	801e272 <__gethex+0x46a>
 801e27c:	449a      	add	sl, r3
 801e27e:	f1c6 0620 	rsb	r6, r6, #32
 801e282:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e286:	f000 fa55 	bl	801e734 <__hi0bits>
 801e28a:	42b0      	cmp	r0, r6
 801e28c:	dbe7      	blt.n	801e25e <__gethex+0x456>
 801e28e:	e7f0      	b.n	801e272 <__gethex+0x46a>
 801e290:	08021d87 	.word	0x08021d87

0801e294 <L_shift>:
 801e294:	f1c2 0208 	rsb	r2, r2, #8
 801e298:	0092      	lsls	r2, r2, #2
 801e29a:	b570      	push	{r4, r5, r6, lr}
 801e29c:	f1c2 0620 	rsb	r6, r2, #32
 801e2a0:	6843      	ldr	r3, [r0, #4]
 801e2a2:	6804      	ldr	r4, [r0, #0]
 801e2a4:	fa03 f506 	lsl.w	r5, r3, r6
 801e2a8:	432c      	orrs	r4, r5
 801e2aa:	40d3      	lsrs	r3, r2
 801e2ac:	6004      	str	r4, [r0, #0]
 801e2ae:	f840 3f04 	str.w	r3, [r0, #4]!
 801e2b2:	4288      	cmp	r0, r1
 801e2b4:	d3f4      	bcc.n	801e2a0 <L_shift+0xc>
 801e2b6:	bd70      	pop	{r4, r5, r6, pc}

0801e2b8 <__match>:
 801e2b8:	b530      	push	{r4, r5, lr}
 801e2ba:	6803      	ldr	r3, [r0, #0]
 801e2bc:	3301      	adds	r3, #1
 801e2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e2c2:	b914      	cbnz	r4, 801e2ca <__match+0x12>
 801e2c4:	6003      	str	r3, [r0, #0]
 801e2c6:	2001      	movs	r0, #1
 801e2c8:	bd30      	pop	{r4, r5, pc}
 801e2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e2d2:	2d19      	cmp	r5, #25
 801e2d4:	bf98      	it	ls
 801e2d6:	3220      	addls	r2, #32
 801e2d8:	42a2      	cmp	r2, r4
 801e2da:	d0f0      	beq.n	801e2be <__match+0x6>
 801e2dc:	2000      	movs	r0, #0
 801e2de:	e7f3      	b.n	801e2c8 <__match+0x10>

0801e2e0 <__hexnan>:
 801e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e4:	680b      	ldr	r3, [r1, #0]
 801e2e6:	6801      	ldr	r1, [r0, #0]
 801e2e8:	115e      	asrs	r6, r3, #5
 801e2ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e2ee:	f013 031f 	ands.w	r3, r3, #31
 801e2f2:	b087      	sub	sp, #28
 801e2f4:	bf18      	it	ne
 801e2f6:	3604      	addne	r6, #4
 801e2f8:	2500      	movs	r5, #0
 801e2fa:	1f37      	subs	r7, r6, #4
 801e2fc:	4682      	mov	sl, r0
 801e2fe:	4690      	mov	r8, r2
 801e300:	9301      	str	r3, [sp, #4]
 801e302:	f846 5c04 	str.w	r5, [r6, #-4]
 801e306:	46b9      	mov	r9, r7
 801e308:	463c      	mov	r4, r7
 801e30a:	9502      	str	r5, [sp, #8]
 801e30c:	46ab      	mov	fp, r5
 801e30e:	784a      	ldrb	r2, [r1, #1]
 801e310:	1c4b      	adds	r3, r1, #1
 801e312:	9303      	str	r3, [sp, #12]
 801e314:	b342      	cbz	r2, 801e368 <__hexnan+0x88>
 801e316:	4610      	mov	r0, r2
 801e318:	9105      	str	r1, [sp, #20]
 801e31a:	9204      	str	r2, [sp, #16]
 801e31c:	f7ff fd5e 	bl	801dddc <__hexdig_fun>
 801e320:	2800      	cmp	r0, #0
 801e322:	d14f      	bne.n	801e3c4 <__hexnan+0xe4>
 801e324:	9a04      	ldr	r2, [sp, #16]
 801e326:	9905      	ldr	r1, [sp, #20]
 801e328:	2a20      	cmp	r2, #32
 801e32a:	d818      	bhi.n	801e35e <__hexnan+0x7e>
 801e32c:	9b02      	ldr	r3, [sp, #8]
 801e32e:	459b      	cmp	fp, r3
 801e330:	dd13      	ble.n	801e35a <__hexnan+0x7a>
 801e332:	454c      	cmp	r4, r9
 801e334:	d206      	bcs.n	801e344 <__hexnan+0x64>
 801e336:	2d07      	cmp	r5, #7
 801e338:	dc04      	bgt.n	801e344 <__hexnan+0x64>
 801e33a:	462a      	mov	r2, r5
 801e33c:	4649      	mov	r1, r9
 801e33e:	4620      	mov	r0, r4
 801e340:	f7ff ffa8 	bl	801e294 <L_shift>
 801e344:	4544      	cmp	r4, r8
 801e346:	d950      	bls.n	801e3ea <__hexnan+0x10a>
 801e348:	2300      	movs	r3, #0
 801e34a:	f1a4 0904 	sub.w	r9, r4, #4
 801e34e:	f844 3c04 	str.w	r3, [r4, #-4]
 801e352:	f8cd b008 	str.w	fp, [sp, #8]
 801e356:	464c      	mov	r4, r9
 801e358:	461d      	mov	r5, r3
 801e35a:	9903      	ldr	r1, [sp, #12]
 801e35c:	e7d7      	b.n	801e30e <__hexnan+0x2e>
 801e35e:	2a29      	cmp	r2, #41	; 0x29
 801e360:	d156      	bne.n	801e410 <__hexnan+0x130>
 801e362:	3102      	adds	r1, #2
 801e364:	f8ca 1000 	str.w	r1, [sl]
 801e368:	f1bb 0f00 	cmp.w	fp, #0
 801e36c:	d050      	beq.n	801e410 <__hexnan+0x130>
 801e36e:	454c      	cmp	r4, r9
 801e370:	d206      	bcs.n	801e380 <__hexnan+0xa0>
 801e372:	2d07      	cmp	r5, #7
 801e374:	dc04      	bgt.n	801e380 <__hexnan+0xa0>
 801e376:	462a      	mov	r2, r5
 801e378:	4649      	mov	r1, r9
 801e37a:	4620      	mov	r0, r4
 801e37c:	f7ff ff8a 	bl	801e294 <L_shift>
 801e380:	4544      	cmp	r4, r8
 801e382:	d934      	bls.n	801e3ee <__hexnan+0x10e>
 801e384:	f1a8 0204 	sub.w	r2, r8, #4
 801e388:	4623      	mov	r3, r4
 801e38a:	f853 1b04 	ldr.w	r1, [r3], #4
 801e38e:	f842 1f04 	str.w	r1, [r2, #4]!
 801e392:	429f      	cmp	r7, r3
 801e394:	d2f9      	bcs.n	801e38a <__hexnan+0xaa>
 801e396:	1b3b      	subs	r3, r7, r4
 801e398:	f023 0303 	bic.w	r3, r3, #3
 801e39c:	3304      	adds	r3, #4
 801e39e:	3401      	adds	r4, #1
 801e3a0:	3e03      	subs	r6, #3
 801e3a2:	42b4      	cmp	r4, r6
 801e3a4:	bf88      	it	hi
 801e3a6:	2304      	movhi	r3, #4
 801e3a8:	4443      	add	r3, r8
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	f843 2b04 	str.w	r2, [r3], #4
 801e3b0:	429f      	cmp	r7, r3
 801e3b2:	d2fb      	bcs.n	801e3ac <__hexnan+0xcc>
 801e3b4:	683b      	ldr	r3, [r7, #0]
 801e3b6:	b91b      	cbnz	r3, 801e3c0 <__hexnan+0xe0>
 801e3b8:	4547      	cmp	r7, r8
 801e3ba:	d127      	bne.n	801e40c <__hexnan+0x12c>
 801e3bc:	2301      	movs	r3, #1
 801e3be:	603b      	str	r3, [r7, #0]
 801e3c0:	2005      	movs	r0, #5
 801e3c2:	e026      	b.n	801e412 <__hexnan+0x132>
 801e3c4:	3501      	adds	r5, #1
 801e3c6:	2d08      	cmp	r5, #8
 801e3c8:	f10b 0b01 	add.w	fp, fp, #1
 801e3cc:	dd06      	ble.n	801e3dc <__hexnan+0xfc>
 801e3ce:	4544      	cmp	r4, r8
 801e3d0:	d9c3      	bls.n	801e35a <__hexnan+0x7a>
 801e3d2:	2300      	movs	r3, #0
 801e3d4:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3d8:	2501      	movs	r5, #1
 801e3da:	3c04      	subs	r4, #4
 801e3dc:	6822      	ldr	r2, [r4, #0]
 801e3de:	f000 000f 	and.w	r0, r0, #15
 801e3e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e3e6:	6022      	str	r2, [r4, #0]
 801e3e8:	e7b7      	b.n	801e35a <__hexnan+0x7a>
 801e3ea:	2508      	movs	r5, #8
 801e3ec:	e7b5      	b.n	801e35a <__hexnan+0x7a>
 801e3ee:	9b01      	ldr	r3, [sp, #4]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d0df      	beq.n	801e3b4 <__hexnan+0xd4>
 801e3f4:	f04f 32ff 	mov.w	r2, #4294967295
 801e3f8:	f1c3 0320 	rsb	r3, r3, #32
 801e3fc:	fa22 f303 	lsr.w	r3, r2, r3
 801e400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e404:	401a      	ands	r2, r3
 801e406:	f846 2c04 	str.w	r2, [r6, #-4]
 801e40a:	e7d3      	b.n	801e3b4 <__hexnan+0xd4>
 801e40c:	3f04      	subs	r7, #4
 801e40e:	e7d1      	b.n	801e3b4 <__hexnan+0xd4>
 801e410:	2004      	movs	r0, #4
 801e412:	b007      	add	sp, #28
 801e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e418 <_localeconv_r>:
 801e418:	4800      	ldr	r0, [pc, #0]	; (801e41c <_localeconv_r+0x4>)
 801e41a:	4770      	bx	lr
 801e41c:	20000350 	.word	0x20000350

0801e420 <_lseek_r>:
 801e420:	b538      	push	{r3, r4, r5, lr}
 801e422:	4d07      	ldr	r5, [pc, #28]	; (801e440 <_lseek_r+0x20>)
 801e424:	4604      	mov	r4, r0
 801e426:	4608      	mov	r0, r1
 801e428:	4611      	mov	r1, r2
 801e42a:	2200      	movs	r2, #0
 801e42c:	602a      	str	r2, [r5, #0]
 801e42e:	461a      	mov	r2, r3
 801e430:	f7e4 ff04 	bl	800323c <_lseek>
 801e434:	1c43      	adds	r3, r0, #1
 801e436:	d102      	bne.n	801e43e <_lseek_r+0x1e>
 801e438:	682b      	ldr	r3, [r5, #0]
 801e43a:	b103      	cbz	r3, 801e43e <_lseek_r+0x1e>
 801e43c:	6023      	str	r3, [r4, #0]
 801e43e:	bd38      	pop	{r3, r4, r5, pc}
 801e440:	20008fb0 	.word	0x20008fb0

0801e444 <__swhatbuf_r>:
 801e444:	b570      	push	{r4, r5, r6, lr}
 801e446:	460e      	mov	r6, r1
 801e448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e44c:	2900      	cmp	r1, #0
 801e44e:	b096      	sub	sp, #88	; 0x58
 801e450:	4614      	mov	r4, r2
 801e452:	461d      	mov	r5, r3
 801e454:	da07      	bge.n	801e466 <__swhatbuf_r+0x22>
 801e456:	2300      	movs	r3, #0
 801e458:	602b      	str	r3, [r5, #0]
 801e45a:	89b3      	ldrh	r3, [r6, #12]
 801e45c:	061a      	lsls	r2, r3, #24
 801e45e:	d410      	bmi.n	801e482 <__swhatbuf_r+0x3e>
 801e460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e464:	e00e      	b.n	801e484 <__swhatbuf_r+0x40>
 801e466:	466a      	mov	r2, sp
 801e468:	f001 fbc6 	bl	801fbf8 <_fstat_r>
 801e46c:	2800      	cmp	r0, #0
 801e46e:	dbf2      	blt.n	801e456 <__swhatbuf_r+0x12>
 801e470:	9a01      	ldr	r2, [sp, #4]
 801e472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e47a:	425a      	negs	r2, r3
 801e47c:	415a      	adcs	r2, r3
 801e47e:	602a      	str	r2, [r5, #0]
 801e480:	e7ee      	b.n	801e460 <__swhatbuf_r+0x1c>
 801e482:	2340      	movs	r3, #64	; 0x40
 801e484:	2000      	movs	r0, #0
 801e486:	6023      	str	r3, [r4, #0]
 801e488:	b016      	add	sp, #88	; 0x58
 801e48a:	bd70      	pop	{r4, r5, r6, pc}

0801e48c <__smakebuf_r>:
 801e48c:	898b      	ldrh	r3, [r1, #12]
 801e48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e490:	079d      	lsls	r5, r3, #30
 801e492:	4606      	mov	r6, r0
 801e494:	460c      	mov	r4, r1
 801e496:	d507      	bpl.n	801e4a8 <__smakebuf_r+0x1c>
 801e498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e49c:	6023      	str	r3, [r4, #0]
 801e49e:	6123      	str	r3, [r4, #16]
 801e4a0:	2301      	movs	r3, #1
 801e4a2:	6163      	str	r3, [r4, #20]
 801e4a4:	b002      	add	sp, #8
 801e4a6:	bd70      	pop	{r4, r5, r6, pc}
 801e4a8:	ab01      	add	r3, sp, #4
 801e4aa:	466a      	mov	r2, sp
 801e4ac:	f7ff ffca 	bl	801e444 <__swhatbuf_r>
 801e4b0:	9900      	ldr	r1, [sp, #0]
 801e4b2:	4605      	mov	r5, r0
 801e4b4:	4630      	mov	r0, r6
 801e4b6:	f7fc fba1 	bl	801abfc <_malloc_r>
 801e4ba:	b948      	cbnz	r0, 801e4d0 <__smakebuf_r+0x44>
 801e4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4c0:	059a      	lsls	r2, r3, #22
 801e4c2:	d4ef      	bmi.n	801e4a4 <__smakebuf_r+0x18>
 801e4c4:	f023 0303 	bic.w	r3, r3, #3
 801e4c8:	f043 0302 	orr.w	r3, r3, #2
 801e4cc:	81a3      	strh	r3, [r4, #12]
 801e4ce:	e7e3      	b.n	801e498 <__smakebuf_r+0xc>
 801e4d0:	4b0d      	ldr	r3, [pc, #52]	; (801e508 <__smakebuf_r+0x7c>)
 801e4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 801e4d4:	89a3      	ldrh	r3, [r4, #12]
 801e4d6:	6020      	str	r0, [r4, #0]
 801e4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e4dc:	81a3      	strh	r3, [r4, #12]
 801e4de:	9b00      	ldr	r3, [sp, #0]
 801e4e0:	6163      	str	r3, [r4, #20]
 801e4e2:	9b01      	ldr	r3, [sp, #4]
 801e4e4:	6120      	str	r0, [r4, #16]
 801e4e6:	b15b      	cbz	r3, 801e500 <__smakebuf_r+0x74>
 801e4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4ec:	4630      	mov	r0, r6
 801e4ee:	f001 fb95 	bl	801fc1c <_isatty_r>
 801e4f2:	b128      	cbz	r0, 801e500 <__smakebuf_r+0x74>
 801e4f4:	89a3      	ldrh	r3, [r4, #12]
 801e4f6:	f023 0303 	bic.w	r3, r3, #3
 801e4fa:	f043 0301 	orr.w	r3, r3, #1
 801e4fe:	81a3      	strh	r3, [r4, #12]
 801e500:	89a0      	ldrh	r0, [r4, #12]
 801e502:	4305      	orrs	r5, r0
 801e504:	81a5      	strh	r5, [r4, #12]
 801e506:	e7cd      	b.n	801e4a4 <__smakebuf_r+0x18>
 801e508:	0801a8f9 	.word	0x0801a8f9

0801e50c <__ascii_mbtowc>:
 801e50c:	b082      	sub	sp, #8
 801e50e:	b901      	cbnz	r1, 801e512 <__ascii_mbtowc+0x6>
 801e510:	a901      	add	r1, sp, #4
 801e512:	b142      	cbz	r2, 801e526 <__ascii_mbtowc+0x1a>
 801e514:	b14b      	cbz	r3, 801e52a <__ascii_mbtowc+0x1e>
 801e516:	7813      	ldrb	r3, [r2, #0]
 801e518:	600b      	str	r3, [r1, #0]
 801e51a:	7812      	ldrb	r2, [r2, #0]
 801e51c:	1e10      	subs	r0, r2, #0
 801e51e:	bf18      	it	ne
 801e520:	2001      	movne	r0, #1
 801e522:	b002      	add	sp, #8
 801e524:	4770      	bx	lr
 801e526:	4610      	mov	r0, r2
 801e528:	e7fb      	b.n	801e522 <__ascii_mbtowc+0x16>
 801e52a:	f06f 0001 	mvn.w	r0, #1
 801e52e:	e7f8      	b.n	801e522 <__ascii_mbtowc+0x16>

0801e530 <__malloc_lock>:
 801e530:	4801      	ldr	r0, [pc, #4]	; (801e538 <__malloc_lock+0x8>)
 801e532:	f7fc bad8 	b.w	801aae6 <__retarget_lock_acquire_recursive>
 801e536:	bf00      	nop
 801e538:	20008fa8 	.word	0x20008fa8

0801e53c <__malloc_unlock>:
 801e53c:	4801      	ldr	r0, [pc, #4]	; (801e544 <__malloc_unlock+0x8>)
 801e53e:	f7fc bad3 	b.w	801aae8 <__retarget_lock_release_recursive>
 801e542:	bf00      	nop
 801e544:	20008fa8 	.word	0x20008fa8

0801e548 <_Balloc>:
 801e548:	b570      	push	{r4, r5, r6, lr}
 801e54a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e54c:	4604      	mov	r4, r0
 801e54e:	460d      	mov	r5, r1
 801e550:	b976      	cbnz	r6, 801e570 <_Balloc+0x28>
 801e552:	2010      	movs	r0, #16
 801e554:	f7fc faca 	bl	801aaec <malloc>
 801e558:	4602      	mov	r2, r0
 801e55a:	6260      	str	r0, [r4, #36]	; 0x24
 801e55c:	b920      	cbnz	r0, 801e568 <_Balloc+0x20>
 801e55e:	4b18      	ldr	r3, [pc, #96]	; (801e5c0 <_Balloc+0x78>)
 801e560:	4818      	ldr	r0, [pc, #96]	; (801e5c4 <_Balloc+0x7c>)
 801e562:	2166      	movs	r1, #102	; 0x66
 801e564:	f7fe fc6c 	bl	801ce40 <__assert_func>
 801e568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e56c:	6006      	str	r6, [r0, #0]
 801e56e:	60c6      	str	r6, [r0, #12]
 801e570:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e572:	68f3      	ldr	r3, [r6, #12]
 801e574:	b183      	cbz	r3, 801e598 <_Balloc+0x50>
 801e576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e578:	68db      	ldr	r3, [r3, #12]
 801e57a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e57e:	b9b8      	cbnz	r0, 801e5b0 <_Balloc+0x68>
 801e580:	2101      	movs	r1, #1
 801e582:	fa01 f605 	lsl.w	r6, r1, r5
 801e586:	1d72      	adds	r2, r6, #5
 801e588:	0092      	lsls	r2, r2, #2
 801e58a:	4620      	mov	r0, r4
 801e58c:	f000 fc97 	bl	801eebe <_calloc_r>
 801e590:	b160      	cbz	r0, 801e5ac <_Balloc+0x64>
 801e592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e596:	e00e      	b.n	801e5b6 <_Balloc+0x6e>
 801e598:	2221      	movs	r2, #33	; 0x21
 801e59a:	2104      	movs	r1, #4
 801e59c:	4620      	mov	r0, r4
 801e59e:	f000 fc8e 	bl	801eebe <_calloc_r>
 801e5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e5a4:	60f0      	str	r0, [r6, #12]
 801e5a6:	68db      	ldr	r3, [r3, #12]
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d1e4      	bne.n	801e576 <_Balloc+0x2e>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	bd70      	pop	{r4, r5, r6, pc}
 801e5b0:	6802      	ldr	r2, [r0, #0]
 801e5b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e5bc:	e7f7      	b.n	801e5ae <_Balloc+0x66>
 801e5be:	bf00      	nop
 801e5c0:	08021d11 	.word	0x08021d11
 801e5c4:	08021e18 	.word	0x08021e18

0801e5c8 <_Bfree>:
 801e5c8:	b570      	push	{r4, r5, r6, lr}
 801e5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e5cc:	4605      	mov	r5, r0
 801e5ce:	460c      	mov	r4, r1
 801e5d0:	b976      	cbnz	r6, 801e5f0 <_Bfree+0x28>
 801e5d2:	2010      	movs	r0, #16
 801e5d4:	f7fc fa8a 	bl	801aaec <malloc>
 801e5d8:	4602      	mov	r2, r0
 801e5da:	6268      	str	r0, [r5, #36]	; 0x24
 801e5dc:	b920      	cbnz	r0, 801e5e8 <_Bfree+0x20>
 801e5de:	4b09      	ldr	r3, [pc, #36]	; (801e604 <_Bfree+0x3c>)
 801e5e0:	4809      	ldr	r0, [pc, #36]	; (801e608 <_Bfree+0x40>)
 801e5e2:	218a      	movs	r1, #138	; 0x8a
 801e5e4:	f7fe fc2c 	bl	801ce40 <__assert_func>
 801e5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5ec:	6006      	str	r6, [r0, #0]
 801e5ee:	60c6      	str	r6, [r0, #12]
 801e5f0:	b13c      	cbz	r4, 801e602 <_Bfree+0x3a>
 801e5f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e5f4:	6862      	ldr	r2, [r4, #4]
 801e5f6:	68db      	ldr	r3, [r3, #12]
 801e5f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e5fc:	6021      	str	r1, [r4, #0]
 801e5fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e602:	bd70      	pop	{r4, r5, r6, pc}
 801e604:	08021d11 	.word	0x08021d11
 801e608:	08021e18 	.word	0x08021e18

0801e60c <__multadd>:
 801e60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e610:	690e      	ldr	r6, [r1, #16]
 801e612:	4607      	mov	r7, r0
 801e614:	4698      	mov	r8, r3
 801e616:	460c      	mov	r4, r1
 801e618:	f101 0014 	add.w	r0, r1, #20
 801e61c:	2300      	movs	r3, #0
 801e61e:	6805      	ldr	r5, [r0, #0]
 801e620:	b2a9      	uxth	r1, r5
 801e622:	fb02 8101 	mla	r1, r2, r1, r8
 801e626:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e62a:	0c2d      	lsrs	r5, r5, #16
 801e62c:	fb02 c505 	mla	r5, r2, r5, ip
 801e630:	b289      	uxth	r1, r1
 801e632:	3301      	adds	r3, #1
 801e634:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e638:	429e      	cmp	r6, r3
 801e63a:	f840 1b04 	str.w	r1, [r0], #4
 801e63e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e642:	dcec      	bgt.n	801e61e <__multadd+0x12>
 801e644:	f1b8 0f00 	cmp.w	r8, #0
 801e648:	d022      	beq.n	801e690 <__multadd+0x84>
 801e64a:	68a3      	ldr	r3, [r4, #8]
 801e64c:	42b3      	cmp	r3, r6
 801e64e:	dc19      	bgt.n	801e684 <__multadd+0x78>
 801e650:	6861      	ldr	r1, [r4, #4]
 801e652:	4638      	mov	r0, r7
 801e654:	3101      	adds	r1, #1
 801e656:	f7ff ff77 	bl	801e548 <_Balloc>
 801e65a:	4605      	mov	r5, r0
 801e65c:	b928      	cbnz	r0, 801e66a <__multadd+0x5e>
 801e65e:	4602      	mov	r2, r0
 801e660:	4b0d      	ldr	r3, [pc, #52]	; (801e698 <__multadd+0x8c>)
 801e662:	480e      	ldr	r0, [pc, #56]	; (801e69c <__multadd+0x90>)
 801e664:	21b5      	movs	r1, #181	; 0xb5
 801e666:	f7fe fbeb 	bl	801ce40 <__assert_func>
 801e66a:	6922      	ldr	r2, [r4, #16]
 801e66c:	3202      	adds	r2, #2
 801e66e:	f104 010c 	add.w	r1, r4, #12
 801e672:	0092      	lsls	r2, r2, #2
 801e674:	300c      	adds	r0, #12
 801e676:	f7fc fa41 	bl	801aafc <memcpy>
 801e67a:	4621      	mov	r1, r4
 801e67c:	4638      	mov	r0, r7
 801e67e:	f7ff ffa3 	bl	801e5c8 <_Bfree>
 801e682:	462c      	mov	r4, r5
 801e684:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e688:	3601      	adds	r6, #1
 801e68a:	f8c3 8014 	str.w	r8, [r3, #20]
 801e68e:	6126      	str	r6, [r4, #16]
 801e690:	4620      	mov	r0, r4
 801e692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e696:	bf00      	nop
 801e698:	08021d87 	.word	0x08021d87
 801e69c:	08021e18 	.word	0x08021e18

0801e6a0 <__s2b>:
 801e6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6a4:	460c      	mov	r4, r1
 801e6a6:	4615      	mov	r5, r2
 801e6a8:	461f      	mov	r7, r3
 801e6aa:	2209      	movs	r2, #9
 801e6ac:	3308      	adds	r3, #8
 801e6ae:	4606      	mov	r6, r0
 801e6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 801e6b4:	2100      	movs	r1, #0
 801e6b6:	2201      	movs	r2, #1
 801e6b8:	429a      	cmp	r2, r3
 801e6ba:	db09      	blt.n	801e6d0 <__s2b+0x30>
 801e6bc:	4630      	mov	r0, r6
 801e6be:	f7ff ff43 	bl	801e548 <_Balloc>
 801e6c2:	b940      	cbnz	r0, 801e6d6 <__s2b+0x36>
 801e6c4:	4602      	mov	r2, r0
 801e6c6:	4b19      	ldr	r3, [pc, #100]	; (801e72c <__s2b+0x8c>)
 801e6c8:	4819      	ldr	r0, [pc, #100]	; (801e730 <__s2b+0x90>)
 801e6ca:	21ce      	movs	r1, #206	; 0xce
 801e6cc:	f7fe fbb8 	bl	801ce40 <__assert_func>
 801e6d0:	0052      	lsls	r2, r2, #1
 801e6d2:	3101      	adds	r1, #1
 801e6d4:	e7f0      	b.n	801e6b8 <__s2b+0x18>
 801e6d6:	9b08      	ldr	r3, [sp, #32]
 801e6d8:	6143      	str	r3, [r0, #20]
 801e6da:	2d09      	cmp	r5, #9
 801e6dc:	f04f 0301 	mov.w	r3, #1
 801e6e0:	6103      	str	r3, [r0, #16]
 801e6e2:	dd16      	ble.n	801e712 <__s2b+0x72>
 801e6e4:	f104 0909 	add.w	r9, r4, #9
 801e6e8:	46c8      	mov	r8, r9
 801e6ea:	442c      	add	r4, r5
 801e6ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e6f0:	4601      	mov	r1, r0
 801e6f2:	3b30      	subs	r3, #48	; 0x30
 801e6f4:	220a      	movs	r2, #10
 801e6f6:	4630      	mov	r0, r6
 801e6f8:	f7ff ff88 	bl	801e60c <__multadd>
 801e6fc:	45a0      	cmp	r8, r4
 801e6fe:	d1f5      	bne.n	801e6ec <__s2b+0x4c>
 801e700:	f1a5 0408 	sub.w	r4, r5, #8
 801e704:	444c      	add	r4, r9
 801e706:	1b2d      	subs	r5, r5, r4
 801e708:	1963      	adds	r3, r4, r5
 801e70a:	42bb      	cmp	r3, r7
 801e70c:	db04      	blt.n	801e718 <__s2b+0x78>
 801e70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e712:	340a      	adds	r4, #10
 801e714:	2509      	movs	r5, #9
 801e716:	e7f6      	b.n	801e706 <__s2b+0x66>
 801e718:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e71c:	4601      	mov	r1, r0
 801e71e:	3b30      	subs	r3, #48	; 0x30
 801e720:	220a      	movs	r2, #10
 801e722:	4630      	mov	r0, r6
 801e724:	f7ff ff72 	bl	801e60c <__multadd>
 801e728:	e7ee      	b.n	801e708 <__s2b+0x68>
 801e72a:	bf00      	nop
 801e72c:	08021d87 	.word	0x08021d87
 801e730:	08021e18 	.word	0x08021e18

0801e734 <__hi0bits>:
 801e734:	0c03      	lsrs	r3, r0, #16
 801e736:	041b      	lsls	r3, r3, #16
 801e738:	b9d3      	cbnz	r3, 801e770 <__hi0bits+0x3c>
 801e73a:	0400      	lsls	r0, r0, #16
 801e73c:	2310      	movs	r3, #16
 801e73e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e742:	bf04      	itt	eq
 801e744:	0200      	lsleq	r0, r0, #8
 801e746:	3308      	addeq	r3, #8
 801e748:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e74c:	bf04      	itt	eq
 801e74e:	0100      	lsleq	r0, r0, #4
 801e750:	3304      	addeq	r3, #4
 801e752:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e756:	bf04      	itt	eq
 801e758:	0080      	lsleq	r0, r0, #2
 801e75a:	3302      	addeq	r3, #2
 801e75c:	2800      	cmp	r0, #0
 801e75e:	db05      	blt.n	801e76c <__hi0bits+0x38>
 801e760:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e764:	f103 0301 	add.w	r3, r3, #1
 801e768:	bf08      	it	eq
 801e76a:	2320      	moveq	r3, #32
 801e76c:	4618      	mov	r0, r3
 801e76e:	4770      	bx	lr
 801e770:	2300      	movs	r3, #0
 801e772:	e7e4      	b.n	801e73e <__hi0bits+0xa>

0801e774 <__lo0bits>:
 801e774:	6803      	ldr	r3, [r0, #0]
 801e776:	f013 0207 	ands.w	r2, r3, #7
 801e77a:	4601      	mov	r1, r0
 801e77c:	d00b      	beq.n	801e796 <__lo0bits+0x22>
 801e77e:	07da      	lsls	r2, r3, #31
 801e780:	d424      	bmi.n	801e7cc <__lo0bits+0x58>
 801e782:	0798      	lsls	r0, r3, #30
 801e784:	bf49      	itett	mi
 801e786:	085b      	lsrmi	r3, r3, #1
 801e788:	089b      	lsrpl	r3, r3, #2
 801e78a:	2001      	movmi	r0, #1
 801e78c:	600b      	strmi	r3, [r1, #0]
 801e78e:	bf5c      	itt	pl
 801e790:	600b      	strpl	r3, [r1, #0]
 801e792:	2002      	movpl	r0, #2
 801e794:	4770      	bx	lr
 801e796:	b298      	uxth	r0, r3
 801e798:	b9b0      	cbnz	r0, 801e7c8 <__lo0bits+0x54>
 801e79a:	0c1b      	lsrs	r3, r3, #16
 801e79c:	2010      	movs	r0, #16
 801e79e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e7a2:	bf04      	itt	eq
 801e7a4:	0a1b      	lsreq	r3, r3, #8
 801e7a6:	3008      	addeq	r0, #8
 801e7a8:	071a      	lsls	r2, r3, #28
 801e7aa:	bf04      	itt	eq
 801e7ac:	091b      	lsreq	r3, r3, #4
 801e7ae:	3004      	addeq	r0, #4
 801e7b0:	079a      	lsls	r2, r3, #30
 801e7b2:	bf04      	itt	eq
 801e7b4:	089b      	lsreq	r3, r3, #2
 801e7b6:	3002      	addeq	r0, #2
 801e7b8:	07da      	lsls	r2, r3, #31
 801e7ba:	d403      	bmi.n	801e7c4 <__lo0bits+0x50>
 801e7bc:	085b      	lsrs	r3, r3, #1
 801e7be:	f100 0001 	add.w	r0, r0, #1
 801e7c2:	d005      	beq.n	801e7d0 <__lo0bits+0x5c>
 801e7c4:	600b      	str	r3, [r1, #0]
 801e7c6:	4770      	bx	lr
 801e7c8:	4610      	mov	r0, r2
 801e7ca:	e7e8      	b.n	801e79e <__lo0bits+0x2a>
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	4770      	bx	lr
 801e7d0:	2020      	movs	r0, #32
 801e7d2:	4770      	bx	lr

0801e7d4 <__i2b>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	460c      	mov	r4, r1
 801e7d8:	2101      	movs	r1, #1
 801e7da:	f7ff feb5 	bl	801e548 <_Balloc>
 801e7de:	4602      	mov	r2, r0
 801e7e0:	b928      	cbnz	r0, 801e7ee <__i2b+0x1a>
 801e7e2:	4b05      	ldr	r3, [pc, #20]	; (801e7f8 <__i2b+0x24>)
 801e7e4:	4805      	ldr	r0, [pc, #20]	; (801e7fc <__i2b+0x28>)
 801e7e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e7ea:	f7fe fb29 	bl	801ce40 <__assert_func>
 801e7ee:	2301      	movs	r3, #1
 801e7f0:	6144      	str	r4, [r0, #20]
 801e7f2:	6103      	str	r3, [r0, #16]
 801e7f4:	bd10      	pop	{r4, pc}
 801e7f6:	bf00      	nop
 801e7f8:	08021d87 	.word	0x08021d87
 801e7fc:	08021e18 	.word	0x08021e18

0801e800 <__multiply>:
 801e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e804:	4614      	mov	r4, r2
 801e806:	690a      	ldr	r2, [r1, #16]
 801e808:	6923      	ldr	r3, [r4, #16]
 801e80a:	429a      	cmp	r2, r3
 801e80c:	bfb8      	it	lt
 801e80e:	460b      	movlt	r3, r1
 801e810:	460d      	mov	r5, r1
 801e812:	bfbc      	itt	lt
 801e814:	4625      	movlt	r5, r4
 801e816:	461c      	movlt	r4, r3
 801e818:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e81c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e820:	68ab      	ldr	r3, [r5, #8]
 801e822:	6869      	ldr	r1, [r5, #4]
 801e824:	eb0a 0709 	add.w	r7, sl, r9
 801e828:	42bb      	cmp	r3, r7
 801e82a:	b085      	sub	sp, #20
 801e82c:	bfb8      	it	lt
 801e82e:	3101      	addlt	r1, #1
 801e830:	f7ff fe8a 	bl	801e548 <_Balloc>
 801e834:	b930      	cbnz	r0, 801e844 <__multiply+0x44>
 801e836:	4602      	mov	r2, r0
 801e838:	4b42      	ldr	r3, [pc, #264]	; (801e944 <__multiply+0x144>)
 801e83a:	4843      	ldr	r0, [pc, #268]	; (801e948 <__multiply+0x148>)
 801e83c:	f240 115d 	movw	r1, #349	; 0x15d
 801e840:	f7fe fafe 	bl	801ce40 <__assert_func>
 801e844:	f100 0614 	add.w	r6, r0, #20
 801e848:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e84c:	4633      	mov	r3, r6
 801e84e:	2200      	movs	r2, #0
 801e850:	4543      	cmp	r3, r8
 801e852:	d31e      	bcc.n	801e892 <__multiply+0x92>
 801e854:	f105 0c14 	add.w	ip, r5, #20
 801e858:	f104 0314 	add.w	r3, r4, #20
 801e85c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e860:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e864:	9202      	str	r2, [sp, #8]
 801e866:	ebac 0205 	sub.w	r2, ip, r5
 801e86a:	3a15      	subs	r2, #21
 801e86c:	f022 0203 	bic.w	r2, r2, #3
 801e870:	3204      	adds	r2, #4
 801e872:	f105 0115 	add.w	r1, r5, #21
 801e876:	458c      	cmp	ip, r1
 801e878:	bf38      	it	cc
 801e87a:	2204      	movcc	r2, #4
 801e87c:	9201      	str	r2, [sp, #4]
 801e87e:	9a02      	ldr	r2, [sp, #8]
 801e880:	9303      	str	r3, [sp, #12]
 801e882:	429a      	cmp	r2, r3
 801e884:	d808      	bhi.n	801e898 <__multiply+0x98>
 801e886:	2f00      	cmp	r7, #0
 801e888:	dc55      	bgt.n	801e936 <__multiply+0x136>
 801e88a:	6107      	str	r7, [r0, #16]
 801e88c:	b005      	add	sp, #20
 801e88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e892:	f843 2b04 	str.w	r2, [r3], #4
 801e896:	e7db      	b.n	801e850 <__multiply+0x50>
 801e898:	f8b3 a000 	ldrh.w	sl, [r3]
 801e89c:	f1ba 0f00 	cmp.w	sl, #0
 801e8a0:	d020      	beq.n	801e8e4 <__multiply+0xe4>
 801e8a2:	f105 0e14 	add.w	lr, r5, #20
 801e8a6:	46b1      	mov	r9, r6
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e8ae:	f8d9 b000 	ldr.w	fp, [r9]
 801e8b2:	b2a1      	uxth	r1, r4
 801e8b4:	fa1f fb8b 	uxth.w	fp, fp
 801e8b8:	fb0a b101 	mla	r1, sl, r1, fp
 801e8bc:	4411      	add	r1, r2
 801e8be:	f8d9 2000 	ldr.w	r2, [r9]
 801e8c2:	0c24      	lsrs	r4, r4, #16
 801e8c4:	0c12      	lsrs	r2, r2, #16
 801e8c6:	fb0a 2404 	mla	r4, sl, r4, r2
 801e8ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e8ce:	b289      	uxth	r1, r1
 801e8d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e8d4:	45f4      	cmp	ip, lr
 801e8d6:	f849 1b04 	str.w	r1, [r9], #4
 801e8da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e8de:	d8e4      	bhi.n	801e8aa <__multiply+0xaa>
 801e8e0:	9901      	ldr	r1, [sp, #4]
 801e8e2:	5072      	str	r2, [r6, r1]
 801e8e4:	9a03      	ldr	r2, [sp, #12]
 801e8e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e8ea:	3304      	adds	r3, #4
 801e8ec:	f1b9 0f00 	cmp.w	r9, #0
 801e8f0:	d01f      	beq.n	801e932 <__multiply+0x132>
 801e8f2:	6834      	ldr	r4, [r6, #0]
 801e8f4:	f105 0114 	add.w	r1, r5, #20
 801e8f8:	46b6      	mov	lr, r6
 801e8fa:	f04f 0a00 	mov.w	sl, #0
 801e8fe:	880a      	ldrh	r2, [r1, #0]
 801e900:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e904:	fb09 b202 	mla	r2, r9, r2, fp
 801e908:	4492      	add	sl, r2
 801e90a:	b2a4      	uxth	r4, r4
 801e90c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e910:	f84e 4b04 	str.w	r4, [lr], #4
 801e914:	f851 4b04 	ldr.w	r4, [r1], #4
 801e918:	f8be 2000 	ldrh.w	r2, [lr]
 801e91c:	0c24      	lsrs	r4, r4, #16
 801e91e:	fb09 2404 	mla	r4, r9, r4, r2
 801e922:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e926:	458c      	cmp	ip, r1
 801e928:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e92c:	d8e7      	bhi.n	801e8fe <__multiply+0xfe>
 801e92e:	9a01      	ldr	r2, [sp, #4]
 801e930:	50b4      	str	r4, [r6, r2]
 801e932:	3604      	adds	r6, #4
 801e934:	e7a3      	b.n	801e87e <__multiply+0x7e>
 801e936:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d1a5      	bne.n	801e88a <__multiply+0x8a>
 801e93e:	3f01      	subs	r7, #1
 801e940:	e7a1      	b.n	801e886 <__multiply+0x86>
 801e942:	bf00      	nop
 801e944:	08021d87 	.word	0x08021d87
 801e948:	08021e18 	.word	0x08021e18

0801e94c <__pow5mult>:
 801e94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e950:	4615      	mov	r5, r2
 801e952:	f012 0203 	ands.w	r2, r2, #3
 801e956:	4606      	mov	r6, r0
 801e958:	460f      	mov	r7, r1
 801e95a:	d007      	beq.n	801e96c <__pow5mult+0x20>
 801e95c:	4c25      	ldr	r4, [pc, #148]	; (801e9f4 <__pow5mult+0xa8>)
 801e95e:	3a01      	subs	r2, #1
 801e960:	2300      	movs	r3, #0
 801e962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e966:	f7ff fe51 	bl	801e60c <__multadd>
 801e96a:	4607      	mov	r7, r0
 801e96c:	10ad      	asrs	r5, r5, #2
 801e96e:	d03d      	beq.n	801e9ec <__pow5mult+0xa0>
 801e970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e972:	b97c      	cbnz	r4, 801e994 <__pow5mult+0x48>
 801e974:	2010      	movs	r0, #16
 801e976:	f7fc f8b9 	bl	801aaec <malloc>
 801e97a:	4602      	mov	r2, r0
 801e97c:	6270      	str	r0, [r6, #36]	; 0x24
 801e97e:	b928      	cbnz	r0, 801e98c <__pow5mult+0x40>
 801e980:	4b1d      	ldr	r3, [pc, #116]	; (801e9f8 <__pow5mult+0xac>)
 801e982:	481e      	ldr	r0, [pc, #120]	; (801e9fc <__pow5mult+0xb0>)
 801e984:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e988:	f7fe fa5a 	bl	801ce40 <__assert_func>
 801e98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e990:	6004      	str	r4, [r0, #0]
 801e992:	60c4      	str	r4, [r0, #12]
 801e994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e99c:	b94c      	cbnz	r4, 801e9b2 <__pow5mult+0x66>
 801e99e:	f240 2171 	movw	r1, #625	; 0x271
 801e9a2:	4630      	mov	r0, r6
 801e9a4:	f7ff ff16 	bl	801e7d4 <__i2b>
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 801e9ae:	4604      	mov	r4, r0
 801e9b0:	6003      	str	r3, [r0, #0]
 801e9b2:	f04f 0900 	mov.w	r9, #0
 801e9b6:	07eb      	lsls	r3, r5, #31
 801e9b8:	d50a      	bpl.n	801e9d0 <__pow5mult+0x84>
 801e9ba:	4639      	mov	r1, r7
 801e9bc:	4622      	mov	r2, r4
 801e9be:	4630      	mov	r0, r6
 801e9c0:	f7ff ff1e 	bl	801e800 <__multiply>
 801e9c4:	4639      	mov	r1, r7
 801e9c6:	4680      	mov	r8, r0
 801e9c8:	4630      	mov	r0, r6
 801e9ca:	f7ff fdfd 	bl	801e5c8 <_Bfree>
 801e9ce:	4647      	mov	r7, r8
 801e9d0:	106d      	asrs	r5, r5, #1
 801e9d2:	d00b      	beq.n	801e9ec <__pow5mult+0xa0>
 801e9d4:	6820      	ldr	r0, [r4, #0]
 801e9d6:	b938      	cbnz	r0, 801e9e8 <__pow5mult+0x9c>
 801e9d8:	4622      	mov	r2, r4
 801e9da:	4621      	mov	r1, r4
 801e9dc:	4630      	mov	r0, r6
 801e9de:	f7ff ff0f 	bl	801e800 <__multiply>
 801e9e2:	6020      	str	r0, [r4, #0]
 801e9e4:	f8c0 9000 	str.w	r9, [r0]
 801e9e8:	4604      	mov	r4, r0
 801e9ea:	e7e4      	b.n	801e9b6 <__pow5mult+0x6a>
 801e9ec:	4638      	mov	r0, r7
 801e9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9f2:	bf00      	nop
 801e9f4:	08021f68 	.word	0x08021f68
 801e9f8:	08021d11 	.word	0x08021d11
 801e9fc:	08021e18 	.word	0x08021e18

0801ea00 <__lshift>:
 801ea00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea04:	460c      	mov	r4, r1
 801ea06:	6849      	ldr	r1, [r1, #4]
 801ea08:	6923      	ldr	r3, [r4, #16]
 801ea0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea0e:	68a3      	ldr	r3, [r4, #8]
 801ea10:	4607      	mov	r7, r0
 801ea12:	4691      	mov	r9, r2
 801ea14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea18:	f108 0601 	add.w	r6, r8, #1
 801ea1c:	42b3      	cmp	r3, r6
 801ea1e:	db0b      	blt.n	801ea38 <__lshift+0x38>
 801ea20:	4638      	mov	r0, r7
 801ea22:	f7ff fd91 	bl	801e548 <_Balloc>
 801ea26:	4605      	mov	r5, r0
 801ea28:	b948      	cbnz	r0, 801ea3e <__lshift+0x3e>
 801ea2a:	4602      	mov	r2, r0
 801ea2c:	4b28      	ldr	r3, [pc, #160]	; (801ead0 <__lshift+0xd0>)
 801ea2e:	4829      	ldr	r0, [pc, #164]	; (801ead4 <__lshift+0xd4>)
 801ea30:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ea34:	f7fe fa04 	bl	801ce40 <__assert_func>
 801ea38:	3101      	adds	r1, #1
 801ea3a:	005b      	lsls	r3, r3, #1
 801ea3c:	e7ee      	b.n	801ea1c <__lshift+0x1c>
 801ea3e:	2300      	movs	r3, #0
 801ea40:	f100 0114 	add.w	r1, r0, #20
 801ea44:	f100 0210 	add.w	r2, r0, #16
 801ea48:	4618      	mov	r0, r3
 801ea4a:	4553      	cmp	r3, sl
 801ea4c:	db33      	blt.n	801eab6 <__lshift+0xb6>
 801ea4e:	6920      	ldr	r0, [r4, #16]
 801ea50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ea54:	f104 0314 	add.w	r3, r4, #20
 801ea58:	f019 091f 	ands.w	r9, r9, #31
 801ea5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ea60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ea64:	d02b      	beq.n	801eabe <__lshift+0xbe>
 801ea66:	f1c9 0e20 	rsb	lr, r9, #32
 801ea6a:	468a      	mov	sl, r1
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	6818      	ldr	r0, [r3, #0]
 801ea70:	fa00 f009 	lsl.w	r0, r0, r9
 801ea74:	4302      	orrs	r2, r0
 801ea76:	f84a 2b04 	str.w	r2, [sl], #4
 801ea7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea7e:	459c      	cmp	ip, r3
 801ea80:	fa22 f20e 	lsr.w	r2, r2, lr
 801ea84:	d8f3      	bhi.n	801ea6e <__lshift+0x6e>
 801ea86:	ebac 0304 	sub.w	r3, ip, r4
 801ea8a:	3b15      	subs	r3, #21
 801ea8c:	f023 0303 	bic.w	r3, r3, #3
 801ea90:	3304      	adds	r3, #4
 801ea92:	f104 0015 	add.w	r0, r4, #21
 801ea96:	4584      	cmp	ip, r0
 801ea98:	bf38      	it	cc
 801ea9a:	2304      	movcc	r3, #4
 801ea9c:	50ca      	str	r2, [r1, r3]
 801ea9e:	b10a      	cbz	r2, 801eaa4 <__lshift+0xa4>
 801eaa0:	f108 0602 	add.w	r6, r8, #2
 801eaa4:	3e01      	subs	r6, #1
 801eaa6:	4638      	mov	r0, r7
 801eaa8:	612e      	str	r6, [r5, #16]
 801eaaa:	4621      	mov	r1, r4
 801eaac:	f7ff fd8c 	bl	801e5c8 <_Bfree>
 801eab0:	4628      	mov	r0, r5
 801eab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eab6:	f842 0f04 	str.w	r0, [r2, #4]!
 801eaba:	3301      	adds	r3, #1
 801eabc:	e7c5      	b.n	801ea4a <__lshift+0x4a>
 801eabe:	3904      	subs	r1, #4
 801eac0:	f853 2b04 	ldr.w	r2, [r3], #4
 801eac4:	f841 2f04 	str.w	r2, [r1, #4]!
 801eac8:	459c      	cmp	ip, r3
 801eaca:	d8f9      	bhi.n	801eac0 <__lshift+0xc0>
 801eacc:	e7ea      	b.n	801eaa4 <__lshift+0xa4>
 801eace:	bf00      	nop
 801ead0:	08021d87 	.word	0x08021d87
 801ead4:	08021e18 	.word	0x08021e18

0801ead8 <__mcmp>:
 801ead8:	b530      	push	{r4, r5, lr}
 801eada:	6902      	ldr	r2, [r0, #16]
 801eadc:	690c      	ldr	r4, [r1, #16]
 801eade:	1b12      	subs	r2, r2, r4
 801eae0:	d10e      	bne.n	801eb00 <__mcmp+0x28>
 801eae2:	f100 0314 	add.w	r3, r0, #20
 801eae6:	3114      	adds	r1, #20
 801eae8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801eaec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801eaf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801eaf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801eaf8:	42a5      	cmp	r5, r4
 801eafa:	d003      	beq.n	801eb04 <__mcmp+0x2c>
 801eafc:	d305      	bcc.n	801eb0a <__mcmp+0x32>
 801eafe:	2201      	movs	r2, #1
 801eb00:	4610      	mov	r0, r2
 801eb02:	bd30      	pop	{r4, r5, pc}
 801eb04:	4283      	cmp	r3, r0
 801eb06:	d3f3      	bcc.n	801eaf0 <__mcmp+0x18>
 801eb08:	e7fa      	b.n	801eb00 <__mcmp+0x28>
 801eb0a:	f04f 32ff 	mov.w	r2, #4294967295
 801eb0e:	e7f7      	b.n	801eb00 <__mcmp+0x28>

0801eb10 <__mdiff>:
 801eb10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb14:	460c      	mov	r4, r1
 801eb16:	4606      	mov	r6, r0
 801eb18:	4611      	mov	r1, r2
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	4617      	mov	r7, r2
 801eb1e:	f7ff ffdb 	bl	801ead8 <__mcmp>
 801eb22:	1e05      	subs	r5, r0, #0
 801eb24:	d110      	bne.n	801eb48 <__mdiff+0x38>
 801eb26:	4629      	mov	r1, r5
 801eb28:	4630      	mov	r0, r6
 801eb2a:	f7ff fd0d 	bl	801e548 <_Balloc>
 801eb2e:	b930      	cbnz	r0, 801eb3e <__mdiff+0x2e>
 801eb30:	4b39      	ldr	r3, [pc, #228]	; (801ec18 <__mdiff+0x108>)
 801eb32:	4602      	mov	r2, r0
 801eb34:	f240 2132 	movw	r1, #562	; 0x232
 801eb38:	4838      	ldr	r0, [pc, #224]	; (801ec1c <__mdiff+0x10c>)
 801eb3a:	f7fe f981 	bl	801ce40 <__assert_func>
 801eb3e:	2301      	movs	r3, #1
 801eb40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb48:	bfa4      	itt	ge
 801eb4a:	463b      	movge	r3, r7
 801eb4c:	4627      	movge	r7, r4
 801eb4e:	4630      	mov	r0, r6
 801eb50:	6879      	ldr	r1, [r7, #4]
 801eb52:	bfa6      	itte	ge
 801eb54:	461c      	movge	r4, r3
 801eb56:	2500      	movge	r5, #0
 801eb58:	2501      	movlt	r5, #1
 801eb5a:	f7ff fcf5 	bl	801e548 <_Balloc>
 801eb5e:	b920      	cbnz	r0, 801eb6a <__mdiff+0x5a>
 801eb60:	4b2d      	ldr	r3, [pc, #180]	; (801ec18 <__mdiff+0x108>)
 801eb62:	4602      	mov	r2, r0
 801eb64:	f44f 7110 	mov.w	r1, #576	; 0x240
 801eb68:	e7e6      	b.n	801eb38 <__mdiff+0x28>
 801eb6a:	693e      	ldr	r6, [r7, #16]
 801eb6c:	60c5      	str	r5, [r0, #12]
 801eb6e:	6925      	ldr	r5, [r4, #16]
 801eb70:	f107 0114 	add.w	r1, r7, #20
 801eb74:	f104 0914 	add.w	r9, r4, #20
 801eb78:	f100 0e14 	add.w	lr, r0, #20
 801eb7c:	f107 0210 	add.w	r2, r7, #16
 801eb80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801eb84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801eb88:	46f2      	mov	sl, lr
 801eb8a:	2700      	movs	r7, #0
 801eb8c:	f859 3b04 	ldr.w	r3, [r9], #4
 801eb90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801eb94:	fa1f f883 	uxth.w	r8, r3
 801eb98:	fa17 f78b 	uxtah	r7, r7, fp
 801eb9c:	0c1b      	lsrs	r3, r3, #16
 801eb9e:	eba7 0808 	sub.w	r8, r7, r8
 801eba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801eba6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ebaa:	fa1f f888 	uxth.w	r8, r8
 801ebae:	141f      	asrs	r7, r3, #16
 801ebb0:	454d      	cmp	r5, r9
 801ebb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ebb6:	f84a 3b04 	str.w	r3, [sl], #4
 801ebba:	d8e7      	bhi.n	801eb8c <__mdiff+0x7c>
 801ebbc:	1b2b      	subs	r3, r5, r4
 801ebbe:	3b15      	subs	r3, #21
 801ebc0:	f023 0303 	bic.w	r3, r3, #3
 801ebc4:	3304      	adds	r3, #4
 801ebc6:	3415      	adds	r4, #21
 801ebc8:	42a5      	cmp	r5, r4
 801ebca:	bf38      	it	cc
 801ebcc:	2304      	movcc	r3, #4
 801ebce:	4419      	add	r1, r3
 801ebd0:	4473      	add	r3, lr
 801ebd2:	469e      	mov	lr, r3
 801ebd4:	460d      	mov	r5, r1
 801ebd6:	4565      	cmp	r5, ip
 801ebd8:	d30e      	bcc.n	801ebf8 <__mdiff+0xe8>
 801ebda:	f10c 0203 	add.w	r2, ip, #3
 801ebde:	1a52      	subs	r2, r2, r1
 801ebe0:	f022 0203 	bic.w	r2, r2, #3
 801ebe4:	3903      	subs	r1, #3
 801ebe6:	458c      	cmp	ip, r1
 801ebe8:	bf38      	it	cc
 801ebea:	2200      	movcc	r2, #0
 801ebec:	441a      	add	r2, r3
 801ebee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ebf2:	b17b      	cbz	r3, 801ec14 <__mdiff+0x104>
 801ebf4:	6106      	str	r6, [r0, #16]
 801ebf6:	e7a5      	b.n	801eb44 <__mdiff+0x34>
 801ebf8:	f855 8b04 	ldr.w	r8, [r5], #4
 801ebfc:	fa17 f488 	uxtah	r4, r7, r8
 801ec00:	1422      	asrs	r2, r4, #16
 801ec02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ec06:	b2a4      	uxth	r4, r4
 801ec08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ec0c:	f84e 4b04 	str.w	r4, [lr], #4
 801ec10:	1417      	asrs	r7, r2, #16
 801ec12:	e7e0      	b.n	801ebd6 <__mdiff+0xc6>
 801ec14:	3e01      	subs	r6, #1
 801ec16:	e7ea      	b.n	801ebee <__mdiff+0xde>
 801ec18:	08021d87 	.word	0x08021d87
 801ec1c:	08021e18 	.word	0x08021e18

0801ec20 <__ulp>:
 801ec20:	b082      	sub	sp, #8
 801ec22:	ed8d 0b00 	vstr	d0, [sp]
 801ec26:	9b01      	ldr	r3, [sp, #4]
 801ec28:	4912      	ldr	r1, [pc, #72]	; (801ec74 <__ulp+0x54>)
 801ec2a:	4019      	ands	r1, r3
 801ec2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ec30:	2900      	cmp	r1, #0
 801ec32:	dd05      	ble.n	801ec40 <__ulp+0x20>
 801ec34:	2200      	movs	r2, #0
 801ec36:	460b      	mov	r3, r1
 801ec38:	ec43 2b10 	vmov	d0, r2, r3
 801ec3c:	b002      	add	sp, #8
 801ec3e:	4770      	bx	lr
 801ec40:	4249      	negs	r1, r1
 801ec42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ec46:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ec4a:	f04f 0200 	mov.w	r2, #0
 801ec4e:	f04f 0300 	mov.w	r3, #0
 801ec52:	da04      	bge.n	801ec5e <__ulp+0x3e>
 801ec54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ec58:	fa41 f300 	asr.w	r3, r1, r0
 801ec5c:	e7ec      	b.n	801ec38 <__ulp+0x18>
 801ec5e:	f1a0 0114 	sub.w	r1, r0, #20
 801ec62:	291e      	cmp	r1, #30
 801ec64:	bfda      	itte	le
 801ec66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ec6a:	fa20 f101 	lsrle.w	r1, r0, r1
 801ec6e:	2101      	movgt	r1, #1
 801ec70:	460a      	mov	r2, r1
 801ec72:	e7e1      	b.n	801ec38 <__ulp+0x18>
 801ec74:	7ff00000 	.word	0x7ff00000

0801ec78 <__b2d>:
 801ec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec7a:	6905      	ldr	r5, [r0, #16]
 801ec7c:	f100 0714 	add.w	r7, r0, #20
 801ec80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ec84:	1f2e      	subs	r6, r5, #4
 801ec86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ec8a:	4620      	mov	r0, r4
 801ec8c:	f7ff fd52 	bl	801e734 <__hi0bits>
 801ec90:	f1c0 0320 	rsb	r3, r0, #32
 801ec94:	280a      	cmp	r0, #10
 801ec96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801ed14 <__b2d+0x9c>
 801ec9a:	600b      	str	r3, [r1, #0]
 801ec9c:	dc14      	bgt.n	801ecc8 <__b2d+0x50>
 801ec9e:	f1c0 0e0b 	rsb	lr, r0, #11
 801eca2:	fa24 f10e 	lsr.w	r1, r4, lr
 801eca6:	42b7      	cmp	r7, r6
 801eca8:	ea41 030c 	orr.w	r3, r1, ip
 801ecac:	bf34      	ite	cc
 801ecae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ecb2:	2100      	movcs	r1, #0
 801ecb4:	3015      	adds	r0, #21
 801ecb6:	fa04 f000 	lsl.w	r0, r4, r0
 801ecba:	fa21 f10e 	lsr.w	r1, r1, lr
 801ecbe:	ea40 0201 	orr.w	r2, r0, r1
 801ecc2:	ec43 2b10 	vmov	d0, r2, r3
 801ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecc8:	42b7      	cmp	r7, r6
 801ecca:	bf3a      	itte	cc
 801eccc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ecd0:	f1a5 0608 	subcc.w	r6, r5, #8
 801ecd4:	2100      	movcs	r1, #0
 801ecd6:	380b      	subs	r0, #11
 801ecd8:	d017      	beq.n	801ed0a <__b2d+0x92>
 801ecda:	f1c0 0c20 	rsb	ip, r0, #32
 801ecde:	fa04 f500 	lsl.w	r5, r4, r0
 801ece2:	42be      	cmp	r6, r7
 801ece4:	fa21 f40c 	lsr.w	r4, r1, ip
 801ece8:	ea45 0504 	orr.w	r5, r5, r4
 801ecec:	bf8c      	ite	hi
 801ecee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ecf2:	2400      	movls	r4, #0
 801ecf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801ecf8:	fa01 f000 	lsl.w	r0, r1, r0
 801ecfc:	fa24 f40c 	lsr.w	r4, r4, ip
 801ed00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ed04:	ea40 0204 	orr.w	r2, r0, r4
 801ed08:	e7db      	b.n	801ecc2 <__b2d+0x4a>
 801ed0a:	ea44 030c 	orr.w	r3, r4, ip
 801ed0e:	460a      	mov	r2, r1
 801ed10:	e7d7      	b.n	801ecc2 <__b2d+0x4a>
 801ed12:	bf00      	nop
 801ed14:	3ff00000 	.word	0x3ff00000

0801ed18 <__d2b>:
 801ed18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ed1c:	4689      	mov	r9, r1
 801ed1e:	2101      	movs	r1, #1
 801ed20:	ec57 6b10 	vmov	r6, r7, d0
 801ed24:	4690      	mov	r8, r2
 801ed26:	f7ff fc0f 	bl	801e548 <_Balloc>
 801ed2a:	4604      	mov	r4, r0
 801ed2c:	b930      	cbnz	r0, 801ed3c <__d2b+0x24>
 801ed2e:	4602      	mov	r2, r0
 801ed30:	4b25      	ldr	r3, [pc, #148]	; (801edc8 <__d2b+0xb0>)
 801ed32:	4826      	ldr	r0, [pc, #152]	; (801edcc <__d2b+0xb4>)
 801ed34:	f240 310a 	movw	r1, #778	; 0x30a
 801ed38:	f7fe f882 	bl	801ce40 <__assert_func>
 801ed3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ed40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ed44:	bb35      	cbnz	r5, 801ed94 <__d2b+0x7c>
 801ed46:	2e00      	cmp	r6, #0
 801ed48:	9301      	str	r3, [sp, #4]
 801ed4a:	d028      	beq.n	801ed9e <__d2b+0x86>
 801ed4c:	4668      	mov	r0, sp
 801ed4e:	9600      	str	r6, [sp, #0]
 801ed50:	f7ff fd10 	bl	801e774 <__lo0bits>
 801ed54:	9900      	ldr	r1, [sp, #0]
 801ed56:	b300      	cbz	r0, 801ed9a <__d2b+0x82>
 801ed58:	9a01      	ldr	r2, [sp, #4]
 801ed5a:	f1c0 0320 	rsb	r3, r0, #32
 801ed5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ed62:	430b      	orrs	r3, r1
 801ed64:	40c2      	lsrs	r2, r0
 801ed66:	6163      	str	r3, [r4, #20]
 801ed68:	9201      	str	r2, [sp, #4]
 801ed6a:	9b01      	ldr	r3, [sp, #4]
 801ed6c:	61a3      	str	r3, [r4, #24]
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	bf14      	ite	ne
 801ed72:	2202      	movne	r2, #2
 801ed74:	2201      	moveq	r2, #1
 801ed76:	6122      	str	r2, [r4, #16]
 801ed78:	b1d5      	cbz	r5, 801edb0 <__d2b+0x98>
 801ed7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ed7e:	4405      	add	r5, r0
 801ed80:	f8c9 5000 	str.w	r5, [r9]
 801ed84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ed88:	f8c8 0000 	str.w	r0, [r8]
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	b003      	add	sp, #12
 801ed90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ed98:	e7d5      	b.n	801ed46 <__d2b+0x2e>
 801ed9a:	6161      	str	r1, [r4, #20]
 801ed9c:	e7e5      	b.n	801ed6a <__d2b+0x52>
 801ed9e:	a801      	add	r0, sp, #4
 801eda0:	f7ff fce8 	bl	801e774 <__lo0bits>
 801eda4:	9b01      	ldr	r3, [sp, #4]
 801eda6:	6163      	str	r3, [r4, #20]
 801eda8:	2201      	movs	r2, #1
 801edaa:	6122      	str	r2, [r4, #16]
 801edac:	3020      	adds	r0, #32
 801edae:	e7e3      	b.n	801ed78 <__d2b+0x60>
 801edb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801edb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801edb8:	f8c9 0000 	str.w	r0, [r9]
 801edbc:	6918      	ldr	r0, [r3, #16]
 801edbe:	f7ff fcb9 	bl	801e734 <__hi0bits>
 801edc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801edc6:	e7df      	b.n	801ed88 <__d2b+0x70>
 801edc8:	08021d87 	.word	0x08021d87
 801edcc:	08021e18 	.word	0x08021e18

0801edd0 <__ratio>:
 801edd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edd4:	4688      	mov	r8, r1
 801edd6:	4669      	mov	r1, sp
 801edd8:	4681      	mov	r9, r0
 801edda:	f7ff ff4d 	bl	801ec78 <__b2d>
 801edde:	a901      	add	r1, sp, #4
 801ede0:	4640      	mov	r0, r8
 801ede2:	ec55 4b10 	vmov	r4, r5, d0
 801ede6:	f7ff ff47 	bl	801ec78 <__b2d>
 801edea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801edee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801edf2:	eba3 0c02 	sub.w	ip, r3, r2
 801edf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801edfa:	1a9b      	subs	r3, r3, r2
 801edfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ee00:	ec51 0b10 	vmov	r0, r1, d0
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	bfd6      	itet	le
 801ee08:	460a      	movle	r2, r1
 801ee0a:	462a      	movgt	r2, r5
 801ee0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ee10:	468b      	mov	fp, r1
 801ee12:	462f      	mov	r7, r5
 801ee14:	bfd4      	ite	le
 801ee16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ee1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ee1e:	4620      	mov	r0, r4
 801ee20:	ee10 2a10 	vmov	r2, s0
 801ee24:	465b      	mov	r3, fp
 801ee26:	4639      	mov	r1, r7
 801ee28:	f7e1 fd20 	bl	800086c <__aeabi_ddiv>
 801ee2c:	ec41 0b10 	vmov	d0, r0, r1
 801ee30:	b003      	add	sp, #12
 801ee32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee36 <__copybits>:
 801ee36:	3901      	subs	r1, #1
 801ee38:	b570      	push	{r4, r5, r6, lr}
 801ee3a:	1149      	asrs	r1, r1, #5
 801ee3c:	6914      	ldr	r4, [r2, #16]
 801ee3e:	3101      	adds	r1, #1
 801ee40:	f102 0314 	add.w	r3, r2, #20
 801ee44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ee48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee4c:	1f05      	subs	r5, r0, #4
 801ee4e:	42a3      	cmp	r3, r4
 801ee50:	d30c      	bcc.n	801ee6c <__copybits+0x36>
 801ee52:	1aa3      	subs	r3, r4, r2
 801ee54:	3b11      	subs	r3, #17
 801ee56:	f023 0303 	bic.w	r3, r3, #3
 801ee5a:	3211      	adds	r2, #17
 801ee5c:	42a2      	cmp	r2, r4
 801ee5e:	bf88      	it	hi
 801ee60:	2300      	movhi	r3, #0
 801ee62:	4418      	add	r0, r3
 801ee64:	2300      	movs	r3, #0
 801ee66:	4288      	cmp	r0, r1
 801ee68:	d305      	bcc.n	801ee76 <__copybits+0x40>
 801ee6a:	bd70      	pop	{r4, r5, r6, pc}
 801ee6c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ee70:	f845 6f04 	str.w	r6, [r5, #4]!
 801ee74:	e7eb      	b.n	801ee4e <__copybits+0x18>
 801ee76:	f840 3b04 	str.w	r3, [r0], #4
 801ee7a:	e7f4      	b.n	801ee66 <__copybits+0x30>

0801ee7c <__any_on>:
 801ee7c:	f100 0214 	add.w	r2, r0, #20
 801ee80:	6900      	ldr	r0, [r0, #16]
 801ee82:	114b      	asrs	r3, r1, #5
 801ee84:	4298      	cmp	r0, r3
 801ee86:	b510      	push	{r4, lr}
 801ee88:	db11      	blt.n	801eeae <__any_on+0x32>
 801ee8a:	dd0a      	ble.n	801eea2 <__any_on+0x26>
 801ee8c:	f011 011f 	ands.w	r1, r1, #31
 801ee90:	d007      	beq.n	801eea2 <__any_on+0x26>
 801ee92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ee96:	fa24 f001 	lsr.w	r0, r4, r1
 801ee9a:	fa00 f101 	lsl.w	r1, r0, r1
 801ee9e:	428c      	cmp	r4, r1
 801eea0:	d10b      	bne.n	801eeba <__any_on+0x3e>
 801eea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eea6:	4293      	cmp	r3, r2
 801eea8:	d803      	bhi.n	801eeb2 <__any_on+0x36>
 801eeaa:	2000      	movs	r0, #0
 801eeac:	bd10      	pop	{r4, pc}
 801eeae:	4603      	mov	r3, r0
 801eeb0:	e7f7      	b.n	801eea2 <__any_on+0x26>
 801eeb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eeb6:	2900      	cmp	r1, #0
 801eeb8:	d0f5      	beq.n	801eea6 <__any_on+0x2a>
 801eeba:	2001      	movs	r0, #1
 801eebc:	e7f6      	b.n	801eeac <__any_on+0x30>

0801eebe <_calloc_r>:
 801eebe:	b513      	push	{r0, r1, r4, lr}
 801eec0:	434a      	muls	r2, r1
 801eec2:	4611      	mov	r1, r2
 801eec4:	9201      	str	r2, [sp, #4]
 801eec6:	f7fb fe99 	bl	801abfc <_malloc_r>
 801eeca:	4604      	mov	r4, r0
 801eecc:	b118      	cbz	r0, 801eed6 <_calloc_r+0x18>
 801eece:	9a01      	ldr	r2, [sp, #4]
 801eed0:	2100      	movs	r1, #0
 801eed2:	f7fb fe3b 	bl	801ab4c <memset>
 801eed6:	4620      	mov	r0, r4
 801eed8:	b002      	add	sp, #8
 801eeda:	bd10      	pop	{r4, pc}

0801eedc <_realloc_r>:
 801eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eede:	4607      	mov	r7, r0
 801eee0:	4614      	mov	r4, r2
 801eee2:	460e      	mov	r6, r1
 801eee4:	b921      	cbnz	r1, 801eef0 <_realloc_r+0x14>
 801eee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801eeea:	4611      	mov	r1, r2
 801eeec:	f7fb be86 	b.w	801abfc <_malloc_r>
 801eef0:	b922      	cbnz	r2, 801eefc <_realloc_r+0x20>
 801eef2:	f7fb fe33 	bl	801ab5c <_free_r>
 801eef6:	4625      	mov	r5, r4
 801eef8:	4628      	mov	r0, r5
 801eefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eefc:	f000 fe9e 	bl	801fc3c <_malloc_usable_size_r>
 801ef00:	42a0      	cmp	r0, r4
 801ef02:	d20f      	bcs.n	801ef24 <_realloc_r+0x48>
 801ef04:	4621      	mov	r1, r4
 801ef06:	4638      	mov	r0, r7
 801ef08:	f7fb fe78 	bl	801abfc <_malloc_r>
 801ef0c:	4605      	mov	r5, r0
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	d0f2      	beq.n	801eef8 <_realloc_r+0x1c>
 801ef12:	4631      	mov	r1, r6
 801ef14:	4622      	mov	r2, r4
 801ef16:	f7fb fdf1 	bl	801aafc <memcpy>
 801ef1a:	4631      	mov	r1, r6
 801ef1c:	4638      	mov	r0, r7
 801ef1e:	f7fb fe1d 	bl	801ab5c <_free_r>
 801ef22:	e7e9      	b.n	801eef8 <_realloc_r+0x1c>
 801ef24:	4635      	mov	r5, r6
 801ef26:	e7e7      	b.n	801eef8 <_realloc_r+0x1c>

0801ef28 <__ssputs_r>:
 801ef28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef2c:	688e      	ldr	r6, [r1, #8]
 801ef2e:	429e      	cmp	r6, r3
 801ef30:	4682      	mov	sl, r0
 801ef32:	460c      	mov	r4, r1
 801ef34:	4690      	mov	r8, r2
 801ef36:	461f      	mov	r7, r3
 801ef38:	d838      	bhi.n	801efac <__ssputs_r+0x84>
 801ef3a:	898a      	ldrh	r2, [r1, #12]
 801ef3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ef40:	d032      	beq.n	801efa8 <__ssputs_r+0x80>
 801ef42:	6825      	ldr	r5, [r4, #0]
 801ef44:	6909      	ldr	r1, [r1, #16]
 801ef46:	eba5 0901 	sub.w	r9, r5, r1
 801ef4a:	6965      	ldr	r5, [r4, #20]
 801ef4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ef54:	3301      	adds	r3, #1
 801ef56:	444b      	add	r3, r9
 801ef58:	106d      	asrs	r5, r5, #1
 801ef5a:	429d      	cmp	r5, r3
 801ef5c:	bf38      	it	cc
 801ef5e:	461d      	movcc	r5, r3
 801ef60:	0553      	lsls	r3, r2, #21
 801ef62:	d531      	bpl.n	801efc8 <__ssputs_r+0xa0>
 801ef64:	4629      	mov	r1, r5
 801ef66:	f7fb fe49 	bl	801abfc <_malloc_r>
 801ef6a:	4606      	mov	r6, r0
 801ef6c:	b950      	cbnz	r0, 801ef84 <__ssputs_r+0x5c>
 801ef6e:	230c      	movs	r3, #12
 801ef70:	f8ca 3000 	str.w	r3, [sl]
 801ef74:	89a3      	ldrh	r3, [r4, #12]
 801ef76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef7a:	81a3      	strh	r3, [r4, #12]
 801ef7c:	f04f 30ff 	mov.w	r0, #4294967295
 801ef80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef84:	6921      	ldr	r1, [r4, #16]
 801ef86:	464a      	mov	r2, r9
 801ef88:	f7fb fdb8 	bl	801aafc <memcpy>
 801ef8c:	89a3      	ldrh	r3, [r4, #12]
 801ef8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ef92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef96:	81a3      	strh	r3, [r4, #12]
 801ef98:	6126      	str	r6, [r4, #16]
 801ef9a:	6165      	str	r5, [r4, #20]
 801ef9c:	444e      	add	r6, r9
 801ef9e:	eba5 0509 	sub.w	r5, r5, r9
 801efa2:	6026      	str	r6, [r4, #0]
 801efa4:	60a5      	str	r5, [r4, #8]
 801efa6:	463e      	mov	r6, r7
 801efa8:	42be      	cmp	r6, r7
 801efaa:	d900      	bls.n	801efae <__ssputs_r+0x86>
 801efac:	463e      	mov	r6, r7
 801efae:	4632      	mov	r2, r6
 801efb0:	6820      	ldr	r0, [r4, #0]
 801efb2:	4641      	mov	r1, r8
 801efb4:	f7fb fdb0 	bl	801ab18 <memmove>
 801efb8:	68a3      	ldr	r3, [r4, #8]
 801efba:	6822      	ldr	r2, [r4, #0]
 801efbc:	1b9b      	subs	r3, r3, r6
 801efbe:	4432      	add	r2, r6
 801efc0:	60a3      	str	r3, [r4, #8]
 801efc2:	6022      	str	r2, [r4, #0]
 801efc4:	2000      	movs	r0, #0
 801efc6:	e7db      	b.n	801ef80 <__ssputs_r+0x58>
 801efc8:	462a      	mov	r2, r5
 801efca:	f7ff ff87 	bl	801eedc <_realloc_r>
 801efce:	4606      	mov	r6, r0
 801efd0:	2800      	cmp	r0, #0
 801efd2:	d1e1      	bne.n	801ef98 <__ssputs_r+0x70>
 801efd4:	6921      	ldr	r1, [r4, #16]
 801efd6:	4650      	mov	r0, sl
 801efd8:	f7fb fdc0 	bl	801ab5c <_free_r>
 801efdc:	e7c7      	b.n	801ef6e <__ssputs_r+0x46>
	...

0801efe0 <_svfiprintf_r>:
 801efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	4698      	mov	r8, r3
 801efe6:	898b      	ldrh	r3, [r1, #12]
 801efe8:	061b      	lsls	r3, r3, #24
 801efea:	b09d      	sub	sp, #116	; 0x74
 801efec:	4607      	mov	r7, r0
 801efee:	460d      	mov	r5, r1
 801eff0:	4614      	mov	r4, r2
 801eff2:	d50e      	bpl.n	801f012 <_svfiprintf_r+0x32>
 801eff4:	690b      	ldr	r3, [r1, #16]
 801eff6:	b963      	cbnz	r3, 801f012 <_svfiprintf_r+0x32>
 801eff8:	2140      	movs	r1, #64	; 0x40
 801effa:	f7fb fdff 	bl	801abfc <_malloc_r>
 801effe:	6028      	str	r0, [r5, #0]
 801f000:	6128      	str	r0, [r5, #16]
 801f002:	b920      	cbnz	r0, 801f00e <_svfiprintf_r+0x2e>
 801f004:	230c      	movs	r3, #12
 801f006:	603b      	str	r3, [r7, #0]
 801f008:	f04f 30ff 	mov.w	r0, #4294967295
 801f00c:	e0d1      	b.n	801f1b2 <_svfiprintf_r+0x1d2>
 801f00e:	2340      	movs	r3, #64	; 0x40
 801f010:	616b      	str	r3, [r5, #20]
 801f012:	2300      	movs	r3, #0
 801f014:	9309      	str	r3, [sp, #36]	; 0x24
 801f016:	2320      	movs	r3, #32
 801f018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f01c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f020:	2330      	movs	r3, #48	; 0x30
 801f022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f1cc <_svfiprintf_r+0x1ec>
 801f026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f02a:	f04f 0901 	mov.w	r9, #1
 801f02e:	4623      	mov	r3, r4
 801f030:	469a      	mov	sl, r3
 801f032:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f036:	b10a      	cbz	r2, 801f03c <_svfiprintf_r+0x5c>
 801f038:	2a25      	cmp	r2, #37	; 0x25
 801f03a:	d1f9      	bne.n	801f030 <_svfiprintf_r+0x50>
 801f03c:	ebba 0b04 	subs.w	fp, sl, r4
 801f040:	d00b      	beq.n	801f05a <_svfiprintf_r+0x7a>
 801f042:	465b      	mov	r3, fp
 801f044:	4622      	mov	r2, r4
 801f046:	4629      	mov	r1, r5
 801f048:	4638      	mov	r0, r7
 801f04a:	f7ff ff6d 	bl	801ef28 <__ssputs_r>
 801f04e:	3001      	adds	r0, #1
 801f050:	f000 80aa 	beq.w	801f1a8 <_svfiprintf_r+0x1c8>
 801f054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f056:	445a      	add	r2, fp
 801f058:	9209      	str	r2, [sp, #36]	; 0x24
 801f05a:	f89a 3000 	ldrb.w	r3, [sl]
 801f05e:	2b00      	cmp	r3, #0
 801f060:	f000 80a2 	beq.w	801f1a8 <_svfiprintf_r+0x1c8>
 801f064:	2300      	movs	r3, #0
 801f066:	f04f 32ff 	mov.w	r2, #4294967295
 801f06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f06e:	f10a 0a01 	add.w	sl, sl, #1
 801f072:	9304      	str	r3, [sp, #16]
 801f074:	9307      	str	r3, [sp, #28]
 801f076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f07a:	931a      	str	r3, [sp, #104]	; 0x68
 801f07c:	4654      	mov	r4, sl
 801f07e:	2205      	movs	r2, #5
 801f080:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f084:	4851      	ldr	r0, [pc, #324]	; (801f1cc <_svfiprintf_r+0x1ec>)
 801f086:	f7e1 f8bb 	bl	8000200 <memchr>
 801f08a:	9a04      	ldr	r2, [sp, #16]
 801f08c:	b9d8      	cbnz	r0, 801f0c6 <_svfiprintf_r+0xe6>
 801f08e:	06d0      	lsls	r0, r2, #27
 801f090:	bf44      	itt	mi
 801f092:	2320      	movmi	r3, #32
 801f094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f098:	0711      	lsls	r1, r2, #28
 801f09a:	bf44      	itt	mi
 801f09c:	232b      	movmi	r3, #43	; 0x2b
 801f09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f0a2:	f89a 3000 	ldrb.w	r3, [sl]
 801f0a6:	2b2a      	cmp	r3, #42	; 0x2a
 801f0a8:	d015      	beq.n	801f0d6 <_svfiprintf_r+0xf6>
 801f0aa:	9a07      	ldr	r2, [sp, #28]
 801f0ac:	4654      	mov	r4, sl
 801f0ae:	2000      	movs	r0, #0
 801f0b0:	f04f 0c0a 	mov.w	ip, #10
 801f0b4:	4621      	mov	r1, r4
 801f0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f0ba:	3b30      	subs	r3, #48	; 0x30
 801f0bc:	2b09      	cmp	r3, #9
 801f0be:	d94e      	bls.n	801f15e <_svfiprintf_r+0x17e>
 801f0c0:	b1b0      	cbz	r0, 801f0f0 <_svfiprintf_r+0x110>
 801f0c2:	9207      	str	r2, [sp, #28]
 801f0c4:	e014      	b.n	801f0f0 <_svfiprintf_r+0x110>
 801f0c6:	eba0 0308 	sub.w	r3, r0, r8
 801f0ca:	fa09 f303 	lsl.w	r3, r9, r3
 801f0ce:	4313      	orrs	r3, r2
 801f0d0:	9304      	str	r3, [sp, #16]
 801f0d2:	46a2      	mov	sl, r4
 801f0d4:	e7d2      	b.n	801f07c <_svfiprintf_r+0x9c>
 801f0d6:	9b03      	ldr	r3, [sp, #12]
 801f0d8:	1d19      	adds	r1, r3, #4
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	9103      	str	r1, [sp, #12]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	bfbb      	ittet	lt
 801f0e2:	425b      	neglt	r3, r3
 801f0e4:	f042 0202 	orrlt.w	r2, r2, #2
 801f0e8:	9307      	strge	r3, [sp, #28]
 801f0ea:	9307      	strlt	r3, [sp, #28]
 801f0ec:	bfb8      	it	lt
 801f0ee:	9204      	strlt	r2, [sp, #16]
 801f0f0:	7823      	ldrb	r3, [r4, #0]
 801f0f2:	2b2e      	cmp	r3, #46	; 0x2e
 801f0f4:	d10c      	bne.n	801f110 <_svfiprintf_r+0x130>
 801f0f6:	7863      	ldrb	r3, [r4, #1]
 801f0f8:	2b2a      	cmp	r3, #42	; 0x2a
 801f0fa:	d135      	bne.n	801f168 <_svfiprintf_r+0x188>
 801f0fc:	9b03      	ldr	r3, [sp, #12]
 801f0fe:	1d1a      	adds	r2, r3, #4
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	9203      	str	r2, [sp, #12]
 801f104:	2b00      	cmp	r3, #0
 801f106:	bfb8      	it	lt
 801f108:	f04f 33ff 	movlt.w	r3, #4294967295
 801f10c:	3402      	adds	r4, #2
 801f10e:	9305      	str	r3, [sp, #20]
 801f110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f1dc <_svfiprintf_r+0x1fc>
 801f114:	7821      	ldrb	r1, [r4, #0]
 801f116:	2203      	movs	r2, #3
 801f118:	4650      	mov	r0, sl
 801f11a:	f7e1 f871 	bl	8000200 <memchr>
 801f11e:	b140      	cbz	r0, 801f132 <_svfiprintf_r+0x152>
 801f120:	2340      	movs	r3, #64	; 0x40
 801f122:	eba0 000a 	sub.w	r0, r0, sl
 801f126:	fa03 f000 	lsl.w	r0, r3, r0
 801f12a:	9b04      	ldr	r3, [sp, #16]
 801f12c:	4303      	orrs	r3, r0
 801f12e:	3401      	adds	r4, #1
 801f130:	9304      	str	r3, [sp, #16]
 801f132:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f136:	4826      	ldr	r0, [pc, #152]	; (801f1d0 <_svfiprintf_r+0x1f0>)
 801f138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f13c:	2206      	movs	r2, #6
 801f13e:	f7e1 f85f 	bl	8000200 <memchr>
 801f142:	2800      	cmp	r0, #0
 801f144:	d038      	beq.n	801f1b8 <_svfiprintf_r+0x1d8>
 801f146:	4b23      	ldr	r3, [pc, #140]	; (801f1d4 <_svfiprintf_r+0x1f4>)
 801f148:	bb1b      	cbnz	r3, 801f192 <_svfiprintf_r+0x1b2>
 801f14a:	9b03      	ldr	r3, [sp, #12]
 801f14c:	3307      	adds	r3, #7
 801f14e:	f023 0307 	bic.w	r3, r3, #7
 801f152:	3308      	adds	r3, #8
 801f154:	9303      	str	r3, [sp, #12]
 801f156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f158:	4433      	add	r3, r6
 801f15a:	9309      	str	r3, [sp, #36]	; 0x24
 801f15c:	e767      	b.n	801f02e <_svfiprintf_r+0x4e>
 801f15e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f162:	460c      	mov	r4, r1
 801f164:	2001      	movs	r0, #1
 801f166:	e7a5      	b.n	801f0b4 <_svfiprintf_r+0xd4>
 801f168:	2300      	movs	r3, #0
 801f16a:	3401      	adds	r4, #1
 801f16c:	9305      	str	r3, [sp, #20]
 801f16e:	4619      	mov	r1, r3
 801f170:	f04f 0c0a 	mov.w	ip, #10
 801f174:	4620      	mov	r0, r4
 801f176:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f17a:	3a30      	subs	r2, #48	; 0x30
 801f17c:	2a09      	cmp	r2, #9
 801f17e:	d903      	bls.n	801f188 <_svfiprintf_r+0x1a8>
 801f180:	2b00      	cmp	r3, #0
 801f182:	d0c5      	beq.n	801f110 <_svfiprintf_r+0x130>
 801f184:	9105      	str	r1, [sp, #20]
 801f186:	e7c3      	b.n	801f110 <_svfiprintf_r+0x130>
 801f188:	fb0c 2101 	mla	r1, ip, r1, r2
 801f18c:	4604      	mov	r4, r0
 801f18e:	2301      	movs	r3, #1
 801f190:	e7f0      	b.n	801f174 <_svfiprintf_r+0x194>
 801f192:	ab03      	add	r3, sp, #12
 801f194:	9300      	str	r3, [sp, #0]
 801f196:	462a      	mov	r2, r5
 801f198:	4b0f      	ldr	r3, [pc, #60]	; (801f1d8 <_svfiprintf_r+0x1f8>)
 801f19a:	a904      	add	r1, sp, #16
 801f19c:	4638      	mov	r0, r7
 801f19e:	f7fb fe27 	bl	801adf0 <_printf_float>
 801f1a2:	1c42      	adds	r2, r0, #1
 801f1a4:	4606      	mov	r6, r0
 801f1a6:	d1d6      	bne.n	801f156 <_svfiprintf_r+0x176>
 801f1a8:	89ab      	ldrh	r3, [r5, #12]
 801f1aa:	065b      	lsls	r3, r3, #25
 801f1ac:	f53f af2c 	bmi.w	801f008 <_svfiprintf_r+0x28>
 801f1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f1b2:	b01d      	add	sp, #116	; 0x74
 801f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b8:	ab03      	add	r3, sp, #12
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	462a      	mov	r2, r5
 801f1be:	4b06      	ldr	r3, [pc, #24]	; (801f1d8 <_svfiprintf_r+0x1f8>)
 801f1c0:	a904      	add	r1, sp, #16
 801f1c2:	4638      	mov	r0, r7
 801f1c4:	f7fc f8b8 	bl	801b338 <_printf_i>
 801f1c8:	e7eb      	b.n	801f1a2 <_svfiprintf_r+0x1c2>
 801f1ca:	bf00      	nop
 801f1cc:	08021f74 	.word	0x08021f74
 801f1d0:	08021f7e 	.word	0x08021f7e
 801f1d4:	0801adf1 	.word	0x0801adf1
 801f1d8:	0801ef29 	.word	0x0801ef29
 801f1dc:	08021f7a 	.word	0x08021f7a

0801f1e0 <_sungetc_r>:
 801f1e0:	b538      	push	{r3, r4, r5, lr}
 801f1e2:	1c4b      	adds	r3, r1, #1
 801f1e4:	4614      	mov	r4, r2
 801f1e6:	d103      	bne.n	801f1f0 <_sungetc_r+0x10>
 801f1e8:	f04f 35ff 	mov.w	r5, #4294967295
 801f1ec:	4628      	mov	r0, r5
 801f1ee:	bd38      	pop	{r3, r4, r5, pc}
 801f1f0:	8993      	ldrh	r3, [r2, #12]
 801f1f2:	f023 0320 	bic.w	r3, r3, #32
 801f1f6:	8193      	strh	r3, [r2, #12]
 801f1f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1fa:	6852      	ldr	r2, [r2, #4]
 801f1fc:	b2cd      	uxtb	r5, r1
 801f1fe:	b18b      	cbz	r3, 801f224 <_sungetc_r+0x44>
 801f200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f202:	4293      	cmp	r3, r2
 801f204:	dd08      	ble.n	801f218 <_sungetc_r+0x38>
 801f206:	6823      	ldr	r3, [r4, #0]
 801f208:	1e5a      	subs	r2, r3, #1
 801f20a:	6022      	str	r2, [r4, #0]
 801f20c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801f210:	6863      	ldr	r3, [r4, #4]
 801f212:	3301      	adds	r3, #1
 801f214:	6063      	str	r3, [r4, #4]
 801f216:	e7e9      	b.n	801f1ec <_sungetc_r+0xc>
 801f218:	4621      	mov	r1, r4
 801f21a:	f000 fca5 	bl	801fb68 <__submore>
 801f21e:	2800      	cmp	r0, #0
 801f220:	d0f1      	beq.n	801f206 <_sungetc_r+0x26>
 801f222:	e7e1      	b.n	801f1e8 <_sungetc_r+0x8>
 801f224:	6921      	ldr	r1, [r4, #16]
 801f226:	6823      	ldr	r3, [r4, #0]
 801f228:	b151      	cbz	r1, 801f240 <_sungetc_r+0x60>
 801f22a:	4299      	cmp	r1, r3
 801f22c:	d208      	bcs.n	801f240 <_sungetc_r+0x60>
 801f22e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801f232:	42a9      	cmp	r1, r5
 801f234:	d104      	bne.n	801f240 <_sungetc_r+0x60>
 801f236:	3b01      	subs	r3, #1
 801f238:	3201      	adds	r2, #1
 801f23a:	6023      	str	r3, [r4, #0]
 801f23c:	6062      	str	r2, [r4, #4]
 801f23e:	e7d5      	b.n	801f1ec <_sungetc_r+0xc>
 801f240:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801f244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f248:	6363      	str	r3, [r4, #52]	; 0x34
 801f24a:	2303      	movs	r3, #3
 801f24c:	63a3      	str	r3, [r4, #56]	; 0x38
 801f24e:	4623      	mov	r3, r4
 801f250:	f803 5f46 	strb.w	r5, [r3, #70]!
 801f254:	6023      	str	r3, [r4, #0]
 801f256:	2301      	movs	r3, #1
 801f258:	e7dc      	b.n	801f214 <_sungetc_r+0x34>

0801f25a <__ssrefill_r>:
 801f25a:	b510      	push	{r4, lr}
 801f25c:	460c      	mov	r4, r1
 801f25e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f260:	b169      	cbz	r1, 801f27e <__ssrefill_r+0x24>
 801f262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f266:	4299      	cmp	r1, r3
 801f268:	d001      	beq.n	801f26e <__ssrefill_r+0x14>
 801f26a:	f7fb fc77 	bl	801ab5c <_free_r>
 801f26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f270:	6063      	str	r3, [r4, #4]
 801f272:	2000      	movs	r0, #0
 801f274:	6360      	str	r0, [r4, #52]	; 0x34
 801f276:	b113      	cbz	r3, 801f27e <__ssrefill_r+0x24>
 801f278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f27a:	6023      	str	r3, [r4, #0]
 801f27c:	bd10      	pop	{r4, pc}
 801f27e:	6923      	ldr	r3, [r4, #16]
 801f280:	6023      	str	r3, [r4, #0]
 801f282:	2300      	movs	r3, #0
 801f284:	6063      	str	r3, [r4, #4]
 801f286:	89a3      	ldrh	r3, [r4, #12]
 801f288:	f043 0320 	orr.w	r3, r3, #32
 801f28c:	81a3      	strh	r3, [r4, #12]
 801f28e:	f04f 30ff 	mov.w	r0, #4294967295
 801f292:	e7f3      	b.n	801f27c <__ssrefill_r+0x22>

0801f294 <__ssvfiscanf_r>:
 801f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f298:	460c      	mov	r4, r1
 801f29a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801f29e:	2100      	movs	r1, #0
 801f2a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801f2a4:	49b2      	ldr	r1, [pc, #712]	; (801f570 <__ssvfiscanf_r+0x2dc>)
 801f2a6:	91a0      	str	r1, [sp, #640]	; 0x280
 801f2a8:	f10d 0804 	add.w	r8, sp, #4
 801f2ac:	49b1      	ldr	r1, [pc, #708]	; (801f574 <__ssvfiscanf_r+0x2e0>)
 801f2ae:	4fb2      	ldr	r7, [pc, #712]	; (801f578 <__ssvfiscanf_r+0x2e4>)
 801f2b0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f57c <__ssvfiscanf_r+0x2e8>
 801f2b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801f2b8:	4606      	mov	r6, r0
 801f2ba:	91a1      	str	r1, [sp, #644]	; 0x284
 801f2bc:	9300      	str	r3, [sp, #0]
 801f2be:	f892 a000 	ldrb.w	sl, [r2]
 801f2c2:	f1ba 0f00 	cmp.w	sl, #0
 801f2c6:	f000 8151 	beq.w	801f56c <__ssvfiscanf_r+0x2d8>
 801f2ca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801f2ce:	f013 0308 	ands.w	r3, r3, #8
 801f2d2:	f102 0501 	add.w	r5, r2, #1
 801f2d6:	d019      	beq.n	801f30c <__ssvfiscanf_r+0x78>
 801f2d8:	6863      	ldr	r3, [r4, #4]
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	dd0f      	ble.n	801f2fe <__ssvfiscanf_r+0x6a>
 801f2de:	6823      	ldr	r3, [r4, #0]
 801f2e0:	781a      	ldrb	r2, [r3, #0]
 801f2e2:	5cba      	ldrb	r2, [r7, r2]
 801f2e4:	0712      	lsls	r2, r2, #28
 801f2e6:	d401      	bmi.n	801f2ec <__ssvfiscanf_r+0x58>
 801f2e8:	462a      	mov	r2, r5
 801f2ea:	e7e8      	b.n	801f2be <__ssvfiscanf_r+0x2a>
 801f2ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f2ee:	3201      	adds	r2, #1
 801f2f0:	9245      	str	r2, [sp, #276]	; 0x114
 801f2f2:	6862      	ldr	r2, [r4, #4]
 801f2f4:	3301      	adds	r3, #1
 801f2f6:	3a01      	subs	r2, #1
 801f2f8:	6062      	str	r2, [r4, #4]
 801f2fa:	6023      	str	r3, [r4, #0]
 801f2fc:	e7ec      	b.n	801f2d8 <__ssvfiscanf_r+0x44>
 801f2fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f300:	4621      	mov	r1, r4
 801f302:	4630      	mov	r0, r6
 801f304:	4798      	blx	r3
 801f306:	2800      	cmp	r0, #0
 801f308:	d0e9      	beq.n	801f2de <__ssvfiscanf_r+0x4a>
 801f30a:	e7ed      	b.n	801f2e8 <__ssvfiscanf_r+0x54>
 801f30c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801f310:	f040 8083 	bne.w	801f41a <__ssvfiscanf_r+0x186>
 801f314:	9341      	str	r3, [sp, #260]	; 0x104
 801f316:	9343      	str	r3, [sp, #268]	; 0x10c
 801f318:	7853      	ldrb	r3, [r2, #1]
 801f31a:	2b2a      	cmp	r3, #42	; 0x2a
 801f31c:	bf02      	ittt	eq
 801f31e:	2310      	moveq	r3, #16
 801f320:	1c95      	addeq	r5, r2, #2
 801f322:	9341      	streq	r3, [sp, #260]	; 0x104
 801f324:	220a      	movs	r2, #10
 801f326:	46ab      	mov	fp, r5
 801f328:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801f32c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801f330:	2b09      	cmp	r3, #9
 801f332:	d91d      	bls.n	801f370 <__ssvfiscanf_r+0xdc>
 801f334:	4891      	ldr	r0, [pc, #580]	; (801f57c <__ssvfiscanf_r+0x2e8>)
 801f336:	2203      	movs	r2, #3
 801f338:	f7e0 ff62 	bl	8000200 <memchr>
 801f33c:	b140      	cbz	r0, 801f350 <__ssvfiscanf_r+0xbc>
 801f33e:	2301      	movs	r3, #1
 801f340:	eba0 0009 	sub.w	r0, r0, r9
 801f344:	fa03 f000 	lsl.w	r0, r3, r0
 801f348:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f34a:	4318      	orrs	r0, r3
 801f34c:	9041      	str	r0, [sp, #260]	; 0x104
 801f34e:	465d      	mov	r5, fp
 801f350:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f354:	2b78      	cmp	r3, #120	; 0x78
 801f356:	d806      	bhi.n	801f366 <__ssvfiscanf_r+0xd2>
 801f358:	2b57      	cmp	r3, #87	; 0x57
 801f35a:	d810      	bhi.n	801f37e <__ssvfiscanf_r+0xea>
 801f35c:	2b25      	cmp	r3, #37	; 0x25
 801f35e:	d05c      	beq.n	801f41a <__ssvfiscanf_r+0x186>
 801f360:	d856      	bhi.n	801f410 <__ssvfiscanf_r+0x17c>
 801f362:	2b00      	cmp	r3, #0
 801f364:	d074      	beq.n	801f450 <__ssvfiscanf_r+0x1bc>
 801f366:	2303      	movs	r3, #3
 801f368:	9347      	str	r3, [sp, #284]	; 0x11c
 801f36a:	230a      	movs	r3, #10
 801f36c:	9342      	str	r3, [sp, #264]	; 0x108
 801f36e:	e081      	b.n	801f474 <__ssvfiscanf_r+0x1e0>
 801f370:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801f372:	fb02 1303 	mla	r3, r2, r3, r1
 801f376:	3b30      	subs	r3, #48	; 0x30
 801f378:	9343      	str	r3, [sp, #268]	; 0x10c
 801f37a:	465d      	mov	r5, fp
 801f37c:	e7d3      	b.n	801f326 <__ssvfiscanf_r+0x92>
 801f37e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801f382:	2a20      	cmp	r2, #32
 801f384:	d8ef      	bhi.n	801f366 <__ssvfiscanf_r+0xd2>
 801f386:	a101      	add	r1, pc, #4	; (adr r1, 801f38c <__ssvfiscanf_r+0xf8>)
 801f388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f38c:	0801f45f 	.word	0x0801f45f
 801f390:	0801f367 	.word	0x0801f367
 801f394:	0801f367 	.word	0x0801f367
 801f398:	0801f4bd 	.word	0x0801f4bd
 801f39c:	0801f367 	.word	0x0801f367
 801f3a0:	0801f367 	.word	0x0801f367
 801f3a4:	0801f367 	.word	0x0801f367
 801f3a8:	0801f367 	.word	0x0801f367
 801f3ac:	0801f367 	.word	0x0801f367
 801f3b0:	0801f367 	.word	0x0801f367
 801f3b4:	0801f367 	.word	0x0801f367
 801f3b8:	0801f4d3 	.word	0x0801f4d3
 801f3bc:	0801f4a9 	.word	0x0801f4a9
 801f3c0:	0801f417 	.word	0x0801f417
 801f3c4:	0801f417 	.word	0x0801f417
 801f3c8:	0801f417 	.word	0x0801f417
 801f3cc:	0801f367 	.word	0x0801f367
 801f3d0:	0801f4ad 	.word	0x0801f4ad
 801f3d4:	0801f367 	.word	0x0801f367
 801f3d8:	0801f367 	.word	0x0801f367
 801f3dc:	0801f367 	.word	0x0801f367
 801f3e0:	0801f367 	.word	0x0801f367
 801f3e4:	0801f4e3 	.word	0x0801f4e3
 801f3e8:	0801f4b5 	.word	0x0801f4b5
 801f3ec:	0801f457 	.word	0x0801f457
 801f3f0:	0801f367 	.word	0x0801f367
 801f3f4:	0801f367 	.word	0x0801f367
 801f3f8:	0801f4df 	.word	0x0801f4df
 801f3fc:	0801f367 	.word	0x0801f367
 801f400:	0801f4a9 	.word	0x0801f4a9
 801f404:	0801f367 	.word	0x0801f367
 801f408:	0801f367 	.word	0x0801f367
 801f40c:	0801f45f 	.word	0x0801f45f
 801f410:	3b45      	subs	r3, #69	; 0x45
 801f412:	2b02      	cmp	r3, #2
 801f414:	d8a7      	bhi.n	801f366 <__ssvfiscanf_r+0xd2>
 801f416:	2305      	movs	r3, #5
 801f418:	e02b      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f41a:	6863      	ldr	r3, [r4, #4]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	dd0d      	ble.n	801f43c <__ssvfiscanf_r+0x1a8>
 801f420:	6823      	ldr	r3, [r4, #0]
 801f422:	781a      	ldrb	r2, [r3, #0]
 801f424:	4552      	cmp	r2, sl
 801f426:	f040 80a1 	bne.w	801f56c <__ssvfiscanf_r+0x2d8>
 801f42a:	3301      	adds	r3, #1
 801f42c:	6862      	ldr	r2, [r4, #4]
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f432:	3a01      	subs	r2, #1
 801f434:	3301      	adds	r3, #1
 801f436:	6062      	str	r2, [r4, #4]
 801f438:	9345      	str	r3, [sp, #276]	; 0x114
 801f43a:	e755      	b.n	801f2e8 <__ssvfiscanf_r+0x54>
 801f43c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f43e:	4621      	mov	r1, r4
 801f440:	4630      	mov	r0, r6
 801f442:	4798      	blx	r3
 801f444:	2800      	cmp	r0, #0
 801f446:	d0eb      	beq.n	801f420 <__ssvfiscanf_r+0x18c>
 801f448:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f44a:	2800      	cmp	r0, #0
 801f44c:	f040 8084 	bne.w	801f558 <__ssvfiscanf_r+0x2c4>
 801f450:	f04f 30ff 	mov.w	r0, #4294967295
 801f454:	e086      	b.n	801f564 <__ssvfiscanf_r+0x2d0>
 801f456:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f458:	f042 0220 	orr.w	r2, r2, #32
 801f45c:	9241      	str	r2, [sp, #260]	; 0x104
 801f45e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f464:	9241      	str	r2, [sp, #260]	; 0x104
 801f466:	2210      	movs	r2, #16
 801f468:	2b6f      	cmp	r3, #111	; 0x6f
 801f46a:	9242      	str	r2, [sp, #264]	; 0x108
 801f46c:	bf34      	ite	cc
 801f46e:	2303      	movcc	r3, #3
 801f470:	2304      	movcs	r3, #4
 801f472:	9347      	str	r3, [sp, #284]	; 0x11c
 801f474:	6863      	ldr	r3, [r4, #4]
 801f476:	2b00      	cmp	r3, #0
 801f478:	dd41      	ble.n	801f4fe <__ssvfiscanf_r+0x26a>
 801f47a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f47c:	0659      	lsls	r1, r3, #25
 801f47e:	d404      	bmi.n	801f48a <__ssvfiscanf_r+0x1f6>
 801f480:	6823      	ldr	r3, [r4, #0]
 801f482:	781a      	ldrb	r2, [r3, #0]
 801f484:	5cba      	ldrb	r2, [r7, r2]
 801f486:	0712      	lsls	r2, r2, #28
 801f488:	d440      	bmi.n	801f50c <__ssvfiscanf_r+0x278>
 801f48a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f48c:	2b02      	cmp	r3, #2
 801f48e:	dc4f      	bgt.n	801f530 <__ssvfiscanf_r+0x29c>
 801f490:	466b      	mov	r3, sp
 801f492:	4622      	mov	r2, r4
 801f494:	a941      	add	r1, sp, #260	; 0x104
 801f496:	4630      	mov	r0, r6
 801f498:	f000 f9ce 	bl	801f838 <_scanf_chars>
 801f49c:	2801      	cmp	r0, #1
 801f49e:	d065      	beq.n	801f56c <__ssvfiscanf_r+0x2d8>
 801f4a0:	2802      	cmp	r0, #2
 801f4a2:	f47f af21 	bne.w	801f2e8 <__ssvfiscanf_r+0x54>
 801f4a6:	e7cf      	b.n	801f448 <__ssvfiscanf_r+0x1b4>
 801f4a8:	220a      	movs	r2, #10
 801f4aa:	e7dd      	b.n	801f468 <__ssvfiscanf_r+0x1d4>
 801f4ac:	2300      	movs	r3, #0
 801f4ae:	9342      	str	r3, [sp, #264]	; 0x108
 801f4b0:	2303      	movs	r3, #3
 801f4b2:	e7de      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f4b4:	2308      	movs	r3, #8
 801f4b6:	9342      	str	r3, [sp, #264]	; 0x108
 801f4b8:	2304      	movs	r3, #4
 801f4ba:	e7da      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f4bc:	4629      	mov	r1, r5
 801f4be:	4640      	mov	r0, r8
 801f4c0:	f000 fb18 	bl	801faf4 <__sccl>
 801f4c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4ca:	9341      	str	r3, [sp, #260]	; 0x104
 801f4cc:	4605      	mov	r5, r0
 801f4ce:	2301      	movs	r3, #1
 801f4d0:	e7cf      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f4d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4d8:	9341      	str	r3, [sp, #260]	; 0x104
 801f4da:	2300      	movs	r3, #0
 801f4dc:	e7c9      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f4de:	2302      	movs	r3, #2
 801f4e0:	e7c7      	b.n	801f472 <__ssvfiscanf_r+0x1de>
 801f4e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f4e4:	06c3      	lsls	r3, r0, #27
 801f4e6:	f53f aeff 	bmi.w	801f2e8 <__ssvfiscanf_r+0x54>
 801f4ea:	9b00      	ldr	r3, [sp, #0]
 801f4ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f4ee:	1d19      	adds	r1, r3, #4
 801f4f0:	9100      	str	r1, [sp, #0]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	07c0      	lsls	r0, r0, #31
 801f4f6:	bf4c      	ite	mi
 801f4f8:	801a      	strhmi	r2, [r3, #0]
 801f4fa:	601a      	strpl	r2, [r3, #0]
 801f4fc:	e6f4      	b.n	801f2e8 <__ssvfiscanf_r+0x54>
 801f4fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f500:	4621      	mov	r1, r4
 801f502:	4630      	mov	r0, r6
 801f504:	4798      	blx	r3
 801f506:	2800      	cmp	r0, #0
 801f508:	d0b7      	beq.n	801f47a <__ssvfiscanf_r+0x1e6>
 801f50a:	e79d      	b.n	801f448 <__ssvfiscanf_r+0x1b4>
 801f50c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f50e:	3201      	adds	r2, #1
 801f510:	9245      	str	r2, [sp, #276]	; 0x114
 801f512:	6862      	ldr	r2, [r4, #4]
 801f514:	3a01      	subs	r2, #1
 801f516:	2a00      	cmp	r2, #0
 801f518:	6062      	str	r2, [r4, #4]
 801f51a:	dd02      	ble.n	801f522 <__ssvfiscanf_r+0x28e>
 801f51c:	3301      	adds	r3, #1
 801f51e:	6023      	str	r3, [r4, #0]
 801f520:	e7ae      	b.n	801f480 <__ssvfiscanf_r+0x1ec>
 801f522:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f524:	4621      	mov	r1, r4
 801f526:	4630      	mov	r0, r6
 801f528:	4798      	blx	r3
 801f52a:	2800      	cmp	r0, #0
 801f52c:	d0a8      	beq.n	801f480 <__ssvfiscanf_r+0x1ec>
 801f52e:	e78b      	b.n	801f448 <__ssvfiscanf_r+0x1b4>
 801f530:	2b04      	cmp	r3, #4
 801f532:	dc06      	bgt.n	801f542 <__ssvfiscanf_r+0x2ae>
 801f534:	466b      	mov	r3, sp
 801f536:	4622      	mov	r2, r4
 801f538:	a941      	add	r1, sp, #260	; 0x104
 801f53a:	4630      	mov	r0, r6
 801f53c:	f000 f9d4 	bl	801f8e8 <_scanf_i>
 801f540:	e7ac      	b.n	801f49c <__ssvfiscanf_r+0x208>
 801f542:	4b0f      	ldr	r3, [pc, #60]	; (801f580 <__ssvfiscanf_r+0x2ec>)
 801f544:	2b00      	cmp	r3, #0
 801f546:	f43f aecf 	beq.w	801f2e8 <__ssvfiscanf_r+0x54>
 801f54a:	466b      	mov	r3, sp
 801f54c:	4622      	mov	r2, r4
 801f54e:	a941      	add	r1, sp, #260	; 0x104
 801f550:	4630      	mov	r0, r6
 801f552:	f7fc f817 	bl	801b584 <_scanf_float>
 801f556:	e7a1      	b.n	801f49c <__ssvfiscanf_r+0x208>
 801f558:	89a3      	ldrh	r3, [r4, #12]
 801f55a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f55e:	bf18      	it	ne
 801f560:	f04f 30ff 	movne.w	r0, #4294967295
 801f564:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f56e:	e7f9      	b.n	801f564 <__ssvfiscanf_r+0x2d0>
 801f570:	0801f1e1 	.word	0x0801f1e1
 801f574:	0801f25b 	.word	0x0801f25b
 801f578:	08021ad9 	.word	0x08021ad9
 801f57c:	08021f7a 	.word	0x08021f7a
 801f580:	0801b585 	.word	0x0801b585

0801f584 <__sfputc_r>:
 801f584:	6893      	ldr	r3, [r2, #8]
 801f586:	3b01      	subs	r3, #1
 801f588:	2b00      	cmp	r3, #0
 801f58a:	b410      	push	{r4}
 801f58c:	6093      	str	r3, [r2, #8]
 801f58e:	da08      	bge.n	801f5a2 <__sfputc_r+0x1e>
 801f590:	6994      	ldr	r4, [r2, #24]
 801f592:	42a3      	cmp	r3, r4
 801f594:	db01      	blt.n	801f59a <__sfputc_r+0x16>
 801f596:	290a      	cmp	r1, #10
 801f598:	d103      	bne.n	801f5a2 <__sfputc_r+0x1e>
 801f59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f59e:	f7fd bb7d 	b.w	801cc9c <__swbuf_r>
 801f5a2:	6813      	ldr	r3, [r2, #0]
 801f5a4:	1c58      	adds	r0, r3, #1
 801f5a6:	6010      	str	r0, [r2, #0]
 801f5a8:	7019      	strb	r1, [r3, #0]
 801f5aa:	4608      	mov	r0, r1
 801f5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f5b0:	4770      	bx	lr

0801f5b2 <__sfputs_r>:
 801f5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5b4:	4606      	mov	r6, r0
 801f5b6:	460f      	mov	r7, r1
 801f5b8:	4614      	mov	r4, r2
 801f5ba:	18d5      	adds	r5, r2, r3
 801f5bc:	42ac      	cmp	r4, r5
 801f5be:	d101      	bne.n	801f5c4 <__sfputs_r+0x12>
 801f5c0:	2000      	movs	r0, #0
 801f5c2:	e007      	b.n	801f5d4 <__sfputs_r+0x22>
 801f5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5c8:	463a      	mov	r2, r7
 801f5ca:	4630      	mov	r0, r6
 801f5cc:	f7ff ffda 	bl	801f584 <__sfputc_r>
 801f5d0:	1c43      	adds	r3, r0, #1
 801f5d2:	d1f3      	bne.n	801f5bc <__sfputs_r+0xa>
 801f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f5d8 <_vfiprintf_r>:
 801f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5dc:	460d      	mov	r5, r1
 801f5de:	b09d      	sub	sp, #116	; 0x74
 801f5e0:	4614      	mov	r4, r2
 801f5e2:	4698      	mov	r8, r3
 801f5e4:	4606      	mov	r6, r0
 801f5e6:	b118      	cbz	r0, 801f5f0 <_vfiprintf_r+0x18>
 801f5e8:	6983      	ldr	r3, [r0, #24]
 801f5ea:	b90b      	cbnz	r3, 801f5f0 <_vfiprintf_r+0x18>
 801f5ec:	f7fb f9b8 	bl	801a960 <__sinit>
 801f5f0:	4b89      	ldr	r3, [pc, #548]	; (801f818 <_vfiprintf_r+0x240>)
 801f5f2:	429d      	cmp	r5, r3
 801f5f4:	d11b      	bne.n	801f62e <_vfiprintf_r+0x56>
 801f5f6:	6875      	ldr	r5, [r6, #4]
 801f5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5fa:	07d9      	lsls	r1, r3, #31
 801f5fc:	d405      	bmi.n	801f60a <_vfiprintf_r+0x32>
 801f5fe:	89ab      	ldrh	r3, [r5, #12]
 801f600:	059a      	lsls	r2, r3, #22
 801f602:	d402      	bmi.n	801f60a <_vfiprintf_r+0x32>
 801f604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f606:	f7fb fa6e 	bl	801aae6 <__retarget_lock_acquire_recursive>
 801f60a:	89ab      	ldrh	r3, [r5, #12]
 801f60c:	071b      	lsls	r3, r3, #28
 801f60e:	d501      	bpl.n	801f614 <_vfiprintf_r+0x3c>
 801f610:	692b      	ldr	r3, [r5, #16]
 801f612:	b9eb      	cbnz	r3, 801f650 <_vfiprintf_r+0x78>
 801f614:	4629      	mov	r1, r5
 801f616:	4630      	mov	r0, r6
 801f618:	f7fd fba4 	bl	801cd64 <__swsetup_r>
 801f61c:	b1c0      	cbz	r0, 801f650 <_vfiprintf_r+0x78>
 801f61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f620:	07dc      	lsls	r4, r3, #31
 801f622:	d50e      	bpl.n	801f642 <_vfiprintf_r+0x6a>
 801f624:	f04f 30ff 	mov.w	r0, #4294967295
 801f628:	b01d      	add	sp, #116	; 0x74
 801f62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f62e:	4b7b      	ldr	r3, [pc, #492]	; (801f81c <_vfiprintf_r+0x244>)
 801f630:	429d      	cmp	r5, r3
 801f632:	d101      	bne.n	801f638 <_vfiprintf_r+0x60>
 801f634:	68b5      	ldr	r5, [r6, #8]
 801f636:	e7df      	b.n	801f5f8 <_vfiprintf_r+0x20>
 801f638:	4b79      	ldr	r3, [pc, #484]	; (801f820 <_vfiprintf_r+0x248>)
 801f63a:	429d      	cmp	r5, r3
 801f63c:	bf08      	it	eq
 801f63e:	68f5      	ldreq	r5, [r6, #12]
 801f640:	e7da      	b.n	801f5f8 <_vfiprintf_r+0x20>
 801f642:	89ab      	ldrh	r3, [r5, #12]
 801f644:	0598      	lsls	r0, r3, #22
 801f646:	d4ed      	bmi.n	801f624 <_vfiprintf_r+0x4c>
 801f648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f64a:	f7fb fa4d 	bl	801aae8 <__retarget_lock_release_recursive>
 801f64e:	e7e9      	b.n	801f624 <_vfiprintf_r+0x4c>
 801f650:	2300      	movs	r3, #0
 801f652:	9309      	str	r3, [sp, #36]	; 0x24
 801f654:	2320      	movs	r3, #32
 801f656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f65a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f65e:	2330      	movs	r3, #48	; 0x30
 801f660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f824 <_vfiprintf_r+0x24c>
 801f664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f668:	f04f 0901 	mov.w	r9, #1
 801f66c:	4623      	mov	r3, r4
 801f66e:	469a      	mov	sl, r3
 801f670:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f674:	b10a      	cbz	r2, 801f67a <_vfiprintf_r+0xa2>
 801f676:	2a25      	cmp	r2, #37	; 0x25
 801f678:	d1f9      	bne.n	801f66e <_vfiprintf_r+0x96>
 801f67a:	ebba 0b04 	subs.w	fp, sl, r4
 801f67e:	d00b      	beq.n	801f698 <_vfiprintf_r+0xc0>
 801f680:	465b      	mov	r3, fp
 801f682:	4622      	mov	r2, r4
 801f684:	4629      	mov	r1, r5
 801f686:	4630      	mov	r0, r6
 801f688:	f7ff ff93 	bl	801f5b2 <__sfputs_r>
 801f68c:	3001      	adds	r0, #1
 801f68e:	f000 80aa 	beq.w	801f7e6 <_vfiprintf_r+0x20e>
 801f692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f694:	445a      	add	r2, fp
 801f696:	9209      	str	r2, [sp, #36]	; 0x24
 801f698:	f89a 3000 	ldrb.w	r3, [sl]
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	f000 80a2 	beq.w	801f7e6 <_vfiprintf_r+0x20e>
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	f04f 32ff 	mov.w	r2, #4294967295
 801f6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f6ac:	f10a 0a01 	add.w	sl, sl, #1
 801f6b0:	9304      	str	r3, [sp, #16]
 801f6b2:	9307      	str	r3, [sp, #28]
 801f6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f6b8:	931a      	str	r3, [sp, #104]	; 0x68
 801f6ba:	4654      	mov	r4, sl
 801f6bc:	2205      	movs	r2, #5
 801f6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6c2:	4858      	ldr	r0, [pc, #352]	; (801f824 <_vfiprintf_r+0x24c>)
 801f6c4:	f7e0 fd9c 	bl	8000200 <memchr>
 801f6c8:	9a04      	ldr	r2, [sp, #16]
 801f6ca:	b9d8      	cbnz	r0, 801f704 <_vfiprintf_r+0x12c>
 801f6cc:	06d1      	lsls	r1, r2, #27
 801f6ce:	bf44      	itt	mi
 801f6d0:	2320      	movmi	r3, #32
 801f6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f6d6:	0713      	lsls	r3, r2, #28
 801f6d8:	bf44      	itt	mi
 801f6da:	232b      	movmi	r3, #43	; 0x2b
 801f6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f6e0:	f89a 3000 	ldrb.w	r3, [sl]
 801f6e4:	2b2a      	cmp	r3, #42	; 0x2a
 801f6e6:	d015      	beq.n	801f714 <_vfiprintf_r+0x13c>
 801f6e8:	9a07      	ldr	r2, [sp, #28]
 801f6ea:	4654      	mov	r4, sl
 801f6ec:	2000      	movs	r0, #0
 801f6ee:	f04f 0c0a 	mov.w	ip, #10
 801f6f2:	4621      	mov	r1, r4
 801f6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f6f8:	3b30      	subs	r3, #48	; 0x30
 801f6fa:	2b09      	cmp	r3, #9
 801f6fc:	d94e      	bls.n	801f79c <_vfiprintf_r+0x1c4>
 801f6fe:	b1b0      	cbz	r0, 801f72e <_vfiprintf_r+0x156>
 801f700:	9207      	str	r2, [sp, #28]
 801f702:	e014      	b.n	801f72e <_vfiprintf_r+0x156>
 801f704:	eba0 0308 	sub.w	r3, r0, r8
 801f708:	fa09 f303 	lsl.w	r3, r9, r3
 801f70c:	4313      	orrs	r3, r2
 801f70e:	9304      	str	r3, [sp, #16]
 801f710:	46a2      	mov	sl, r4
 801f712:	e7d2      	b.n	801f6ba <_vfiprintf_r+0xe2>
 801f714:	9b03      	ldr	r3, [sp, #12]
 801f716:	1d19      	adds	r1, r3, #4
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	9103      	str	r1, [sp, #12]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	bfbb      	ittet	lt
 801f720:	425b      	neglt	r3, r3
 801f722:	f042 0202 	orrlt.w	r2, r2, #2
 801f726:	9307      	strge	r3, [sp, #28]
 801f728:	9307      	strlt	r3, [sp, #28]
 801f72a:	bfb8      	it	lt
 801f72c:	9204      	strlt	r2, [sp, #16]
 801f72e:	7823      	ldrb	r3, [r4, #0]
 801f730:	2b2e      	cmp	r3, #46	; 0x2e
 801f732:	d10c      	bne.n	801f74e <_vfiprintf_r+0x176>
 801f734:	7863      	ldrb	r3, [r4, #1]
 801f736:	2b2a      	cmp	r3, #42	; 0x2a
 801f738:	d135      	bne.n	801f7a6 <_vfiprintf_r+0x1ce>
 801f73a:	9b03      	ldr	r3, [sp, #12]
 801f73c:	1d1a      	adds	r2, r3, #4
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	9203      	str	r2, [sp, #12]
 801f742:	2b00      	cmp	r3, #0
 801f744:	bfb8      	it	lt
 801f746:	f04f 33ff 	movlt.w	r3, #4294967295
 801f74a:	3402      	adds	r4, #2
 801f74c:	9305      	str	r3, [sp, #20]
 801f74e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f834 <_vfiprintf_r+0x25c>
 801f752:	7821      	ldrb	r1, [r4, #0]
 801f754:	2203      	movs	r2, #3
 801f756:	4650      	mov	r0, sl
 801f758:	f7e0 fd52 	bl	8000200 <memchr>
 801f75c:	b140      	cbz	r0, 801f770 <_vfiprintf_r+0x198>
 801f75e:	2340      	movs	r3, #64	; 0x40
 801f760:	eba0 000a 	sub.w	r0, r0, sl
 801f764:	fa03 f000 	lsl.w	r0, r3, r0
 801f768:	9b04      	ldr	r3, [sp, #16]
 801f76a:	4303      	orrs	r3, r0
 801f76c:	3401      	adds	r4, #1
 801f76e:	9304      	str	r3, [sp, #16]
 801f770:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f774:	482c      	ldr	r0, [pc, #176]	; (801f828 <_vfiprintf_r+0x250>)
 801f776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f77a:	2206      	movs	r2, #6
 801f77c:	f7e0 fd40 	bl	8000200 <memchr>
 801f780:	2800      	cmp	r0, #0
 801f782:	d03f      	beq.n	801f804 <_vfiprintf_r+0x22c>
 801f784:	4b29      	ldr	r3, [pc, #164]	; (801f82c <_vfiprintf_r+0x254>)
 801f786:	bb1b      	cbnz	r3, 801f7d0 <_vfiprintf_r+0x1f8>
 801f788:	9b03      	ldr	r3, [sp, #12]
 801f78a:	3307      	adds	r3, #7
 801f78c:	f023 0307 	bic.w	r3, r3, #7
 801f790:	3308      	adds	r3, #8
 801f792:	9303      	str	r3, [sp, #12]
 801f794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f796:	443b      	add	r3, r7
 801f798:	9309      	str	r3, [sp, #36]	; 0x24
 801f79a:	e767      	b.n	801f66c <_vfiprintf_r+0x94>
 801f79c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f7a0:	460c      	mov	r4, r1
 801f7a2:	2001      	movs	r0, #1
 801f7a4:	e7a5      	b.n	801f6f2 <_vfiprintf_r+0x11a>
 801f7a6:	2300      	movs	r3, #0
 801f7a8:	3401      	adds	r4, #1
 801f7aa:	9305      	str	r3, [sp, #20]
 801f7ac:	4619      	mov	r1, r3
 801f7ae:	f04f 0c0a 	mov.w	ip, #10
 801f7b2:	4620      	mov	r0, r4
 801f7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f7b8:	3a30      	subs	r2, #48	; 0x30
 801f7ba:	2a09      	cmp	r2, #9
 801f7bc:	d903      	bls.n	801f7c6 <_vfiprintf_r+0x1ee>
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d0c5      	beq.n	801f74e <_vfiprintf_r+0x176>
 801f7c2:	9105      	str	r1, [sp, #20]
 801f7c4:	e7c3      	b.n	801f74e <_vfiprintf_r+0x176>
 801f7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f7ca:	4604      	mov	r4, r0
 801f7cc:	2301      	movs	r3, #1
 801f7ce:	e7f0      	b.n	801f7b2 <_vfiprintf_r+0x1da>
 801f7d0:	ab03      	add	r3, sp, #12
 801f7d2:	9300      	str	r3, [sp, #0]
 801f7d4:	462a      	mov	r2, r5
 801f7d6:	4b16      	ldr	r3, [pc, #88]	; (801f830 <_vfiprintf_r+0x258>)
 801f7d8:	a904      	add	r1, sp, #16
 801f7da:	4630      	mov	r0, r6
 801f7dc:	f7fb fb08 	bl	801adf0 <_printf_float>
 801f7e0:	4607      	mov	r7, r0
 801f7e2:	1c78      	adds	r0, r7, #1
 801f7e4:	d1d6      	bne.n	801f794 <_vfiprintf_r+0x1bc>
 801f7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7e8:	07d9      	lsls	r1, r3, #31
 801f7ea:	d405      	bmi.n	801f7f8 <_vfiprintf_r+0x220>
 801f7ec:	89ab      	ldrh	r3, [r5, #12]
 801f7ee:	059a      	lsls	r2, r3, #22
 801f7f0:	d402      	bmi.n	801f7f8 <_vfiprintf_r+0x220>
 801f7f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7f4:	f7fb f978 	bl	801aae8 <__retarget_lock_release_recursive>
 801f7f8:	89ab      	ldrh	r3, [r5, #12]
 801f7fa:	065b      	lsls	r3, r3, #25
 801f7fc:	f53f af12 	bmi.w	801f624 <_vfiprintf_r+0x4c>
 801f800:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f802:	e711      	b.n	801f628 <_vfiprintf_r+0x50>
 801f804:	ab03      	add	r3, sp, #12
 801f806:	9300      	str	r3, [sp, #0]
 801f808:	462a      	mov	r2, r5
 801f80a:	4b09      	ldr	r3, [pc, #36]	; (801f830 <_vfiprintf_r+0x258>)
 801f80c:	a904      	add	r1, sp, #16
 801f80e:	4630      	mov	r0, r6
 801f810:	f7fb fd92 	bl	801b338 <_printf_i>
 801f814:	e7e4      	b.n	801f7e0 <_vfiprintf_r+0x208>
 801f816:	bf00      	nop
 801f818:	08021bfc 	.word	0x08021bfc
 801f81c:	08021c1c 	.word	0x08021c1c
 801f820:	08021bdc 	.word	0x08021bdc
 801f824:	08021f74 	.word	0x08021f74
 801f828:	08021f7e 	.word	0x08021f7e
 801f82c:	0801adf1 	.word	0x0801adf1
 801f830:	0801f5b3 	.word	0x0801f5b3
 801f834:	08021f7a 	.word	0x08021f7a

0801f838 <_scanf_chars>:
 801f838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f83c:	4615      	mov	r5, r2
 801f83e:	688a      	ldr	r2, [r1, #8]
 801f840:	4680      	mov	r8, r0
 801f842:	460c      	mov	r4, r1
 801f844:	b932      	cbnz	r2, 801f854 <_scanf_chars+0x1c>
 801f846:	698a      	ldr	r2, [r1, #24]
 801f848:	2a00      	cmp	r2, #0
 801f84a:	bf0c      	ite	eq
 801f84c:	2201      	moveq	r2, #1
 801f84e:	f04f 32ff 	movne.w	r2, #4294967295
 801f852:	608a      	str	r2, [r1, #8]
 801f854:	6822      	ldr	r2, [r4, #0]
 801f856:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f8e4 <_scanf_chars+0xac>
 801f85a:	06d1      	lsls	r1, r2, #27
 801f85c:	bf5f      	itttt	pl
 801f85e:	681a      	ldrpl	r2, [r3, #0]
 801f860:	1d11      	addpl	r1, r2, #4
 801f862:	6019      	strpl	r1, [r3, #0]
 801f864:	6816      	ldrpl	r6, [r2, #0]
 801f866:	2700      	movs	r7, #0
 801f868:	69a0      	ldr	r0, [r4, #24]
 801f86a:	b188      	cbz	r0, 801f890 <_scanf_chars+0x58>
 801f86c:	2801      	cmp	r0, #1
 801f86e:	d107      	bne.n	801f880 <_scanf_chars+0x48>
 801f870:	682b      	ldr	r3, [r5, #0]
 801f872:	781a      	ldrb	r2, [r3, #0]
 801f874:	6963      	ldr	r3, [r4, #20]
 801f876:	5c9b      	ldrb	r3, [r3, r2]
 801f878:	b953      	cbnz	r3, 801f890 <_scanf_chars+0x58>
 801f87a:	bb27      	cbnz	r7, 801f8c6 <_scanf_chars+0x8e>
 801f87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f880:	2802      	cmp	r0, #2
 801f882:	d120      	bne.n	801f8c6 <_scanf_chars+0x8e>
 801f884:	682b      	ldr	r3, [r5, #0]
 801f886:	781b      	ldrb	r3, [r3, #0]
 801f888:	f813 3009 	ldrb.w	r3, [r3, r9]
 801f88c:	071b      	lsls	r3, r3, #28
 801f88e:	d41a      	bmi.n	801f8c6 <_scanf_chars+0x8e>
 801f890:	6823      	ldr	r3, [r4, #0]
 801f892:	06da      	lsls	r2, r3, #27
 801f894:	bf5e      	ittt	pl
 801f896:	682b      	ldrpl	r3, [r5, #0]
 801f898:	781b      	ldrbpl	r3, [r3, #0]
 801f89a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f89e:	682a      	ldr	r2, [r5, #0]
 801f8a0:	686b      	ldr	r3, [r5, #4]
 801f8a2:	3201      	adds	r2, #1
 801f8a4:	602a      	str	r2, [r5, #0]
 801f8a6:	68a2      	ldr	r2, [r4, #8]
 801f8a8:	3b01      	subs	r3, #1
 801f8aa:	3a01      	subs	r2, #1
 801f8ac:	606b      	str	r3, [r5, #4]
 801f8ae:	3701      	adds	r7, #1
 801f8b0:	60a2      	str	r2, [r4, #8]
 801f8b2:	b142      	cbz	r2, 801f8c6 <_scanf_chars+0x8e>
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	dcd7      	bgt.n	801f868 <_scanf_chars+0x30>
 801f8b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f8bc:	4629      	mov	r1, r5
 801f8be:	4640      	mov	r0, r8
 801f8c0:	4798      	blx	r3
 801f8c2:	2800      	cmp	r0, #0
 801f8c4:	d0d0      	beq.n	801f868 <_scanf_chars+0x30>
 801f8c6:	6823      	ldr	r3, [r4, #0]
 801f8c8:	f013 0310 	ands.w	r3, r3, #16
 801f8cc:	d105      	bne.n	801f8da <_scanf_chars+0xa2>
 801f8ce:	68e2      	ldr	r2, [r4, #12]
 801f8d0:	3201      	adds	r2, #1
 801f8d2:	60e2      	str	r2, [r4, #12]
 801f8d4:	69a2      	ldr	r2, [r4, #24]
 801f8d6:	b102      	cbz	r2, 801f8da <_scanf_chars+0xa2>
 801f8d8:	7033      	strb	r3, [r6, #0]
 801f8da:	6923      	ldr	r3, [r4, #16]
 801f8dc:	441f      	add	r7, r3
 801f8de:	6127      	str	r7, [r4, #16]
 801f8e0:	2000      	movs	r0, #0
 801f8e2:	e7cb      	b.n	801f87c <_scanf_chars+0x44>
 801f8e4:	08021ad9 	.word	0x08021ad9

0801f8e8 <_scanf_i>:
 801f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8ec:	4698      	mov	r8, r3
 801f8ee:	4b74      	ldr	r3, [pc, #464]	; (801fac0 <_scanf_i+0x1d8>)
 801f8f0:	460c      	mov	r4, r1
 801f8f2:	4682      	mov	sl, r0
 801f8f4:	4616      	mov	r6, r2
 801f8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f8fa:	b087      	sub	sp, #28
 801f8fc:	ab03      	add	r3, sp, #12
 801f8fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f902:	4b70      	ldr	r3, [pc, #448]	; (801fac4 <_scanf_i+0x1dc>)
 801f904:	69a1      	ldr	r1, [r4, #24]
 801f906:	4a70      	ldr	r2, [pc, #448]	; (801fac8 <_scanf_i+0x1e0>)
 801f908:	2903      	cmp	r1, #3
 801f90a:	bf18      	it	ne
 801f90c:	461a      	movne	r2, r3
 801f90e:	68a3      	ldr	r3, [r4, #8]
 801f910:	9201      	str	r2, [sp, #4]
 801f912:	1e5a      	subs	r2, r3, #1
 801f914:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f918:	bf88      	it	hi
 801f91a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f91e:	4627      	mov	r7, r4
 801f920:	bf82      	ittt	hi
 801f922:	eb03 0905 	addhi.w	r9, r3, r5
 801f926:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f92a:	60a3      	strhi	r3, [r4, #8]
 801f92c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f930:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f934:	bf98      	it	ls
 801f936:	f04f 0900 	movls.w	r9, #0
 801f93a:	6023      	str	r3, [r4, #0]
 801f93c:	463d      	mov	r5, r7
 801f93e:	f04f 0b00 	mov.w	fp, #0
 801f942:	6831      	ldr	r1, [r6, #0]
 801f944:	ab03      	add	r3, sp, #12
 801f946:	7809      	ldrb	r1, [r1, #0]
 801f948:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f94c:	2202      	movs	r2, #2
 801f94e:	f7e0 fc57 	bl	8000200 <memchr>
 801f952:	b328      	cbz	r0, 801f9a0 <_scanf_i+0xb8>
 801f954:	f1bb 0f01 	cmp.w	fp, #1
 801f958:	d159      	bne.n	801fa0e <_scanf_i+0x126>
 801f95a:	6862      	ldr	r2, [r4, #4]
 801f95c:	b92a      	cbnz	r2, 801f96a <_scanf_i+0x82>
 801f95e:	6822      	ldr	r2, [r4, #0]
 801f960:	2308      	movs	r3, #8
 801f962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f966:	6063      	str	r3, [r4, #4]
 801f968:	6022      	str	r2, [r4, #0]
 801f96a:	6822      	ldr	r2, [r4, #0]
 801f96c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f970:	6022      	str	r2, [r4, #0]
 801f972:	68a2      	ldr	r2, [r4, #8]
 801f974:	1e51      	subs	r1, r2, #1
 801f976:	60a1      	str	r1, [r4, #8]
 801f978:	b192      	cbz	r2, 801f9a0 <_scanf_i+0xb8>
 801f97a:	6832      	ldr	r2, [r6, #0]
 801f97c:	1c51      	adds	r1, r2, #1
 801f97e:	6031      	str	r1, [r6, #0]
 801f980:	7812      	ldrb	r2, [r2, #0]
 801f982:	f805 2b01 	strb.w	r2, [r5], #1
 801f986:	6872      	ldr	r2, [r6, #4]
 801f988:	3a01      	subs	r2, #1
 801f98a:	2a00      	cmp	r2, #0
 801f98c:	6072      	str	r2, [r6, #4]
 801f98e:	dc07      	bgt.n	801f9a0 <_scanf_i+0xb8>
 801f990:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f994:	4631      	mov	r1, r6
 801f996:	4650      	mov	r0, sl
 801f998:	4790      	blx	r2
 801f99a:	2800      	cmp	r0, #0
 801f99c:	f040 8085 	bne.w	801faaa <_scanf_i+0x1c2>
 801f9a0:	f10b 0b01 	add.w	fp, fp, #1
 801f9a4:	f1bb 0f03 	cmp.w	fp, #3
 801f9a8:	d1cb      	bne.n	801f942 <_scanf_i+0x5a>
 801f9aa:	6863      	ldr	r3, [r4, #4]
 801f9ac:	b90b      	cbnz	r3, 801f9b2 <_scanf_i+0xca>
 801f9ae:	230a      	movs	r3, #10
 801f9b0:	6063      	str	r3, [r4, #4]
 801f9b2:	6863      	ldr	r3, [r4, #4]
 801f9b4:	4945      	ldr	r1, [pc, #276]	; (801facc <_scanf_i+0x1e4>)
 801f9b6:	6960      	ldr	r0, [r4, #20]
 801f9b8:	1ac9      	subs	r1, r1, r3
 801f9ba:	f000 f89b 	bl	801faf4 <__sccl>
 801f9be:	f04f 0b00 	mov.w	fp, #0
 801f9c2:	68a3      	ldr	r3, [r4, #8]
 801f9c4:	6822      	ldr	r2, [r4, #0]
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d03d      	beq.n	801fa46 <_scanf_i+0x15e>
 801f9ca:	6831      	ldr	r1, [r6, #0]
 801f9cc:	6960      	ldr	r0, [r4, #20]
 801f9ce:	f891 c000 	ldrb.w	ip, [r1]
 801f9d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f9d6:	2800      	cmp	r0, #0
 801f9d8:	d035      	beq.n	801fa46 <_scanf_i+0x15e>
 801f9da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f9de:	d124      	bne.n	801fa2a <_scanf_i+0x142>
 801f9e0:	0510      	lsls	r0, r2, #20
 801f9e2:	d522      	bpl.n	801fa2a <_scanf_i+0x142>
 801f9e4:	f10b 0b01 	add.w	fp, fp, #1
 801f9e8:	f1b9 0f00 	cmp.w	r9, #0
 801f9ec:	d003      	beq.n	801f9f6 <_scanf_i+0x10e>
 801f9ee:	3301      	adds	r3, #1
 801f9f0:	f109 39ff 	add.w	r9, r9, #4294967295
 801f9f4:	60a3      	str	r3, [r4, #8]
 801f9f6:	6873      	ldr	r3, [r6, #4]
 801f9f8:	3b01      	subs	r3, #1
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	6073      	str	r3, [r6, #4]
 801f9fe:	dd1b      	ble.n	801fa38 <_scanf_i+0x150>
 801fa00:	6833      	ldr	r3, [r6, #0]
 801fa02:	3301      	adds	r3, #1
 801fa04:	6033      	str	r3, [r6, #0]
 801fa06:	68a3      	ldr	r3, [r4, #8]
 801fa08:	3b01      	subs	r3, #1
 801fa0a:	60a3      	str	r3, [r4, #8]
 801fa0c:	e7d9      	b.n	801f9c2 <_scanf_i+0xda>
 801fa0e:	f1bb 0f02 	cmp.w	fp, #2
 801fa12:	d1ae      	bne.n	801f972 <_scanf_i+0x8a>
 801fa14:	6822      	ldr	r2, [r4, #0]
 801fa16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801fa1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801fa1e:	d1bf      	bne.n	801f9a0 <_scanf_i+0xb8>
 801fa20:	2310      	movs	r3, #16
 801fa22:	6063      	str	r3, [r4, #4]
 801fa24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fa28:	e7a2      	b.n	801f970 <_scanf_i+0x88>
 801fa2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801fa2e:	6022      	str	r2, [r4, #0]
 801fa30:	780b      	ldrb	r3, [r1, #0]
 801fa32:	f805 3b01 	strb.w	r3, [r5], #1
 801fa36:	e7de      	b.n	801f9f6 <_scanf_i+0x10e>
 801fa38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fa3c:	4631      	mov	r1, r6
 801fa3e:	4650      	mov	r0, sl
 801fa40:	4798      	blx	r3
 801fa42:	2800      	cmp	r0, #0
 801fa44:	d0df      	beq.n	801fa06 <_scanf_i+0x11e>
 801fa46:	6823      	ldr	r3, [r4, #0]
 801fa48:	05d9      	lsls	r1, r3, #23
 801fa4a:	d50d      	bpl.n	801fa68 <_scanf_i+0x180>
 801fa4c:	42bd      	cmp	r5, r7
 801fa4e:	d909      	bls.n	801fa64 <_scanf_i+0x17c>
 801fa50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801fa54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fa58:	4632      	mov	r2, r6
 801fa5a:	4650      	mov	r0, sl
 801fa5c:	4798      	blx	r3
 801fa5e:	f105 39ff 	add.w	r9, r5, #4294967295
 801fa62:	464d      	mov	r5, r9
 801fa64:	42bd      	cmp	r5, r7
 801fa66:	d028      	beq.n	801faba <_scanf_i+0x1d2>
 801fa68:	6822      	ldr	r2, [r4, #0]
 801fa6a:	f012 0210 	ands.w	r2, r2, #16
 801fa6e:	d113      	bne.n	801fa98 <_scanf_i+0x1b0>
 801fa70:	702a      	strb	r2, [r5, #0]
 801fa72:	6863      	ldr	r3, [r4, #4]
 801fa74:	9e01      	ldr	r6, [sp, #4]
 801fa76:	4639      	mov	r1, r7
 801fa78:	4650      	mov	r0, sl
 801fa7a:	47b0      	blx	r6
 801fa7c:	f8d8 3000 	ldr.w	r3, [r8]
 801fa80:	6821      	ldr	r1, [r4, #0]
 801fa82:	1d1a      	adds	r2, r3, #4
 801fa84:	f8c8 2000 	str.w	r2, [r8]
 801fa88:	f011 0f20 	tst.w	r1, #32
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	d00f      	beq.n	801fab0 <_scanf_i+0x1c8>
 801fa90:	6018      	str	r0, [r3, #0]
 801fa92:	68e3      	ldr	r3, [r4, #12]
 801fa94:	3301      	adds	r3, #1
 801fa96:	60e3      	str	r3, [r4, #12]
 801fa98:	1bed      	subs	r5, r5, r7
 801fa9a:	44ab      	add	fp, r5
 801fa9c:	6925      	ldr	r5, [r4, #16]
 801fa9e:	445d      	add	r5, fp
 801faa0:	6125      	str	r5, [r4, #16]
 801faa2:	2000      	movs	r0, #0
 801faa4:	b007      	add	sp, #28
 801faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faaa:	f04f 0b00 	mov.w	fp, #0
 801faae:	e7ca      	b.n	801fa46 <_scanf_i+0x15e>
 801fab0:	07ca      	lsls	r2, r1, #31
 801fab2:	bf4c      	ite	mi
 801fab4:	8018      	strhmi	r0, [r3, #0]
 801fab6:	6018      	strpl	r0, [r3, #0]
 801fab8:	e7eb      	b.n	801fa92 <_scanf_i+0x1aa>
 801faba:	2001      	movs	r0, #1
 801fabc:	e7f2      	b.n	801faa4 <_scanf_i+0x1bc>
 801fabe:	bf00      	nop
 801fac0:	080218c0 	.word	0x080218c0
 801fac4:	0801cc11 	.word	0x0801cc11
 801fac8:	0801cb01 	.word	0x0801cb01
 801facc:	08021f9e 	.word	0x08021f9e

0801fad0 <_read_r>:
 801fad0:	b538      	push	{r3, r4, r5, lr}
 801fad2:	4d07      	ldr	r5, [pc, #28]	; (801faf0 <_read_r+0x20>)
 801fad4:	4604      	mov	r4, r0
 801fad6:	4608      	mov	r0, r1
 801fad8:	4611      	mov	r1, r2
 801fada:	2200      	movs	r2, #0
 801fadc:	602a      	str	r2, [r5, #0]
 801fade:	461a      	mov	r2, r3
 801fae0:	f7e3 fb4c 	bl	800317c <_read>
 801fae4:	1c43      	adds	r3, r0, #1
 801fae6:	d102      	bne.n	801faee <_read_r+0x1e>
 801fae8:	682b      	ldr	r3, [r5, #0]
 801faea:	b103      	cbz	r3, 801faee <_read_r+0x1e>
 801faec:	6023      	str	r3, [r4, #0]
 801faee:	bd38      	pop	{r3, r4, r5, pc}
 801faf0:	20008fb0 	.word	0x20008fb0

0801faf4 <__sccl>:
 801faf4:	b570      	push	{r4, r5, r6, lr}
 801faf6:	780b      	ldrb	r3, [r1, #0]
 801faf8:	4604      	mov	r4, r0
 801fafa:	2b5e      	cmp	r3, #94	; 0x5e
 801fafc:	bf0b      	itete	eq
 801fafe:	784b      	ldrbeq	r3, [r1, #1]
 801fb00:	1c48      	addne	r0, r1, #1
 801fb02:	1c88      	addeq	r0, r1, #2
 801fb04:	2200      	movne	r2, #0
 801fb06:	bf08      	it	eq
 801fb08:	2201      	moveq	r2, #1
 801fb0a:	1e61      	subs	r1, r4, #1
 801fb0c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801fb10:	f801 2f01 	strb.w	r2, [r1, #1]!
 801fb14:	42a9      	cmp	r1, r5
 801fb16:	d1fb      	bne.n	801fb10 <__sccl+0x1c>
 801fb18:	b90b      	cbnz	r3, 801fb1e <__sccl+0x2a>
 801fb1a:	3801      	subs	r0, #1
 801fb1c:	bd70      	pop	{r4, r5, r6, pc}
 801fb1e:	f082 0101 	eor.w	r1, r2, #1
 801fb22:	54e1      	strb	r1, [r4, r3]
 801fb24:	1c42      	adds	r2, r0, #1
 801fb26:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801fb2a:	2d2d      	cmp	r5, #45	; 0x2d
 801fb2c:	f102 36ff 	add.w	r6, r2, #4294967295
 801fb30:	4610      	mov	r0, r2
 801fb32:	d006      	beq.n	801fb42 <__sccl+0x4e>
 801fb34:	2d5d      	cmp	r5, #93	; 0x5d
 801fb36:	d0f1      	beq.n	801fb1c <__sccl+0x28>
 801fb38:	b90d      	cbnz	r5, 801fb3e <__sccl+0x4a>
 801fb3a:	4630      	mov	r0, r6
 801fb3c:	e7ee      	b.n	801fb1c <__sccl+0x28>
 801fb3e:	462b      	mov	r3, r5
 801fb40:	e7ef      	b.n	801fb22 <__sccl+0x2e>
 801fb42:	7816      	ldrb	r6, [r2, #0]
 801fb44:	2e5d      	cmp	r6, #93	; 0x5d
 801fb46:	d0fa      	beq.n	801fb3e <__sccl+0x4a>
 801fb48:	42b3      	cmp	r3, r6
 801fb4a:	dcf8      	bgt.n	801fb3e <__sccl+0x4a>
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	3001      	adds	r0, #1
 801fb50:	4286      	cmp	r6, r0
 801fb52:	5421      	strb	r1, [r4, r0]
 801fb54:	dcfb      	bgt.n	801fb4e <__sccl+0x5a>
 801fb56:	43d8      	mvns	r0, r3
 801fb58:	4430      	add	r0, r6
 801fb5a:	1c5d      	adds	r5, r3, #1
 801fb5c:	42b3      	cmp	r3, r6
 801fb5e:	bfa8      	it	ge
 801fb60:	2000      	movge	r0, #0
 801fb62:	182b      	adds	r3, r5, r0
 801fb64:	3202      	adds	r2, #2
 801fb66:	e7de      	b.n	801fb26 <__sccl+0x32>

0801fb68 <__submore>:
 801fb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb6c:	460c      	mov	r4, r1
 801fb6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fb70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb74:	4299      	cmp	r1, r3
 801fb76:	d11d      	bne.n	801fbb4 <__submore+0x4c>
 801fb78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fb7c:	f7fb f83e 	bl	801abfc <_malloc_r>
 801fb80:	b918      	cbnz	r0, 801fb8a <__submore+0x22>
 801fb82:	f04f 30ff 	mov.w	r0, #4294967295
 801fb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fb8e:	63a3      	str	r3, [r4, #56]	; 0x38
 801fb90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801fb94:	6360      	str	r0, [r4, #52]	; 0x34
 801fb96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801fb9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801fb9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801fba2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801fba6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801fbaa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801fbae:	6020      	str	r0, [r4, #0]
 801fbb0:	2000      	movs	r0, #0
 801fbb2:	e7e8      	b.n	801fb86 <__submore+0x1e>
 801fbb4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801fbb6:	0077      	lsls	r7, r6, #1
 801fbb8:	463a      	mov	r2, r7
 801fbba:	f7ff f98f 	bl	801eedc <_realloc_r>
 801fbbe:	4605      	mov	r5, r0
 801fbc0:	2800      	cmp	r0, #0
 801fbc2:	d0de      	beq.n	801fb82 <__submore+0x1a>
 801fbc4:	eb00 0806 	add.w	r8, r0, r6
 801fbc8:	4601      	mov	r1, r0
 801fbca:	4632      	mov	r2, r6
 801fbcc:	4640      	mov	r0, r8
 801fbce:	f7fa ff95 	bl	801aafc <memcpy>
 801fbd2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801fbd6:	f8c4 8000 	str.w	r8, [r4]
 801fbda:	e7e9      	b.n	801fbb0 <__submore+0x48>

0801fbdc <__ascii_wctomb>:
 801fbdc:	b149      	cbz	r1, 801fbf2 <__ascii_wctomb+0x16>
 801fbde:	2aff      	cmp	r2, #255	; 0xff
 801fbe0:	bf85      	ittet	hi
 801fbe2:	238a      	movhi	r3, #138	; 0x8a
 801fbe4:	6003      	strhi	r3, [r0, #0]
 801fbe6:	700a      	strbls	r2, [r1, #0]
 801fbe8:	f04f 30ff 	movhi.w	r0, #4294967295
 801fbec:	bf98      	it	ls
 801fbee:	2001      	movls	r0, #1
 801fbf0:	4770      	bx	lr
 801fbf2:	4608      	mov	r0, r1
 801fbf4:	4770      	bx	lr
	...

0801fbf8 <_fstat_r>:
 801fbf8:	b538      	push	{r3, r4, r5, lr}
 801fbfa:	4d07      	ldr	r5, [pc, #28]	; (801fc18 <_fstat_r+0x20>)
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	4604      	mov	r4, r0
 801fc00:	4608      	mov	r0, r1
 801fc02:	4611      	mov	r1, r2
 801fc04:	602b      	str	r3, [r5, #0]
 801fc06:	f7e3 fafe 	bl	8003206 <_fstat>
 801fc0a:	1c43      	adds	r3, r0, #1
 801fc0c:	d102      	bne.n	801fc14 <_fstat_r+0x1c>
 801fc0e:	682b      	ldr	r3, [r5, #0]
 801fc10:	b103      	cbz	r3, 801fc14 <_fstat_r+0x1c>
 801fc12:	6023      	str	r3, [r4, #0]
 801fc14:	bd38      	pop	{r3, r4, r5, pc}
 801fc16:	bf00      	nop
 801fc18:	20008fb0 	.word	0x20008fb0

0801fc1c <_isatty_r>:
 801fc1c:	b538      	push	{r3, r4, r5, lr}
 801fc1e:	4d06      	ldr	r5, [pc, #24]	; (801fc38 <_isatty_r+0x1c>)
 801fc20:	2300      	movs	r3, #0
 801fc22:	4604      	mov	r4, r0
 801fc24:	4608      	mov	r0, r1
 801fc26:	602b      	str	r3, [r5, #0]
 801fc28:	f7e3 fafd 	bl	8003226 <_isatty>
 801fc2c:	1c43      	adds	r3, r0, #1
 801fc2e:	d102      	bne.n	801fc36 <_isatty_r+0x1a>
 801fc30:	682b      	ldr	r3, [r5, #0]
 801fc32:	b103      	cbz	r3, 801fc36 <_isatty_r+0x1a>
 801fc34:	6023      	str	r3, [r4, #0]
 801fc36:	bd38      	pop	{r3, r4, r5, pc}
 801fc38:	20008fb0 	.word	0x20008fb0

0801fc3c <_malloc_usable_size_r>:
 801fc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fc40:	1f18      	subs	r0, r3, #4
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	bfbc      	itt	lt
 801fc46:	580b      	ldrlt	r3, [r1, r0]
 801fc48:	18c0      	addlt	r0, r0, r3
 801fc4a:	4770      	bx	lr

0801fc4c <_init>:
 801fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc4e:	bf00      	nop
 801fc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc52:	bc08      	pop	{r3}
 801fc54:	469e      	mov	lr, r3
 801fc56:	4770      	bx	lr

0801fc58 <_fini>:
 801fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc5a:	bf00      	nop
 801fc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc5e:	bc08      	pop	{r3}
 801fc60:	469e      	mov	lr, r3
 801fc62:	4770      	bx	lr
