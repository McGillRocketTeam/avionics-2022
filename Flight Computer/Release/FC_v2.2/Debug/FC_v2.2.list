
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e98c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0801eb40  0801eb40  0002eb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020ea8  08020ea8  000403d4  2**0
                  CONTENTS
  4 .ARM          00000008  08020ea8  08020ea8  00030ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020eb0  08020eb0  000403d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020eb0  08020eb0  00030eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020eb8  08020eb8  00030eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  08020ebc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403d4  2**0
                  CONTENTS
 10 .bss          00008a8c  200003d4  200003d4  000403d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20008e60  20008e60  000403d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00070cdb  00000000  00000000  00040404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ab55  00000000  00000000  000b10df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f10  00000000  00000000  000bbc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000382ab  00000000  00000000  000bfb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048da6  00000000  00000000  000f7df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011695c  00000000  00000000  00140b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002574f5  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003bf0  00000000  00000000  00257548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000127a8  00000000  00000000  0025b138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801eb24 	.word	0x0801eb24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d8 	.word	0x200003d8
 80001ec:	0801eb24 	.word	0x0801eb24

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 f93c 	bl	80082b4 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 fa19 	bl	80084a8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00c fa5e 	bl	800d55e <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f006 f87e 	bl	80071b0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fab6 	bl	800662c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00c fa47 	bl	800d55e <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00c fa3b 	bl	800d55e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00c fa33 	bl	800d55e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f019 fd17 	bl	801ab38 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00c fa19 	bl	800d55e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00c fa11 	bl	800d55e <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00c fa08 	bl	800d55e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fa7a 	bl	800664e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f006 f827 	bl	80071b0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fa96 	bl	800669a <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f905 	bl	800638c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fee1 	bl	8005f50 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fffd 	bl	8006194 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 feaf 	bl	8005f04 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 ffcb 	bl	8006148 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00c f9ce 	bl	800d55e <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005e9c 	.word	0x20005e9c
 80011e0:	0801eb40 	.word	0x0801eb40
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000400 	.word	0x20000400
 80011f0:	0801eb58 	.word	0x0801eb58
 80011f4:	0801eb70 	.word	0x0801eb70
 80011f8:	0801eb7c 	.word	0x0801eb7c
 80011fc:	0801eb90 	.word	0x0801eb90
 8001200:	0801eb98 	.word	0x0801eb98
 8001204:	0801ebb0 	.word	0x0801ebb0
 8001208:	20000401 	.word	0x20000401
 800120c:	0801ebb8 	.word	0x0801ebb8

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f005 f8d6 	bl	80063d8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f018 fc00 	bl	8019a3c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f982 	bl	800654a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe0d 	bl	8005e6c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f004 fe00 	bl	8005e6c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f004 fdf3 	bl	8005e6c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003f0 	.word	0x200003f0

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f8c2 	bl	800643c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 f8d0 	bl	800646e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fdf9 	bl	8005ecc <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003fe 	.word	0x200003fe

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f005 f87f 	bl	800640a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f018 fb90 	bl	8019a3c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f8c7 	bl	80064b4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fdb5 	bl	8005e9c <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f004 fda8 	bl	8005e9c <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f004 fd9b 	bl	8005e9c <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f8 	.word	0x200003f8

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00c f8e0 	bl	800d55e <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f005 ff00 	bl	80071b0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fcd4 	bl	8005d6a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00c f8c6 	bl	800d55e <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00c f8ba 	bl	800d55e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00c f8b2 	bl	800d55e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f019 fb96 	bl	801ab38 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00c f899 	bl	800d55e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00c f891 	bl	800d55e <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00c f888 	bl	800d55e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fc99 	bl	8005d8c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f005 fea7 	bl	80071b0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fcb5 	bl	8005dd8 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fb9b 	bl	8005bb8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fbbb 	bl	8005c04 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00c f860 	bl	800d55e <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005e9c 	.word	0x20005e9c
 80014bc:	0801ebd0 	.word	0x0801ebd0
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	2000040a 	.word	0x2000040a
 80014cc:	0801eb58 	.word	0x0801eb58
 80014d0:	0801eb70 	.word	0x0801eb70
 80014d4:	0801eb7c 	.word	0x0801eb7c
 80014d8:	0801eb90 	.word	0x0801eb90
 80014dc:	0801eb98 	.word	0x0801eb98
 80014e0:	0801ebb0 	.word	0x0801ebb0
 80014e4:	2000040b 	.word	0x2000040b
 80014e8:	0801ebe8 	.word	0x0801ebe8

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f004 faf6 	bl	8005af4 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fbd7 	bl	8005cd2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fb13 	bl	8005b54 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000404 	.word	0x20000404

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fba0 	bl	8005ca0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fbd7 	bl	8005d24 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb01 	bl	8005b84 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000408 	.word	0x20000408

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f006 fe76 	bl	80082b4 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f006 ff53 	bl	80084a8 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b095      	sub	sp, #84	; 0x54
 800163c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f005 fd75 	bl	800712c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f96b 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd05 	bl	8002054 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9d3 	bl	80019f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa23 	bl	8001a98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa61 	bl	8001b18 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fa9f 	bl	8001b98 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fb83 	bl	8001d64 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbb7 	bl	8001dd0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fbeb 	bl	8001e3c <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc1f 	bl	8001ea8 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fc75 	bl	8001f58 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fc9d 	bl	8001fac <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fcc5 	bl	8002000 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fae9 	bl	8001c4c <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 800167a:	f00d fe55 	bl	800f328 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	487e      	ldr	r0, [pc, #504]	; (800187c <main+0x244>)
 8001684:	f006 fca0 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	487b      	ldr	r0, [pc, #492]	; (800187c <main+0x244>)
 800168e:	f006 fc9b 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	4879      	ldr	r0, [pc, #484]	; (800187c <main+0x244>)
 8001698:	f006 fc96 	bl	8007fc8 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4877      	ldr	r0, [pc, #476]	; (8001880 <main+0x248>)
 80016a4:	f006 fc90 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4874      	ldr	r0, [pc, #464]	; (8001880 <main+0x248>)
 80016b0:	f006 fc8a 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4871      	ldr	r0, [pc, #452]	; (8001880 <main+0x248>)
 80016bc:	f006 fc84 	bl	8007fc8 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	486e      	ldr	r0, [pc, #440]	; (8001880 <main+0x248>)
 80016c6:	f006 fc7f 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	486c      	ldr	r0, [pc, #432]	; (8001884 <main+0x24c>)
 80016d2:	f006 fc79 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4869      	ldr	r0, [pc, #420]	; (8001884 <main+0x24c>)
 80016de:	f006 fc73 	bl	8007fc8 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4868      	ldr	r0, [pc, #416]	; (8001888 <main+0x250>)
 80016e8:	f006 fc6e 	bl	8007fc8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4865      	ldr	r0, [pc, #404]	; (8001888 <main+0x250>)
 80016f4:	f006 fc68 	bl	8007fc8 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4860      	ldr	r0, [pc, #384]	; (8001880 <main+0x248>)
 8001700:	f006 fc62 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4860      	ldr	r0, [pc, #384]	; (800188c <main+0x254>)
 800170a:	f006 fc5d 	bl	8007fc8 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	485e      	ldr	r0, [pc, #376]	; (800188c <main+0x254>)
 8001714:	f006 fc58 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	485b      	ldr	r0, [pc, #364]	; (800188c <main+0x254>)
 800171e:	f006 fc53 	bl	8007fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4859      	ldr	r0, [pc, #356]	; (800188c <main+0x254>)
 8001728:	f006 fc4e 	bl	8007fc8 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	4957      	ldr	r1, [pc, #348]	; (8001890 <main+0x258>)
 8001734:	4857      	ldr	r0, [pc, #348]	; (8001894 <main+0x25c>)
 8001736:	f00b ff12 	bl	800d55e <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART, SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e56      	ldr	r6, [pc, #344]	; (8001894 <main+0x25c>)
 800173c:	23a0      	movs	r3, #160	; 0xa0
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
 8001740:	466d      	mov	r5, sp
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175e:	484e      	ldr	r0, [pc, #312]	; (8001898 <main+0x260>)
 8001760:	f005 f840 	bl	80067e4 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001764:	484b      	ldr	r0, [pc, #300]	; (8001894 <main+0x25c>)
 8001766:	f002 f8c9 	bl	80038fc <MRT_externalFlashSetup>
	   * Watch dog
	   * -Remove the MX_IWDG_Init() that is auto-generated and add it just before the osKernelStart
	   * -Need to be put after RTOS setup
	   */
	#if IWDG_ACTIVE
	MX_IWDG_Init();
 800176a:	f000 fa55 	bl	8001c18 <MX_IWDG_Init>
	#endif

  //RTC
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x264>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <main+0x268>)
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <main+0x26c>)
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f005 f9b0 	bl	8006ae0 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001780:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001784:	f005 fd14 	bl	80071b0 <HAL_Delay>
  #if ALARM_A_ACTIVE
    if (wu_flag == 0){
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <main+0x270>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <main+0x164>
    	MRT_setAlarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8001790:	2200      	movs	r2, #0
 8001792:	211e      	movs	r1, #30
 8001794:	2004      	movs	r0, #4
 8001796:	f005 f95b 	bl	8006a50 <MRT_setAlarmA>
 800179a:	e004      	b.n	80017a6 <main+0x16e>
    }
    else{
    	MRT_setAlarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	200e      	movs	r0, #14
 80017a2:	f005 f955 	bl	8006a50 <MRT_setAlarmA>

	  //**************************************************//
	  //MEMORY THREAD
#if MEMORY_THREAD
	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <main+0x274>)
 80017a8:	f007 fcf2 	bl	8009190 <HAL_IWDG_Refresh>
	  #endif

		//SD card
		sd_init_dynamic_filename("FC", "", filename);
 80017ac:	4a40      	ldr	r2, [pc, #256]	; (80018b0 <main+0x278>)
 80017ae:	4941      	ldr	r1, [pc, #260]	; (80018b4 <main+0x27c>)
 80017b0:	4841      	ldr	r0, [pc, #260]	; (80018b8 <main+0x280>)
 80017b2:	f005 fa95 	bl	8006ce0 <sd_init_dynamic_filename>
	 * -6 DOF IMU (LSM6DSR): 0x6A
	 * -LPS22HH: 0x5C
	 */

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80017b6:	483d      	ldr	r0, [pc, #244]	; (80018ac <main+0x274>)
 80017b8:	f007 fcea 	bl	8009190 <HAL_IWDG_Refresh>
	  #endif
	  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017bc:	4c3f      	ldr	r4, [pc, #252]	; (80018bc <main+0x284>)
 80017be:	463b      	mov	r3, r7
 80017c0:	4a34      	ldr	r2, [pc, #208]	; (8001894 <main+0x25c>)
 80017c2:	493f      	ldr	r1, [pc, #252]	; (80018c0 <main+0x288>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc5b 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017ca:	463b      	mov	r3, r7
 80017cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 80017d4:	4835      	ldr	r0, [pc, #212]	; (80018ac <main+0x274>)
 80017d6:	f007 fcdb 	bl	8009190 <HAL_IWDG_Refresh>
	  #endif
	  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017da:	4c3a      	ldr	r4, [pc, #232]	; (80018c4 <main+0x28c>)
 80017dc:	463b      	mov	r3, r7
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <main+0x25c>)
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <main+0x288>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fdca 	bl	800137c <MRT_LPS22HH_Setup>
 80017e8:	463b      	mov	r3, r7
 80017ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  GPS_init(&GPS_UART, &DEBUG_UART);
 80017f2:	4928      	ldr	r1, [pc, #160]	; (8001894 <main+0x25c>)
 80017f4:	4834      	ldr	r0, [pc, #208]	; (80018c8 <main+0x290>)
 80017f6:	f002 f84d 	bl	8003894 <GPS_init>

	  //**************************************************//

	  //Poll propulsion until launch command sent

	  while((XTEND_ || SRADIO_) && ejection_state_flag == 0 && wu_flag == 0){
 80017fa:	bf00      	nop
		sprintf(sradio_tx_buffer,"LAUNCH COMMAND RECEIVED");
		TxProtocol(sradio_tx_buffer, strlen(sradio_tx_buffer));
	#endif

	  //Update ejection state (saved state in WatchDog thread)
	  if (ejection_state_flag < 1){
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <main+0x294>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <main+0x1d8>
		  ejection_state_flag = 1;
 8001804:	4b31      	ldr	r3, [pc, #196]	; (80018cc <main+0x294>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
		  wd_ejection_flag = 1;
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <main+0x298>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
//TODO I2C SENSORS SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001810:	f012 fe28 	bl	8014464 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001814:	4a2f      	ldr	r2, [pc, #188]	; (80018d4 <main+0x29c>)
 8001816:	2100      	movs	r1, #0
 8001818:	482f      	ldr	r0, [pc, #188]	; (80018d8 <main+0x2a0>)
 800181a:	f012 fe6d 	bl	80144f8 <osThreadNew>
 800181e:	4603      	mov	r3, r0
 8001820:	4a2e      	ldr	r2, [pc, #184]	; (80018dc <main+0x2a4>)
 8001822:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001824:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <main+0x2a8>)
 8001826:	2100      	movs	r1, #0
 8001828:	482e      	ldr	r0, [pc, #184]	; (80018e4 <main+0x2ac>)
 800182a:	f012 fe65 	bl	80144f8 <osThreadNew>
 800182e:	4603      	mov	r3, r0
 8001830:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <main+0x2b0>)
 8001832:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001834:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <main+0x2b4>)
 8001836:	2100      	movs	r1, #0
 8001838:	482d      	ldr	r0, [pc, #180]	; (80018f0 <main+0x2b8>)
 800183a:	f012 fe5d 	bl	80144f8 <osThreadNew>
 800183e:	4603      	mov	r3, r0
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <main+0x2bc>)
 8001842:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <main+0x2c0>)
 8001846:	2100      	movs	r1, #0
 8001848:	482c      	ldr	r0, [pc, #176]	; (80018fc <main+0x2c4>)
 800184a:	f012 fe55 	bl	80144f8 <osThreadNew>
 800184e:	4603      	mov	r3, r0
 8001850:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <main+0x2c8>)
 8001852:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 8001854:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <main+0x2cc>)
 8001856:	2100      	movs	r1, #0
 8001858:	482b      	ldr	r0, [pc, #172]	; (8001908 <main+0x2d0>)
 800185a:	f012 fe4d 	bl	80144f8 <osThreadNew>
 800185e:	4603      	mov	r3, r0
 8001860:	4a2a      	ldr	r2, [pc, #168]	; (800190c <main+0x2d4>)
 8001862:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <main+0x2d8>)
 8001866:	2100      	movs	r1, #0
 8001868:	482a      	ldr	r0, [pc, #168]	; (8001914 <main+0x2dc>)
 800186a:	f012 fe45 	bl	80144f8 <osThreadNew>
 800186e:	4603      	mov	r3, r0
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <main+0x2e0>)
 8001872:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001874:	f012 fe1a 	bl	80144ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001878:	e7fe      	b.n	8001878 <main+0x240>
 800187a:	bf00      	nop
 800187c:	40020800 	.word	0x40020800
 8001880:	40021800 	.word	0x40021800
 8001884:	40021400 	.word	0x40021400
 8001888:	40021000 	.word	0x40021000
 800188c:	40020c00 	.word	0x40020c00
 8001890:	0801ec44 	.word	0x0801ec44
 8001894:	20005e58 	.word	0x20005e58
 8001898:	200067c0 	.word	0x200067c0
 800189c:	20000442 	.word	0x20000442
 80018a0:	20000443 	.word	0x20000443
 80018a4:	20000444 	.word	0x20000444
 80018a8:	200006b9 	.word	0x200006b9
 80018ac:	2000628c 	.word	0x2000628c
 80018b0:	2000630c 	.word	0x2000630c
 80018b4:	0801ec58 	.word	0x0801ec58
 80018b8:	0801ec5c 	.word	0x0801ec5c
 80018bc:	20006908 	.word	0x20006908
 80018c0:	20005ea0 	.word	0x20005ea0
 80018c4:	200068f8 	.word	0x200068f8
 80018c8:	20006860 	.word	0x20006860
 80018cc:	20000441 	.word	0x20000441
 80018d0:	20000434 	.word	0x20000434
 80018d4:	080207e0 	.word	0x080207e0
 80018d8:	08002379 	.word	0x08002379
 80018dc:	20006304 	.word	0x20006304
 80018e0:	08020804 	.word	0x08020804
 80018e4:	0800243d 	.word	0x0800243d
 80018e8:	20006854 	.word	0x20006854
 80018ec:	08020828 	.word	0x08020828
 80018f0:	0800269d 	.word	0x0800269d
 80018f4:	2000685c 	.word	0x2000685c
 80018f8:	0802084c 	.word	0x0802084c
 80018fc:	080026b9 	.word	0x080026b9
 8001900:	200068f4 	.word	0x200068f4
 8001904:	08020870 	.word	0x08020870
 8001908:	080027d5 	.word	0x080027d5
 800190c:	200067e4 	.word	0x200067e4
 8001910:	08020894 	.word	0x08020894
 8001914:	080027e5 	.word	0x080027e5
 8001918:	200062f0 	.word	0x200062f0

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2230      	movs	r2, #48	; 0x30
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f018 f886 	bl	8019a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <SystemClock_Config+0xd0>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <SystemClock_Config+0xd0>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <SystemClock_Config+0xd0>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <SystemClock_Config+0xd4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001968:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <SystemClock_Config+0xd4>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <SystemClock_Config+0xd4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800197c:	2309      	movs	r3, #9
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001986:	2301      	movs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198a:	2302      	movs	r3, #2
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001994:	2308      	movs	r3, #8
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001998:	2348      	movs	r3, #72	; 0x48
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800199c:	2302      	movs	r3, #2
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019a0:	2303      	movs	r3, #3
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 fdc3 	bl	800a534 <HAL_RCC_OscConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019b4:	f001 f82a 	bl	8002a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b8:	230f      	movs	r3, #15
 80019ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80019bc:	2301      	movs	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f009 f825 	bl	800aa24 <HAL_RCC_ClockConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80019e0:	f001 f814 	bl	8002a0c <Error_Handler>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3750      	adds	r7, #80	; 0x50
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000

080019f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <MX_ADC1_Init+0x9c>)
 8001a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <MX_ADC1_Init+0xa0>)
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a54:	f005 fbd0 	bl	80071f8 <HAL_ADC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f000 ffd5 	bl	8002a0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a62:	2306      	movs	r3, #6
 8001a64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a74:	f005 fda2 	bl	80075bc <HAL_ADC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a7e:	f000 ffc5 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20006708 	.word	0x20006708
 8001a90:	40012000 	.word	0x40012000
 8001a94:	0f000001 	.word	0x0f000001

08001a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <MX_I2C1_Init+0x78>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <MX_I2C1_Init+0x7c>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ad6:	f006 faa9 	bl	800802c <HAL_I2C_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae0:	f000 ff94 	bl	8002a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4809      	ldr	r0, [pc, #36]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001ae8:	f007 fa95 	bl	8009016 <HAL_I2CEx_ConfigAnalogFilter>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001af2:	f000 ff8b 	bl	8002a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_I2C1_Init+0x74>)
 8001afa:	f007 fac8 	bl	800908e <HAL_I2CEx_ConfigDigitalFilter>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b04:	f000 ff82 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20006238 	.word	0x20006238
 8001b10:	40005400 	.word	0x40005400
 8001b14:	000186a0 	.word	0x000186a0

08001b18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C2_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C2_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b56:	f006 fa69 	bl	800802c <HAL_I2C_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b60:	f000 ff54 	bl	8002a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b68:	f007 fa55 	bl	8009016 <HAL_I2CEx_ConfigAnalogFilter>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b72:	f000 ff4b 	bl	8002a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_I2C2_Init+0x74>)
 8001b7a:	f007 fa88 	bl	800908e <HAL_I2CEx_ConfigDigitalFilter>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b84:	f000 ff42 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20006298 	.word	0x20006298
 8001b90:	40005800 	.word	0x40005800
 8001b94:	000186a0 	.word	0x000186a0

08001b98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_I2C3_Init+0x78>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <MX_I2C3_Init+0x7c>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bd6:	f006 fa29 	bl	800802c <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 ff14 	bl	8002a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be4:	2100      	movs	r1, #0
 8001be6:	4809      	ldr	r0, [pc, #36]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001be8:	f007 fa15 	bl	8009016 <HAL_I2CEx_ConfigAnalogFilter>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bf2:	f000 ff0b 	bl	8002a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_I2C3_Init+0x74>)
 8001bfa:	f007 fa48 	bl	800908e <HAL_I2CEx_ConfigDigitalFilter>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c04:	f000 ff02 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20005ea0 	.word	0x20005ea0
 8001c10:	40005c00 	.word	0x40005c00
 8001c14:	000186a0 	.word	0x000186a0

08001c18 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_IWDG_Init+0x2c>)
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <MX_IWDG_Init+0x30>)
 8001c20:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_IWDG_Init+0x2c>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_IWDG_Init+0x2c>)
 8001c2a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c2e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_IWDG_Init+0x2c>)
 8001c32:	f007 fa6b 	bl	800910c <HAL_IWDG_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c3c:	f000 fee6 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000628c 	.word	0x2000628c
 8001c48:	40003000 	.word	0x40003000

08001c4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b090      	sub	sp, #64	; 0x40
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2228      	movs	r2, #40	; 0x28
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f017 fee5 	bl	8019a3c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c74:	4a3a      	ldr	r2, [pc, #232]	; (8001d60 <MX_RTC_Init+0x114>)
 8001c76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c78:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c80:	227f      	movs	r2, #127	; 0x7f
 8001c82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c9c:	482f      	ldr	r0, [pc, #188]	; (8001d5c <MX_RTC_Init+0x110>)
 8001c9e:	f009 faab 	bl	800b1f8 <HAL_RTC_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001ca8:	f000 feb0 	bl	8002a0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4823      	ldr	r0, [pc, #140]	; (8001d5c <MX_RTC_Init+0x110>)
 8001cd0:	f009 fb23 	bl	800b31a <HAL_RTC_SetTime>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cda:	f000 fe97 	bl	8002a0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4817      	ldr	r0, [pc, #92]	; (8001d5c <MX_RTC_Init+0x110>)
 8001d00:	f009 fc26 	bl	800b550 <HAL_RTC_SetDate>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d0a:	f000 fe7f 	bl	8002a0c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2201      	movs	r2, #1
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_RTC_Init+0x110>)
 8001d46:	f009 fcf9 	bl	800b73c <HAL_RTC_SetAlarm_IT>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d50:	f000 fe5c 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3740      	adds	r7, #64	; 0x40
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200067c0 	.word	0x200067c0
 8001d60:	40002800 	.word	0x40002800

08001d64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <MX_SPI2_Init+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001db0:	220a      	movs	r2, #10
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_SPI2_Init+0x64>)
 8001db6:	f009 fff1 	bl	800bd9c <HAL_SPI_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dc0:	f000 fe24 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20005ef4 	.word	0x20005ef4
 8001dcc:	40003800 	.word	0x40003800

08001dd0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <MX_SPI4_Init+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e00:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e1c:	220a      	movs	r2, #10
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_SPI4_Init+0x64>)
 8001e22:	f009 ffbb 	bl	800bd9c <HAL_SPI_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f000 fdee 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20006764 	.word	0x20006764
 8001e38:	40013400 	.word	0x40013400

08001e3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <MX_SPI5_Init+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e88:	220a      	movs	r2, #10
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_SPI5_Init+0x64>)
 8001e8e:	f009 ff85 	bl	800bd9c <HAL_SPI_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e98:	f000 fdb8 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20005f50 	.word	0x20005f50
 8001ea4:	40015000 	.word	0x40015000

08001ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ef2:	4818      	ldr	r0, [pc, #96]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001ef4:	f00a fdc4 	bl	800ca80 <HAL_TIM_PWM_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001efe:	f000 fd85 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001f12:	f00b fa47 	bl	800d3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f1c:	f000 fd76 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f20:	2360      	movs	r3, #96	; 0x60
 8001f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2208      	movs	r2, #8
 8001f34:	4619      	mov	r1, r3
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001f38:	f00a fefa 	bl	800cd30 <HAL_TIM_PWM_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f42:	f000 fd63 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f46:	4803      	ldr	r0, [pc, #12]	; (8001f54 <MX_TIM2_Init+0xac>)
 8001f48:	f000 ffb6 	bl	8002eb8 <HAL_TIM_MspPostInit>

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200068ac 	.word	0x200068ac

08001f58 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MX_UART8_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_UART8_Init+0x4c>)
 8001f90:	f00b fa98 	bl	800d4c4 <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001f9a:	f000 fd37 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20005e58 	.word	0x20005e58
 8001fa8:	40007c00 	.word	0x40007c00

08001fac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_USART3_UART_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	f00b fa6e 	bl	800d4c4 <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fee:	f000 fd0d 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20005fa8 	.word	0x20005fa8
 8001ffc:	40004800 	.word	0x40004800

08002000 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_USART6_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800200c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002010:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002038:	f00b fa44 	bl	800d4c4 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002042:	f000 fce3 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20006860 	.word	0x20006860
 8002050:	40011400 	.word	0x40011400

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
 800206e:	4bb5      	ldr	r3, [pc, #724]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4ab4      	ldr	r2, [pc, #720]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4bb2      	ldr	r3, [pc, #712]	; (8002344 <MX_GPIO_Init+0x2f0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	4bae      	ldr	r3, [pc, #696]	; (8002344 <MX_GPIO_Init+0x2f0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4aad      	ldr	r2, [pc, #692]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4bab      	ldr	r3, [pc, #684]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	4ba7      	ldr	r3, [pc, #668]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4aa6      	ldr	r2, [pc, #664]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4ba4      	ldr	r3, [pc, #656]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	4ba0      	ldr	r3, [pc, #640]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a9f      	ldr	r2, [pc, #636]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b9d      	ldr	r3, [pc, #628]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b99      	ldr	r3, [pc, #612]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a98      	ldr	r2, [pc, #608]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b96      	ldr	r3, [pc, #600]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b92      	ldr	r3, [pc, #584]	; (8002344 <MX_GPIO_Init+0x2f0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a91      	ldr	r2, [pc, #580]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b8f      	ldr	r3, [pc, #572]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b8b      	ldr	r3, [pc, #556]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a8a      	ldr	r2, [pc, #552]	; (8002344 <MX_GPIO_Init+0x2f0>)
 800211c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b84      	ldr	r3, [pc, #528]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a83      	ldr	r2, [pc, #524]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b81      	ldr	r3, [pc, #516]	; (8002344 <MX_GPIO_Init+0x2f0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f248 4184 	movw	r1, #33924	; 0x8484
 8002150:	487d      	ldr	r0, [pc, #500]	; (8002348 <MX_GPIO_Init+0x2f4>)
 8002152:	f005 ff39 	bl	8007fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800215c:	487b      	ldr	r0, [pc, #492]	; (800234c <MX_GPIO_Init+0x2f8>)
 800215e:	f005 ff33 	bl	8007fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002168:	4879      	ldr	r0, [pc, #484]	; (8002350 <MX_GPIO_Init+0x2fc>)
 800216a:	f005 ff2d 	bl	8007fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2108      	movs	r1, #8
 8002172:	4878      	ldr	r0, [pc, #480]	; (8002354 <MX_GPIO_Init+0x300>)
 8002174:	f005 ff28 	bl	8007fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002178:	2200      	movs	r2, #0
 800217a:	f645 2126 	movw	r1, #23078	; 0x5a26
 800217e:	4876      	ldr	r0, [pc, #472]	; (8002358 <MX_GPIO_Init+0x304>)
 8002180:	f005 ff22 	bl	8007fc8 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218a:	4874      	ldr	r0, [pc, #464]	; (800235c <MX_GPIO_Init+0x308>)
 800218c:	f005 ff1c 	bl	8007fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002196:	4872      	ldr	r0, [pc, #456]	; (8002360 <MX_GPIO_Init+0x30c>)
 8002198:	f005 ff16 	bl	8007fc8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 800219c:	f248 4384 	movw	r3, #33924	; 0x8484
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4864      	ldr	r0, [pc, #400]	; (8002348 <MX_GPIO_Init+0x2f4>)
 80021b6:	f005 fd43 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80021ba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	485e      	ldr	r0, [pc, #376]	; (800234c <MX_GPIO_Init+0x2f8>)
 80021d4:	f005 fd34 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	4858      	ldr	r0, [pc, #352]	; (8002350 <MX_GPIO_Init+0x2fc>)
 80021ee:	f005 fd27 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021f2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4851      	ldr	r0, [pc, #324]	; (8002350 <MX_GPIO_Init+0x2fc>)
 800220c:	f005 fd18 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002210:	2308      	movs	r3, #8
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	484b      	ldr	r0, [pc, #300]	; (8002354 <MX_GPIO_Init+0x300>)
 8002228:	f005 fd0a 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 800222c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4843      	ldr	r0, [pc, #268]	; (8002350 <MX_GPIO_Init+0x2fc>)
 8002242:	f005 fcfd 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4840      	ldr	r0, [pc, #256]	; (800235c <MX_GPIO_Init+0x308>)
 800225a:	f005 fcf1 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	4836      	ldr	r0, [pc, #216]	; (800234c <MX_GPIO_Init+0x2f8>)
 8002274:	f005 fce4 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002278:	f242 4319 	movw	r3, #9241	; 0x2419
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4832      	ldr	r0, [pc, #200]	; (8002358 <MX_GPIO_Init+0x304>)
 800228e:	f005 fcd7 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002292:	f645 2326 	movw	r3, #23078	; 0x5a26
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	482b      	ldr	r0, [pc, #172]	; (8002358 <MX_GPIO_Init+0x304>)
 80022ac:	f005 fcc8 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4820      	ldr	r0, [pc, #128]	; (8002348 <MX_GPIO_Init+0x2f4>)
 80022c6:	f005 fcbb 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80022ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	4619      	mov	r1, r3
 80022e2:	481e      	ldr	r0, [pc, #120]	; (800235c <MX_GPIO_Init+0x308>)
 80022e4:	f005 fcac 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022e8:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	4817      	ldr	r0, [pc, #92]	; (8002360 <MX_GPIO_Init+0x30c>)
 8002302:	f005 fc9d 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <MX_GPIO_Init+0x30c>)
 800231c:	f005 fc90 	bl	8007c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002320:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002326:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	4808      	ldr	r0, [pc, #32]	; (8002358 <MX_GPIO_Init+0x304>)
 8002338:	f005 fc82 	bl	8007c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2105      	movs	r1, #5
 8002340:	2006      	movs	r0, #6
 8002342:	e00f      	b.n	8002364 <MX_GPIO_Init+0x310>
 8002344:	40023800 	.word	0x40023800
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020000 	.word	0x40020000
 8002358:	40021800 	.word	0x40021800
 800235c:	40020400 	.word	0x40020400
 8002360:	40020c00 	.word	0x40020c00
 8002364:	f005 fc34 	bl	8007bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002368:	2006      	movs	r0, #6
 800236a:	f005 fc4d 	bl	8007c08 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3738      	adds	r7, #56	; 0x38
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop

08002378 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237c:	b08a      	sub	sp, #40	; 0x28
 800237e:	af06      	add	r7, sp, #24
 8002380:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002382:	f015 fd33 	bl	8017dec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8002386:	f012 f949 	bl	801461c <osThreadGetId>
 800238a:	4603      	mov	r3, r0
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <StartMemory0+0xa0>)
 800238e:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

	uint8_t counter = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
	  for(;;)
	  {
		  //Write data to sd and flash
		  if(counter==1) sd_open_file(&filename);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <StartMemory0+0x28>
 800239a:	4820      	ldr	r0, [pc, #128]	; (800241c <StartMemory0+0xa4>)
 800239c:	f004 fd1e 	bl	8006ddc <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <StartMemory0+0xa8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8df 	bl	8000568 <__aeabi_f2d>
 80023aa:	4682      	mov	sl, r0
 80023ac:	468b      	mov	fp, r1
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <StartMemory0+0xac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8d8 	bl	8000568 <__aeabi_f2d>
 80023b8:	4604      	mov	r4, r0
 80023ba:	460d      	mov	r5, r1
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <StartMemory0+0xb0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8d1 	bl	8000568 <__aeabi_f2d>
 80023c6:	4680      	mov	r8, r0
 80023c8:	4689      	mov	r9, r1
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <StartMemory0+0xb4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8ca 	bl	8000568 <__aeabi_f2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023dc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023e0:	e9cd 4500 	strd	r4, r5, [sp]
 80023e4:	4652      	mov	r2, sl
 80023e6:	465b      	mov	r3, fp
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <StartMemory0+0xb8>)
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <StartMemory0+0xbc>)
 80023ec:	f018 fba4 	bl	801ab38 <siprintf>
		  sd_write(&fil, writeBuf);
 80023f0:	4910      	ldr	r1, [pc, #64]	; (8002434 <StartMemory0+0xbc>)
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <StartMemory0+0xc0>)
 80023f4:	f004 fd0a 	bl	8006e0c <sd_write>
		  if (counter == 50) {
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b32      	cmp	r3, #50	; 0x32
 80023fc:	d104      	bne.n	8002408 <StartMemory0+0x90>
			  f_close(&fil);
 80023fe:	480e      	ldr	r0, [pc, #56]	; (8002438 <StartMemory0+0xc0>)
 8002400:	f011 fbe0 	bl	8013bc4 <f_close>
			  counter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
		  }
		  counter++;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]

		  osDelay(1000/DATA_FREQ);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f012 f973 	bl	80146fa <osDelay>
	  {
 8002414:	e7be      	b.n	8002394 <StartMemory0+0x1c>
 8002416:	bf00      	nop
 8002418:	20005ff4 	.word	0x20005ff4
 800241c:	2000630c 	.word	0x2000630c
 8002420:	200062f8 	.word	0x200062f8
 8002424:	20006b4c 	.word	0x20006b4c
 8002428:	20006300 	.word	0x20006300
 800242c:	20006b48 	.word	0x20006b48
 8002430:	0801ec60 	.word	0x0801ec60
 8002434:	20006320 	.word	0x20006320
 8002438:	20006918 	.word	0x20006918

0800243c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 8002444:	f012 f8ea 	bl	801461c <osThreadGetId>
 8002448:	4603      	mov	r3, r0
 800244a:	4a86      	ldr	r2, [pc, #536]	; (8002664 <StartEjection1+0x228>)
 800244c:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	if (ejection_state_flag >= 4)  osThreadExit(); //Ground reached
 800244e:	4b86      	ldr	r3, [pc, #536]	; (8002668 <StartEjection1+0x22c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d901      	bls.n	800245a <StartEjection1+0x1e>
 8002456:	f012 f94a 	bl	80146ee <osThreadExit>
	if (wu_flag) osThreadExit(); //WHEN WAKING UP
 800245a:	4b84      	ldr	r3, [pc, #528]	; (800266c <StartEjection1+0x230>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <StartEjection1+0x2a>
 8002462:	f012 f944 	bl	80146ee <osThreadExit>

	osDelay(5000); //Let the LPS get values to have a valid pressure_hPa
 8002466:	f241 3088 	movw	r0, #5000	; 0x1388
 800246a:	f012 f946 	bl	80146fa <osDelay>

	  /* Infinite loop */
	  for(;;)
	  {
		  altitude_m = MRT_getAltitude(pressure_hPa);
 800246e:	4b80      	ldr	r3, [pc, #512]	; (8002670 <StartEjection1+0x234>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	eeb0 0a67 	vmov.f32	s0, s15
 8002478:	f001 fd76 	bl	8003f68 <MRT_getAltitude>
 800247c:	eef0 7a40 	vmov.f32	s15, s0
 8002480:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <StartEjection1+0x238>)
 8002482:	edc3 7a00 	vstr	s15, [r3]

		  if (MIN_APOGEE <= altitude_m || ejection_state_flag >= 2){
 8002486:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <StartEjection1+0x238>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002678 <StartEjection1+0x23c>
 8002490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	da04      	bge.n	80024a4 <StartEjection1+0x68>
 800249a:	4b73      	ldr	r3, [pc, #460]	; (8002668 <StartEjection1+0x22c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f240 80db 	bls.w	800265a <StartEjection1+0x21e>

			  if (ejection_state_flag < 2){
 80024a4:	4b70      	ldr	r3, [pc, #448]	; (8002668 <StartEjection1+0x22c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d839      	bhi.n	8002520 <StartEjection1+0xe4>

				  //Update state (saved state in WatchDog thread)
				  ejection_state_flag = 2;
 80024ac:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <StartEjection1+0x22c>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <StartEjection1+0x240>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]

				  HAL_UART_Transmit(&DEBUG_UART, "Eject Drogue\r\n", 15, HAL_MAX_DELAY);
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	220f      	movs	r2, #15
 80024be:	4970      	ldr	r1, [pc, #448]	; (8002680 <StartEjection1+0x244>)
 80024c0:	4870      	ldr	r0, [pc, #448]	; (8002684 <StartEjection1+0x248>)
 80024c2:	f00b f84c 	bl	800d55e <HAL_UART_Transmit>

				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024c6:	e005      	b.n	80024d4 <StartEjection1+0x98>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ce:	486e      	ldr	r0, [pc, #440]	; (8002688 <StartEjection1+0x24c>)
 80024d0:	f005 fd7a 	bl	8007fc8 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80024d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d8:	486b      	ldr	r0, [pc, #428]	; (8002688 <StartEjection1+0x24c>)
 80024da:	f005 fd5d 	bl	8007f98 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f1      	beq.n	80024c8 <StartEjection1+0x8c>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80024e4:	e005      	b.n	80024f2 <StartEjection1+0xb6>
					  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ec:	4866      	ldr	r0, [pc, #408]	; (8002688 <StartEjection1+0x24c>)
 80024ee:	f005 fd6b 	bl	8007fc8 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80024f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f6:	4864      	ldr	r0, [pc, #400]	; (8002688 <StartEjection1+0x24c>)
 80024f8:	f005 fd4e 	bl	8007f98 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f1      	beq.n	80024e6 <StartEjection1+0xaa>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002502:	e005      	b.n	8002510 <StartEjection1+0xd4>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250a:	485f      	ldr	r0, [pc, #380]	; (8002688 <StartEjection1+0x24c>)
 800250c:	f005 fd5c 	bl	8007fc8 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002514:	485c      	ldr	r0, [pc, #368]	; (8002688 <StartEjection1+0x24c>)
 8002516:	f005 fd3f 	bl	8007f98 <HAL_GPIO_ReadPin>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f1      	bne.n	8002504 <StartEjection1+0xc8>
				  }
			  }

			  for(;;){

				  altitude_m = MRT_getAltitude(pressure_hPa);
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <StartEjection1+0x234>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eeb0 0a67 	vmov.f32	s0, s15
 800252a:	f001 fd1d 	bl	8003f68 <MRT_getAltitude>
 800252e:	eef0 7a40 	vmov.f32	s15, s0
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <StartEjection1+0x238>)
 8002534:	edc3 7a00 	vstr	s15, [r3]

				  //We reached main deployment altitude
				  if ((altitude_m>DEPLOY_ALT_MIN && altitude_m<DEPLOY_ALT_MAX) || ejection_state_flag >= 3){
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <StartEjection1+0x238>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800268c <StartEjection1+0x250>
 8002542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd09      	ble.n	8002560 <StartEjection1+0x124>
 800254c:	4b49      	ldr	r3, [pc, #292]	; (8002674 <StartEjection1+0x238>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002690 <StartEjection1+0x254>
 8002556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d403      	bmi.n	8002568 <StartEjection1+0x12c>
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <StartEjection1+0x22c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d974      	bls.n	8002652 <StartEjection1+0x216>


					  if (ejection_state_flag < 3){
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <StartEjection1+0x22c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d839      	bhi.n	80025e4 <StartEjection1+0x1a8>

						  //Update state (saved state in WatchDog thread)
						  ejection_state_flag = 3;
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <StartEjection1+0x22c>)
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
						  wd_ejection_flag = 1;
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <StartEjection1+0x240>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]

						  HAL_UART_Transmit(&DEBUG_UART, "Eject Main\r\n", 13, HAL_MAX_DELAY);
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	220d      	movs	r2, #13
 8002582:	4944      	ldr	r1, [pc, #272]	; (8002694 <StartEjection1+0x258>)
 8002584:	483f      	ldr	r0, [pc, #252]	; (8002684 <StartEjection1+0x248>)
 8002586:	f00a ffea 	bl	800d55e <HAL_UART_Transmit>

						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800258a:	e005      	b.n	8002598 <StartEjection1+0x15c>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002592:	483d      	ldr	r0, [pc, #244]	; (8002688 <StartEjection1+0x24c>)
 8002594:	f005 fd18 	bl	8007fc8 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8002598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800259c:	483a      	ldr	r0, [pc, #232]	; (8002688 <StartEjection1+0x24c>)
 800259e:	f005 fcfb 	bl	8007f98 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f1      	beq.n	800258c <StartEjection1+0x150>
						  }
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 80025a8:	e005      	b.n	80025b6 <StartEjection1+0x17a>
							  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b0:	4835      	ldr	r0, [pc, #212]	; (8002688 <StartEjection1+0x24c>)
 80025b2:	f005 fd09 	bl	8007fc8 <HAL_GPIO_WritePin>
						  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 80025b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ba:	4833      	ldr	r0, [pc, #204]	; (8002688 <StartEjection1+0x24c>)
 80025bc:	f005 fcec 	bl	8007f98 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f1      	beq.n	80025aa <StartEjection1+0x16e>
						  }
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80025c6:	e005      	b.n	80025d4 <StartEjection1+0x198>
							  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ce:	482e      	ldr	r0, [pc, #184]	; (8002688 <StartEjection1+0x24c>)
 80025d0:	f005 fcfa 	bl	8007fc8 <HAL_GPIO_WritePin>
						  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80025d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d8:	482b      	ldr	r0, [pc, #172]	; (8002688 <StartEjection1+0x24c>)
 80025da:	f005 fcdd 	bl	8007f98 <HAL_GPIO_ReadPin>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f1      	bne.n	80025c8 <StartEjection1+0x18c>
						  }
					  }

					  uint8_t prev_altitude = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
					  uint8_t cur_altitude = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	737b      	strb	r3, [r7, #13]
					  uint8_t counter = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73bb      	strb	r3, [r7, #14]
					  while(counter < 5){
 80025f0:	e01d      	b.n	800262e <StartEjection1+0x1f2>
						  cur_altitude = MRT_getAltitude(pressure_hPa);
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <StartEjection1+0x234>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	f001 fcb4 	bl	8003f68 <MRT_getAltitude>
 8002600:	eef0 7a40 	vmov.f32	s15, s0
 8002604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002608:	edc7 7a00 	vstr	s15, [r7]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	737b      	strb	r3, [r7, #13]
						  if (cur_altitude - prev_altitude == 0){ //TODO might need a bigger range
 8002610:	7b7a      	ldrb	r2, [r7, #13]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	429a      	cmp	r2, r3
 8002616:	d103      	bne.n	8002620 <StartEjection1+0x1e4>
							  counter++;
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	3301      	adds	r3, #1
 800261c:	73bb      	strb	r3, [r7, #14]
 800261e:	e001      	b.n	8002624 <StartEjection1+0x1e8>
						  }
						  else{
							  counter = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	73bb      	strb	r3, [r7, #14]
						  }
						  prev_altitude = cur_altitude;
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	73fb      	strb	r3, [r7, #15]
						  osDelay(100);
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	f012 f866 	bl	80146fa <osDelay>
					  while(counter < 5){
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d9de      	bls.n	80025f2 <StartEjection1+0x1b6>
					  }

					  //Update state (saved state in WatchDog thread)
					  ejection_state_flag = 4;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <StartEjection1+0x22c>)
 8002636:	2204      	movs	r2, #4
 8002638:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <StartEjection1+0x240>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]

					  HAL_UART_Transmit(&DEBUG_UART, "Ground Level Reached\r\n", 22, HAL_MAX_DELAY);
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	2216      	movs	r2, #22
 8002646:	4914      	ldr	r1, [pc, #80]	; (8002698 <StartEjection1+0x25c>)
 8002648:	480e      	ldr	r0, [pc, #56]	; (8002684 <StartEjection1+0x248>)
 800264a:	f00a ff88 	bl	800d55e <HAL_UART_Transmit>
					  osThreadExit();
 800264e:	f012 f84e 	bl	80146ee <osThreadExit>

				  }

				  osDelay(100);
 8002652:	2064      	movs	r0, #100	; 0x64
 8002654:	f012 f851 	bl	80146fa <osDelay>
				  altitude_m = MRT_getAltitude(pressure_hPa);
 8002658:	e762      	b.n	8002520 <StartEjection1+0xe4>
			  }
		  }

	    osDelay(100);
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f012 f84d 	bl	80146fa <osDelay>
		  altitude_m = MRT_getAltitude(pressure_hPa);
 8002660:	e705      	b.n	800246e <StartEjection1+0x32>
 8002662:	bf00      	nop
 8002664:	20005ff4 	.word	0x20005ff4
 8002668:	20000441 	.word	0x20000441
 800266c:	200006b9 	.word	0x200006b9
 8002670:	2000040c 	.word	0x2000040c
 8002674:	20000430 	.word	0x20000430
 8002678:	42f00000 	.word	0x42f00000
 800267c:	20000434 	.word	0x20000434
 8002680:	0801ec78 	.word	0x0801ec78
 8002684:	20005e58 	.word	0x20005e58
 8002688:	40021800 	.word	0x40021800
 800268c:	42700000 	.word	0x42700000
 8002690:	42820000 	.word	0x42820000
 8002694:	0801ec88 	.word	0x0801ec88
 8002698:	0801ec98 	.word	0x0801ec98

0800269c <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80026a4:	f011 ffba 	bl	801461c <osThreadGetId>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a02      	ldr	r2, [pc, #8]	; (80026b4 <StartTelemetry2+0x18>)
 80026ac:	6093      	str	r3, [r2, #8]

	#if !TELEMETRY_THREAD
	osThreadExit();
 80026ae:	f012 f81e 	bl	80146ee <osThreadExit>
 80026b2:	bf00      	nop
 80026b4:	20005ff4 	.word	0x20005ff4

080026b8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80026c0:	f011 ffac 	bl	801461c <osThreadGetId>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a31      	ldr	r2, [pc, #196]	; (800278c <StartSensors3+0xd4>)
 80026c8:	60d3      	str	r3, [r2, #12]

	#if !SENSORS_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80026ce:	2201      	movs	r2, #1
 80026d0:	2102      	movs	r1, #2
 80026d2:	482f      	ldr	r0, [pc, #188]	; (8002790 <StartSensors3+0xd8>)
 80026d4:	f005 fc78 	bl	8007fc8 <HAL_GPIO_WritePin>

	  if (counter == SENSORS_POLL_FREQ_DIVIDER){
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b0a      	cmp	r3, #10
 80026dc:	d12b      	bne.n	8002736 <StartSensors3+0x7e>
		  counter=0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <StartSensors3+0xdc>)
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <StartSensors3+0xe0>)
 80026e6:	482d      	ldr	r0, [pc, #180]	; (800279c <StartSensors3+0xe4>)
 80026e8:	f000 fe72 	bl	80033d0 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <StartSensors3+0xe8>)
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <StartSensors3+0xec>)
 80026f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f2:	f7fe fd8d 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <StartSensors3+0xe8>)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <StartSensors3+0xf0>)
 80026fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80026fc:	f7fe fdf8 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <StartSensors3+0xe8>)
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <StartSensors3+0xf4>)
 8002704:	ca07      	ldmia	r2, {r0, r1, r2}
 8002706:	f7fe fdc9 	bl	800129c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <StartSensors3+0xf8>)
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <StartSensors3+0xfc>)
 800270e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002710:	f7fe ff18 	bl	8001544 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <StartSensors3+0xf8>)
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <StartSensors3+0x100>)
 8002718:	ca07      	ldmia	r2, {r0, r1, r2}
 800271a:	f7fe fee7 	bl	80014ec <MRT_LPS22HH_getPressure>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <StartSensors3+0x100>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	f001 fc1e 	bl	8003f68 <MRT_getAltitude>
 800272c:	eef0 7a40 	vmov.f32	s15, s0
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <StartSensors3+0x104>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
	  }
	  counter++;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]


	  if(apogee_flag == 0){
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <StartSensors3+0x108>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <StartSensors3+0xb0>
		  //Poll propulsion sensors

		  //Thermocouple
		  Max31855_Read_Temp();
 8002744:	f004 fa14 	bl	8006b70 <Max31855_Read_Temp>

		  //Pressure tank
		  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <StartSensors3+0x10c>)
 800274a:	f001 fbc9 	bl	8003ee0 <MRT_prop_poll_pressure_transducer>
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <StartSensors3+0x110>)
 8002754:	edc3 7a00 	vstr	s15, [r3]

		  //Valve status
		  valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8002758:	2102      	movs	r1, #2
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <StartSensors3+0x114>)
 800275c:	f005 fc1c 	bl	8007f98 <HAL_GPIO_ReadPin>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <StartSensors3+0x118>)
 8002766:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2102      	movs	r1, #2
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <StartSensors3+0xd8>)
 800276e:	f005 fc2b 	bl	8007fc8 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <StartSensors3+0x108>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <StartSensors3+0xca>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 800277a:	200a      	movs	r0, #10
 800277c:	f011 ffbd 	bl	80146fa <osDelay>
 8002780:	e7a5      	b.n	80026ce <StartSensors3+0x16>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8002782:	2014      	movs	r0, #20
 8002784:	f011 ffb9 	bl	80146fa <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002788:	e7a1      	b.n	80026ce <StartSensors3+0x16>
 800278a:	bf00      	nop
 800278c:	20005ff4 	.word	0x20005ff4
 8002790:	40020800 	.word	0x40020800
 8002794:	2000684c 	.word	0x2000684c
 8002798:	20006750 	.word	0x20006750
 800279c:	200067bc 	.word	0x200067bc
 80027a0:	20006908 	.word	0x20006908
 80027a4:	20000414 	.word	0x20000414
 80027a8:	20000420 	.word	0x20000420
 80027ac:	2000042c 	.word	0x2000042c
 80027b0:	200068f8 	.word	0x200068f8
 80027b4:	20000410 	.word	0x20000410
 80027b8:	2000040c 	.word	0x2000040c
 80027bc:	20000430 	.word	0x20000430
 80027c0:	20000440 	.word	0x20000440
 80027c4:	20006708 	.word	0x20006708
 80027c8:	200067e0 	.word	0x200067e0
 80027cc:	40020400 	.word	0x40020400
 80027d0:	20006858 	.word	0x20006858

080027d4 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0c2      	sub	sp, #264	; 0x108
 80027d8:	af00      	add	r7, sp, #0
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	#if !PRINTING_THREAD
	osThreadExit();
 80027de:	f011 ff86 	bl	80146ee <osThreadExit>
	...

080027e4 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b0c9      	sub	sp, #292	; 0x124
 80027e8:	af04      	add	r7, sp, #16
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	6018      	str	r0, [r3, #0]
	osThreadState_t thread_state;

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2104      	movs	r1, #4
 80027f2:	486b      	ldr	r0, [pc, #428]	; (80029a0 <StartWatchDog+0x1bc>)
 80027f4:	f005 fbe8 	bl	8007fc8 <HAL_GPIO_WritePin>

	#if IWDG_ACTIVE
	HAL_IWDG_Refresh(&hiwdg);
 80027f8:	486a      	ldr	r0, [pc, #424]	; (80029a4 <StartWatchDog+0x1c0>)
 80027fa:	f006 fcc9 	bl	8009190 <HAL_IWDG_Refresh>
	#endif

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80027fe:	2200      	movs	r2, #0
 8002800:	4969      	ldr	r1, [pc, #420]	; (80029a8 <StartWatchDog+0x1c4>)
 8002802:	486a      	ldr	r0, [pc, #424]	; (80029ac <StartWatchDog+0x1c8>)
 8002804:	f008 fe46 	bl	800b494 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002808:	2200      	movs	r2, #0
 800280a:	4969      	ldr	r1, [pc, #420]	; (80029b0 <StartWatchDog+0x1cc>)
 800280c:	4867      	ldr	r0, [pc, #412]	; (80029ac <StartWatchDog+0x1c8>)
 800280e:	f008 ff46 	bl	800b69e <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <StartWatchDog+0x1c4>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <StartWatchDog+0x1d0>)
 8002818:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <StartWatchDog+0x1c4>)
 800281c:	785a      	ldrb	r2, [r3, #1]
 800281e:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <StartWatchDog+0x1d4>)
 8002820:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <StartWatchDog+0x1c4>)
 8002824:	789a      	ldrb	r2, [r3, #2]
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <StartWatchDog+0x1d8>)
 8002828:	701a      	strb	r2, [r3, #0]

	 memset(buffer, 0, TX_BUF_DIM);
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f017 f901 	bl	8019a3c <memset>
	 sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <StartWatchDog+0x1d0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461d      	mov	r5, r3
 8002840:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <StartWatchDog+0x1d4>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461e      	mov	r6, r3
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <StartWatchDog+0x1d8>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461c      	mov	r4, r3
 800284c:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <StartWatchDog+0x1dc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe89 	bl	8000568 <__aeabi_f2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	f107 0008 	add.w	r0, r7, #8
 800285e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002862:	9400      	str	r4, [sp, #0]
 8002864:	4633      	mov	r3, r6
 8002866:	462a      	mov	r2, r5
 8002868:	4956      	ldr	r1, [pc, #344]	; (80029c4 <StartWatchDog+0x1e0>)
 800286a:	f018 f965 	bl	801ab38 <siprintf>
	 HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fcbc 	bl	80001f0 <strlen>
 8002878:	4603      	mov	r3, r0
 800287a:	b29a      	uxth	r2, r3
 800287c:	f107 0108 	add.w	r1, r7, #8
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	4850      	ldr	r0, [pc, #320]	; (80029c8 <StartWatchDog+0x1e4>)
 8002886:	f00a fe6a 	bl	800d55e <HAL_UART_Transmit>


	 if(wd_ejection_flag){
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <StartWatchDog+0x1e8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <StartWatchDog+0xe4>
		 wd_ejection_flag = 0;
 8002892:	4b4e      	ldr	r3, [pc, #312]	; (80029cc <StartWatchDog+0x1e8>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
		 flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <StartWatchDog+0x1ec>)
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <StartWatchDog+0x1f0>)
 800289e:	711a      	strb	r2, [r3, #4]

		 if (ejection_state_flag == 2){
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <StartWatchDog+0x1ec>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d106      	bne.n	80028b6 <StartWatchDog+0xd2>
			 apogee_flag = 1;
 80028a8:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <StartWatchDog+0x1f4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
			 flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <StartWatchDog+0x1f4>)
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <StartWatchDog+0x1f0>)
 80028b4:	70da      	strb	r2, [r3, #3]
		 }

		 W25qxx_EraseSector(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f001 fdfe 	bl	80044b8 <W25qxx_EraseSector>
		 W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028bc:	2305      	movs	r3, #5
 80028be:	2200      	movs	r2, #0
 80028c0:	2101      	movs	r1, #1
 80028c2:	4844      	ldr	r0, [pc, #272]	; (80029d4 <StartWatchDog+0x1f0>)
 80028c4:	f001 ff42 	bl	800474c <W25qxx_WriteSector>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80028c8:	f001 faf8 	bl	8003ebc <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <StartWatchDog+0x1f8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d111      	bne.n	80028f8 <StartWatchDog+0x114>
		//Update iwdg_flag
		iwdg_flag = 1;
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <StartWatchDog+0x1fc>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <StartWatchDog+0x1fc>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <StartWatchDog+0x1f0>)
 80028e0:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80028e2:	2001      	movs	r0, #1
 80028e4:	f001 fde8 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028e8:	2305      	movs	r3, #5
 80028ea:	2200      	movs	r2, #0
 80028ec:	2101      	movs	r1, #1
 80028ee:	4839      	ldr	r0, [pc, #228]	; (80029d4 <StartWatchDog+0x1f0>)
 80028f0:	f001 ff2c 	bl	800474c <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 80028f4:	f7fe fe8a 	bl	800160c <__NVIC_SystemReset>
	  }


	  //Check each thread state
	  #if THREAD_KEEPER
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028fe:	e040      	b.n	8002982 <StartWatchDog+0x19e>
		  thread_state = osThreadGetState(threadID[i]);
 8002900:	4a38      	ldr	r2, [pc, #224]	; (80029e4 <StartWatchDog+0x200>)
 8002902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	4618      	mov	r0, r3
 800290c:	f011 fe92 	bl	8014634 <osThreadGetState>
 8002910:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

		  if (thread_state == osThreadInactive ||
 8002914:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <StartWatchDog+0x148>
 800291c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <StartWatchDog+0x148>
		      thread_state == osThreadBlocked  ||
 8002924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11d      	bne.n	8002968 <StartWatchDog+0x184>
		      thread_state == osThreadTerminated){
			  if (i==1 && ejection_state_flag < 4){
 800292c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10c      	bne.n	800294e <StartWatchDog+0x16a>
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <StartWatchDog+0x1ec>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d808      	bhi.n	800294e <StartWatchDog+0x16a>
				 osThreadResume(threadID[i]);
 800293c:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <StartWatchDog+0x200>)
 800293e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	4618      	mov	r0, r3
 8002948:	f011 feb0 	bl	80146ac <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 800294c:	e013      	b.n	8002976 <StartWatchDog+0x192>
			  }
			  else if (i!=1){
 800294e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d00f      	beq.n	8002976 <StartWatchDog+0x192>
				 osThreadResume(threadID[i]);
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <StartWatchDog+0x200>)
 8002958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	4618      	mov	r0, r3
 8002962:	f011 fea3 	bl	80146ac <osThreadResume>
			  if (i==1 && ejection_state_flag < 4){
 8002966:	e006      	b.n	8002976 <StartWatchDog+0x192>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002968:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d102      	bne.n	8002978 <StartWatchDog+0x194>
			  NVIC_SystemReset();
 8002972:	f7fe fe4b 	bl	800160c <__NVIC_SystemReset>
			  if (i==1 && ejection_state_flag < 4){
 8002976:	bf00      	nop
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297c:	3301      	adds	r3, #1
 800297e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002986:	2b03      	cmp	r3, #3
 8002988:	ddba      	ble.n	8002900 <StartWatchDog+0x11c>
		  }
		  */
	  }
	  #endif

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2104      	movs	r1, #4
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <StartWatchDog+0x1bc>)
 8002990:	f005 fb1a 	bl	8007fc8 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002998:	f011 feaf 	bl	80146fa <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800299c:	e727      	b.n	80027ee <StartWatchDog+0xa>
 800299e:	bf00      	nop
 80029a0:	40020800 	.word	0x40020800
 80029a4:	2000628c 	.word	0x2000628c
 80029a8:	20000678 	.word	0x20000678
 80029ac:	200067c0 	.word	0x200067c0
 80029b0:	2000068c 	.word	0x2000068c
 80029b4:	20000442 	.word	0x20000442
 80029b8:	20000443 	.word	0x20000443
 80029bc:	20000444 	.word	0x20000444
 80029c0:	20000430 	.word	0x20000430
 80029c4:	0801ecb0 	.word	0x0801ecb0
 80029c8:	20005e58 	.word	0x20005e58
 80029cc:	20000434 	.word	0x20000434
 80029d0:	20000441 	.word	0x20000441
 80029d4:	20005fec 	.word	0x20005fec
 80029d8:	20000440 	.word	0x20000440
 80029dc:	200006b8 	.word	0x200006b8
 80029e0:	2000043f 	.word	0x2000043f
 80029e4:	20005ff4 	.word	0x20005ff4

080029e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029fa:	f004 fbb9 	bl	8007170 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40001000 	.word	0x40001000

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_MspInit+0x54>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_MspInit+0x54>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_MspInit+0x54>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_MspInit+0x54>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_MspInit+0x54>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_MspInit+0x54>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	f06f 0001 	mvn.w	r0, #1
 8002a62:	f005 f8b5 	bl	8007bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_ADC_MspInit+0x7c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d127      	bne.n	8002ae6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_ADC_MspInit+0x80>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_ADC_MspInit+0x84>)
 8002ae2:	f005 f8ad 	bl	8007c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40012000 	.word	0x40012000
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	; 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_I2C_MspInit+0x190>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12d      	bne.n	8002b7a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a5a      	ldr	r2, [pc, #360]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b40:	2312      	movs	r3, #18
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	4619      	mov	r1, r3
 8002b56:	484f      	ldr	r0, [pc, #316]	; (8002c94 <HAL_I2C_MspInit+0x198>)
 8002b58:	f005 f872 	bl	8007c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b78:	e083      	b.n	8002c82 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <HAL_I2C_MspInit+0x19c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d12d      	bne.n	8002be0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba6:	2312      	movs	r3, #18
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4835      	ldr	r0, [pc, #212]	; (8002c94 <HAL_I2C_MspInit+0x198>)
 8002bbe:	f005 f83f 	bl	8007c40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
}
 8002bde:	e050      	b.n	8002c82 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <HAL_I2C_MspInit+0x1a0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d14b      	bne.n	8002c82 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c28:	2312      	movs	r3, #18
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c34:	2304      	movs	r3, #4
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <HAL_I2C_MspInit+0x1a4>)
 8002c40:	f004 fffe 	bl	8007c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4a:	2312      	movs	r3, #18
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c56:	2304      	movs	r3, #4
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <HAL_I2C_MspInit+0x1a8>)
 8002c62:	f004 ffed 	bl	8007c40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_I2C_MspInit+0x194>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
}
 8002c82:	bf00      	nop
 8002c84:	3738      	adds	r7, #56	; 0x38
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40005400 	.word	0x40005400
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40005800 	.word	0x40005800
 8002c9c:	40005c00 	.word	0x40005c00
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	2230      	movs	r2, #48	; 0x30
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f016 febf 	bl	8019a3c <memset>
  if(hrtc->Instance==RTC)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_RTC_MspInit+0x5c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d119      	bne.n	8002cfc <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f008 f8d0 	bl	800ae7c <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ce2:	f7ff fe93 	bl	8002a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RTC_MspInit+0x60>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2105      	movs	r1, #5
 8002cf0:	2029      	movs	r0, #41	; 0x29
 8002cf2:	f004 ff6d 	bl	8007bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002cf6:	2029      	movs	r0, #41	; 0x29
 8002cf8:	f004 ff86 	bl	8007c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3738      	adds	r7, #56	; 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40002800 	.word	0x40002800
 8002d08:	42470e3c 	.word	0x42470e3c

08002d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_SPI_MspInit+0x150>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d12d      	bne.n	8002d8a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d78:	2305      	movs	r3, #5
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	4619      	mov	r1, r3
 8002d82:	4838      	ldr	r0, [pc, #224]	; (8002e64 <HAL_SPI_MspInit+0x158>)
 8002d84:	f004 ff5c 	bl	8007c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d88:	e064      	b.n	8002e54 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <HAL_SPI_MspInit+0x15c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12d      	bne.n	8002df0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002d9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da2:	6453      	str	r3, [r2, #68]	; 0x44
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002dcc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002dde:	2305      	movs	r3, #5
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de6:	4619      	mov	r1, r3
 8002de8:	4820      	ldr	r0, [pc, #128]	; (8002e6c <HAL_SPI_MspInit+0x160>)
 8002dea:	f004 ff29 	bl	8007c40 <HAL_GPIO_Init>
}
 8002dee:	e031      	b.n	8002e54 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_SPI_MspInit+0x164>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d12c      	bne.n	8002e54 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_SPI_MspInit+0x154>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e32:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e44:	2305      	movs	r3, #5
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4809      	ldr	r0, [pc, #36]	; (8002e74 <HAL_SPI_MspInit+0x168>)
 8002e50:	f004 fef6 	bl	8007c40 <HAL_GPIO_Init>
}
 8002e54:	bf00      	nop
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40003800 	.word	0x40003800
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40015000 	.word	0x40015000
 8002e74:	40021400 	.word	0x40021400

08002e78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e88:	d10d      	bne.n	8002ea6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d11d      	bne.n	8002f16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_TIM_MspPostInit+0x68>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_TIM_MspPostInit+0x68>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_TIM_MspPostInit+0x68>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4804      	ldr	r0, [pc, #16]	; (8002f24 <HAL_TIM_MspPostInit+0x6c>)
 8002f12:	f004 fe95 	bl	8007c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f16:	bf00      	nop
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_UART_MspInit+0x14c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12c      	bne.n	8002fa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a42      	ldr	r2, [pc, #264]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f70:	f043 0310 	orr.w	r3, r3, #16
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002f82:	2303      	movs	r3, #3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f92:	2308      	movs	r3, #8
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4837      	ldr	r0, [pc, #220]	; (800307c <HAL_UART_MspInit+0x154>)
 8002f9e:	f004 fe4f 	bl	8007c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fa2:	e063      	b.n	800306c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_UART_MspInit+0x158>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12d      	bne.n	800300a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a30      	ldr	r2, [pc, #192]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a29      	ldr	r2, [pc, #164]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_UART_MspInit+0x150>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ff8:	2307      	movs	r3, #7
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	4820      	ldr	r0, [pc, #128]	; (8003084 <HAL_UART_MspInit+0x15c>)
 8003004:	f004 fe1c 	bl	8007c40 <HAL_GPIO_Init>
}
 8003008:	e030      	b.n	800306c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_UART_MspInit+0x160>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d12b      	bne.n	800306c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_UART_MspInit+0x150>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_UART_MspInit+0x150>)
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	6453      	str	r3, [r2, #68]	; 0x44
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_UART_MspInit+0x150>)
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_UART_MspInit+0x150>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_UART_MspInit+0x150>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_UART_MspInit+0x150>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800304c:	23c0      	movs	r3, #192	; 0xc0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800305c:	2308      	movs	r3, #8
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003064:	4619      	mov	r1, r3
 8003066:	4809      	ldr	r0, [pc, #36]	; (800308c <HAL_UART_MspInit+0x164>)
 8003068:	f004 fdea 	bl	8007c40 <HAL_GPIO_Init>
}
 800306c:	bf00      	nop
 800306e:	3738      	adds	r7, #56	; 0x38
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40007c00 	.word	0x40007c00
 8003078:	40023800 	.word	0x40023800
 800307c:	40021000 	.word	0x40021000
 8003080:	40004800 	.word	0x40004800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40011400 	.word	0x40011400
 800308c:	40020800 	.word	0x40020800

08003090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	2036      	movs	r0, #54	; 0x36
 80030a6:	f004 fd93 	bl	8007bd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030aa:	2036      	movs	r0, #54	; 0x36
 80030ac:	f004 fdac 	bl	8007c08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <HAL_InitTick+0xa4>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_InitTick+0xa4>)
 80030ba:	f043 0310 	orr.w	r3, r3, #16
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_InitTick+0xa4>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030cc:	f107 0210 	add.w	r2, r7, #16
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 fe9e 	bl	800ae18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030dc:	f007 fe74 	bl	800adc8 <HAL_RCC_GetPCLK1Freq>
 80030e0:	4603      	mov	r3, r0
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_InitTick+0xa8>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0c9b      	lsrs	r3, r3, #18
 80030f0:	3b01      	subs	r3, #1
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_InitTick+0xac>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <HAL_InitTick+0xb0>)
 80030f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_InitTick+0xac>)
 80030fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003100:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003102:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_InitTick+0xac>)
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_InitTick+0xac>)
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_InitTick+0xac>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003114:	4809      	ldr	r0, [pc, #36]	; (800313c <HAL_InitTick+0xac>)
 8003116:	f009 fbe9 	bl	800c8ec <HAL_TIM_Base_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003120:	4806      	ldr	r0, [pc, #24]	; (800313c <HAL_InitTick+0xac>)
 8003122:	f009 fc3d 	bl	800c9a0 <HAL_TIM_Base_Start_IT>
 8003126:	4603      	mov	r3, r0
 8003128:	e000      	b.n	800312c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
}
 800312c:	4618      	mov	r0, r3
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	431bde83 	.word	0x431bde83
 800313c:	20006b50 	.word	0x20006b50
 8003140:	40001000 	.word	0x40001000

08003144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <HardFault_Handler+0x4>

08003158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <MemManage_Handler+0x4>

0800315e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <UsageFault_Handler+0x4>

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800317c:	2001      	movs	r0, #1
 800317e:	f004 ff3d 	bl	8007ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <RTC_Alarm_IRQHandler+0x10>)
 800318e:	f008 fc0d 	bl	800b9ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200067c0 	.word	0x200067c0

0800319c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM6_DAC_IRQHandler+0x10>)
 80031a2:	f009 fcbc 	bl	800cb1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20006b50 	.word	0x20006b50

080031b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <OTG_FS_IRQHandler+0x10>)
 80031b6:	f006 f94b 	bl	8009450 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20008a48 	.word	0x20008a48

080031c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	return 1;
 80031c8:	2301      	movs	r3, #1
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_kill>:

int _kill(int pid, int sig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031de:	f016 fad9 	bl	8019794 <__errno>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2216      	movs	r2, #22
 80031e6:	601a      	str	r2, [r3, #0]
	return -1;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_exit>:

void _exit (int status)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ffe7 	bl	80031d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003206:	e7fe      	b.n	8003206 <_exit+0x12>

08003208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e00a      	b.n	8003230 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800321a:	f3af 8000 	nop.w
 800321e:	4601      	mov	r1, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	60ba      	str	r2, [r7, #8]
 8003226:	b2ca      	uxtb	r2, r1
 8003228:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	dbf0      	blt.n	800321a <_read+0x12>
	}

return len;
 8003238:	687b      	ldr	r3, [r7, #4]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e009      	b.n	8003268 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbf1      	blt.n	8003254 <_write+0x12>
	}
	return len;
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_close>:

int _close(int file)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
	return -1;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032a2:	605a      	str	r2, [r3, #4]
	return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_isatty>:

int _isatty(int file)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	return 1;
 80032ba:	2301      	movs	r3, #1
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
	return 0;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <_sbrk+0x5c>)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <_sbrk+0x60>)
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <_sbrk+0x64>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <_sbrk+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d207      	bcs.n	8003324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003314:	f016 fa3e 	bl	8019794 <__errno>
 8003318:	4603      	mov	r3, r0
 800331a:	220c      	movs	r2, #12
 800331c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e009      	b.n	8003338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <_sbrk+0x64>)
 8003334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20030000 	.word	0x20030000
 8003344:	00000400 	.word	0x00000400
 8003348:	20000438 	.word	0x20000438
 800334c:	20008e60 	.word	0x20008e60

08003350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <SystemInit+0x28>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <SystemInit+0x28>)
 800335c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SystemInit+0x28>)
 8003366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800336a:	609a      	str	r2, [r3, #8]
#endif
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003382:	e003      	b.n	800338c <LoopCopyDataInit>

08003384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800338a:	3104      	adds	r1, #4

0800338c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800338c:	480b      	ldr	r0, [pc, #44]	; (80033bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003394:	d3f6      	bcc.n	8003384 <CopyDataInit>
  ldr  r2, =_sbss
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003398:	e002      	b.n	80033a0 <LoopFillZerobss>

0800339a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800339a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800339c:	f842 3b04 	str.w	r3, [r2], #4

080033a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033a4:	d3f9      	bcc.n	800339a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033a6:	f7ff ffd3 	bl	8003350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033aa:	f016 faef 	bl	801998c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ae:	f7fe f943 	bl	8001638 <main>
  bx  lr    
 80033b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033b8:	08020ebc 	.word	0x08020ebc
  ldr  r0, =_sdata
 80033bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033c0:	200003d4 	.word	0x200003d4
  ldr  r2, =_sbss
 80033c4:	200003d4 	.word	0x200003d4
  ldr  r3, = _ebss
 80033c8:	20008e60 	.word	0x20008e60

080033cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC_IRQHandler>
	...

080033d0 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80033dc:	2364      	movs	r3, #100	; 0x64
 80033de:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80033e8:	e073      	b.n	80034d2 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <GPS_Poll+0x118>)
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	2364      	movs	r3, #100	; 0x64
 80033f0:	2201      	movs	r2, #1
 80033f2:	493e      	ldr	r1, [pc, #248]	; (80034ec <GPS_Poll+0x11c>)
 80033f4:	f00a f945 	bl	800d682 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <GPS_Poll+0x11c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b0a      	cmp	r3, #10
 80033fe:	d00f      	beq.n	8003420 <GPS_Poll+0x50>
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <GPS_Poll+0x120>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b63      	cmp	r3, #99	; 0x63
 8003406:	d80b      	bhi.n	8003420 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <GPS_Poll+0x120>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	b2d1      	uxtb	r1, r2
 8003410:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <GPS_Poll+0x120>)
 8003412:	7011      	strb	r1, [r2, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b35      	ldr	r3, [pc, #212]	; (80034ec <GPS_Poll+0x11c>)
 8003418:	7819      	ldrb	r1, [r3, #0]
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <GPS_Poll+0x124>)
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	e021      	b.n	8003464 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003420:	4834      	ldr	r0, [pc, #208]	; (80034f4 <GPS_Poll+0x124>)
 8003422:	f000 f86b 	bl	80034fc <GPS_validate>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 800342c:	4831      	ldr	r0, [pc, #196]	; (80034f4 <GPS_Poll+0x124>)
 800342e:	f000 f8c7 	bl	80035c0 <GPS_parse>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <GPS_Poll+0x128>)
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <GPS_Poll+0x128>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <GPS_Poll+0x128>)
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
					done = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <GPS_Poll+0x120>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800345a:	2264      	movs	r2, #100	; 0x64
 800345c:	2100      	movs	r1, #0
 800345e:	4825      	ldr	r0, [pc, #148]	; (80034f4 <GPS_Poll+0x124>)
 8003460:	f016 faec 	bl	8019a3c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <GPS_Poll+0x118>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <GPS_Poll+0x118>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <GPS_Poll+0x118>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <GPS_Poll+0x118>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <GPS_Poll+0x118>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <GPS_Poll+0x118>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <GPS_Poll+0x118>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <GPS_Poll+0x118>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80034cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ce:	3301      	adds	r3, #1
 80034d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80034d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d202      	bcs.n	80034e0 <GPS_Poll+0x110>
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d084      	beq.n	80033ea <GPS_Poll+0x1a>
	}
}
 80034e0:	bf00      	nop
 80034e2:	3730      	adds	r7, #48	; 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20005f4c 	.word	0x20005f4c
 80034ec:	2000043c 	.word	0x2000043c
 80034f0:	2000043d 	.word	0x2000043d
 80034f4:	20006bf0 	.word	0x20006bf0
 80034f8:	20006b98 	.word	0x20006b98

080034fc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b24      	cmp	r3, #36	; 0x24
 8003516:	d103      	bne.n	8003520 <GPS_validate+0x24>
        i++;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3301      	adds	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800351e:	e00c      	b.n	800353a <GPS_validate+0x3e>
        return 0;
 8003520:	2300      	movs	r3, #0
 8003522:	e047      	b.n	80035b4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4053      	eors	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        i++;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3301      	adds	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <GPS_validate+0x5c>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d002      	beq.n	8003558 <GPS_validate+0x5c>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b4a      	cmp	r3, #74	; 0x4a
 8003556:	dde5      	ble.n	8003524 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b4a      	cmp	r3, #74	; 0x4a
 800355c:	dd01      	ble.n	8003562 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800355e:	2300      	movs	r3, #0
 8003560:	e028      	b.n	80035b4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b2a      	cmp	r3, #42	; 0x2a
 800356c:	d119      	bne.n	80035a2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3302      	adds	r3, #2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	490a      	ldr	r1, [pc, #40]	; (80035bc <GPS_validate+0xc0>)
 8003592:	4618      	mov	r0, r3
 8003594:	f017 fad0 	bl	801ab38 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003598:	7a3a      	ldrb	r2, [r7, #8]
 800359a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800359c:	429a      	cmp	r2, r3
 800359e:	d108      	bne.n	80035b2 <GPS_validate+0xb6>
 80035a0:	e001      	b.n	80035a6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80035a2:	2300      	movs	r3, #0
 80035a4:	e006      	b.n	80035b4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80035a6:	7a7a      	ldrb	r2, [r7, #9]
 80035a8:	7b7b      	ldrb	r3, [r7, #13]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d101      	bne.n	80035b2 <GPS_validate+0xb6>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <GPS_validate+0xb8>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	0801ecd0 	.word	0x0801ecd0

080035c0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af08      	add	r7, sp, #32
 80035c6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80035c8:	2206      	movs	r2, #6
 80035ca:	496d      	ldr	r1, [pc, #436]	; (8003780 <GPS_parse+0x1c0>)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f017 fb4c 	bl	801ac6a <strncmp>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d139      	bne.n	800364c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <GPS_parse+0x1c4>)
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <GPS_parse+0x1c8>)
 80035de:	9306      	str	r3, [sp, #24]
 80035e0:	4b6a      	ldr	r3, [pc, #424]	; (800378c <GPS_parse+0x1cc>)
 80035e2:	9305      	str	r3, [sp, #20]
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <GPS_parse+0x1d0>)
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <GPS_parse+0x1d4>)
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <GPS_parse+0x1d8>)
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <GPS_parse+0x1dc>)
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <GPS_parse+0x1e0>)
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <GPS_parse+0x1e4>)
 80035fa:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <GPS_parse+0x1e8>)
 80035fc:	496b      	ldr	r1, [pc, #428]	; (80037ac <GPS_parse+0x1ec>)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f017 faba 	bl	801ab78 <siscanf>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	f340 80b5 	ble.w	8003776 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <GPS_parse+0x1f0>)
 800360e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003612:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <GPS_parse+0x1f0>)
 8003614:	7e1b      	ldrb	r3, [r3, #24]
 8003616:	4618      	mov	r0, r3
 8003618:	eeb0 0a67 	vmov.f32	s0, s15
 800361c:	f000 f8ec 	bl	80037f8 <GPS_nmea_to_dec>
 8003620:	eef0 7a40 	vmov.f32	s15, s0
 8003624:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <GPS_parse+0x1f0>)
 8003626:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800362a:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <GPS_parse+0x1f0>)
 800362c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003630:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <GPS_parse+0x1f0>)
 8003632:	7e5b      	ldrb	r3, [r3, #25]
 8003634:	4618      	mov	r0, r3
 8003636:	eeb0 0a67 	vmov.f32	s0, s15
 800363a:	f000 f8dd 	bl	80037f8 <GPS_nmea_to_dec>
 800363e:	eef0 7a40 	vmov.f32	s15, s0
 8003642:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <GPS_parse+0x1f0>)
 8003644:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003648:	2301      	movs	r3, #1
 800364a:	e095      	b.n	8003778 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800364c:	2206      	movs	r2, #6
 800364e:	4959      	ldr	r1, [pc, #356]	; (80037b4 <GPS_parse+0x1f4>)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f017 fb0a 	bl	801ac6a <strncmp>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d134      	bne.n	80036c6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800365c:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <GPS_parse+0x1f8>)
 800365e:	9305      	str	r3, [sp, #20]
 8003660:	4b56      	ldr	r3, [pc, #344]	; (80037bc <GPS_parse+0x1fc>)
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <GPS_parse+0x200>)
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <GPS_parse+0x1d8>)
 800366a:	9302      	str	r3, [sp, #8]
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <GPS_parse+0x1dc>)
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <GPS_parse+0x1e0>)
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <GPS_parse+0x1e4>)
 8003676:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <GPS_parse+0x1e8>)
 8003678:	4952      	ldr	r1, [pc, #328]	; (80037c4 <GPS_parse+0x204>)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f017 fa7c 	bl	801ab78 <siscanf>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	dd77      	ble.n	8003776 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <GPS_parse+0x1f0>)
 8003688:	edd3 7a04 	vldr	s15, [r3, #16]
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <GPS_parse+0x1f0>)
 800368e:	7e1b      	ldrb	r3, [r3, #24]
 8003690:	4618      	mov	r0, r3
 8003692:	eeb0 0a67 	vmov.f32	s0, s15
 8003696:	f000 f8af 	bl	80037f8 <GPS_nmea_to_dec>
 800369a:	eef0 7a40 	vmov.f32	s15, s0
 800369e:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <GPS_parse+0x1f0>)
 80036a0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80036a4:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <GPS_parse+0x1f0>)
 80036a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <GPS_parse+0x1f0>)
 80036ac:	7e5b      	ldrb	r3, [r3, #25]
 80036ae:	4618      	mov	r0, r3
 80036b0:	eeb0 0a67 	vmov.f32	s0, s15
 80036b4:	f000 f8a0 	bl	80037f8 <GPS_nmea_to_dec>
 80036b8:	eef0 7a40 	vmov.f32	s15, s0
 80036bc:	4b3c      	ldr	r3, [pc, #240]	; (80037b0 <GPS_parse+0x1f0>)
 80036be:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e058      	b.n	8003778 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80036c6:	2206      	movs	r2, #6
 80036c8:	493f      	ldr	r1, [pc, #252]	; (80037c8 <GPS_parse+0x208>)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f017 facd 	bl	801ac6a <strncmp>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d130      	bne.n	8003738 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <GPS_parse+0x20c>)
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <GPS_parse+0x1e8>)
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <GPS_parse+0x1d8>)
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <GPS_parse+0x1dc>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <GPS_parse+0x1e0>)
 80036e8:	4a2e      	ldr	r2, [pc, #184]	; (80037a4 <GPS_parse+0x1e4>)
 80036ea:	4939      	ldr	r1, [pc, #228]	; (80037d0 <GPS_parse+0x210>)
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f017 fa43 	bl	801ab78 <siscanf>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dd3e      	ble.n	8003776 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <GPS_parse+0x1f0>)
 80036fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <GPS_parse+0x1f0>)
 8003700:	7e1b      	ldrb	r3, [r3, #24]
 8003702:	4618      	mov	r0, r3
 8003704:	eeb0 0a67 	vmov.f32	s0, s15
 8003708:	f000 f876 	bl	80037f8 <GPS_nmea_to_dec>
 800370c:	eef0 7a40 	vmov.f32	s15, s0
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <GPS_parse+0x1f0>)
 8003712:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003716:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <GPS_parse+0x1f0>)
 8003718:	edd3 7a03 	vldr	s15, [r3, #12]
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <GPS_parse+0x1f0>)
 800371e:	7e5b      	ldrb	r3, [r3, #25]
 8003720:	4618      	mov	r0, r3
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	f000 f867 	bl	80037f8 <GPS_nmea_to_dec>
 800372a:	eef0 7a40 	vmov.f32	s15, s0
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <GPS_parse+0x1f0>)
 8003730:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003734:	2301      	movs	r3, #1
 8003736:	e01f      	b.n	8003778 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003738:	2206      	movs	r2, #6
 800373a:	4926      	ldr	r1, [pc, #152]	; (80037d4 <GPS_parse+0x214>)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f017 fa94 	bl	801ac6a <strncmp>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <GPS_parse+0x218>)
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <GPS_parse+0x21c>)
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <GPS_parse+0x220>)
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <GPS_parse+0x200>)
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <GPS_parse+0x224>)
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <GPS_parse+0x228>)
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <GPS_parse+0x22c>)
 8003762:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <GPS_parse+0x230>)
 8003764:	4923      	ldr	r1, [pc, #140]	; (80037f4 <GPS_parse+0x234>)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f017 fa06 	bl	801ab78 <siscanf>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	dd01      	ble.n	8003776 <GPS_parse+0x1b6>
            return 0;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <GPS_parse+0x1b8>
    }
    return 0;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	0801ecd8 	.word	0x0801ecd8
 8003784:	20006bc4 	.word	0x20006bc4
 8003788:	20006bc0 	.word	0x20006bc0
 800378c:	20006bbc 	.word	0x20006bbc
 8003790:	20006bb8 	.word	0x20006bb8
 8003794:	20006bb4 	.word	0x20006bb4
 8003798:	20006bb1 	.word	0x20006bb1
 800379c:	20006ba4 	.word	0x20006ba4
 80037a0:	20006bb0 	.word	0x20006bb0
 80037a4:	20006ba8 	.word	0x20006ba8
 80037a8:	20006bac 	.word	0x20006bac
 80037ac:	0801ece0 	.word	0x0801ece0
 80037b0:	20006b98 	.word	0x20006b98
 80037b4:	0801ed08 	.word	0x0801ed08
 80037b8:	20006bd0 	.word	0x20006bd0
 80037bc:	20006bcc 	.word	0x20006bcc
 80037c0:	20006bc8 	.word	0x20006bc8
 80037c4:	0801ed10 	.word	0x0801ed10
 80037c8:	0801ed30 	.word	0x0801ed30
 80037cc:	20006bd4 	.word	0x20006bd4
 80037d0:	0801ed38 	.word	0x0801ed38
 80037d4:	0801ed54 	.word	0x0801ed54
 80037d8:	20006bec 	.word	0x20006bec
 80037dc:	20006be8 	.word	0x20006be8
 80037e0:	20006be5 	.word	0x20006be5
 80037e4:	20006be4 	.word	0x20006be4
 80037e8:	20006be0 	.word	0x20006be0
 80037ec:	20006bdc 	.word	0x20006bdc
 80037f0:	20006bd8 	.word	0x20006bd8
 80037f4:	0801ed5c 	.word	0x0801ed5c

080037f8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003802:	4603      	mov	r3, r0
 8003804:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003806:	ed97 7a01 	vldr	s14, [r7, #4]
 800380a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800388c <GPS_nmea_to_dec+0x94>
 800380e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003816:	ee17 3a90 	vmov	r3, s15
 800381a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2264      	movs	r2, #100	; 0x64
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003834:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003838:	ed97 7a03 	vldr	s14, [r7, #12]
 800383c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003890 <GPS_nmea_to_dec+0x98>
 8003840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003844:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003852:	ed97 7a02 	vldr	s14, [r7, #8]
 8003856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	2b53      	cmp	r3, #83	; 0x53
 8003862:	d002      	beq.n	800386a <GPS_nmea_to_dec+0x72>
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b57      	cmp	r3, #87	; 0x57
 8003868:	d105      	bne.n	8003876 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800386a:	edd7 7a05 	vldr	s15, [r7, #20]
 800386e:	eef1 7a67 	vneg.f32	s15, s15
 8003872:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	ee07 3a90 	vmov	s15, r3
}
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	42c80000 	.word	0x42c80000
 8003890:	42700000 	.word	0x42700000

08003894 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <GPS_init+0x30>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80038a4:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <GPS_init+0x34>)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <GPS_init+0x34>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	2210      	movs	r2, #16
 80038b4:	4905      	ldr	r1, [pc, #20]	; (80038cc <GPS_init+0x38>)
 80038b6:	f009 fe52 	bl	800d55e <HAL_UART_Transmit>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20005f4c 	.word	0x20005f4c
 80038c8:	20006c54 	.word	0x20006c54
 80038cc:	0801ed7c 	.word	0x0801ed7c

080038d0 <__NVIC_SystemReset>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80038d4:	f3bf 8f4f 	dsb	sy
}
 80038d8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <__NVIC_SystemReset+0x24>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <__NVIC_SystemReset+0x24>)
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_SystemReset+0x28>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80038ea:	f3bf 8f4f 	dsb	sy
}
 80038ee:	bf00      	nop
    __NOP();
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <__NVIC_SystemReset+0x20>
 80038f4:	e000ed00 	.word	0xe000ed00
 80038f8:	05fa0004 	.word	0x05fa0004

080038fc <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e007      	b.n	800391a <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <MRT_externalFlashSetup+0x50>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b04      	cmp	r3, #4
 800391e:	ddf4      	ble.n	800390a <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003920:	f000 fc78 	bl	8004214 <W25qxx_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 8003930:	f7ff f86c 	bl	8002a0c <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 8003934:	f002 ff84 	bl	8006840 <MRT_WUProcedure>
	MRT_getFlags();
 8003938:	f000 f8a2 	bl	8003a80 <MRT_getFlags>
	MRT_resetInfo(uart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f98d 	bl	8003c5c <MRT_resetInfo>
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20006c58 	.word	0x20006c58

08003950 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 8003960:	f000 f804 	bl	800396c <MRT_resetFromStart>
	}

}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(1);
 8003970:	2001      	movs	r0, #1
 8003972:	f000 fda1 	bl	80044b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003976:	2305      	movs	r3, #5
 8003978:	2200      	movs	r2, #0
 800397a:	2101      	movs	r1, #1
 800397c:	4807      	ldr	r0, [pc, #28]	; (800399c <MRT_resetFromStart+0x30>)
 800397e:	f000 fee5 	bl	800474c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 8003982:	2002      	movs	r0, #2
 8003984:	f000 fd98 	bl	80044b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003988:	2303      	movs	r3, #3
 800398a:	2200      	movs	r2, #0
 800398c:	2102      	movs	r1, #2
 800398e:	4804      	ldr	r0, [pc, #16]	; (80039a0 <MRT_resetFromStart+0x34>)
 8003990:	f000 fedc 	bl	800474c <W25qxx_WriteSector>

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003994:	f001 fb76 	bl	8005084 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003998:	f7ff ff9a 	bl	80038d0 <__NVIC_SystemReset>
 800399c:	20006c58 	.word	0x20006c58
 80039a0:	20000448 	.word	0x20000448

080039a4 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e00c      	b.n	80039ca <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <MRT_updateExternalFlashBuffers+0x60>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	7819      	ldrb	r1, [r3, #0]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <MRT_updateExternalFlashBuffers+0x64>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	460a      	mov	r2, r1
 80039c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3301      	adds	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	ddef      	ble.n	80039b0 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 80039d0:	2300      	movs	r3, #0
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	e00c      	b.n	80039f0 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 80039d6:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <MRT_updateExternalFlashBuffers+0x68>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	7819      	ldrb	r1, [r3, #0]
 80039e0:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <MRT_updateExternalFlashBuffers+0x6c>)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	460a      	mov	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	ddef      	ble.n	80039d6 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000004 	.word	0x20000004
 8003a08:	20005fec 	.word	0x20005fec
 8003a0c:	20000018 	.word	0x20000018
 8003a10:	20006754 	.word	0x20006754

08003a14 <MRT_updateFlagsValues>:


void MRT_updateFlagsValues(void){
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e00b      	b.n	8003a38 <MRT_updateFlagsValues+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8003a20:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <MRT_updateFlagsValues+0x5c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a28:	4912      	ldr	r1, [pc, #72]	; (8003a74 <MRT_updateFlagsValues+0x60>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3301      	adds	r3, #1
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	ddf0      	ble.n	8003a20 <MRT_updateFlagsValues+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003a3e:	2300      	movs	r3, #0
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	e00b      	b.n	8003a5c <MRT_updateFlagsValues+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <MRT_updateFlagsValues+0x64>)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	490b      	ldr	r1, [pc, #44]	; (8003a7c <MRT_updateFlagsValues+0x68>)
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	440a      	add	r2, r1
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	ddf0      	ble.n	8003a44 <MRT_updateFlagsValues+0x30>
	}
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000004 	.word	0x20000004
 8003a74:	20005fec 	.word	0x20005fec
 8003a78:	20000018 	.word	0x20000018
 8003a7c:	20006754 	.word	0x20006754

08003a80 <MRT_getFlags>:


void MRT_getFlags(void){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a84:	2305      	movs	r3, #5
 8003a86:	2200      	movs	r2, #0
 8003a88:	2101      	movs	r1, #1
 8003a8a:	486a      	ldr	r0, [pc, #424]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003a8c:	f000 ff9c 	bl	80049c8 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003a90:	2303      	movs	r3, #3
 8003a92:	2200      	movs	r2, #0
 8003a94:	2102      	movs	r1, #2
 8003a96:	4868      	ldr	r0, [pc, #416]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003a98:	f000 ff96 	bl	80049c8 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8003a9c:	4b67      	ldr	r3, [pc, #412]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10e      	bne.n	8003ac2 <MRT_getFlags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8003aa4:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003aae:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	f000 fd01 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2101      	movs	r1, #1
 8003abc:	485d      	ldr	r0, [pc, #372]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003abe:	f000 fe45 	bl	800474c <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	MRT_updateFlagsValues();
 8003ac2:	f7ff ffa7 	bl	8003a14 <MRT_updateFlagsValues>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003ac6:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <MRT_getFlags+0x1c0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d013      	beq.n	8003af6 <MRT_getFlags+0x76>
 8003ace:	4b5c      	ldr	r3, [pc, #368]	; (8003c40 <MRT_getFlags+0x1c0>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d00f      	beq.n	8003af6 <MRT_getFlags+0x76>
		reset_flag = 0;
 8003ad6:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <MRT_getFlags+0x1c0>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003adc:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <MRT_getFlags+0x1c0>)
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003ae2:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f000 fce7 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003aea:	2305      	movs	r3, #5
 8003aec:	2200      	movs	r2, #0
 8003aee:	2101      	movs	r1, #1
 8003af0:	4850      	ldr	r0, [pc, #320]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003af2:	f000 fe2b 	bl	800474c <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <MRT_getFlags+0xae>
 8003afe:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d013      	beq.n	8003b2e <MRT_getFlags+0xae>
 8003b06:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d00f      	beq.n	8003b2e <MRT_getFlags+0xae>
		wu_flag = 0;
 8003b0e:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <MRT_getFlags+0x1bc>)
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b1a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f000 fccb 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b22:	2305      	movs	r3, #5
 8003b24:	2200      	movs	r2, #0
 8003b26:	2101      	movs	r1, #1
 8003b28:	4842      	ldr	r0, [pc, #264]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b2a:	f000 fe0f 	bl	800474c <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003b2e:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <MRT_getFlags+0x1c4>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <MRT_getFlags+0xde>
 8003b36:	4b43      	ldr	r3, [pc, #268]	; (8003c44 <MRT_getFlags+0x1c4>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d00f      	beq.n	8003b5e <MRT_getFlags+0xde>
		iwdg_flag = 0;
 8003b3e:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <MRT_getFlags+0x1c4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003b44:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <MRT_getFlags+0x1c4>)
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b4a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f000 fcb3 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b52:	2305      	movs	r3, #5
 8003b54:	2200      	movs	r2, #0
 8003b56:	2101      	movs	r1, #1
 8003b58:	4836      	ldr	r0, [pc, #216]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b5a:	f000 fdf7 	bl	800474c <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <MRT_getFlags+0x1c8>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d013      	beq.n	8003b8e <MRT_getFlags+0x10e>
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <MRT_getFlags+0x1c8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d00f      	beq.n	8003b8e <MRT_getFlags+0x10e>
		apogee_flag = 0;
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <MRT_getFlags+0x1c8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8003b74:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <MRT_getFlags+0x1c8>)
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b7a:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f000 fc9b 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b82:	2305      	movs	r3, #5
 8003b84:	2200      	movs	r2, #0
 8003b86:	2101      	movs	r1, #1
 8003b88:	482a      	ldr	r0, [pc, #168]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003b8a:	f000 fddf 	bl	800474c <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <MRT_getFlags+0x1cc>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d90f      	bls.n	8003bb6 <MRT_getFlags+0x136>
		ejection_state_flag = 0;
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <MRT_getFlags+0x1cc>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <MRT_getFlags+0x1cc>)
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003ba2:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f000 fc87 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003baa:	2305      	movs	r3, #5
 8003bac:	2200      	movs	r2, #0
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4820      	ldr	r0, [pc, #128]	; (8003c34 <MRT_getFlags+0x1b4>)
 8003bb2:	f000 fdcb 	bl	800474c <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <MRT_getFlags+0x1d0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b17      	cmp	r3, #23
 8003bbc:	d90f      	bls.n	8003bde <MRT_getFlags+0x15e>
		prev_hours = 0;
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <MRT_getFlags+0x1d0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003bc4:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <MRT_getFlags+0x1d0>)
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003bca:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f000 fc73 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4817      	ldr	r0, [pc, #92]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003bda:	f000 fdb7 	bl	800474c <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <MRT_getFlags+0x1d4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b3b      	cmp	r3, #59	; 0x3b
 8003be4:	d90f      	bls.n	8003c06 <MRT_getFlags+0x186>
		prev_min = 0;
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <MRT_getFlags+0x1d4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <MRT_getFlags+0x1d4>)
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003bf2:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	f000 fc5f 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2102      	movs	r1, #2
 8003c00:	480d      	ldr	r0, [pc, #52]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003c02:	f000 fda3 	bl	800474c <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <MRT_getFlags+0x1d8>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b3b      	cmp	r3, #59	; 0x3b
 8003c0c:	d90f      	bls.n	8003c2e <MRT_getFlags+0x1ae>
		prev_sec = 0;
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <MRT_getFlags+0x1d8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <MRT_getFlags+0x1d8>)
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003c1a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f000 fc4b 	bl	80044b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003c22:	2303      	movs	r3, #3
 8003c24:	2200      	movs	r2, #0
 8003c26:	2102      	movs	r1, #2
 8003c28:	4803      	ldr	r0, [pc, #12]	; (8003c38 <MRT_getFlags+0x1b8>)
 8003c2a:	f000 fd8f 	bl	800474c <W25qxx_WriteSector>
	}
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20005fec 	.word	0x20005fec
 8003c38:	20006754 	.word	0x20006754
 8003c3c:	200006b9 	.word	0x200006b9
 8003c40:	2000043e 	.word	0x2000043e
 8003c44:	2000043f 	.word	0x2000043f
 8003c48:	20000440 	.word	0x20000440
 8003c4c:	20000441 	.word	0x20000441
 8003c50:	20000442 	.word	0x20000442
 8003c54:	20000443 	.word	0x20000443
 8003c58:	20000444 	.word	0x20000444

08003c5c <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	b0a7      	sub	sp, #156	; 0x9c
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003c64:	4b7e      	ldr	r3, [pc, #504]	; (8003e60 <MRT_resetInfo+0x204>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	461d      	mov	r5, r3
 8003c6a:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <MRT_resetInfo+0x208>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461e      	mov	r6, r3
 8003c70:	4b7d      	ldr	r3, [pc, #500]	; (8003e68 <MRT_resetInfo+0x20c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b7d      	ldr	r3, [pc, #500]	; (8003e6c <MRT_resetInfo+0x210>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4b7c      	ldr	r3, [pc, #496]	; (8003e70 <MRT_resetInfo+0x214>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	461c      	mov	r4, r3
 8003c82:	4b7c      	ldr	r3, [pc, #496]	; (8003e74 <MRT_resetInfo+0x218>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f107 0020 	add.w	r0, r7, #32
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	9402      	str	r4, [sp, #8]
 8003c8e:	9101      	str	r1, [sp, #4]
 8003c90:	9200      	str	r2, [sp, #0]
 8003c92:	4633      	mov	r3, r6
 8003c94:	462a      	mov	r2, r5
 8003c96:	4978      	ldr	r1, [pc, #480]	; (8003e78 <MRT_resetInfo+0x21c>)
 8003c98:	f016 ff4e 	bl	801ab38 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003c9c:	f107 0320 	add.w	r3, r7, #32
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc faa5 	bl	80001f0 <strlen>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	f107 0120 	add.w	r1, r7, #32
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f009 fc53 	bl	800d55e <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <MRT_resetInfo+0x20c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d11e      	bne.n	8003cfe <MRT_resetInfo+0xa2>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	2213      	movs	r2, #19
 8003cc6:	496d      	ldr	r1, [pc, #436]	; (8003e7c <MRT_resetInfo+0x220>)
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f009 fc48 	bl	800d55e <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003cce:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <MRT_resetInfo+0x20c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003cd4:	4b64      	ldr	r3, [pc, #400]	; (8003e68 <MRT_resetInfo+0x20c>)
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <MRT_resetInfo+0x224>)
 8003cda:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f000 fbeb 	bl	80044b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4865      	ldr	r0, [pc, #404]	; (8003e80 <MRT_resetInfo+0x224>)
 8003cea:	f000 fd2f 	bl	800474c <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cf2:	f003 fa5d 	bl	80071b0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003cf6:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003cfa:	f002 fe5f 	bl	80069bc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003cfe:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <MRT_resetInfo+0x208>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d03a      	beq.n	8003d7c <MRT_resetInfo+0x120>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003d06:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <MRT_resetInfo+0x208>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	495c      	ldr	r1, [pc, #368]	; (8003e84 <MRT_resetInfo+0x228>)
 8003d12:	4618      	mov	r0, r3
 8003d14:	f016 ff10 	bl	801ab38 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fa67 	bl	80001f0 <strlen>
 8003d22:	4603      	mov	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	f107 010c 	add.w	r1, r7, #12
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f009 fc15 	bl	800d55e <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	2214      	movs	r2, #20
 8003d3a:	4953      	ldr	r1, [pc, #332]	; (8003e88 <MRT_resetInfo+0x22c>)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f009 fc0e 	bl	800d55e <HAL_UART_Transmit>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003d42:	2002      	movs	r0, #2
 8003d44:	f000 fbb8 	bl	80044b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003d48:	2303      	movs	r3, #3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	484f      	ldr	r0, [pc, #316]	; (8003e8c <MRT_resetInfo+0x230>)
 8003d50:	f000 fcfc 	bl	800474c <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d5a:	e00b      	b.n	8003d74 <MRT_resetInfo+0x118>
			  *flash_time[i] = 0x0;
 8003d5c:	4a4c      	ldr	r2, [pc, #304]	; (8003e90 <MRT_resetInfo+0x234>)
 8003d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	ddef      	ble.n	8003d5c <MRT_resetInfo+0x100>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003d7c:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <MRT_resetInfo+0x204>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <MRT_resetInfo+0x156>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	220e      	movs	r2, #14
 8003d8a:	4942      	ldr	r1, [pc, #264]	; (8003e94 <MRT_resetInfo+0x238>)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f009 fbe6 	bl	800d55e <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <MRT_resetInfo+0x204>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003d98:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <MRT_resetInfo+0x204>)
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <MRT_resetInfo+0x224>)
 8003d9e:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f000 fb89 	bl	80044b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003da6:	2305      	movs	r3, #5
 8003da8:	2200      	movs	r2, #0
 8003daa:	2101      	movs	r1, #1
 8003dac:	4834      	ldr	r0, [pc, #208]	; (8003e80 <MRT_resetInfo+0x224>)
 8003dae:	f000 fccd 	bl	800474c <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag==0){
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <MRT_resetInfo+0x23c>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <MRT_resetInfo+0x16e>
		  HAL_UART_Transmit(uart, "Pre-apogee\r\n", 12, HAL_MAX_DELAY);
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	4936      	ldr	r1, [pc, #216]	; (8003e9c <MRT_resetInfo+0x240>)
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f009 fbcb 	bl	800d55e <HAL_UART_Transmit>
 8003dc8:	e00a      	b.n	8003de0 <MRT_resetInfo+0x184>
	  }
	  else if(apogee_flag==1){
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <MRT_resetInfo+0x23c>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d106      	bne.n	8003de0 <MRT_resetInfo+0x184>
		  HAL_UART_Transmit(uart, "Post-apogee\r\n", 13, HAL_MAX_DELAY);
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	220d      	movs	r2, #13
 8003dd8:	4931      	ldr	r1, [pc, #196]	; (8003ea0 <MRT_resetInfo+0x244>)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f009 fbbf 	bl	800d55e <HAL_UART_Transmit>
	  }


	  //Check ejection state
	  if (ejection_state_flag==0){
 8003de0:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <MRT_resetInfo+0x248>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <MRT_resetInfo+0x19c>
		  HAL_UART_Transmit(uart, "Ejection State: Pad\r\n", 21, HAL_MAX_DELAY);
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	2215      	movs	r2, #21
 8003dee:	492e      	ldr	r1, [pc, #184]	; (8003ea8 <MRT_resetInfo+0x24c>)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f009 fbb4 	bl	800d55e <HAL_UART_Transmit>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
	  }
	  else if(ejection_state_flag==4){
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
	  }
}
 8003df6:	e02e      	b.n	8003e56 <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==1){
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <MRT_resetInfo+0x248>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <MRT_resetInfo+0x1b4>
		  HAL_UART_Transmit(uart, "Ejection State: Boost\r\n", 23, HAL_MAX_DELAY);
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	2217      	movs	r2, #23
 8003e06:	4929      	ldr	r1, [pc, #164]	; (8003eac <MRT_resetInfo+0x250>)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f009 fba8 	bl	800d55e <HAL_UART_Transmit>
}
 8003e0e:	e022      	b.n	8003e56 <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==2){
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <MRT_resetInfo+0x248>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d107      	bne.n	8003e28 <MRT_resetInfo+0x1cc>
		  HAL_UART_Transmit(uart, "Ejection State: Drogue descent\r\n", 32, HAL_MAX_DELAY);
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	4924      	ldr	r1, [pc, #144]	; (8003eb0 <MRT_resetInfo+0x254>)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f009 fb9c 	bl	800d55e <HAL_UART_Transmit>
}
 8003e26:	e016      	b.n	8003e56 <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==3){
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <MRT_resetInfo+0x248>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d107      	bne.n	8003e40 <MRT_resetInfo+0x1e4>
		  HAL_UART_Transmit(uart, "Ejection State: Main descent\r\n", 30, HAL_MAX_DELAY);
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295
 8003e34:	221e      	movs	r2, #30
 8003e36:	491f      	ldr	r1, [pc, #124]	; (8003eb4 <MRT_resetInfo+0x258>)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f009 fb90 	bl	800d55e <HAL_UART_Transmit>
}
 8003e3e:	e00a      	b.n	8003e56 <MRT_resetInfo+0x1fa>
	  else if(ejection_state_flag==4){
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <MRT_resetInfo+0x248>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d106      	bne.n	8003e56 <MRT_resetInfo+0x1fa>
		  HAL_UART_Transmit(uart, "Ejection State: Landed\r\n", 24, HAL_MAX_DELAY);
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	2218      	movs	r2, #24
 8003e4e:	491a      	ldr	r1, [pc, #104]	; (8003eb8 <MRT_resetInfo+0x25c>)
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f009 fb84 	bl	800d55e <HAL_UART_Transmit>
}
 8003e56:	bf00      	nop
 8003e58:	378c      	adds	r7, #140	; 0x8c
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000043e 	.word	0x2000043e
 8003e64:	200006b9 	.word	0x200006b9
 8003e68:	2000043f 	.word	0x2000043f
 8003e6c:	20000442 	.word	0x20000442
 8003e70:	20000443 	.word	0x20000443
 8003e74:	20000444 	.word	0x20000444
 8003e78:	0801edc0 	.word	0x0801edc0
 8003e7c:	0801ee00 	.word	0x0801ee00
 8003e80:	20005fec 	.word	0x20005fec
 8003e84:	0801ee14 	.word	0x0801ee14
 8003e88:	0801ee24 	.word	0x0801ee24
 8003e8c:	20000448 	.word	0x20000448
 8003e90:	20000018 	.word	0x20000018
 8003e94:	0801ee3c 	.word	0x0801ee3c
 8003e98:	20000440 	.word	0x20000440
 8003e9c:	0801ee4c 	.word	0x0801ee4c
 8003ea0:	0801ee5c 	.word	0x0801ee5c
 8003ea4:	20000441 	.word	0x20000441
 8003ea8:	0801ee6c 	.word	0x0801ee6c
 8003eac:	0801ee84 	.word	0x0801ee84
 8003eb0:	0801ee9c 	.word	0x0801ee9c
 8003eb4:	0801eec0 	.word	0x0801eec0
 8003eb8:	0801eee0 	.word	0x0801eee0

08003ebc <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003ec0:	f7ff fd70 	bl	80039a4 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f000 faf7 	bl	80044b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003eca:	2303      	movs	r3, #3
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <MRT_saveRTCTime+0x20>)
 8003ed2:	f000 fc3b 	bl	800474c <W25qxx_WriteSector>
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20006754 	.word	0x20006754

08003ee0 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f003 f9c9 	bl	8007280 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8003eee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f003 fac9 	bl	800748a <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f003 fb51 	bl	80075a0 <HAL_ADC_GetValue>
 8003efe:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f003 fa8f 	bl	8007424 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7fc fb0c 	bl	8000524 <__aeabi_ui2d>
 8003f0c:	a312      	add	r3, pc, #72	; (adr r3, 8003f58 <MRT_prop_poll_pressure_transducer+0x78>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f7fc fcab 	bl	800086c <__aeabi_ddiv>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7fc fe73 	bl	8000c08 <__aeabi_d2f>
 8003f22:	4603      	mov	r3, r0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fb1f 	bl	8000568 <__aeabi_f2d>
 8003f2a:	a30d      	add	r3, pc, #52	; (adr r3, 8003f60 <MRT_prop_poll_pressure_transducer+0x80>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f7fc fb72 	bl	8000618 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fc fe64 	bl	8000c08 <__aeabi_d2f>
 8003f40:	4603      	mov	r3, r0
 8003f42:	60bb      	str	r3, [r7, #8]

	return voltage;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	ee07 3a90 	vmov	s15, r3
}
 8003f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	f3af 8000 	nop.w
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	40affe00 	.word	0x40affe00
 8003f60:	66666666 	.word	0x66666666
 8003f64:	400a6666 	.word	0x400a6666

08003f68 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f76:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003ff8 <MRT_getAltitude+0x90>
 8003f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f7e:	ee16 0a90 	vmov	r0, s13
 8003f82:	f7fc faf1 	bl	8000568 <__aeabi_f2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003fe8 <MRT_getAltitude+0x80>
 8003f8e:	ec43 2b10 	vmov	d0, r2, r3
 8003f92:	f014 fc43 	bl	801881c <pow>
 8003f96:	ec51 0b10 	vmov	r0, r1, d0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <MRT_getAltitude+0x94>)
 8003fa0:	f7fc f982 	bl	80002a8 <__aeabi_dsub>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	a310      	add	r3, pc, #64	; (adr r3, 8003ff0 <MRT_getAltitude+0x88>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc fb31 	bl	8000618 <__aeabi_dmul>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <MRT_getAltitude+0x98>)
 8003fc4:	f7fc f972 	bl	80002ac <__adddf3>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7fc fe1a 	bl	8000c08 <__aeabi_d2f>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	ee07 3a90 	vmov	s15, r3
}
 8003fda:	eeb0 0a67 	vmov.f32	s0, s15
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	f3af 8000 	nop.w
 8003fe8:	b4202506 	.word	0xb4202506
 8003fec:	3fc85a8b 	.word	0x3fc85a8b
 8003ff0:	76276276 	.word	0x76276276
 8003ff4:	c0e481c2 	.word	0xc0e481c2
 8003ff8:	447d8000 	.word	0x447d8000
 8003ffc:	3ff00000 	.word	0x3ff00000
 8004000:	40590000 	.word	0x40590000

08004004 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af02      	add	r7, sp, #8
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800400e:	f107 020f 	add.w	r2, r7, #15
 8004012:	1df9      	adds	r1, r7, #7
 8004014:	2364      	movs	r3, #100	; 0x64
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2301      	movs	r3, #1
 800401a:	4804      	ldr	r0, [pc, #16]	; (800402c <W25qxx_Spi+0x28>)
 800401c:	f008 f994 	bl	800c348 <HAL_SPI_TransmitReceive>
	return ret;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20005f50 	.word	0x20005f50

08004030 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	2300      	movs	r3, #0
 8004044:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004046:	2200      	movs	r2, #0
 8004048:	2140      	movs	r1, #64	; 0x40
 800404a:	4813      	ldr	r0, [pc, #76]	; (8004098 <W25qxx_ReadID+0x68>)
 800404c:	f003 ffbc 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004050:	209f      	movs	r0, #159	; 0x9f
 8004052:	f7ff ffd7 	bl	8004004 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004056:	20a5      	movs	r0, #165	; 0xa5
 8004058:	f7ff ffd4 	bl	8004004 <W25qxx_Spi>
 800405c:	4603      	mov	r3, r0
 800405e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004060:	20a5      	movs	r0, #165	; 0xa5
 8004062:	f7ff ffcf 	bl	8004004 <W25qxx_Spi>
 8004066:	4603      	mov	r3, r0
 8004068:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800406a:	20a5      	movs	r0, #165	; 0xa5
 800406c:	f7ff ffca 	bl	8004004 <W25qxx_Spi>
 8004070:	4603      	mov	r3, r0
 8004072:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004074:	2201      	movs	r2, #1
 8004076:	2140      	movs	r1, #64	; 0x40
 8004078:	4807      	ldr	r0, [pc, #28]	; (8004098 <W25qxx_ReadID+0x68>)
 800407a:	f003 ffa5 	bl	8007fc8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	041a      	lsls	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	4313      	orrs	r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40020c00 	.word	0x40020c00

0800409c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040a2:	2200      	movs	r2, #0
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	4816      	ldr	r0, [pc, #88]	; (8004100 <W25qxx_ReadUniqID+0x64>)
 80040a8:	f003 ff8e 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80040ac:	204b      	movs	r0, #75	; 0x4b
 80040ae:	f7ff ffa9 	bl	8004004 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	71fb      	strb	r3, [r7, #7]
 80040b6:	e005      	b.n	80040c4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80040b8:	20a5      	movs	r0, #165	; 0xa5
 80040ba:	f7ff ffa3 	bl	8004004 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	3301      	adds	r3, #1
 80040c2:	71fb      	strb	r3, [r7, #7]
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d9f6      	bls.n	80040b8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	71bb      	strb	r3, [r7, #6]
 80040ce:	e00b      	b.n	80040e8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80040d0:	79bc      	ldrb	r4, [r7, #6]
 80040d2:	20a5      	movs	r0, #165	; 0xa5
 80040d4:	f7ff ff96 	bl	8004004 <W25qxx_Spi>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <W25qxx_ReadUniqID+0x68>)
 80040de:	4423      	add	r3, r4
 80040e0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80040e2:	79bb      	ldrb	r3, [r7, #6]
 80040e4:	3301      	adds	r3, #1
 80040e6:	71bb      	strb	r3, [r7, #6]
 80040e8:	79bb      	ldrb	r3, [r7, #6]
 80040ea:	2b07      	cmp	r3, #7
 80040ec:	d9f0      	bls.n	80040d0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80040ee:	2201      	movs	r2, #1
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	4803      	ldr	r0, [pc, #12]	; (8004100 <W25qxx_ReadUniqID+0x64>)
 80040f4:	f003 ff68 	bl	8007fc8 <HAL_GPIO_WritePin>
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}
 8004100:	40020c00 	.word	0x40020c00
 8004104:	20006c60 	.word	0x20006c60

08004108 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	2140      	movs	r1, #64	; 0x40
 8004110:	4807      	ldr	r0, [pc, #28]	; (8004130 <W25qxx_WriteEnable+0x28>)
 8004112:	f003 ff59 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004116:	2006      	movs	r0, #6
 8004118:	f7ff ff74 	bl	8004004 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800411c:	2201      	movs	r2, #1
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <W25qxx_WriteEnable+0x28>)
 8004122:	f003 ff51 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f010 fae7 	bl	80146fa <osDelay>
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40020c00 	.word	0x40020c00

08004134 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004142:	2200      	movs	r2, #0
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	481c      	ldr	r0, [pc, #112]	; (80041b8 <W25qxx_ReadStatusRegister+0x84>)
 8004148:	f003 ff3e 	bl	8007fc8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10c      	bne.n	800416c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004152:	2005      	movs	r0, #5
 8004154:	f7ff ff56 	bl	8004004 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004158:	20a5      	movs	r0, #165	; 0xa5
 800415a:	f7ff ff53 	bl	8004004 <W25qxx_Spi>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004162:	4a16      	ldr	r2, [pc, #88]	; (80041bc <W25qxx_ReadStatusRegister+0x88>)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800416a:	e01b      	b.n	80041a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d10c      	bne.n	800418c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004172:	2035      	movs	r0, #53	; 0x35
 8004174:	f7ff ff46 	bl	8004004 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004178:	20a5      	movs	r0, #165	; 0xa5
 800417a:	f7ff ff43 	bl	8004004 <W25qxx_Spi>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <W25qxx_ReadStatusRegister+0x88>)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800418a:	e00b      	b.n	80041a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800418c:	2015      	movs	r0, #21
 800418e:	f7ff ff39 	bl	8004004 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004192:	20a5      	movs	r0, #165	; 0xa5
 8004194:	f7ff ff36 	bl	8004004 <W25qxx_Spi>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800419c:	4a07      	ldr	r2, [pc, #28]	; (80041bc <W25qxx_ReadStatusRegister+0x88>)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041a4:	2201      	movs	r2, #1
 80041a6:	2140      	movs	r1, #64	; 0x40
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <W25qxx_ReadStatusRegister+0x84>)
 80041aa:	f003 ff0d 	bl	8007fc8 <HAL_GPIO_WritePin>
	return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	20006c60 	.word	0x20006c60

080041c0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80041c4:	2001      	movs	r0, #1
 80041c6:	f010 fa98 	bl	80146fa <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041ca:	2200      	movs	r2, #0
 80041cc:	2140      	movs	r1, #64	; 0x40
 80041ce:	480f      	ldr	r0, [pc, #60]	; (800420c <W25qxx_WaitForWriteEnd+0x4c>)
 80041d0:	f003 fefa 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80041d4:	2005      	movs	r0, #5
 80041d6:	f7ff ff15 	bl	8004004 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041da:	20a5      	movs	r0, #165	; 0xa5
 80041dc:	f7ff ff12 	bl	8004004 <W25qxx_Spi>
 80041e0:	4603      	mov	r3, r0
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <W25qxx_WaitForWriteEnd+0x50>)
 80041e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80041ea:	2001      	movs	r0, #1
 80041ec:	f010 fa85 	bl	80146fa <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <W25qxx_WaitForWriteEnd+0x50>)
 80041f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ed      	bne.n	80041da <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041fe:	2201      	movs	r2, #1
 8004200:	2140      	movs	r1, #64	; 0x40
 8004202:	4802      	ldr	r0, [pc, #8]	; (800420c <W25qxx_WaitForWriteEnd+0x4c>)
 8004204:	f003 fee0 	bl	8007fc8 <HAL_GPIO_WritePin>
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40020c00 	.word	0x40020c00
 8004210:	20006c60 	.word	0x20006c60

08004214 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800421a:	4b90      	ldr	r3, [pc, #576]	; (800445c <W25qxx_Init+0x248>)
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004222:	e002      	b.n	800422a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004224:	2001      	movs	r0, #1
 8004226:	f010 fa68 	bl	80146fa <osDelay>
	while (HAL_GetTick() < 100)
 800422a:	f002 ffb5 	bl	8007198 <HAL_GetTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2b63      	cmp	r3, #99	; 0x63
 8004232:	d9f7      	bls.n	8004224 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004234:	2201      	movs	r2, #1
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	4889      	ldr	r0, [pc, #548]	; (8004460 <W25qxx_Init+0x24c>)
 800423a:	f003 fec5 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800423e:	2064      	movs	r0, #100	; 0x64
 8004240:	f010 fa5b 	bl	80146fa <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004244:	4887      	ldr	r0, [pc, #540]	; (8004464 <W25qxx_Init+0x250>)
 8004246:	f016 fbab 	bl	801a9a0 <puts>
#endif
	id = W25qxx_ReadID();
 800424a:	f7ff fef1 	bl	8004030 <W25qxx_ReadID>
 800424e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4885      	ldr	r0, [pc, #532]	; (8004468 <W25qxx_Init+0x254>)
 8004254:	f016 fb1e 	bl	801a894 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3b11      	subs	r3, #17
 800425e:	2b0f      	cmp	r3, #15
 8004260:	f200 808b 	bhi.w	800437a <W25qxx_Init+0x166>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <W25qxx_Init+0x58>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004367 	.word	0x08004367
 8004270:	08004353 	.word	0x08004353
 8004274:	0800433f 	.word	0x0800433f
 8004278:	0800432b 	.word	0x0800432b
 800427c:	08004317 	.word	0x08004317
 8004280:	08004303 	.word	0x08004303
 8004284:	080042ef 	.word	0x080042ef
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042c3 	.word	0x080042c3
 8004290:	0800437b 	.word	0x0800437b
 8004294:	0800437b 	.word	0x0800437b
 8004298:	0800437b 	.word	0x0800437b
 800429c:	0800437b 	.word	0x0800437b
 80042a0:	0800437b 	.word	0x0800437b
 80042a4:	0800437b 	.word	0x0800437b
 80042a8:	080042ad 	.word	0x080042ad
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80042ac:	4b6b      	ldr	r3, [pc, #428]	; (800445c <W25qxx_Init+0x248>)
 80042ae:	220a      	movs	r2, #10
 80042b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80042b2:	4b6a      	ldr	r3, [pc, #424]	; (800445c <W25qxx_Init+0x248>)
 80042b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80042ba:	486c      	ldr	r0, [pc, #432]	; (800446c <W25qxx_Init+0x258>)
 80042bc:	f016 fb70 	bl	801a9a0 <puts>
#endif
		break;
 80042c0:	e064      	b.n	800438c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80042c2:	4b66      	ldr	r3, [pc, #408]	; (800445c <W25qxx_Init+0x248>)
 80042c4:	2209      	movs	r2, #9
 80042c6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80042c8:	4b64      	ldr	r3, [pc, #400]	; (800445c <W25qxx_Init+0x248>)
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80042d0:	4867      	ldr	r0, [pc, #412]	; (8004470 <W25qxx_Init+0x25c>)
 80042d2:	f016 fb65 	bl	801a9a0 <puts>
#endif
		break;
 80042d6:	e059      	b.n	800438c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80042d8:	4b60      	ldr	r3, [pc, #384]	; (800445c <W25qxx_Init+0x248>)
 80042da:	2208      	movs	r2, #8
 80042dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <W25qxx_Init+0x248>)
 80042e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80042e6:	4863      	ldr	r0, [pc, #396]	; (8004474 <W25qxx_Init+0x260>)
 80042e8:	f016 fb5a 	bl	801a9a0 <puts>
#endif
		break;
 80042ec:	e04e      	b.n	800438c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <W25qxx_Init+0x248>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80042f4:	4b59      	ldr	r3, [pc, #356]	; (800445c <W25qxx_Init+0x248>)
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80042fa:	485f      	ldr	r0, [pc, #380]	; (8004478 <W25qxx_Init+0x264>)
 80042fc:	f016 fb50 	bl	801a9a0 <puts>
#endif
		break;
 8004300:	e044      	b.n	800438c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004302:	4b56      	ldr	r3, [pc, #344]	; (800445c <W25qxx_Init+0x248>)
 8004304:	2206      	movs	r2, #6
 8004306:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004308:	4b54      	ldr	r3, [pc, #336]	; (800445c <W25qxx_Init+0x248>)
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800430e:	485b      	ldr	r0, [pc, #364]	; (800447c <W25qxx_Init+0x268>)
 8004310:	f016 fb46 	bl	801a9a0 <puts>
#endif
		break;
 8004314:	e03a      	b.n	800438c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <W25qxx_Init+0x248>)
 8004318:	2205      	movs	r2, #5
 800431a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <W25qxx_Init+0x248>)
 800431e:	2220      	movs	r2, #32
 8004320:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004322:	4857      	ldr	r0, [pc, #348]	; (8004480 <W25qxx_Init+0x26c>)
 8004324:	f016 fb3c 	bl	801a9a0 <puts>
#endif
		break;
 8004328:	e030      	b.n	800438c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800432a:	4b4c      	ldr	r3, [pc, #304]	; (800445c <W25qxx_Init+0x248>)
 800432c:	2204      	movs	r2, #4
 800432e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004330:	4b4a      	ldr	r3, [pc, #296]	; (800445c <W25qxx_Init+0x248>)
 8004332:	2210      	movs	r2, #16
 8004334:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004336:	4853      	ldr	r0, [pc, #332]	; (8004484 <W25qxx_Init+0x270>)
 8004338:	f016 fb32 	bl	801a9a0 <puts>
#endif
		break;
 800433c:	e026      	b.n	800438c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <W25qxx_Init+0x248>)
 8004340:	2203      	movs	r2, #3
 8004342:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004344:	4b45      	ldr	r3, [pc, #276]	; (800445c <W25qxx_Init+0x248>)
 8004346:	2208      	movs	r2, #8
 8004348:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800434a:	484f      	ldr	r0, [pc, #316]	; (8004488 <W25qxx_Init+0x274>)
 800434c:	f016 fb28 	bl	801a9a0 <puts>
#endif
		break;
 8004350:	e01c      	b.n	800438c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <W25qxx_Init+0x248>)
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004358:	4b40      	ldr	r3, [pc, #256]	; (800445c <W25qxx_Init+0x248>)
 800435a:	2204      	movs	r2, #4
 800435c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800435e:	484b      	ldr	r0, [pc, #300]	; (800448c <W25qxx_Init+0x278>)
 8004360:	f016 fb1e 	bl	801a9a0 <puts>
#endif
		break;
 8004364:	e012      	b.n	800438c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004366:	4b3d      	ldr	r3, [pc, #244]	; (800445c <W25qxx_Init+0x248>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <W25qxx_Init+0x248>)
 800436e:	2202      	movs	r2, #2
 8004370:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004372:	4847      	ldr	r0, [pc, #284]	; (8004490 <W25qxx_Init+0x27c>)
 8004374:	f016 fb14 	bl	801a9a0 <puts>
#endif
		break;
 8004378:	e008      	b.n	800438c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800437a:	4846      	ldr	r0, [pc, #280]	; (8004494 <W25qxx_Init+0x280>)
 800437c:	f016 fb10 	bl	801a9a0 <puts>
#endif
		w25qxx.Lock = 0;
 8004380:	4b36      	ldr	r3, [pc, #216]	; (800445c <W25qxx_Init+0x248>)
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004388:	2300      	movs	r3, #0
 800438a:	e063      	b.n	8004454 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <W25qxx_Init+0x248>)
 800438e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004392:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <W25qxx_Init+0x248>)
 8004396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800439a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <W25qxx_Init+0x248>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4a2e      	ldr	r2, [pc, #184]	; (800445c <W25qxx_Init+0x248>)
 80043a4:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80043a6:	4b2d      	ldr	r3, [pc, #180]	; (800445c <W25qxx_Init+0x248>)
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	; (800445c <W25qxx_Init+0x248>)
 80043ac:	6912      	ldr	r2, [r2, #16]
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	4a2a      	ldr	r2, [pc, #168]	; (800445c <W25qxx_Init+0x248>)
 80043b4:	8952      	ldrh	r2, [r2, #10]
 80043b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ba:	4a28      	ldr	r2, [pc, #160]	; (800445c <W25qxx_Init+0x248>)
 80043bc:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <W25qxx_Init+0x248>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <W25qxx_Init+0x248>)
 80043c6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <W25qxx_Init+0x248>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <W25qxx_Init+0x248>)
 80043ce:	6912      	ldr	r2, [r2, #16]
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	0a9b      	lsrs	r3, r3, #10
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <W25qxx_Init+0x248>)
 80043d8:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80043da:	f7ff fe5f 	bl	800409c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f7ff fea8 	bl	8004134 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80043e4:	2002      	movs	r0, #2
 80043e6:	f7ff fea5 	bl	8004134 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80043ea:	2003      	movs	r0, #3
 80043ec:	f7ff fea2 	bl	8004134 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <W25qxx_Init+0x248>)
 80043f2:	895b      	ldrh	r3, [r3, #10]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4828      	ldr	r0, [pc, #160]	; (8004498 <W25qxx_Init+0x284>)
 80043f8:	f016 fa4c 	bl	801a894 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <W25qxx_Init+0x248>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4619      	mov	r1, r3
 8004402:	4826      	ldr	r0, [pc, #152]	; (800449c <W25qxx_Init+0x288>)
 8004404:	f016 fa46 	bl	801a894 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <W25qxx_Init+0x248>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	4619      	mov	r1, r3
 800440e:	4824      	ldr	r0, [pc, #144]	; (80044a0 <W25qxx_Init+0x28c>)
 8004410:	f016 fa40 	bl	801a894 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <W25qxx_Init+0x248>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	4619      	mov	r1, r3
 800441a:	4822      	ldr	r0, [pc, #136]	; (80044a4 <W25qxx_Init+0x290>)
 800441c:	f016 fa3a 	bl	801a894 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <W25qxx_Init+0x248>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	4619      	mov	r1, r3
 8004426:	4820      	ldr	r0, [pc, #128]	; (80044a8 <W25qxx_Init+0x294>)
 8004428:	f016 fa34 	bl	801a894 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <W25qxx_Init+0x248>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4619      	mov	r1, r3
 8004432:	481e      	ldr	r0, [pc, #120]	; (80044ac <W25qxx_Init+0x298>)
 8004434:	f016 fa2e 	bl	801a894 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <W25qxx_Init+0x248>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	4619      	mov	r1, r3
 800443e:	481c      	ldr	r0, [pc, #112]	; (80044b0 <W25qxx_Init+0x29c>)
 8004440:	f016 fa28 	bl	801a894 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004444:	481b      	ldr	r0, [pc, #108]	; (80044b4 <W25qxx_Init+0x2a0>)
 8004446:	f016 faab 	bl	801a9a0 <puts>
#endif
	w25qxx.Lock = 0;
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <W25qxx_Init+0x248>)
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20006c60 	.word	0x20006c60
 8004460:	40020c00 	.word	0x40020c00
 8004464:	0801eefc 	.word	0x0801eefc
 8004468:	0801ef14 	.word	0x0801ef14
 800446c:	0801ef28 	.word	0x0801ef28
 8004470:	0801ef40 	.word	0x0801ef40
 8004474:	0801ef58 	.word	0x0801ef58
 8004478:	0801ef70 	.word	0x0801ef70
 800447c:	0801ef88 	.word	0x0801ef88
 8004480:	0801efa0 	.word	0x0801efa0
 8004484:	0801efb8 	.word	0x0801efb8
 8004488:	0801efd0 	.word	0x0801efd0
 800448c:	0801efe8 	.word	0x0801efe8
 8004490:	0801f000 	.word	0x0801f000
 8004494:	0801f018 	.word	0x0801f018
 8004498:	0801f02c 	.word	0x0801f02c
 800449c:	0801f04c 	.word	0x0801f04c
 80044a0:	0801f064 	.word	0x0801f064
 80044a4:	0801f084 	.word	0x0801f084
 80044a8:	0801f0a0 	.word	0x0801f0a0
 80044ac:	0801f0c0 	.word	0x0801f0c0
 80044b0:	0801f0dc 	.word	0x0801f0dc
 80044b4:	0801f0fc 	.word	0x0801f0fc

080044b8 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80044c0:	e002      	b.n	80044c8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f010 f919 	bl	80146fa <osDelay>
	while (w25qxx.Lock == 1)
 80044c8:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <W25qxx_EraseSector+0xc8>)
 80044ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d0f7      	beq.n	80044c2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <W25qxx_EraseSector+0xc8>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80044da:	f002 fe5d 	bl	8007198 <HAL_GetTick>
 80044de:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4828      	ldr	r0, [pc, #160]	; (8004584 <W25qxx_EraseSector+0xcc>)
 80044e4:	f016 f9d6 	bl	801a894 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80044e8:	f7ff fe6a 	bl	80041c0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <W25qxx_EraseSector+0xc8>)
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80044f8:	f7ff fe06 	bl	8004108 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	4821      	ldr	r0, [pc, #132]	; (8004588 <W25qxx_EraseSector+0xd0>)
 8004502:	f003 fd61 	bl	8007fc8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <W25qxx_EraseSector+0xc8>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b08      	cmp	r3, #8
 800450c:	d909      	bls.n	8004522 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800450e:	2021      	movs	r0, #33	; 0x21
 8004510:	f7ff fd78 	bl	8004004 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0e1b      	lsrs	r3, r3, #24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fd72 	bl	8004004 <W25qxx_Spi>
 8004520:	e002      	b.n	8004528 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004522:	2020      	movs	r0, #32
 8004524:	f7ff fd6e 	bl	8004004 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fd68 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fd62 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fd5d 	bl	8004004 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800454a:	2201      	movs	r2, #1
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <W25qxx_EraseSector+0xd0>)
 8004550:	f003 fd3a 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004554:	f7ff fe34 	bl	80041c0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004558:	f002 fe1e 	bl	8007198 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	4619      	mov	r1, r3
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <W25qxx_EraseSector+0xd4>)
 8004566:	f016 f995 	bl	801a894 <iprintf>
#endif
	W25qxx_Delay(1);
 800456a:	2001      	movs	r0, #1
 800456c:	f010 f8c5 	bl	80146fa <osDelay>
	w25qxx.Lock = 0;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <W25qxx_EraseSector+0xc8>)
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20006c60 	.word	0x20006c60
 8004584:	0801f154 	.word	0x0801f154
 8004588:	40020c00 	.word	0x40020c00
 800458c:	0801f178 	.word	0x0801f178

08004590 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <W25qxx_SectorToPage+0x28>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <W25qxx_SectorToPage+0x28>)
 80045a4:	8952      	ldrh	r2, [r2, #10]
 80045a6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20006c60 	.word	0x20006c60

080045bc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80045ca:	e002      	b.n	80045d2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80045cc:	2001      	movs	r0, #1
 80045ce:	f010 f894 	bl	80146fa <osDelay>
	while (w25qxx.Lock == 1)
 80045d2:	4b57      	ldr	r3, [pc, #348]	; (8004730 <W25qxx_WritePage+0x174>)
 80045d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d0f7      	beq.n	80045cc <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80045dc:	4b54      	ldr	r3, [pc, #336]	; (8004730 <W25qxx_WritePage+0x174>)
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	4a51      	ldr	r2, [pc, #324]	; (8004730 <W25qxx_WritePage+0x174>)
 80045ec:	8952      	ldrh	r2, [r2, #10]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d802      	bhi.n	80045f8 <W25qxx_WritePage+0x3c>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045f8:	4b4d      	ldr	r3, [pc, #308]	; (8004730 <W25qxx_WritePage+0x174>)
 80045fa:	895b      	ldrh	r3, [r3, #10]
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4413      	add	r3, r2
 800460a:	4a49      	ldr	r2, [pc, #292]	; (8004730 <W25qxx_WritePage+0x174>)
 800460c:	8952      	ldrh	r2, [r2, #10]
 800460e:	4293      	cmp	r3, r2
 8004610:	d905      	bls.n	800461e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004612:	4b47      	ldr	r3, [pc, #284]	; (8004730 <W25qxx_WritePage+0x174>)
 8004614:	895b      	ldrh	r3, [r3, #10]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4843      	ldr	r0, [pc, #268]	; (8004734 <W25qxx_WritePage+0x178>)
 8004626:	f016 f935 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 800462a:	2064      	movs	r0, #100	; 0x64
 800462c:	f010 f865 	bl	80146fa <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004630:	f002 fdb2 	bl	8007198 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004636:	f7ff fdc3 	bl	80041c0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800463a:	f7ff fd65 	bl	8004108 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800463e:	2200      	movs	r2, #0
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	483d      	ldr	r0, [pc, #244]	; (8004738 <W25qxx_WritePage+0x17c>)
 8004644:	f003 fcc0 	bl	8007fc8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <W25qxx_WritePage+0x174>)
 800464a:	895b      	ldrh	r3, [r3, #10]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	fb03 f302 	mul.w	r3, r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <W25qxx_WritePage+0x174>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b08      	cmp	r3, #8
 8004660:	d909      	bls.n	8004676 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004662:	2012      	movs	r0, #18
 8004664:	f7ff fcce 	bl	8004004 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	0e1b      	lsrs	r3, r3, #24
 800466c:	b2db      	uxtb	r3, r3
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fcc8 	bl	8004004 <W25qxx_Spi>
 8004674:	e002      	b.n	800467c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004676:	2002      	movs	r0, #2
 8004678:	f7ff fcc4 	bl	8004004 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fcbe 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fcb8 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fcb3 	bl	8004004 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	2364      	movs	r3, #100	; 0x64
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	4825      	ldr	r0, [pc, #148]	; (800473c <W25qxx_WritePage+0x180>)
 80046a8:	f007 fc01 	bl	800beae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046ac:	2201      	movs	r2, #1
 80046ae:	2140      	movs	r1, #64	; 0x40
 80046b0:	4821      	ldr	r0, [pc, #132]	; (8004738 <W25qxx_WritePage+0x17c>)
 80046b2:	f003 fc89 	bl	8007fc8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80046b6:	f7ff fd83 	bl	80041c0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80046ba:	f002 fd6d 	bl	8007198 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e018      	b.n	80046fe <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <W25qxx_WritePage+0x12c>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d905      	bls.n	80046e8 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80046dc:	4818      	ldr	r0, [pc, #96]	; (8004740 <W25qxx_WritePage+0x184>)
 80046de:	f016 f95f 	bl	801a9a0 <puts>
			W25qxx_Delay(10);
 80046e2:	200a      	movs	r0, #10
 80046e4:	f010 f809 	bl	80146fa <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4814      	ldr	r0, [pc, #80]	; (8004744 <W25qxx_WritePage+0x188>)
 80046f4:	f016 f8ce 	bl	801a894 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3301      	adds	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3e2      	bcc.n	80046cc <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004706:	480e      	ldr	r0, [pc, #56]	; (8004740 <W25qxx_WritePage+0x184>)
 8004708:	f016 f94a 	bl	801a9a0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800470c:	6939      	ldr	r1, [r7, #16]
 800470e:	480e      	ldr	r0, [pc, #56]	; (8004748 <W25qxx_WritePage+0x18c>)
 8004710:	f016 f8c0 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 8004714:	2064      	movs	r0, #100	; 0x64
 8004716:	f00f fff0 	bl	80146fa <osDelay>
#endif
	W25qxx_Delay(1);
 800471a:	2001      	movs	r0, #1
 800471c:	f00f ffed 	bl	80146fa <osDelay>
	w25qxx.Lock = 0;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <W25qxx_WritePage+0x174>)
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20006c60 	.word	0x20006c60
 8004734:	0801f3dc 	.word	0x0801f3dc
 8004738:	40020c00 	.word	0x40020c00
 800473c:	20005f50 	.word	0x20005f50
 8004740:	0801f418 	.word	0x0801f418
 8004744:	0801f41c 	.word	0x0801f41c
 8004748:	0801f424 	.word	0x0801f424

0800474c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <W25qxx_WriteSector+0xe8>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d802      	bhi.n	800476a <W25qxx_WriteSector+0x1e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800476a:	4b32      	ldr	r3, [pc, #200]	; (8004834 <W25qxx_WriteSector+0xe8>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	4830      	ldr	r0, [pc, #192]	; (8004838 <W25qxx_WriteSector+0xec>)
 8004778:	f016 f88c 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 800477c:	2064      	movs	r0, #100	; 0x64
 800477e:	f00f ffbc 	bl	80146fa <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <W25qxx_WriteSector+0xe8>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d306      	bcc.n	800479a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800478c:	482b      	ldr	r0, [pc, #172]	; (800483c <W25qxx_WriteSector+0xf0>)
 800478e:	f016 f907 	bl	801a9a0 <puts>
		W25qxx_Delay(100);
 8004792:	2064      	movs	r0, #100	; 0x64
 8004794:	f00f ffb1 	bl	80146fa <osDelay>
#endif
		return;
 8004798:	e048      	b.n	800482c <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	441a      	add	r2, r3
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <W25qxx_WriteSector+0xe8>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d905      	bls.n	80047b4 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <W25qxx_WriteSector+0xe8>)
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e001      	b.n	80047b8 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80047b8:	68b8      	ldr	r0, [r7, #8]
 80047ba:	f7ff fee9 	bl	8004590 <W25qxx_SectorToPage>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <W25qxx_WriteSector+0xe8>)
 80047c2:	895b      	ldrh	r3, [r3, #10]
 80047c4:	4619      	mov	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80047cc:	4413      	add	r3, r2
 80047ce:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <W25qxx_WriteSector+0xe8>)
 80047d2:	895b      	ldrh	r3, [r3, #10]
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80047dc:	fb02 f201 	mul.w	r2, r2, r1
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	69f9      	ldr	r1, [r7, #28]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fee6 	bl	80045bc <W25qxx_WritePage>
		StartPage++;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3301      	adds	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <W25qxx_WriteSector+0xe8>)
 80047f8:	895b      	ldrh	r3, [r3, #10]
 80047fa:	461a      	mov	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1a9a      	subs	r2, r3, r2
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	4413      	add	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <W25qxx_WriteSector+0xe8>)
 8004808:	895b      	ldrh	r3, [r3, #10]
 800480a:	461a      	mov	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	dce1      	bgt.n	80047e4 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004820:	4807      	ldr	r0, [pc, #28]	; (8004840 <W25qxx_WriteSector+0xf4>)
 8004822:	f016 f8bd 	bl	801a9a0 <puts>
	W25qxx_Delay(100);
 8004826:	2064      	movs	r0, #100	; 0x64
 8004828:	f00f ff67 	bl	80146fa <osDelay>
#endif
}
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20006c60 	.word	0x20006c60
 8004838:	0801f448 	.word	0x0801f448
 800483c:	0801f488 	.word	0x0801f488
 8004840:	0801f4a8 	.word	0x0801f4a8

08004844 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004852:	e002      	b.n	800485a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004854:	2001      	movs	r0, #1
 8004856:	f00f ff50 	bl	80146fa <osDelay>
	while (w25qxx.Lock == 1)
 800485a:	4b54      	ldr	r3, [pc, #336]	; (80049ac <W25qxx_ReadPage+0x168>)
 800485c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004860:	2b01      	cmp	r3, #1
 8004862:	d0f7      	beq.n	8004854 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004864:	4b51      	ldr	r3, [pc, #324]	; (80049ac <W25qxx_ReadPage+0x168>)
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800486c:	4b4f      	ldr	r3, [pc, #316]	; (80049ac <W25qxx_ReadPage+0x168>)
 800486e:	895b      	ldrh	r3, [r3, #10]
 8004870:	461a      	mov	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4293      	cmp	r3, r2
 8004876:	d802      	bhi.n	800487e <W25qxx_ReadPage+0x3a>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800487e:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <W25qxx_ReadPage+0x168>)
 8004880:	895b      	ldrh	r3, [r3, #10]
 8004882:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	4413      	add	r3, r2
 800488a:	4a48      	ldr	r2, [pc, #288]	; (80049ac <W25qxx_ReadPage+0x168>)
 800488c:	8952      	ldrh	r2, [r2, #10]
 800488e:	4293      	cmp	r3, r2
 8004890:	d905      	bls.n	800489e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004892:	4b46      	ldr	r3, [pc, #280]	; (80049ac <W25qxx_ReadPage+0x168>)
 8004894:	895b      	ldrh	r3, [r3, #10]
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	4842      	ldr	r0, [pc, #264]	; (80049b0 <W25qxx_ReadPage+0x16c>)
 80048a6:	f015 fff5 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 80048aa:	2064      	movs	r0, #100	; 0x64
 80048ac:	f00f ff25 	bl	80146fa <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80048b0:	f002 fc72 	bl	8007198 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80048b6:	4b3d      	ldr	r3, [pc, #244]	; (80049ac <W25qxx_ReadPage+0x168>)
 80048b8:	895b      	ldrh	r3, [r3, #10]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	fb03 f302 	mul.w	r3, r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048c8:	2200      	movs	r2, #0
 80048ca:	2140      	movs	r1, #64	; 0x40
 80048cc:	4839      	ldr	r0, [pc, #228]	; (80049b4 <W25qxx_ReadPage+0x170>)
 80048ce:	f003 fb7b 	bl	8007fc8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <W25qxx_ReadPage+0x168>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d909      	bls.n	80048ee <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80048da:	200c      	movs	r0, #12
 80048dc:	f7ff fb92 	bl	8004004 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0e1b      	lsrs	r3, r3, #24
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fb8c 	bl	8004004 <W25qxx_Spi>
 80048ec:	e002      	b.n	80048f4 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80048ee:	200b      	movs	r0, #11
 80048f0:	f7ff fb88 	bl	8004004 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fb82 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fb7c 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fb77 	bl	8004004 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004916:	2000      	movs	r0, #0
 8004918:	f7ff fb74 	bl	8004004 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	2364      	movs	r3, #100	; 0x64
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	4824      	ldr	r0, [pc, #144]	; (80049b8 <W25qxx_ReadPage+0x174>)
 8004926:	f007 fbfe 	bl	800c126 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800492a:	2201      	movs	r2, #1
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	4821      	ldr	r0, [pc, #132]	; (80049b4 <W25qxx_ReadPage+0x170>)
 8004930:	f003 fb4a 	bl	8007fc8 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004934:	f002 fc30 	bl	8007198 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e018      	b.n	8004978 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <W25qxx_ReadPage+0x11e>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d905      	bls.n	8004962 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004956:	4819      	ldr	r0, [pc, #100]	; (80049bc <W25qxx_ReadPage+0x178>)
 8004958:	f016 f822 	bl	801a9a0 <puts>
			W25qxx_Delay(10);
 800495c:	200a      	movs	r0, #10
 800495e:	f00f fecc 	bl	80146fa <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	4814      	ldr	r0, [pc, #80]	; (80049c0 <W25qxx_ReadPage+0x17c>)
 800496e:	f015 ff91 	bl	801a894 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3301      	adds	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d3e2      	bcc.n	8004946 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004980:	480e      	ldr	r0, [pc, #56]	; (80049bc <W25qxx_ReadPage+0x178>)
 8004982:	f016 f80d 	bl	801a9a0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004986:	6939      	ldr	r1, [r7, #16]
 8004988:	480e      	ldr	r0, [pc, #56]	; (80049c4 <W25qxx_ReadPage+0x180>)
 800498a:	f015 ff83 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 800498e:	2064      	movs	r0, #100	; 0x64
 8004990:	f00f feb3 	bl	80146fa <osDelay>
#endif
	W25qxx_Delay(1);
 8004994:	2001      	movs	r0, #1
 8004996:	f00f feb0 	bl	80146fa <osDelay>
	w25qxx.Lock = 0;
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <W25qxx_ReadPage+0x168>)
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20006c60 	.word	0x20006c60
 80049b0:	0801f5f4 	.word	0x0801f5f4
 80049b4:	40020c00 	.word	0x40020c00
 80049b8:	20005f50 	.word	0x20005f50
 80049bc:	0801f418 	.word	0x0801f418
 80049c0:	0801f41c 	.word	0x0801f41c
 80049c4:	0801f630 	.word	0x0801f630

080049c8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d802      	bhi.n	80049e6 <W25qxx_ReadSector+0x1e>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80049e6:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4830      	ldr	r0, [pc, #192]	; (8004ab4 <W25qxx_ReadSector+0xec>)
 80049f4:	f015 ff4e 	bl	801a894 <iprintf>
	W25qxx_Delay(100);
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	f00f fe7e 	bl	80146fa <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80049fe:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d306      	bcc.n	8004a16 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004a08:	482b      	ldr	r0, [pc, #172]	; (8004ab8 <W25qxx_ReadSector+0xf0>)
 8004a0a:	f015 ffc9 	bl	801a9a0 <puts>
		W25qxx_Delay(100);
 8004a0e:	2064      	movs	r0, #100	; 0x64
 8004a10:	f00f fe73 	bl	80146fa <osDelay>
#endif
		return;
 8004a14:	e048      	b.n	8004aa8 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d905      	bls.n	8004a30 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e001      	b.n	8004a34 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f7ff fdab 	bl	8004590 <W25qxx_SectorToPage>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a3e:	895b      	ldrh	r3, [r3, #10]
 8004a40:	4619      	mov	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a48:	4413      	add	r3, r2
 8004a4a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a4e:	895b      	ldrh	r3, [r3, #10]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a58:	fb02 f201 	mul.w	r2, r2, r1
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff feec 	bl	8004844 <W25qxx_ReadPage>
		StartPage++;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a74:	895b      	ldrh	r3, [r3, #10]
 8004a76:	461a      	mov	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1a9a      	subs	r2, r3, r2
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	4413      	add	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <W25qxx_ReadSector+0xe8>)
 8004a84:	895b      	ldrh	r3, [r3, #10]
 8004a86:	461a      	mov	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dce1      	bgt.n	8004a60 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004a9c:	4807      	ldr	r0, [pc, #28]	; (8004abc <W25qxx_ReadSector+0xf4>)
 8004a9e:	f015 ff7f 	bl	801a9a0 <puts>
	W25qxx_Delay(100);
 8004aa2:	2064      	movs	r0, #100	; 0x64
 8004aa4:	f00f fe29 	bl	80146fa <osDelay>
#endif
}
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20006c60 	.word	0x20006c60
 8004ab4:	0801f654 	.word	0x0801f654
 8004ab8:	0801f694 	.word	0x0801f694
 8004abc:	0801f6b4 	.word	0x0801f6b4

08004ac0 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004b0e:	2309      	movs	r3, #9
 8004b10:	e028      	b.n	8004b64 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <_ZN10IridiumSBD5sleepEv+0x30>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d101      	bne.n	8004b2c <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004b28:	230b      	movs	r3, #11
 8004b2a:	e01b      	b.n	8004b64 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8d3 	bl	8004ce0 <_ZN10IridiumSBD13internalSleepEv>
 8004b3a:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f979 	bl	8004e4c <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8d1 	bl	8004d04 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004b62:	68fb      	ldr	r3, [r7, #12]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004b82:	4918      	ldr	r1, [pc, #96]	; (8004be4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f96f 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004b8a:	e028      	b.n	8004bde <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f991 	bl	8004eb4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004bae:	e00f      	b.n	8004bd0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bb6:	b25a      	sxtb	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	b25b      	sxtb	r3, r3
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9a6 	bl	8004f2a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	0801f7b8 	.word	0x0801f7b8

08004be8 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004bfe:	4918      	ldr	r1, [pc, #96]	; (8004c60 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f931 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c06:	e028      	b.n	8004c5a <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f953 	bl	8004eb4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004c2a:	e00f      	b.n	8004c4c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c32:	b25a      	sxtb	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f968 	bl	8004f2a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	0801f850 	.word	0x0801f850

08004c64 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c7a:	4918      	ldr	r1, [pc, #96]	; (8004cdc <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f8f3 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c82:	e028      	b.n	8004cd6 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f915 	bl	8004eb4 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004ca6:	e00f      	b.n	8004cc8 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004cae:	b25a      	sxtb	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f92a 	bl	8004f2a <_ZN10IridiumSBD11set9603pinsEh>
}
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	0801f898 	.word	0x0801f898

08004ce0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	e000      	b.n	8004cf8 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f083 0301 	eor.w	r3, r3, #1
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d011      	beq.n	8004d4c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d04c      	beq.n	8004dce <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f84e 	bl	8004de0 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004d52:	4921      	ldr	r1, [pc, #132]	; (8004dd8 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f887 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004d64:	2101      	movs	r1, #1
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f848 	bl	8004dfc <_ZN10IridiumSBD11setSleepPinEh>
 8004d6c:	e003      	b.n	8004d76 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004d6e:	2101      	movs	r1, #1
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff77 	bl	8004c64 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004d76:	f002 fa0f 	bl	8007198 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004d82:	e025      	b.n	8004dd0 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004d84:	f002 fa08 	bl	8007198 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d9a:	d205      	bcs.n	8004da8 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f002 fa04 	bl	80071b0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004da8:	490c      	ldr	r1, [pc, #48]	; (8004ddc <_ZN10IridiumSBD5powerEb+0xd8>)
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f85c 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004dba:	2100      	movs	r1, #0
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f81d 	bl	8004dfc <_ZN10IridiumSBD11setSleepPinEh>
 8004dc2:	e005      	b.n	8004dd0 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff4c 	bl	8004c64 <_ZN10IridiumSBD10enable9603Eb>
 8004dcc:	e000      	b.n	8004dd0 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004dce:	bf00      	nop
      }
   }
}
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	0801fd28 	.word	0x0801fd28
 8004ddc:	0801fd40 	.word	0x0801fd40

08004de0 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f83c 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	0801fd58 	.word	0x0801fd58

08004dfc <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004e0e:	f003 f8db 	bl	8007fc8 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004e12:	490b      	ldr	r1, [pc, #44]	; (8004e40 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f827 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d104      	bne.n	8004e2a <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004e20:	4908      	ldr	r1, [pc, #32]	; (8004e44 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f820 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004e28:	e003      	b.n	8004e32 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004e2a:	4907      	ldr	r1, [pc, #28]	; (8004e48 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f81b 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	0801fd84 	.word	0x0801fd84
 8004e44:	0801fda0 	.word	0x0801fda0
 8004e48:	0801fda8 	.word	0x0801fda8

08004e4c <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f806 	bl	8004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	0801fdd0 	.word	0x0801fdd0

08004e68 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8004e80:	7afb      	ldrb	r3, [r7, #11]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8004e86:	7afb      	ldrb	r3, [r7, #11]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fe2a 	bl	8004ae4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8004e90:	e7f1      	b.n	8004e76 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8004e92:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8004e94:	687c      	ldr	r4, [r7, #4]
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f7fb f9aa 	bl	80001f0 <strlen>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f008 fb59 	bl	800d55e <HAL_UART_Transmit>
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}

08004eb4 <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 f9c9 	bl	8005260 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fdf3 	bl	8004ac0 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fa08 	bl	80052f4 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f000 f9a2 	bl	800523a <_ZN7TwoWire11requestFromEhh>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4610      	mov	r0, r2
 8004f16:	4798      	blx	r3
 8004f18:	4603      	mov	r3, r0
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 f98c 	bl	8005260 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fdb6 	bl	8004ac0 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	78f9      	ldrb	r1, [r7, #3]
 8004f62:	4610      	mov	r0, r2
 8004f64:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f9c2 	bl	80052f4 <_ZN7TwoWire15endTransmissionEv>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	221d      	movs	r2, #29
 8004f88:	492f      	ldr	r1, [pc, #188]	; (8005048 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8004f8a:	f008 fae8 	bl	800d55e <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	221d      	movs	r2, #29
 8004f96:	492d      	ldr	r1, [pc, #180]	; (800504c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8004f98:	f008 fae1 	bl	800d55e <HAL_UART_Transmit>
	int err = this->sleep();
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fdad 	bl	8004afc <_ZN10IridiumSBD5sleepEv>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d017      	beq.n	8004fda <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb0:	4927      	ldr	r1, [pc, #156]	; (8005050 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f015 fdc0 	bl	801ab38 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8004fb8:	687c      	ldr	r4, [r7, #4]
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb f916 	bl	80001f0 <strlen>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f107 0108 	add.w	r1, r7, #8
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f008 fac4 	bl	800d55e <HAL_UART_Transmit>
		return false;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e032      	b.n	8005040 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	491c      	ldr	r1, [pc, #112]	; (8005054 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004fe4:	f008 fabb 	bl	800d55e <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	2218      	movs	r2, #24
 8004ff0:	4919      	ldr	r1, [pc, #100]	; (8005058 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8004ff2:	f008 fab4 	bl	800d55e <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fdf5 	bl	8004be8 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	2204      	movs	r2, #4
 8005006:	4913      	ldr	r1, [pc, #76]	; (8005054 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005008:	f008 faa9 	bl	800d55e <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	2227      	movs	r2, #39	; 0x27
 8005014:	4911      	ldr	r1, [pc, #68]	; (800505c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005016:	f008 faa2 	bl	800d55e <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 800501a:	2100      	movs	r1, #0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fda5 	bl	8004b6c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f04f 33ff 	mov.w	r3, #4294967295
 8005028:	2204      	movs	r2, #4
 800502a:	490a      	ldr	r1, [pc, #40]	; (8005054 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 800502c:	f008 fa97 	bl	800d55e <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
 8005036:	2220      	movs	r2, #32
 8005038:	4909      	ldr	r1, [pc, #36]	; (8005060 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 800503a:	f008 fa90 	bl	800d55e <HAL_UART_Transmit>
	return true;
 800503e:	2301      	movs	r3, #1
}
 8005040:	4618      	mov	r0, r3
 8005042:	372c      	adds	r7, #44	; 0x2c
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}
 8005048:	0801ffdc 	.word	0x0801ffdc
 800504c:	0801fffc 	.word	0x0801fffc
 8005050:	0802001c 	.word	0x0802001c
 8005054:	0801f788 	.word	0x0801f788
 8005058:	08020038 	.word	0x08020038
 800505c:	08020054 	.word	0x08020054
 8005060:	0802007c 	.word	0x0802007c

08005064 <MRT_Static_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Static_Iridium_Destructor(){
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <MRT_Static_Iridium_Destructor+0x1c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <MRT_Static_Iridium_Destructor+0x1c>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	}
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	2000044c 	.word	0x2000044c

08005084 <MRT_Static_Iridium_Shutdown>:
uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
	MRT_Static_Iridium_Constructor();
	return E_T->MRT_Iridium_setup(huart,timeout, i2c_bus);
}

bool MRT_Static_Iridium_Shutdown(void){
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <MRT_Static_Iridium_Shutdown+0x2c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ff72 	bl	8004f78 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80050a0:	f7ff ffe0 	bl	8005064 <MRT_Static_Iridium_Destructor>
	return b;
 80050a4:	79fb      	ldrb	r3, [r7, #7]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	2000044c 	.word	0x2000044c

080050b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	4790      	blx	r2
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80050f4:	e7e6      	b.n	80050c4 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80050f6:	697b      	ldr	r3, [r7, #20]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	4a06      	ldr	r2, [pc, #24]	; (8005124 <_ZN5PrintC1Ev+0x24>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	080208d8 	.word	0x080208d8

08005128 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ffe4 	bl	8005100 <_ZN5PrintC1Ev>
 8005138:	4a05      	ldr	r2, [pc, #20]	; (8005150 <_ZN6StreamC1Ev+0x28>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08020908 	.word	0x08020908

08005154 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ffe1 	bl	8005128 <_ZN6StreamC1Ev>
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3390      	adds	r3, #144	; 0x90
 8005176:	2220      	movs	r2, #32
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f014 fc5e 	bl	8019a3c <memset>
  rxBufferIndex = 0;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	080208e8 	.word	0x080208e8

080051c4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	4608      	mov	r0, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	70fb      	strb	r3, [r7, #3]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70bb      	strb	r3, [r7, #2]
 80051da:	4613      	mov	r3, r2
 80051dc:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fc24 	bl	8005a2c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80051e4:	78bb      	ldrb	r3, [r7, #2]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d901      	bls.n	80051ee <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80051ea:	2320      	movs	r3, #32
 80051ec:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	b2d9      	uxtb	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80051fa:	78b8      	ldrb	r0, [r7, #2]
 80051fc:	787b      	ldrb	r3, [r7, #1]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	4603      	mov	r3, r0
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9cf 	bl	80055a6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8005208:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da02      	bge.n	8005216 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	e001      	b.n	800521a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fbcc 	bl	80059c8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	70fb      	strb	r3, [r7, #3]
 8005246:	4613      	mov	r3, r2
 8005248:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800524a:	78ba      	ldrb	r2, [r7, #2]
 800524c:	78f9      	ldrb	r1, [r7, #3]
 800524e:	2301      	movs	r3, #1
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ffb7 	bl	80051c4 <_ZN7TwoWire11requestFromEhhh>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af02      	add	r7, sp, #8
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fbc2 	bl	8005a2c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7c1b      	ldrb	r3, [r3, #16]
 80052ac:	0059      	lsls	r1, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f103 0211 	add.w	r2, r3, #17
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052ba:	4618      	mov	r0, r3
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4603      	mov	r3, r0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa00 	bl	80056c8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb6f 	bl	80059c8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80052fc:	2101      	movs	r1, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ffc9 	bl	8005296 <_ZN7TwoWire15endTransmissionEh>
 8005304:	4603      	mov	r3, r0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01d      	beq.n	8005360 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800532a:	2b1f      	cmp	r3, #31
 800532c:	d901      	bls.n	8005332 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800532e:	2300      	movs	r3, #0
 8005330:	e028      	b.n	8005384 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005338:	4619      	mov	r1, r3
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	440b      	add	r3, r1
 8005340:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005348:	3301      	adds	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800535e:	e010      	b.n	8005382 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb63 	bl	8005a2c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8005366:	1cfb      	adds	r3, r7, #3
 8005368:	2201      	movs	r2, #1
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fa95 	bl	800589c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb28 	bl	80059c8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	333c      	adds	r3, #60	; 0x3c
 800537c:	4618      	mov	r0, r3
 800537e:	f003 fab9 	bl	80088f4 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8005382:	2301      	movs	r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d21e      	bcs.n	80053ec <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	440a      	add	r2, r1
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	4611      	mov	r1, r2
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	3301      	adds	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e7ed      	b.n	80053a6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fb2e 	bl	8005a2c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	461a      	mov	r2, r3
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa60 	bl	800589c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 faf3 	bl	80059c8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	333c      	adds	r3, #60	; 0x3c
 80053e6:	4618      	mov	r0, r3
 80053e8:	f003 fa84 	bl	80088f4 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80053ec:	687b      	ldr	r3, [r7, #4]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	1ad3      	subs	r3, r2, r3
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005432:	b2da      	uxtb	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	429a      	cmp	r2, r3
 800543e:	bf34      	ite	cc
 8005440:	2301      	movcc	r3, #1
 8005442:	2300      	movcs	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800545c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	3301      	adds	r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005492:	b2da      	uxtb	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	429a      	cmp	r2, r3
 800549e:	bf34      	ite	cc
 80054a0:	2301      	movcc	r3, #1
 80054a2:	2300      	movcs	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4413      	add	r3, r2
 80054b8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f6:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80054f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054fc:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	60fa      	str	r2, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0e9      	beq.n	80054fe <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800552a:	2301      	movs	r3, #1
 800552c:	e021      	b.n	8005572 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800553a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	60fa      	str	r2, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0e9      	beq.n	8005540 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

    return 0;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08a      	sub	sp, #40	; 0x28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	460b      	mov	r3, r1
 80055b4:	72fb      	strb	r3, [r7, #11]
 80055b6:	4613      	mov	r3, r2
 80055b8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff8d 	bl	80054e0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80055c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	3b01      	subs	r3, #1
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ed      	bne.n	80055cc <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	e064      	b.n	80056c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8005604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	3b01      	subs	r3, #1
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ed      	bne.n	800560a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	e045      	b.n	80056c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800564a:	2300      	movs	r3, #0
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	7abb      	ldrb	r3, [r7, #10]
 8005650:	3b01      	subs	r3, #1
 8005652:	6a3a      	ldr	r2, [r7, #32]
 8005654:	429a      	cmp	r2, r3
 8005656:	da17      	bge.n	8005688 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	2200      	movs	r2, #0
 800565e:	4619      	mov	r1, r3
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8a4 	bl	80057ae <_ZN7TwoWire20i2c_master_byte_readEPii>
 8005666:	61b8      	str	r0, [r7, #24]
        if(ret)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295
 8005672:	e025      	b.n	80056c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	b2ca      	uxtb	r2, r1
 800567e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	3301      	adds	r3, #1
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	e7e2      	b.n	800564e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8005688:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff ff74 	bl	800557e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	2201      	movs	r2, #1
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f885 	bl	80057ae <_ZN7TwoWire20i2c_master_byte_readEPii>
 80056a4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295
 80056b0:	e006      	b.n	80056c0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4413      	add	r3, r2
 80056ba:	b2ca      	uxtb	r2, r1
 80056bc:	701a      	strb	r2, [r3, #0]

    return length;
 80056be:	7abb      	ldrb	r3, [r7, #10]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3728      	adds	r7, #40	; 0x28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff feff 	bl	80054e0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80056e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	3b01      	subs	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ed      	bne.n	80056e8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800570c:	2304      	movs	r3, #4
 800570e:	e04a      	b.n	80057a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800571c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005720:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b02      	cmp	r3, #2
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3b01      	subs	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ed      	bne.n	8005722 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8005746:	2302      	movs	r3, #2
 8005748:	e02d      	b.n	80057a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	da15      	bge.n	8005798 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f85a 	bl	8005830 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800577c:	4603      	mov	r3, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	bf14      	ite	ne
 8005782:	2301      	movne	r3, #1
 8005784:	2300      	moveq	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800578c:	2303      	movs	r3, #3
 800578e:	e00a      	b.n	80057a6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	3301      	adds	r3, #1
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e7e5      	b.n	8005764 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff feed 	bl	800557e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e005      	b.n	80057e0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80057e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	617a      	str	r2, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0e9      	beq.n	80057e6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8005812:	f04f 33ff 	mov.w	r3, #4294967295
 8005816:	e005      	b.n	8005824 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	601a      	str	r2, [r3, #0]

    return 0;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800584a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800584e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d008      	beq.n	8005870 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005868:	2b04      	cmp	r3, #4
 800586a:	d001      	beq.n	8005870 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0e2      	beq.n	8005850 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800588e:	2301      	movs	r3, #1
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd41      	ble.n	800593c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80058b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058bc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3b01      	subs	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1ed      	bne.n	80058be <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
 80058e6:	e068      	b.n	80059ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	60ba      	str	r2, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	611a      	str	r2, [r3, #16]
        length--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
        size++;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3301      	adds	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d104      	bne.n	800591a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0c8      	beq.n	80058b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	60ba      	str	r2, [r7, #8]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	611a      	str	r2, [r3, #16]
            length--;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	607b      	str	r3, [r7, #4]
            size++;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	3301      	adds	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800593a:	e7ba      	b.n	80058b2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800593c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005940:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	3b01      	subs	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ec      	bne.n	8005942 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	e025      	b.n	80059ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005976:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8005978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800597c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3b01      	subs	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ed      	bne.n	800597e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e008      	b.n	80059ba <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80059b8:	69bb      	ldr	r3, [r7, #24]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d106      	bne.n	80059e8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80059da:	2049      	movs	r0, #73	; 0x49
 80059dc:	f002 f914 	bl	8007c08 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80059e0:	2048      	movs	r0, #72	; 0x48
 80059e2:	f002 f911 	bl	8007c08 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80059e6:	e016      	b.n	8005a16 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d106      	bne.n	8005a00 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80059f2:	2022      	movs	r0, #34	; 0x22
 80059f4:	f002 f908 	bl	8007c08 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80059f8:	2021      	movs	r0, #33	; 0x21
 80059fa:	f002 f905 	bl	8007c08 <HAL_NVIC_EnableIRQ>
}
 80059fe:	e00a      	b.n	8005a16 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a04:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d105      	bne.n	8005a16 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005a0a:	2020      	movs	r0, #32
 8005a0c:	f002 f8fc 	bl	8007c08 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a10:	201f      	movs	r0, #31
 8005a12:	f002 f8f9 	bl	8007c08 <HAL_NVIC_EnableIRQ>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40005c00 	.word	0x40005c00
 8005a24:	40005800 	.word	0x40005800
 8005a28:	40005400 	.word	0x40005400

08005a2c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d106      	bne.n	8005a4c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8005a3e:	2049      	movs	r0, #73	; 0x49
 8005a40:	f002 f8f0 	bl	8007c24 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8005a44:	2048      	movs	r0, #72	; 0x48
 8005a46:	f002 f8ed 	bl	8007c24 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005a4a:	e016      	b.n	8005a7a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d106      	bne.n	8005a64 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8005a56:	2022      	movs	r0, #34	; 0x22
 8005a58:	f002 f8e4 	bl	8007c24 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8005a5c:	2021      	movs	r0, #33	; 0x21
 8005a5e:	f002 f8e1 	bl	8007c24 <HAL_NVIC_DisableIRQ>
}
 8005a62:	e00a      	b.n	8005a7a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <_ZN7TwoWire16disableInterruptEv+0x60>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d105      	bne.n	8005a7a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005a6e:	2020      	movs	r0, #32
 8005a70:	f002 f8d8 	bl	8007c24 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005a74:	201f      	movs	r0, #31
 8005a76:	f002 f8d5 	bl	8007c24 <HAL_NVIC_DisableIRQ>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40005c00 	.word	0x40005c00
 8005a88:	40005800 	.word	0x40005800
 8005a8c:	40005400 	.word	0x40005400

08005a90 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d110      	bne.n	8005ac2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10b      	bne.n	8005ac2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8005aaa:	4908      	ldr	r1, [pc, #32]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005aac:	4808      	ldr	r0, [pc, #32]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005aae:	f7ff fb51 	bl	8005154 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8005ab2:	4908      	ldr	r1, [pc, #32]	; (8005ad4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005ab4:	4808      	ldr	r0, [pc, #32]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005ab6:	f7ff fb4d 	bl	8005154 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8005aba:	4908      	ldr	r1, [pc, #32]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005abc:	4808      	ldr	r0, [pc, #32]	; (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005abe:	f7ff fb49 	bl	8005154 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40005400 	.word	0x40005400
 8005ad0:	20000450 	.word	0x20000450
 8005ad4:	40005800 	.word	0x40005800
 8005ad8:	20000508 	.word	0x20000508
 8005adc:	40005c00 	.word	0x40005c00
 8005ae0:	200005c0 	.word	0x200005c0

08005ae4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7ff ffcf 	bl	8005a90 <_Z41__static_initialization_and_destruction_0ii>
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	461a      	mov	r2, r3
 8005b00:	460b      	mov	r3, r1
 8005b02:	72fb      	strb	r3, [r7, #11]
 8005b04:	4613      	mov	r3, r2
 8005b06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685c      	ldr	r4, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6898      	ldr	r0, [r3, #8]
 8005b10:	893b      	ldrh	r3, [r7, #8]
 8005b12:	7af9      	ldrb	r1, [r7, #11]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	47a0      	blx	r4
 8005b18:	6178      	str	r0, [r7, #20]

  return ret;
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd90      	pop	{r4, r7, pc}

08005b24 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	460b      	mov	r3, r1
 8005b32:	72fb      	strb	r3, [r7, #11]
 8005b34:	4613      	mov	r3, r2
 8005b36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681c      	ldr	r4, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6898      	ldr	r0, [r3, #8]
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	7af9      	ldrb	r1, [r7, #11]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	47a0      	blx	r4
 8005b48:	6178      	str	r0, [r7, #20]

  return ret;
 8005b4a:	697b      	ldr	r3, [r7, #20]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}

08005b54 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005b80 <lps22hh_from_lsb_to_hpa+0x2c>
 8005b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b72:	eeb0 0a67 	vmov.f32	s0, s15
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	49800000 	.word	0x49800000

08005b84 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005bb4 <lps22hh_from_lsb_to_celsius+0x30>
 8005b9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ba2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	42c80000 	.word	0x42c80000

08005bb8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005bc4:	f107 0208 	add.w	r2, r7, #8
 8005bc8:	2301      	movs	r3, #1
 8005bca:	2110      	movs	r1, #16
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff91 	bl	8005af4 <lps22hh_read_reg>
 8005bd2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	7a3b      	ldrb	r3, [r7, #8]
 8005be4:	f362 0341 	bfi	r3, r2, #1, #1
 8005be8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005bea:	f107 0208 	add.w	r2, r7, #8
 8005bee:	2301      	movs	r3, #1
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ff96 	bl	8005b24 <lps22hh_write_reg>
 8005bf8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c10:	f107 0210 	add.w	r2, r7, #16
 8005c14:	2301      	movs	r3, #1
 8005c16:	2110      	movs	r1, #16
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff6b 	bl	8005af4 <lps22hh_read_reg>
 8005c1e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c26:	f107 020c 	add.w	r2, r7, #12
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	2111      	movs	r1, #17
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ff60 	bl	8005af4 <lps22hh_read_reg>
 8005c34:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10f      	bne.n	8005c5c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	7c3b      	ldrb	r3, [r7, #16]
 8005c46:	f362 1306 	bfi	r3, r2, #4, #3
 8005c4a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c4c:	f107 0210 	add.w	r2, r7, #16
 8005c50:	2301      	movs	r3, #1
 8005c52:	2110      	movs	r1, #16
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ff65 	bl	8005b24 <lps22hh_write_reg>
 8005c5a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d119      	bne.n	8005c96 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	7b3b      	ldrb	r3, [r7, #12]
 8005c6e:	f362 0341 	bfi	r3, r2, #1, #1
 8005c72:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	7b3b      	ldrb	r3, [r7, #12]
 8005c80:	f362 0300 	bfi	r3, r2, #0, #1
 8005c84:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c86:	f107 020c 	add.w	r2, r7, #12
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	2111      	movs	r1, #17
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ff48 	bl	8005b24 <lps22hh_write_reg>
 8005c94:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005c96:	697b      	ldr	r3, [r7, #20]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005caa:	f107 0208 	add.w	r2, r7, #8
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2127      	movs	r1, #39	; 0x27
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff1e 	bl	8005af4 <lps22hh_read_reg>
 8005cb8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005cba:	7a3b      	ldrb	r3, [r7, #8]
 8005cbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	701a      	strb	r2, [r3, #0]

  return ret;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005cdc:	f107 0208 	add.w	r2, r7, #8
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	2128      	movs	r1, #40	; 0x28
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff05 	bl	8005af4 <lps22hh_read_reg>
 8005cea:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005cec:	7abb      	ldrb	r3, [r7, #10]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	7a7a      	ldrb	r2, [r7, #9]
 8005cfc:	441a      	add	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	7a3a      	ldrb	r2, [r7, #8]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	601a      	str	r2, [r3, #0]

  return ret;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	2302      	movs	r3, #2
 8005d34:	212b      	movs	r1, #43	; 0x2b
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fedc 	bl	8005af4 <lps22hh_read_reg>
 8005d3c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005d3e:	7a7b      	ldrb	r3, [r7, #9]
 8005d40:	b21a      	sxth	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	7a3b      	ldrb	r3, [r7, #8]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	b21a      	sxth	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005d74:	2301      	movs	r3, #1
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	210f      	movs	r1, #15
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feba 	bl	8005af4 <lps22hh_read_reg>
 8005d80:	60f8      	str	r0, [r7, #12]

  return ret;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005d98:	f107 0208 	add.w	r2, r7, #8
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	2111      	movs	r1, #17
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fea7 	bl	8005af4 <lps22hh_read_reg>
 8005da6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	7a3b      	ldrb	r3, [r7, #8]
 8005db8:	f362 0382 	bfi	r3, r2, #2, #1
 8005dbc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	2111      	movs	r1, #17
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff feac 	bl	8005b24 <lps22hh_write_reg>
 8005dcc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005de2:	f107 0208 	add.w	r2, r7, #8
 8005de6:	2301      	movs	r3, #1
 8005de8:	2111      	movs	r1, #17
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fe82 	bl	8005af4 <lps22hh_read_reg>
 8005df0:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005df2:	7a3b      	ldrb	r3, [r7, #8]
 8005df4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]

  return ret;
 8005e00:	68fb      	ldr	r3, [r7, #12]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005e0a:	b590      	push	{r4, r7, lr}
 8005e0c:	b087      	sub	sp, #28
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	461a      	mov	r2, r3
 8005e16:	460b      	mov	r3, r1
 8005e18:	72fb      	strb	r3, [r7, #11]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685c      	ldr	r4, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6898      	ldr	r0, [r3, #8]
 8005e26:	893b      	ldrh	r3, [r7, #8]
 8005e28:	7af9      	ldrb	r1, [r7, #11]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	47a0      	blx	r4
 8005e2e:	6178      	str	r0, [r7, #20]

  return ret;
 8005e30:	697b      	ldr	r3, [r7, #20]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd90      	pop	{r4, r7, pc}

08005e3a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005e3a:	b590      	push	{r4, r7, lr}
 8005e3c:	b087      	sub	sp, #28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	461a      	mov	r2, r3
 8005e46:	460b      	mov	r3, r1
 8005e48:	72fb      	strb	r3, [r7, #11]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681c      	ldr	r4, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6898      	ldr	r0, [r3, #8]
 8005e56:	893b      	ldrh	r3, [r7, #8]
 8005e58:	7af9      	ldrb	r1, [r7, #11]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	47a0      	blx	r4
 8005e5e:	6178      	str	r0, [r7, #20]

  return ret;
 8005e60:	697b      	ldr	r3, [r7, #20]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd90      	pop	{r4, r7, pc}
	...

08005e6c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005e98 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005e86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	3d79db23 	.word	0x3d79db23

08005e9c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ec8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005eba:	eeb0 0a67 	vmov.f32	s0, s15
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	428c0000 	.word	0x428c0000

08005ecc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ee2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f00 <lsm6dsr_from_lsb_to_celsius+0x34>
 8005ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005eee:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	43800000 	.word	0x43800000

08005f04 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005f10:	f107 0208 	add.w	r2, r7, #8
 8005f14:	2301      	movs	r3, #1
 8005f16:	2110      	movs	r1, #16
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff76 	bl	8005e0a <lsm6dsr_read_reg>
 8005f1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	7a3b      	ldrb	r3, [r7, #8]
 8005f30:	f362 0383 	bfi	r3, r2, #2, #2
 8005f34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005f36:	f107 0208 	add.w	r2, r7, #8
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	2110      	movs	r1, #16
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff7b 	bl	8005e3a <lsm6dsr_write_reg>
 8005f44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005f46:	68fb      	ldr	r3, [r7, #12]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fbb0 	bl	80066cc <lsm6dsr_fsm_enable_get>
 8005f6c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 80c4 	bne.w	80060fe <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f76:	7b3b      	ldrb	r3, [r7, #12]
 8005f78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f7e:	7b3b      	ldrb	r3, [r7, #12]
 8005f80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f84:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f8a:	7b3b      	ldrb	r3, [r7, #12]
 8005f8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fa2:	7b3b      	ldrb	r3, [r7, #12]
 8005fa4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fa8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fae:	7b3b      	ldrb	r3, [r7, #12]
 8005fb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fba:	7b3b      	ldrb	r3, [r7, #12]
 8005fbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fc6:	7b3b      	ldrb	r3, [r7, #12]
 8005fc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fd2:	7b7b      	ldrb	r3, [r7, #13]
 8005fd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005fde:	7b7b      	ldrb	r3, [r7, #13]
 8005fe0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fe4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005fea:	7b7b      	ldrb	r3, [r7, #13]
 8005fec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ff0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005ff6:	7b7b      	ldrb	r3, [r7, #13]
 8005ff8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ffc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006002:	7b7b      	ldrb	r3, [r7, #13]
 8006004:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006008:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800600a:	4313      	orrs	r3, r2
 800600c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800600e:	7b7b      	ldrb	r3, [r7, #13]
 8006010:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006014:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006016:	4313      	orrs	r3, r2
 8006018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800601a:	7b7b      	ldrb	r3, [r7, #13]
 800601c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006022:	4313      	orrs	r3, r2
 8006024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006026:	7b7b      	ldrb	r3, [r7, #13]
 8006028:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800602c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800602e:	4313      	orrs	r3, r2
 8006030:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006032:	2b01      	cmp	r3, #1
 8006034:	d163      	bne.n	80060fe <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006036:	f107 030b 	add.w	r3, r7, #11
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fb71 	bl	8006724 <lsm6dsr_fsm_data_rate_get>
 8006042:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d159      	bne.n	80060fe <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d853      	bhi.n	80060f8 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <lsm6dsr_xl_data_rate_set+0x108>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	08006069 	.word	0x08006069
 800605c:	0800607b 	.word	0x0800607b
 8006060:	08006099 	.word	0x08006099
 8006064:	080060c3 	.word	0x080060c3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006072:	e045      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	75fb      	strb	r3, [r7, #23]
            break;
 8006078:	e042      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006080:	2302      	movs	r3, #2
 8006082:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006084:	e03c      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d102      	bne.n	8006092 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800608c:	2302      	movs	r3, #2
 800608e:	75fb      	strb	r3, [r7, #23]
            break;
 8006090:	e036      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	75fb      	strb	r3, [r7, #23]
            break;
 8006096:	e033      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800609e:	2303      	movs	r3, #3
 80060a0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060a2:	e02d      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d102      	bne.n	80060b0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060aa:	2303      	movs	r3, #3
 80060ac:	75fb      	strb	r3, [r7, #23]
            break;
 80060ae:	e027      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d102      	bne.n	80060bc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060b6:	2303      	movs	r3, #3
 80060b8:	75fb      	strb	r3, [r7, #23]
            break;
 80060ba:	e021      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	75fb      	strb	r3, [r7, #23]
            break;
 80060c0:	e01e      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80060c8:	2304      	movs	r3, #4
 80060ca:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060cc:	e018      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d102      	bne.n	80060da <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80060d4:	2304      	movs	r3, #4
 80060d6:	75fb      	strb	r3, [r7, #23]
            break;
 80060d8:	e012      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d102      	bne.n	80060e6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80060e0:	2304      	movs	r3, #4
 80060e2:	75fb      	strb	r3, [r7, #23]
            break;
 80060e4:	e00c      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d102      	bne.n	80060f2 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80060ec:	2304      	movs	r3, #4
 80060ee:	75fb      	strb	r3, [r7, #23]
            break;
 80060f0:	e006      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	75fb      	strb	r3, [r7, #23]
            break;
 80060f6:	e003      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	75fb      	strb	r3, [r7, #23]
            break;
 80060fc:	e000      	b.n	8006100 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80060fe:	bf00      	nop
    }
  }

  if (ret == 0)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006106:	f107 0208 	add.w	r2, r7, #8
 800610a:	2301      	movs	r3, #1
 800610c:	2110      	movs	r1, #16
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fe7b 	bl	8005e0a <lsm6dsr_read_reg>
 8006114:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10f      	bne.n	800613c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	b2da      	uxtb	r2, r3
 8006124:	7a3b      	ldrb	r3, [r7, #8]
 8006126:	f362 1307 	bfi	r3, r2, #4, #4
 800612a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800612c:	f107 0208 	add.w	r2, r7, #8
 8006130:	2301      	movs	r3, #1
 8006132:	2110      	movs	r1, #16
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fe80 	bl	8005e3a <lsm6dsr_write_reg>
 800613a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800613c:	693b      	ldr	r3, [r7, #16]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop

08006148 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006154:	f107 0208 	add.w	r2, r7, #8
 8006158:	2301      	movs	r3, #1
 800615a:	2111      	movs	r1, #17
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fe54 	bl	8005e0a <lsm6dsr_read_reg>
 8006162:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	b2da      	uxtb	r2, r3
 8006172:	7a3b      	ldrb	r3, [r7, #8]
 8006174:	f362 0303 	bfi	r3, r2, #0, #4
 8006178:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800617a:	f107 0208 	add.w	r2, r7, #8
 800617e:	2301      	movs	r3, #1
 8006180:	2111      	movs	r1, #17
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff fe59 	bl	8005e3a <lsm6dsr_write_reg>
 8006188:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa8e 	bl	80066cc <lsm6dsr_fsm_enable_get>
 80061b0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 80c4 	bne.w	8006342 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061ba:	7b3b      	ldrb	r3, [r7, #12]
 80061bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061c2:	7b3b      	ldrb	r3, [r7, #12]
 80061c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061ca:	4313      	orrs	r3, r2
 80061cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061ce:	7b3b      	ldrb	r3, [r7, #12]
 80061d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80061da:	7b3b      	ldrb	r3, [r7, #12]
 80061dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061e6:	7b3b      	ldrb	r3, [r7, #12]
 80061e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80061ee:	4313      	orrs	r3, r2
 80061f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80061f2:	7b3b      	ldrb	r3, [r7, #12]
 80061f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80061fa:	4313      	orrs	r3, r2
 80061fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80061fe:	7b3b      	ldrb	r3, [r7, #12]
 8006200:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006204:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006206:	4313      	orrs	r3, r2
 8006208:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800620a:	7b3b      	ldrb	r3, [r7, #12]
 800620c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006210:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006212:	4313      	orrs	r3, r2
 8006214:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800621c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800621e:	4313      	orrs	r3, r2
 8006220:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006222:	7b7b      	ldrb	r3, [r7, #13]
 8006224:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800622a:	4313      	orrs	r3, r2
 800622c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800622e:	7b7b      	ldrb	r3, [r7, #13]
 8006230:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006234:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006236:	4313      	orrs	r3, r2
 8006238:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006240:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006242:	4313      	orrs	r3, r2
 8006244:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006246:	7b7b      	ldrb	r3, [r7, #13]
 8006248:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800624c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800624e:	4313      	orrs	r3, r2
 8006250:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006252:	7b7b      	ldrb	r3, [r7, #13]
 8006254:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800625a:	4313      	orrs	r3, r2
 800625c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800625e:	7b7b      	ldrb	r3, [r7, #13]
 8006260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006264:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006266:	4313      	orrs	r3, r2
 8006268:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800626a:	7b7b      	ldrb	r3, [r7, #13]
 800626c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006270:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006272:	4313      	orrs	r3, r2
 8006274:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006276:	2b01      	cmp	r3, #1
 8006278:	d163      	bne.n	8006342 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800627a:	f107 030b 	add.w	r3, r7, #11
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fa4f 	bl	8006724 <lsm6dsr_fsm_data_rate_get>
 8006286:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d159      	bne.n	8006342 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d853      	bhi.n	800633c <lsm6dsr_gy_data_rate_set+0x1a8>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <lsm6dsr_gy_data_rate_set+0x108>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062bf 	.word	0x080062bf
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	08006307 	.word	0x08006307
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062b6:	e045      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	75fb      	strb	r3, [r7, #23]
            break;
 80062bc:	e042      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80062c4:	2302      	movs	r3, #2
 80062c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062c8:	e03c      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d102      	bne.n	80062d6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80062d0:	2302      	movs	r3, #2
 80062d2:	75fb      	strb	r3, [r7, #23]
            break;
 80062d4:	e036      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	75fb      	strb	r3, [r7, #23]
            break;
 80062da:	e033      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80062e2:	2303      	movs	r3, #3
 80062e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80062e6:	e02d      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d102      	bne.n	80062f4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
            break;
 80062f2:	e027      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d102      	bne.n	8006300 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80062fa:	2303      	movs	r3, #3
 80062fc:	75fb      	strb	r3, [r7, #23]
            break;
 80062fe:	e021      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	75fb      	strb	r3, [r7, #23]
            break;
 8006304:	e01e      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800630c:	2304      	movs	r3, #4
 800630e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006310:	e018      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006318:	2304      	movs	r3, #4
 800631a:	75fb      	strb	r3, [r7, #23]
            break;
 800631c:	e012      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d102      	bne.n	800632a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006324:	2304      	movs	r3, #4
 8006326:	75fb      	strb	r3, [r7, #23]
            break;
 8006328:	e00c      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d102      	bne.n	8006336 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006330:	2304      	movs	r3, #4
 8006332:	75fb      	strb	r3, [r7, #23]
            break;
 8006334:	e006      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	75fb      	strb	r3, [r7, #23]
            break;
 800633a:	e003      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	75fb      	strb	r3, [r7, #23]
            break;
 8006340:	e000      	b.n	8006344 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006342:	bf00      	nop
    }
  }

  if (ret == 0)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800634a:	f107 0208 	add.w	r2, r7, #8
 800634e:	2301      	movs	r3, #1
 8006350:	2111      	movs	r1, #17
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fd59 	bl	8005e0a <lsm6dsr_read_reg>
 8006358:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10f      	bne.n	8006380 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	b2da      	uxtb	r2, r3
 8006368:	7a3b      	ldrb	r3, [r7, #8]
 800636a:	f362 1307 	bfi	r3, r2, #4, #4
 800636e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006370:	f107 0208 	add.w	r2, r7, #8
 8006374:	2301      	movs	r3, #1
 8006376:	2111      	movs	r1, #17
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fd5e 	bl	8005e3a <lsm6dsr_write_reg>
 800637e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006380:	693b      	ldr	r3, [r7, #16]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop

0800638c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	2301      	movs	r3, #1
 800639e:	2112      	movs	r1, #18
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fd32 	bl	8005e0a <lsm6dsr_read_reg>
 80063a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	7a3b      	ldrb	r3, [r7, #8]
 80063b8:	f362 1386 	bfi	r3, r2, #6, #1
 80063bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	2301      	movs	r3, #1
 80063c4:	2112      	movs	r1, #18
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fd37 	bl	8005e3a <lsm6dsr_write_reg>
 80063cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063ce:	68fb      	ldr	r3, [r7, #12]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	2301      	movs	r3, #1
 80063e8:	211e      	movs	r1, #30
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fd0d 	bl	8005e0a <lsm6dsr_read_reg>
 80063f0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80063f2:	7a3b      	ldrb	r3, [r7, #8]
 80063f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	701a      	strb	r2, [r3, #0]

  return ret;
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006414:	f107 0208 	add.w	r2, r7, #8
 8006418:	2301      	movs	r3, #1
 800641a:	211e      	movs	r1, #30
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fcf4 	bl	8005e0a <lsm6dsr_read_reg>
 8006422:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006424:	7a3b      	ldrb	r3, [r7, #8]
 8006426:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	701a      	strb	r2, [r3, #0]

  return ret;
 8006432:	68fb      	ldr	r3, [r7, #12]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006446:	f107 0208 	add.w	r2, r7, #8
 800644a:	2301      	movs	r3, #1
 800644c:	211e      	movs	r1, #30
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fcdb 	bl	8005e0a <lsm6dsr_read_reg>
 8006454:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006456:	7a3b      	ldrb	r3, [r7, #8]
 8006458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	701a      	strb	r2, [r3, #0]

  return ret;
 8006464:	68fb      	ldr	r3, [r7, #12]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006478:	f107 0208 	add.w	r2, r7, #8
 800647c:	2302      	movs	r3, #2
 800647e:	2120      	movs	r1, #32
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fcc2 	bl	8005e0a <lsm6dsr_read_reg>
 8006486:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006488:	7a7b      	ldrb	r3, [r7, #9]
 800648a:	b21a      	sxth	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006496:	b29b      	uxth	r3, r3
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	b29a      	uxth	r2, r3
 800649c:	7a3b      	ldrb	r3, [r7, #8]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	b21a      	sxth	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80064aa:	68fb      	ldr	r3, [r7, #12]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80064be:	f107 020c 	add.w	r2, r7, #12
 80064c2:	2306      	movs	r3, #6
 80064c4:	2122      	movs	r1, #34	; 0x22
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fc9f 	bl	8005e0a <lsm6dsr_read_reg>
 80064cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80064ce:	7b7b      	ldrb	r3, [r7, #13]
 80064d0:	b21a      	sxth	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	7b3b      	ldrb	r3, [r7, #12]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	4413      	add	r3, r2
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	b21a      	sxth	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80064f0:	7bfa      	ldrb	r2, [r7, #15]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	3302      	adds	r3, #2
 80064f6:	b212      	sxth	r2, r2
 80064f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	3302      	adds	r3, #2
 80064fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006502:	b29b      	uxth	r3, r3
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	b29a      	uxth	r2, r3
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	b29b      	uxth	r3, r3
 800650c:	4413      	add	r3, r2
 800650e:	b29a      	uxth	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	3302      	adds	r3, #2
 8006514:	b212      	sxth	r2, r2
 8006516:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006518:	7c7a      	ldrb	r2, [r7, #17]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	3304      	adds	r3, #4
 800651e:	b212      	sxth	r2, r2
 8006520:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800652a:	b29b      	uxth	r3, r3
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	b29a      	uxth	r2, r3
 8006530:	7c3b      	ldrb	r3, [r7, #16]
 8006532:	b29b      	uxth	r3, r3
 8006534:	4413      	add	r3, r2
 8006536:	b29a      	uxth	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3304      	adds	r3, #4
 800653c:	b212      	sxth	r2, r2
 800653e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006540:	697b      	ldr	r3, [r7, #20]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006554:	f107 020c 	add.w	r2, r7, #12
 8006558:	2306      	movs	r3, #6
 800655a:	2128      	movs	r1, #40	; 0x28
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fc54 	bl	8005e0a <lsm6dsr_read_reg>
 8006562:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006564:	7b7b      	ldrb	r3, [r7, #13]
 8006566:	b21a      	sxth	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006572:	b29b      	uxth	r3, r3
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	b29a      	uxth	r2, r3
 8006578:	7b3b      	ldrb	r3, [r7, #12]
 800657a:	b29b      	uxth	r3, r3
 800657c:	4413      	add	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	b21a      	sxth	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006586:	7bfa      	ldrb	r2, [r7, #15]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	3302      	adds	r3, #2
 800658c:	b212      	sxth	r2, r2
 800658e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	3302      	adds	r3, #2
 8006594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006598:	b29b      	uxth	r3, r3
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	b29a      	uxth	r2, r3
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	4413      	add	r3, r2
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	3302      	adds	r3, #2
 80065aa:	b212      	sxth	r2, r2
 80065ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80065ae:	7c7a      	ldrb	r2, [r7, #17]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	3304      	adds	r3, #4
 80065b4:	b212      	sxth	r2, r2
 80065b6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	3304      	adds	r3, #4
 80065bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	7c3b      	ldrb	r3, [r7, #16]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	3304      	adds	r3, #4
 80065d2:	b212      	sxth	r2, r2
 80065d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80065d6:	697b      	ldr	r3, [r7, #20]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80065ec:	f107 0208 	add.w	r2, r7, #8
 80065f0:	2301      	movs	r3, #1
 80065f2:	2101      	movs	r1, #1
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fc08 	bl	8005e0a <lsm6dsr_read_reg>
 80065fa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10f      	bne.n	8006622 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	b2da      	uxtb	r2, r3
 800660a:	7a3b      	ldrb	r3, [r7, #8]
 800660c:	f362 1387 	bfi	r3, r2, #6, #2
 8006610:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006612:	f107 0208 	add.w	r2, r7, #8
 8006616:	2301      	movs	r3, #1
 8006618:	2101      	movs	r1, #1
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fc0d 	bl	8005e3a <lsm6dsr_write_reg>
 8006620:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006622:	68fb      	ldr	r3, [r7, #12]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8006636:	2301      	movs	r3, #1
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	210f      	movs	r1, #15
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fbe4 	bl	8005e0a <lsm6dsr_read_reg>
 8006642:	60f8      	str	r0, [r7, #12]

  return ret;
 8006644:	68fb      	ldr	r3, [r7, #12]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800665a:	f107 0208 	add.w	r2, r7, #8
 800665e:	2301      	movs	r3, #1
 8006660:	2112      	movs	r1, #18
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff fbd1 	bl	8005e0a <lsm6dsr_read_reg>
 8006668:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10f      	bne.n	8006690 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	b2da      	uxtb	r2, r3
 8006678:	7a3b      	ldrb	r3, [r7, #8]
 800667a:	f362 0300 	bfi	r3, r2, #0, #1
 800667e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	2301      	movs	r3, #1
 8006686:	2112      	movs	r1, #18
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fbd6 	bl	8005e3a <lsm6dsr_write_reg>
 800668e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066a4:	f107 0208 	add.w	r2, r7, #8
 80066a8:	2301      	movs	r3, #1
 80066aa:	2112      	movs	r1, #18
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fbac 	bl	8005e0a <lsm6dsr_read_reg>
 80066b2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80066b4:	7a3b      	ldrb	r3, [r7, #8]
 80066b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	701a      	strb	r2, [r3, #0]

  return ret;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80066d6:	2102      	movs	r1, #2
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ff81 	bl	80065e0 <lsm6dsr_mem_bank_set>
 80066de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80066e6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80066e8:	2301      	movs	r3, #1
 80066ea:	2146      	movs	r1, #70	; 0x46
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fb8c 	bl	8005e0a <lsm6dsr_read_reg>
 80066f2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80066fe:	2301      	movs	r3, #1
 8006700:	2147      	movs	r1, #71	; 0x47
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fb81 	bl	8005e0a <lsm6dsr_read_reg>
 8006708:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006710:	2100      	movs	r1, #0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ff64 	bl	80065e0 <lsm6dsr_mem_bank_set>
 8006718:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800672e:	2102      	movs	r1, #2
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff55 	bl	80065e0 <lsm6dsr_mem_bank_set>
 8006736:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800673e:	f107 0208 	add.w	r2, r7, #8
 8006742:	2301      	movs	r3, #1
 8006744:	215f      	movs	r1, #95	; 0x5f
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fb5f 	bl	8005e0a <lsm6dsr_read_reg>
 800674c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006754:	2100      	movs	r1, #0
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ff42 	bl	80065e0 <lsm6dsr_mem_bank_set>
 800675c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800675e:	7a3b      	ldrb	r3, [r7, #8]
 8006760:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b03      	cmp	r3, #3
 8006768:	d81a      	bhi.n	80067a0 <lsm6dsr_fsm_data_rate_get+0x7c>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006781 	.word	0x08006781
 8006774:	08006789 	.word	0x08006789
 8006778:	08006791 	.word	0x08006791
 800677c:	08006799 	.word	0x08006799
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
      break;
 8006786:	e00f      	b.n	80067a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
      break;
 800678e:	e00b      	b.n	80067a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2202      	movs	r2, #2
 8006794:	701a      	strb	r2, [r3, #0]
      break;
 8006796:	e007      	b.n	80067a8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2203      	movs	r2, #3
 800679c:	701a      	strb	r2, [r3, #0]
      break;
 800679e:	e003      	b.n	80067a8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
      break;
 80067a6:	bf00      	nop
  }

  return ret;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop

080067b4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
 80067c0:	2208      	movs	r2, #8
 80067c2:	4905      	ldr	r1, [pc, #20]	; (80067d8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80067c4:	4805      	ldr	r0, [pc, #20]	; (80067dc <HAL_RTC_AlarmAEventCallback+0x28>)
 80067c6:	f006 feca 	bl	800d55e <HAL_UART_Transmit>
	flagA = 1;
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08020590 	.word	0x08020590
 80067dc:	20006c88 	.word	0x20006c88
 80067e0:	200006b8 	.word	0x200006b8

080067e4 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 80067e4:	b084      	sub	sp, #16
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	f107 0014 	add.w	r0, r7, #20
 80067f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 80067f6:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <MRT_SetupRTOS+0x50>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <MRT_SetupRTOS+0x54>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f107 0314 	add.w	r3, r7, #20
 8006804:	2244      	movs	r2, #68	; 0x44
 8006806:	4619      	mov	r1, r3
 8006808:	f013 f8f0 	bl	80199ec <memcpy>
	rtos.sleepTime = sleepT;
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <MRT_SetupRTOS+0x54>)
 800680e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006812:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8006816:	f04f 33ff 	mov.w	r3, #4294967295
 800681a:	2211      	movs	r2, #17
 800681c:	4907      	ldr	r1, [pc, #28]	; (800683c <MRT_SetupRTOS+0x58>)
 800681e:	4806      	ldr	r0, [pc, #24]	; (8006838 <MRT_SetupRTOS+0x54>)
 8006820:	f006 fe9d 	bl	800d55e <HAL_UART_Transmit>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800682e:	b004      	add	sp, #16
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20006cd0 	.word	0x20006cd0
 8006838:	20006c88 	.word	0x20006c88
 800683c:	080205a8 	.word	0x080205a8

08006840 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <MRT_WUProcedure+0x5c>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d11e      	bne.n	8006890 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <MRT_WUProcedure+0x60>)
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8006858:	4b10      	ldr	r3, [pc, #64]	; (800689c <MRT_WUProcedure+0x5c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a0f      	ldr	r2, [pc, #60]	; (800689c <MRT_WUProcedure+0x5c>)
 800685e:	f043 0308 	orr.w	r3, r3, #8
 8006862:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8006864:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <MRT_WUProcedure+0x64>)
 8006866:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7f9 fcc1 	bl	80001f0 <strlen>
 800686e:	4603      	mov	r3, r0
 8006870:	b29a      	uxth	r2, r3
 8006872:	f04f 33ff 	mov.w	r3, #4294967295
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <MRT_WUProcedure+0x68>)
 800687a:	f006 fe70 	bl	800d55e <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800687e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006882:	f003 fe2b 	bl	800a4dc <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <MRT_WUProcedure+0x6c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f005 fa24 	bl	800bcd8 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8006890:	f000 f80e 	bl	80068b0 <MRT_ClearFlags>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40007000 	.word	0x40007000
 80068a0:	200006b9 	.word	0x200006b9
 80068a4:	080205bc 	.word	0x080205bc
 80068a8:	20006c88 	.word	0x20006c88
 80068ac:	20006cd0 	.word	0x20006cd0

080068b0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80068b4:	f04f 33ff 	mov.w	r3, #4294967295
 80068b8:	2214      	movs	r2, #20
 80068ba:	4939      	ldr	r1, [pc, #228]	; (80069a0 <MRT_ClearFlags+0xf0>)
 80068bc:	4839      	ldr	r0, [pc, #228]	; (80069a4 <MRT_ClearFlags+0xf4>)
 80068be:	f006 fe4e 	bl	800d55e <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 80068c2:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <MRT_ClearFlags+0xf8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	22ca      	movs	r2, #202	; 0xca
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <MRT_ClearFlags+0xf8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2253      	movs	r2, #83	; 0x53
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80068d6:	e011      	b.n	80068fc <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	2217      	movs	r2, #23
 80068de:	4933      	ldr	r1, [pc, #204]	; (80069ac <MRT_ClearFlags+0xfc>)
 80068e0:	4830      	ldr	r0, [pc, #192]	; (80069a4 <MRT_ClearFlags+0xf4>)
 80068e2:	f006 fe3c 	bl	800d55e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 80068e6:	4b30      	ldr	r3, [pc, #192]	; (80069a8 <MRT_ClearFlags+0xf8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <MRT_ClearFlags+0xf8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80068fa:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 80068fc:	4b2a      	ldr	r3, [pc, #168]	; (80069a8 <MRT_ClearFlags+0xf8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 800690c:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <MRT_ClearFlags+0xf8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006916:	4b26      	ldr	r3, [pc, #152]	; (80069b0 <MRT_ClearFlags+0x100>)
 8006918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800691c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 800691e:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <MRT_ClearFlags+0xf8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	22ca      	movs	r2, #202	; 0xca
 8006926:	625a      	str	r2, [r3, #36]	; 0x24
 8006928:	4b1f      	ldr	r3, [pc, #124]	; (80069a8 <MRT_ClearFlags+0xf8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2253      	movs	r2, #83	; 0x53
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006932:	e011      	b.n	8006958 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	2217      	movs	r2, #23
 800693a:	491e      	ldr	r1, [pc, #120]	; (80069b4 <MRT_ClearFlags+0x104>)
 800693c:	4819      	ldr	r0, [pc, #100]	; (80069a4 <MRT_ClearFlags+0xf4>)
 800693e:	f006 fe0e 	bl	800d55e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <MRT_ClearFlags+0xf8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <MRT_ClearFlags+0xf8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006956:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8006958:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <MRT_ClearFlags+0xf8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e5      	bne.n	8006934 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <MRT_ClearFlags+0xf8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	22ff      	movs	r2, #255	; 0xff
 8006970:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <MRT_ClearFlags+0x100>)
 8006974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006978:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800697a:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <MRT_ClearFlags+0x108>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a0e      	ldr	r2, [pc, #56]	; (80069b8 <MRT_ClearFlags+0x108>)
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <MRT_ClearFlags+0xf8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <MRT_ClearFlags+0xf8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800699a:	60da      	str	r2, [r3, #12]
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	080205dc 	.word	0x080205dc
 80069a4:	20006c88 	.word	0x20006c88
 80069a8:	20006cd0 	.word	0x20006cd0
 80069ac:	080205f4 	.word	0x080205f4
 80069b0:	40013c00 	.word	0x40013c00
 80069b4:	0802060c 	.word	0x0802060c
 80069b8:	40007000 	.word	0x40007000

080069bc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80069bc:	b580      	push	{r7, lr}
 80069be:	b0a4      	sub	sp, #144	; 0x90
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295
 80069c8:	220f      	movs	r2, #15
 80069ca:	491c      	ldr	r1, [pc, #112]	; (8006a3c <MRT_StandByMode+0x80>)
 80069cc:	481c      	ldr	r0, [pc, #112]	; (8006a40 <MRT_StandByMode+0x84>)
 80069ce:	f006 fdc6 	bl	800d55e <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80069d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80069d6:	f003 fd6f 	bl	800a4b8 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 80069da:	f7ff ff69 	bl	80068b0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	2211      	movs	r2, #17
 80069e4:	4917      	ldr	r1, [pc, #92]	; (8006a44 <MRT_StandByMode+0x88>)
 80069e6:	4816      	ldr	r0, [pc, #88]	; (8006a40 <MRT_StandByMode+0x84>)
 80069e8:	f006 fdb9 	bl	800d55e <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4915      	ldr	r1, [pc, #84]	; (8006a48 <MRT_StandByMode+0x8c>)
 80069f4:	4618      	mov	r0, r3
 80069f6:	f014 f89f 	bl	801ab38 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7f9 fbf6 	bl	80001f0 <strlen>
 8006a04:	4603      	mov	r3, r0
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f107 0108 	add.w	r1, r7, #8
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	480b      	ldr	r0, [pc, #44]	; (8006a40 <MRT_StandByMode+0x84>)
 8006a12:	f006 fda4 	bl	800d55e <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8006a16:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <MRT_StandByMode+0x90>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f005 f89a 	bl	800bb58 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8006a2a:	f7fb ffef 	bl	8002a0c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8006a2e:	f003 fd69 	bl	800a504 <HAL_PWR_EnterSTANDBYMode>
}
 8006a32:	bf00      	nop
 8006a34:	3790      	adds	r7, #144	; 0x90
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08020624 	.word	0x08020624
 8006a40:	20006c88 	.word	0x20006c88
 8006a44:	08020634 	.word	0x08020634
 8006a48:	08020648 	.word	0x08020648
 8006a4c:	20006cd0 	.word	0x20006cd0

08006a50 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	71bb      	strb	r3, [r7, #6]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <MRT_setAlarmA+0x84>)
 8006a66:	5cd2      	ldrb	r2, [r2, r3]
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a6a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8006a6c:	79bb      	ldrb	r3, [r7, #6]
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <MRT_setAlarmA+0x84>)
 8006a70:	5cd2      	ldrb	r2, [r2, r3]
 8006a72:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a74:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8006a76:	797b      	ldrb	r3, [r7, #5]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <MRT_setAlarmA+0x84>)
 8006a7a:	5cd2      	ldrb	r2, [r2, r3]
 8006a7c:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a7e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006a80:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006a8c:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <MRT_setAlarmA+0x8c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	4907      	ldr	r1, [pc, #28]	; (8006ad8 <MRT_setAlarmA+0x88>)
 8006abc:	4618      	mov	r0, r3
 8006abe:	f004 fe3d 	bl	800b73c <HAL_RTC_SetAlarm_IT>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8006ac8:	f7fb ffa0 	bl	8002a0c <Error_Handler>
	  }
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000024 	.word	0x20000024
 8006ad8:	20000690 	.word	0x20000690
 8006adc:	20006cd0 	.word	0x20006cd0

08006ae0 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
 8006aea:	460b      	mov	r3, r1
 8006aec:	71bb      	strb	r3, [r7, #6]
 8006aee:	4613      	mov	r3, r2
 8006af0:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <MRT_setRTC+0x84>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8006afa:	79bb      	ldrb	r3, [r7, #6]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <MRT_setRTC+0x84>)
 8006afe:	5cd3      	ldrb	r3, [r2, r3]
 8006b00:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8006b02:	797b      	ldrb	r3, [r7, #5]
 8006b04:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <MRT_setRTC+0x84>)
 8006b06:	5cd3      	ldrb	r3, [r2, r3]
 8006b08:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <MRT_setRTC+0x88>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f107 010c 	add.w	r1, r7, #12
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f004 fbfc 	bl	800b31a <HAL_RTC_SetTime>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8006b28:	f7fb ff70 	bl	8002a0c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <MRT_setRTC+0x8c>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8006b32:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <MRT_setRTC+0x8c>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <MRT_setRTC+0x8c>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <MRT_setRTC+0x8c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006b44:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <MRT_setRTC+0x88>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4908      	ldr	r1, [pc, #32]	; (8006b6c <MRT_setRTC+0x8c>)
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f004 fcff 	bl	800b550 <HAL_RTC_SetDate>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8006b58:	f7fb ff58 	bl	8002a0c <Error_Handler>
	  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000024 	.word	0x20000024
 8006b68:	20006cd0 	.word	0x20006cd0
 8006b6c:	2000068c 	.word	0x2000068c

08006b70 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b80:	483f      	ldr	r0, [pc, #252]	; (8006c80 <Max31855_Read_Temp+0x110>)
 8006b82:	f001 fa21 	bl	8007fc8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8006b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	493d      	ldr	r1, [pc, #244]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006b8e:	483e      	ldr	r0, [pc, #248]	; (8006c88 <Max31855_Read_Temp+0x118>)
 8006b90:	f005 fac9 	bl	800c126 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8006b94:	2201      	movs	r2, #1
 8006b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b9a:	4839      	ldr	r0, [pc, #228]	; (8006c80 <Max31855_Read_Temp+0x110>)
 8006b9c:	f001 fa14 	bl	8007fc8 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8006ba0:	4b38      	ldr	r3, [pc, #224]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	431a      	orrs	r2, r3
 8006bae:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	4b33      	ldr	r3, [pc, #204]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	061b      	lsls	r3, r3, #24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <Max31855_Read_Temp+0x11c>)
 8006bcc:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8006bce:	4b2d      	ldr	r3, [pc, #180]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	09db      	lsrs	r3, r3, #7
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <Max31855_Read_Temp+0x120>)
 8006bda:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006bde:	78db      	ldrb	r3, [r3, #3]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8006be8:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006bea:	78db      	ldrb	r3, [r3, #3]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bfa:	4b26      	ldr	r3, [pc, #152]	; (8006c94 <Max31855_Read_Temp+0x124>)
 8006bfc:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8006c00:	e039      	b.n	8006c76 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <Max31855_Read_Temp+0x120>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d120      	bne.n	8006c4c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	019b      	lsls	r3, r3, #6
 8006c10:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006c12:	7852      	ldrb	r2, [r2, #1]
 8006c14:	0892      	lsrs	r2, r2, #2
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c22:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8006c2a:	f083 031f 	eor.w	r3, r3, #31
 8006c2e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	425b      	negs	r3, r3
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c3c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c44:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <Max31855_Read_Temp+0x124>)
 8006c46:	edc3 7a00 	vstr	s15, [r3]
}
 8006c4a:	e014      	b.n	8006c76 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	019b      	lsls	r3, r3, #6
 8006c52:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <Max31855_Read_Temp+0x114>)
 8006c54:	7852      	ldrb	r2, [r2, #1]
 8006c56:	0892      	lsrs	r2, r2, #2
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c68:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <Max31855_Read_Temp+0x124>)
 8006c72:	edc3 7a00 	vstr	s15, [r3]
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	20006cd4 	.word	0x20006cd4
 8006c88:	20006764 	.word	0x20006764
 8006c8c:	200006ba 	.word	0x200006ba
 8006c90:	200006bc 	.word	0x200006bc
 8006c94:	200068a8 	.word	0x200068a8

08006c98 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8006c98:	b40f      	push	{r0, r1, r2, r3}
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cae:	480a      	ldr	r0, [pc, #40]	; (8006cd8 <myprintf+0x40>)
 8006cb0:	f014 ff54 	bl	801bb5c <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8006cb4:	4808      	ldr	r0, [pc, #32]	; (8006cd8 <myprintf+0x40>)
 8006cb6:	f7f9 fa9b 	bl	80001f0 <strlen>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc2:	4905      	ldr	r1, [pc, #20]	; (8006cd8 <myprintf+0x40>)
 8006cc4:	4805      	ldr	r0, [pc, #20]	; (8006cdc <myprintf+0x44>)
 8006cc6:	f006 fc4a 	bl	800d55e <HAL_UART_Transmit>

}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd4:	b004      	add	sp, #16
 8006cd6:	4770      	bx	lr
 8006cd8:	200006c0 	.word	0x200006c0
 8006cdc:	20005e58 	.word	0x20005e58

08006ce0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8006cec:	2201      	movs	r2, #1
 8006cee:	4932      	ldr	r1, [pc, #200]	; (8006db8 <sd_init_dynamic_filename+0xd8>)
 8006cf0:	4832      	ldr	r0, [pc, #200]	; (8006dbc <sd_init_dynamic_filename+0xdc>)
 8006cf2:	f00c fb11 	bl	8013318 <f_mount>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8006d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d08:	4619      	mov	r1, r3
 8006d0a:	482d      	ldr	r0, [pc, #180]	; (8006dc0 <sd_init_dynamic_filename+0xe0>)
 8006d0c:	f7ff ffc4 	bl	8006c98 <myprintf>
		return fres;
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d14:	e04b      	b.n	8006dae <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8006d1a:	f107 0320 	add.w	r3, r7, #32
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68f9      	ldr	r1, [r7, #12]
 8006d22:	4825      	ldr	r0, [pc, #148]	; (8006db8 <sd_init_dynamic_filename+0xd8>)
 8006d24:	f000 f89c 	bl	8006e60 <scan_files>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	f107 0310 	add.w	r3, r7, #16
 8006d36:	4923      	ldr	r1, [pc, #140]	; (8006dc4 <sd_init_dynamic_filename+0xe4>)
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f013 fefd 	bl	801ab38 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8006d3e:	f107 0310 	add.w	r3, r7, #16
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f013 ff88 	bl	801ac5a <strcpy>
 8006d4a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	221a      	movs	r2, #26
 8006d52:	4619      	mov	r1, r3
 8006d54:	481c      	ldr	r0, [pc, #112]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d56:	f00c fb43 	bl	80133e0 <f_open>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8006d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11a      	bne.n	8006d9e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8006d68:	4818      	ldr	r0, [pc, #96]	; (8006dcc <sd_init_dynamic_filename+0xec>)
 8006d6a:	f7ff ff95 	bl	8006c98 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006d6e:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	4619      	mov	r1, r3
 8006d74:	4814      	ldr	r0, [pc, #80]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d76:	f00c ff54 	bl	8013c22 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8006d7a:	4915      	ldr	r1, [pc, #84]	; (8006dd0 <sd_init_dynamic_filename+0xf0>)
 8006d7c:	4815      	ldr	r0, [pc, #84]	; (8006dd4 <sd_init_dynamic_filename+0xf4>)
 8006d7e:	f013 fedb 	bl	801ab38 <siprintf>
	sd_write(&fil, msg_buffer);
 8006d82:	4914      	ldr	r1, [pc, #80]	; (8006dd4 <sd_init_dynamic_filename+0xf4>)
 8006d84:	4810      	ldr	r0, [pc, #64]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d86:	f000 f841 	bl	8006e0c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	480e      	ldr	r0, [pc, #56]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d8e:	f000 f83d 	bl	8006e0c <sd_write>
	f_close(&fil);
 8006d92:	480d      	ldr	r0, [pc, #52]	; (8006dc8 <sd_init_dynamic_filename+0xe8>)
 8006d94:	f00c ff16 	bl	8013bc4 <f_close>

	return fres;
 8006d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d9c:	e007      	b.n	8006dae <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8006d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da2:	4619      	mov	r1, r3
 8006da4:	480c      	ldr	r0, [pc, #48]	; (8006dd8 <sd_init_dynamic_filename+0xf8>)
 8006da6:	f7ff ff77 	bl	8006c98 <myprintf>
		return fres;
 8006daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	08020668 	.word	0x08020668
 8006dbc:	20006004 	.word	0x20006004
 8006dc0:	0802066c 	.word	0x0802066c
 8006dc4:	080206e8 	.word	0x080206e8
 8006dc8:	20006918 	.word	0x20006918
 8006dcc:	08020684 	.word	0x08020684
 8006dd0:	080206c8 	.word	0x080206c8
 8006dd4:	20006cd8 	.word	0x20006cd8
 8006dd8:	080206b4 	.word	0x080206b4

08006ddc <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8006de4:	2212      	movs	r2, #18
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4807      	ldr	r0, [pc, #28]	; (8006e08 <sd_open_file+0x2c>)
 8006dea:	f00c faf9 	bl	80133e0 <f_open>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <sd_open_file+0x2c>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4619      	mov	r1, r3
 8006df8:	4803      	ldr	r0, [pc, #12]	; (8006e08 <sd_open_file+0x2c>)
 8006dfa:	f00c ff12 	bl	8013c22 <f_lseek>

	return fres;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20006918 	.word	0x20006918

08006e0c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8006e16:	6838      	ldr	r0, [r7, #0]
 8006e18:	f7f9 f9ea 	bl	80001f0 <strlen>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f00c fca0 	bl	801376a <f_write>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4807      	ldr	r0, [pc, #28]	; (8006e58 <sd_write+0x4c>)
 8006e3a:	f7ff ff2d 	bl	8006c98 <myprintf>
		return bytesWrote;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	e004      	b.n	8006e4e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8006e44:	4805      	ldr	r0, [pc, #20]	; (8006e5c <sd_write+0x50>)
 8006e46:	f7ff ff27 	bl	8006c98 <myprintf>
		return -1;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	080206f4 	.word	0x080206f4
 8006e5c:	08020718 	.word	0x08020718

08006e60 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	b099      	sub	sp, #100	; 0x64
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	466b      	mov	r3, sp
 8006e6e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8006e70:	68b8      	ldr	r0, [r7, #8]
 8006e72:	f7f9 f9bd 	bl	80001f0 <strlen>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8006e7c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8006e80:	4623      	mov	r3, r4
 8006e82:	3b01      	subs	r3, #1
 8006e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e86:	b2e0      	uxtb	r0, r4
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	00cb      	lsls	r3, r1, #3
 8006e96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006e9a:	00c2      	lsls	r2, r0, #3
 8006e9c:	b2e0      	uxtb	r0, r4
 8006e9e:	f04f 0100 	mov.w	r1, #0
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	00cb      	lsls	r3, r1, #3
 8006eac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006eb0:	00c2      	lsls	r2, r0, #3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	3307      	adds	r3, #7
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	ebad 0d03 	sub.w	sp, sp, r3
 8006ebe:	466b      	mov	r3, sp
 8006ec0:	3300      	adds	r3, #0
 8006ec2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68b8      	ldr	r0, [r7, #8]
 8006eca:	f000 f8ff 	bl	80070cc <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8006ed8:	f107 0318 	add.w	r3, r7, #24
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f00d f8f2 	bl	80140c8 <f_opendir>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8006eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d16c      	bne.n	8006fcc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	4939      	ldr	r1, [pc, #228]	; (8006fdc <scan_files+0x17c>)
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f00d f989 	bl	8014210 <f_readdir>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d15a      	bne.n	8006fc2 <scan_files+0x162>
 8006f0c:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <scan_files+0x17c>)
 8006f0e:	7a5b      	ldrb	r3, [r3, #9]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d056      	beq.n	8006fc2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8006f14:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <scan_files+0x17c>)
 8006f16:	7a1b      	ldrb	r3, [r3, #8]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d14e      	bne.n	8006fbe <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8006f20:	466b      	mov	r3, sp
 8006f22:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8006f24:	482e      	ldr	r0, [pc, #184]	; (8006fe0 <scan_files+0x180>)
 8006f26:	f7f9 f963 	bl	80001f0 <strlen>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4623      	mov	r3, r4
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	653b      	str	r3, [r7, #80]	; 0x50
 8006f32:	4620      	mov	r0, r4
 8006f34:	f04f 0100 	mov.w	r1, #0
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	00cb      	lsls	r3, r1, #3
 8006f42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f46:	00c2      	lsls	r2, r0, #3
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	00cb      	lsls	r3, r1, #3
 8006f58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006f5c:	00c2      	lsls	r2, r0, #3
 8006f5e:	1de3      	adds	r3, r4, #7
 8006f60:	08db      	lsrs	r3, r3, #3
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	ebad 0d03 	sub.w	sp, sp, r3
 8006f68:	466b      	mov	r3, sp
 8006f6a:	3300      	adds	r3, #0
 8006f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8006f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f70:	4619      	mov	r1, r3
 8006f72:	481b      	ldr	r0, [pc, #108]	; (8006fe0 <scan_files+0x180>)
 8006f74:	f000 f8aa 	bl	80070cc <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8006f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4817      	ldr	r0, [pc, #92]	; (8006fe0 <scan_files+0x180>)
 8006f82:	f013 fe72 	bl	801ac6a <strncmp>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8006f8c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d112      	bne.n	8006fba <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	f107 0214 	add.w	r2, r7, #20
 8006f9a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f820 	bl	8006fe4 <extract_filename_suffix>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d202      	bcs.n	8006fba <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	46b5      	mov	sp, r6
 8006fbc:	e799      	b.n	8006ef2 <scan_files+0x92>
            	continue; // don't enter directory
 8006fbe:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006fc0:	e797      	b.n	8006ef2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8006fc2:	f107 0318 	add.w	r3, r7, #24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f00d f8f7 	bl	80141ba <f_closedir>
    }

    return res;
 8006fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fd0:	46ad      	mov	sp, r5
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3764      	adds	r7, #100	; 0x64
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200007c0 	.word	0x200007c0
 8006fe0:	200007c9 	.word	0x200007c9

08006fe4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8006fe4:	b5b0      	push	{r4, r5, r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	460b      	mov	r3, r1
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	72fb      	strb	r3, [r7, #11]
 8006ff2:	466b      	mov	r3, sp
 8006ff4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7f9 f8fa 	bl	80001f0 <strlen>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8007000:	2308      	movs	r3, #8
 8007002:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8007004:	7f7c      	ldrb	r4, [r7, #29]
 8007006:	4623      	mov	r3, r4
 8007008:	3b01      	subs	r3, #1
 800700a:	61bb      	str	r3, [r7, #24]
 800700c:	b2e0      	uxtb	r0, r4
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	00cb      	lsls	r3, r1, #3
 800701c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007020:	00c2      	lsls	r2, r0, #3
 8007022:	b2e0      	uxtb	r0, r4
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	00cb      	lsls	r3, r1, #3
 8007032:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007036:	00c2      	lsls	r2, r0, #3
 8007038:	4623      	mov	r3, r4
 800703a:	3307      	adds	r3, #7
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	ebad 0d03 	sub.w	sp, sp, r3
 8007044:	466b      	mov	r3, sp
 8007046:	3300      	adds	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e014      	b.n	800707a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	1e5a      	subs	r2, r3, #1
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	441a      	add	r2, r3
 8007058:	7fbb      	ldrb	r3, [r7, #30]
 800705a:	3b01      	subs	r3, #1
 800705c:	429a      	cmp	r2, r3
 800705e:	da11      	bge.n	8007084 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8007060:	7afa      	ldrb	r2, [r7, #11]
 8007062:	7ffb      	ldrb	r3, [r7, #31]
 8007064:	4413      	add	r3, r2
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	441a      	add	r2, r3
 800706c:	7ffb      	ldrb	r3, [r7, #31]
 800706e:	7811      	ldrb	r1, [r2, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8007074:	7ffb      	ldrb	r3, [r7, #31]
 8007076:	3301      	adds	r3, #1
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	7ffa      	ldrb	r2, [r7, #31]
 800707c:	7f7b      	ldrb	r3, [r7, #29]
 800707e:	429a      	cmp	r2, r3
 8007080:	d3e6      	bcc.n	8007050 <extract_filename_suffix+0x6c>
 8007082:	e000      	b.n	8007086 <extract_filename_suffix+0xa2>
		}
		else break;
 8007084:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f107 0110 	add.w	r1, r7, #16
 800708c:	220a      	movs	r2, #10
 800708e:	4618      	mov	r0, r3
 8007090:	f014 fcb0 	bl	801b9f4 <strtol>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d00a      	beq.n	80070ba <extract_filename_suffix+0xd6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ac:	d005      	beq.n	80070ba <extract_filename_suffix+0xd6>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d101      	bne.n	80070be <extract_filename_suffix+0xda>
	{
		return 1;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	46ad      	mov	sp, r5
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080070cc <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80070cc:	b590      	push	{r4, r7, lr}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
 80070da:	e019      	b.n	8007110 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	73bb      	strb	r3, [r7, #14]
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a0f      	ldr	r2, [pc, #60]	; (8007128 <str2upper+0x5c>)
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d102      	bne.n	80070fe <str2upper+0x32>
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	3b20      	subs	r3, #32
 80070fc:	e000      	b.n	8007100 <str2upper+0x34>
 80070fe:	7bbb      	ldrb	r3, [r7, #14]
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	440a      	add	r2, r1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	3301      	adds	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
 8007110:	7bfc      	ldrb	r4, [r7, #15]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7f9 f86c 	bl	80001f0 <strlen>
 8007118:	4603      	mov	r3, r0
 800711a:	429c      	cmp	r4, r3
 800711c:	d3de      	bcc.n	80070dc <str2upper+0x10>
	}
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}
 8007128:	080209e0 	.word	0x080209e0

0800712c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <HAL_Init+0x40>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <HAL_Init+0x40>)
 8007136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800713a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_Init+0x40>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <HAL_Init+0x40>)
 8007142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_Init+0x40>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a07      	ldr	r2, [pc, #28]	; (800716c <HAL_Init+0x40>)
 800714e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007154:	2003      	movs	r0, #3
 8007156:	f000 fd30 	bl	8007bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800715a:	2000      	movs	r0, #0
 800715c:	f7fb ff98 	bl	8003090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007160:	f7fb fc5c 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40023c00 	.word	0x40023c00

08007170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <HAL_IncTick+0x20>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	4b06      	ldr	r3, [pc, #24]	; (8007194 <HAL_IncTick+0x24>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4413      	add	r3, r2
 8007180:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_IncTick+0x24>)
 8007182:	6013      	str	r3, [r2, #0]
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000064 	.word	0x20000064
 8007194:	200070c0 	.word	0x200070c0

08007198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return uwTick;
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <HAL_GetTick+0x14>)
 800719e:	681b      	ldr	r3, [r3, #0]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	200070c0 	.word	0x200070c0

080071b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071b8:	f7ff ffee 	bl	8007198 <HAL_GetTick>
 80071bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c8:	d005      	beq.n	80071d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <HAL_Delay+0x44>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80071d6:	bf00      	nop
 80071d8:	f7ff ffde 	bl	8007198 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d8f7      	bhi.n	80071d8 <HAL_Delay+0x28>
  {
  }
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000064 	.word	0x20000064

080071f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e033      	b.n	8007276 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fb fc2c 	bl	8002a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	d118      	bne.n	8007268 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800723e:	f023 0302 	bic.w	r3, r3, #2
 8007242:	f043 0202 	orr.w	r2, r3, #2
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fae8 	bl	8007820 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
 8007266:	e001      	b.n	800726c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_ADC_Start+0x1a>
 8007296:	2302      	movs	r3, #2
 8007298:	e0b2      	b.n	8007400 <HAL_ADC_Start+0x180>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d018      	beq.n	80072e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80072c0:	4b52      	ldr	r3, [pc, #328]	; (800740c <HAL_ADC_Start+0x18c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a52      	ldr	r2, [pc, #328]	; (8007410 <HAL_ADC_Start+0x190>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	0c9a      	lsrs	r2, r3, #18
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072d4:	e002      	b.n	80072dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f9      	bne.n	80072d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d17a      	bne.n	80073e6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800731a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732e:	d106      	bne.n	800733e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007334:	f023 0206 	bic.w	r2, r3, #6
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	645a      	str	r2, [r3, #68]	; 0x44
 800733c:	e002      	b.n	8007344 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800734c:	4b31      	ldr	r3, [pc, #196]	; (8007414 <HAL_ADC_Start+0x194>)
 800734e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007358:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	2b00      	cmp	r3, #0
 8007364:	d12a      	bne.n	80073bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <HAL_ADC_Start+0x198>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d015      	beq.n	800739c <HAL_ADC_Start+0x11c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a29      	ldr	r2, [pc, #164]	; (800741c <HAL_ADC_Start+0x19c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d105      	bne.n	8007386 <HAL_ADC_Start+0x106>
 800737a:	4b26      	ldr	r3, [pc, #152]	; (8007414 <HAL_ADC_Start+0x194>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a25      	ldr	r2, [pc, #148]	; (8007420 <HAL_ADC_Start+0x1a0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d136      	bne.n	80073fe <HAL_ADC_Start+0x17e>
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_ADC_Start+0x194>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d130      	bne.n	80073fe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d129      	bne.n	80073fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073b8:	609a      	str	r2, [r3, #8]
 80073ba:	e020      	b.n	80073fe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <HAL_ADC_Start+0x198>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d11b      	bne.n	80073fe <HAL_ADC_Start+0x17e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	e00b      	b.n	80073fe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f043 0210 	orr.w	r2, r3, #16
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000000 	.word	0x20000000
 8007410:	431bde83 	.word	0x431bde83
 8007414:	40012300 	.word	0x40012300
 8007418:	40012000 	.word	0x40012000
 800741c:	40012100 	.word	0x40012100
 8007420:	40012200 	.word	0x40012200

08007424 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_ADC_Stop+0x16>
 8007436:	2302      	movs	r3, #2
 8007438:	e021      	b.n	800747e <HAL_ADC_Stop+0x5a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0201 	bic.w	r2, r2, #1
 8007450:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f043 0201 	orr.w	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a6:	d113      	bne.n	80074d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80074b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b6:	d10b      	bne.n	80074d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	f043 0220 	orr.w	r2, r3, #32
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e063      	b.n	8007598 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80074d0:	f7ff fe62 	bl	8007198 <HAL_GetTick>
 80074d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074d6:	e021      	b.n	800751c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d01d      	beq.n	800751c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <HAL_ADC_PollForConversion+0x6c>
 80074e6:	f7ff fe57 	bl	8007198 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d212      	bcs.n	800751c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d00b      	beq.n	800751c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	f043 0204 	orr.w	r2, r3, #4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e03d      	b.n	8007598 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d1d6      	bne.n	80074d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f06f 0212 	mvn.w	r2, #18
 8007532:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d123      	bne.n	8007596 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d11f      	bne.n	8007596 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007560:	2b00      	cmp	r3, #0
 8007562:	d006      	beq.n	8007572 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800756e:	2b00      	cmp	r3, #0
 8007570:	d111      	bne.n	8007596 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_ADC_ConfigChannel+0x1c>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e113      	b.n	8007800 <HAL_ADC_ConfigChannel+0x244>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d925      	bls.n	8007634 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68d9      	ldr	r1, [r3, #12]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	461a      	mov	r2, r3
 80075f6:	4613      	mov	r3, r2
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	4413      	add	r3, r2
 80075fc:	3b1e      	subs	r3, #30
 80075fe:	2207      	movs	r2, #7
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43da      	mvns	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	400a      	ands	r2, r1
 800760c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68d9      	ldr	r1, [r3, #12]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	4618      	mov	r0, r3
 8007620:	4603      	mov	r3, r0
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4403      	add	r3, r0
 8007626:	3b1e      	subs	r3, #30
 8007628:	409a      	lsls	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	60da      	str	r2, [r3, #12]
 8007632:	e022      	b.n	800767a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6919      	ldr	r1, [r3, #16]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	2207      	movs	r2, #7
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	43da      	mvns	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	400a      	ands	r2, r1
 8007656:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6919      	ldr	r1, [r3, #16]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	4618      	mov	r0, r3
 800766a:	4603      	mov	r3, r0
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4403      	add	r3, r0
 8007670:	409a      	lsls	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b06      	cmp	r3, #6
 8007680:	d824      	bhi.n	80076cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	3b05      	subs	r3, #5
 8007694:	221f      	movs	r2, #31
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43da      	mvns	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	400a      	ands	r2, r1
 80076a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4618      	mov	r0, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	3b05      	subs	r3, #5
 80076be:	fa00 f203 	lsl.w	r2, r0, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	635a      	str	r2, [r3, #52]	; 0x34
 80076ca:	e04c      	b.n	8007766 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	d824      	bhi.n	800771e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	3b23      	subs	r3, #35	; 0x23
 80076e6:	221f      	movs	r2, #31
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	43da      	mvns	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	400a      	ands	r2, r1
 80076f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	4618      	mov	r0, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	3b23      	subs	r3, #35	; 0x23
 8007710:	fa00 f203 	lsl.w	r2, r0, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
 800771c:	e023      	b.n	8007766 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	3b41      	subs	r3, #65	; 0x41
 8007730:	221f      	movs	r2, #31
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43da      	mvns	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	400a      	ands	r2, r1
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	4618      	mov	r0, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	3b41      	subs	r3, #65	; 0x41
 800775a:	fa00 f203 	lsl.w	r2, r0, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007766:	4b29      	ldr	r3, [pc, #164]	; (800780c <HAL_ADC_ConfigChannel+0x250>)
 8007768:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a28      	ldr	r2, [pc, #160]	; (8007810 <HAL_ADC_ConfigChannel+0x254>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d10f      	bne.n	8007794 <HAL_ADC_ConfigChannel+0x1d8>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b12      	cmp	r3, #18
 800777a:	d10b      	bne.n	8007794 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <HAL_ADC_ConfigChannel+0x254>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d12b      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x23a>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_ADC_ConfigChannel+0x258>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <HAL_ADC_ConfigChannel+0x1f4>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b11      	cmp	r3, #17
 80077ae:	d122      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a11      	ldr	r2, [pc, #68]	; (8007814 <HAL_ADC_ConfigChannel+0x258>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d111      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <HAL_ADC_ConfigChannel+0x25c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a11      	ldr	r2, [pc, #68]	; (800781c <HAL_ADC_ConfigChannel+0x260>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	0c9a      	lsrs	r2, r3, #18
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80077e8:	e002      	b.n	80077f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f9      	bne.n	80077ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40012300 	.word	0x40012300
 8007810:	40012000 	.word	0x40012000
 8007814:	10000012 	.word	0x10000012
 8007818:	20000000 	.word	0x20000000
 800781c:	431bde83 	.word	0x431bde83

08007820 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007828:	4b79      	ldr	r3, [pc, #484]	; (8007a10 <ADC_Init+0x1f0>)
 800782a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	431a      	orrs	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6859      	ldr	r1, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	021a      	lsls	r2, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6859      	ldr	r1, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800789a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6899      	ldr	r1, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	4a58      	ldr	r2, [pc, #352]	; (8007a14 <ADC_Init+0x1f4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d022      	beq.n	80078fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6899      	ldr	r1, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80078e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6899      	ldr	r1, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	e00f      	b.n	800791e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800790c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800791c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0202 	bic.w	r2, r2, #2
 800792c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7e1b      	ldrb	r3, [r3, #24]
 8007938:	005a      	lsls	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01b      	beq.n	8007984 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800796a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	3b01      	subs	r3, #1
 8007978:	035a      	lsls	r2, r3, #13
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e007      	b.n	8007994 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007992:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	051a      	lsls	r2, r3, #20
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079d6:	025a      	lsls	r2, r3, #9
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6899      	ldr	r1, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	029a      	lsls	r2, r3, #10
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
}
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	40012300 	.word	0x40012300
 8007a14:	0f000001 	.word	0x0f000001

08007a18 <__NVIC_SetPriorityGrouping>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <__NVIC_SetPriorityGrouping+0x44>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a34:	4013      	ands	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <__NVIC_SetPriorityGrouping+0x44>)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	60d3      	str	r3, [r2, #12]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	e000ed00 	.word	0xe000ed00

08007a60 <__NVIC_GetPriorityGrouping>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <__NVIC_GetPriorityGrouping+0x18>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	f003 0307 	and.w	r3, r3, #7
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	e000ed00 	.word	0xe000ed00

08007a7c <__NVIC_EnableIRQ>:
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	db0b      	blt.n	8007aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	f003 021f 	and.w	r2, r3, #31
 8007a94:	4907      	ldr	r1, [pc, #28]	; (8007ab4 <__NVIC_EnableIRQ+0x38>)
 8007a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	e000e100 	.word	0xe000e100

08007ab8 <__NVIC_DisableIRQ>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	db12      	blt.n	8007af0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	f003 021f 	and.w	r2, r3, #31
 8007ad0:	490a      	ldr	r1, [pc, #40]	; (8007afc <__NVIC_DisableIRQ+0x44>)
 8007ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	2001      	movs	r0, #1
 8007ada:	fa00 f202 	lsl.w	r2, r0, r2
 8007ade:	3320      	adds	r3, #32
 8007ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ae4:	f3bf 8f4f 	dsb	sy
}
 8007ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007aea:	f3bf 8f6f 	isb	sy
}
 8007aee:	bf00      	nop
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000e100 	.word	0xe000e100

08007b00 <__NVIC_SetPriority>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db0a      	blt.n	8007b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	490c      	ldr	r1, [pc, #48]	; (8007b4c <__NVIC_SetPriority+0x4c>)
 8007b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1e:	0112      	lsls	r2, r2, #4
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	440b      	add	r3, r1
 8007b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b28:	e00a      	b.n	8007b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	4908      	ldr	r1, [pc, #32]	; (8007b50 <__NVIC_SetPriority+0x50>)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	3b04      	subs	r3, #4
 8007b38:	0112      	lsls	r2, r2, #4
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	761a      	strb	r2, [r3, #24]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	e000e100 	.word	0xe000e100
 8007b50:	e000ed00 	.word	0xe000ed00

08007b54 <NVIC_EncodePriority>:
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f1c3 0307 	rsb	r3, r3, #7
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	bf28      	it	cs
 8007b72:	2304      	movcs	r3, #4
 8007b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	2b06      	cmp	r3, #6
 8007b7c:	d902      	bls.n	8007b84 <NVIC_EncodePriority+0x30>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3b03      	subs	r3, #3
 8007b82:	e000      	b.n	8007b86 <NVIC_EncodePriority+0x32>
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	43da      	mvns	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	401a      	ands	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	43d9      	mvns	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bac:	4313      	orrs	r3, r2
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3724      	adds	r7, #36	; 0x24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff ff28 	bl	8007a18 <__NVIC_SetPriorityGrouping>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007be2:	f7ff ff3d 	bl	8007a60 <__NVIC_GetPriorityGrouping>
 8007be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	6978      	ldr	r0, [r7, #20]
 8007bee:	f7ff ffb1 	bl	8007b54 <NVIC_EncodePriority>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ff80 	bl	8007b00 <__NVIC_SetPriority>
}
 8007c00:	bf00      	nop
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff ff30 	bl	8007a7c <__NVIC_EnableIRQ>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ff40 	bl	8007ab8 <__NVIC_DisableIRQ>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b089      	sub	sp, #36	; 0x24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	61fb      	str	r3, [r7, #28]
 8007c5a:	e177      	b.n	8007f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	fa02 f303 	lsl.w	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	f040 8166 	bne.w	8007f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d005      	beq.n	8007c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d130      	bne.n	8007cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cc8:	2201      	movs	r2, #1
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	f003 0201 	and.w	r2, r3, #1
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d017      	beq.n	8007d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d123      	bne.n	8007d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	08da      	lsrs	r2, r3, #3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3208      	adds	r2, #8
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	220f      	movs	r2, #15
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	08da      	lsrs	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3208      	adds	r2, #8
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	2203      	movs	r2, #3
 8007d90:	fa02 f303 	lsl.w	r3, r2, r3
 8007d94:	43db      	mvns	r3, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 0203 	and.w	r2, r3, #3
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80c0 	beq.w	8007f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	4b66      	ldr	r3, [pc, #408]	; (8007f64 <HAL_GPIO_Init+0x324>)
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	4a65      	ldr	r2, [pc, #404]	; (8007f64 <HAL_GPIO_Init+0x324>)
 8007dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8007dd6:	4b63      	ldr	r3, [pc, #396]	; (8007f64 <HAL_GPIO_Init+0x324>)
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007de2:	4a61      	ldr	r2, [pc, #388]	; (8007f68 <HAL_GPIO_Init+0x328>)
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	089b      	lsrs	r3, r3, #2
 8007de8:	3302      	adds	r3, #2
 8007dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	220f      	movs	r2, #15
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a58      	ldr	r2, [pc, #352]	; (8007f6c <HAL_GPIO_Init+0x32c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d037      	beq.n	8007e7e <HAL_GPIO_Init+0x23e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a57      	ldr	r2, [pc, #348]	; (8007f70 <HAL_GPIO_Init+0x330>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d031      	beq.n	8007e7a <HAL_GPIO_Init+0x23a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a56      	ldr	r2, [pc, #344]	; (8007f74 <HAL_GPIO_Init+0x334>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02b      	beq.n	8007e76 <HAL_GPIO_Init+0x236>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a55      	ldr	r2, [pc, #340]	; (8007f78 <HAL_GPIO_Init+0x338>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d025      	beq.n	8007e72 <HAL_GPIO_Init+0x232>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a54      	ldr	r2, [pc, #336]	; (8007f7c <HAL_GPIO_Init+0x33c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01f      	beq.n	8007e6e <HAL_GPIO_Init+0x22e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a53      	ldr	r2, [pc, #332]	; (8007f80 <HAL_GPIO_Init+0x340>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d019      	beq.n	8007e6a <HAL_GPIO_Init+0x22a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a52      	ldr	r2, [pc, #328]	; (8007f84 <HAL_GPIO_Init+0x344>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <HAL_GPIO_Init+0x226>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a51      	ldr	r2, [pc, #324]	; (8007f88 <HAL_GPIO_Init+0x348>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00d      	beq.n	8007e62 <HAL_GPIO_Init+0x222>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a50      	ldr	r2, [pc, #320]	; (8007f8c <HAL_GPIO_Init+0x34c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d007      	beq.n	8007e5e <HAL_GPIO_Init+0x21e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a4f      	ldr	r2, [pc, #316]	; (8007f90 <HAL_GPIO_Init+0x350>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d101      	bne.n	8007e5a <HAL_GPIO_Init+0x21a>
 8007e56:	2309      	movs	r3, #9
 8007e58:	e012      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	e010      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e5e:	2308      	movs	r3, #8
 8007e60:	e00e      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e62:	2307      	movs	r3, #7
 8007e64:	e00c      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e66:	2306      	movs	r3, #6
 8007e68:	e00a      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e6a:	2305      	movs	r3, #5
 8007e6c:	e008      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e6e:	2304      	movs	r3, #4
 8007e70:	e006      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e72:	2303      	movs	r3, #3
 8007e74:	e004      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e002      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <HAL_GPIO_Init+0x240>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	f002 0203 	and.w	r2, r2, #3
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	4093      	lsls	r3, r2
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e90:	4935      	ldr	r1, [pc, #212]	; (8007f68 <HAL_GPIO_Init+0x328>)
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	089b      	lsrs	r3, r3, #2
 8007e96:	3302      	adds	r3, #2
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ec2:	4a34      	ldr	r2, [pc, #208]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ec8:	4b32      	ldr	r3, [pc, #200]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007eec:	4a29      	ldr	r2, [pc, #164]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ef2:	4b28      	ldr	r3, [pc, #160]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	43db      	mvns	r3, r3
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f16:	4a1f      	ldr	r2, [pc, #124]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f1c:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f40:	4a14      	ldr	r2, [pc, #80]	; (8007f94 <HAL_GPIO_Init+0x354>)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	f67f ae84 	bls.w	8007c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40023800 	.word	0x40023800
 8007f68:	40013800 	.word	0x40013800
 8007f6c:	40020000 	.word	0x40020000
 8007f70:	40020400 	.word	0x40020400
 8007f74:	40020800 	.word	0x40020800
 8007f78:	40020c00 	.word	0x40020c00
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	40021400 	.word	0x40021400
 8007f84:	40021800 	.word	0x40021800
 8007f88:	40021c00 	.word	0x40021c00
 8007f8c:	40022000 	.word	0x40022000
 8007f90:	40022400 	.word	0x40022400
 8007f94:	40013c00 	.word	0x40013c00

08007f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	73fb      	strb	r3, [r7, #15]
 8007fb4:	e001      	b.n	8007fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fd8:	787b      	ldrb	r3, [r7, #1]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fde:	887a      	ldrh	r2, [r7, #2]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fe4:	e003      	b.n	8007fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	041a      	lsls	r2, r3, #16
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	619a      	str	r2, [r3, #24]
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008008:	695a      	ldr	r2, [r3, #20]
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	4013      	ands	r3, r2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	4618      	mov	r0, r3
 800801c:	f7fb fc98 	bl	8003950 <HAL_GPIO_EXTI_Callback>
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40013c00 	.word	0x40013c00

0800802c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e12b      	b.n	8008296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fa fd52 	bl	8002afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2224      	movs	r2, #36	; 0x24
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0201 	bic.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800807e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800808e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008090:	f002 fe9a 	bl	800adc8 <HAL_RCC_GetPCLK1Freq>
 8008094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4a81      	ldr	r2, [pc, #516]	; (80082a0 <HAL_I2C_Init+0x274>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d807      	bhi.n	80080b0 <HAL_I2C_Init+0x84>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a80      	ldr	r2, [pc, #512]	; (80082a4 <HAL_I2C_Init+0x278>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	bf94      	ite	ls
 80080a8:	2301      	movls	r3, #1
 80080aa:	2300      	movhi	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	e006      	b.n	80080be <HAL_I2C_Init+0x92>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a7d      	ldr	r2, [pc, #500]	; (80082a8 <HAL_I2C_Init+0x27c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	bf94      	ite	ls
 80080b8:	2301      	movls	r3, #1
 80080ba:	2300      	movhi	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0e7      	b.n	8008296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a78      	ldr	r2, [pc, #480]	; (80082ac <HAL_I2C_Init+0x280>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	0c9b      	lsrs	r3, r3, #18
 80080d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	4a6a      	ldr	r2, [pc, #424]	; (80082a0 <HAL_I2C_Init+0x274>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d802      	bhi.n	8008100 <HAL_I2C_Init+0xd4>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3301      	adds	r3, #1
 80080fe:	e009      	b.n	8008114 <HAL_I2C_Init+0xe8>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	4a69      	ldr	r2, [pc, #420]	; (80082b0 <HAL_I2C_Init+0x284>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	099b      	lsrs	r3, r3, #6
 8008112:	3301      	adds	r3, #1
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	430b      	orrs	r3, r1
 800811a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	495c      	ldr	r1, [pc, #368]	; (80082a0 <HAL_I2C_Init+0x274>)
 8008130:	428b      	cmp	r3, r1
 8008132:	d819      	bhi.n	8008168 <HAL_I2C_Init+0x13c>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	1e59      	subs	r1, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008148:	400b      	ands	r3, r1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_I2C_Init+0x138>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	1e59      	subs	r1, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	fbb1 f3f3 	udiv	r3, r1, r3
 800815c:	3301      	adds	r3, #1
 800815e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008162:	e051      	b.n	8008208 <HAL_I2C_Init+0x1dc>
 8008164:	2304      	movs	r3, #4
 8008166:	e04f      	b.n	8008208 <HAL_I2C_Init+0x1dc>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d111      	bne.n	8008194 <HAL_I2C_Init+0x168>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	1e58      	subs	r0, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6859      	ldr	r1, [r3, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	440b      	add	r3, r1
 800817e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008182:	3301      	adds	r3, #1
 8008184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008188:	2b00      	cmp	r3, #0
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	e012      	b.n	80081ba <HAL_I2C_Init+0x18e>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	1e58      	subs	r0, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6859      	ldr	r1, [r3, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	0099      	lsls	r1, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80081aa:	3301      	adds	r3, #1
 80081ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf0c      	ite	eq
 80081b4:	2301      	moveq	r3, #1
 80081b6:	2300      	movne	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <HAL_I2C_Init+0x196>
 80081be:	2301      	movs	r3, #1
 80081c0:	e022      	b.n	8008208 <HAL_I2C_Init+0x1dc>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10e      	bne.n	80081e8 <HAL_I2C_Init+0x1bc>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1e58      	subs	r0, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	440b      	add	r3, r1
 80081d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80081dc:	3301      	adds	r3, #1
 80081de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e6:	e00f      	b.n	8008208 <HAL_I2C_Init+0x1dc>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	1e58      	subs	r0, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6859      	ldr	r1, [r3, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	0099      	lsls	r1, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80081fe:	3301      	adds	r3, #1
 8008200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	6809      	ldr	r1, [r1, #0]
 800820c:	4313      	orrs	r3, r2
 800820e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6911      	ldr	r1, [r2, #16]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68d2      	ldr	r2, [r2, #12]
 8008242:	4311      	orrs	r1, r2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	430b      	orrs	r3, r1
 800824a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	000186a0 	.word	0x000186a0
 80082a4:	001e847f 	.word	0x001e847f
 80082a8:	003d08ff 	.word	0x003d08ff
 80082ac:	431bde83 	.word	0x431bde83
 80082b0:	10624dd3 	.word	0x10624dd3

080082b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	817b      	strh	r3, [r7, #10]
 80082c6:	460b      	mov	r3, r1
 80082c8:	813b      	strh	r3, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80082ce:	f7fe ff63 	bl	8007198 <HAL_GetTick>
 80082d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 80d9 	bne.w	8008494 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	2319      	movs	r3, #25
 80082e8:	2201      	movs	r2, #1
 80082ea:	496d      	ldr	r1, [pc, #436]	; (80084a0 <HAL_I2C_Mem_Write+0x1ec>)
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fcb5 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0cc      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_I2C_Mem_Write+0x56>
 8008306:	2302      	movs	r3, #2
 8008308:	e0c5      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b01      	cmp	r3, #1
 800831e:	d007      	beq.n	8008330 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0201 	orr.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800833e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2221      	movs	r2, #33	; 0x21
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2240      	movs	r2, #64	; 0x40
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a3a      	ldr	r2, [r7, #32]
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a4d      	ldr	r2, [pc, #308]	; (80084a4 <HAL_I2C_Mem_Write+0x1f0>)
 8008370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008372:	88f8      	ldrh	r0, [r7, #6]
 8008374:	893a      	ldrh	r2, [r7, #8]
 8008376:	8979      	ldrh	r1, [r7, #10]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4603      	mov	r3, r0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 faec 	bl	8008960 <I2C_RequestMemoryWrite>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d052      	beq.n	8008434 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e081      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fd36 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00d      	beq.n	80083be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d107      	bne.n	80083ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e06b      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d11b      	bne.n	8008434 <HAL_I2C_Mem_Write+0x180>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d017      	beq.n	8008434 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841e:	3b01      	subs	r3, #1
 8008420:	b29a      	uxth	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b01      	subs	r3, #1
 800842e:	b29a      	uxth	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1aa      	bne.n	8008392 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fd22 	bl	8008e8a <I2C_WaitOnBTFFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00d      	beq.n	8008468 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	2b04      	cmp	r3, #4
 8008452:	d107      	bne.n	8008464 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008462:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e016      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	e000      	b.n	8008496 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008494:	2302      	movs	r3, #2
  }
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	00100002 	.word	0x00100002
 80084a4:	ffff0000 	.word	0xffff0000

080084a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	; 0x30
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	817b      	strh	r3, [r7, #10]
 80084ba:	460b      	mov	r3, r1
 80084bc:	813b      	strh	r3, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084c2:	f7fe fe69 	bl	8007198 <HAL_GetTick>
 80084c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	f040 8208 	bne.w	80088e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	2319      	movs	r3, #25
 80084dc:	2201      	movs	r2, #1
 80084de:	497b      	ldr	r1, [pc, #492]	; (80086cc <HAL_I2C_Mem_Read+0x224>)
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fbbb 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
 80084ee:	e1fb      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_I2C_Mem_Read+0x56>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e1f4      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b01      	cmp	r3, #1
 8008512:	d007      	beq.n	8008524 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2222      	movs	r2, #34	; 0x22
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2240      	movs	r2, #64	; 0x40
 8008540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a5b      	ldr	r2, [pc, #364]	; (80086d0 <HAL_I2C_Mem_Read+0x228>)
 8008564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008566:	88f8      	ldrh	r0, [r7, #6]
 8008568:	893a      	ldrh	r2, [r7, #8]
 800856a:	8979      	ldrh	r1, [r7, #10]
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fa88 	bl	8008a8c <I2C_RequestMemoryRead>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e1b0      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d113      	bne.n	80085b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800858e:	2300      	movs	r3, #0
 8008590:	623b      	str	r3, [r7, #32]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	623b      	str	r3, [r7, #32]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	623b      	str	r3, [r7, #32]
 80085a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e184      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d11b      	bne.n	80085f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e164      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d11b      	bne.n	8008636 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800860c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800861c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	e144      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800864c:	e138      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008652:	2b03      	cmp	r3, #3
 8008654:	f200 80f1 	bhi.w	800883a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865c:	2b01      	cmp	r3, #1
 800865e:	d123      	bne.n	80086a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fc51 	bl	8008f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e139      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008690:	3b01      	subs	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086a6:	e10b      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d14e      	bne.n	800874e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	2200      	movs	r2, #0
 80086b8:	4906      	ldr	r1, [pc, #24]	; (80086d4 <HAL_I2C_Mem_Read+0x22c>)
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 face 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e10e      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
 80086ca:	bf00      	nop
 80086cc:	00100002 	.word	0x00100002
 80086d0:	ffff0000 	.word	0xffff0000
 80086d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	3b01      	subs	r3, #1
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008742:	b29b      	uxth	r3, r3
 8008744:	3b01      	subs	r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800874c:	e0b8      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	2200      	movs	r2, #0
 8008756:	4966      	ldr	r1, [pc, #408]	; (80088f0 <HAL_I2C_Mem_Read+0x448>)
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fa7f 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0bf      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691a      	ldr	r2, [r3, #16]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2200      	movs	r2, #0
 80087b2:	494f      	ldr	r1, [pc, #316]	; (80088f0 <HAL_I2C_Mem_Read+0x448>)
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fa51 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e091      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008838:	e042      	b.n	80088c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800883a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fb64 	bl	8008f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e04c      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886a:	3b01      	subs	r3, #1
 800886c:	b29a      	uxth	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d118      	bne.n	80088c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f47f aec2 	bne.w	800864e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e000      	b.n	80088e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80088e6:	2302      	movs	r3, #2
  }
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3728      	adds	r7, #40	; 0x28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	00010004 	.word	0x00010004

080088f4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b20      	cmp	r3, #32
 8008906:	d124      	bne.n	8008952 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2228      	movs	r2, #40	; 0x28
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b01      	cmp	r3, #1
 800891c:	d007      	beq.n	800892e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0201 	orr.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800893c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800894c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	e000      	b.n	8008954 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008952:	2302      	movs	r3, #2
  }
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af02      	add	r7, sp, #8
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	461a      	mov	r2, r3
 800896e:	4603      	mov	r3, r0
 8008970:	817b      	strh	r3, [r7, #10]
 8008972:	460b      	mov	r3, r1
 8008974:	813b      	strh	r3, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	2200      	movs	r2, #0
 8008992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f960 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b0:	d103      	bne.n	80089ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e05f      	b.n	8008a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089be:	897b      	ldrh	r3, [r7, #10]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	6a3a      	ldr	r2, [r7, #32]
 80089d2:	492d      	ldr	r1, [pc, #180]	; (8008a88 <I2C_RequestMemoryWrite+0x128>)
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f998 	bl	8008d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e04c      	b.n	8008a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	6a39      	ldr	r1, [r7, #32]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fa02 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d107      	bne.n	8008a22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e02b      	b.n	8008a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d105      	bne.n	8008a38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a2c:	893b      	ldrh	r3, [r7, #8]
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	611a      	str	r2, [r3, #16]
 8008a36:	e021      	b.n	8008a7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a38:	893b      	ldrh	r3, [r7, #8]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a48:	6a39      	ldr	r1, [r7, #32]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f9dc 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00d      	beq.n	8008a72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d107      	bne.n	8008a6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e005      	b.n	8008a7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a72:	893b      	ldrh	r3, [r7, #8]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	00010002 	.word	0x00010002

08008a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	817b      	strh	r3, [r7, #10]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	813b      	strh	r3, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ab4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f8c2 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aec:	d103      	bne.n	8008af6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e0aa      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008afa:	897b      	ldrh	r3, [r7, #10]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	4952      	ldr	r1, [pc, #328]	; (8008c58 <I2C_RequestMemoryRead+0x1cc>)
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f8fa 	bl	8008d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e097      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	6a39      	ldr	r1, [r7, #32]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f964 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d107      	bne.n	8008b5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e076      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b62:	88fb      	ldrh	r3, [r7, #6]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d105      	bne.n	8008b74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	611a      	str	r2, [r3, #16]
 8008b72:	e021      	b.n	8008bb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b74:	893b      	ldrh	r3, [r7, #8]
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b84:	6a39      	ldr	r1, [r7, #32]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f93e 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00d      	beq.n	8008bae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d107      	bne.n	8008baa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e050      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bae:	893b      	ldrh	r3, [r7, #8]
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	6a39      	ldr	r1, [r7, #32]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f923 	bl	8008e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00d      	beq.n	8008be4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d107      	bne.n	8008be0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e035      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f82b 	bl	8008c5c <I2C_WaitOnFlagUntilTimeout>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1a:	d103      	bne.n	8008c24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e013      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c28:	897b      	ldrh	r3, [r7, #10]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	6a3a      	ldr	r2, [r7, #32]
 8008c3c:	4906      	ldr	r1, [pc, #24]	; (8008c58 <I2C_RequestMemoryRead+0x1cc>)
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f863 	bl	8008d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	00010002 	.word	0x00010002

08008c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c6c:	e025      	b.n	8008cba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d021      	beq.n	8008cba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c76:	f7fe fa8f 	bl	8007198 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d302      	bcc.n	8008c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d116      	bne.n	8008cba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f043 0220 	orr.w	r2, r3, #32
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e023      	b.n	8008d02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	0c1b      	lsrs	r3, r3, #16
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d10d      	bne.n	8008ce0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	43da      	mvns	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2301      	moveq	r3, #1
 8008cd8:	2300      	movne	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	e00c      	b.n	8008cfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	43da      	mvns	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4013      	ands	r3, r2
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf0c      	ite	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	2300      	movne	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d0b6      	beq.n	8008c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d18:	e051      	b.n	8008dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d28:	d123      	bne.n	8008d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f043 0204 	orr.w	r2, r3, #4
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e046      	b.n	8008e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d021      	beq.n	8008dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7a:	f7fe fa0d 	bl	8007198 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d302      	bcc.n	8008d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d116      	bne.n	8008dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f043 0220 	orr.w	r2, r3, #32
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e020      	b.n	8008e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	0c1b      	lsrs	r3, r3, #16
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d10c      	bne.n	8008de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	43da      	mvns	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bf14      	ite	ne
 8008dda:	2301      	movne	r3, #1
 8008ddc:	2300      	moveq	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	e00b      	b.n	8008dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	43da      	mvns	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	4013      	ands	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d18d      	bne.n	8008d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e14:	e02d      	b.n	8008e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f8ce 	bl	8008fb8 <I2C_IsAcknowledgeFailed>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e02d      	b.n	8008e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d021      	beq.n	8008e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e2e:	f7fe f9b3 	bl	8007198 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d116      	bne.n	8008e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e007      	b.n	8008e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7c:	2b80      	cmp	r3, #128	; 0x80
 8008e7e:	d1ca      	bne.n	8008e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e96:	e02d      	b.n	8008ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 f88d 	bl	8008fb8 <I2C_IsAcknowledgeFailed>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e02d      	b.n	8008f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	d021      	beq.n	8008ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb0:	f7fe f972 	bl	8007198 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d302      	bcc.n	8008ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d116      	bne.n	8008ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	f043 0220 	orr.w	r2, r3, #32
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e007      	b.n	8008f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d1ca      	bne.n	8008e98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f18:	e042      	b.n	8008fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d119      	bne.n	8008f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0210 	mvn.w	r2, #16
 8008f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e029      	b.n	8008fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f5c:	f7fe f91c 	bl	8007198 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d116      	bne.n	8008fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f043 0220 	orr.w	r2, r3, #32
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e007      	b.n	8008fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b40      	cmp	r3, #64	; 0x40
 8008fac:	d1b5      	bne.n	8008f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fce:	d11b      	bne.n	8009008 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	f043 0204 	orr.w	r2, r3, #4
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b20      	cmp	r3, #32
 800902a:	d129      	bne.n	8009080 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	; 0x24
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0210 	bic.w	r2, r2, #16
 8009052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	e000      	b.n	8009082 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009080:	2302      	movs	r3, #2
  }
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d12a      	bne.n	80090fe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2224      	movs	r2, #36	; 0x24
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0201 	bic.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	f023 030f 	bic.w	r3, r3, #15
 80090ce:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	89fa      	ldrh	r2, [r7, #14]
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e000      	b.n	8009100 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80090fe:	2302      	movs	r3, #2
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e034      	b.n	8009188 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009126:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f245 5255 	movw	r2, #21845	; 0x5555
 8009130:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6852      	ldr	r2, [r2, #4]
 800913a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6892      	ldr	r2, [r2, #8]
 8009144:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009146:	f7fe f827 	bl	8007198 <HAL_GetTick>
 800914a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800914c:	e00f      	b.n	800916e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800914e:	f7fe f823 	bl	8007198 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	2b31      	cmp	r3, #49	; 0x31
 800915a:	d908      	bls.n	800916e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e00c      	b.n	8009188 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e8      	bne.n	800914e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009184:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80091a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80091b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091b2:	b08f      	sub	sp, #60	; 0x3c
 80091b4:	af0a      	add	r7, sp, #40	; 0x28
 80091b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e10f      	b.n	80093e2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f00e ffe5 	bl	80181ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2203      	movs	r2, #3
 80091e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f004 fe2c 	bl	800de5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	687e      	ldr	r6, [r7, #4]
 800920e:	466d      	mov	r5, sp
 8009210:	f106 0410 	add.w	r4, r6, #16
 8009214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800921a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800921c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009220:	e885 0003 	stmia.w	r5, {r0, r1}
 8009224:	1d33      	adds	r3, r6, #4
 8009226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f004 fd03 	bl	800dc34 <USB_CoreInit>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e0d0      	b.n	80093e2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f004 fe1a 	bl	800de80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
 8009250:	e04a      	b.n	80092e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	333d      	adds	r3, #61	; 0x3d
 8009262:	2201      	movs	r2, #1
 8009264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009266:	7bfa      	ldrb	r2, [r7, #15]
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	333c      	adds	r3, #60	; 0x3c
 8009276:	7bfa      	ldrb	r2, [r7, #15]
 8009278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800927a:	7bfa      	ldrb	r2, [r7, #15]
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	b298      	uxth	r0, r3
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	3342      	adds	r3, #66	; 0x42
 800928e:	4602      	mov	r2, r0
 8009290:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009292:	7bfa      	ldrb	r2, [r7, #15]
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	333f      	adds	r3, #63	; 0x3f
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80092a6:	7bfa      	ldrb	r2, [r7, #15]
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	1a9b      	subs	r3, r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	3344      	adds	r3, #68	; 0x44
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80092ba:	7bfa      	ldrb	r2, [r7, #15]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	3348      	adds	r3, #72	; 0x48
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80092ce:	7bfa      	ldrb	r2, [r7, #15]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	1a9b      	subs	r3, r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	3350      	adds	r3, #80	; 0x50
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	3301      	adds	r3, #1
 80092e6:	73fb      	strb	r3, [r7, #15]
 80092e8:	7bfa      	ldrb	r2, [r7, #15]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d3af      	bcc.n	8009252 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
 80092f6:	e044      	b.n	8009382 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80092f8:	7bfa      	ldrb	r2, [r7, #15]
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800930e:	7bfa      	ldrb	r2, [r7, #15]
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009320:	7bfa      	ldrb	r2, [r7, #15]
 8009322:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009324:	7bfa      	ldrb	r2, [r7, #15]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800933a:	7bfa      	ldrb	r2, [r7, #15]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	1a9b      	subs	r3, r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009366:	7bfa      	ldrb	r2, [r7, #15]
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	3301      	adds	r3, #1
 8009380:	73fb      	strb	r3, [r7, #15]
 8009382:	7bfa      	ldrb	r2, [r7, #15]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d3b5      	bcc.n	80092f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	687e      	ldr	r6, [r7, #4]
 8009394:	466d      	mov	r5, sp
 8009396:	f106 0410 	add.w	r4, r6, #16
 800939a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800939c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800939e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80093aa:	1d33      	adds	r3, r6, #4
 80093ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093ae:	6838      	ldr	r0, [r7, #0]
 80093b0:	f004 fdb2 	bl	800df18 <USB_DevInit>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e00d      	b.n	80093e2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f005 fe2e 	bl	800f03c <USB_DevDisconnect>

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_PCD_Start+0x1c>
 8009402:	2302      	movs	r3, #2
 8009404:	e020      	b.n	8009448 <HAL_PCD_Start+0x5e>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009412:	2b01      	cmp	r3, #1
 8009414:	d109      	bne.n	800942a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800941a:	2b01      	cmp	r3, #1
 800941c:	d005      	beq.n	800942a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f004 fd04 	bl	800de3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f005 fdde 	bl	800effa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b08d      	sub	sp, #52	; 0x34
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f005 fe9c 	bl	800f1a4 <USB_GetMode>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 839d 	bne.w	8009bae <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f005 fe00 	bl	800f07e <USB_ReadInterrupts>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8393 	beq.w	8009bac <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f005 fdf7 	bl	800f07e <USB_ReadInterrupts>
 8009490:	4603      	mov	r3, r0
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b02      	cmp	r3, #2
 8009498:	d107      	bne.n	80094aa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	695a      	ldr	r2, [r3, #20]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f002 0202 	and.w	r2, r2, #2
 80094a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f005 fde5 	bl	800f07e <USB_ReadInterrupts>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d161      	bne.n	8009582 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0210 	bic.w	r2, r2, #16
 80094cc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f003 020f 	and.w	r2, r3, #15
 80094da:	4613      	mov	r3, r2
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4413      	add	r3, r2
 80094ea:	3304      	adds	r3, #4
 80094ec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	0c5b      	lsrs	r3, r3, #17
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d124      	bne.n	8009544 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009500:	4013      	ands	r3, r2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d035      	beq.n	8009572 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	091b      	lsrs	r3, r3, #4
 800950e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009514:	b29b      	uxth	r3, r3
 8009516:	461a      	mov	r2, r3
 8009518:	6a38      	ldr	r0, [r7, #32]
 800951a:	f005 fc1c 	bl	800ed56 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	091b      	lsrs	r3, r3, #4
 8009526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800952a:	441a      	add	r2, r3
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	091b      	lsrs	r3, r3, #4
 8009538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800953c:	441a      	add	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	619a      	str	r2, [r3, #24]
 8009542:	e016      	b.n	8009572 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	0c5b      	lsrs	r3, r3, #17
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	2b06      	cmp	r3, #6
 800954e:	d110      	bne.n	8009572 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009556:	2208      	movs	r2, #8
 8009558:	4619      	mov	r1, r3
 800955a:	6a38      	ldr	r0, [r7, #32]
 800955c:	f005 fbfb 	bl	800ed56 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	091b      	lsrs	r3, r3, #4
 8009568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800956c:	441a      	add	r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	699a      	ldr	r2, [r3, #24]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0210 	orr.w	r2, r2, #16
 8009580:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f005 fd79 	bl	800f07e <USB_ReadInterrupts>
 800958c:	4603      	mov	r3, r0
 800958e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009592:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009596:	d16e      	bne.n	8009676 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f005 fd7f 	bl	800f0a4 <USB_ReadDevAllOutEpInterrupt>
 80095a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80095a8:	e062      	b.n	8009670 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d057      	beq.n	8009664 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f005 fda4 	bl	800f10c <USB_ReadDevOutEPInterrupt>
 80095c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095dc:	461a      	mov	r2, r3
 80095de:	2301      	movs	r3, #1
 80095e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80095e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fdb1 	bl	800a14c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00c      	beq.n	800960e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	461a      	mov	r2, r3
 8009602:	2308      	movs	r3, #8
 8009604:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 feab 	bl	800a364 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	461a      	mov	r2, r3
 8009626:	2310      	movs	r3, #16
 8009628:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d008      	beq.n	8009646 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	461a      	mov	r2, r3
 8009642:	2320      	movs	r3, #32
 8009644:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965c:	461a      	mov	r2, r3
 800965e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009662:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	3301      	adds	r3, #1
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	085b      	lsrs	r3, r3, #1
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d199      	bne.n	80095aa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4618      	mov	r0, r3
 800967c:	f005 fcff 	bl	800f07e <USB_ReadInterrupts>
 8009680:	4603      	mov	r3, r0
 8009682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800968a:	f040 80c0 	bne.w	800980e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f005 fd20 	bl	800f0d8 <USB_ReadDevAllInEpInterrupt>
 8009698:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800969e:	e0b2      	b.n	8009806 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80a7 	beq.w	80097fa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	4611      	mov	r1, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f005 fd46 	bl	800f148 <USB_ReadDevInEPInterrupt>
 80096bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d057      	beq.n	8009778 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	2201      	movs	r2, #1
 80096d0:	fa02 f303 	lsl.w	r3, r2, r3
 80096d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	69f9      	ldr	r1, [r7, #28]
 80096e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e8:	4013      	ands	r3, r2
 80096ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	461a      	mov	r2, r3
 80096fa:	2301      	movs	r3, #1
 80096fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d132      	bne.n	800976c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3348      	adds	r3, #72	; 0x48
 8009716:	6819      	ldr	r1, [r3, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971c:	4613      	mov	r3, r2
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4403      	add	r3, r0
 8009726:	3344      	adds	r3, #68	; 0x44
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4419      	add	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009730:	4613      	mov	r3, r2
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	1a9b      	subs	r3, r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4403      	add	r3, r0
 800973a:	3348      	adds	r3, #72	; 0x48
 800973c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d113      	bne.n	800976c <HAL_PCD_IRQHandler+0x31c>
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009748:	4613      	mov	r3, r2
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3350      	adds	r3, #80	; 0x50
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d108      	bne.n	800976c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009764:	461a      	mov	r2, r3
 8009766:	2101      	movs	r1, #1
 8009768:	f005 fd4e 	bl	800f208 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	b2db      	uxtb	r3, r3
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f00e fda9 	bl	80182ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f003 0308 	and.w	r3, r3, #8
 800977e:	2b00      	cmp	r3, #0
 8009780:	d008      	beq.n	8009794 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	461a      	mov	r2, r3
 8009790:	2308      	movs	r3, #8
 8009792:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f003 0310 	and.w	r3, r3, #16
 800979a:	2b00      	cmp	r3, #0
 800979c:	d008      	beq.n	80097b0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097aa:	461a      	mov	r2, r3
 80097ac:	2310      	movs	r3, #16
 80097ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d008      	beq.n	80097cc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c6:	461a      	mov	r2, r3
 80097c8:	2340      	movs	r3, #64	; 0x40
 80097ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d008      	beq.n	80097e8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e2:	461a      	mov	r2, r3
 80097e4:	2302      	movs	r3, #2
 80097e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80097f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fc1b 	bl	800a030 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	3301      	adds	r3, #1
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	2b00      	cmp	r3, #0
 800980a:	f47f af49 	bne.w	80096a0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f005 fc33 	bl	800f07e <USB_ReadInterrupts>
 8009818:	4603      	mov	r3, r0
 800981a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800981e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009822:	d122      	bne.n	800986a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fe27 	bl	800a4a0 <HAL_PCDEx_LPM_Callback>
 8009852:	e002      	b.n	800985a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f00e fdaf 	bl	80183b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f005 fc05 	bl	800f07e <USB_ReadInterrupts>
 8009874:	4603      	mov	r3, r0
 8009876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800987a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987e:	d112      	bne.n	80098a6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d102      	bne.n	8009896 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f00e fd6b 	bl	801836c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695a      	ldr	r2, [r3, #20]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80098a4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f005 fbe7 	bl	800f07e <USB_ReadInterrupts>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ba:	f040 80c7 	bne.w	8009a4c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098cc:	f023 0301 	bic.w	r3, r3, #1
 80098d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2110      	movs	r1, #16
 80098d8:	4618      	mov	r0, r3
 80098da:	f004 fc81 	bl	800e1e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098de:	2300      	movs	r3, #0
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e2:	e056      	b.n	8009992 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f0:	461a      	mov	r2, r3
 80098f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009908:	0151      	lsls	r1, r2, #5
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	440a      	add	r2, r1
 800990e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009916:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009928:	0151      	lsls	r1, r2, #5
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	440a      	add	r2, r1
 800992e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009944:	461a      	mov	r2, r3
 8009946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800994a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800996a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	440a      	add	r2, r1
 8009982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009986:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800998a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	3301      	adds	r3, #1
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009998:	429a      	cmp	r2, r3
 800999a:	d3a3      	bcc.n	80098e4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80099ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d016      	beq.n	80099e6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c8:	f043 030b 	orr.w	r3, r3, #11
 80099cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099de:	f043 030b 	orr.w	r3, r3, #11
 80099e2:	6453      	str	r3, [r2, #68]	; 0x44
 80099e4:	e015      	b.n	8009a12 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80099f8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80099fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	69fa      	ldr	r2, [r7, #28]
 8009a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a0c:	f043 030b 	orr.w	r3, r3, #11
 8009a10:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a24:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a36:	461a      	mov	r2, r3
 8009a38:	f005 fbe6 	bl	800f208 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695a      	ldr	r2, [r3, #20]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f005 fb14 	bl	800f07e <USB_ReadInterrupts>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a60:	d124      	bne.n	8009aac <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f005 fbaa 	bl	800f1c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f004 fc12 	bl	800e29a <USB_GetDevSpeed>
 8009a76:	4603      	mov	r3, r0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681c      	ldr	r4, [r3, #0]
 8009a82:	f001 f995 	bl	800adb0 <HAL_RCC_GetHCLKFreq>
 8009a86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	4620      	mov	r0, r4
 8009a92:	f004 f931 	bl	800dcf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f00e fc3f 	bl	801831a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	695a      	ldr	r2, [r3, #20]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f005 fae4 	bl	800f07e <USB_ReadInterrupts>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f003 0308 	and.w	r3, r3, #8
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d10a      	bne.n	8009ad6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f00e fc1c 	bl	80182fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f002 0208 	and.w	r2, r2, #8
 8009ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f005 facf 	bl	800f07e <USB_ReadInterrupts>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aea:	d10f      	bne.n	8009b0c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f00e fc7e 	bl	80183f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695a      	ldr	r2, [r3, #20]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f005 fab4 	bl	800f07e <USB_ReadInterrupts>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b20:	d10f      	bne.n	8009b42 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f00e fc51 	bl	80183d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695a      	ldr	r2, [r3, #20]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f005 fa99 	bl	800f07e <USB_ReadInterrupts>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b56:	d10a      	bne.n	8009b6e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f00e fc5f 	bl	801841c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	695a      	ldr	r2, [r3, #20]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f005 fa83 	bl	800f07e <USB_ReadInterrupts>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d115      	bne.n	8009bae <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f00e fc4f 	bl	8018438 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6859      	ldr	r1, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
 8009baa:	e000      	b.n	8009bae <HAL_PCD_IRQHandler+0x75e>
      return;
 8009bac:	bf00      	nop
    }
  }
}
 8009bae:	3734      	adds	r7, #52	; 0x34
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd90      	pop	{r4, r7, pc}

08009bb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_PCD_SetAddress+0x1a>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e013      	b.n	8009bf6 <HAL_PCD_SetAddress+0x42>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	78fa      	ldrb	r2, [r7, #3]
 8009bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f005 f9e1 	bl	800efae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	70fb      	strb	r3, [r7, #3]
 8009c10:	460b      	mov	r3, r1
 8009c12:	803b      	strh	r3, [r7, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da0f      	bge.n	8009c44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	3338      	adds	r3, #56	; 0x38
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	4413      	add	r3, r2
 8009c38:	3304      	adds	r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	705a      	strb	r2, [r3, #1]
 8009c42:	e00f      	b.n	8009c64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	f003 020f 	and.w	r2, r3, #15
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	f003 030f 	and.w	r3, r3, #15
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009c70:	883a      	ldrh	r2, [r7, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	78ba      	ldrb	r2, [r7, #2]
 8009c7a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	785b      	ldrb	r3, [r3, #1]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009c8e:	78bb      	ldrb	r3, [r7, #2]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d102      	bne.n	8009c9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_PCD_EP_Open+0xaa>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e00e      	b.n	8009cc6 <HAL_PCD_EP_Open+0xc8>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f004 fb14 	bl	800e2e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da0f      	bge.n	8009d02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	f003 020f 	and.w	r2, r3, #15
 8009ce8:	4613      	mov	r3, r2
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	1a9b      	subs	r3, r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	3338      	adds	r3, #56	; 0x38
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	705a      	strb	r2, [r3, #1]
 8009d00:	e00f      	b.n	8009d22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	f003 020f 	and.w	r2, r3, #15
 8009d08:	4613      	mov	r3, r2
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_PCD_EP_Close+0x6e>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e00e      	b.n	8009d5a <HAL_PCD_EP_Close+0x8c>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f004 fb52 	bl	800e3f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d72:	7afb      	ldrb	r3, [r7, #11]
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	4613      	mov	r3, r2
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	3304      	adds	r3, #4
 8009d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2200      	movs	r2, #0
 8009da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	f003 030f 	and.w	r3, r3, #15
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d109      	bne.n	8009ddc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6979      	ldr	r1, [r7, #20]
 8009dd6:	f004 fe2d 	bl	800ea34 <USB_EP0StartXfer>
 8009dda:	e008      	b.n	8009dee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	461a      	mov	r2, r3
 8009de8:	6979      	ldr	r1, [r7, #20]
 8009dea:	f004 fbdf 	bl	800e5ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	f003 020f 	and.w	r2, r3, #15
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	1a9b      	subs	r3, r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009e1a:	681b      	ldr	r3, [r3, #0]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	460b      	mov	r3, r1
 8009e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	f003 020f 	and.w	r2, r3, #15
 8009e3e:	4613      	mov	r3, r2
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	3338      	adds	r3, #56	; 0x38
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2201      	movs	r2, #1
 8009e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e68:	7afb      	ldrb	r3, [r7, #11]
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d102      	bne.n	8009e82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d109      	bne.n	8009ea0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	6979      	ldr	r1, [r7, #20]
 8009e9a:	f004 fdcb 	bl	800ea34 <USB_EP0StartXfer>
 8009e9e:	e008      	b.n	8009eb2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	461a      	mov	r2, r3
 8009eac:	6979      	ldr	r1, [r7, #20]
 8009eae:	f004 fb7d 	bl	800e5ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	f003 020f 	and.w	r2, r3, #15
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d901      	bls.n	8009eda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e050      	b.n	8009f7c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da0f      	bge.n	8009f02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	f003 020f 	and.w	r2, r3, #15
 8009ee8:	4613      	mov	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	3338      	adds	r3, #56	; 0x38
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	705a      	strb	r2, [r3, #1]
 8009f00:	e00d      	b.n	8009f1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009f02:	78fa      	ldrb	r2, [r7, #3]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	4413      	add	r3, r2
 8009f14:	3304      	adds	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d101      	bne.n	8009f3e <HAL_PCD_EP_SetStall+0x82>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e01e      	b.n	8009f7c <HAL_PCD_EP_SetStall+0xc0>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f004 ff5a 	bl	800ee06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	b2d9      	uxtb	r1, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	f005 f94b 	bl	800f208 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d901      	bls.n	8009fa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e042      	b.n	800a028 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da0f      	bge.n	8009fca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009faa:	78fb      	ldrb	r3, [r7, #3]
 8009fac:	f003 020f 	and.w	r2, r3, #15
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	1a9b      	subs	r3, r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	3338      	adds	r3, #56	; 0x38
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	705a      	strb	r2, [r3, #1]
 8009fc8:	e00f      	b.n	8009fea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 020f 	and.w	r2, r3, #15
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_PCD_EP_ClrStall+0x86>
 800a006:	2302      	movs	r3, #2
 800a008:	e00e      	b.n	800a028 <HAL_PCD_EP_ClrStall+0xa4>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	4618      	mov	r0, r3
 800a01a:	f004 ff62 	bl	800eee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	4613      	mov	r3, r2
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	1a9b      	subs	r3, r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	3338      	adds	r3, #56	; 0x38
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	3304      	adds	r3, #4
 800a056:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	699a      	ldr	r2, [r3, #24]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	429a      	cmp	r2, r3
 800a062:	d901      	bls.n	800a068 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e06c      	b.n	800a142 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	695a      	ldr	r2, [r3, #20]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	69fa      	ldr	r2, [r7, #28]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d902      	bls.n	800a084 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3303      	adds	r3, #3
 800a088:	089b      	lsrs	r3, r3, #2
 800a08a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a08c:	e02b      	b.n	800a0e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d902      	bls.n	800a0aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	3303      	adds	r3, #3
 800a0ae:	089b      	lsrs	r3, r3, #2
 800a0b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68d9      	ldr	r1, [r3, #12]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	6978      	ldr	r0, [r7, #20]
 800a0ca:	f004 fe06 	bl	800ecda <USB_WritePacket>

    ep->xfer_buff  += len;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	699a      	ldr	r2, [r3, #24]
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d809      	bhi.n	800a110 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	699a      	ldr	r2, [r3, #24]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a104:	429a      	cmp	r2, r3
 800a106:	d203      	bcs.n	800a110 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1be      	bne.n	800a08e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	695a      	ldr	r2, [r3, #20]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d811      	bhi.n	800a140 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	2201      	movs	r2, #1
 800a124:	fa02 f303 	lsl.w	r3, r2, r3
 800a128:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	43db      	mvns	r3, r3
 800a136:	6939      	ldr	r1, [r7, #16]
 800a138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a13c:	4013      	ands	r3, r2
 800a13e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	333c      	adds	r3, #60	; 0x3c
 800a164:	3304      	adds	r3, #4
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	f040 80a0 	bne.w	800a2c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d015      	beq.n	800a1ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4a72      	ldr	r2, [pc, #456]	; (800a35c <PCD_EP_OutXfrComplete_int+0x210>)
 800a192:	4293      	cmp	r3, r2
 800a194:	f240 80dd 	bls.w	800a352 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 80d7 	beq.w	800a352 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b6:	6093      	str	r3, [r2, #8]
 800a1b8:	e0cb      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d009      	beq.n	800a1d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	2320      	movs	r3, #32
 800a1d4:	6093      	str	r3, [r2, #8]
 800a1d6:	e0bc      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f040 80b7 	bne.w	800a352 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4a5d      	ldr	r2, [pc, #372]	; (800a35c <PCD_EP_OutXfrComplete_int+0x210>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d90f      	bls.n	800a20c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	461a      	mov	r2, r3
 800a204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a208:	6093      	str	r3, [r2, #8]
 800a20a:	e0a2      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4613      	mov	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a21e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	0159      	lsls	r1, r3, #5
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	440b      	add	r3, r1
 800a228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a232:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4403      	add	r3, r0
 800a242:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a246:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a248:	6879      	ldr	r1, [r7, #4]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	1a9b      	subs	r3, r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a25a:	6819      	ldr	r1, [r3, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4613      	mov	r3, r2
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4403      	add	r3, r0
 800a26a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4419      	add	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	4613      	mov	r3, r2
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4403      	add	r3, r0
 800a280:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a284:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d114      	bne.n	800a2b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d108      	bne.n	800a2b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	f004 ffa9 	bl	800f208 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f00d ffe9 	bl	8018294 <HAL_PCD_DataOutStageCallback>
 800a2c2:	e046      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4a26      	ldr	r2, [pc, #152]	; (800a360 <PCD_EP_OutXfrComplete_int+0x214>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d124      	bne.n	800a316 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e8:	6093      	str	r3, [r2, #8]
 800a2ea:	e032      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d008      	beq.n	800a308 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	461a      	mov	r2, r3
 800a304:	2320      	movs	r3, #32
 800a306:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f00d ffc0 	bl	8018294 <HAL_PCD_DataOutStageCallback>
 800a314:	e01d      	b.n	800a352 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d114      	bne.n	800a346 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4613      	mov	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d108      	bne.n	800a346 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a33e:	461a      	mov	r2, r3
 800a340:	2100      	movs	r1, #0
 800a342:	f004 ff61 	bl	800f208 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f00d ffa1 	bl	8018294 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	4f54300a 	.word	0x4f54300a
 800a360:	4f54310a 	.word	0x4f54310a

0800a364 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	333c      	adds	r3, #60	; 0x3c
 800a37c:	3304      	adds	r3, #4
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4a15      	ldr	r2, [pc, #84]	; (800a3ec <PCD_EP_OutSetupPacket_int+0x88>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d90e      	bls.n	800a3b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f00d ff59 	bl	8018270 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <PCD_EP_OutSetupPacket_int+0x88>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d90c      	bls.n	800a3e0 <PCD_EP_OutSetupPacket_int+0x7c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d108      	bne.n	800a3e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a3d8:	461a      	mov	r2, r3
 800a3da:	2101      	movs	r1, #1
 800a3dc:	f004 ff14 	bl	800f208 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	4f54300a 	.word	0x4f54300a

0800a3f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d107      	bne.n	800a41e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a40e:	883b      	ldrh	r3, [r7, #0]
 800a410:	0419      	lsls	r1, r3, #16
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	430a      	orrs	r2, r1
 800a41a:	629a      	str	r2, [r3, #40]	; 0x28
 800a41c:	e028      	b.n	800a470 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	4413      	add	r3, r2
 800a42a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a42c:	2300      	movs	r3, #0
 800a42e:	73fb      	strb	r3, [r7, #15]
 800a430:	e00d      	b.n	800a44e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	3340      	adds	r3, #64	; 0x40
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	0c1b      	lsrs	r3, r3, #16
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	3301      	adds	r3, #1
 800a44c:	73fb      	strb	r3, [r7, #15]
 800a44e:	7bfa      	ldrb	r2, [r7, #15]
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	3b01      	subs	r3, #1
 800a454:	429a      	cmp	r2, r3
 800a456:	d3ec      	bcc.n	800a432 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a458:	883b      	ldrh	r3, [r7, #0]
 800a45a:	0418      	lsls	r0, r3, #16
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	3b01      	subs	r3, #1
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	4302      	orrs	r2, r0
 800a468:	3340      	adds	r3, #64	; 0x40
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	887a      	ldrh	r2, [r7, #2]
 800a490:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800a4c0:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <HAL_PWR_EnableWakeUpPin+0x20>)
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	4904      	ldr	r1, [pc, #16]	; (800a4d8 <HAL_PWR_EnableWakeUpPin+0x20>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	604b      	str	r3, [r1, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	40007000 	.word	0x40007000

0800a4dc <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <HAL_PWR_DisableWakeUpPin+0x24>)
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	43db      	mvns	r3, r3
 800a4ec:	4904      	ldr	r1, [pc, #16]	; (800a500 <HAL_PWR_DisableWakeUpPin+0x24>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	604b      	str	r3, [r1, #4]
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40007000 	.word	0x40007000

0800a504 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a07      	ldr	r2, [pc, #28]	; (800a52c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800a50e:	f043 0302 	orr.w	r3, r3, #2
 800a512:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	4a05      	ldr	r2, [pc, #20]	; (800a530 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800a51a:	f043 0304 	orr.w	r3, r3, #4
 800a51e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a520:	bf30      	wfi
}
 800a522:	bf00      	nop
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	40007000 	.word	0x40007000
 800a530:	e000ed00 	.word	0xe000ed00

0800a534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e264      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d075      	beq.n	800a63e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a552:	4ba3      	ldr	r3, [pc, #652]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f003 030c 	and.w	r3, r3, #12
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d00c      	beq.n	800a578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a55e:	4ba0      	ldr	r3, [pc, #640]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a566:	2b08      	cmp	r3, #8
 800a568:	d112      	bne.n	800a590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a56a:	4b9d      	ldr	r3, [pc, #628]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a576:	d10b      	bne.n	800a590 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a578:	4b99      	ldr	r3, [pc, #612]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d05b      	beq.n	800a63c <HAL_RCC_OscConfig+0x108>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d157      	bne.n	800a63c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e23f      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a598:	d106      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x74>
 800a59a:	4b91      	ldr	r3, [pc, #580]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a90      	ldr	r2, [pc, #576]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e01d      	b.n	800a5e4 <HAL_RCC_OscConfig+0xb0>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5b0:	d10c      	bne.n	800a5cc <HAL_RCC_OscConfig+0x98>
 800a5b2:	4b8b      	ldr	r3, [pc, #556]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a8a      	ldr	r2, [pc, #552]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	4b88      	ldr	r3, [pc, #544]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a87      	ldr	r2, [pc, #540]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	e00b      	b.n	800a5e4 <HAL_RCC_OscConfig+0xb0>
 800a5cc:	4b84      	ldr	r3, [pc, #528]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a83      	ldr	r2, [pc, #524]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	4b81      	ldr	r3, [pc, #516]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a80      	ldr	r2, [pc, #512]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d013      	beq.n	800a614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ec:	f7fc fdd4 	bl	8007198 <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5f4:	f7fc fdd0 	bl	8007198 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b64      	cmp	r3, #100	; 0x64
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e204      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a606:	4b76      	ldr	r3, [pc, #472]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f0      	beq.n	800a5f4 <HAL_RCC_OscConfig+0xc0>
 800a612:	e014      	b.n	800a63e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a614:	f7fc fdc0 	bl	8007198 <HAL_GetTick>
 800a618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a61a:	e008      	b.n	800a62e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a61c:	f7fc fdbc 	bl	8007198 <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	2b64      	cmp	r3, #100	; 0x64
 800a628:	d901      	bls.n	800a62e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e1f0      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a62e:	4b6c      	ldr	r3, [pc, #432]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f0      	bne.n	800a61c <HAL_RCC_OscConfig+0xe8>
 800a63a:	e000      	b.n	800a63e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a63c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	2b00      	cmp	r3, #0
 800a648:	d063      	beq.n	800a712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a64a:	4b65      	ldr	r3, [pc, #404]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f003 030c 	and.w	r3, r3, #12
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00b      	beq.n	800a66e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a656:	4b62      	ldr	r3, [pc, #392]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a65e:	2b08      	cmp	r3, #8
 800a660:	d11c      	bne.n	800a69c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a662:	4b5f      	ldr	r3, [pc, #380]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d116      	bne.n	800a69c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a66e:	4b5c      	ldr	r3, [pc, #368]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_RCC_OscConfig+0x152>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e1c4      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a686:	4b56      	ldr	r3, [pc, #344]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	4952      	ldr	r1, [pc, #328]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a696:	4313      	orrs	r3, r2
 800a698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a69a:	e03a      	b.n	800a712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d020      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6a4:	4b4f      	ldr	r3, [pc, #316]	; (800a7e4 <HAL_RCC_OscConfig+0x2b0>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6aa:	f7fc fd75 	bl	8007198 <HAL_GetTick>
 800a6ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6b2:	f7fc fd71 	bl	8007198 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d901      	bls.n	800a6c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e1a5      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6c4:	4b46      	ldr	r3, [pc, #280]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0f0      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6d0:	4b43      	ldr	r3, [pc, #268]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	4940      	ldr	r1, [pc, #256]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	600b      	str	r3, [r1, #0]
 800a6e4:	e015      	b.n	800a712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6e6:	4b3f      	ldr	r3, [pc, #252]	; (800a7e4 <HAL_RCC_OscConfig+0x2b0>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ec:	f7fc fd54 	bl	8007198 <HAL_GetTick>
 800a6f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6f2:	e008      	b.n	800a706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6f4:	f7fc fd50 	bl	8007198 <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d901      	bls.n	800a706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	e184      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a706:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f0      	bne.n	800a6f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d030      	beq.n	800a780 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d016      	beq.n	800a754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a726:	4b30      	ldr	r3, [pc, #192]	; (800a7e8 <HAL_RCC_OscConfig+0x2b4>)
 800a728:	2201      	movs	r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a72c:	f7fc fd34 	bl	8007198 <HAL_GetTick>
 800a730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a732:	e008      	b.n	800a746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a734:	f7fc fd30 	bl	8007198 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d901      	bls.n	800a746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e164      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a746:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0f0      	beq.n	800a734 <HAL_RCC_OscConfig+0x200>
 800a752:	e015      	b.n	800a780 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a754:	4b24      	ldr	r3, [pc, #144]	; (800a7e8 <HAL_RCC_OscConfig+0x2b4>)
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a75a:	f7fc fd1d 	bl	8007198 <HAL_GetTick>
 800a75e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a760:	e008      	b.n	800a774 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a762:	f7fc fd19 	bl	8007198 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e14d      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a774:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f0      	bne.n	800a762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 80a0 	beq.w	800a8ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a792:	4b13      	ldr	r3, [pc, #76]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10f      	bne.n	800a7be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60bb      	str	r3, [r7, #8]
 800a7a2:	4b0f      	ldr	r3, [pc, #60]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	4a0e      	ldr	r2, [pc, #56]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a7a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <HAL_RCC_OscConfig+0x2ac>)
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b6:	60bb      	str	r3, [r7, #8]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <HAL_RCC_OscConfig+0x2b8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d121      	bne.n	800a80e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a7ca:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <HAL_RCC_OscConfig+0x2b8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <HAL_RCC_OscConfig+0x2b8>)
 800a7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7d6:	f7fc fcdf 	bl	8007198 <HAL_GetTick>
 800a7da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7dc:	e011      	b.n	800a802 <HAL_RCC_OscConfig+0x2ce>
 800a7de:	bf00      	nop
 800a7e0:	40023800 	.word	0x40023800
 800a7e4:	42470000 	.word	0x42470000
 800a7e8:	42470e80 	.word	0x42470e80
 800a7ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7f0:	f7fc fcd2 	bl	8007198 <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e106      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a802:	4b85      	ldr	r3, [pc, #532]	; (800aa18 <HAL_RCC_OscConfig+0x4e4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0f0      	beq.n	800a7f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d106      	bne.n	800a824 <HAL_RCC_OscConfig+0x2f0>
 800a816:	4b81      	ldr	r3, [pc, #516]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81a:	4a80      	ldr	r2, [pc, #512]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a81c:	f043 0301 	orr.w	r3, r3, #1
 800a820:	6713      	str	r3, [r2, #112]	; 0x70
 800a822:	e01c      	b.n	800a85e <HAL_RCC_OscConfig+0x32a>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d10c      	bne.n	800a846 <HAL_RCC_OscConfig+0x312>
 800a82c:	4b7b      	ldr	r3, [pc, #492]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	4a7a      	ldr	r2, [pc, #488]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a832:	f043 0304 	orr.w	r3, r3, #4
 800a836:	6713      	str	r3, [r2, #112]	; 0x70
 800a838:	4b78      	ldr	r3, [pc, #480]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	4a77      	ldr	r2, [pc, #476]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	6713      	str	r3, [r2, #112]	; 0x70
 800a844:	e00b      	b.n	800a85e <HAL_RCC_OscConfig+0x32a>
 800a846:	4b75      	ldr	r3, [pc, #468]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	4a74      	ldr	r2, [pc, #464]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a84c:	f023 0301 	bic.w	r3, r3, #1
 800a850:	6713      	str	r3, [r2, #112]	; 0x70
 800a852:	4b72      	ldr	r3, [pc, #456]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	4a71      	ldr	r2, [pc, #452]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a858:	f023 0304 	bic.w	r3, r3, #4
 800a85c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d015      	beq.n	800a892 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a866:	f7fc fc97 	bl	8007198 <HAL_GetTick>
 800a86a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a86c:	e00a      	b.n	800a884 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a86e:	f7fc fc93 	bl	8007198 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	f241 3288 	movw	r2, #5000	; 0x1388
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d901      	bls.n	800a884 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e0c5      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a884:	4b65      	ldr	r3, [pc, #404]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0ee      	beq.n	800a86e <HAL_RCC_OscConfig+0x33a>
 800a890:	e014      	b.n	800a8bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a892:	f7fc fc81 	bl	8007198 <HAL_GetTick>
 800a896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a898:	e00a      	b.n	800a8b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a89a:	f7fc fc7d 	bl	8007198 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e0af      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8b0:	4b5a      	ldr	r3, [pc, #360]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1ee      	bne.n	800a89a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d105      	bne.n	800a8ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8c2:	4b56      	ldr	r3, [pc, #344]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	4a55      	ldr	r2, [pc, #340]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a8c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 809b 	beq.w	800aa0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8d8:	4b50      	ldr	r3, [pc, #320]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 030c 	and.w	r3, r3, #12
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d05c      	beq.n	800a99e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d141      	bne.n	800a970 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <HAL_RCC_OscConfig+0x4ec>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8f2:	f7fc fc51 	bl	8007198 <HAL_GetTick>
 800a8f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8f8:	e008      	b.n	800a90c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8fa:	f7fc fc4d 	bl	8007198 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	2b02      	cmp	r3, #2
 800a906:	d901      	bls.n	800a90c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e081      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a90c:	4b43      	ldr	r3, [pc, #268]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1f0      	bne.n	800a8fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	431a      	orrs	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	019b      	lsls	r3, r3, #6
 800a928:	431a      	orrs	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	085b      	lsrs	r3, r3, #1
 800a930:	3b01      	subs	r3, #1
 800a932:	041b      	lsls	r3, r3, #16
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	061b      	lsls	r3, r3, #24
 800a93c:	4937      	ldr	r1, [pc, #220]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a942:	4b37      	ldr	r3, [pc, #220]	; (800aa20 <HAL_RCC_OscConfig+0x4ec>)
 800a944:	2201      	movs	r2, #1
 800a946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a948:	f7fc fc26 	bl	8007198 <HAL_GetTick>
 800a94c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a94e:	e008      	b.n	800a962 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a950:	f7fc fc22 	bl	8007198 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e056      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a962:	4b2e      	ldr	r3, [pc, #184]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0f0      	beq.n	800a950 <HAL_RCC_OscConfig+0x41c>
 800a96e:	e04e      	b.n	800aa0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a970:	4b2b      	ldr	r3, [pc, #172]	; (800aa20 <HAL_RCC_OscConfig+0x4ec>)
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a976:	f7fc fc0f 	bl	8007198 <HAL_GetTick>
 800a97a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a97e:	f7fc fc0b 	bl	8007198 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e03f      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a990:	4b22      	ldr	r3, [pc, #136]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1f0      	bne.n	800a97e <HAL_RCC_OscConfig+0x44a>
 800a99c:	e037      	b.n	800aa0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e032      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a9aa:	4b1c      	ldr	r3, [pc, #112]	; (800aa1c <HAL_RCC_OscConfig+0x4e8>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d028      	beq.n	800aa0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d121      	bne.n	800aa0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d11a      	bne.n	800aa0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a9da:	4013      	ands	r3, r2
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d111      	bne.n	800aa0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	085b      	lsrs	r3, r3, #1
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d107      	bne.n	800aa0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d001      	beq.n	800aa0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e000      	b.n	800aa10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	40007000 	.word	0x40007000
 800aa1c:	40023800 	.word	0x40023800
 800aa20:	42470060 	.word	0x42470060

0800aa24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e0cc      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa38:	4b68      	ldr	r3, [pc, #416]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d90c      	bls.n	800aa60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa46:	4b65      	ldr	r3, [pc, #404]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa4e:	4b63      	ldr	r3, [pc, #396]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 030f 	and.w	r3, r3, #15
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d001      	beq.n	800aa60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e0b8      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d020      	beq.n	800aaae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d005      	beq.n	800aa84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa78:	4b59      	ldr	r3, [pc, #356]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	4a58      	ldr	r2, [pc, #352]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aa7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aa82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa90:	4b53      	ldr	r3, [pc, #332]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4a52      	ldr	r2, [pc, #328]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aa96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aa9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa9c:	4b50      	ldr	r3, [pc, #320]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	494d      	ldr	r1, [pc, #308]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d044      	beq.n	800ab44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d107      	bne.n	800aad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aac2:	4b47      	ldr	r3, [pc, #284]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d119      	bne.n	800ab02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e07f      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d003      	beq.n	800aae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d107      	bne.n	800aaf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aae2:	4b3f      	ldr	r3, [pc, #252]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d109      	bne.n	800ab02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e06f      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaf2:	4b3b      	ldr	r3, [pc, #236]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e067      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab02:	4b37      	ldr	r3, [pc, #220]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f023 0203 	bic.w	r2, r3, #3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	4934      	ldr	r1, [pc, #208]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab14:	f7fc fb40 	bl	8007198 <HAL_GetTick>
 800ab18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab1a:	e00a      	b.n	800ab32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab1c:	f7fc fb3c 	bl	8007198 <HAL_GetTick>
 800ab20:	4602      	mov	r2, r0
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e04f      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab32:	4b2b      	ldr	r3, [pc, #172]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f003 020c 	and.w	r2, r3, #12
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d1eb      	bne.n	800ab1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab44:	4b25      	ldr	r3, [pc, #148]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d20c      	bcs.n	800ab6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab52:	4b22      	ldr	r3, [pc, #136]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab5a:	4b20      	ldr	r3, [pc, #128]	; (800abdc <HAL_RCC_ClockConfig+0x1b8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d001      	beq.n	800ab6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e032      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab78:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	4916      	ldr	r1, [pc, #88]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d009      	beq.n	800abaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab96:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	490e      	ldr	r1, [pc, #56]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800abaa:	f000 f821 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <HAL_RCC_ClockConfig+0x1bc>)
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	091b      	lsrs	r3, r3, #4
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	490a      	ldr	r1, [pc, #40]	; (800abe4 <HAL_RCC_ClockConfig+0x1c0>)
 800abbc:	5ccb      	ldrb	r3, [r1, r3]
 800abbe:	fa22 f303 	lsr.w	r3, r2, r3
 800abc2:	4a09      	ldr	r2, [pc, #36]	; (800abe8 <HAL_RCC_ClockConfig+0x1c4>)
 800abc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <HAL_RCC_ClockConfig+0x1c8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f8 fa60 	bl	8003090 <HAL_InitTick>

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40023c00 	.word	0x40023c00
 800abe0:	40023800 	.word	0x40023800
 800abe4:	080208b8 	.word	0x080208b8
 800abe8:	20000000 	.word	0x20000000
 800abec:	20000060 	.word	0x20000060

0800abf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	607b      	str	r3, [r7, #4]
 800abfc:	2300      	movs	r3, #0
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	2300      	movs	r3, #0
 800ac02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac08:	4b67      	ldr	r3, [pc, #412]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 030c 	and.w	r3, r3, #12
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d00d      	beq.n	800ac30 <HAL_RCC_GetSysClockFreq+0x40>
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	f200 80bd 	bhi.w	800ad94 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_RCC_GetSysClockFreq+0x34>
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d003      	beq.n	800ac2a <HAL_RCC_GetSysClockFreq+0x3a>
 800ac22:	e0b7      	b.n	800ad94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac24:	4b61      	ldr	r3, [pc, #388]	; (800adac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac26:	60bb      	str	r3, [r7, #8]
       break;
 800ac28:	e0b7      	b.n	800ad9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac2a:	4b60      	ldr	r3, [pc, #384]	; (800adac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac2c:	60bb      	str	r3, [r7, #8]
      break;
 800ac2e:	e0b4      	b.n	800ad9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac30:	4b5d      	ldr	r3, [pc, #372]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ac3a:	4b5b      	ldr	r3, [pc, #364]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d04d      	beq.n	800ace2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac46:	4b58      	ldr	r3, [pc, #352]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	099b      	lsrs	r3, r3, #6
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	f04f 0300 	mov.w	r3, #0
 800ac52:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac56:	f04f 0100 	mov.w	r1, #0
 800ac5a:	ea02 0800 	and.w	r8, r2, r0
 800ac5e:	ea03 0901 	and.w	r9, r3, r1
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	014b      	lsls	r3, r1, #5
 800ac70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac74:	0142      	lsls	r2, r0, #5
 800ac76:	4610      	mov	r0, r2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	ebb0 0008 	subs.w	r0, r0, r8
 800ac7e:	eb61 0109 	sbc.w	r1, r1, r9
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	f04f 0300 	mov.w	r3, #0
 800ac8a:	018b      	lsls	r3, r1, #6
 800ac8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac90:	0182      	lsls	r2, r0, #6
 800ac92:	1a12      	subs	r2, r2, r0
 800ac94:	eb63 0301 	sbc.w	r3, r3, r1
 800ac98:	f04f 0000 	mov.w	r0, #0
 800ac9c:	f04f 0100 	mov.w	r1, #0
 800aca0:	00d9      	lsls	r1, r3, #3
 800aca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aca6:	00d0      	lsls	r0, r2, #3
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	eb12 0208 	adds.w	r2, r2, r8
 800acb0:	eb43 0309 	adc.w	r3, r3, r9
 800acb4:	f04f 0000 	mov.w	r0, #0
 800acb8:	f04f 0100 	mov.w	r1, #0
 800acbc:	0299      	lsls	r1, r3, #10
 800acbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800acc2:	0290      	lsls	r0, r2, #10
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4610      	mov	r0, r2
 800acca:	4619      	mov	r1, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	461a      	mov	r2, r3
 800acd0:	f04f 0300 	mov.w	r3, #0
 800acd4:	f7f5 ffe8 	bl	8000ca8 <__aeabi_uldivmod>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4613      	mov	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	e04a      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ace2:	4b31      	ldr	r3, [pc, #196]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	099b      	lsrs	r3, r3, #6
 800ace8:	461a      	mov	r2, r3
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800acf2:	f04f 0100 	mov.w	r1, #0
 800acf6:	ea02 0400 	and.w	r4, r2, r0
 800acfa:	ea03 0501 	and.w	r5, r3, r1
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	f04f 0300 	mov.w	r3, #0
 800ad0a:	014b      	lsls	r3, r1, #5
 800ad0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ad10:	0142      	lsls	r2, r0, #5
 800ad12:	4610      	mov	r0, r2
 800ad14:	4619      	mov	r1, r3
 800ad16:	1b00      	subs	r0, r0, r4
 800ad18:	eb61 0105 	sbc.w	r1, r1, r5
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	018b      	lsls	r3, r1, #6
 800ad26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ad2a:	0182      	lsls	r2, r0, #6
 800ad2c:	1a12      	subs	r2, r2, r0
 800ad2e:	eb63 0301 	sbc.w	r3, r3, r1
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f04f 0100 	mov.w	r1, #0
 800ad3a:	00d9      	lsls	r1, r3, #3
 800ad3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad40:	00d0      	lsls	r0, r2, #3
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	1912      	adds	r2, r2, r4
 800ad48:	eb45 0303 	adc.w	r3, r5, r3
 800ad4c:	f04f 0000 	mov.w	r0, #0
 800ad50:	f04f 0100 	mov.w	r1, #0
 800ad54:	0299      	lsls	r1, r3, #10
 800ad56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad5a:	0290      	lsls	r0, r2, #10
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4610      	mov	r0, r2
 800ad62:	4619      	mov	r1, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f04f 0300 	mov.w	r3, #0
 800ad6c:	f7f5 ff9c 	bl	8000ca8 <__aeabi_uldivmod>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4613      	mov	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ad78:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	0c1b      	lsrs	r3, r3, #16
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	3301      	adds	r3, #1
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad90:	60bb      	str	r3, [r7, #8]
      break;
 800ad92:	e002      	b.n	800ad9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ad96:	60bb      	str	r3, [r7, #8]
      break;
 800ad98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ada6:	bf00      	nop
 800ada8:	40023800 	.word	0x40023800
 800adac:	00f42400 	.word	0x00f42400

0800adb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adb4:	4b03      	ldr	r3, [pc, #12]	; (800adc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800adb6:	681b      	ldr	r3, [r3, #0]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20000000 	.word	0x20000000

0800adc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800adcc:	f7ff fff0 	bl	800adb0 <HAL_RCC_GetHCLKFreq>
 800add0:	4602      	mov	r2, r0
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	0a9b      	lsrs	r3, r3, #10
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	4903      	ldr	r1, [pc, #12]	; (800adec <HAL_RCC_GetPCLK1Freq+0x24>)
 800adde:	5ccb      	ldrb	r3, [r1, r3]
 800ade0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	40023800 	.word	0x40023800
 800adec:	080208c8 	.word	0x080208c8

0800adf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800adf4:	f7ff ffdc 	bl	800adb0 <HAL_RCC_GetHCLKFreq>
 800adf8:	4602      	mov	r2, r0
 800adfa:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	0b5b      	lsrs	r3, r3, #13
 800ae00:	f003 0307 	and.w	r3, r3, #7
 800ae04:	4903      	ldr	r1, [pc, #12]	; (800ae14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae06:	5ccb      	ldrb	r3, [r1, r3]
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	40023800 	.word	0x40023800
 800ae14:	080208c8 	.word	0x080208c8

0800ae18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	220f      	movs	r2, #15
 800ae26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae28:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <HAL_RCC_GetClockConfig+0x5c>)
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f003 0203 	and.w	r2, r3, #3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <HAL_RCC_GetClockConfig+0x5c>)
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae40:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <HAL_RCC_GetClockConfig+0x5c>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <HAL_RCC_GetClockConfig+0x5c>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	08db      	lsrs	r3, r3, #3
 800ae52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <HAL_RCC_GetClockConfig+0x60>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 020f 	and.w	r2, r3, #15
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	601a      	str	r2, [r3, #0]
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40023800 	.word	0x40023800
 800ae78:	40023c00 	.word	0x40023c00

0800ae7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10b      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d075      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aeb0:	4bad      	ldr	r3, [pc, #692]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aeb6:	f7fc f96f 	bl	8007198 <HAL_GetTick>
 800aeba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aebc:	e008      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aebe:	f7fc f96b 	bl	8007198 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e18b      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aed0:	4ba6      	ldr	r3, [pc, #664]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f0      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	019a      	lsls	r2, r3, #6
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	071b      	lsls	r3, r3, #28
 800aef4:	499d      	ldr	r1, [pc, #628]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0302 	and.w	r3, r3, #2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01f      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af08:	4b98      	ldr	r3, [pc, #608]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af0e:	0f1b      	lsrs	r3, r3, #28
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	019a      	lsls	r2, r3, #6
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	061b      	lsls	r3, r3, #24
 800af22:	431a      	orrs	r2, r3
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	071b      	lsls	r3, r3, #28
 800af28:	4990      	ldr	r1, [pc, #576]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800af30:	4b8e      	ldr	r3, [pc, #568]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af36:	f023 021f 	bic.w	r2, r3, #31
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	3b01      	subs	r3, #1
 800af40:	498a      	ldr	r1, [pc, #552]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af42:	4313      	orrs	r3, r2
 800af44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00d      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	019a      	lsls	r2, r3, #6
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	061b      	lsls	r3, r3, #24
 800af60:	431a      	orrs	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	071b      	lsls	r3, r3, #28
 800af68:	4980      	ldr	r1, [pc, #512]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800af70:	4b7d      	ldr	r3, [pc, #500]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800af76:	f7fc f90f 	bl	8007198 <HAL_GetTick>
 800af7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af7c:	e008      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800af7e:	f7fc f90b 	bl	8007198 <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d901      	bls.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e12b      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af90:	4b76      	ldr	r3, [pc, #472]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0f0      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d105      	bne.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d079      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800afb4:	4b6e      	ldr	r3, [pc, #440]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800afba:	f7fc f8ed 	bl	8007198 <HAL_GetTick>
 800afbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afc0:	e008      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800afc2:	f7fc f8e9 	bl	8007198 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d901      	bls.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e109      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afd4:	4b65      	ldr	r3, [pc, #404]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe0:	d0ef      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0304 	and.w	r3, r3, #4
 800afea:	2b00      	cmp	r3, #0
 800afec:	d020      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800afee:	4b5f      	ldr	r3, [pc, #380]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff4:	0f1b      	lsrs	r3, r3, #28
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	019a      	lsls	r2, r3, #6
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	061b      	lsls	r3, r3, #24
 800b008:	431a      	orrs	r2, r3
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	071b      	lsls	r3, r3, #28
 800b00e:	4957      	ldr	r1, [pc, #348]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b010:	4313      	orrs	r3, r2
 800b012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b016:	4b55      	ldr	r3, [pc, #340]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b01c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	3b01      	subs	r3, #1
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	4950      	ldr	r1, [pc, #320]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d01e      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b03c:	4b4b      	ldr	r3, [pc, #300]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b042:	0e1b      	lsrs	r3, r3, #24
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	019a      	lsls	r2, r3, #6
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	061b      	lsls	r3, r3, #24
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	071b      	lsls	r3, r3, #28
 800b05c:	4943      	ldr	r1, [pc, #268]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b064:	4b41      	ldr	r3, [pc, #260]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b06a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	493e      	ldr	r1, [pc, #248]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b074:	4313      	orrs	r3, r2
 800b076:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b07a:	4b3d      	ldr	r3, [pc, #244]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b080:	f7fc f88a 	bl	8007198 <HAL_GetTick>
 800b084:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b086:	e008      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b088:	f7fc f886 	bl	8007198 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d901      	bls.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e0a6      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b09a:	4b34      	ldr	r3, [pc, #208]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0a6:	d1ef      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 808d 	beq.w	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	4b2c      	ldr	r3, [pc, #176]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	4a2b      	ldr	r2, [pc, #172]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0c6:	4b29      	ldr	r3, [pc, #164]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b0d2:	4b28      	ldr	r3, [pc, #160]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a27      	ldr	r2, [pc, #156]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0de:	f7fc f85b 	bl	8007198 <HAL_GetTick>
 800b0e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b0e4:	e008      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b0e6:	f7fc f857 	bl	8007198 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e077      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b0f8:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0f0      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b104:	4b19      	ldr	r3, [pc, #100]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b10c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d039      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d032      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b122:	4b12      	ldr	r3, [pc, #72]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b12a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b12c:	4b12      	ldr	r3, [pc, #72]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800b12e:	2201      	movs	r2, #1
 800b130:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b132:	4b11      	ldr	r3, [pc, #68]	; (800b178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b138:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b01      	cmp	r3, #1
 800b148:	d11e      	bne.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b14a:	f7fc f825 	bl	8007198 <HAL_GetTick>
 800b14e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b150:	e014      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b152:	f7fc f821 	bl	8007198 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b160:	4293      	cmp	r3, r2
 800b162:	d90b      	bls.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e03f      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b168:	42470068 	.word	0x42470068
 800b16c:	40023800 	.word	0x40023800
 800b170:	42470070 	.word	0x42470070
 800b174:	40007000 	.word	0x40007000
 800b178:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b17c:	4b1c      	ldr	r3, [pc, #112]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0e4      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b194:	d10d      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800b196:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1aa:	4911      	ldr	r1, [pc, #68]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	608b      	str	r3, [r1, #8]
 800b1b0:	e005      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b1b2:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	4a0e      	ldr	r2, [pc, #56]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b1bc:	6093      	str	r3, [r2, #8]
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1ca:	4909      	ldr	r1, [pc, #36]	; (800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d004      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b1e2:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b1e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	40023800 	.word	0x40023800
 800b1f4:	424711e0 	.word	0x424711e0

0800b1f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e083      	b.n	800b312 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7f5b      	ldrb	r3, [r3, #29]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7f7 fd44 	bl	8002ca8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	22ca      	movs	r2, #202	; 0xca
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2253      	movs	r2, #83	; 0x53
 800b234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fc26 	bl	800ba88 <RTC_EnterInitMode>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d008      	beq.n	800b254 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	22ff      	movs	r2, #255	; 0xff
 800b248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2204      	movs	r2, #4
 800b24e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e05e      	b.n	800b312 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b266:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6899      	ldr	r1, [r3, #8]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	431a      	orrs	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	68d2      	ldr	r2, [r2, #12]
 800b28e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6919      	ldr	r1, [r3, #16]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	041a      	lsls	r2, r3, #16
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f003 0320 	and.w	r3, r3, #32
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10e      	bne.n	800b2e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fbb8 	bl	800ba38 <HAL_RTC_WaitForSynchro>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d008      	beq.n	800b2e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	22ff      	movs	r2, #255	; 0xff
 800b2d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2204      	movs	r2, #4
 800b2da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e018      	b.n	800b312 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b2ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	22ff      	movs	r2, #255	; 0xff
 800b308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b310:	2300      	movs	r3, #0
  }
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b31a:	b590      	push	{r4, r7, lr}
 800b31c:	b087      	sub	sp, #28
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	7f1b      	ldrb	r3, [r3, #28]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d101      	bne.n	800b336 <HAL_RTC_SetTime+0x1c>
 800b332:	2302      	movs	r3, #2
 800b334:	e0aa      	b.n	800b48c <HAL_RTC_SetTime+0x172>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2202      	movs	r2, #2
 800b340:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d126      	bne.n	800b396 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2200      	movs	r2, #0
 800b35a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 fbbd 	bl	800bae0 <RTC_ByteToBcd2>
 800b366:	4603      	mov	r3, r0
 800b368:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	785b      	ldrb	r3, [r3, #1]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fbb6 	bl	800bae0 <RTC_ByteToBcd2>
 800b374:	4603      	mov	r3, r0
 800b376:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b378:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	789b      	ldrb	r3, [r3, #2]
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fbae 	bl	800bae0 <RTC_ByteToBcd2>
 800b384:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b386:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	78db      	ldrb	r3, [r3, #3]
 800b38e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	e018      	b.n	800b3c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	785b      	ldrb	r3, [r3, #1]
 800b3b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b3b6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b3bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	78db      	ldrb	r3, [r3, #3]
 800b3c2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	22ca      	movs	r2, #202	; 0xca
 800b3ce:	625a      	str	r2, [r3, #36]	; 0x24
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2253      	movs	r2, #83	; 0x53
 800b3d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 fb55 	bl	800ba88 <RTC_EnterInitMode>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	22ff      	movs	r2, #255	; 0xff
 800b3ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2204      	movs	r2, #4
 800b3f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e047      	b.n	800b48c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b406:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b40a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b41a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6899      	ldr	r1, [r3, #8]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	431a      	orrs	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b442:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d111      	bne.n	800b476 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 faf0 	bl	800ba38 <HAL_RTC_WaitForSynchro>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	22ff      	movs	r2, #255	; 0xff
 800b464:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2204      	movs	r2, #4
 800b46a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e00a      	b.n	800b48c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	22ff      	movs	r2, #255	; 0xff
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2201      	movs	r2, #1
 800b482:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800b48a:	2300      	movs	r3, #0
  }
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	371c      	adds	r7, #28
 800b490:	46bd      	mov	sp, r7
 800b492:	bd90      	pop	{r4, r7, pc}

0800b494 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b4c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b4ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	0c1b      	lsrs	r3, r3, #16
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	0c1b      	lsrs	r3, r3, #16
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b504:	b2da      	uxtb	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11a      	bne.n	800b546 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fb01 	bl	800bb1c <RTC_Bcd2ToByte>
 800b51a:	4603      	mov	r3, r0
 800b51c:	461a      	mov	r2, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	785b      	ldrb	r3, [r3, #1]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 faf8 	bl	800bb1c <RTC_Bcd2ToByte>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	789b      	ldrb	r3, [r3, #2]
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 faef 	bl	800bb1c <RTC_Bcd2ToByte>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	7f1b      	ldrb	r3, [r3, #28]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_RTC_SetDate+0x1c>
 800b568:	2302      	movs	r3, #2
 800b56a:	e094      	b.n	800b696 <HAL_RTC_SetDate+0x146>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2202      	movs	r2, #2
 800b576:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10e      	bne.n	800b59c <HAL_RTC_SetDate+0x4c>
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b00      	cmp	r3, #0
 800b588:	d008      	beq.n	800b59c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	785b      	ldrb	r3, [r3, #1]
 800b58e:	f023 0310 	bic.w	r3, r3, #16
 800b592:	b2db      	uxtb	r3, r3
 800b594:	330a      	adds	r3, #10
 800b596:	b2da      	uxtb	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d11c      	bne.n	800b5dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	78db      	ldrb	r3, [r3, #3]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fa9a 	bl	800bae0 <RTC_ByteToBcd2>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fa93 	bl	800bae0 <RTC_ByteToBcd2>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b5be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	789b      	ldrb	r3, [r3, #2]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fa8b 	bl	800bae0 <RTC_ByteToBcd2>
 800b5ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b5cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e00e      	b.n	800b5fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	78db      	ldrb	r3, [r3, #3]
 800b5e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b5e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b5ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	22ca      	movs	r2, #202	; 0xca
 800b600:	625a      	str	r2, [r3, #36]	; 0x24
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2253      	movs	r2, #83	; 0x53
 800b608:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fa3c 	bl	800ba88 <RTC_EnterInitMode>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00b      	beq.n	800b62e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	22ff      	movs	r2, #255	; 0xff
 800b61c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2204      	movs	r2, #4
 800b622:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e033      	b.n	800b696 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b638:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b63c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b64c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d111      	bne.n	800b680 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 f9eb 	bl	800ba38 <HAL_RTC_WaitForSynchro>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	22ff      	movs	r2, #255	; 0xff
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2204      	movs	r2, #4
 800b674:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e00a      	b.n	800b696 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	22ff      	movs	r2, #255	; 0xff
 800b686:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b694:	2300      	movs	r3, #0
  }
}
 800b696:	4618      	mov	r0, r3
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd90      	pop	{r4, r7, pc}

0800b69e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b086      	sub	sp, #24
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	0c1b      	lsrs	r3, r3, #16
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	0a1b      	lsrs	r3, r3, #8
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	f003 031f 	and.w	r3, r3, #31
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	0b5b      	lsrs	r3, r3, #13
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f003 0307 	and.w	r3, r3, #7
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11a      	bne.n	800b732 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	78db      	ldrb	r3, [r3, #3]
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fa0b 	bl	800bb1c <RTC_Bcd2ToByte>
 800b706:	4603      	mov	r3, r0
 800b708:	461a      	mov	r2, r3
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	4618      	mov	r0, r3
 800b714:	f000 fa02 	bl	800bb1c <RTC_Bcd2ToByte>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	789b      	ldrb	r3, [r3, #2]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f9f9 	bl	800bb1c <RTC_Bcd2ToByte>
 800b72a:	4603      	mov	r3, r0
 800b72c:	461a      	mov	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b089      	sub	sp, #36	; 0x24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	2300      	movs	r3, #0
 800b74e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800b750:	4b93      	ldr	r3, [pc, #588]	; (800b9a0 <HAL_RTC_SetAlarm_IT+0x264>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a93      	ldr	r2, [pc, #588]	; (800b9a4 <HAL_RTC_SetAlarm_IT+0x268>)
 800b756:	fba2 2303 	umull	r2, r3, r2, r3
 800b75a:	0adb      	lsrs	r3, r3, #11
 800b75c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	7f1b      	ldrb	r3, [r3, #28]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_RTC_SetAlarm_IT+0x36>
 800b76e:	2302      	movs	r3, #2
 800b770:	e111      	b.n	800b996 <HAL_RTC_SetAlarm_IT+0x25a>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2202      	movs	r2, #2
 800b77c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d137      	bne.n	800b7f4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d102      	bne.n	800b798 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	2200      	movs	r2, #0
 800b796:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f99f 	bl	800bae0 <RTC_ByteToBcd2>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	785b      	ldrb	r3, [r3, #1]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f998 	bl	800bae0 <RTC_ByteToBcd2>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b7b4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	789b      	ldrb	r3, [r3, #2]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 f990 	bl	800bae0 <RTC_ByteToBcd2>
 800b7c0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b7c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	78db      	ldrb	r3, [r3, #3]
 800b7ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b7cc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f982 	bl	800bae0 <RTC_ByteToBcd2>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b7e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b7e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	e023      	b.n	800b83c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2200      	movs	r2, #0
 800b806:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b814:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b81a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	78db      	ldrb	r3, [r3, #3]
 800b820:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b822:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b82a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b82c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b832:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b838:	4313      	orrs	r3, r2
 800b83a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	4313      	orrs	r3, r2
 800b846:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	22ca      	movs	r2, #202	; 0xca
 800b84e:	625a      	str	r2, [r3, #36]	; 0x24
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2253      	movs	r2, #83	; 0x53
 800b856:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b860:	d141      	bne.n	800b8e6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b870:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b882:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	1e5a      	subs	r2, r3, #1
 800b888:	617a      	str	r2, [r7, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	22ff      	movs	r2, #255	; 0xff
 800b894:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2203      	movs	r2, #3
 800b89a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e077      	b.n	800b996 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0e7      	beq.n	800b884 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689a      	ldr	r2, [r3, #8]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8e2:	609a      	str	r2, [r3, #8]
 800b8e4:	e040      	b.n	800b968 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	689a      	ldr	r2, [r3, #8]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b8f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b906:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	1e5a      	subs	r2, r3, #1
 800b90c:	617a      	str	r2, [r7, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10b      	bne.n	800b92a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	22ff      	movs	r2, #255	; 0xff
 800b918:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2203      	movs	r2, #3
 800b91e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e035      	b.n	800b996 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d0e7      	beq.n	800b908 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689a      	ldr	r2, [r3, #8]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b956:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689a      	ldr	r2, [r3, #8]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b966:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b968:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a0e      	ldr	r2, [pc, #56]	; (800b9a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b96e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b972:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800b974:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	4a0b      	ldr	r2, [pc, #44]	; (800b9a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b97a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b97e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	22ff      	movs	r2, #255	; 0xff
 800b986:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2201      	movs	r2, #1
 800b98c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3724      	adds	r7, #36	; 0x24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd90      	pop	{r4, r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000000 	.word	0x20000000
 800b9a4:	10624dd3 	.word	0x10624dd3
 800b9a8:	40013c00 	.word	0x40013c00

0800b9ac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d012      	beq.n	800b9e8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7fa feef 	bl	80067b4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b9e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d012      	beq.n	800ba1c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f9bf 	bl	800bd88 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ba1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ba1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ba22:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	775a      	strb	r2, [r3, #29]
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	40013c00 	.word	0x40013c00

0800ba38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba54:	f7fb fba0 	bl	8007198 <HAL_GetTick>
 800ba58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ba5a:	e009      	b.n	800ba70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ba5c:	f7fb fb9c 	bl	8007198 <HAL_GetTick>
 800ba60:	4602      	mov	r2, r0
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba6a:	d901      	bls.n	800ba70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e007      	b.n	800ba80 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0ee      	beq.n	800ba5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d119      	bne.n	800bad6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800baac:	f7fb fb74 	bl	8007198 <HAL_GetTick>
 800bab0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bab2:	e009      	b.n	800bac8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bab4:	f7fb fb70 	bl	8007198 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bac2:	d901      	bls.n	800bac8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e007      	b.n	800bad8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0ee      	beq.n	800bab4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	4603      	mov	r3, r0
 800bae8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800baee:	e005      	b.n	800bafc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3301      	adds	r3, #1
 800baf4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	3b0a      	subs	r3, #10
 800bafa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d8f6      	bhi.n	800baf0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	b2db      	uxtb	r3, r3
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bb2a:	79fb      	ldrb	r3, [r7, #7]
 800bb2c:	091b      	lsrs	r3, r3, #4
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	461a      	mov	r2, r3
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	4413      	add	r3, r2
 800bb4a:	b2db      	uxtb	r3, r3
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	7f1b      	ldrb	r3, [r3, #28]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d101      	bne.n	800bb70 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e0a6      	b.n	800bcbe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2201      	movs	r2, #1
 800bb74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2202      	movs	r2, #2
 800bb7a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	22ca      	movs	r2, #202	; 0xca
 800bb82:	625a      	str	r2, [r3, #36]	; 0x24
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2253      	movs	r2, #83	; 0x53
 800bb8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d022      	beq.n	800bbe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800bb9a:	4b4c      	ldr	r3, [pc, #304]	; (800bccc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a4c      	ldr	r2, [pc, #304]	; (800bcd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800bba0:	fba2 2303 	umull	r2, r3, r2, r3
 800bba4:	0adb      	lsrs	r3, r3, #11
 800bba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	1e5a      	subs	r2, r3, #1
 800bbb4:	617a      	str	r2, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10b      	bne.n	800bbd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	22ff      	movs	r2, #255	; 0xff
 800bbc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e075      	b.n	800bcbe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e7      	bne.n	800bbb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689a      	ldr	r2, [r3, #8]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbee:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800bbf0:	4b36      	ldr	r3, [pc, #216]	; (800bccc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a36      	ldr	r2, [pc, #216]	; (800bcd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800bbf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfa:	0adb      	lsrs	r3, r3, #11
 800bbfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc00:	fb02 f303 	mul.w	r3, r2, r3
 800bc04:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	1e5a      	subs	r2, r3, #1
 800bc0a:	617a      	str	r2, [r7, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10b      	bne.n	800bc28 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	22ff      	movs	r2, #255	; 0xff
 800bc16:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e04a      	b.n	800bcbe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0e7      	beq.n	800bc06 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0207 	bic.w	r2, r2, #7
 800bc4c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6899      	ldr	r1, [r3, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	430a      	orrs	r2, r1
 800bc5c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	; (800bcd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a1c      	ldr	r2, [pc, #112]	; (800bcd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bc64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc68:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800bc6a:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	4a19      	ldr	r2, [pc, #100]	; (800bcd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bc70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc74:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800bc86:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc96:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bca6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	22ff      	movs	r2, #255	; 0xff
 800bcae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	371c      	adds	r7, #28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	20000000 	.word	0x20000000
 800bcd0:	10624dd3 	.word	0x10624dd3
 800bcd4:	40013c00 	.word	0x40013c00

0800bcd8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bce0:	2300      	movs	r3, #0
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7f1b      	ldrb	r3, [r3, #28]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d101      	bne.n	800bcf0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800bcec:	2302      	movs	r3, #2
 800bcee:	e047      	b.n	800bd80 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2202      	movs	r2, #2
 800bcfa:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	22ca      	movs	r2, #202	; 0xca
 800bd02:	625a      	str	r2, [r3, #36]	; 0x24
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2253      	movs	r2, #83	; 0x53
 800bd0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd1a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd2a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bd2c:	f7fb fa34 	bl	8007198 <HAL_GetTick>
 800bd30:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800bd32:	e013      	b.n	800bd5c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bd34:	f7fb fa30 	bl	8007198 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd42:	d90b      	bls.n	800bd5c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	22ff      	movs	r2, #255	; 0xff
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2203      	movs	r2, #3
 800bd50:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e011      	b.n	800bd80 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0e4      	beq.n	800bd34 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e07b      	b.n	800bea6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d108      	bne.n	800bdc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdbe:	d009      	beq.n	800bdd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	61da      	str	r2, [r3, #28]
 800bdc6:	e005      	b.n	800bdd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d106      	bne.n	800bdf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7f6 ff8c 	bl	8002d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800be1c:	431a      	orrs	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be26:	431a      	orrs	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	431a      	orrs	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be44:	431a      	orrs	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	69db      	ldr	r3, [r3, #28]
 800be4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be58:	ea42 0103 	orr.w	r1, r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	0c1b      	lsrs	r3, r3, #16
 800be72:	f003 0104 	and.w	r1, r3, #4
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7a:	f003 0210 	and.w	r2, r3, #16
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69da      	ldr	r2, [r3, #28]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b088      	sub	sp, #32
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	603b      	str	r3, [r7, #0]
 800beba:	4613      	mov	r3, r2
 800bebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_SPI_Transmit+0x22>
 800becc:	2302      	movs	r3, #2
 800bece:	e126      	b.n	800c11e <HAL_SPI_Transmit+0x270>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bed8:	f7fb f95e 	bl	8007198 <HAL_GetTick>
 800bedc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bede:	88fb      	ldrh	r3, [r7, #6]
 800bee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b01      	cmp	r3, #1
 800beec:	d002      	beq.n	800bef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800beee:	2302      	movs	r3, #2
 800bef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bef2:	e10b      	b.n	800c10c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <HAL_SPI_Transmit+0x52>
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf04:	e102      	b.n	800c10c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2203      	movs	r2, #3
 800bf0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	88fa      	ldrh	r2, [r7, #6]
 800bf24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf4c:	d10f      	bne.n	800bf6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf78:	2b40      	cmp	r3, #64	; 0x40
 800bf7a:	d007      	beq.n	800bf8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf94:	d14b      	bne.n	800c02e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <HAL_SPI_Transmit+0xf6>
 800bf9e:	8afb      	ldrh	r3, [r7, #22]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d13e      	bne.n	800c022 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa8:	881a      	ldrh	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb4:	1c9a      	adds	r2, r3, #2
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bfc8:	e02b      	b.n	800c022 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d112      	bne.n	800bffe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfdc:	881a      	ldrh	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	1c9a      	adds	r2, r3, #2
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	3b01      	subs	r3, #1
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	86da      	strh	r2, [r3, #54]	; 0x36
 800bffc:	e011      	b.n	800c022 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bffe:	f7fb f8cb 	bl	8007198 <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d803      	bhi.n	800c016 <HAL_SPI_Transmit+0x168>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d102      	bne.n	800c01c <HAL_SPI_Transmit+0x16e>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d102      	bne.n	800c022 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c01c:	2303      	movs	r3, #3
 800c01e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c020:	e074      	b.n	800c10c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c026:	b29b      	uxth	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1ce      	bne.n	800bfca <HAL_SPI_Transmit+0x11c>
 800c02c:	e04c      	b.n	800c0c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <HAL_SPI_Transmit+0x18e>
 800c036:	8afb      	ldrh	r3, [r7, #22]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d140      	bne.n	800c0be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	7812      	ldrb	r2, [r2, #0]
 800c048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c058:	b29b      	uxth	r3, r3
 800c05a:	3b01      	subs	r3, #1
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c062:	e02c      	b.n	800c0be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d113      	bne.n	800c09a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	330c      	adds	r3, #12
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	86da      	strh	r2, [r3, #54]	; 0x36
 800c098:	e011      	b.n	800c0be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c09a:	f7fb f87d 	bl	8007198 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d803      	bhi.n	800c0b2 <HAL_SPI_Transmit+0x204>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b0:	d102      	bne.n	800c0b8 <HAL_SPI_Transmit+0x20a>
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0bc:	e026      	b.n	800c10c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1cd      	bne.n	800c064 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 fbcb 	bl	800c868 <SPI_EndRxTxTransaction>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2220      	movs	r2, #32
 800c0dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10a      	bne.n	800c0fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	613b      	str	r3, [r7, #16]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	613b      	str	r3, [r7, #16]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	613b      	str	r3, [r7, #16]
 800c0fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	77fb      	strb	r3, [r7, #31]
 800c108:	e000      	b.n	800c10c <HAL_SPI_Transmit+0x25e>
  }

error:
 800c10a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c11c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3720      	adds	r7, #32
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b088      	sub	sp, #32
 800c12a:	af02      	add	r7, sp, #8
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	603b      	str	r3, [r7, #0]
 800c132:	4613      	mov	r3, r2
 800c134:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c142:	d112      	bne.n	800c16a <HAL_SPI_Receive+0x44>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10e      	bne.n	800c16a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2204      	movs	r2, #4
 800c150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c154:	88fa      	ldrh	r2, [r7, #6]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	4613      	mov	r3, r2
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 f8f1 	bl	800c348 <HAL_SPI_TransmitReceive>
 800c166:	4603      	mov	r3, r0
 800c168:	e0ea      	b.n	800c340 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c170:	2b01      	cmp	r3, #1
 800c172:	d101      	bne.n	800c178 <HAL_SPI_Receive+0x52>
 800c174:	2302      	movs	r3, #2
 800c176:	e0e3      	b.n	800c340 <HAL_SPI_Receive+0x21a>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c180:	f7fb f80a 	bl	8007198 <HAL_GetTick>
 800c184:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d002      	beq.n	800c198 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c192:	2302      	movs	r3, #2
 800c194:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c196:	e0ca      	b.n	800c32e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <HAL_SPI_Receive+0x7e>
 800c19e:	88fb      	ldrh	r3, [r7, #6]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1a8:	e0c1      	b.n	800c32e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2204      	movs	r2, #4
 800c1ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	88fa      	ldrh	r2, [r7, #6]
 800c1c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	88fa      	ldrh	r2, [r7, #6]
 800c1c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1f0:	d10f      	bne.n	800c212 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c21c:	2b40      	cmp	r3, #64	; 0x40
 800c21e:	d007      	beq.n	800c230 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c22e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d162      	bne.n	800c2fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c238:	e02e      	b.n	800c298 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b01      	cmp	r3, #1
 800c246:	d115      	bne.n	800c274 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f103 020c 	add.w	r2, r3, #12
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	7812      	ldrb	r2, [r2, #0]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c268:	b29b      	uxth	r3, r3
 800c26a:	3b01      	subs	r3, #1
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c272:	e011      	b.n	800c298 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c274:	f7fa ff90 	bl	8007198 <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d803      	bhi.n	800c28c <HAL_SPI_Receive+0x166>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28a:	d102      	bne.n	800c292 <HAL_SPI_Receive+0x16c>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c296:	e04a      	b.n	800c32e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1cb      	bne.n	800c23a <HAL_SPI_Receive+0x114>
 800c2a2:	e031      	b.n	800c308 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f003 0301 	and.w	r3, r3, #1
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d113      	bne.n	800c2da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68da      	ldr	r2, [r3, #12]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	b292      	uxth	r2, r2
 800c2be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c4:	1c9a      	adds	r2, r3, #2
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2d8:	e011      	b.n	800c2fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2da:	f7fa ff5d 	bl	8007198 <HAL_GetTick>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d803      	bhi.n	800c2f2 <HAL_SPI_Receive+0x1cc>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f0:	d102      	bne.n	800c2f8 <HAL_SPI_Receive+0x1d2>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2fc:	e017      	b.n	800c32e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c302:	b29b      	uxth	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1cd      	bne.n	800c2a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 fa45 	bl	800c79c <SPI_EndRxTransaction>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2220      	movs	r2, #32
 800c31c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	75fb      	strb	r3, [r7, #23]
 800c32a:	e000      	b.n	800c32e <HAL_SPI_Receive+0x208>
  }

error :
 800c32c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08c      	sub	sp, #48	; 0x30
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c356:	2301      	movs	r3, #1
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c366:	2b01      	cmp	r3, #1
 800c368:	d101      	bne.n	800c36e <HAL_SPI_TransmitReceive+0x26>
 800c36a:	2302      	movs	r3, #2
 800c36c:	e18a      	b.n	800c684 <HAL_SPI_TransmitReceive+0x33c>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c376:	f7fa ff0f 	bl	8007198 <HAL_GetTick>
 800c37a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c38c:	887b      	ldrh	r3, [r7, #2]
 800c38e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c394:	2b01      	cmp	r3, #1
 800c396:	d00f      	beq.n	800c3b8 <HAL_SPI_TransmitReceive+0x70>
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c39e:	d107      	bne.n	800c3b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d103      	bne.n	800c3b0 <HAL_SPI_TransmitReceive+0x68>
 800c3a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d003      	beq.n	800c3b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3b6:	e15b      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d005      	beq.n	800c3ca <HAL_SPI_TransmitReceive+0x82>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <HAL_SPI_TransmitReceive+0x82>
 800c3c4:	887b      	ldrh	r3, [r7, #2]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3d0:	e14e      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b04      	cmp	r3, #4
 800c3dc:	d003      	beq.n	800c3e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2205      	movs	r2, #5
 800c3e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	887a      	ldrh	r2, [r7, #2]
 800c3f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	887a      	ldrh	r2, [r7, #2]
 800c3fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	887a      	ldrh	r2, [r7, #2]
 800c408:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	887a      	ldrh	r2, [r7, #2]
 800c40e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c426:	2b40      	cmp	r3, #64	; 0x40
 800c428:	d007      	beq.n	800c43a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c438:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c442:	d178      	bne.n	800c536 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <HAL_SPI_TransmitReceive+0x10a>
 800c44c:	8b7b      	ldrh	r3, [r7, #26]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d166      	bne.n	800c520 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c456:	881a      	ldrh	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c462:	1c9a      	adds	r2, r3, #2
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	3b01      	subs	r3, #1
 800c470:	b29a      	uxth	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c476:	e053      	b.n	800c520 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f003 0302 	and.w	r3, r3, #2
 800c482:	2b02      	cmp	r3, #2
 800c484:	d11b      	bne.n	800c4be <HAL_SPI_TransmitReceive+0x176>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d016      	beq.n	800c4be <HAL_SPI_TransmitReceive+0x176>
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	2b01      	cmp	r3, #1
 800c494:	d113      	bne.n	800c4be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49a:	881a      	ldrh	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a6:	1c9a      	adds	r2, r3, #2
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d119      	bne.n	800c500 <HAL_SPI_TransmitReceive+0x1b8>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d014      	beq.n	800c500 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68da      	ldr	r2, [r3, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e0:	b292      	uxth	r2, r2
 800c4e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e8:	1c9a      	adds	r2, r3, #2
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c500:	f7fa fe4a 	bl	8007198 <HAL_GetTick>
 800c504:	4602      	mov	r2, r0
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d807      	bhi.n	800c520 <HAL_SPI_TransmitReceive+0x1d8>
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c516:	d003      	beq.n	800c520 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c51e:	e0a7      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c524:	b29b      	uxth	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1a6      	bne.n	800c478 <HAL_SPI_TransmitReceive+0x130>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1a1      	bne.n	800c478 <HAL_SPI_TransmitReceive+0x130>
 800c534:	e07c      	b.n	800c630 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d002      	beq.n	800c544 <HAL_SPI_TransmitReceive+0x1fc>
 800c53e:	8b7b      	ldrh	r3, [r7, #26]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d16b      	bne.n	800c61c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	330c      	adds	r3, #12
 800c54e:	7812      	ldrb	r2, [r2, #0]
 800c550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c560:	b29b      	uxth	r3, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c56a:	e057      	b.n	800c61c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f003 0302 	and.w	r3, r3, #2
 800c576:	2b02      	cmp	r3, #2
 800c578:	d11c      	bne.n	800c5b4 <HAL_SPI_TransmitReceive+0x26c>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c57e:	b29b      	uxth	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d017      	beq.n	800c5b4 <HAL_SPI_TransmitReceive+0x26c>
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	2b01      	cmp	r3, #1
 800c588:	d114      	bne.n	800c5b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	330c      	adds	r3, #12
 800c594:	7812      	ldrb	r2, [r2, #0]
 800c596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d119      	bne.n	800c5f6 <HAL_SPI_TransmitReceive+0x2ae>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d014      	beq.n	800c5f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d6:	b2d2      	uxtb	r2, r2
 800c5d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c5f6:	f7fa fdcf 	bl	8007198 <HAL_GetTick>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c602:	429a      	cmp	r2, r3
 800c604:	d803      	bhi.n	800c60e <HAL_SPI_TransmitReceive+0x2c6>
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60c:	d102      	bne.n	800c614 <HAL_SPI_TransmitReceive+0x2cc>
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c61a:	e029      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c620:	b29b      	uxth	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1a2      	bne.n	800c56c <HAL_SPI_TransmitReceive+0x224>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d19d      	bne.n	800c56c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 f917 	bl	800c868 <SPI_EndRxTxTransaction>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d006      	beq.n	800c64e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2220      	movs	r2, #32
 800c64a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c64c:	e010      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10b      	bne.n	800c66e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	617b      	str	r3, [r7, #20]
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	e000      	b.n	800c670 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c66e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c684:	4618      	mov	r0, r3
 800c686:	3730      	adds	r7, #48	; 0x30
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	4613      	mov	r3, r2
 800c69a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c69c:	f7fa fd7c 	bl	8007198 <HAL_GetTick>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	1a9b      	subs	r3, r3, r2
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c6ac:	f7fa fd74 	bl	8007198 <HAL_GetTick>
 800c6b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c6b2:	4b39      	ldr	r3, [pc, #228]	; (800c798 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	015b      	lsls	r3, r3, #5
 800c6b8:	0d1b      	lsrs	r3, r3, #20
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	fb02 f303 	mul.w	r3, r2, r3
 800c6c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6c2:	e054      	b.n	800c76e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ca:	d050      	beq.n	800c76e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c6cc:	f7fa fd64 	bl	8007198 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	69fa      	ldr	r2, [r7, #28]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d902      	bls.n	800c6e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d13d      	bne.n	800c75e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6fa:	d111      	bne.n	800c720 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c704:	d004      	beq.n	800c710 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c70e:	d107      	bne.n	800c720 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c71e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c728:	d10f      	bne.n	800c74a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c748:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e017      	b.n	800c78e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689a      	ldr	r2, [r3, #8]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4013      	ands	r3, r2
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	bf0c      	ite	eq
 800c77e:	2301      	moveq	r3, #1
 800c780:	2300      	movne	r3, #0
 800c782:	b2db      	uxtb	r3, r3
 800c784:	461a      	mov	r2, r3
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d19b      	bne.n	800c6c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3720      	adds	r7, #32
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20000000 	.word	0x20000000

0800c79c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7b0:	d111      	bne.n	800c7d6 <SPI_EndRxTransaction+0x3a>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ba:	d004      	beq.n	800c7c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7c4:	d107      	bne.n	800c7d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7de:	d12a      	bne.n	800c836 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7e8:	d012      	beq.n	800c810 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2180      	movs	r1, #128	; 0x80
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f7ff ff49 	bl	800c68c <SPI_WaitFlagStateUntilTimeout>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d02d      	beq.n	800c85c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c804:	f043 0220 	orr.w	r2, r3, #32
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e026      	b.n	800c85e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2200      	movs	r2, #0
 800c818:	2101      	movs	r1, #1
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7ff ff36 	bl	800c68c <SPI_WaitFlagStateUntilTimeout>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01a      	beq.n	800c85c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c82a:	f043 0220 	orr.w	r2, r3, #32
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c832:	2303      	movs	r3, #3
 800c834:	e013      	b.n	800c85e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	2200      	movs	r2, #0
 800c83e:	2101      	movs	r1, #1
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f7ff ff23 	bl	800c68c <SPI_WaitFlagStateUntilTimeout>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d007      	beq.n	800c85c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c850:	f043 0220 	orr.w	r2, r3, #32
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c858:	2303      	movs	r3, #3
 800c85a:	e000      	b.n	800c85e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c874:	4b1b      	ldr	r3, [pc, #108]	; (800c8e4 <SPI_EndRxTxTransaction+0x7c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a1b      	ldr	r2, [pc, #108]	; (800c8e8 <SPI_EndRxTxTransaction+0x80>)
 800c87a:	fba2 2303 	umull	r2, r3, r2, r3
 800c87e:	0d5b      	lsrs	r3, r3, #21
 800c880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c884:	fb02 f303 	mul.w	r3, r2, r3
 800c888:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c892:	d112      	bne.n	800c8ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2200      	movs	r2, #0
 800c89c:	2180      	movs	r1, #128	; 0x80
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7ff fef4 	bl	800c68c <SPI_WaitFlagStateUntilTimeout>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d016      	beq.n	800c8d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ae:	f043 0220 	orr.w	r2, r3, #32
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e00f      	b.n	800c8da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d0:	2b80      	cmp	r3, #128	; 0x80
 800c8d2:	d0f2      	beq.n	800c8ba <SPI_EndRxTxTransaction+0x52>
 800c8d4:	e000      	b.n	800c8d8 <SPI_EndRxTxTransaction+0x70>
        break;
 800c8d6:	bf00      	nop
  }

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20000000 	.word	0x20000000
 800c8e8:	165e9f81 	.word	0x165e9f81

0800c8ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e041      	b.n	800c982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d106      	bne.n	800c918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f839 	bl	800c98a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3304      	adds	r3, #4
 800c928:	4619      	mov	r1, r3
 800c92a:	4610      	mov	r0, r2
 800c92c:	f000 faea 	bl	800cf04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c992:	bf00      	nop
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d001      	beq.n	800c9b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e04e      	b.n	800ca56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f042 0201 	orr.w	r2, r2, #1
 800c9ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a23      	ldr	r2, [pc, #140]	; (800ca64 <HAL_TIM_Base_Start_IT+0xc4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d022      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e2:	d01d      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1f      	ldr	r2, [pc, #124]	; (800ca68 <HAL_TIM_Base_Start_IT+0xc8>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d018      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a1e      	ldr	r2, [pc, #120]	; (800ca6c <HAL_TIM_Base_Start_IT+0xcc>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d013      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a1c      	ldr	r2, [pc, #112]	; (800ca70 <HAL_TIM_Base_Start_IT+0xd0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d00e      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a1b      	ldr	r2, [pc, #108]	; (800ca74 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d009      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d004      	beq.n	800ca20 <HAL_TIM_Base_Start_IT+0x80>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a18      	ldr	r2, [pc, #96]	; (800ca7c <HAL_TIM_Base_Start_IT+0xdc>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d111      	bne.n	800ca44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b06      	cmp	r3, #6
 800ca30:	d010      	beq.n	800ca54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f042 0201 	orr.w	r2, r2, #1
 800ca40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca42:	e007      	b.n	800ca54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f042 0201 	orr.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	40010000 	.word	0x40010000
 800ca68:	40000400 	.word	0x40000400
 800ca6c:	40000800 	.word	0x40000800
 800ca70:	40000c00 	.word	0x40000c00
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40001800 	.word	0x40001800

0800ca80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e041      	b.n	800cb16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7f6 f9e6 	bl	8002e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	3304      	adds	r3, #4
 800cabc:	4619      	mov	r1, r3
 800cabe:	4610      	mov	r0, r2
 800cac0:	f000 fa20 	bl	800cf04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d122      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f003 0302 	and.w	r3, r3, #2
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d11b      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f06f 0202 	mvn.w	r2, #2
 800cb4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f9b1 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800cb66:	e005      	b.n	800cb74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f9a3 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9b4 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d122      	bne.n	800cbce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	d11b      	bne.n	800cbce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f06f 0204 	mvn.w	r2, #4
 800cb9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d003      	beq.n	800cbbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f987 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800cbba:	e005      	b.n	800cbc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f979 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f98a 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f003 0308 	and.w	r3, r3, #8
 800cbd8:	2b08      	cmp	r3, #8
 800cbda:	d122      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f003 0308 	and.w	r3, r3, #8
 800cbe6:	2b08      	cmp	r3, #8
 800cbe8:	d11b      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f06f 0208 	mvn.w	r2, #8
 800cbf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2204      	movs	r2, #4
 800cbf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	f003 0303 	and.w	r3, r3, #3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d003      	beq.n	800cc10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f95d 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800cc0e:	e005      	b.n	800cc1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f94f 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f960 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	f003 0310 	and.w	r3, r3, #16
 800cc2c:	2b10      	cmp	r3, #16
 800cc2e:	d122      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f003 0310 	and.w	r3, r3, #16
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d11b      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f06f 0210 	mvn.w	r2, #16
 800cc46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2208      	movs	r2, #8
 800cc4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	69db      	ldr	r3, [r3, #28]
 800cc54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d003      	beq.n	800cc64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f933 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800cc62:	e005      	b.n	800cc70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f925 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f936 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d10e      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d107      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f06f 0201 	mvn.w	r2, #1
 800cc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7f5 fea3 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d10e      	bne.n	800ccce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccba:	2b80      	cmp	r3, #128	; 0x80
 800ccbc:	d107      	bne.n	800ccce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ccc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fbf1 	bl	800d4b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd8:	2b40      	cmp	r3, #64	; 0x40
 800ccda:	d10e      	bne.n	800ccfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce6:	2b40      	cmp	r3, #64	; 0x40
 800cce8:	d107      	bne.n	800ccfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ccf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f8fb 	bl	800cef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f003 0320 	and.w	r3, r3, #32
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d10e      	bne.n	800cd26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b20      	cmp	r3, #32
 800cd14:	d107      	bne.n	800cd26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f06f 0220 	mvn.w	r2, #32
 800cd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fbbb 	bl	800d49c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d101      	bne.n	800cd4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	e0ae      	b.n	800ceac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b0c      	cmp	r3, #12
 800cd5a:	f200 809f 	bhi.w	800ce9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cd5e:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd99 	.word	0x0800cd99
 800cd68:	0800ce9d 	.word	0x0800ce9d
 800cd6c:	0800ce9d 	.word	0x0800ce9d
 800cd70:	0800ce9d 	.word	0x0800ce9d
 800cd74:	0800cdd9 	.word	0x0800cdd9
 800cd78:	0800ce9d 	.word	0x0800ce9d
 800cd7c:	0800ce9d 	.word	0x0800ce9d
 800cd80:	0800ce9d 	.word	0x0800ce9d
 800cd84:	0800ce1b 	.word	0x0800ce1b
 800cd88:	0800ce9d 	.word	0x0800ce9d
 800cd8c:	0800ce9d 	.word	0x0800ce9d
 800cd90:	0800ce9d 	.word	0x0800ce9d
 800cd94:	0800ce5b 	.word	0x0800ce5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68b9      	ldr	r1, [r7, #8]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f950 	bl	800d044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	699a      	ldr	r2, [r3, #24]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0208 	orr.w	r2, r2, #8
 800cdb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	699a      	ldr	r2, [r3, #24]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0204 	bic.w	r2, r2, #4
 800cdc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6999      	ldr	r1, [r3, #24]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	691a      	ldr	r2, [r3, #16]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	430a      	orrs	r2, r1
 800cdd4:	619a      	str	r2, [r3, #24]
      break;
 800cdd6:	e064      	b.n	800cea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 f9a0 	bl	800d124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	699a      	ldr	r2, [r3, #24]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	699a      	ldr	r2, [r3, #24]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6999      	ldr	r1, [r3, #24]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	021a      	lsls	r2, r3, #8
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	430a      	orrs	r2, r1
 800ce16:	619a      	str	r2, [r3, #24]
      break;
 800ce18:	e043      	b.n	800cea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 f9f5 	bl	800d210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	69da      	ldr	r2, [r3, #28]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f042 0208 	orr.w	r2, r2, #8
 800ce34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69da      	ldr	r2, [r3, #28]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 0204 	bic.w	r2, r2, #4
 800ce44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69d9      	ldr	r1, [r3, #28]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	691a      	ldr	r2, [r3, #16]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	61da      	str	r2, [r3, #28]
      break;
 800ce58:	e023      	b.n	800cea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fa49 	bl	800d2f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	69da      	ldr	r2, [r3, #28]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	69da      	ldr	r2, [r3, #28]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69d9      	ldr	r1, [r3, #28]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	021a      	lsls	r2, r3, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	61da      	str	r2, [r3, #28]
      break;
 800ce9a:	e002      	b.n	800cea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	75fb      	strb	r3, [r7, #23]
      break;
 800cea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cef8:	bf00      	nop
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a40      	ldr	r2, [pc, #256]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d013      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf22:	d00f      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a3d      	ldr	r2, [pc, #244]	; (800d01c <TIM_Base_SetConfig+0x118>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d00b      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a3c      	ldr	r2, [pc, #240]	; (800d020 <TIM_Base_SetConfig+0x11c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d007      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a3b      	ldr	r2, [pc, #236]	; (800d024 <TIM_Base_SetConfig+0x120>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d003      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a3a      	ldr	r2, [pc, #232]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d108      	bne.n	800cf56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a2f      	ldr	r2, [pc, #188]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d02b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf64:	d027      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a2c      	ldr	r2, [pc, #176]	; (800d01c <TIM_Base_SetConfig+0x118>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d023      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a2b      	ldr	r2, [pc, #172]	; (800d020 <TIM_Base_SetConfig+0x11c>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d01f      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <TIM_Base_SetConfig+0x120>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d01b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a29      	ldr	r2, [pc, #164]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d017      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a28      	ldr	r2, [pc, #160]	; (800d02c <TIM_Base_SetConfig+0x128>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d013      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a27      	ldr	r2, [pc, #156]	; (800d030 <TIM_Base_SetConfig+0x12c>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d00f      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a26      	ldr	r2, [pc, #152]	; (800d034 <TIM_Base_SetConfig+0x130>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d00b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a25      	ldr	r2, [pc, #148]	; (800d038 <TIM_Base_SetConfig+0x134>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d007      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a24      	ldr	r2, [pc, #144]	; (800d03c <TIM_Base_SetConfig+0x138>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d003      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a23      	ldr	r2, [pc, #140]	; (800d040 <TIM_Base_SetConfig+0x13c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d108      	bne.n	800cfc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a0a      	ldr	r2, [pc, #40]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d003      	beq.n	800cffc <TIM_Base_SetConfig+0xf8>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a0c      	ldr	r2, [pc, #48]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d103      	bne.n	800d004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	691a      	ldr	r2, [r3, #16]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	615a      	str	r2, [r3, #20]
}
 800d00a:	bf00      	nop
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	40010000 	.word	0x40010000
 800d01c:	40000400 	.word	0x40000400
 800d020:	40000800 	.word	0x40000800
 800d024:	40000c00 	.word	0x40000c00
 800d028:	40010400 	.word	0x40010400
 800d02c:	40014000 	.word	0x40014000
 800d030:	40014400 	.word	0x40014400
 800d034:	40014800 	.word	0x40014800
 800d038:	40001800 	.word	0x40001800
 800d03c:	40001c00 	.word	0x40001c00
 800d040:	40002000 	.word	0x40002000

0800d044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f023 0201 	bic.w	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	4313      	orrs	r3, r2
 800d084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f023 0302 	bic.w	r3, r3, #2
 800d08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	4313      	orrs	r3, r2
 800d096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a20      	ldr	r2, [pc, #128]	; (800d11c <TIM_OC1_SetConfig+0xd8>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d003      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x64>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a1f      	ldr	r2, [pc, #124]	; (800d120 <TIM_OC1_SetConfig+0xdc>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d10c      	bne.n	800d0c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f023 0308 	bic.w	r3, r3, #8
 800d0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f023 0304 	bic.w	r3, r3, #4
 800d0c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a15      	ldr	r2, [pc, #84]	; (800d11c <TIM_OC1_SetConfig+0xd8>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d003      	beq.n	800d0d2 <TIM_OC1_SetConfig+0x8e>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a14      	ldr	r2, [pc, #80]	; (800d120 <TIM_OC1_SetConfig+0xdc>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d111      	bne.n	800d0f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	621a      	str	r2, [r3, #32]
}
 800d110:	bf00      	nop
 800d112:	371c      	adds	r7, #28
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	40010000 	.word	0x40010000
 800d120:	40010400 	.word	0x40010400

0800d124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d124:	b480      	push	{r7}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	f023 0210 	bic.w	r2, r3, #16
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	021b      	lsls	r3, r3, #8
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	4313      	orrs	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f023 0320 	bic.w	r3, r3, #32
 800d16e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4313      	orrs	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a22      	ldr	r2, [pc, #136]	; (800d208 <TIM_OC2_SetConfig+0xe4>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d003      	beq.n	800d18c <TIM_OC2_SetConfig+0x68>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a21      	ldr	r2, [pc, #132]	; (800d20c <TIM_OC2_SetConfig+0xe8>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d10d      	bne.n	800d1a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a17      	ldr	r2, [pc, #92]	; (800d208 <TIM_OC2_SetConfig+0xe4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d003      	beq.n	800d1b8 <TIM_OC2_SetConfig+0x94>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a16      	ldr	r2, [pc, #88]	; (800d20c <TIM_OC2_SetConfig+0xe8>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d113      	bne.n	800d1e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	621a      	str	r2, [r3, #32]
}
 800d1fa:	bf00      	nop
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	40010000 	.word	0x40010000
 800d20c:	40010400 	.word	0x40010400

0800d210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d210:	b480      	push	{r7}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f023 0303 	bic.w	r3, r3, #3
 800d246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4313      	orrs	r3, r2
 800d250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	4313      	orrs	r3, r2
 800d264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a21      	ldr	r2, [pc, #132]	; (800d2f0 <TIM_OC3_SetConfig+0xe0>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d003      	beq.n	800d276 <TIM_OC3_SetConfig+0x66>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a20      	ldr	r2, [pc, #128]	; (800d2f4 <TIM_OC3_SetConfig+0xe4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d10d      	bne.n	800d292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	4313      	orrs	r3, r2
 800d288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <TIM_OC3_SetConfig+0xe0>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d003      	beq.n	800d2a2 <TIM_OC3_SetConfig+0x92>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a15      	ldr	r2, [pc, #84]	; (800d2f4 <TIM_OC3_SetConfig+0xe4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d113      	bne.n	800d2ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	011b      	lsls	r3, r3, #4
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	699b      	ldr	r3, [r3, #24]
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	621a      	str	r2, [r3, #32]
}
 800d2e4:	bf00      	nop
 800d2e6:	371c      	adds	r7, #28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	40010000 	.word	0x40010000
 800d2f4:	40010400 	.word	0x40010400

0800d2f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	69db      	ldr	r3, [r3, #28]
 800d31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	021b      	lsls	r3, r3, #8
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	4313      	orrs	r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	031b      	lsls	r3, r3, #12
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a12      	ldr	r2, [pc, #72]	; (800d39c <TIM_OC4_SetConfig+0xa4>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d003      	beq.n	800d360 <TIM_OC4_SetConfig+0x68>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a11      	ldr	r2, [pc, #68]	; (800d3a0 <TIM_OC4_SetConfig+0xa8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d109      	bne.n	800d374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	019b      	lsls	r3, r3, #6
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	4313      	orrs	r3, r2
 800d372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	621a      	str	r2, [r3, #32]
}
 800d38e:	bf00      	nop
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	40010000 	.word	0x40010000
 800d3a0:	40010400 	.word	0x40010400

0800d3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d101      	bne.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	e05a      	b.n	800d472 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a21      	ldr	r2, [pc, #132]	; (800d480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d022      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d408:	d01d      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a1d      	ldr	r2, [pc, #116]	; (800d484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d018      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a1b      	ldr	r2, [pc, #108]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d013      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a1a      	ldr	r2, [pc, #104]	; (800d48c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d00e      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a18      	ldr	r2, [pc, #96]	; (800d490 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d009      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a17      	ldr	r2, [pc, #92]	; (800d494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d004      	beq.n	800d446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a15      	ldr	r2, [pc, #84]	; (800d498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d10c      	bne.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d44c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	4313      	orrs	r3, r2
 800d456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	40010000 	.word	0x40010000
 800d484:	40000400 	.word	0x40000400
 800d488:	40000800 	.word	0x40000800
 800d48c:	40000c00 	.word	0x40000c00
 800d490:	40010400 	.word	0x40010400
 800d494:	40014000 	.word	0x40014000
 800d498:	40001800 	.word	0x40001800

0800d49c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e03f      	b.n	800d556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7f5 fd1c 	bl	8002f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2224      	movs	r2, #36	; 0x24
 800d4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f9cb 	bl	800d8a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	691a      	ldr	r2, [r3, #16]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d51c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	695a      	ldr	r2, [r3, #20]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d52c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68da      	ldr	r2, [r3, #12]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d53c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2220      	movs	r2, #32
 800d548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2220      	movs	r2, #32
 800d550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b08a      	sub	sp, #40	; 0x28
 800d562:	af02      	add	r7, sp, #8
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	603b      	str	r3, [r7, #0]
 800d56a:	4613      	mov	r3, r2
 800d56c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d56e:	2300      	movs	r3, #0
 800d570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b20      	cmp	r3, #32
 800d57c:	d17c      	bne.n	800d678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d002      	beq.n	800d58a <HAL_UART_Transmit+0x2c>
 800d584:	88fb      	ldrh	r3, [r7, #6]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e075      	b.n	800d67a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d594:	2b01      	cmp	r3, #1
 800d596:	d101      	bne.n	800d59c <HAL_UART_Transmit+0x3e>
 800d598:	2302      	movs	r3, #2
 800d59a:	e06e      	b.n	800d67a <HAL_UART_Transmit+0x11c>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2221      	movs	r2, #33	; 0x21
 800d5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5b2:	f7f9 fdf1 	bl	8007198 <HAL_GetTick>
 800d5b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	88fa      	ldrh	r2, [r7, #6]
 800d5c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5cc:	d108      	bne.n	800d5e0 <HAL_UART_Transmit+0x82>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d104      	bne.n	800d5e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	61bb      	str	r3, [r7, #24]
 800d5de:	e003      	b.n	800d5e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d5f0:	e02a      	b.n	800d648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2180      	movs	r1, #128	; 0x80
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 f8e2 	bl	800d7c6 <UART_WaitOnFlagUntilTimeout>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d608:	2303      	movs	r3, #3
 800d60a:	e036      	b.n	800d67a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10b      	bne.n	800d62a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	3302      	adds	r3, #2
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	e007      	b.n	800d63a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	781a      	ldrb	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	3301      	adds	r3, #1
 800d638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d63e:	b29b      	uxth	r3, r3
 800d640:	3b01      	subs	r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1cf      	bne.n	800d5f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	2200      	movs	r2, #0
 800d65a:	2140      	movs	r1, #64	; 0x40
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f000 f8b2 	bl	800d7c6 <UART_WaitOnFlagUntilTimeout>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d668:	2303      	movs	r3, #3
 800d66a:	e006      	b.n	800d67a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2220      	movs	r2, #32
 800d670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	e000      	b.n	800d67a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d678:	2302      	movs	r3, #2
  }
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3720      	adds	r7, #32
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b08a      	sub	sp, #40	; 0x28
 800d686:	af02      	add	r7, sp, #8
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	603b      	str	r3, [r7, #0]
 800d68e:	4613      	mov	r3, r2
 800d690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	2b20      	cmp	r3, #32
 800d6a0:	f040 808c 	bne.w	800d7bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <HAL_UART_Receive+0x2e>
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e084      	b.n	800d7be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d101      	bne.n	800d6c2 <HAL_UART_Receive+0x40>
 800d6be:	2302      	movs	r3, #2
 800d6c0:	e07d      	b.n	800d7be <HAL_UART_Receive+0x13c>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2222      	movs	r2, #34	; 0x22
 800d6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6de:	f7f9 fd5b 	bl	8007198 <HAL_GetTick>
 800d6e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	88fa      	ldrh	r2, [r7, #6]
 800d6e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	88fa      	ldrh	r2, [r7, #6]
 800d6ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6f8:	d108      	bne.n	800d70c <HAL_UART_Receive+0x8a>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d104      	bne.n	800d70c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d702:	2300      	movs	r3, #0
 800d704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	61bb      	str	r3, [r7, #24]
 800d70a:	e003      	b.n	800d714 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d71c:	e043      	b.n	800d7a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2200      	movs	r2, #0
 800d726:	2120      	movs	r1, #32
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f84c 	bl	800d7c6 <UART_WaitOnFlagUntilTimeout>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e042      	b.n	800d7be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10c      	bne.n	800d758 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	b29b      	uxth	r3, r3
 800d746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	3302      	adds	r3, #2
 800d754:	61bb      	str	r3, [r7, #24]
 800d756:	e01f      	b.n	800d798 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d760:	d007      	beq.n	800d772 <HAL_UART_Receive+0xf0>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <HAL_UART_Receive+0xfe>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e008      	b.n	800d792 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	b2db      	uxtb	r3, r3
 800d788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	3301      	adds	r3, #1
 800d796:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1b6      	bne.n	800d71e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2220      	movs	r2, #32
 800d7b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e000      	b.n	800d7be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d7bc:	2302      	movs	r3, #2
  }
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b090      	sub	sp, #64	; 0x40
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	60f8      	str	r0, [r7, #12]
 800d7ce:	60b9      	str	r1, [r7, #8]
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7d6:	e050      	b.n	800d87a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d04c      	beq.n	800d87a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d007      	beq.n	800d7f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7e6:	f7f9 fcd7 	bl	8007198 <HAL_GetTick>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d241      	bcs.n	800d87a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	330c      	adds	r3, #12
 800d7fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	e853 3f00 	ldrex	r3, [r3]
 800d804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d80c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	330c      	adds	r3, #12
 800d814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d816:	637a      	str	r2, [r7, #52]	; 0x34
 800d818:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d81e:	e841 2300 	strex	r3, r2, [r1]
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e5      	bne.n	800d7f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3314      	adds	r3, #20
 800d830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	e853 3f00 	ldrex	r3, [r3]
 800d838:	613b      	str	r3, [r7, #16]
   return(result);
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	f023 0301 	bic.w	r3, r3, #1
 800d840:	63bb      	str	r3, [r7, #56]	; 0x38
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3314      	adds	r3, #20
 800d848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d84a:	623a      	str	r2, [r7, #32]
 800d84c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84e:	69f9      	ldr	r1, [r7, #28]
 800d850:	6a3a      	ldr	r2, [r7, #32]
 800d852:	e841 2300 	strex	r3, r2, [r1]
 800d856:	61bb      	str	r3, [r7, #24]
   return(result);
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1e5      	bne.n	800d82a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2220      	movs	r2, #32
 800d862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2220      	movs	r2, #32
 800d86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d876:	2303      	movs	r3, #3
 800d878:	e00f      	b.n	800d89a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	4013      	ands	r3, r2
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	429a      	cmp	r2, r3
 800d888:	bf0c      	ite	eq
 800d88a:	2301      	moveq	r3, #1
 800d88c:	2300      	movne	r3, #0
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	461a      	mov	r2, r3
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	429a      	cmp	r2, r3
 800d896:	d09f      	beq.n	800d7d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3740      	adds	r7, #64	; 0x40
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	b09f      	sub	sp, #124	; 0x7c
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ba:	68d9      	ldr	r1, [r3, #12]
 800d8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	ea40 0301 	orr.w	r3, r0, r1
 800d8c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8c8:	689a      	ldr	r2, [r3, #8]
 800d8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d8e8:	f021 010c 	bic.w	r1, r1, #12
 800d8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8f2:	430b      	orrs	r3, r1
 800d8f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d902:	6999      	ldr	r1, [r3, #24]
 800d904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	ea40 0301 	orr.w	r3, r0, r1
 800d90c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4bc5      	ldr	r3, [pc, #788]	; (800dc28 <UART_SetConfig+0x384>)
 800d914:	429a      	cmp	r2, r3
 800d916:	d004      	beq.n	800d922 <UART_SetConfig+0x7e>
 800d918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	4bc3      	ldr	r3, [pc, #780]	; (800dc2c <UART_SetConfig+0x388>)
 800d91e:	429a      	cmp	r2, r3
 800d920:	d103      	bne.n	800d92a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d922:	f7fd fa65 	bl	800adf0 <HAL_RCC_GetPCLK2Freq>
 800d926:	6778      	str	r0, [r7, #116]	; 0x74
 800d928:	e002      	b.n	800d930 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d92a:	f7fd fa4d 	bl	800adc8 <HAL_RCC_GetPCLK1Freq>
 800d92e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d932:	69db      	ldr	r3, [r3, #28]
 800d934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d938:	f040 80b6 	bne.w	800daa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d93c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d93e:	461c      	mov	r4, r3
 800d940:	f04f 0500 	mov.w	r5, #0
 800d944:	4622      	mov	r2, r4
 800d946:	462b      	mov	r3, r5
 800d948:	1891      	adds	r1, r2, r2
 800d94a:	6439      	str	r1, [r7, #64]	; 0x40
 800d94c:	415b      	adcs	r3, r3
 800d94e:	647b      	str	r3, [r7, #68]	; 0x44
 800d950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d954:	1912      	adds	r2, r2, r4
 800d956:	eb45 0303 	adc.w	r3, r5, r3
 800d95a:	f04f 0000 	mov.w	r0, #0
 800d95e:	f04f 0100 	mov.w	r1, #0
 800d962:	00d9      	lsls	r1, r3, #3
 800d964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d968:	00d0      	lsls	r0, r2, #3
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	1911      	adds	r1, r2, r4
 800d970:	6639      	str	r1, [r7, #96]	; 0x60
 800d972:	416b      	adcs	r3, r5
 800d974:	667b      	str	r3, [r7, #100]	; 0x64
 800d976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f04f 0300 	mov.w	r3, #0
 800d980:	1891      	adds	r1, r2, r2
 800d982:	63b9      	str	r1, [r7, #56]	; 0x38
 800d984:	415b      	adcs	r3, r3
 800d986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d98c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d990:	f7f3 f98a 	bl	8000ca8 <__aeabi_uldivmod>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	4ba5      	ldr	r3, [pc, #660]	; (800dc30 <UART_SetConfig+0x38c>)
 800d99a:	fba3 2302 	umull	r2, r3, r3, r2
 800d99e:	095b      	lsrs	r3, r3, #5
 800d9a0:	011e      	lsls	r6, r3, #4
 800d9a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9a4:	461c      	mov	r4, r3
 800d9a6:	f04f 0500 	mov.w	r5, #0
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	1891      	adds	r1, r2, r2
 800d9b0:	6339      	str	r1, [r7, #48]	; 0x30
 800d9b2:	415b      	adcs	r3, r3
 800d9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d9ba:	1912      	adds	r2, r2, r4
 800d9bc:	eb45 0303 	adc.w	r3, r5, r3
 800d9c0:	f04f 0000 	mov.w	r0, #0
 800d9c4:	f04f 0100 	mov.w	r1, #0
 800d9c8:	00d9      	lsls	r1, r3, #3
 800d9ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d9ce:	00d0      	lsls	r0, r2, #3
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	1911      	adds	r1, r2, r4
 800d9d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800d9d8:	416b      	adcs	r3, r5
 800d9da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	f04f 0300 	mov.w	r3, #0
 800d9e6:	1891      	adds	r1, r2, r2
 800d9e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800d9ea:	415b      	adcs	r3, r3
 800d9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d9f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d9f6:	f7f3 f957 	bl	8000ca8 <__aeabi_uldivmod>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4b8c      	ldr	r3, [pc, #560]	; (800dc30 <UART_SetConfig+0x38c>)
 800da00:	fba3 1302 	umull	r1, r3, r3, r2
 800da04:	095b      	lsrs	r3, r3, #5
 800da06:	2164      	movs	r1, #100	; 0x64
 800da08:	fb01 f303 	mul.w	r3, r1, r3
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	00db      	lsls	r3, r3, #3
 800da10:	3332      	adds	r3, #50	; 0x32
 800da12:	4a87      	ldr	r2, [pc, #540]	; (800dc30 <UART_SetConfig+0x38c>)
 800da14:	fba2 2303 	umull	r2, r3, r2, r3
 800da18:	095b      	lsrs	r3, r3, #5
 800da1a:	005b      	lsls	r3, r3, #1
 800da1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da20:	441e      	add	r6, r3
 800da22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da24:	4618      	mov	r0, r3
 800da26:	f04f 0100 	mov.w	r1, #0
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	1894      	adds	r4, r2, r2
 800da30:	623c      	str	r4, [r7, #32]
 800da32:	415b      	adcs	r3, r3
 800da34:	627b      	str	r3, [r7, #36]	; 0x24
 800da36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da3a:	1812      	adds	r2, r2, r0
 800da3c:	eb41 0303 	adc.w	r3, r1, r3
 800da40:	f04f 0400 	mov.w	r4, #0
 800da44:	f04f 0500 	mov.w	r5, #0
 800da48:	00dd      	lsls	r5, r3, #3
 800da4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800da4e:	00d4      	lsls	r4, r2, #3
 800da50:	4622      	mov	r2, r4
 800da52:	462b      	mov	r3, r5
 800da54:	1814      	adds	r4, r2, r0
 800da56:	653c      	str	r4, [r7, #80]	; 0x50
 800da58:	414b      	adcs	r3, r1
 800da5a:	657b      	str	r3, [r7, #84]	; 0x54
 800da5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	461a      	mov	r2, r3
 800da62:	f04f 0300 	mov.w	r3, #0
 800da66:	1891      	adds	r1, r2, r2
 800da68:	61b9      	str	r1, [r7, #24]
 800da6a:	415b      	adcs	r3, r3
 800da6c:	61fb      	str	r3, [r7, #28]
 800da6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800da76:	f7f3 f917 	bl	8000ca8 <__aeabi_uldivmod>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	4b6c      	ldr	r3, [pc, #432]	; (800dc30 <UART_SetConfig+0x38c>)
 800da80:	fba3 1302 	umull	r1, r3, r3, r2
 800da84:	095b      	lsrs	r3, r3, #5
 800da86:	2164      	movs	r1, #100	; 0x64
 800da88:	fb01 f303 	mul.w	r3, r1, r3
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	3332      	adds	r3, #50	; 0x32
 800da92:	4a67      	ldr	r2, [pc, #412]	; (800dc30 <UART_SetConfig+0x38c>)
 800da94:	fba2 2303 	umull	r2, r3, r2, r3
 800da98:	095b      	lsrs	r3, r3, #5
 800da9a:	f003 0207 	and.w	r2, r3, #7
 800da9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4432      	add	r2, r6
 800daa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800daa6:	e0b9      	b.n	800dc1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800daa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daaa:	461c      	mov	r4, r3
 800daac:	f04f 0500 	mov.w	r5, #0
 800dab0:	4622      	mov	r2, r4
 800dab2:	462b      	mov	r3, r5
 800dab4:	1891      	adds	r1, r2, r2
 800dab6:	6139      	str	r1, [r7, #16]
 800dab8:	415b      	adcs	r3, r3
 800daba:	617b      	str	r3, [r7, #20]
 800dabc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dac0:	1912      	adds	r2, r2, r4
 800dac2:	eb45 0303 	adc.w	r3, r5, r3
 800dac6:	f04f 0000 	mov.w	r0, #0
 800daca:	f04f 0100 	mov.w	r1, #0
 800dace:	00d9      	lsls	r1, r3, #3
 800dad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dad4:	00d0      	lsls	r0, r2, #3
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	eb12 0804 	adds.w	r8, r2, r4
 800dade:	eb43 0905 	adc.w	r9, r3, r5
 800dae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f04f 0100 	mov.w	r1, #0
 800daec:	f04f 0200 	mov.w	r2, #0
 800daf0:	f04f 0300 	mov.w	r3, #0
 800daf4:	008b      	lsls	r3, r1, #2
 800daf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800dafa:	0082      	lsls	r2, r0, #2
 800dafc:	4640      	mov	r0, r8
 800dafe:	4649      	mov	r1, r9
 800db00:	f7f3 f8d2 	bl	8000ca8 <__aeabi_uldivmod>
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4b49      	ldr	r3, [pc, #292]	; (800dc30 <UART_SetConfig+0x38c>)
 800db0a:	fba3 2302 	umull	r2, r3, r3, r2
 800db0e:	095b      	lsrs	r3, r3, #5
 800db10:	011e      	lsls	r6, r3, #4
 800db12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db14:	4618      	mov	r0, r3
 800db16:	f04f 0100 	mov.w	r1, #0
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	1894      	adds	r4, r2, r2
 800db20:	60bc      	str	r4, [r7, #8]
 800db22:	415b      	adcs	r3, r3
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db2a:	1812      	adds	r2, r2, r0
 800db2c:	eb41 0303 	adc.w	r3, r1, r3
 800db30:	f04f 0400 	mov.w	r4, #0
 800db34:	f04f 0500 	mov.w	r5, #0
 800db38:	00dd      	lsls	r5, r3, #3
 800db3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800db3e:	00d4      	lsls	r4, r2, #3
 800db40:	4622      	mov	r2, r4
 800db42:	462b      	mov	r3, r5
 800db44:	1814      	adds	r4, r2, r0
 800db46:	64bc      	str	r4, [r7, #72]	; 0x48
 800db48:	414b      	adcs	r3, r1
 800db4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	f04f 0100 	mov.w	r1, #0
 800db56:	f04f 0200 	mov.w	r2, #0
 800db5a:	f04f 0300 	mov.w	r3, #0
 800db5e:	008b      	lsls	r3, r1, #2
 800db60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800db64:	0082      	lsls	r2, r0, #2
 800db66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800db6a:	f7f3 f89d 	bl	8000ca8 <__aeabi_uldivmod>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4b2f      	ldr	r3, [pc, #188]	; (800dc30 <UART_SetConfig+0x38c>)
 800db74:	fba3 1302 	umull	r1, r3, r3, r2
 800db78:	095b      	lsrs	r3, r3, #5
 800db7a:	2164      	movs	r1, #100	; 0x64
 800db7c:	fb01 f303 	mul.w	r3, r1, r3
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	011b      	lsls	r3, r3, #4
 800db84:	3332      	adds	r3, #50	; 0x32
 800db86:	4a2a      	ldr	r2, [pc, #168]	; (800dc30 <UART_SetConfig+0x38c>)
 800db88:	fba2 2303 	umull	r2, r3, r2, r3
 800db8c:	095b      	lsrs	r3, r3, #5
 800db8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db92:	441e      	add	r6, r3
 800db94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db96:	4618      	mov	r0, r3
 800db98:	f04f 0100 	mov.w	r1, #0
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	1894      	adds	r4, r2, r2
 800dba2:	603c      	str	r4, [r7, #0]
 800dba4:	415b      	adcs	r3, r3
 800dba6:	607b      	str	r3, [r7, #4]
 800dba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbac:	1812      	adds	r2, r2, r0
 800dbae:	eb41 0303 	adc.w	r3, r1, r3
 800dbb2:	f04f 0400 	mov.w	r4, #0
 800dbb6:	f04f 0500 	mov.w	r5, #0
 800dbba:	00dd      	lsls	r5, r3, #3
 800dbbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800dbc0:	00d4      	lsls	r4, r2, #3
 800dbc2:	4622      	mov	r2, r4
 800dbc4:	462b      	mov	r3, r5
 800dbc6:	eb12 0a00 	adds.w	sl, r2, r0
 800dbca:	eb43 0b01 	adc.w	fp, r3, r1
 800dbce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f04f 0100 	mov.w	r1, #0
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	008b      	lsls	r3, r1, #2
 800dbe2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800dbe6:	0082      	lsls	r2, r0, #2
 800dbe8:	4650      	mov	r0, sl
 800dbea:	4659      	mov	r1, fp
 800dbec:	f7f3 f85c 	bl	8000ca8 <__aeabi_uldivmod>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <UART_SetConfig+0x38c>)
 800dbf6:	fba3 1302 	umull	r1, r3, r3, r2
 800dbfa:	095b      	lsrs	r3, r3, #5
 800dbfc:	2164      	movs	r1, #100	; 0x64
 800dbfe:	fb01 f303 	mul.w	r3, r1, r3
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	011b      	lsls	r3, r3, #4
 800dc06:	3332      	adds	r3, #50	; 0x32
 800dc08:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <UART_SetConfig+0x38c>)
 800dc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0e:	095b      	lsrs	r3, r3, #5
 800dc10:	f003 020f 	and.w	r2, r3, #15
 800dc14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4432      	add	r2, r6
 800dc1a:	609a      	str	r2, [r3, #8]
}
 800dc1c:	bf00      	nop
 800dc1e:	377c      	adds	r7, #124	; 0x7c
 800dc20:	46bd      	mov	sp, r7
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	bf00      	nop
 800dc28:	40011000 	.word	0x40011000
 800dc2c:	40011400 	.word	0x40011400
 800dc30:	51eb851f 	.word	0x51eb851f

0800dc34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc34:	b084      	sub	sp, #16
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b084      	sub	sp, #16
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	f107 001c 	add.w	r0, r7, #28
 800dc42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d122      	bne.n	800dc92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dc60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d105      	bne.n	800dc86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f001 fb1c 	bl	800f2c4 <USB_CoreReset>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	73fb      	strb	r3, [r7, #15]
 800dc90:	e01a      	b.n	800dcc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f001 fb10 	bl	800f2c4 <USB_CoreReset>
 800dca4:	4603      	mov	r3, r0
 800dca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcba:	e005      	b.n	800dcc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d10b      	bne.n	800dce6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	f043 0206 	orr.w	r2, r3, #6
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	f043 0220 	orr.w	r2, r3, #32
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcf2:	b004      	add	sp, #16
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d165      	bne.n	800ddd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	4a41      	ldr	r2, [pc, #260]	; (800de14 <USB_SetTurnaroundTime+0x11c>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d906      	bls.n	800dd22 <USB_SetTurnaroundTime+0x2a>
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	4a40      	ldr	r2, [pc, #256]	; (800de18 <USB_SetTurnaroundTime+0x120>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d202      	bcs.n	800dd22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dd1c:	230f      	movs	r3, #15
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e062      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	4a3c      	ldr	r2, [pc, #240]	; (800de18 <USB_SetTurnaroundTime+0x120>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d306      	bcc.n	800dd38 <USB_SetTurnaroundTime+0x40>
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	4a3b      	ldr	r2, [pc, #236]	; (800de1c <USB_SetTurnaroundTime+0x124>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d202      	bcs.n	800dd38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd32:	230e      	movs	r3, #14
 800dd34:	617b      	str	r3, [r7, #20]
 800dd36:	e057      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4a38      	ldr	r2, [pc, #224]	; (800de1c <USB_SetTurnaroundTime+0x124>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d306      	bcc.n	800dd4e <USB_SetTurnaroundTime+0x56>
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4a37      	ldr	r2, [pc, #220]	; (800de20 <USB_SetTurnaroundTime+0x128>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d202      	bcs.n	800dd4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dd48:	230d      	movs	r3, #13
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	e04c      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	4a33      	ldr	r2, [pc, #204]	; (800de20 <USB_SetTurnaroundTime+0x128>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d306      	bcc.n	800dd64 <USB_SetTurnaroundTime+0x6c>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4a32      	ldr	r2, [pc, #200]	; (800de24 <USB_SetTurnaroundTime+0x12c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d802      	bhi.n	800dd64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dd5e:	230c      	movs	r3, #12
 800dd60:	617b      	str	r3, [r7, #20]
 800dd62:	e041      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	4a2f      	ldr	r2, [pc, #188]	; (800de24 <USB_SetTurnaroundTime+0x12c>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d906      	bls.n	800dd7a <USB_SetTurnaroundTime+0x82>
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	4a2e      	ldr	r2, [pc, #184]	; (800de28 <USB_SetTurnaroundTime+0x130>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d802      	bhi.n	800dd7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dd74:	230b      	movs	r3, #11
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e036      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	4a2a      	ldr	r2, [pc, #168]	; (800de28 <USB_SetTurnaroundTime+0x130>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d906      	bls.n	800dd90 <USB_SetTurnaroundTime+0x98>
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	4a29      	ldr	r2, [pc, #164]	; (800de2c <USB_SetTurnaroundTime+0x134>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d802      	bhi.n	800dd90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dd8a:	230a      	movs	r3, #10
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e02b      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4a26      	ldr	r2, [pc, #152]	; (800de2c <USB_SetTurnaroundTime+0x134>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d906      	bls.n	800dda6 <USB_SetTurnaroundTime+0xae>
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	4a25      	ldr	r2, [pc, #148]	; (800de30 <USB_SetTurnaroundTime+0x138>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d202      	bcs.n	800dda6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dda0:	2309      	movs	r3, #9
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e020      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	4a21      	ldr	r2, [pc, #132]	; (800de30 <USB_SetTurnaroundTime+0x138>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d306      	bcc.n	800ddbc <USB_SetTurnaroundTime+0xc4>
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	4a20      	ldr	r2, [pc, #128]	; (800de34 <USB_SetTurnaroundTime+0x13c>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d802      	bhi.n	800ddbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ddb6:	2308      	movs	r3, #8
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	e015      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	4a1d      	ldr	r2, [pc, #116]	; (800de34 <USB_SetTurnaroundTime+0x13c>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d906      	bls.n	800ddd2 <USB_SetTurnaroundTime+0xda>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4a1c      	ldr	r2, [pc, #112]	; (800de38 <USB_SetTurnaroundTime+0x140>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d202      	bcs.n	800ddd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ddcc:	2307      	movs	r3, #7
 800ddce:	617b      	str	r3, [r7, #20]
 800ddd0:	e00a      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ddd2:	2306      	movs	r3, #6
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	e007      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ddd8:	79fb      	ldrb	r3, [r7, #7]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ddde:	2309      	movs	r3, #9
 800dde0:	617b      	str	r3, [r7, #20]
 800dde2:	e001      	b.n	800dde8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dde4:	2309      	movs	r3, #9
 800dde6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	029b      	lsls	r3, r3, #10
 800ddfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800de00:	431a      	orrs	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	371c      	adds	r7, #28
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	00d8acbf 	.word	0x00d8acbf
 800de18:	00e4e1c0 	.word	0x00e4e1c0
 800de1c:	00f42400 	.word	0x00f42400
 800de20:	01067380 	.word	0x01067380
 800de24:	011a499f 	.word	0x011a499f
 800de28:	01312cff 	.word	0x01312cff
 800de2c:	014ca43f 	.word	0x014ca43f
 800de30:	016e3600 	.word	0x016e3600
 800de34:	01a6ab1f 	.word	0x01a6ab1f
 800de38:	01e84800 	.word	0x01e84800

0800de3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f043 0201 	orr.w	r2, r3, #1
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr

0800de5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de5e:	b480      	push	{r7}
 800de60:	b083      	sub	sp, #12
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f023 0201 	bic.w	r2, r3, #1
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d115      	bne.n	800dece <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800deae:	2001      	movs	r0, #1
 800deb0:	f7f9 f97e 	bl	80071b0 <HAL_Delay>
      ms++;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	3301      	adds	r3, #1
 800deb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 f972 	bl	800f1a4 <USB_GetMode>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d01e      	beq.n	800df04 <USB_SetCurrentMode+0x84>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b31      	cmp	r3, #49	; 0x31
 800deca:	d9f0      	bls.n	800deae <USB_SetCurrentMode+0x2e>
 800decc:	e01a      	b.n	800df04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dece:	78fb      	ldrb	r3, [r7, #3]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d115      	bne.n	800df00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dee0:	2001      	movs	r0, #1
 800dee2:	f7f9 f965 	bl	80071b0 <HAL_Delay>
      ms++;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3301      	adds	r3, #1
 800deea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f001 f959 	bl	800f1a4 <USB_GetMode>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <USB_SetCurrentMode+0x84>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b31      	cmp	r3, #49	; 0x31
 800defc:	d9f0      	bls.n	800dee0 <USB_SetCurrentMode+0x60>
 800defe:	e001      	b.n	800df04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800df00:	2301      	movs	r3, #1
 800df02:	e005      	b.n	800df10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b32      	cmp	r3, #50	; 0x32
 800df08:	d101      	bne.n	800df0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e000      	b.n	800df10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df18:	b084      	sub	sp, #16
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b086      	sub	sp, #24
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800df26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800df2a:	2300      	movs	r3, #0
 800df2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800df32:	2300      	movs	r3, #0
 800df34:	613b      	str	r3, [r7, #16]
 800df36:	e009      	b.n	800df4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	3340      	adds	r3, #64	; 0x40
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	2200      	movs	r2, #0
 800df44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	3301      	adds	r3, #1
 800df4a:	613b      	str	r3, [r7, #16]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2b0e      	cmp	r3, #14
 800df50:	d9f2      	bls.n	800df38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800df52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df54:	2b00      	cmp	r3, #0
 800df56:	d11c      	bne.n	800df92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df66:	f043 0302 	orr.w	r3, r3, #2
 800df6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	639a      	str	r2, [r3, #56]	; 0x38
 800df90:	e00b      	b.n	800dfaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	680b      	ldr	r3, [r1, #0]
 800dfc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d10c      	bne.n	800dfea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f945 	bl	800e268 <USB_SetDevSpeed>
 800dfde:	e008      	b.n	800dff2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 f940 	bl	800e268 <USB_SetDevSpeed>
 800dfe8:	e003      	b.n	800dff2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dfea:	2103      	movs	r1, #3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 f93b 	bl	800e268 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dff2:	2110      	movs	r1, #16
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f8f3 	bl	800e1e0 <USB_FlushTxFifo>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 f90f 	bl	800e228 <USB_FlushRxFifo>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e010:	2301      	movs	r3, #1
 800e012:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e01a:	461a      	mov	r2, r3
 800e01c:	2300      	movs	r3, #0
 800e01e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e026:	461a      	mov	r2, r3
 800e028:	2300      	movs	r3, #0
 800e02a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e032:	461a      	mov	r2, r3
 800e034:	2300      	movs	r3, #0
 800e036:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e038:	2300      	movs	r3, #0
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	e043      	b.n	800e0c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e054:	d118      	bne.n	800e088 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	015a      	lsls	r2, r3, #5
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4413      	add	r3, r2
 800e064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e068:	461a      	mov	r2, r3
 800e06a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	e013      	b.n	800e09a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e07e:	461a      	mov	r2, r3
 800e080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e084:	6013      	str	r3, [r2, #0]
 800e086:	e008      	b.n	800e09a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e094:	461a      	mov	r2, r3
 800e096:	2300      	movs	r3, #0
 800e098:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	015a      	lsls	r2, r3, #5
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e0be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	613b      	str	r3, [r7, #16]
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d3b7      	bcc.n	800e03e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	e043      	b.n	800e15c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0ea:	d118      	bne.n	800e11e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10a      	bne.n	800e108 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	015a      	lsls	r2, r3, #5
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fe:	461a      	mov	r2, r3
 800e100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	e013      	b.n	800e130 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e114:	461a      	mov	r2, r3
 800e116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e11a:	6013      	str	r3, [r2, #0]
 800e11c:	e008      	b.n	800e130 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	015a      	lsls	r2, r3, #5
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	4413      	add	r3, r2
 800e126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e12a:	461a      	mov	r2, r3
 800e12c:	2300      	movs	r3, #0
 800e12e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	015a      	lsls	r2, r3, #5
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	4413      	add	r3, r2
 800e138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e13c:	461a      	mov	r2, r3
 800e13e:	2300      	movs	r3, #0
 800e140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e14e:	461a      	mov	r2, r3
 800e150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	3301      	adds	r3, #1
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	693a      	ldr	r2, [r7, #16]
 800e160:	429a      	cmp	r2, r3
 800e162:	d3b7      	bcc.n	800e0d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16a:	691b      	ldr	r3, [r3, #16]
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e176:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d105      	bne.n	800e198 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	f043 0210 	orr.w	r2, r3, #16
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	699a      	ldr	r2, [r3, #24]
 800e19c:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <USB_DevInit+0x2c4>)
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d005      	beq.n	800e1b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	f043 0208 	orr.w	r2, r3, #8
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d107      	bne.n	800e1cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1c4:	f043 0304 	orr.w	r3, r3, #4
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e1d8:	b004      	add	sp, #16
 800e1da:	4770      	bx	lr
 800e1dc:	803c3800 	.word	0x803c3800

0800e1e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	019b      	lsls	r3, r3, #6
 800e1f2:	f043 0220 	orr.w	r2, r3, #32
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	4a08      	ldr	r2, [pc, #32]	; (800e224 <USB_FlushTxFifo+0x44>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d901      	bls.n	800e20a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e006      	b.n	800e218 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b20      	cmp	r3, #32
 800e214:	d0f1      	beq.n	800e1fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	00030d40 	.word	0x00030d40

0800e228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e230:	2300      	movs	r3, #0
 800e232:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2210      	movs	r2, #16
 800e238:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	4a08      	ldr	r2, [pc, #32]	; (800e264 <USB_FlushRxFifo+0x3c>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d901      	bls.n	800e24a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e246:	2303      	movs	r3, #3
 800e248:	e006      	b.n	800e258 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	f003 0310 	and.w	r3, r3, #16
 800e252:	2b10      	cmp	r3, #16
 800e254:	d0f1      	beq.n	800e23a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	00030d40 	.word	0x00030d40

0800e268 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	68f9      	ldr	r1, [r7, #12]
 800e284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e288:	4313      	orrs	r3, r2
 800e28a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b087      	sub	sp, #28
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	f003 0306 	and.w	r3, r3, #6
 800e2b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d102      	bne.n	800e2c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	75fb      	strb	r3, [r7, #23]
 800e2be:	e00a      	b.n	800e2d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d002      	beq.n	800e2cc <USB_GetDevSpeed+0x32>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b06      	cmp	r3, #6
 800e2ca:	d102      	bne.n	800e2d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	75fb      	strb	r3, [r7, #23]
 800e2d0:	e001      	b.n	800e2d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e2d2:	230f      	movs	r3, #15
 800e2d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	371c      	adds	r7, #28
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	785b      	ldrb	r3, [r3, #1]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d13a      	bne.n	800e376 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e306:	69da      	ldr	r2, [r3, #28]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 030f 	and.w	r3, r3, #15
 800e310:	2101      	movs	r1, #1
 800e312:	fa01 f303 	lsl.w	r3, r1, r3
 800e316:	b29b      	uxth	r3, r3
 800e318:	68f9      	ldr	r1, [r7, #12]
 800e31a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e31e:	4313      	orrs	r3, r2
 800e320:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	015a      	lsls	r2, r3, #5
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	4413      	add	r3, r2
 800e32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d155      	bne.n	800e3e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	015a      	lsls	r2, r3, #5
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	4413      	add	r3, r2
 800e340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	78db      	ldrb	r3, [r3, #3]
 800e352:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e354:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	059b      	lsls	r3, r3, #22
 800e35a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e35c:	4313      	orrs	r3, r2
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	0151      	lsls	r1, r2, #5
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	440a      	add	r2, r1
 800e366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e36a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e372:	6013      	str	r3, [r2, #0]
 800e374:	e036      	b.n	800e3e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e37c:	69da      	ldr	r2, [r3, #28]
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	f003 030f 	and.w	r3, r3, #15
 800e386:	2101      	movs	r1, #1
 800e388:	fa01 f303 	lsl.w	r3, r1, r3
 800e38c:	041b      	lsls	r3, r3, #16
 800e38e:	68f9      	ldr	r1, [r7, #12]
 800e390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e394:	4313      	orrs	r3, r2
 800e396:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	015a      	lsls	r2, r3, #5
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d11a      	bne.n	800e3e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	015a      	lsls	r2, r3, #5
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	78db      	ldrb	r3, [r3, #3]
 800e3c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e3ca:	430b      	orrs	r3, r1
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	0151      	lsls	r1, r2, #5
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	440a      	add	r2, r1
 800e3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	785b      	ldrb	r3, [r3, #1]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d161      	bne.n	800e4d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e426:	d11f      	bne.n	800e468 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e446:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68ba      	ldr	r2, [r7, #8]
 800e458:	0151      	lsls	r1, r2, #5
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	440a      	add	r2, r1
 800e45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e46e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	f003 030f 	and.w	r3, r3, #15
 800e478:	2101      	movs	r1, #1
 800e47a:	fa01 f303 	lsl.w	r3, r1, r3
 800e47e:	b29b      	uxth	r3, r3
 800e480:	43db      	mvns	r3, r3
 800e482:	68f9      	ldr	r1, [r7, #12]
 800e484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e488:	4013      	ands	r3, r2
 800e48a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e492:	69da      	ldr	r2, [r3, #28]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	2101      	movs	r1, #1
 800e49e:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	43db      	mvns	r3, r3
 800e4a6:	68f9      	ldr	r1, [r7, #12]
 800e4a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	015a      	lsls	r2, r3, #5
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	0159      	lsls	r1, r3, #5
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	440b      	add	r3, r1
 800e4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4b35      	ldr	r3, [pc, #212]	; (800e5a4 <USB_DeactivateEndpoint+0x1b0>)
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	600b      	str	r3, [r1, #0]
 800e4d2:	e060      	b.n	800e596 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	015a      	lsls	r2, r3, #5
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4413      	add	r3, r2
 800e4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4ea:	d11f      	bne.n	800e52c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	0151      	lsls	r1, r2, #5
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	440a      	add	r2, r1
 800e502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e50a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	0151      	lsls	r1, r2, #5
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	440a      	add	r2, r1
 800e522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e52a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	f003 030f 	and.w	r3, r3, #15
 800e53c:	2101      	movs	r1, #1
 800e53e:	fa01 f303 	lsl.w	r3, r1, r3
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	43db      	mvns	r3, r3
 800e546:	68f9      	ldr	r1, [r7, #12]
 800e548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e54c:	4013      	ands	r3, r2
 800e54e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e556:	69da      	ldr	r2, [r3, #28]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	f003 030f 	and.w	r3, r3, #15
 800e560:	2101      	movs	r1, #1
 800e562:	fa01 f303 	lsl.w	r3, r1, r3
 800e566:	041b      	lsls	r3, r3, #16
 800e568:	43db      	mvns	r3, r3
 800e56a:	68f9      	ldr	r1, [r7, #12]
 800e56c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e570:	4013      	ands	r3, r2
 800e572:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	015a      	lsls	r2, r3, #5
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	4413      	add	r3, r2
 800e57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	0159      	lsls	r1, r3, #5
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	440b      	add	r3, r1
 800e58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58e:	4619      	mov	r1, r3
 800e590:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <USB_DeactivateEndpoint+0x1b4>)
 800e592:	4013      	ands	r3, r2
 800e594:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3714      	adds	r7, #20
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	ec337800 	.word	0xec337800
 800e5a8:	eff37800 	.word	0xeff37800

0800e5ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	; 0x28
 800e5b0:	af02      	add	r7, sp, #8
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	785b      	ldrb	r3, [r3, #1]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	f040 815c 	bne.w	800e886 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	695b      	ldr	r3, [r3, #20]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d132      	bne.n	800e63c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	69ba      	ldr	r2, [r7, #24]
 800e5e6:	0151      	lsls	r1, r2, #5
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	440a      	add	r2, r1
 800e5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e5f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e5f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	015a      	lsls	r2, r3, #5
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	4413      	add	r3, r2
 800e602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e606:	691b      	ldr	r3, [r3, #16]
 800e608:	69ba      	ldr	r2, [r7, #24]
 800e60a:	0151      	lsls	r1, r2, #5
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	440a      	add	r2, r1
 800e610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	015a      	lsls	r2, r3, #5
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	4413      	add	r3, r2
 800e622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	0151      	lsls	r1, r2, #5
 800e62c:	69fa      	ldr	r2, [r7, #28]
 800e62e:	440a      	add	r2, r1
 800e630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e634:	0cdb      	lsrs	r3, r3, #19
 800e636:	04db      	lsls	r3, r3, #19
 800e638:	6113      	str	r3, [r2, #16]
 800e63a:	e074      	b.n	800e726 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	0151      	lsls	r1, r2, #5
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	440a      	add	r2, r1
 800e652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e656:	0cdb      	lsrs	r3, r3, #19
 800e658:	04db      	lsls	r3, r3, #19
 800e65a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	69ba      	ldr	r2, [r7, #24]
 800e66c:	0151      	lsls	r1, r2, #5
 800e66e:	69fa      	ldr	r2, [r7, #28]
 800e670:	440a      	add	r2, r1
 800e672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e67a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e67e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	6959      	ldr	r1, [r3, #20]
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	440b      	add	r3, r1
 800e698:	1e59      	subs	r1, r3, #1
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e6a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e6a4:	4b9d      	ldr	r3, [pc, #628]	; (800e91c <USB_EPStartXfer+0x370>)
 800e6a6:	400b      	ands	r3, r1
 800e6a8:	69b9      	ldr	r1, [r7, #24]
 800e6aa:	0148      	lsls	r0, r1, #5
 800e6ac:	69f9      	ldr	r1, [r7, #28]
 800e6ae:	4401      	add	r1, r0
 800e6b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	015a      	lsls	r2, r3, #5
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	4413      	add	r3, r2
 800e6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6c4:	691a      	ldr	r2, [r3, #16]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6ce:	69b9      	ldr	r1, [r7, #24]
 800e6d0:	0148      	lsls	r0, r1, #5
 800e6d2:	69f9      	ldr	r1, [r7, #28]
 800e6d4:	4401      	add	r1, r0
 800e6d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	78db      	ldrb	r3, [r3, #3]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d11f      	bne.n	800e726 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	015a      	lsls	r2, r3, #5
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	69ba      	ldr	r2, [r7, #24]
 800e6f6:	0151      	lsls	r1, r2, #5
 800e6f8:	69fa      	ldr	r2, [r7, #28]
 800e6fa:	440a      	add	r2, r1
 800e6fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e700:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e704:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	0151      	lsls	r1, r2, #5
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	440a      	add	r2, r1
 800e71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e724:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e726:	79fb      	ldrb	r3, [r7, #7]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d14b      	bne.n	800e7c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d009      	beq.n	800e748 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	015a      	lsls	r2, r3, #5
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	4413      	add	r3, r2
 800e73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e740:	461a      	mov	r2, r3
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	78db      	ldrb	r3, [r3, #3]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d128      	bne.n	800e7a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d110      	bne.n	800e782 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	015a      	lsls	r2, r3, #5
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	4413      	add	r3, r2
 800e768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69ba      	ldr	r2, [r7, #24]
 800e770:	0151      	lsls	r1, r2, #5
 800e772:	69fa      	ldr	r2, [r7, #28]
 800e774:	440a      	add	r2, r1
 800e776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e77a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e77e:	6013      	str	r3, [r2, #0]
 800e780:	e00f      	b.n	800e7a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	015a      	lsls	r2, r3, #5
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	4413      	add	r3, r2
 800e78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	69ba      	ldr	r2, [r7, #24]
 800e792:	0151      	lsls	r1, r2, #5
 800e794:	69fa      	ldr	r2, [r7, #28]
 800e796:	440a      	add	r2, r1
 800e798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	015a      	lsls	r2, r3, #5
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	69ba      	ldr	r2, [r7, #24]
 800e7b2:	0151      	lsls	r1, r2, #5
 800e7b4:	69fa      	ldr	r2, [r7, #28]
 800e7b6:	440a      	add	r2, r1
 800e7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7c0:	6013      	str	r3, [r2, #0]
 800e7c2:	e12f      	b.n	800ea24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	015a      	lsls	r2, r3, #5
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	0151      	lsls	r1, r2, #5
 800e7d6:	69fa      	ldr	r2, [r7, #28]
 800e7d8:	440a      	add	r2, r1
 800e7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	78db      	ldrb	r3, [r3, #3]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d015      	beq.n	800e818 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 8117 	beq.w	800ea24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	f003 030f 	and.w	r3, r3, #15
 800e806:	2101      	movs	r1, #1
 800e808:	fa01 f303 	lsl.w	r3, r1, r3
 800e80c:	69f9      	ldr	r1, [r7, #28]
 800e80e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e812:	4313      	orrs	r3, r2
 800e814:	634b      	str	r3, [r1, #52]	; 0x34
 800e816:	e105      	b.n	800ea24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e824:	2b00      	cmp	r3, #0
 800e826:	d110      	bne.n	800e84a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	69ba      	ldr	r2, [r7, #24]
 800e838:	0151      	lsls	r1, r2, #5
 800e83a:	69fa      	ldr	r2, [r7, #28]
 800e83c:	440a      	add	r2, r1
 800e83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	e00f      	b.n	800e86a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	4413      	add	r3, r2
 800e852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	69ba      	ldr	r2, [r7, #24]
 800e85a:	0151      	lsls	r1, r2, #5
 800e85c:	69fa      	ldr	r2, [r7, #28]
 800e85e:	440a      	add	r2, r1
 800e860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e868:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	68d9      	ldr	r1, [r3, #12]
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	781a      	ldrb	r2, [r3, #0]
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	b298      	uxth	r0, r3
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	4603      	mov	r3, r0
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f000 fa2b 	bl	800ecda <USB_WritePacket>
 800e884:	e0ce      	b.n	800ea24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	69ba      	ldr	r2, [r7, #24]
 800e896:	0151      	lsls	r1, r2, #5
 800e898:	69fa      	ldr	r2, [r7, #28]
 800e89a:	440a      	add	r2, r1
 800e89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8a0:	0cdb      	lsrs	r3, r3, #19
 800e8a2:	04db      	lsls	r3, r3, #19
 800e8a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	015a      	lsls	r2, r3, #5
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	69ba      	ldr	r2, [r7, #24]
 800e8b6:	0151      	lsls	r1, r2, #5
 800e8b8:	69fa      	ldr	r2, [r7, #28]
 800e8ba:	440a      	add	r2, r1
 800e8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e8c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e8c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d126      	bne.n	800e920 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	015a      	lsls	r2, r3, #5
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	4413      	add	r3, r2
 800e8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8de:	691a      	ldr	r2, [r3, #16]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8e8:	69b9      	ldr	r1, [r7, #24]
 800e8ea:	0148      	lsls	r0, r1, #5
 800e8ec:	69f9      	ldr	r1, [r7, #28]
 800e8ee:	4401      	add	r1, r0
 800e8f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e916:	6113      	str	r3, [r2, #16]
 800e918:	e036      	b.n	800e988 <USB_EPStartXfer+0x3dc>
 800e91a:	bf00      	nop
 800e91c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	695a      	ldr	r2, [r3, #20]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	4413      	add	r3, r2
 800e92a:	1e5a      	subs	r2, r3, #1
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	fbb2 f3f3 	udiv	r3, r2, r3
 800e934:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	015a      	lsls	r2, r3, #5
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e942:	691a      	ldr	r2, [r3, #16]
 800e944:	8afb      	ldrh	r3, [r7, #22]
 800e946:	04d9      	lsls	r1, r3, #19
 800e948:	4b39      	ldr	r3, [pc, #228]	; (800ea30 <USB_EPStartXfer+0x484>)
 800e94a:	400b      	ands	r3, r1
 800e94c:	69b9      	ldr	r1, [r7, #24]
 800e94e:	0148      	lsls	r0, r1, #5
 800e950:	69f9      	ldr	r1, [r7, #28]
 800e952:	4401      	add	r1, r0
 800e954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e958:	4313      	orrs	r3, r2
 800e95a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	015a      	lsls	r2, r3, #5
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	4413      	add	r3, r2
 800e964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e968:	691a      	ldr	r2, [r3, #16]
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	8af9      	ldrh	r1, [r7, #22]
 800e970:	fb01 f303 	mul.w	r3, r1, r3
 800e974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e978:	69b9      	ldr	r1, [r7, #24]
 800e97a:	0148      	lsls	r0, r1, #5
 800e97c:	69f9      	ldr	r1, [r7, #28]
 800e97e:	4401      	add	r1, r0
 800e980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e984:	4313      	orrs	r3, r2
 800e986:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d10d      	bne.n	800e9aa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	68d9      	ldr	r1, [r3, #12]
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	015a      	lsls	r2, r3, #5
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a6:	460a      	mov	r2, r1
 800e9a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	78db      	ldrb	r3, [r3, #3]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d128      	bne.n	800ea04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d110      	bne.n	800e9e4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	015a      	lsls	r2, r3, #5
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	69ba      	ldr	r2, [r7, #24]
 800e9d2:	0151      	lsls	r1, r2, #5
 800e9d4:	69fa      	ldr	r2, [r7, #28]
 800e9d6:	440a      	add	r2, r1
 800e9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9e0:	6013      	str	r3, [r2, #0]
 800e9e2:	e00f      	b.n	800ea04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	015a      	lsls	r2, r3, #5
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	0151      	lsls	r1, r2, #5
 800e9f6:	69fa      	ldr	r2, [r7, #28]
 800e9f8:	440a      	add	r2, r1
 800e9fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	015a      	lsls	r2, r3, #5
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	69ba      	ldr	r2, [r7, #24]
 800ea14:	0151      	lsls	r1, r2, #5
 800ea16:	69fa      	ldr	r2, [r7, #28]
 800ea18:	440a      	add	r2, r1
 800ea1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3720      	adds	r7, #32
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	1ff80000 	.word	0x1ff80000

0800ea34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	785b      	ldrb	r3, [r3, #1]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	f040 80cd 	bne.w	800ebf0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	695b      	ldr	r3, [r3, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d132      	bne.n	800eac4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	0151      	lsls	r1, r2, #5
 800ea70:	697a      	ldr	r2, [r7, #20]
 800ea72:	440a      	add	r2, r1
 800ea74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	015a      	lsls	r2, r3, #5
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	4413      	add	r3, r2
 800ea8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	0151      	lsls	r1, r2, #5
 800ea94:	697a      	ldr	r2, [r7, #20]
 800ea96:	440a      	add	r2, r1
 800ea98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eaa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	015a      	lsls	r2, r3, #5
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	693a      	ldr	r2, [r7, #16]
 800eab2:	0151      	lsls	r1, r2, #5
 800eab4:	697a      	ldr	r2, [r7, #20]
 800eab6:	440a      	add	r2, r1
 800eab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eabc:	0cdb      	lsrs	r3, r3, #19
 800eabe:	04db      	lsls	r3, r3, #19
 800eac0:	6113      	str	r3, [r2, #16]
 800eac2:	e04e      	b.n	800eb62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	015a      	lsls	r2, r3, #5
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	4413      	add	r3, r2
 800eacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	0151      	lsls	r1, r2, #5
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	440a      	add	r2, r1
 800eada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eade:	0cdb      	lsrs	r3, r3, #19
 800eae0:	04db      	lsls	r3, r3, #19
 800eae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	015a      	lsls	r2, r3, #5
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	4413      	add	r3, r2
 800eaec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	0151      	lsls	r1, r2, #5
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	440a      	add	r2, r1
 800eafa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eafe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	695a      	ldr	r2, [r3, #20]
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d903      	bls.n	800eb1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	689a      	ldr	r2, [r3, #8]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	015a      	lsls	r2, r3, #5
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	4413      	add	r3, r2
 800eb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	0151      	lsls	r1, r2, #5
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	440a      	add	r2, r1
 800eb32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb48:	691a      	ldr	r2, [r3, #16]
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb52:	6939      	ldr	r1, [r7, #16]
 800eb54:	0148      	lsls	r0, r1, #5
 800eb56:	6979      	ldr	r1, [r7, #20]
 800eb58:	4401      	add	r1, r0
 800eb5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d11e      	bne.n	800eba6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d009      	beq.n	800eb84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	015a      	lsls	r2, r3, #5
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	0151      	lsls	r1, r2, #5
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	440a      	add	r2, r1
 800eb9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	e092      	b.n	800eccc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	015a      	lsls	r2, r3, #5
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	4413      	add	r3, r2
 800ebae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	0151      	lsls	r1, r2, #5
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	440a      	add	r2, r1
 800ebbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ebc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d07e      	beq.n	800eccc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	2101      	movs	r1, #1
 800ebe0:	fa01 f303 	lsl.w	r3, r1, r3
 800ebe4:	6979      	ldr	r1, [r7, #20]
 800ebe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebea:	4313      	orrs	r3, r2
 800ebec:	634b      	str	r3, [r1, #52]	; 0x34
 800ebee:	e06d      	b.n	800eccc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	0151      	lsls	r1, r2, #5
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	440a      	add	r2, r1
 800ec06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec0a:	0cdb      	lsrs	r3, r3, #19
 800ec0c:	04db      	lsls	r3, r3, #19
 800ec0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	015a      	lsls	r2, r3, #5
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	4413      	add	r3, r2
 800ec18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	0151      	lsls	r1, r2, #5
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	440a      	add	r2, r1
 800ec26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	695b      	ldr	r3, [r3, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	0151      	lsls	r1, r2, #5
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	440a      	add	r2, r1
 800ec5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	015a      	lsls	r2, r3, #5
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec70:	691a      	ldr	r2, [r3, #16]
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec7a:	6939      	ldr	r1, [r7, #16]
 800ec7c:	0148      	lsls	r0, r1, #5
 800ec7e:	6979      	ldr	r1, [r7, #20]
 800ec80:	4401      	add	r1, r0
 800ec82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec86:	4313      	orrs	r3, r2
 800ec88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ec8a:	79fb      	ldrb	r3, [r7, #7]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d10d      	bne.n	800ecac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d009      	beq.n	800ecac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	68d9      	ldr	r1, [r3, #12]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	015a      	lsls	r2, r3, #5
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	4413      	add	r3, r2
 800eca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca8:	460a      	mov	r2, r1
 800ecaa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	693a      	ldr	r2, [r7, #16]
 800ecbc:	0151      	lsls	r1, r2, #5
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	440a      	add	r2, r1
 800ecc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ecca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	371c      	adds	r7, #28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b089      	sub	sp, #36	; 0x24
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	4611      	mov	r1, r2
 800ece6:	461a      	mov	r2, r3
 800ece8:	460b      	mov	r3, r1
 800ecea:	71fb      	strb	r3, [r7, #7]
 800ecec:	4613      	mov	r3, r2
 800ecee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ecf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d123      	bne.n	800ed48 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed00:	88bb      	ldrh	r3, [r7, #4]
 800ed02:	3303      	adds	r3, #3
 800ed04:	089b      	lsrs	r3, r3, #2
 800ed06:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	61bb      	str	r3, [r7, #24]
 800ed0c:	e018      	b.n	800ed40 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	031a      	lsls	r2, r3, #12
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	4413      	add	r3, r2
 800ed16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	3301      	adds	r3, #1
 800ed26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	3301      	adds	r3, #1
 800ed32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	3301      	adds	r3, #1
 800ed38:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	61bb      	str	r3, [r7, #24]
 800ed40:	69ba      	ldr	r2, [r7, #24]
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d3e2      	bcc.n	800ed0e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3724      	adds	r7, #36	; 0x24
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b08b      	sub	sp, #44	; 0x2c
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	60b9      	str	r1, [r7, #8]
 800ed60:	4613      	mov	r3, r2
 800ed62:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ed6c:	88fb      	ldrh	r3, [r7, #6]
 800ed6e:	089b      	lsrs	r3, r3, #2
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ed74:	88fb      	ldrh	r3, [r7, #6]
 800ed76:	f003 0303 	and.w	r3, r3, #3
 800ed7a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	623b      	str	r3, [r7, #32]
 800ed80:	e014      	b.n	800edac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8c:	601a      	str	r2, [r3, #0]
    pDest++;
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	3301      	adds	r3, #1
 800ed92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	3301      	adds	r3, #1
 800ed98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	3301      	adds	r3, #1
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	3301      	adds	r3, #1
 800edaa:	623b      	str	r3, [r7, #32]
 800edac:	6a3a      	ldr	r2, [r7, #32]
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d3e6      	bcc.n	800ed82 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800edb4:	8bfb      	ldrh	r3, [r7, #30]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01e      	beq.n	800edf8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800edba:	2300      	movs	r3, #0
 800edbc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edc4:	461a      	mov	r2, r3
 800edc6:	f107 0310 	add.w	r3, r7, #16
 800edca:	6812      	ldr	r2, [r2, #0]
 800edcc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800edce:	693a      	ldr	r2, [r7, #16]
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	fa22 f303 	lsr.w	r3, r2, r3
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	701a      	strb	r2, [r3, #0]
      i++;
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	3301      	adds	r3, #1
 800ede4:	623b      	str	r3, [r7, #32]
      pDest++;
 800ede6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede8:	3301      	adds	r3, #1
 800edea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800edec:	8bfb      	ldrh	r3, [r7, #30]
 800edee:	3b01      	subs	r3, #1
 800edf0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800edf2:	8bfb      	ldrh	r3, [r7, #30]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1ea      	bne.n	800edce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	372c      	adds	r7, #44	; 0x2c
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee06:	b480      	push	{r7}
 800ee08:	b085      	sub	sp, #20
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	785b      	ldrb	r3, [r3, #1]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d12c      	bne.n	800ee7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	db12      	blt.n	800ee5a <USB_EPSetStall+0x54>
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00f      	beq.n	800ee5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	015a      	lsls	r2, r3, #5
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	4413      	add	r3, r2
 800ee42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	0151      	lsls	r1, r2, #5
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	440a      	add	r2, r1
 800ee50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ee58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	015a      	lsls	r2, r3, #5
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	4413      	add	r3, r2
 800ee62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	0151      	lsls	r1, r2, #5
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	440a      	add	r2, r1
 800ee70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee78:	6013      	str	r3, [r2, #0]
 800ee7a:	e02b      	b.n	800eed4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	015a      	lsls	r2, r3, #5
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4413      	add	r3, r2
 800ee84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	db12      	blt.n	800eeb4 <USB_EPSetStall+0xae>
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00f      	beq.n	800eeb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	015a      	lsls	r2, r3, #5
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	0151      	lsls	r1, r2, #5
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	440a      	add	r2, r1
 800eeaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eeae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eeb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	015a      	lsls	r2, r3, #5
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4413      	add	r3, r2
 800eebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68ba      	ldr	r2, [r7, #8]
 800eec4:	0151      	lsls	r1, r2, #5
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	440a      	add	r2, r1
 800eeca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3714      	adds	r7, #20
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eee2:	b480      	push	{r7}
 800eee4:	b085      	sub	sp, #20
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	785b      	ldrb	r3, [r3, #1]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d128      	bne.n	800ef50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	015a      	lsls	r2, r3, #5
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	4413      	add	r3, r2
 800ef06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	0151      	lsls	r1, r2, #5
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	440a      	add	r2, r1
 800ef14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	78db      	ldrb	r3, [r3, #3]
 800ef22:	2b03      	cmp	r3, #3
 800ef24:	d003      	beq.n	800ef2e <USB_EPClearStall+0x4c>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	78db      	ldrb	r3, [r3, #3]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d138      	bne.n	800efa0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	015a      	lsls	r2, r3, #5
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	4413      	add	r3, r2
 800ef36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	0151      	lsls	r1, r2, #5
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	440a      	add	r2, r1
 800ef44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	e027      	b.n	800efa0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	0151      	lsls	r1, r2, #5
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	440a      	add	r2, r1
 800ef66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	78db      	ldrb	r3, [r3, #3]
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d003      	beq.n	800ef80 <USB_EPClearStall+0x9e>
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	78db      	ldrb	r3, [r3, #3]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d10f      	bne.n	800efa0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	015a      	lsls	r2, r3, #5
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4413      	add	r3, r2
 800ef88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	0151      	lsls	r1, r2, #5
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	440a      	add	r2, r1
 800ef96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3714      	adds	r7, #20
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr

0800efae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800efae:	b480      	push	{r7}
 800efb0:	b085      	sub	sp, #20
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
 800efb6:	460b      	mov	r3, r1
 800efb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800efd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	78fb      	ldrb	r3, [r7, #3]
 800efdc:	011b      	lsls	r3, r3, #4
 800efde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800efe2:	68f9      	ldr	r1, [r7, #12]
 800efe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efe8:	4313      	orrs	r3, r2
 800efea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800effa:	b480      	push	{r7}
 800effc:	b085      	sub	sp, #20
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f014:	f023 0303 	bic.w	r3, r3, #3
 800f018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f028:	f023 0302 	bic.w	r3, r3, #2
 800f02c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f056:	f023 0303 	bic.w	r3, r3, #3
 800f05a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f06a:	f043 0302 	orr.w	r3, r3, #2
 800f06e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	695b      	ldr	r3, [r3, #20]
 800f08a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	699b      	ldr	r3, [r3, #24]
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	4013      	ands	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f096:	68fb      	ldr	r3, [r7, #12]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0c0:	69db      	ldr	r3, [r3, #28]
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	4013      	ands	r3, r2
 800f0c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	0c1b      	lsrs	r3, r3, #16
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3714      	adds	r7, #20
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0f4:	69db      	ldr	r3, [r3, #28]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	b29b      	uxth	r3, r3
}
 800f100:	4618      	mov	r0, r3
 800f102:	3714      	adds	r7, #20
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f11c:	78fb      	ldrb	r3, [r7, #3]
 800f11e:	015a      	lsls	r2, r3, #5
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4413      	add	r3, r2
 800f124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	4013      	ands	r3, r2
 800f138:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f13a:	68bb      	ldr	r3, [r7, #8]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f148:	b480      	push	{r7}
 800f14a:	b087      	sub	sp, #28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f16a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f16c:	78fb      	ldrb	r3, [r7, #3]
 800f16e:	f003 030f 	and.w	r3, r3, #15
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	fa22 f303 	lsr.w	r3, r2, r3
 800f178:	01db      	lsls	r3, r3, #7
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	4313      	orrs	r3, r2
 800f180:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f182:	78fb      	ldrb	r3, [r7, #3]
 800f184:	015a      	lsls	r2, r3, #5
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	4413      	add	r3, r2
 800f18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	693a      	ldr	r2, [r7, #16]
 800f192:	4013      	ands	r3, r2
 800f194:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f196:	68bb      	ldr	r3, [r7, #8]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	371c      	adds	r7, #28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	695b      	ldr	r3, [r3, #20]
 800f1b0:	f003 0301 	and.w	r3, r3, #1
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f1de:	f023 0307 	bic.w	r3, r3, #7
 800f1e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3714      	adds	r7, #20
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
	...

0800f208 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f208:	b480      	push	{r7}
 800f20a:	b087      	sub	sp, #28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	460b      	mov	r3, r1
 800f212:	607a      	str	r2, [r7, #4]
 800f214:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	333c      	adds	r3, #60	; 0x3c
 800f21e:	3304      	adds	r3, #4
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	4a26      	ldr	r2, [pc, #152]	; (800f2c0 <USB_EP0_OutStart+0xb8>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d90a      	bls.n	800f242 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f23c:	d101      	bne.n	800f242 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f23e:	2300      	movs	r3, #0
 800f240:	e037      	b.n	800f2b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f248:	461a      	mov	r2, r3
 800f24a:	2300      	movs	r3, #0
 800f24c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f25c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	697a      	ldr	r2, [r7, #20]
 800f26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f270:	f043 0318 	orr.w	r3, r3, #24
 800f274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f284:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f288:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f28a:	7afb      	ldrb	r3, [r7, #11]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d10f      	bne.n	800f2b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f296:	461a      	mov	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f2ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	4f54300a 	.word	0x4f54300a

0800f2c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	60fb      	str	r3, [r7, #12]
 800f2d6:	4a13      	ldr	r2, [pc, #76]	; (800f324 <USB_CoreReset+0x60>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d901      	bls.n	800f2e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	e01a      	b.n	800f316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	daf3      	bge.n	800f2d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	f043 0201 	orr.w	r2, r3, #1
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	4a09      	ldr	r2, [pc, #36]	; (800f324 <USB_CoreReset+0x60>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d901      	bls.n	800f308 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f304:	2303      	movs	r3, #3
 800f306:	e006      	b.n	800f316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	f003 0301 	and.w	r3, r3, #1
 800f310:	2b01      	cmp	r3, #1
 800f312:	d0f1      	beq.n	800f2f8 <USB_CoreReset+0x34>

  return HAL_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	00030d40 	.word	0x00030d40

0800f328 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f32c:	4904      	ldr	r1, [pc, #16]	; (800f340 <MX_FATFS_Init+0x18>)
 800f32e:	4805      	ldr	r0, [pc, #20]	; (800f344 <MX_FATFS_Init+0x1c>)
 800f330:	f004 fffe 	bl	8014330 <FATFS_LinkDriver>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	4b03      	ldr	r3, [pc, #12]	; (800f348 <MX_FATFS_Init+0x20>)
 800f33a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f33c:	bf00      	nop
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	200070c4 	.word	0x200070c4
 800f344:	20000068 	.word	0x20000068
 800f348:	200070c8 	.word	0x200070c8

0800f34c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f350:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f352:	4618      	mov	r0, r3
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	4603      	mov	r3, r0
 800f364:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800f366:	79fb      	ldrb	r3, [r7, #7]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 f9dd 	bl	800f728 <USER_SPI_initialize>
 800f36e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fab9 	bl	800f8fc <USER_SPI_status>
 800f38a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60b9      	str	r1, [r7, #8]
 800f39c:	607a      	str	r2, [r7, #4]
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800f3a4:	7bf8      	ldrb	r0, [r7, #15]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	f000 fabc 	bl	800f928 <USER_SPI_read>
 800f3b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	603b      	str	r3, [r7, #0]
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800f3ca:	7bf8      	ldrb	r0, [r7, #15]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	f000 fb0f 	bl	800f9f4 <USER_SPI_write>
 800f3d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	603a      	str	r2, [r7, #0]
 800f3ea:	71fb      	strb	r3, [r7, #7]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800f3f0:	79b9      	ldrb	r1, [r7, #6]
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fb78 	bl	800faec <USER_SPI_ioctl>
 800f3fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f410:	f7f7 fec2 	bl	8007198 <HAL_GetTick>
 800f414:	4603      	mov	r3, r0
 800f416:	4a04      	ldr	r2, [pc, #16]	; (800f428 <SPI_Timer_On+0x20>)
 800f418:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800f41a:	4a04      	ldr	r2, [pc, #16]	; (800f42c <SPI_Timer_On+0x24>)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6013      	str	r3, [r2, #0]
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20007530 	.word	0x20007530
 800f42c:	20007534 	.word	0x20007534

0800f430 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800f430:	b580      	push	{r7, lr}
 800f432:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800f434:	f7f7 feb0 	bl	8007198 <HAL_GetTick>
 800f438:	4602      	mov	r2, r0
 800f43a:	4b06      	ldr	r3, [pc, #24]	; (800f454 <SPI_Timer_Status+0x24>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	1ad2      	subs	r2, r2, r3
 800f440:	4b05      	ldr	r3, [pc, #20]	; (800f458 <SPI_Timer_Status+0x28>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	bf34      	ite	cc
 800f448:	2301      	movcc	r3, #1
 800f44a:	2300      	movcs	r3, #0
 800f44c:	b2db      	uxtb	r3, r3
}
 800f44e:	4618      	mov	r0, r3
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	20007530 	.word	0x20007530
 800f458:	20007534 	.word	0x20007534

0800f45c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af02      	add	r7, sp, #8
 800f462:	4603      	mov	r3, r0
 800f464:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800f466:	f107 020f 	add.w	r2, r7, #15
 800f46a:	1df9      	adds	r1, r7, #7
 800f46c:	2332      	movs	r3, #50	; 0x32
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	2301      	movs	r3, #1
 800f472:	4804      	ldr	r0, [pc, #16]	; (800f484 <xchg_spi+0x28>)
 800f474:	f7fc ff68 	bl	800c348 <HAL_SPI_TransmitReceive>
    return rxDat;
 800f478:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	20005f50 	.word	0x20005f50

0800f488 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800f488:	b590      	push	{r4, r7, lr}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800f492:	2300      	movs	r3, #0
 800f494:	60fb      	str	r3, [r7, #12]
 800f496:	e00a      	b.n	800f4ae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	18d4      	adds	r4, r2, r3
 800f49e:	20ff      	movs	r0, #255	; 0xff
 800f4a0:	f7ff ffdc 	bl	800f45c <xchg_spi>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	60fb      	str	r3, [r7, #12]
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d3f0      	bcc.n	800f498 <rcvr_spi_multi+0x10>
	}
}
 800f4b6:	bf00      	nop
 800f4b8:	bf00      	nop
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd90      	pop	{r4, r7, pc}

0800f4c0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60fb      	str	r3, [r7, #12]
 800f4ce:	e009      	b.n	800f4e4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7ff ffbf 	bl	800f45c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d3f1      	bcc.n	800f4d0 <xmit_spi_multi+0x10>
	}
}
 800f4ec:	bf00      	nop
 800f4ee:	bf00      	nop
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b086      	sub	sp, #24
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800f4fe:	f7f7 fe4b 	bl	8007198 <HAL_GetTick>
 800f502:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800f508:	20ff      	movs	r0, #255	; 0xff
 800f50a:	f7ff ffa7 	bl	800f45c <xchg_spi>
 800f50e:	4603      	mov	r3, r0
 800f510:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800f512:	7bfb      	ldrb	r3, [r7, #15]
 800f514:	2bff      	cmp	r3, #255	; 0xff
 800f516:	d007      	beq.n	800f528 <wait_ready+0x32>
 800f518:	f7f7 fe3e 	bl	8007198 <HAL_GetTick>
 800f51c:	4602      	mov	r2, r0
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	429a      	cmp	r2, r3
 800f526:	d8ef      	bhi.n	800f508 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800f528:	7bfb      	ldrb	r3, [r7, #15]
 800f52a:	2bff      	cmp	r3, #255	; 0xff
 800f52c:	bf0c      	ite	eq
 800f52e:	2301      	moveq	r3, #1
 800f530:	2300      	movne	r3, #0
 800f532:	b2db      	uxtb	r3, r3
}
 800f534:	4618      	mov	r0, r3
 800f536:	3718      	adds	r7, #24
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800f540:	2201      	movs	r2, #1
 800f542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f546:	4804      	ldr	r0, [pc, #16]	; (800f558 <despiselect+0x1c>)
 800f548:	f7f8 fd3e 	bl	8007fc8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800f54c:	20ff      	movs	r0, #255	; 0xff
 800f54e:	f7ff ff85 	bl	800f45c <xchg_spi>

}
 800f552:	bf00      	nop
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	40021400 	.word	0x40021400

0800f55c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800f560:	2200      	movs	r2, #0
 800f562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f566:	480a      	ldr	r0, [pc, #40]	; (800f590 <spiselect+0x34>)
 800f568:	f7f8 fd2e 	bl	8007fc8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800f56c:	20ff      	movs	r0, #255	; 0xff
 800f56e:	f7ff ff75 	bl	800f45c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800f572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f576:	f7ff ffbe 	bl	800f4f6 <wait_ready>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d001      	beq.n	800f584 <spiselect+0x28>
 800f580:	2301      	movs	r3, #1
 800f582:	e002      	b.n	800f58a <spiselect+0x2e>

	despiselect();
 800f584:	f7ff ffda 	bl	800f53c <despiselect>
	return 0;	/* Timeout */
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	40021400 	.word	0x40021400

0800f594 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800f59e:	20c8      	movs	r0, #200	; 0xc8
 800f5a0:	f7ff ff32 	bl	800f408 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800f5a4:	20ff      	movs	r0, #255	; 0xff
 800f5a6:	f7ff ff59 	bl	800f45c <xchg_spi>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	2bff      	cmp	r3, #255	; 0xff
 800f5b2:	d104      	bne.n	800f5be <rcvr_datablock+0x2a>
 800f5b4:	f7ff ff3c 	bl	800f430 <SPI_Timer_Status>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1f2      	bne.n	800f5a4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	2bfe      	cmp	r3, #254	; 0xfe
 800f5c2:	d001      	beq.n	800f5c8 <rcvr_datablock+0x34>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	e00a      	b.n	800f5de <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff ff5c 	bl	800f488 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800f5d0:	20ff      	movs	r0, #255	; 0xff
 800f5d2:	f7ff ff43 	bl	800f45c <xchg_spi>
 800f5d6:	20ff      	movs	r0, #255	; 0xff
 800f5d8:	f7ff ff40 	bl	800f45c <xchg_spi>

	return 1;						/* Function succeeded */
 800f5dc:	2301      	movs	r3, #1
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b084      	sub	sp, #16
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800f5f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f5f6:	f7ff ff7e 	bl	800f4f6 <wait_ready>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <xmit_datablock+0x1e>
 800f600:	2300      	movs	r3, #0
 800f602:	e01e      	b.n	800f642 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	4618      	mov	r0, r3
 800f608:	f7ff ff28 	bl	800f45c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800f60c:	78fb      	ldrb	r3, [r7, #3]
 800f60e:	2bfd      	cmp	r3, #253	; 0xfd
 800f610:	d016      	beq.n	800f640 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800f612:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff ff52 	bl	800f4c0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800f61c:	20ff      	movs	r0, #255	; 0xff
 800f61e:	f7ff ff1d 	bl	800f45c <xchg_spi>
 800f622:	20ff      	movs	r0, #255	; 0xff
 800f624:	f7ff ff1a 	bl	800f45c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800f628:	20ff      	movs	r0, #255	; 0xff
 800f62a:	f7ff ff17 	bl	800f45c <xchg_spi>
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800f632:	7bfb      	ldrb	r3, [r7, #15]
 800f634:	f003 031f 	and.w	r3, r3, #31
 800f638:	2b05      	cmp	r3, #5
 800f63a:	d001      	beq.n	800f640 <xmit_datablock+0x5a>
 800f63c:	2300      	movs	r3, #0
 800f63e:	e000      	b.n	800f642 <xmit_datablock+0x5c>
	}
	return 1;
 800f640:	2301      	movs	r3, #1
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b084      	sub	sp, #16
 800f64e:	af00      	add	r7, sp, #0
 800f650:	4603      	mov	r3, r0
 800f652:	6039      	str	r1, [r7, #0]
 800f654:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800f656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da0e      	bge.n	800f67c <send_cmd+0x32>
		cmd &= 0x7F;
 800f65e:	79fb      	ldrb	r3, [r7, #7]
 800f660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f664:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800f666:	2100      	movs	r1, #0
 800f668:	2037      	movs	r0, #55	; 0x37
 800f66a:	f7ff ffee 	bl	800f64a <send_cmd>
 800f66e:	4603      	mov	r3, r0
 800f670:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800f672:	7bbb      	ldrb	r3, [r7, #14]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d901      	bls.n	800f67c <send_cmd+0x32>
 800f678:	7bbb      	ldrb	r3, [r7, #14]
 800f67a:	e051      	b.n	800f720 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800f67c:	79fb      	ldrb	r3, [r7, #7]
 800f67e:	2b0c      	cmp	r3, #12
 800f680:	d008      	beq.n	800f694 <send_cmd+0x4a>
		despiselect();
 800f682:	f7ff ff5b 	bl	800f53c <despiselect>
		if (!spiselect()) return 0xFF;
 800f686:	f7ff ff69 	bl	800f55c <spiselect>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <send_cmd+0x4a>
 800f690:	23ff      	movs	r3, #255	; 0xff
 800f692:	e045      	b.n	800f720 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800f694:	79fb      	ldrb	r3, [r7, #7]
 800f696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff fedd 	bl	800f45c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	0e1b      	lsrs	r3, r3, #24
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7ff fed7 	bl	800f45c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	0c1b      	lsrs	r3, r3, #16
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff fed1 	bl	800f45c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	0a1b      	lsrs	r3, r3, #8
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fecb 	bl	800f45c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff fec6 	bl	800f45c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800f6d4:	79fb      	ldrb	r3, [r7, #7]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <send_cmd+0x94>
 800f6da:	2395      	movs	r3, #149	; 0x95
 800f6dc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	2b08      	cmp	r3, #8
 800f6e2:	d101      	bne.n	800f6e8 <send_cmd+0x9e>
 800f6e4:	2387      	movs	r3, #135	; 0x87
 800f6e6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7ff feb6 	bl	800f45c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	2b0c      	cmp	r3, #12
 800f6f4:	d102      	bne.n	800f6fc <send_cmd+0xb2>
 800f6f6:	20ff      	movs	r0, #255	; 0xff
 800f6f8:	f7ff feb0 	bl	800f45c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800f6fc:	230a      	movs	r3, #10
 800f6fe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800f700:	20ff      	movs	r0, #255	; 0xff
 800f702:	f7ff feab 	bl	800f45c <xchg_spi>
 800f706:	4603      	mov	r3, r0
 800f708:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800f70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	da05      	bge.n	800f71e <send_cmd+0xd4>
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	3b01      	subs	r3, #1
 800f716:	73fb      	strb	r3, [r7, #15]
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1f0      	bne.n	800f700 <send_cmd+0xb6>

	return res;							/* Return received response */
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <USER_SPI_initialize+0x14>
 800f738:	2301      	movs	r3, #1
 800f73a:	e0d4      	b.n	800f8e6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800f73c:	4b6c      	ldr	r3, [pc, #432]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	f003 0302 	and.w	r3, r3, #2
 800f746:	2b00      	cmp	r3, #0
 800f748:	d003      	beq.n	800f752 <USER_SPI_initialize+0x2a>
 800f74a:	4b69      	ldr	r3, [pc, #420]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	e0c9      	b.n	800f8e6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800f752:	4b68      	ldr	r3, [pc, #416]	; (800f8f4 <USER_SPI_initialize+0x1cc>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	4b66      	ldr	r3, [pc, #408]	; (800f8f4 <USER_SPI_initialize+0x1cc>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800f760:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800f762:	230a      	movs	r3, #10
 800f764:	73fb      	strb	r3, [r7, #15]
 800f766:	e005      	b.n	800f774 <USER_SPI_initialize+0x4c>
 800f768:	20ff      	movs	r0, #255	; 0xff
 800f76a:	f7ff fe77 	bl	800f45c <xchg_spi>
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
 800f770:	3b01      	subs	r3, #1
 800f772:	73fb      	strb	r3, [r7, #15]
 800f774:	7bfb      	ldrb	r3, [r7, #15]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1f6      	bne.n	800f768 <USER_SPI_initialize+0x40>

	ty = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800f77e:	2100      	movs	r1, #0
 800f780:	2000      	movs	r0, #0
 800f782:	f7ff ff62 	bl	800f64a <send_cmd>
 800f786:	4603      	mov	r3, r0
 800f788:	2b01      	cmp	r3, #1
 800f78a:	f040 808b 	bne.w	800f8a4 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800f78e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f792:	f7ff fe39 	bl	800f408 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800f796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f79a:	2008      	movs	r0, #8
 800f79c:	f7ff ff55 	bl	800f64a <send_cmd>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d151      	bne.n	800f84a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73fb      	strb	r3, [r7, #15]
 800f7aa:	e00d      	b.n	800f7c8 <USER_SPI_initialize+0xa0>
 800f7ac:	7bfc      	ldrb	r4, [r7, #15]
 800f7ae:	20ff      	movs	r0, #255	; 0xff
 800f7b0:	f7ff fe54 	bl	800f45c <xchg_spi>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f107 0310 	add.w	r3, r7, #16
 800f7bc:	4423      	add	r3, r4
 800f7be:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f7c2:	7bfb      	ldrb	r3, [r7, #15]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	73fb      	strb	r3, [r7, #15]
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	2b03      	cmp	r3, #3
 800f7cc:	d9ee      	bls.n	800f7ac <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800f7ce:	7abb      	ldrb	r3, [r7, #10]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d167      	bne.n	800f8a4 <USER_SPI_initialize+0x17c>
 800f7d4:	7afb      	ldrb	r3, [r7, #11]
 800f7d6:	2baa      	cmp	r3, #170	; 0xaa
 800f7d8:	d164      	bne.n	800f8a4 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800f7da:	bf00      	nop
 800f7dc:	f7ff fe28 	bl	800f430 <SPI_Timer_Status>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d007      	beq.n	800f7f6 <USER_SPI_initialize+0xce>
 800f7e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f7ea:	20a9      	movs	r0, #169	; 0xa9
 800f7ec:	f7ff ff2d 	bl	800f64a <send_cmd>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1f2      	bne.n	800f7dc <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800f7f6:	f7ff fe1b 	bl	800f430 <SPI_Timer_Status>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d051      	beq.n	800f8a4 <USER_SPI_initialize+0x17c>
 800f800:	2100      	movs	r1, #0
 800f802:	203a      	movs	r0, #58	; 0x3a
 800f804:	f7ff ff21 	bl	800f64a <send_cmd>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d14a      	bne.n	800f8a4 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800f80e:	2300      	movs	r3, #0
 800f810:	73fb      	strb	r3, [r7, #15]
 800f812:	e00d      	b.n	800f830 <USER_SPI_initialize+0x108>
 800f814:	7bfc      	ldrb	r4, [r7, #15]
 800f816:	20ff      	movs	r0, #255	; 0xff
 800f818:	f7ff fe20 	bl	800f45c <xchg_spi>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
 800f820:	f107 0310 	add.w	r3, r7, #16
 800f824:	4423      	add	r3, r4
 800f826:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
 800f82c:	3301      	adds	r3, #1
 800f82e:	73fb      	strb	r3, [r7, #15]
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	2b03      	cmp	r3, #3
 800f834:	d9ee      	bls.n	800f814 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800f836:	7a3b      	ldrb	r3, [r7, #8]
 800f838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <USER_SPI_initialize+0x11c>
 800f840:	230c      	movs	r3, #12
 800f842:	e000      	b.n	800f846 <USER_SPI_initialize+0x11e>
 800f844:	2304      	movs	r3, #4
 800f846:	737b      	strb	r3, [r7, #13]
 800f848:	e02c      	b.n	800f8a4 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800f84a:	2100      	movs	r1, #0
 800f84c:	20a9      	movs	r0, #169	; 0xa9
 800f84e:	f7ff fefc 	bl	800f64a <send_cmd>
 800f852:	4603      	mov	r3, r0
 800f854:	2b01      	cmp	r3, #1
 800f856:	d804      	bhi.n	800f862 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800f858:	2302      	movs	r3, #2
 800f85a:	737b      	strb	r3, [r7, #13]
 800f85c:	23a9      	movs	r3, #169	; 0xa9
 800f85e:	73bb      	strb	r3, [r7, #14]
 800f860:	e003      	b.n	800f86a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800f862:	2301      	movs	r3, #1
 800f864:	737b      	strb	r3, [r7, #13]
 800f866:	2301      	movs	r3, #1
 800f868:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800f86a:	bf00      	nop
 800f86c:	f7ff fde0 	bl	800f430 <SPI_Timer_Status>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d007      	beq.n	800f886 <USER_SPI_initialize+0x15e>
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	2100      	movs	r1, #0
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff fee5 	bl	800f64a <send_cmd>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1f2      	bne.n	800f86c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800f886:	f7ff fdd3 	bl	800f430 <SPI_Timer_Status>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <USER_SPI_initialize+0x178>
 800f890:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f894:	2010      	movs	r0, #16
 800f896:	f7ff fed8 	bl	800f64a <send_cmd>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <USER_SPI_initialize+0x17c>
				ty = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800f8a4:	4a14      	ldr	r2, [pc, #80]	; (800f8f8 <USER_SPI_initialize+0x1d0>)
 800f8a6:	7b7b      	ldrb	r3, [r7, #13]
 800f8a8:	7013      	strb	r3, [r2, #0]
	despiselect();
 800f8aa:	f7ff fe47 	bl	800f53c <despiselect>

	if (ty) {			/* OK */
 800f8ae:	7b7b      	ldrb	r3, [r7, #13]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d012      	beq.n	800f8da <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800f8b4:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <USER_SPI_initialize+0x1cc>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f8be:	4b0d      	ldr	r3, [pc, #52]	; (800f8f4 <USER_SPI_initialize+0x1cc>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f042 0218 	orr.w	r2, r2, #24
 800f8c6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800f8c8:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	f023 0301 	bic.w	r3, r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f8d6:	701a      	strb	r2, [r3, #0]
 800f8d8:	e002      	b.n	800f8e0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800f8da:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f8dc:	2201      	movs	r2, #1
 800f8de:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800f8e0:	4b03      	ldr	r3, [pc, #12]	; (800f8f0 <USER_SPI_initialize+0x1c8>)
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	b2db      	uxtb	r3, r3
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd90      	pop	{r4, r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	2000007c 	.word	0x2000007c
 800f8f4:	20005f50 	.word	0x20005f50
 800f8f8:	200007d8 	.word	0x200007d8

0800f8fc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800f906:	79fb      	ldrb	r3, [r7, #7]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <USER_SPI_status+0x14>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e002      	b.n	800f916 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800f910:	4b04      	ldr	r3, [pc, #16]	; (800f924 <USER_SPI_status+0x28>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	b2db      	uxtb	r3, r3
}
 800f916:	4618      	mov	r0, r3
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	2000007c 	.word	0x2000007c

0800f928 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60b9      	str	r1, [r7, #8]
 800f930:	607a      	str	r2, [r7, #4]
 800f932:	603b      	str	r3, [r7, #0]
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d102      	bne.n	800f944 <USER_SPI_read+0x1c>
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <USER_SPI_read+0x20>
 800f944:	2304      	movs	r3, #4
 800f946:	e04d      	b.n	800f9e4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800f948:	4b28      	ldr	r3, [pc, #160]	; (800f9ec <USER_SPI_read+0xc4>)
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <USER_SPI_read+0x32>
 800f956:	2303      	movs	r3, #3
 800f958:	e044      	b.n	800f9e4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800f95a:	4b25      	ldr	r3, [pc, #148]	; (800f9f0 <USER_SPI_read+0xc8>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 0308 	and.w	r3, r3, #8
 800f962:	2b00      	cmp	r3, #0
 800f964:	d102      	bne.n	800f96c <USER_SPI_read+0x44>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	025b      	lsls	r3, r3, #9
 800f96a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d111      	bne.n	800f996 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	2011      	movs	r0, #17
 800f976:	f7ff fe68 	bl	800f64a <send_cmd>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d129      	bne.n	800f9d4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800f980:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f984:	68b8      	ldr	r0, [r7, #8]
 800f986:	f7ff fe05 	bl	800f594 <rcvr_datablock>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d021      	beq.n	800f9d4 <USER_SPI_read+0xac>
			count = 0;
 800f990:	2300      	movs	r3, #0
 800f992:	603b      	str	r3, [r7, #0]
 800f994:	e01e      	b.n	800f9d4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800f996:	6879      	ldr	r1, [r7, #4]
 800f998:	2012      	movs	r0, #18
 800f99a:	f7ff fe56 	bl	800f64a <send_cmd>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d117      	bne.n	800f9d4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800f9a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f7ff fdf3 	bl	800f594 <rcvr_datablock>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00a      	beq.n	800f9ca <USER_SPI_read+0xa2>
				buff += 512;
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f9ba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	603b      	str	r3, [r7, #0]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1ed      	bne.n	800f9a4 <USER_SPI_read+0x7c>
 800f9c8:	e000      	b.n	800f9cc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800f9ca:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	200c      	movs	r0, #12
 800f9d0:	f7ff fe3b 	bl	800f64a <send_cmd>
		}
	}
	despiselect();
 800f9d4:	f7ff fdb2 	bl	800f53c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	bf14      	ite	ne
 800f9de:	2301      	movne	r3, #1
 800f9e0:	2300      	moveq	r3, #0
 800f9e2:	b2db      	uxtb	r3, r3
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	2000007c 	.word	0x2000007c
 800f9f0:	200007d8 	.word	0x200007d8

0800f9f4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60b9      	str	r1, [r7, #8]
 800f9fc:	607a      	str	r2, [r7, #4]
 800f9fe:	603b      	str	r3, [r7, #0]
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <USER_SPI_write+0x1c>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <USER_SPI_write+0x20>
 800fa10:	2304      	movs	r3, #4
 800fa12:	e063      	b.n	800fadc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800fa14:	4b33      	ldr	r3, [pc, #204]	; (800fae4 <USER_SPI_write+0xf0>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	f003 0301 	and.w	r3, r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <USER_SPI_write+0x32>
 800fa22:	2303      	movs	r3, #3
 800fa24:	e05a      	b.n	800fadc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800fa26:	4b2f      	ldr	r3, [pc, #188]	; (800fae4 <USER_SPI_write+0xf0>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	f003 0304 	and.w	r3, r3, #4
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <USER_SPI_write+0x44>
 800fa34:	2302      	movs	r3, #2
 800fa36:	e051      	b.n	800fadc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800fa38:	4b2b      	ldr	r3, [pc, #172]	; (800fae8 <USER_SPI_write+0xf4>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	f003 0308 	and.w	r3, r3, #8
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d102      	bne.n	800fa4a <USER_SPI_write+0x56>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	025b      	lsls	r3, r3, #9
 800fa48:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d110      	bne.n	800fa72 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	2018      	movs	r0, #24
 800fa54:	f7ff fdf9 	bl	800f64a <send_cmd>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d136      	bne.n	800facc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800fa5e:	21fe      	movs	r1, #254	; 0xfe
 800fa60:	68b8      	ldr	r0, [r7, #8]
 800fa62:	f7ff fdc0 	bl	800f5e6 <xmit_datablock>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d02f      	beq.n	800facc <USER_SPI_write+0xd8>
			count = 0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	603b      	str	r3, [r7, #0]
 800fa70:	e02c      	b.n	800facc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800fa72:	4b1d      	ldr	r3, [pc, #116]	; (800fae8 <USER_SPI_write+0xf4>)
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	f003 0306 	and.w	r3, r3, #6
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <USER_SPI_write+0x92>
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	2097      	movs	r0, #151	; 0x97
 800fa82:	f7ff fde2 	bl	800f64a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800fa86:	6879      	ldr	r1, [r7, #4]
 800fa88:	2019      	movs	r0, #25
 800fa8a:	f7ff fdde 	bl	800f64a <send_cmd>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d11b      	bne.n	800facc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800fa94:	21fc      	movs	r1, #252	; 0xfc
 800fa96:	68b8      	ldr	r0, [r7, #8]
 800fa98:	f7ff fda5 	bl	800f5e6 <xmit_datablock>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00a      	beq.n	800fab8 <USER_SPI_write+0xc4>
				buff += 512;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800faa8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	3b01      	subs	r3, #1
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d1ee      	bne.n	800fa94 <USER_SPI_write+0xa0>
 800fab6:	e000      	b.n	800faba <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800fab8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800faba:	21fd      	movs	r1, #253	; 0xfd
 800fabc:	2000      	movs	r0, #0
 800fabe:	f7ff fd92 	bl	800f5e6 <xmit_datablock>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d101      	bne.n	800facc <USER_SPI_write+0xd8>
 800fac8:	2301      	movs	r3, #1
 800faca:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800facc:	f7ff fd36 	bl	800f53c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	bf14      	ite	ne
 800fad6:	2301      	movne	r3, #1
 800fad8:	2300      	moveq	r3, #0
 800fada:	b2db      	uxtb	r3, r3
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	2000007c 	.word	0x2000007c
 800fae8:	200007d8 	.word	0x200007d8

0800faec <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b08c      	sub	sp, #48	; 0x30
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	603a      	str	r2, [r7, #0]
 800faf6:	71fb      	strb	r3, [r7, #7]
 800faf8:	460b      	mov	r3, r1
 800fafa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <USER_SPI_ioctl+0x1a>
 800fb02:	2304      	movs	r3, #4
 800fb04:	e15a      	b.n	800fdbc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800fb06:	4baf      	ldr	r3, [pc, #700]	; (800fdc4 <USER_SPI_ioctl+0x2d8>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0301 	and.w	r3, r3, #1
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <USER_SPI_ioctl+0x2c>
 800fb14:	2303      	movs	r3, #3
 800fb16:	e151      	b.n	800fdbc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800fb1e:	79bb      	ldrb	r3, [r7, #6]
 800fb20:	2b04      	cmp	r3, #4
 800fb22:	f200 8136 	bhi.w	800fd92 <USER_SPI_ioctl+0x2a6>
 800fb26:	a201      	add	r2, pc, #4	; (adr r2, 800fb2c <USER_SPI_ioctl+0x40>)
 800fb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2c:	0800fb41 	.word	0x0800fb41
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fd93 	.word	0x0800fd93
 800fb38:	0800fc01 	.word	0x0800fc01
 800fb3c:	0800fcf7 	.word	0x0800fcf7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800fb40:	f7ff fd0c 	bl	800f55c <spiselect>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f000 8127 	beq.w	800fd9a <USER_SPI_ioctl+0x2ae>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800fb52:	e122      	b.n	800fd9a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800fb54:	2100      	movs	r1, #0
 800fb56:	2009      	movs	r0, #9
 800fb58:	f7ff fd77 	bl	800f64a <send_cmd>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f040 811d 	bne.w	800fd9e <USER_SPI_ioctl+0x2b2>
 800fb64:	f107 030c 	add.w	r3, r7, #12
 800fb68:	2110      	movs	r1, #16
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fd12 	bl	800f594 <rcvr_datablock>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f000 8113 	beq.w	800fd9e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800fb78:	7b3b      	ldrb	r3, [r7, #12]
 800fb7a:	099b      	lsrs	r3, r3, #6
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d111      	bne.n	800fba6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800fb82:	7d7b      	ldrb	r3, [r7, #21]
 800fb84:	461a      	mov	r2, r3
 800fb86:	7d3b      	ldrb	r3, [r7, #20]
 800fb88:	021b      	lsls	r3, r3, #8
 800fb8a:	4413      	add	r3, r2
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	7cfb      	ldrb	r3, [r7, #19]
 800fb90:	041b      	lsls	r3, r3, #16
 800fb92:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800fb96:	4413      	add	r3, r2
 800fb98:	3301      	adds	r3, #1
 800fb9a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	029a      	lsls	r2, r3, #10
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	e028      	b.n	800fbf8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800fba6:	7c7b      	ldrb	r3, [r7, #17]
 800fba8:	f003 030f 	and.w	r3, r3, #15
 800fbac:	b2da      	uxtb	r2, r3
 800fbae:	7dbb      	ldrb	r3, [r7, #22]
 800fbb0:	09db      	lsrs	r3, r3, #7
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	4413      	add	r3, r2
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	7d7b      	ldrb	r3, [r7, #21]
 800fbba:	005b      	lsls	r3, r3, #1
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f003 0306 	and.w	r3, r3, #6
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	4413      	add	r3, r2
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	3302      	adds	r3, #2
 800fbca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800fbce:	7d3b      	ldrb	r3, [r7, #20]
 800fbd0:	099b      	lsrs	r3, r3, #6
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	7cfb      	ldrb	r3, [r7, #19]
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	441a      	add	r2, r3
 800fbdc:	7cbb      	ldrb	r3, [r7, #18]
 800fbde:	029b      	lsls	r3, r3, #10
 800fbe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fbe4:	4413      	add	r3, r2
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800fbea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fbee:	3b09      	subs	r3, #9
 800fbf0:	69fa      	ldr	r2, [r7, #28]
 800fbf2:	409a      	lsls	r2, r3
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800fbfe:	e0ce      	b.n	800fd9e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800fc00:	4b71      	ldr	r3, [pc, #452]	; (800fdc8 <USER_SPI_ioctl+0x2dc>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	f003 0304 	and.w	r3, r3, #4
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d031      	beq.n	800fc70 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	208d      	movs	r0, #141	; 0x8d
 800fc10:	f7ff fd1b 	bl	800f64a <send_cmd>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 80c3 	bne.w	800fda2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800fc1c:	20ff      	movs	r0, #255	; 0xff
 800fc1e:	f7ff fc1d 	bl	800f45c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800fc22:	f107 030c 	add.w	r3, r7, #12
 800fc26:	2110      	movs	r1, #16
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff fcb3 	bl	800f594 <rcvr_datablock>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f000 80b6 	beq.w	800fda2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800fc36:	2330      	movs	r3, #48	; 0x30
 800fc38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800fc3c:	e007      	b.n	800fc4e <USER_SPI_ioctl+0x162>
 800fc3e:	20ff      	movs	r0, #255	; 0xff
 800fc40:	f7ff fc0c 	bl	800f45c <xchg_spi>
 800fc44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800fc4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1f3      	bne.n	800fc3e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800fc56:	7dbb      	ldrb	r3, [r7, #22]
 800fc58:	091b      	lsrs	r3, r3, #4
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	2310      	movs	r3, #16
 800fc60:	fa03 f202 	lsl.w	r2, r3, r2
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800fc6e:	e098      	b.n	800fda2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800fc70:	2100      	movs	r1, #0
 800fc72:	2009      	movs	r0, #9
 800fc74:	f7ff fce9 	bl	800f64a <send_cmd>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f040 8091 	bne.w	800fda2 <USER_SPI_ioctl+0x2b6>
 800fc80:	f107 030c 	add.w	r3, r7, #12
 800fc84:	2110      	movs	r1, #16
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7ff fc84 	bl	800f594 <rcvr_datablock>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f000 8087 	beq.w	800fda2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800fc94:	4b4c      	ldr	r3, [pc, #304]	; (800fdc8 <USER_SPI_ioctl+0x2dc>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f003 0302 	and.w	r3, r3, #2
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d012      	beq.n	800fcc6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800fca0:	7dbb      	ldrb	r3, [r7, #22]
 800fca2:	005b      	lsls	r3, r3, #1
 800fca4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800fca8:	7dfa      	ldrb	r2, [r7, #23]
 800fcaa:	09d2      	lsrs	r2, r2, #7
 800fcac:	b2d2      	uxtb	r2, r2
 800fcae:	4413      	add	r3, r2
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	7e7b      	ldrb	r3, [r7, #25]
 800fcb4:	099b      	lsrs	r3, r3, #6
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	fa02 f303 	lsl.w	r3, r2, r3
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	e013      	b.n	800fcee <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800fcc6:	7dbb      	ldrb	r3, [r7, #22]
 800fcc8:	109b      	asrs	r3, r3, #2
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	f003 031f 	and.w	r3, r3, #31
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	7dfa      	ldrb	r2, [r7, #23]
 800fcd4:	00d2      	lsls	r2, r2, #3
 800fcd6:	f002 0218 	and.w	r2, r2, #24
 800fcda:	7df9      	ldrb	r1, [r7, #23]
 800fcdc:	0949      	lsrs	r1, r1, #5
 800fcde:	b2c9      	uxtb	r1, r1
 800fce0:	440a      	add	r2, r1
 800fce2:	3201      	adds	r2, #1
 800fce4:	fb02 f303 	mul.w	r3, r2, r3
 800fce8:	461a      	mov	r2, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800fcf4:	e055      	b.n	800fda2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800fcf6:	4b34      	ldr	r3, [pc, #208]	; (800fdc8 <USER_SPI_ioctl+0x2dc>)
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	f003 0306 	and.w	r3, r3, #6
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d051      	beq.n	800fda6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800fd02:	f107 020c 	add.w	r2, r7, #12
 800fd06:	79fb      	ldrb	r3, [r7, #7]
 800fd08:	210b      	movs	r1, #11
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff feee 	bl	800faec <USER_SPI_ioctl>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d149      	bne.n	800fdaa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800fd16:	7b3b      	ldrb	r3, [r7, #12]
 800fd18:	099b      	lsrs	r3, r3, #6
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d104      	bne.n	800fd2a <USER_SPI_ioctl+0x23e>
 800fd20:	7dbb      	ldrb	r3, [r7, #22]
 800fd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d041      	beq.n	800fdae <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	623b      	str	r3, [r7, #32]
 800fd2e:	6a3b      	ldr	r3, [r7, #32]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800fd3a:	4b23      	ldr	r3, [pc, #140]	; (800fdc8 <USER_SPI_ioctl+0x2dc>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0308 	and.w	r3, r3, #8
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d105      	bne.n	800fd52 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800fd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd48:	025b      	lsls	r3, r3, #9
 800fd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	025b      	lsls	r3, r3, #9
 800fd50:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800fd52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd54:	2020      	movs	r0, #32
 800fd56:	f7ff fc78 	bl	800f64a <send_cmd>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d128      	bne.n	800fdb2 <USER_SPI_ioctl+0x2c6>
 800fd60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd62:	2021      	movs	r0, #33	; 0x21
 800fd64:	f7ff fc71 	bl	800f64a <send_cmd>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d121      	bne.n	800fdb2 <USER_SPI_ioctl+0x2c6>
 800fd6e:	2100      	movs	r1, #0
 800fd70:	2026      	movs	r0, #38	; 0x26
 800fd72:	f7ff fc6a 	bl	800f64a <send_cmd>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d11a      	bne.n	800fdb2 <USER_SPI_ioctl+0x2c6>
 800fd7c:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd80:	f7ff fbb9 	bl	800f4f6 <wait_ready>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d013      	beq.n	800fdb2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800fd90:	e00f      	b.n	800fdb2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800fd92:	2304      	movs	r3, #4
 800fd94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fd98:	e00c      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		break;
 800fd9a:	bf00      	nop
 800fd9c:	e00a      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		break;
 800fd9e:	bf00      	nop
 800fda0:	e008      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		break;
 800fda2:	bf00      	nop
 800fda4:	e006      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800fda6:	bf00      	nop
 800fda8:	e004      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800fdaa:	bf00      	nop
 800fdac:	e002      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800fdae:	bf00      	nop
 800fdb0:	e000      	b.n	800fdb4 <USER_SPI_ioctl+0x2c8>
		break;
 800fdb2:	bf00      	nop
	}

	despiselect();
 800fdb4:	f7ff fbc2 	bl	800f53c <despiselect>

	return res;
 800fdb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3730      	adds	r7, #48	; 0x30
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	2000007c 	.word	0x2000007c
 800fdc8:	200007d8 	.word	0x200007d8

0800fdcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fdd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fddc:	f008 fcc4 	bl	8018768 <USBD_static_malloc>
 800fde0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d105      	bne.n	800fdf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	e066      	b.n	800fec2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	7c1b      	ldrb	r3, [r3, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d119      	bne.n	800fe38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe08:	2202      	movs	r2, #2
 800fe0a:	2181      	movs	r1, #129	; 0x81
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f008 fb88 	bl	8018522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2201      	movs	r2, #1
 800fe16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe1c:	2202      	movs	r2, #2
 800fe1e:	2101      	movs	r1, #1
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f008 fb7e 	bl	8018522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2210      	movs	r2, #16
 800fe32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fe36:	e016      	b.n	800fe66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe38:	2340      	movs	r3, #64	; 0x40
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	2181      	movs	r1, #129	; 0x81
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f008 fb6f 	bl	8018522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe4a:	2340      	movs	r3, #64	; 0x40
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	2101      	movs	r1, #1
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f008 fb66 	bl	8018522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2210      	movs	r2, #16
 800fe62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe66:	2308      	movs	r3, #8
 800fe68:	2203      	movs	r2, #3
 800fe6a:	2182      	movs	r1, #130	; 0x82
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f008 fb58 	bl	8018522 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	7c1b      	ldrb	r3, [r3, #16]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d109      	bne.n	800feb0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fea6:	2101      	movs	r1, #1
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f008 fc29 	bl	8018700 <USBD_LL_PrepareReceive>
 800feae:	e007      	b.n	800fec0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800feb6:	2340      	movs	r3, #64	; 0x40
 800feb8:	2101      	movs	r1, #1
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f008 fc20 	bl	8018700 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}

0800feca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	b082      	sub	sp, #8
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
 800fed2:	460b      	mov	r3, r1
 800fed4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fed6:	2181      	movs	r1, #129	; 0x81
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f008 fb48 	bl	801856e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fee4:	2101      	movs	r1, #1
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f008 fb41 	bl	801856e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fef4:	2182      	movs	r1, #130	; 0x82
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f008 fb39 	bl	801856e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00e      	beq.n	800ff34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff26:	4618      	mov	r0, r3
 800ff28:	f008 fc2c 	bl	8018784 <USBD_static_free>
    pdev->pClassData = NULL;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3708      	adds	r7, #8
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
	...

0800ff40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff52:	2300      	movs	r3, #0
 800ff54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff56:	2300      	movs	r3, #0
 800ff58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ff64:	2303      	movs	r3, #3
 800ff66:	e0af      	b.n	80100c8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d03f      	beq.n	800fff4 <USBD_CDC_Setup+0xb4>
 800ff74:	2b20      	cmp	r3, #32
 800ff76:	f040 809f 	bne.w	80100b8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	88db      	ldrh	r3, [r3, #6]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d02e      	beq.n	800ffe0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	b25b      	sxtb	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da16      	bge.n	800ffba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ff98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	88d2      	ldrh	r2, [r2, #6]
 800ff9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	88db      	ldrh	r3, [r3, #6]
 800ffa4:	2b07      	cmp	r3, #7
 800ffa6:	bf28      	it	cs
 800ffa8:	2307      	movcs	r3, #7
 800ffaa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	89fa      	ldrh	r2, [r7, #14]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f001 fae9 	bl	801158a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ffb8:	e085      	b.n	80100c6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	785a      	ldrb	r2, [r3, #1]
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	88db      	ldrh	r3, [r3, #6]
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ffd0:	6939      	ldr	r1, [r7, #16]
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	88db      	ldrh	r3, [r3, #6]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f001 fb02 	bl	80115e2 <USBD_CtlPrepareRx>
      break;
 800ffde:	e072      	b.n	80100c6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	7850      	ldrb	r0, [r2, #1]
 800ffec:	2200      	movs	r2, #0
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	4798      	blx	r3
      break;
 800fff2:	e068      	b.n	80100c6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	785b      	ldrb	r3, [r3, #1]
 800fff8:	2b0b      	cmp	r3, #11
 800fffa:	d852      	bhi.n	80100a2 <USBD_CDC_Setup+0x162>
 800fffc:	a201      	add	r2, pc, #4	; (adr r2, 8010004 <USBD_CDC_Setup+0xc4>)
 800fffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010002:	bf00      	nop
 8010004:	08010035 	.word	0x08010035
 8010008:	080100b1 	.word	0x080100b1
 801000c:	080100a3 	.word	0x080100a3
 8010010:	080100a3 	.word	0x080100a3
 8010014:	080100a3 	.word	0x080100a3
 8010018:	080100a3 	.word	0x080100a3
 801001c:	080100a3 	.word	0x080100a3
 8010020:	080100a3 	.word	0x080100a3
 8010024:	080100a3 	.word	0x080100a3
 8010028:	080100a3 	.word	0x080100a3
 801002c:	0801005f 	.word	0x0801005f
 8010030:	08010089 	.word	0x08010089
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b03      	cmp	r3, #3
 801003e:	d107      	bne.n	8010050 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010040:	f107 030a 	add.w	r3, r7, #10
 8010044:	2202      	movs	r2, #2
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f001 fa9e 	bl	801158a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801004e:	e032      	b.n	80100b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010050:	6839      	ldr	r1, [r7, #0]
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f001 fa28 	bl	80114a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8010058:	2303      	movs	r3, #3
 801005a:	75fb      	strb	r3, [r7, #23]
          break;
 801005c:	e02b      	b.n	80100b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b03      	cmp	r3, #3
 8010068:	d107      	bne.n	801007a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801006a:	f107 030d 	add.w	r3, r7, #13
 801006e:	2201      	movs	r2, #1
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f001 fa89 	bl	801158a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010078:	e01d      	b.n	80100b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f001 fa13 	bl	80114a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8010082:	2303      	movs	r3, #3
 8010084:	75fb      	strb	r3, [r7, #23]
          break;
 8010086:	e016      	b.n	80100b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b03      	cmp	r3, #3
 8010092:	d00f      	beq.n	80100b4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f001 fa06 	bl	80114a8 <USBD_CtlError>
            ret = USBD_FAIL;
 801009c:	2303      	movs	r3, #3
 801009e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80100a0:	e008      	b.n	80100b4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f001 f9ff 	bl	80114a8 <USBD_CtlError>
          ret = USBD_FAIL;
 80100aa:	2303      	movs	r3, #3
 80100ac:	75fb      	strb	r3, [r7, #23]
          break;
 80100ae:	e002      	b.n	80100b6 <USBD_CDC_Setup+0x176>
          break;
 80100b0:	bf00      	nop
 80100b2:	e008      	b.n	80100c6 <USBD_CDC_Setup+0x186>
          break;
 80100b4:	bf00      	nop
      }
      break;
 80100b6:	e006      	b.n	80100c6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80100b8:	6839      	ldr	r1, [r7, #0]
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f001 f9f4 	bl	80114a8 <USBD_CtlError>
      ret = USBD_FAIL;
 80100c0:	2303      	movs	r3, #3
 80100c2:	75fb      	strb	r3, [r7, #23]
      break;
 80100c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80100c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3718      	adds	r7, #24
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d101      	bne.n	80100f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80100ee:	2303      	movs	r3, #3
 80100f0:	e04f      	b.n	8010192 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80100fa:	78fa      	ldrb	r2, [r7, #3]
 80100fc:	6879      	ldr	r1, [r7, #4]
 80100fe:	4613      	mov	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	440b      	add	r3, r1
 8010108:	3318      	adds	r3, #24
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d029      	beq.n	8010164 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010110:	78fa      	ldrb	r2, [r7, #3]
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	3318      	adds	r3, #24
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	78f9      	ldrb	r1, [r7, #3]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	460b      	mov	r3, r1
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	1a5b      	subs	r3, r3, r1
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4403      	add	r3, r0
 8010130:	3344      	adds	r3, #68	; 0x44
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	fbb2 f1f3 	udiv	r1, r2, r3
 8010138:	fb03 f301 	mul.w	r3, r3, r1
 801013c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801013e:	2b00      	cmp	r3, #0
 8010140:	d110      	bne.n	8010164 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010142:	78fa      	ldrb	r2, [r7, #3]
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	3318      	adds	r3, #24
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010156:	78f9      	ldrb	r1, [r7, #3]
 8010158:	2300      	movs	r3, #0
 801015a:	2200      	movs	r2, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f008 faae 	bl	80186be <USBD_LL_Transmit>
 8010162:	e015      	b.n	8010190 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2200      	movs	r2, #0
 8010168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00b      	beq.n	8010190 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801018c:	78fa      	ldrb	r2, [r7, #3]
 801018e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80101b8:	2303      	movs	r3, #3
 80101ba:	e015      	b.n	80101e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101bc:	78fb      	ldrb	r3, [r7, #3]
 80101be:	4619      	mov	r1, r3
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f008 fabe 	bl	8018742 <USBD_LL_GetRxDataSize>
 80101c6:	4602      	mov	r2, r0
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80101e2:	4611      	mov	r1, r2
 80101e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80101e6:	2300      	movs	r3, #0
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d101      	bne.n	801020a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010206:	2303      	movs	r3, #3
 8010208:	e01b      	b.n	8010242 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d015      	beq.n	8010240 <USBD_CDC_EP0_RxReady+0x50>
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801021a:	2bff      	cmp	r3, #255	; 0xff
 801021c:	d010      	beq.n	8010240 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010224:	689b      	ldr	r3, [r3, #8]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801022c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010234:	b292      	uxth	r2, r2
 8010236:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	22ff      	movs	r2, #255	; 0xff
 801023c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2243      	movs	r2, #67	; 0x43
 8010258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801025a:	4b03      	ldr	r3, [pc, #12]	; (8010268 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	20000108 	.word	0x20000108

0801026c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2243      	movs	r2, #67	; 0x43
 8010278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801027a:	4b03      	ldr	r3, [pc, #12]	; (8010288 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801027c:	4618      	mov	r0, r3
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	200000c4 	.word	0x200000c4

0801028c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2243      	movs	r2, #67	; 0x43
 8010298:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801029a:	4b03      	ldr	r3, [pc, #12]	; (80102a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	2000014c 	.word	0x2000014c

080102ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	220a      	movs	r2, #10
 80102b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80102ba:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80102bc:	4618      	mov	r0, r3
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	20000080 	.word	0x20000080

080102cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102dc:	2303      	movs	r3, #3
 80102de:	e004      	b.n	80102ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	370c      	adds	r7, #12
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80102f6:	b480      	push	{r7}
 80102f8:	b087      	sub	sp, #28
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	60f8      	str	r0, [r7, #12]
 80102fe:	60b9      	str	r1, [r7, #8]
 8010300:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010308:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d101      	bne.n	8010314 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010310:	2303      	movs	r3, #3
 8010312:	e008      	b.n	8010326 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010332:	b480      	push	{r7}
 8010334:	b085      	sub	sp, #20
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010342:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d101      	bne.n	801034e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801034a:	2303      	movs	r3, #3
 801034c:	e004      	b.n	8010358 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801037e:	2303      	movs	r3, #3
 8010380:	e016      	b.n	80103b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	7c1b      	ldrb	r3, [r3, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d109      	bne.n	801039e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010394:	2101      	movs	r1, #1
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f008 f9b2 	bl	8018700 <USBD_LL_PrepareReceive>
 801039c:	e007      	b.n	80103ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103a4:	2340      	movs	r3, #64	; 0x40
 80103a6:	2101      	movs	r1, #1
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f008 f9a9 	bl	8018700 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80103ae:	2300      	movs	r3, #0
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	4613      	mov	r3, r2
 80103c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d101      	bne.n	80103d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80103cc:	2303      	movs	r3, #3
 80103ce:	e01f      	b.n	8010410 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2200      	movs	r2, #0
 80103dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2200      	movs	r2, #0
 80103e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d003      	beq.n	80103f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	79fa      	ldrb	r2, [r7, #7]
 8010402:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f008 f825 	bl	8018454 <USBD_LL_Init>
 801040a:	4603      	mov	r3, r0
 801040c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801040e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010422:	2300      	movs	r3, #0
 8010424:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d101      	bne.n	8010430 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801042c:	2303      	movs	r3, #3
 801042e:	e016      	b.n	801045e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010440:	2b00      	cmp	r3, #0
 8010442:	d00b      	beq.n	801045c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044c:	f107 020e 	add.w	r2, r7, #14
 8010450:	4610      	mov	r0, r2
 8010452:	4798      	blx	r3
 8010454:	4602      	mov	r2, r0
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f008 f83c 	bl	80184ec <USBD_LL_Start>
 8010474:	4603      	mov	r3, r0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801047e:	b480      	push	{r7}
 8010480:	b083      	sub	sp, #12
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80104a0:	2303      	movs	r3, #3
 80104a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d009      	beq.n	80104c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	78fa      	ldrb	r2, [r7, #3]
 80104b8:	4611      	mov	r1, r2
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	4798      	blx	r3
 80104be:	4603      	mov	r3, r0
 80104c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3710      	adds	r7, #16
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	460b      	mov	r3, r1
 80104d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d007      	beq.n	80104f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	78fa      	ldrb	r2, [r7, #3]
 80104ec:	4611      	mov	r1, r2
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	4798      	blx	r3
  }

  return USBD_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 ff90 	bl	8011434 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010522:	461a      	mov	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010530:	f003 031f 	and.w	r3, r3, #31
 8010534:	2b02      	cmp	r3, #2
 8010536:	d01a      	beq.n	801056e <USBD_LL_SetupStage+0x72>
 8010538:	2b02      	cmp	r3, #2
 801053a:	d822      	bhi.n	8010582 <USBD_LL_SetupStage+0x86>
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <USBD_LL_SetupStage+0x4a>
 8010540:	2b01      	cmp	r3, #1
 8010542:	d00a      	beq.n	801055a <USBD_LL_SetupStage+0x5e>
 8010544:	e01d      	b.n	8010582 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801054c:	4619      	mov	r1, r3
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fa62 	bl	8010a18 <USBD_StdDevReq>
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]
      break;
 8010558:	e020      	b.n	801059c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010560:	4619      	mov	r1, r3
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 fac6 	bl	8010af4 <USBD_StdItfReq>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
      break;
 801056c:	e016      	b.n	801059c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010574:	4619      	mov	r1, r3
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 fb05 	bl	8010b86 <USBD_StdEPReq>
 801057c:	4603      	mov	r3, r0
 801057e:	73fb      	strb	r3, [r7, #15]
      break;
 8010580:	e00c      	b.n	801059c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801058c:	b2db      	uxtb	r3, r3
 801058e:	4619      	mov	r1, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f008 f80b 	bl	80185ac <USBD_LL_StallEP>
 8010596:	4603      	mov	r3, r0
 8010598:	73fb      	strb	r3, [r7, #15]
      break;
 801059a:	bf00      	nop
  }

  return ret;
 801059c:	7bfb      	ldrb	r3, [r7, #15]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b086      	sub	sp, #24
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	60f8      	str	r0, [r7, #12]
 80105ae:	460b      	mov	r3, r1
 80105b0:	607a      	str	r2, [r7, #4]
 80105b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80105b4:	7afb      	ldrb	r3, [r7, #11]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d138      	bne.n	801062c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80105c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105c8:	2b03      	cmp	r3, #3
 80105ca:	d14a      	bne.n	8010662 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	689a      	ldr	r2, [r3, #8]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d913      	bls.n	8010600 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	689a      	ldr	r2, [r3, #8]
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	1ad2      	subs	r2, r2, r3
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	68da      	ldr	r2, [r3, #12]
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	4293      	cmp	r3, r2
 80105f0:	bf28      	it	cs
 80105f2:	4613      	movcs	r3, r2
 80105f4:	461a      	mov	r2, r3
 80105f6:	6879      	ldr	r1, [r7, #4]
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f001 f80f 	bl	801161c <USBD_CtlContinueRx>
 80105fe:	e030      	b.n	8010662 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b03      	cmp	r3, #3
 801060a:	d10b      	bne.n	8010624 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d005      	beq.n	8010624 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801061e:	691b      	ldr	r3, [r3, #16]
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f001 f80a 	bl	801163e <USBD_CtlSendStatus>
 801062a:	e01a      	b.n	8010662 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b03      	cmp	r3, #3
 8010636:	d114      	bne.n	8010662 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801063e:	699b      	ldr	r3, [r3, #24]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00e      	beq.n	8010662 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	7afa      	ldrb	r2, [r7, #11]
 801064e:	4611      	mov	r1, r2
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	4798      	blx	r3
 8010654:	4603      	mov	r3, r0
 8010656:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010658:	7dfb      	ldrb	r3, [r7, #23]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	e000      	b.n	8010664 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b086      	sub	sp, #24
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	460b      	mov	r3, r1
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801067a:	7afb      	ldrb	r3, [r7, #11]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d16b      	bne.n	8010758 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	3314      	adds	r3, #20
 8010684:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801068c:	2b02      	cmp	r3, #2
 801068e:	d156      	bne.n	801073e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	689a      	ldr	r2, [r3, #8]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	429a      	cmp	r2, r3
 801069a:	d914      	bls.n	80106c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	689a      	ldr	r2, [r3, #8]
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	1ad2      	subs	r2, r2, r3
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	461a      	mov	r2, r3
 80106b0:	6879      	ldr	r1, [r7, #4]
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f000 ff84 	bl	80115c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106b8:	2300      	movs	r3, #0
 80106ba:	2200      	movs	r2, #0
 80106bc:	2100      	movs	r1, #0
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f008 f81e 	bl	8018700 <USBD_LL_PrepareReceive>
 80106c4:	e03b      	b.n	801073e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	68da      	ldr	r2, [r3, #12]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d11c      	bne.n	801070c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80106da:	429a      	cmp	r2, r3
 80106dc:	d316      	bcc.n	801070c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	685a      	ldr	r2, [r3, #4]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d20f      	bcs.n	801070c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106ec:	2200      	movs	r2, #0
 80106ee:	2100      	movs	r1, #0
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f000 ff65 	bl	80115c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106fe:	2300      	movs	r3, #0
 8010700:	2200      	movs	r2, #0
 8010702:	2100      	movs	r1, #0
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f007 fffb 	bl	8018700 <USBD_LL_PrepareReceive>
 801070a:	e018      	b.n	801073e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b03      	cmp	r3, #3
 8010716:	d10b      	bne.n	8010730 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d005      	beq.n	8010730 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010730:	2180      	movs	r1, #128	; 0x80
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f007 ff3a 	bl	80185ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f000 ff93 	bl	8011664 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010744:	2b01      	cmp	r3, #1
 8010746:	d122      	bne.n	801078e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f7ff fe98 	bl	801047e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2200      	movs	r2, #0
 8010752:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010756:	e01a      	b.n	801078e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b03      	cmp	r3, #3
 8010762:	d114      	bne.n	801078e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801076a:	695b      	ldr	r3, [r3, #20]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00e      	beq.n	801078e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010776:	695b      	ldr	r3, [r3, #20]
 8010778:	7afa      	ldrb	r2, [r7, #11]
 801077a:	4611      	mov	r1, r2
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	4798      	blx	r3
 8010780:	4603      	mov	r3, r0
 8010782:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010784:	7dfb      	ldrb	r3, [r7, #23]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801078a:	7dfb      	ldrb	r3, [r7, #23]
 801078c:	e000      	b.n	8010790 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3718      	adds	r7, #24
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d101      	bne.n	80107cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80107c8:	2303      	movs	r3, #3
 80107ca:	e02f      	b.n	801082c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00f      	beq.n	80107f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d009      	beq.n	80107f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	6852      	ldr	r2, [r2, #4]
 80107ee:	b2d2      	uxtb	r2, r2
 80107f0:	4611      	mov	r1, r2
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107f6:	2340      	movs	r3, #64	; 0x40
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f007 fe90 	bl	8018522 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2201      	movs	r2, #1
 8010806:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2240      	movs	r2, #64	; 0x40
 801080e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010812:	2340      	movs	r3, #64	; 0x40
 8010814:	2200      	movs	r2, #0
 8010816:	2180      	movs	r1, #128	; 0x80
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f007 fe82 	bl	8018522 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2201      	movs	r2, #1
 8010822:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2240      	movs	r2, #64	; 0x40
 8010828:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	460b      	mov	r3, r1
 801083e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	78fa      	ldrb	r2, [r7, #3]
 8010844:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr

08010854 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010862:	b2da      	uxtb	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2204      	movs	r2, #4
 801086e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b04      	cmp	r3, #4
 8010892:	d106      	bne.n	80108a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801089a:	b2da      	uxtb	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80108a2:	2300      	movs	r3, #0
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	370c      	adds	r7, #12
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr

080108b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d101      	bne.n	80108c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e012      	b.n	80108ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b03      	cmp	r3, #3
 80108d0:	d10b      	bne.n	80108ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108d8:	69db      	ldr	r3, [r3, #28]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d005      	beq.n	80108ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108e4:	69db      	ldr	r3, [r3, #28]
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	460b      	mov	r3, r1
 80108fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010906:	2b00      	cmp	r3, #0
 8010908:	d101      	bne.n	801090e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801090a:	2303      	movs	r3, #3
 801090c:	e014      	b.n	8010938 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b03      	cmp	r3, #3
 8010918:	d10d      	bne.n	8010936 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010920:	6a1b      	ldr	r3, [r3, #32]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d007      	beq.n	8010936 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801092c:	6a1b      	ldr	r3, [r3, #32]
 801092e:	78fa      	ldrb	r2, [r7, #3]
 8010930:	4611      	mov	r1, r2
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010956:	2303      	movs	r3, #3
 8010958:	e014      	b.n	8010984 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010960:	b2db      	uxtb	r3, r3
 8010962:	2b03      	cmp	r3, #3
 8010964:	d10d      	bne.n	8010982 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096e:	2b00      	cmp	r3, #0
 8010970:	d007      	beq.n	8010982 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097a:	78fa      	ldrb	r2, [r7, #3]
 801097c:	4611      	mov	r1, r2
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2201      	movs	r2, #1
 80109ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d009      	beq.n	80109d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	6852      	ldr	r2, [r2, #4]
 80109c8:	b2d2      	uxtb	r2, r2
 80109ca:	4611      	mov	r1, r2
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	4798      	blx	r3
  }

  return USBD_OK;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3708      	adds	r7, #8
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80109da:	b480      	push	{r7}
 80109dc:	b087      	sub	sp, #28
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	3301      	adds	r3, #1
 80109f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80109f8:	8a3b      	ldrh	r3, [r7, #16]
 80109fa:	021b      	lsls	r3, r3, #8
 80109fc:	b21a      	sxth	r2, r3
 80109fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	b21b      	sxth	r3, r3
 8010a06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010a08:	89fb      	ldrh	r3, [r7, #14]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	371c      	adds	r7, #28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
	...

08010a18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a22:	2300      	movs	r3, #0
 8010a24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a2e:	2b40      	cmp	r3, #64	; 0x40
 8010a30:	d005      	beq.n	8010a3e <USBD_StdDevReq+0x26>
 8010a32:	2b40      	cmp	r3, #64	; 0x40
 8010a34:	d853      	bhi.n	8010ade <USBD_StdDevReq+0xc6>
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d00b      	beq.n	8010a52 <USBD_StdDevReq+0x3a>
 8010a3a:	2b20      	cmp	r3, #32
 8010a3c:	d14f      	bne.n	8010ade <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	4798      	blx	r3
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a50:	e04a      	b.n	8010ae8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	785b      	ldrb	r3, [r3, #1]
 8010a56:	2b09      	cmp	r3, #9
 8010a58:	d83b      	bhi.n	8010ad2 <USBD_StdDevReq+0xba>
 8010a5a:	a201      	add	r2, pc, #4	; (adr r2, 8010a60 <USBD_StdDevReq+0x48>)
 8010a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a60:	08010ab5 	.word	0x08010ab5
 8010a64:	08010ac9 	.word	0x08010ac9
 8010a68:	08010ad3 	.word	0x08010ad3
 8010a6c:	08010abf 	.word	0x08010abf
 8010a70:	08010ad3 	.word	0x08010ad3
 8010a74:	08010a93 	.word	0x08010a93
 8010a78:	08010a89 	.word	0x08010a89
 8010a7c:	08010ad3 	.word	0x08010ad3
 8010a80:	08010aab 	.word	0x08010aab
 8010a84:	08010a9d 	.word	0x08010a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010a88:	6839      	ldr	r1, [r7, #0]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f9de 	bl	8010e4c <USBD_GetDescriptor>
          break;
 8010a90:	e024      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 fb43 	bl	8011120 <USBD_SetAddress>
          break;
 8010a9a:	e01f      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010a9c:	6839      	ldr	r1, [r7, #0]
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fb82 	bl	80111a8 <USBD_SetConfig>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8010aa8:	e018      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 fc21 	bl	80112f4 <USBD_GetConfig>
          break;
 8010ab2:	e013      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010ab4:	6839      	ldr	r1, [r7, #0]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fc52 	bl	8011360 <USBD_GetStatus>
          break;
 8010abc:	e00e      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010abe:	6839      	ldr	r1, [r7, #0]
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 fc81 	bl	80113c8 <USBD_SetFeature>
          break;
 8010ac6:	e009      	b.n	8010adc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010ac8:	6839      	ldr	r1, [r7, #0]
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 fc90 	bl	80113f0 <USBD_ClrFeature>
          break;
 8010ad0:	e004      	b.n	8010adc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010ad2:	6839      	ldr	r1, [r7, #0]
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fce7 	bl	80114a8 <USBD_CtlError>
          break;
 8010ada:	bf00      	nop
      }
      break;
 8010adc:	e004      	b.n	8010ae8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010ade:	6839      	ldr	r1, [r7, #0]
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 fce1 	bl	80114a8 <USBD_CtlError>
      break;
 8010ae6:	bf00      	nop
  }

  return ret;
 8010ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop

08010af4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b0a:	2b40      	cmp	r3, #64	; 0x40
 8010b0c:	d005      	beq.n	8010b1a <USBD_StdItfReq+0x26>
 8010b0e:	2b40      	cmp	r3, #64	; 0x40
 8010b10:	d82f      	bhi.n	8010b72 <USBD_StdItfReq+0x7e>
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <USBD_StdItfReq+0x26>
 8010b16:	2b20      	cmp	r3, #32
 8010b18:	d12b      	bne.n	8010b72 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	3b01      	subs	r3, #1
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d81d      	bhi.n	8010b64 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	889b      	ldrh	r3, [r3, #4]
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d813      	bhi.n	8010b5a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	6839      	ldr	r1, [r7, #0]
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	4798      	blx	r3
 8010b40:	4603      	mov	r3, r0
 8010b42:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	88db      	ldrh	r3, [r3, #6]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d110      	bne.n	8010b6e <USBD_StdItfReq+0x7a>
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10d      	bne.n	8010b6e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 fd73 	bl	801163e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010b58:	e009      	b.n	8010b6e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010b5a:	6839      	ldr	r1, [r7, #0]
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 fca3 	bl	80114a8 <USBD_CtlError>
          break;
 8010b62:	e004      	b.n	8010b6e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fc9e 	bl	80114a8 <USBD_CtlError>
          break;
 8010b6c:	e000      	b.n	8010b70 <USBD_StdItfReq+0x7c>
          break;
 8010b6e:	bf00      	nop
      }
      break;
 8010b70:	e004      	b.n	8010b7c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010b72:	6839      	ldr	r1, [r7, #0]
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 fc97 	bl	80114a8 <USBD_CtlError>
      break;
 8010b7a:	bf00      	nop
  }

  return ret;
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b90:	2300      	movs	r3, #0
 8010b92:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	889b      	ldrh	r3, [r3, #4]
 8010b98:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ba2:	2b40      	cmp	r3, #64	; 0x40
 8010ba4:	d007      	beq.n	8010bb6 <USBD_StdEPReq+0x30>
 8010ba6:	2b40      	cmp	r3, #64	; 0x40
 8010ba8:	f200 8145 	bhi.w	8010e36 <USBD_StdEPReq+0x2b0>
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00c      	beq.n	8010bca <USBD_StdEPReq+0x44>
 8010bb0:	2b20      	cmp	r3, #32
 8010bb2:	f040 8140 	bne.w	8010e36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	6839      	ldr	r1, [r7, #0]
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	4798      	blx	r3
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8010bc8:	e13a      	b.n	8010e40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	785b      	ldrb	r3, [r3, #1]
 8010bce:	2b03      	cmp	r3, #3
 8010bd0:	d007      	beq.n	8010be2 <USBD_StdEPReq+0x5c>
 8010bd2:	2b03      	cmp	r3, #3
 8010bd4:	f300 8129 	bgt.w	8010e2a <USBD_StdEPReq+0x2a4>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d07f      	beq.n	8010cdc <USBD_StdEPReq+0x156>
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d03c      	beq.n	8010c5a <USBD_StdEPReq+0xd4>
 8010be0:	e123      	b.n	8010e2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d002      	beq.n	8010bf4 <USBD_StdEPReq+0x6e>
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d016      	beq.n	8010c20 <USBD_StdEPReq+0x9a>
 8010bf2:	e02c      	b.n	8010c4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bf4:	7bbb      	ldrb	r3, [r7, #14]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00d      	beq.n	8010c16 <USBD_StdEPReq+0x90>
 8010bfa:	7bbb      	ldrb	r3, [r7, #14]
 8010bfc:	2b80      	cmp	r3, #128	; 0x80
 8010bfe:	d00a      	beq.n	8010c16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c00:	7bbb      	ldrb	r3, [r7, #14]
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f007 fcd1 	bl	80185ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c0a:	2180      	movs	r1, #128	; 0x80
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f007 fccd 	bl	80185ac <USBD_LL_StallEP>
 8010c12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c14:	e020      	b.n	8010c58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 fc45 	bl	80114a8 <USBD_CtlError>
              break;
 8010c1e:	e01b      	b.n	8010c58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	885b      	ldrh	r3, [r3, #2]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10e      	bne.n	8010c46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010c28:	7bbb      	ldrb	r3, [r7, #14]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <USBD_StdEPReq+0xc0>
 8010c2e:	7bbb      	ldrb	r3, [r7, #14]
 8010c30:	2b80      	cmp	r3, #128	; 0x80
 8010c32:	d008      	beq.n	8010c46 <USBD_StdEPReq+0xc0>
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	88db      	ldrh	r3, [r3, #6]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d104      	bne.n	8010c46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c3c:	7bbb      	ldrb	r3, [r7, #14]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f007 fcb3 	bl	80185ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fcf9 	bl	801163e <USBD_CtlSendStatus>

              break;
 8010c4c:	e004      	b.n	8010c58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010c4e:	6839      	ldr	r1, [r7, #0]
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 fc29 	bl	80114a8 <USBD_CtlError>
              break;
 8010c56:	bf00      	nop
          }
          break;
 8010c58:	e0ec      	b.n	8010e34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d002      	beq.n	8010c6c <USBD_StdEPReq+0xe6>
 8010c66:	2b03      	cmp	r3, #3
 8010c68:	d016      	beq.n	8010c98 <USBD_StdEPReq+0x112>
 8010c6a:	e030      	b.n	8010cce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c6c:	7bbb      	ldrb	r3, [r7, #14]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00d      	beq.n	8010c8e <USBD_StdEPReq+0x108>
 8010c72:	7bbb      	ldrb	r3, [r7, #14]
 8010c74:	2b80      	cmp	r3, #128	; 0x80
 8010c76:	d00a      	beq.n	8010c8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f007 fc95 	bl	80185ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c82:	2180      	movs	r1, #128	; 0x80
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f007 fc91 	bl	80185ac <USBD_LL_StallEP>
 8010c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c8c:	e025      	b.n	8010cda <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fc09 	bl	80114a8 <USBD_CtlError>
              break;
 8010c96:	e020      	b.n	8010cda <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	885b      	ldrh	r3, [r3, #2]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d11b      	bne.n	8010cd8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010ca0:	7bbb      	ldrb	r3, [r7, #14]
 8010ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d004      	beq.n	8010cb4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010caa:	7bbb      	ldrb	r3, [r7, #14]
 8010cac:	4619      	mov	r1, r3
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f007 fc9b 	bl	80185ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fcc2 	bl	801163e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	4798      	blx	r3
 8010cc8:	4603      	mov	r3, r0
 8010cca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010ccc:	e004      	b.n	8010cd8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010cce:	6839      	ldr	r1, [r7, #0]
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f000 fbe9 	bl	80114a8 <USBD_CtlError>
              break;
 8010cd6:	e000      	b.n	8010cda <USBD_StdEPReq+0x154>
              break;
 8010cd8:	bf00      	nop
          }
          break;
 8010cda:	e0ab      	b.n	8010e34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	d002      	beq.n	8010cee <USBD_StdEPReq+0x168>
 8010ce8:	2b03      	cmp	r3, #3
 8010cea:	d032      	beq.n	8010d52 <USBD_StdEPReq+0x1cc>
 8010cec:	e097      	b.n	8010e1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010cee:	7bbb      	ldrb	r3, [r7, #14]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d007      	beq.n	8010d04 <USBD_StdEPReq+0x17e>
 8010cf4:	7bbb      	ldrb	r3, [r7, #14]
 8010cf6:	2b80      	cmp	r3, #128	; 0x80
 8010cf8:	d004      	beq.n	8010d04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010cfa:	6839      	ldr	r1, [r7, #0]
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 fbd3 	bl	80114a8 <USBD_CtlError>
                break;
 8010d02:	e091      	b.n	8010e28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	da0b      	bge.n	8010d24 <USBD_StdEPReq+0x19e>
 8010d0c:	7bbb      	ldrb	r3, [r7, #14]
 8010d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d12:	4613      	mov	r3, r2
 8010d14:	009b      	lsls	r3, r3, #2
 8010d16:	4413      	add	r3, r2
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	3310      	adds	r3, #16
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	4413      	add	r3, r2
 8010d20:	3304      	adds	r3, #4
 8010d22:	e00b      	b.n	8010d3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d24:	7bbb      	ldrb	r3, [r7, #14]
 8010d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	4413      	add	r3, r2
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	4413      	add	r3, r2
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2200      	movs	r2, #0
 8010d42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2202      	movs	r2, #2
 8010d48:	4619      	mov	r1, r3
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fc1d 	bl	801158a <USBD_CtlSendData>
              break;
 8010d50:	e06a      	b.n	8010e28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	da11      	bge.n	8010d7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010d5a:	7bbb      	ldrb	r3, [r7, #14]
 8010d5c:	f003 020f 	and.w	r2, r3, #15
 8010d60:	6879      	ldr	r1, [r7, #4]
 8010d62:	4613      	mov	r3, r2
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	4413      	add	r3, r2
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	440b      	add	r3, r1
 8010d6c:	3324      	adds	r3, #36	; 0x24
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d117      	bne.n	8010da4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d74:	6839      	ldr	r1, [r7, #0]
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 fb96 	bl	80114a8 <USBD_CtlError>
                  break;
 8010d7c:	e054      	b.n	8010e28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010d7e:	7bbb      	ldrb	r3, [r7, #14]
 8010d80:	f003 020f 	and.w	r2, r3, #15
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	4613      	mov	r3, r2
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	440b      	add	r3, r1
 8010d90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d104      	bne.n	8010da4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fb83 	bl	80114a8 <USBD_CtlError>
                  break;
 8010da2:	e041      	b.n	8010e28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	da0b      	bge.n	8010dc4 <USBD_StdEPReq+0x23e>
 8010dac:	7bbb      	ldrb	r3, [r7, #14]
 8010dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010db2:	4613      	mov	r3, r2
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	3310      	adds	r3, #16
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	e00b      	b.n	8010ddc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010dc4:	7bbb      	ldrb	r3, [r7, #14]
 8010dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010dca:	4613      	mov	r3, r2
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	4413      	add	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	4413      	add	r3, r2
 8010dda:	3304      	adds	r3, #4
 8010ddc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010dde:	7bbb      	ldrb	r3, [r7, #14]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <USBD_StdEPReq+0x264>
 8010de4:	7bbb      	ldrb	r3, [r7, #14]
 8010de6:	2b80      	cmp	r3, #128	; 0x80
 8010de8:	d103      	bne.n	8010df2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	2200      	movs	r2, #0
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	e00e      	b.n	8010e10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010df2:	7bbb      	ldrb	r3, [r7, #14]
 8010df4:	4619      	mov	r1, r3
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f007 fc16 	bl	8018628 <USBD_LL_IsStallEP>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d003      	beq.n	8010e0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	2201      	movs	r2, #1
 8010e06:	601a      	str	r2, [r3, #0]
 8010e08:	e002      	b.n	8010e10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	2202      	movs	r2, #2
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 fbb7 	bl	801158a <USBD_CtlSendData>
              break;
 8010e1c:	e004      	b.n	8010e28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010e1e:	6839      	ldr	r1, [r7, #0]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 fb41 	bl	80114a8 <USBD_CtlError>
              break;
 8010e26:	bf00      	nop
          }
          break;
 8010e28:	e004      	b.n	8010e34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010e2a:	6839      	ldr	r1, [r7, #0]
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fb3b 	bl	80114a8 <USBD_CtlError>
          break;
 8010e32:	bf00      	nop
      }
      break;
 8010e34:	e004      	b.n	8010e40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 fb35 	bl	80114a8 <USBD_CtlError>
      break;
 8010e3e:	bf00      	nop
  }

  return ret;
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e56:	2300      	movs	r3, #0
 8010e58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	885b      	ldrh	r3, [r3, #2]
 8010e66:	0a1b      	lsrs	r3, r3, #8
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	2b06      	cmp	r3, #6
 8010e6e:	f200 8128 	bhi.w	80110c2 <USBD_GetDescriptor+0x276>
 8010e72:	a201      	add	r2, pc, #4	; (adr r2, 8010e78 <USBD_GetDescriptor+0x2c>)
 8010e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e78:	08010e95 	.word	0x08010e95
 8010e7c:	08010ead 	.word	0x08010ead
 8010e80:	08010eed 	.word	0x08010eed
 8010e84:	080110c3 	.word	0x080110c3
 8010e88:	080110c3 	.word	0x080110c3
 8010e8c:	08011063 	.word	0x08011063
 8010e90:	0801108f 	.word	0x0801108f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	7c12      	ldrb	r2, [r2, #16]
 8010ea0:	f107 0108 	add.w	r1, r7, #8
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	4798      	blx	r3
 8010ea8:	60f8      	str	r0, [r7, #12]
      break;
 8010eaa:	e112      	b.n	80110d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7c1b      	ldrb	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d10d      	bne.n	8010ed0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ebc:	f107 0208 	add.w	r2, r7, #8
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	4798      	blx	r3
 8010ec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	3301      	adds	r3, #1
 8010eca:	2202      	movs	r2, #2
 8010ecc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010ece:	e100      	b.n	80110d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed8:	f107 0208 	add.w	r2, r7, #8
 8010edc:	4610      	mov	r0, r2
 8010ede:	4798      	blx	r3
 8010ee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	2202      	movs	r2, #2
 8010ee8:	701a      	strb	r2, [r3, #0]
      break;
 8010eea:	e0f2      	b.n	80110d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	885b      	ldrh	r3, [r3, #2]
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	2b05      	cmp	r3, #5
 8010ef4:	f200 80ac 	bhi.w	8011050 <USBD_GetDescriptor+0x204>
 8010ef8:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <USBD_GetDescriptor+0xb4>)
 8010efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010efe:	bf00      	nop
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f4d 	.word	0x08010f4d
 8010f08:	08010f81 	.word	0x08010f81
 8010f0c:	08010fb5 	.word	0x08010fb5
 8010f10:	08010fe9 	.word	0x08010fe9
 8010f14:	0801101d 	.word	0x0801101d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00b      	beq.n	8010f3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	7c12      	ldrb	r2, [r2, #16]
 8010f30:	f107 0108 	add.w	r1, r7, #8
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f3a:	e091      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fab2 	bl	80114a8 <USBD_CtlError>
            err++;
 8010f44:	7afb      	ldrb	r3, [r7, #11]
 8010f46:	3301      	adds	r3, #1
 8010f48:	72fb      	strb	r3, [r7, #11]
          break;
 8010f4a:	e089      	b.n	8011060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00b      	beq.n	8010f70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f5e:	689b      	ldr	r3, [r3, #8]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	7c12      	ldrb	r2, [r2, #16]
 8010f64:	f107 0108 	add.w	r1, r7, #8
 8010f68:	4610      	mov	r0, r2
 8010f6a:	4798      	blx	r3
 8010f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f6e:	e077      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010f70:	6839      	ldr	r1, [r7, #0]
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fa98 	bl	80114a8 <USBD_CtlError>
            err++;
 8010f78:	7afb      	ldrb	r3, [r7, #11]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010f7e:	e06f      	b.n	8011060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d00b      	beq.n	8010fa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	7c12      	ldrb	r2, [r2, #16]
 8010f98:	f107 0108 	add.w	r1, r7, #8
 8010f9c:	4610      	mov	r0, r2
 8010f9e:	4798      	blx	r3
 8010fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fa2:	e05d      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010fa4:	6839      	ldr	r1, [r7, #0]
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 fa7e 	bl	80114a8 <USBD_CtlError>
            err++;
 8010fac:	7afb      	ldrb	r3, [r7, #11]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8010fb2:	e055      	b.n	8011060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00b      	beq.n	8010fd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fc6:	691b      	ldr	r3, [r3, #16]
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	7c12      	ldrb	r2, [r2, #16]
 8010fcc:	f107 0108 	add.w	r1, r7, #8
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	4798      	blx	r3
 8010fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fd6:	e043      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010fd8:	6839      	ldr	r1, [r7, #0]
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fa64 	bl	80114a8 <USBD_CtlError>
            err++;
 8010fe0:	7afb      	ldrb	r3, [r7, #11]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8010fe6:	e03b      	b.n	8011060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fee:	695b      	ldr	r3, [r3, #20]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00b      	beq.n	801100c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ffa:	695b      	ldr	r3, [r3, #20]
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	7c12      	ldrb	r2, [r2, #16]
 8011000:	f107 0108 	add.w	r1, r7, #8
 8011004:	4610      	mov	r0, r2
 8011006:	4798      	blx	r3
 8011008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801100a:	e029      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801100c:	6839      	ldr	r1, [r7, #0]
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fa4a 	bl	80114a8 <USBD_CtlError>
            err++;
 8011014:	7afb      	ldrb	r3, [r7, #11]
 8011016:	3301      	adds	r3, #1
 8011018:	72fb      	strb	r3, [r7, #11]
          break;
 801101a:	e021      	b.n	8011060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011022:	699b      	ldr	r3, [r3, #24]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00b      	beq.n	8011040 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	7c12      	ldrb	r2, [r2, #16]
 8011034:	f107 0108 	add.w	r1, r7, #8
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
 801103c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801103e:	e00f      	b.n	8011060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011040:	6839      	ldr	r1, [r7, #0]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fa30 	bl	80114a8 <USBD_CtlError>
            err++;
 8011048:	7afb      	ldrb	r3, [r7, #11]
 801104a:	3301      	adds	r3, #1
 801104c:	72fb      	strb	r3, [r7, #11]
          break;
 801104e:	e007      	b.n	8011060 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fa28 	bl	80114a8 <USBD_CtlError>
          err++;
 8011058:	7afb      	ldrb	r3, [r7, #11]
 801105a:	3301      	adds	r3, #1
 801105c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801105e:	bf00      	nop
      }
      break;
 8011060:	e037      	b.n	80110d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	7c1b      	ldrb	r3, [r3, #16]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d109      	bne.n	801107e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011072:	f107 0208 	add.w	r2, r7, #8
 8011076:	4610      	mov	r0, r2
 8011078:	4798      	blx	r3
 801107a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801107c:	e029      	b.n	80110d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801107e:	6839      	ldr	r1, [r7, #0]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 fa11 	bl	80114a8 <USBD_CtlError>
        err++;
 8011086:	7afb      	ldrb	r3, [r7, #11]
 8011088:	3301      	adds	r3, #1
 801108a:	72fb      	strb	r3, [r7, #11]
      break;
 801108c:	e021      	b.n	80110d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	7c1b      	ldrb	r3, [r3, #16]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10d      	bne.n	80110b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109e:	f107 0208 	add.w	r2, r7, #8
 80110a2:	4610      	mov	r0, r2
 80110a4:	4798      	blx	r3
 80110a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	3301      	adds	r3, #1
 80110ac:	2207      	movs	r2, #7
 80110ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80110b0:	e00f      	b.n	80110d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80110b2:	6839      	ldr	r1, [r7, #0]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 f9f7 	bl	80114a8 <USBD_CtlError>
        err++;
 80110ba:	7afb      	ldrb	r3, [r7, #11]
 80110bc:	3301      	adds	r3, #1
 80110be:	72fb      	strb	r3, [r7, #11]
      break;
 80110c0:	e007      	b.n	80110d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80110c2:	6839      	ldr	r1, [r7, #0]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f9ef 	bl	80114a8 <USBD_CtlError>
      err++;
 80110ca:	7afb      	ldrb	r3, [r7, #11]
 80110cc:	3301      	adds	r3, #1
 80110ce:	72fb      	strb	r3, [r7, #11]
      break;
 80110d0:	bf00      	nop
  }

  if (err != 0U)
 80110d2:	7afb      	ldrb	r3, [r7, #11]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d11e      	bne.n	8011116 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	88db      	ldrh	r3, [r3, #6]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d016      	beq.n	801110e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80110e0:	893b      	ldrh	r3, [r7, #8]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00e      	beq.n	8011104 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	88da      	ldrh	r2, [r3, #6]
 80110ea:	893b      	ldrh	r3, [r7, #8]
 80110ec:	4293      	cmp	r3, r2
 80110ee:	bf28      	it	cs
 80110f0:	4613      	movcs	r3, r2
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80110f6:	893b      	ldrh	r3, [r7, #8]
 80110f8:	461a      	mov	r2, r3
 80110fa:	68f9      	ldr	r1, [r7, #12]
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f000 fa44 	bl	801158a <USBD_CtlSendData>
 8011102:	e009      	b.n	8011118 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f9ce 	bl	80114a8 <USBD_CtlError>
 801110c:	e004      	b.n	8011118 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 fa95 	bl	801163e <USBD_CtlSendStatus>
 8011114:	e000      	b.n	8011118 <USBD_GetDescriptor+0x2cc>
    return;
 8011116:	bf00      	nop
  }
}
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop

08011120 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	889b      	ldrh	r3, [r3, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d131      	bne.n	8011196 <USBD_SetAddress+0x76>
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	88db      	ldrh	r3, [r3, #6]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d12d      	bne.n	8011196 <USBD_SetAddress+0x76>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	885b      	ldrh	r3, [r3, #2]
 801113e:	2b7f      	cmp	r3, #127	; 0x7f
 8011140:	d829      	bhi.n	8011196 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	885b      	ldrh	r3, [r3, #2]
 8011146:	b2db      	uxtb	r3, r3
 8011148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801114c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011154:	b2db      	uxtb	r3, r3
 8011156:	2b03      	cmp	r3, #3
 8011158:	d104      	bne.n	8011164 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f9a3 	bl	80114a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011162:	e01d      	b.n	80111a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	7bfa      	ldrb	r2, [r7, #15]
 8011168:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f007 fa85 	bl	8018680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 fa61 	bl	801163e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d004      	beq.n	801118c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2202      	movs	r2, #2
 8011186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801118a:	e009      	b.n	80111a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011194:	e004      	b.n	80111a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011196:	6839      	ldr	r1, [r7, #0]
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 f985 	bl	80114a8 <USBD_CtlError>
  }
}
 801119e:	bf00      	nop
 80111a0:	bf00      	nop
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	4b4c      	ldr	r3, [pc, #304]	; (80112f0 <USBD_SetConfig+0x148>)
 80111be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80111c0:	4b4b      	ldr	r3, [pc, #300]	; (80112f0 <USBD_SetConfig+0x148>)
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d905      	bls.n	80111d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80111c8:	6839      	ldr	r1, [r7, #0]
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f96c 	bl	80114a8 <USBD_CtlError>
    return USBD_FAIL;
 80111d0:	2303      	movs	r3, #3
 80111d2:	e088      	b.n	80112e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d002      	beq.n	80111e6 <USBD_SetConfig+0x3e>
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d025      	beq.n	8011230 <USBD_SetConfig+0x88>
 80111e4:	e071      	b.n	80112ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80111e6:	4b42      	ldr	r3, [pc, #264]	; (80112f0 <USBD_SetConfig+0x148>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d01c      	beq.n	8011228 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80111ee:	4b40      	ldr	r3, [pc, #256]	; (80112f0 <USBD_SetConfig+0x148>)
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	461a      	mov	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80111f8:	4b3d      	ldr	r3, [pc, #244]	; (80112f0 <USBD_SetConfig+0x148>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	4619      	mov	r1, r3
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f7ff f948 	bl	8010494 <USBD_SetClassConfig>
 8011204:	4603      	mov	r3, r0
 8011206:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011208:	7bfb      	ldrb	r3, [r7, #15]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d004      	beq.n	8011218 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 f949 	bl	80114a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011216:	e065      	b.n	80112e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 fa10 	bl	801163e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2203      	movs	r2, #3
 8011222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011226:	e05d      	b.n	80112e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 fa08 	bl	801163e <USBD_CtlSendStatus>
      break;
 801122e:	e059      	b.n	80112e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011230:	4b2f      	ldr	r3, [pc, #188]	; (80112f0 <USBD_SetConfig+0x148>)
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d112      	bne.n	801125e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2202      	movs	r2, #2
 801123c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011240:	4b2b      	ldr	r3, [pc, #172]	; (80112f0 <USBD_SetConfig+0x148>)
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	461a      	mov	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801124a:	4b29      	ldr	r3, [pc, #164]	; (80112f0 <USBD_SetConfig+0x148>)
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	4619      	mov	r1, r3
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f7ff f93b 	bl	80104cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 f9f1 	bl	801163e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801125c:	e042      	b.n	80112e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801125e:	4b24      	ldr	r3, [pc, #144]	; (80112f0 <USBD_SetConfig+0x148>)
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	461a      	mov	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	429a      	cmp	r2, r3
 801126a:	d02a      	beq.n	80112c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	b2db      	uxtb	r3, r3
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff f929 	bl	80104cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801127a:	4b1d      	ldr	r3, [pc, #116]	; (80112f0 <USBD_SetConfig+0x148>)
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	461a      	mov	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011284:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <USBD_SetConfig+0x148>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	4619      	mov	r1, r3
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff f902 	bl	8010494 <USBD_SetClassConfig>
 8011290:	4603      	mov	r3, r0
 8011292:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011294:	7bfb      	ldrb	r3, [r7, #15]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00f      	beq.n	80112ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801129a:	6839      	ldr	r1, [r7, #0]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 f903 	bl	80114a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	4619      	mov	r1, r3
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff f90e 	bl	80104cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2202      	movs	r2, #2
 80112b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80112b8:	e014      	b.n	80112e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 f9bf 	bl	801163e <USBD_CtlSendStatus>
      break;
 80112c0:	e010      	b.n	80112e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 f9bb 	bl	801163e <USBD_CtlSendStatus>
      break;
 80112c8:	e00c      	b.n	80112e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 f8eb 	bl	80114a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112d2:	4b07      	ldr	r3, [pc, #28]	; (80112f0 <USBD_SetConfig+0x148>)
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	4619      	mov	r1, r3
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff f8f7 	bl	80104cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80112de:	2303      	movs	r3, #3
 80112e0:	73fb      	strb	r3, [r7, #15]
      break;
 80112e2:	bf00      	nop
  }

  return ret;
 80112e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	200007d9 	.word	0x200007d9

080112f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	88db      	ldrh	r3, [r3, #6]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d004      	beq.n	8011310 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011306:	6839      	ldr	r1, [r7, #0]
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 f8cd 	bl	80114a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801130e:	e023      	b.n	8011358 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011316:	b2db      	uxtb	r3, r3
 8011318:	2b02      	cmp	r3, #2
 801131a:	dc02      	bgt.n	8011322 <USBD_GetConfig+0x2e>
 801131c:	2b00      	cmp	r3, #0
 801131e:	dc03      	bgt.n	8011328 <USBD_GetConfig+0x34>
 8011320:	e015      	b.n	801134e <USBD_GetConfig+0x5a>
 8011322:	2b03      	cmp	r3, #3
 8011324:	d00b      	beq.n	801133e <USBD_GetConfig+0x4a>
 8011326:	e012      	b.n	801134e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	3308      	adds	r3, #8
 8011332:	2201      	movs	r2, #1
 8011334:	4619      	mov	r1, r3
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f927 	bl	801158a <USBD_CtlSendData>
        break;
 801133c:	e00c      	b.n	8011358 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	3304      	adds	r3, #4
 8011342:	2201      	movs	r2, #1
 8011344:	4619      	mov	r1, r3
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f000 f91f 	bl	801158a <USBD_CtlSendData>
        break;
 801134c:	e004      	b.n	8011358 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801134e:	6839      	ldr	r1, [r7, #0]
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 f8a9 	bl	80114a8 <USBD_CtlError>
        break;
 8011356:	bf00      	nop
}
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011370:	b2db      	uxtb	r3, r3
 8011372:	3b01      	subs	r3, #1
 8011374:	2b02      	cmp	r3, #2
 8011376:	d81e      	bhi.n	80113b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	88db      	ldrh	r3, [r3, #6]
 801137c:	2b02      	cmp	r3, #2
 801137e:	d004      	beq.n	801138a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 f890 	bl	80114a8 <USBD_CtlError>
        break;
 8011388:	e01a      	b.n	80113c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2201      	movs	r2, #1
 801138e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011396:	2b00      	cmp	r3, #0
 8011398:	d005      	beq.n	80113a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	f043 0202 	orr.w	r2, r3, #2
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	330c      	adds	r3, #12
 80113aa:	2202      	movs	r2, #2
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 f8eb 	bl	801158a <USBD_CtlSendData>
      break;
 80113b4:	e004      	b.n	80113c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 f875 	bl	80114a8 <USBD_CtlError>
      break;
 80113be:	bf00      	nop
  }
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	885b      	ldrh	r3, [r3, #2]
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d106      	bne.n	80113e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f92b 	bl	801163e <USBD_CtlSendStatus>
  }
}
 80113e8:	bf00      	nop
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011400:	b2db      	uxtb	r3, r3
 8011402:	3b01      	subs	r3, #1
 8011404:	2b02      	cmp	r3, #2
 8011406:	d80b      	bhi.n	8011420 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	885b      	ldrh	r3, [r3, #2]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d10c      	bne.n	801142a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f910 	bl	801163e <USBD_CtlSendStatus>
      }
      break;
 801141e:	e004      	b.n	801142a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011420:	6839      	ldr	r1, [r7, #0]
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 f840 	bl	80114a8 <USBD_CtlError>
      break;
 8011428:	e000      	b.n	801142c <USBD_ClrFeature+0x3c>
      break;
 801142a:	bf00      	nop
  }
}
 801142c:	bf00      	nop
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	781a      	ldrb	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	3301      	adds	r3, #1
 801144e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	781a      	ldrb	r2, [r3, #0]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3301      	adds	r3, #1
 801145c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	f7ff fabb 	bl	80109da <SWAPBYTE>
 8011464:	4603      	mov	r3, r0
 8011466:	461a      	mov	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	3301      	adds	r3, #1
 8011470:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3301      	adds	r3, #1
 8011476:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f7ff faae 	bl	80109da <SWAPBYTE>
 801147e:	4603      	mov	r3, r0
 8011480:	461a      	mov	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	3301      	adds	r3, #1
 801148a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	3301      	adds	r3, #1
 8011490:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f7ff faa1 	bl	80109da <SWAPBYTE>
 8011498:	4603      	mov	r3, r0
 801149a:	461a      	mov	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	80da      	strh	r2, [r3, #6]
}
 80114a0:	bf00      	nop
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80114b2:	2180      	movs	r1, #128	; 0x80
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f007 f879 	bl	80185ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80114ba:	2100      	movs	r1, #0
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f007 f875 	bl	80185ac <USBD_LL_StallEP>
}
 80114c2:	bf00      	nop
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b086      	sub	sp, #24
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	60f8      	str	r0, [r7, #12]
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80114d6:	2300      	movs	r3, #0
 80114d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d036      	beq.n	801154e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80114e4:	6938      	ldr	r0, [r7, #16]
 80114e6:	f000 f836 	bl	8011556 <USBD_GetLen>
 80114ea:	4603      	mov	r3, r0
 80114ec:	3301      	adds	r3, #1
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	4413      	add	r3, r2
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	7812      	ldrb	r2, [r2, #0]
 8011502:	701a      	strb	r2, [r3, #0]
  idx++;
 8011504:	7dfb      	ldrb	r3, [r7, #23]
 8011506:	3301      	adds	r3, #1
 8011508:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	4413      	add	r3, r2
 8011510:	2203      	movs	r2, #3
 8011512:	701a      	strb	r2, [r3, #0]
  idx++;
 8011514:	7dfb      	ldrb	r3, [r7, #23]
 8011516:	3301      	adds	r3, #1
 8011518:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801151a:	e013      	b.n	8011544 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801151c:	7dfb      	ldrb	r3, [r7, #23]
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	4413      	add	r3, r2
 8011522:	693a      	ldr	r2, [r7, #16]
 8011524:	7812      	ldrb	r2, [r2, #0]
 8011526:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	3301      	adds	r3, #1
 801152c:	613b      	str	r3, [r7, #16]
    idx++;
 801152e:	7dfb      	ldrb	r3, [r7, #23]
 8011530:	3301      	adds	r3, #1
 8011532:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	4413      	add	r3, r2
 801153a:	2200      	movs	r2, #0
 801153c:	701a      	strb	r2, [r3, #0]
    idx++;
 801153e:	7dfb      	ldrb	r3, [r7, #23]
 8011540:	3301      	adds	r3, #1
 8011542:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e7      	bne.n	801151c <USBD_GetString+0x52>
 801154c:	e000      	b.n	8011550 <USBD_GetString+0x86>
    return;
 801154e:	bf00      	nop
  }
}
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011556:	b480      	push	{r7}
 8011558:	b085      	sub	sp, #20
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801155e:	2300      	movs	r3, #0
 8011560:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011566:	e005      	b.n	8011574 <USBD_GetLen+0x1e>
  {
    len++;
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	3301      	adds	r3, #1
 801156c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	3301      	adds	r3, #1
 8011572:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1f5      	bne.n	8011568 <USBD_GetLen+0x12>
  }

  return len;
 801157c:	7bfb      	ldrb	r3, [r7, #15]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3714      	adds	r7, #20
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	60f8      	str	r0, [r7, #12]
 8011592:	60b9      	str	r1, [r7, #8]
 8011594:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2202      	movs	r2, #2
 801159a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68ba      	ldr	r2, [r7, #8]
 80115ae:	2100      	movs	r1, #0
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f007 f884 	bl	80186be <USBD_LL_Transmit>

  return USBD_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	68ba      	ldr	r2, [r7, #8]
 80115d0:	2100      	movs	r1, #0
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f007 f873 	bl	80186be <USBD_LL_Transmit>

  return USBD_OK;
 80115d8:	2300      	movs	r3, #0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b084      	sub	sp, #16
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	60f8      	str	r0, [r7, #12]
 80115ea:	60b9      	str	r1, [r7, #8]
 80115ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2203      	movs	r2, #3
 80115f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	2100      	movs	r1, #0
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f007 f877 	bl	8018700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	2100      	movs	r1, #0
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f007 f866 	bl	8018700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2204      	movs	r2, #4
 801164a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801164e:	2300      	movs	r3, #0
 8011650:	2200      	movs	r2, #0
 8011652:	2100      	movs	r1, #0
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f007 f832 	bl	80186be <USBD_LL_Transmit>

  return USBD_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2205      	movs	r2, #5
 8011670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011674:	2300      	movs	r3, #0
 8011676:	2200      	movs	r2, #0
 8011678:	2100      	movs	r1, #0
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f007 f840 	bl	8018700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
	...

0801168c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	4603      	mov	r3, r0
 8011694:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011696:	79fb      	ldrb	r3, [r7, #7]
 8011698:	4a08      	ldr	r2, [pc, #32]	; (80116bc <disk_status+0x30>)
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	4413      	add	r3, r2
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	79fa      	ldrb	r2, [r7, #7]
 80116a4:	4905      	ldr	r1, [pc, #20]	; (80116bc <disk_status+0x30>)
 80116a6:	440a      	add	r2, r1
 80116a8:	7a12      	ldrb	r2, [r2, #8]
 80116aa:	4610      	mov	r0, r2
 80116ac:	4798      	blx	r3
 80116ae:	4603      	mov	r3, r0
 80116b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80116b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	20000804 	.word	0x20000804

080116c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80116ca:	2300      	movs	r3, #0
 80116cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80116ce:	79fb      	ldrb	r3, [r7, #7]
 80116d0:	4a0d      	ldr	r2, [pc, #52]	; (8011708 <disk_initialize+0x48>)
 80116d2:	5cd3      	ldrb	r3, [r2, r3]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d111      	bne.n	80116fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	4a0b      	ldr	r2, [pc, #44]	; (8011708 <disk_initialize+0x48>)
 80116dc:	2101      	movs	r1, #1
 80116de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80116e0:	79fb      	ldrb	r3, [r7, #7]
 80116e2:	4a09      	ldr	r2, [pc, #36]	; (8011708 <disk_initialize+0x48>)
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	4413      	add	r3, r2
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	79fa      	ldrb	r2, [r7, #7]
 80116ee:	4906      	ldr	r1, [pc, #24]	; (8011708 <disk_initialize+0x48>)
 80116f0:	440a      	add	r2, r1
 80116f2:	7a12      	ldrb	r2, [r2, #8]
 80116f4:	4610      	mov	r0, r2
 80116f6:	4798      	blx	r3
 80116f8:	4603      	mov	r3, r0
 80116fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	20000804 	.word	0x20000804

0801170c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801170c:	b590      	push	{r4, r7, lr}
 801170e:	b087      	sub	sp, #28
 8011710:	af00      	add	r7, sp, #0
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
 8011716:	603b      	str	r3, [r7, #0]
 8011718:	4603      	mov	r3, r0
 801171a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801171c:	7bfb      	ldrb	r3, [r7, #15]
 801171e:	4a0a      	ldr	r2, [pc, #40]	; (8011748 <disk_read+0x3c>)
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	4413      	add	r3, r2
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	689c      	ldr	r4, [r3, #8]
 8011728:	7bfb      	ldrb	r3, [r7, #15]
 801172a:	4a07      	ldr	r2, [pc, #28]	; (8011748 <disk_read+0x3c>)
 801172c:	4413      	add	r3, r2
 801172e:	7a18      	ldrb	r0, [r3, #8]
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	68b9      	ldr	r1, [r7, #8]
 8011736:	47a0      	blx	r4
 8011738:	4603      	mov	r3, r0
 801173a:	75fb      	strb	r3, [r7, #23]
  return res;
 801173c:	7dfb      	ldrb	r3, [r7, #23]
}
 801173e:	4618      	mov	r0, r3
 8011740:	371c      	adds	r7, #28
 8011742:	46bd      	mov	sp, r7
 8011744:	bd90      	pop	{r4, r7, pc}
 8011746:	bf00      	nop
 8011748:	20000804 	.word	0x20000804

0801174c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801174c:	b590      	push	{r4, r7, lr}
 801174e:	b087      	sub	sp, #28
 8011750:	af00      	add	r7, sp, #0
 8011752:	60b9      	str	r1, [r7, #8]
 8011754:	607a      	str	r2, [r7, #4]
 8011756:	603b      	str	r3, [r7, #0]
 8011758:	4603      	mov	r3, r0
 801175a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	4a0a      	ldr	r2, [pc, #40]	; (8011788 <disk_write+0x3c>)
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4413      	add	r3, r2
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	68dc      	ldr	r4, [r3, #12]
 8011768:	7bfb      	ldrb	r3, [r7, #15]
 801176a:	4a07      	ldr	r2, [pc, #28]	; (8011788 <disk_write+0x3c>)
 801176c:	4413      	add	r3, r2
 801176e:	7a18      	ldrb	r0, [r3, #8]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	68b9      	ldr	r1, [r7, #8]
 8011776:	47a0      	blx	r4
 8011778:	4603      	mov	r3, r0
 801177a:	75fb      	strb	r3, [r7, #23]
  return res;
 801177c:	7dfb      	ldrb	r3, [r7, #23]
}
 801177e:	4618      	mov	r0, r3
 8011780:	371c      	adds	r7, #28
 8011782:	46bd      	mov	sp, r7
 8011784:	bd90      	pop	{r4, r7, pc}
 8011786:	bf00      	nop
 8011788:	20000804 	.word	0x20000804

0801178c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	4603      	mov	r3, r0
 8011794:	603a      	str	r2, [r7, #0]
 8011796:	71fb      	strb	r3, [r7, #7]
 8011798:	460b      	mov	r3, r1
 801179a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801179c:	79fb      	ldrb	r3, [r7, #7]
 801179e:	4a09      	ldr	r2, [pc, #36]	; (80117c4 <disk_ioctl+0x38>)
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4413      	add	r3, r2
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	691b      	ldr	r3, [r3, #16]
 80117a8:	79fa      	ldrb	r2, [r7, #7]
 80117aa:	4906      	ldr	r1, [pc, #24]	; (80117c4 <disk_ioctl+0x38>)
 80117ac:	440a      	add	r2, r1
 80117ae:	7a10      	ldrb	r0, [r2, #8]
 80117b0:	79b9      	ldrb	r1, [r7, #6]
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	4798      	blx	r3
 80117b6:	4603      	mov	r3, r0
 80117b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	20000804 	.word	0x20000804

080117c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3301      	adds	r3, #1
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80117d8:	89fb      	ldrh	r3, [r7, #14]
 80117da:	021b      	lsls	r3, r3, #8
 80117dc:	b21a      	sxth	r2, r3
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	b21b      	sxth	r3, r3
 80117e4:	4313      	orrs	r3, r2
 80117e6:	b21b      	sxth	r3, r3
 80117e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80117ea:	89fb      	ldrh	r3, [r7, #14]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3714      	adds	r7, #20
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr

080117f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	3303      	adds	r3, #3
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	021b      	lsls	r3, r3, #8
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	3202      	adds	r2, #2
 8011810:	7812      	ldrb	r2, [r2, #0]
 8011812:	4313      	orrs	r3, r2
 8011814:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	021b      	lsls	r3, r3, #8
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	3201      	adds	r2, #1
 801181e:	7812      	ldrb	r2, [r2, #0]
 8011820:	4313      	orrs	r3, r2
 8011822:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	021b      	lsls	r3, r3, #8
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	7812      	ldrb	r2, [r2, #0]
 801182c:	4313      	orrs	r3, r2
 801182e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011830:	68fb      	ldr	r3, [r7, #12]
}
 8011832:	4618      	mov	r0, r3
 8011834:	3714      	adds	r7, #20
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801183e:	b480      	push	{r7}
 8011840:	b083      	sub	sp, #12
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	460b      	mov	r3, r1
 8011848:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	1c5a      	adds	r2, r3, #1
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	887a      	ldrh	r2, [r7, #2]
 8011852:	b2d2      	uxtb	r2, r2
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	887b      	ldrh	r3, [r7, #2]
 8011858:	0a1b      	lsrs	r3, r3, #8
 801185a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	1c5a      	adds	r2, r3, #1
 8011860:	607a      	str	r2, [r7, #4]
 8011862:	887a      	ldrh	r2, [r7, #2]
 8011864:	b2d2      	uxtb	r2, r2
 8011866:	701a      	strb	r2, [r3, #0]
}
 8011868:	bf00      	nop
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	1c5a      	adds	r2, r3, #1
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	683a      	ldr	r2, [r7, #0]
 8011886:	b2d2      	uxtb	r2, r2
 8011888:	701a      	strb	r2, [r3, #0]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	0a1b      	lsrs	r3, r3, #8
 801188e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	1c5a      	adds	r2, r3, #1
 8011894:	607a      	str	r2, [r7, #4]
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	b2d2      	uxtb	r2, r2
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	0a1b      	lsrs	r3, r3, #8
 80118a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	1c5a      	adds	r2, r3, #1
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	683a      	ldr	r2, [r7, #0]
 80118aa:	b2d2      	uxtb	r2, r2
 80118ac:	701a      	strb	r2, [r3, #0]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	0a1b      	lsrs	r3, r3, #8
 80118b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	1c5a      	adds	r2, r3, #1
 80118b8:	607a      	str	r2, [r7, #4]
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	b2d2      	uxtb	r2, r2
 80118be:	701a      	strb	r2, [r3, #0]
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80118cc:	b480      	push	{r7}
 80118ce:	b087      	sub	sp, #28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00d      	beq.n	8011902 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80118e6:	693a      	ldr	r2, [r7, #16]
 80118e8:	1c53      	adds	r3, r2, #1
 80118ea:	613b      	str	r3, [r7, #16]
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	1c59      	adds	r1, r3, #1
 80118f0:	6179      	str	r1, [r7, #20]
 80118f2:	7812      	ldrb	r2, [r2, #0]
 80118f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3b01      	subs	r3, #1
 80118fa:	607b      	str	r3, [r7, #4]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1f1      	bne.n	80118e6 <mem_cpy+0x1a>
	}
}
 8011902:	bf00      	nop
 8011904:	371c      	adds	r7, #28
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr

0801190e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801190e:	b480      	push	{r7}
 8011910:	b087      	sub	sp, #28
 8011912:	af00      	add	r7, sp, #0
 8011914:	60f8      	str	r0, [r7, #12]
 8011916:	60b9      	str	r1, [r7, #8]
 8011918:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	1c5a      	adds	r2, r3, #1
 8011922:	617a      	str	r2, [r7, #20]
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	b2d2      	uxtb	r2, r2
 8011928:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	3b01      	subs	r3, #1
 801192e:	607b      	str	r3, [r7, #4]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1f3      	bne.n	801191e <mem_set+0x10>
}
 8011936:	bf00      	nop
 8011938:	bf00      	nop
 801193a:	371c      	adds	r7, #28
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011944:	b480      	push	{r7}
 8011946:	b089      	sub	sp, #36	; 0x24
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	61fb      	str	r3, [r7, #28]
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011958:	2300      	movs	r3, #0
 801195a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	1c5a      	adds	r2, r3, #1
 8011960:	61fa      	str	r2, [r7, #28]
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	4619      	mov	r1, r3
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	1c5a      	adds	r2, r3, #1
 801196a:	61ba      	str	r2, [r7, #24]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	1acb      	subs	r3, r1, r3
 8011970:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3b01      	subs	r3, #1
 8011976:	607b      	str	r3, [r7, #4]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d002      	beq.n	8011984 <mem_cmp+0x40>
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d0eb      	beq.n	801195c <mem_cmp+0x18>

	return r;
 8011984:	697b      	ldr	r3, [r7, #20]
}
 8011986:	4618      	mov	r0, r3
 8011988:	3724      	adds	r7, #36	; 0x24
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr

08011992 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011992:	b480      	push	{r7}
 8011994:	b083      	sub	sp, #12
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
 801199a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801199c:	e002      	b.n	80119a4 <chk_chr+0x12>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	3301      	adds	r3, #1
 80119a2:	607b      	str	r3, [r7, #4]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d005      	beq.n	80119b8 <chk_chr+0x26>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	461a      	mov	r2, r3
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d1f2      	bne.n	801199e <chk_chr+0xc>
	return *str;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	781b      	ldrb	r3, [r3, #0]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d009      	beq.n	80119ea <lock_fs+0x22>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	4618      	mov	r0, r3
 80119dc:	f002 fcde 	bl	801439c <ff_req_grant>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d001      	beq.n	80119ea <lock_fs+0x22>
 80119e6:	2301      	movs	r3, #1
 80119e8:	e000      	b.n	80119ec <lock_fs+0x24>
 80119ea:	2300      	movs	r3, #0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00d      	beq.n	8011a22 <unlock_fs+0x2e>
 8011a06:	78fb      	ldrb	r3, [r7, #3]
 8011a08:	2b0c      	cmp	r3, #12
 8011a0a:	d00a      	beq.n	8011a22 <unlock_fs+0x2e>
 8011a0c:	78fb      	ldrb	r3, [r7, #3]
 8011a0e:	2b0b      	cmp	r3, #11
 8011a10:	d007      	beq.n	8011a22 <unlock_fs+0x2e>
 8011a12:	78fb      	ldrb	r3, [r7, #3]
 8011a14:	2b0f      	cmp	r3, #15
 8011a16:	d004      	beq.n	8011a22 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f002 fcd2 	bl	80143c6 <ff_rel_grant>
	}
}
 8011a22:	bf00      	nop
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
	...

08011a2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b085      	sub	sp, #20
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a36:	2300      	movs	r3, #0
 8011a38:	60bb      	str	r3, [r7, #8]
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	60fb      	str	r3, [r7, #12]
 8011a3e:	e029      	b.n	8011a94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011a40:	4a27      	ldr	r2, [pc, #156]	; (8011ae0 <chk_lock+0xb4>)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	011b      	lsls	r3, r3, #4
 8011a46:	4413      	add	r3, r2
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d01d      	beq.n	8011a8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a4e:	4a24      	ldr	r2, [pc, #144]	; (8011ae0 <chk_lock+0xb4>)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	011b      	lsls	r3, r3, #4
 8011a54:	4413      	add	r3, r2
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d116      	bne.n	8011a8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011a60:	4a1f      	ldr	r2, [pc, #124]	; (8011ae0 <chk_lock+0xb4>)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	4413      	add	r3, r2
 8011a68:	3304      	adds	r3, #4
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d10c      	bne.n	8011a8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a74:	4a1a      	ldr	r2, [pc, #104]	; (8011ae0 <chk_lock+0xb4>)
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	011b      	lsls	r3, r3, #4
 8011a7a:	4413      	add	r3, r2
 8011a7c:	3308      	adds	r3, #8
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d102      	bne.n	8011a8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a88:	e007      	b.n	8011a9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	3301      	adds	r3, #1
 8011a92:	60fb      	str	r3, [r7, #12]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d9d2      	bls.n	8011a40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d109      	bne.n	8011ab4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d102      	bne.n	8011aac <chk_lock+0x80>
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b02      	cmp	r3, #2
 8011aaa:	d101      	bne.n	8011ab0 <chk_lock+0x84>
 8011aac:	2300      	movs	r3, #0
 8011aae:	e010      	b.n	8011ad2 <chk_lock+0xa6>
 8011ab0:	2312      	movs	r3, #18
 8011ab2:	e00e      	b.n	8011ad2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d108      	bne.n	8011acc <chk_lock+0xa0>
 8011aba:	4a09      	ldr	r2, [pc, #36]	; (8011ae0 <chk_lock+0xb4>)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	330c      	adds	r3, #12
 8011ac4:	881b      	ldrh	r3, [r3, #0]
 8011ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011aca:	d101      	bne.n	8011ad0 <chk_lock+0xa4>
 8011acc:	2310      	movs	r3, #16
 8011ace:	e000      	b.n	8011ad2 <chk_lock+0xa6>
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3714      	adds	r7, #20
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	200007e4 	.word	0x200007e4

08011ae4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011aea:	2300      	movs	r3, #0
 8011aec:	607b      	str	r3, [r7, #4]
 8011aee:	e002      	b.n	8011af6 <enq_lock+0x12>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	3301      	adds	r3, #1
 8011af4:	607b      	str	r3, [r7, #4]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d806      	bhi.n	8011b0a <enq_lock+0x26>
 8011afc:	4a09      	ldr	r2, [pc, #36]	; (8011b24 <enq_lock+0x40>)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	011b      	lsls	r3, r3, #4
 8011b02:	4413      	add	r3, r2
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1f2      	bne.n	8011af0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	bf14      	ite	ne
 8011b10:	2301      	movne	r3, #1
 8011b12:	2300      	moveq	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	200007e4 	.word	0x200007e4

08011b28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b32:	2300      	movs	r3, #0
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	e01f      	b.n	8011b78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011b38:	4a41      	ldr	r2, [pc, #260]	; (8011c40 <inc_lock+0x118>)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	011b      	lsls	r3, r3, #4
 8011b3e:	4413      	add	r3, r2
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d113      	bne.n	8011b72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011b4a:	4a3d      	ldr	r2, [pc, #244]	; (8011c40 <inc_lock+0x118>)
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	011b      	lsls	r3, r3, #4
 8011b50:	4413      	add	r3, r2
 8011b52:	3304      	adds	r3, #4
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d109      	bne.n	8011b72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011b5e:	4a38      	ldr	r2, [pc, #224]	; (8011c40 <inc_lock+0x118>)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	4413      	add	r3, r2
 8011b66:	3308      	adds	r3, #8
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d006      	beq.n	8011b80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	3301      	adds	r3, #1
 8011b76:	60fb      	str	r3, [r7, #12]
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d9dc      	bls.n	8011b38 <inc_lock+0x10>
 8011b7e:	e000      	b.n	8011b82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2b02      	cmp	r3, #2
 8011b86:	d132      	bne.n	8011bee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	e002      	b.n	8011b94 <inc_lock+0x6c>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	3301      	adds	r3, #1
 8011b92:	60fb      	str	r3, [r7, #12]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d806      	bhi.n	8011ba8 <inc_lock+0x80>
 8011b9a:	4a29      	ldr	r2, [pc, #164]	; (8011c40 <inc_lock+0x118>)
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	011b      	lsls	r3, r3, #4
 8011ba0:	4413      	add	r3, r2
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1f2      	bne.n	8011b8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b02      	cmp	r3, #2
 8011bac:	d101      	bne.n	8011bb2 <inc_lock+0x8a>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e040      	b.n	8011c34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	4922      	ldr	r1, [pc, #136]	; (8011c40 <inc_lock+0x118>)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	011b      	lsls	r3, r3, #4
 8011bbc:	440b      	add	r3, r1
 8011bbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	689a      	ldr	r2, [r3, #8]
 8011bc4:	491e      	ldr	r1, [pc, #120]	; (8011c40 <inc_lock+0x118>)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	440b      	add	r3, r1
 8011bcc:	3304      	adds	r3, #4
 8011bce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	695a      	ldr	r2, [r3, #20]
 8011bd4:	491a      	ldr	r1, [pc, #104]	; (8011c40 <inc_lock+0x118>)
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	440b      	add	r3, r1
 8011bdc:	3308      	adds	r3, #8
 8011bde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011be0:	4a17      	ldr	r2, [pc, #92]	; (8011c40 <inc_lock+0x118>)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	4413      	add	r3, r2
 8011be8:	330c      	adds	r3, #12
 8011bea:	2200      	movs	r2, #0
 8011bec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d009      	beq.n	8011c08 <inc_lock+0xe0>
 8011bf4:	4a12      	ldr	r2, [pc, #72]	; (8011c40 <inc_lock+0x118>)
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	011b      	lsls	r3, r3, #4
 8011bfa:	4413      	add	r3, r2
 8011bfc:	330c      	adds	r3, #12
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <inc_lock+0xe0>
 8011c04:	2300      	movs	r3, #0
 8011c06:	e015      	b.n	8011c34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d108      	bne.n	8011c20 <inc_lock+0xf8>
 8011c0e:	4a0c      	ldr	r2, [pc, #48]	; (8011c40 <inc_lock+0x118>)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	011b      	lsls	r3, r3, #4
 8011c14:	4413      	add	r3, r2
 8011c16:	330c      	adds	r3, #12
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	e001      	b.n	8011c24 <inc_lock+0xfc>
 8011c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c24:	4906      	ldr	r1, [pc, #24]	; (8011c40 <inc_lock+0x118>)
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	011b      	lsls	r3, r3, #4
 8011c2a:	440b      	add	r3, r1
 8011c2c:	330c      	adds	r3, #12
 8011c2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	3301      	adds	r3, #1
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr
 8011c40:	200007e4 	.word	0x200007e4

08011c44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3b01      	subs	r3, #1
 8011c50:	607b      	str	r3, [r7, #4]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d825      	bhi.n	8011ca4 <dec_lock+0x60>
		n = Files[i].ctr;
 8011c58:	4a17      	ldr	r2, [pc, #92]	; (8011cb8 <dec_lock+0x74>)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	011b      	lsls	r3, r3, #4
 8011c5e:	4413      	add	r3, r2
 8011c60:	330c      	adds	r3, #12
 8011c62:	881b      	ldrh	r3, [r3, #0]
 8011c64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011c66:	89fb      	ldrh	r3, [r7, #14]
 8011c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c6c:	d101      	bne.n	8011c72 <dec_lock+0x2e>
 8011c6e:	2300      	movs	r3, #0
 8011c70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c72:	89fb      	ldrh	r3, [r7, #14]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <dec_lock+0x3a>
 8011c78:	89fb      	ldrh	r3, [r7, #14]
 8011c7a:	3b01      	subs	r3, #1
 8011c7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c7e:	4a0e      	ldr	r2, [pc, #56]	; (8011cb8 <dec_lock+0x74>)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	011b      	lsls	r3, r3, #4
 8011c84:	4413      	add	r3, r2
 8011c86:	330c      	adds	r3, #12
 8011c88:	89fa      	ldrh	r2, [r7, #14]
 8011c8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011c8c:	89fb      	ldrh	r3, [r7, #14]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d105      	bne.n	8011c9e <dec_lock+0x5a>
 8011c92:	4a09      	ldr	r2, [pc, #36]	; (8011cb8 <dec_lock+0x74>)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	011b      	lsls	r3, r3, #4
 8011c98:	4413      	add	r3, r2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	737b      	strb	r3, [r7, #13]
 8011ca2:	e001      	b.n	8011ca8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011ca4:	2302      	movs	r3, #2
 8011ca6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011ca8:	7b7b      	ldrb	r3, [r7, #13]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3714      	adds	r7, #20
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	200007e4 	.word	0x200007e4

08011cbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	60fb      	str	r3, [r7, #12]
 8011cc8:	e010      	b.n	8011cec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011cca:	4a0d      	ldr	r2, [pc, #52]	; (8011d00 <clear_lock+0x44>)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	011b      	lsls	r3, r3, #4
 8011cd0:	4413      	add	r3, r2
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d105      	bne.n	8011ce6 <clear_lock+0x2a>
 8011cda:	4a09      	ldr	r2, [pc, #36]	; (8011d00 <clear_lock+0x44>)
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	011b      	lsls	r3, r3, #4
 8011ce0:	4413      	add	r3, r2
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d9eb      	bls.n	8011cca <clear_lock+0xe>
	}
}
 8011cf2:	bf00      	nop
 8011cf4:	bf00      	nop
 8011cf6:	3714      	adds	r7, #20
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr
 8011d00:	200007e4 	.word	0x200007e4

08011d04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	78db      	ldrb	r3, [r3, #3]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d034      	beq.n	8011d82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	7858      	ldrb	r0, [r3, #1]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011d28:	2301      	movs	r3, #1
 8011d2a:	697a      	ldr	r2, [r7, #20]
 8011d2c:	f7ff fd0e 	bl	801174c <disk_write>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d002      	beq.n	8011d3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011d36:	2301      	movs	r3, #1
 8011d38:	73fb      	strb	r3, [r7, #15]
 8011d3a:	e022      	b.n	8011d82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d46:	697a      	ldr	r2, [r7, #20]
 8011d48:	1ad2      	subs	r2, r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	69db      	ldr	r3, [r3, #28]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d217      	bcs.n	8011d82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	789b      	ldrb	r3, [r3, #2]
 8011d56:	613b      	str	r3, [r7, #16]
 8011d58:	e010      	b.n	8011d7c <sync_window+0x78>
					wsect += fs->fsize;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	69db      	ldr	r3, [r3, #28]
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	4413      	add	r3, r2
 8011d62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7858      	ldrb	r0, [r3, #1]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011d6e:	2301      	movs	r3, #1
 8011d70:	697a      	ldr	r2, [r7, #20]
 8011d72:	f7ff fceb 	bl	801174c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	613b      	str	r3, [r7, #16]
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d8eb      	bhi.n	8011d5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3718      	adds	r7, #24
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011d96:	2300      	movs	r3, #0
 8011d98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d9e:	683a      	ldr	r2, [r7, #0]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d01b      	beq.n	8011ddc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ff ffad 	bl	8011d04 <sync_window>
 8011daa:	4603      	mov	r3, r0
 8011dac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011dae:	7bfb      	ldrb	r3, [r7, #15]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d113      	bne.n	8011ddc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	7858      	ldrb	r0, [r3, #1]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	f7ff fca3 	bl	801170c <disk_read>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d004      	beq.n	8011dd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	683a      	ldr	r2, [r7, #0]
 8011dda:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
	...

08011de8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff ff87 	bl	8011d04 <sync_window>
 8011df6:	4603      	mov	r3, r0
 8011df8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011dfa:	7bfb      	ldrb	r3, [r7, #15]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d158      	bne.n	8011eb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d148      	bne.n	8011e9a <sync_fs+0xb2>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	791b      	ldrb	r3, [r3, #4]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d144      	bne.n	8011e9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	3334      	adds	r3, #52	; 0x34
 8011e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e18:	2100      	movs	r1, #0
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7ff fd77 	bl	801190e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	3334      	adds	r3, #52	; 0x34
 8011e24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7ff fd06 	bl	801183e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	3334      	adds	r3, #52	; 0x34
 8011e36:	4921      	ldr	r1, [pc, #132]	; (8011ebc <sync_fs+0xd4>)
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff fd1b 	bl	8011874 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	3334      	adds	r3, #52	; 0x34
 8011e42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e46:	491e      	ldr	r1, [pc, #120]	; (8011ec0 <sync_fs+0xd8>)
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7ff fd13 	bl	8011874 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	3334      	adds	r3, #52	; 0x34
 8011e52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	4610      	mov	r0, r2
 8011e5e:	f7ff fd09 	bl	8011874 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	3334      	adds	r3, #52	; 0x34
 8011e66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	4619      	mov	r1, r3
 8011e70:	4610      	mov	r0, r2
 8011e72:	f7ff fcff 	bl	8011874 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a1b      	ldr	r3, [r3, #32]
 8011e7a:	1c5a      	adds	r2, r3, #1
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	7858      	ldrb	r0, [r3, #1]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e8e:	2301      	movs	r3, #1
 8011e90:	f7ff fc5c 	bl	801174c <disk_write>
			fs->fsi_flag = 0;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	785b      	ldrb	r3, [r3, #1]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7ff fc72 	bl	801178c <disk_ioctl>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d001      	beq.n	8011eb2 <sync_fs+0xca>
 8011eae:	2301      	movs	r3, #1
 8011eb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3710      	adds	r7, #16
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	41615252 	.word	0x41615252
 8011ec0:	61417272 	.word	0x61417272

08011ec4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	3b02      	subs	r3, #2
 8011ed2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	699b      	ldr	r3, [r3, #24]
 8011ed8:	3b02      	subs	r3, #2
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d301      	bcc.n	8011ee4 <clust2sect+0x20>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	e008      	b.n	8011ef6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	895b      	ldrh	r3, [r3, #10]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	fb03 f202 	mul.w	r2, r3, r2
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef4:	4413      	add	r3, r2
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	d904      	bls.n	8011f22 <get_fat+0x20>
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	699b      	ldr	r3, [r3, #24]
 8011f1c:	683a      	ldr	r2, [r7, #0]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d302      	bcc.n	8011f28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011f22:	2301      	movs	r3, #1
 8011f24:	617b      	str	r3, [r7, #20]
 8011f26:	e08f      	b.n	8012048 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011f28:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	2b03      	cmp	r3, #3
 8011f34:	d062      	beq.n	8011ffc <get_fat+0xfa>
 8011f36:	2b03      	cmp	r3, #3
 8011f38:	dc7c      	bgt.n	8012034 <get_fat+0x132>
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d002      	beq.n	8011f44 <get_fat+0x42>
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d042      	beq.n	8011fc8 <get_fat+0xc6>
 8011f42:	e077      	b.n	8012034 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	60fb      	str	r3, [r7, #12]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	085b      	lsrs	r3, r3, #1
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	4413      	add	r3, r2
 8011f50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	0a5b      	lsrs	r3, r3, #9
 8011f5a:	4413      	add	r3, r2
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6938      	ldr	r0, [r7, #16]
 8011f60:	f7ff ff14 	bl	8011d8c <move_window>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d167      	bne.n	801203a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	1c5a      	adds	r2, r3, #1
 8011f6e:	60fa      	str	r2, [r7, #12]
 8011f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f74:	693a      	ldr	r2, [r7, #16]
 8011f76:	4413      	add	r3, r2
 8011f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	0a5b      	lsrs	r3, r3, #9
 8011f86:	4413      	add	r3, r2
 8011f88:	4619      	mov	r1, r3
 8011f8a:	6938      	ldr	r0, [r7, #16]
 8011f8c:	f7ff fefe 	bl	8011d8c <move_window>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d153      	bne.n	801203e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f9c:	693a      	ldr	r2, [r7, #16]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011fa4:	021b      	lsls	r3, r3, #8
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	4313      	orrs	r3, r2
 8011fac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d002      	beq.n	8011fbe <get_fat+0xbc>
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	091b      	lsrs	r3, r3, #4
 8011fbc:	e002      	b.n	8011fc4 <get_fat+0xc2>
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011fc4:	617b      	str	r3, [r7, #20]
			break;
 8011fc6:	e03f      	b.n	8012048 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	0a1b      	lsrs	r3, r3, #8
 8011fd0:	4413      	add	r3, r2
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	6938      	ldr	r0, [r7, #16]
 8011fd6:	f7ff fed9 	bl	8011d8c <move_window>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d130      	bne.n	8012042 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011fee:	4413      	add	r3, r2
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff fbe9 	bl	80117c8 <ld_word>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	617b      	str	r3, [r7, #20]
			break;
 8011ffa:	e025      	b.n	8012048 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	09db      	lsrs	r3, r3, #7
 8012004:	4413      	add	r3, r2
 8012006:	4619      	mov	r1, r3
 8012008:	6938      	ldr	r0, [r7, #16]
 801200a:	f7ff febf 	bl	8011d8c <move_window>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d118      	bne.n	8012046 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012022:	4413      	add	r3, r2
 8012024:	4618      	mov	r0, r3
 8012026:	f7ff fbe7 	bl	80117f8 <ld_dword>
 801202a:	4603      	mov	r3, r0
 801202c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012030:	617b      	str	r3, [r7, #20]
			break;
 8012032:	e009      	b.n	8012048 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012034:	2301      	movs	r3, #1
 8012036:	617b      	str	r3, [r7, #20]
 8012038:	e006      	b.n	8012048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801203a:	bf00      	nop
 801203c:	e004      	b.n	8012048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801203e:	bf00      	nop
 8012040:	e002      	b.n	8012048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012042:	bf00      	nop
 8012044:	e000      	b.n	8012048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012046:	bf00      	nop
		}
	}

	return val;
 8012048:	697b      	ldr	r3, [r7, #20]
}
 801204a:	4618      	mov	r0, r3
 801204c:	3718      	adds	r7, #24
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012052:	b590      	push	{r4, r7, lr}
 8012054:	b089      	sub	sp, #36	; 0x24
 8012056:	af00      	add	r7, sp, #0
 8012058:	60f8      	str	r0, [r7, #12]
 801205a:	60b9      	str	r1, [r7, #8]
 801205c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801205e:	2302      	movs	r3, #2
 8012060:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	2b01      	cmp	r3, #1
 8012066:	f240 80d2 	bls.w	801220e <put_fat+0x1bc>
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	699b      	ldr	r3, [r3, #24]
 801206e:	68ba      	ldr	r2, [r7, #8]
 8012070:	429a      	cmp	r2, r3
 8012072:	f080 80cc 	bcs.w	801220e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	2b03      	cmp	r3, #3
 801207c:	f000 8096 	beq.w	80121ac <put_fat+0x15a>
 8012080:	2b03      	cmp	r3, #3
 8012082:	f300 80cd 	bgt.w	8012220 <put_fat+0x1ce>
 8012086:	2b01      	cmp	r3, #1
 8012088:	d002      	beq.n	8012090 <put_fat+0x3e>
 801208a:	2b02      	cmp	r3, #2
 801208c:	d06e      	beq.n	801216c <put_fat+0x11a>
 801208e:	e0c7      	b.n	8012220 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	61bb      	str	r3, [r7, #24]
 8012094:	69bb      	ldr	r3, [r7, #24]
 8012096:	085b      	lsrs	r3, r3, #1
 8012098:	69ba      	ldr	r2, [r7, #24]
 801209a:	4413      	add	r3, r2
 801209c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	0a5b      	lsrs	r3, r3, #9
 80120a6:	4413      	add	r3, r2
 80120a8:	4619      	mov	r1, r3
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f7ff fe6e 	bl	8011d8c <move_window>
 80120b0:	4603      	mov	r3, r0
 80120b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f040 80ab 	bne.w	8012212 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	1c59      	adds	r1, r3, #1
 80120c6:	61b9      	str	r1, [r7, #24]
 80120c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120cc:	4413      	add	r3, r2
 80120ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	f003 0301 	and.w	r3, r3, #1
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00d      	beq.n	80120f6 <put_fat+0xa4>
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	b25b      	sxtb	r3, r3
 80120e0:	f003 030f 	and.w	r3, r3, #15
 80120e4:	b25a      	sxtb	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	011b      	lsls	r3, r3, #4
 80120ec:	b25b      	sxtb	r3, r3
 80120ee:	4313      	orrs	r3, r2
 80120f0:	b25b      	sxtb	r3, r3
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	e001      	b.n	80120fa <put_fat+0xa8>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	697a      	ldr	r2, [r7, #20]
 80120fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2201      	movs	r2, #1
 8012102:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012108:	69bb      	ldr	r3, [r7, #24]
 801210a:	0a5b      	lsrs	r3, r3, #9
 801210c:	4413      	add	r3, r2
 801210e:	4619      	mov	r1, r3
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff fe3b 	bl	8011d8c <move_window>
 8012116:	4603      	mov	r3, r0
 8012118:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801211a:	7ffb      	ldrb	r3, [r7, #31]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d17a      	bne.n	8012216 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801212c:	4413      	add	r3, r2
 801212e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <put_fat+0xf0>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	091b      	lsrs	r3, r3, #4
 801213e:	b2db      	uxtb	r3, r3
 8012140:	e00e      	b.n	8012160 <put_fat+0x10e>
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	b25b      	sxtb	r3, r3
 8012148:	f023 030f 	bic.w	r3, r3, #15
 801214c:	b25a      	sxtb	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	0a1b      	lsrs	r3, r3, #8
 8012152:	b25b      	sxtb	r3, r3
 8012154:	f003 030f 	and.w	r3, r3, #15
 8012158:	b25b      	sxtb	r3, r3
 801215a:	4313      	orrs	r3, r2
 801215c:	b25b      	sxtb	r3, r3
 801215e:	b2db      	uxtb	r3, r3
 8012160:	697a      	ldr	r2, [r7, #20]
 8012162:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2201      	movs	r2, #1
 8012168:	70da      	strb	r2, [r3, #3]
			break;
 801216a:	e059      	b.n	8012220 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	0a1b      	lsrs	r3, r3, #8
 8012174:	4413      	add	r3, r2
 8012176:	4619      	mov	r1, r3
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f7ff fe07 	bl	8011d8c <move_window>
 801217e:	4603      	mov	r3, r0
 8012180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012182:	7ffb      	ldrb	r3, [r7, #31]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d148      	bne.n	801221a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012196:	4413      	add	r3, r2
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	b292      	uxth	r2, r2
 801219c:	4611      	mov	r1, r2
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff fb4d 	bl	801183e <st_word>
			fs->wflag = 1;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2201      	movs	r2, #1
 80121a8:	70da      	strb	r2, [r3, #3]
			break;
 80121aa:	e039      	b.n	8012220 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	09db      	lsrs	r3, r3, #7
 80121b4:	4413      	add	r3, r2
 80121b6:	4619      	mov	r1, r3
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f7ff fde7 	bl	8011d8c <move_window>
 80121be:	4603      	mov	r3, r0
 80121c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121c2:	7ffb      	ldrb	r3, [r7, #31]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d12a      	bne.n	801221e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80121dc:	4413      	add	r3, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f7ff fb0a 	bl	80117f8 <ld_dword>
 80121e4:	4603      	mov	r3, r0
 80121e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121ea:	4323      	orrs	r3, r4
 80121ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80121fc:	4413      	add	r3, r2
 80121fe:	6879      	ldr	r1, [r7, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	f7ff fb37 	bl	8011874 <st_dword>
			fs->wflag = 1;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2201      	movs	r2, #1
 801220a:	70da      	strb	r2, [r3, #3]
			break;
 801220c:	e008      	b.n	8012220 <put_fat+0x1ce>
		}
	}
 801220e:	bf00      	nop
 8012210:	e006      	b.n	8012220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012212:	bf00      	nop
 8012214:	e004      	b.n	8012220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012216:	bf00      	nop
 8012218:	e002      	b.n	8012220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801221a:	bf00      	nop
 801221c:	e000      	b.n	8012220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801221e:	bf00      	nop
	return res;
 8012220:	7ffb      	ldrb	r3, [r7, #31]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3724      	adds	r7, #36	; 0x24
 8012226:	46bd      	mov	sp, r7
 8012228:	bd90      	pop	{r4, r7, pc}

0801222a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b088      	sub	sp, #32
 801222e:	af00      	add	r7, sp, #0
 8012230:	60f8      	str	r0, [r7, #12]
 8012232:	60b9      	str	r1, [r7, #8]
 8012234:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012236:	2300      	movs	r3, #0
 8012238:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b01      	cmp	r3, #1
 8012244:	d904      	bls.n	8012250 <remove_chain+0x26>
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	699b      	ldr	r3, [r3, #24]
 801224a:	68ba      	ldr	r2, [r7, #8]
 801224c:	429a      	cmp	r2, r3
 801224e:	d301      	bcc.n	8012254 <remove_chain+0x2a>
 8012250:	2302      	movs	r3, #2
 8012252:	e04b      	b.n	80122ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00c      	beq.n	8012274 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801225a:	f04f 32ff 	mov.w	r2, #4294967295
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	69b8      	ldr	r0, [r7, #24]
 8012262:	f7ff fef6 	bl	8012052 <put_fat>
 8012266:	4603      	mov	r3, r0
 8012268:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801226a:	7ffb      	ldrb	r3, [r7, #31]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d001      	beq.n	8012274 <remove_chain+0x4a>
 8012270:	7ffb      	ldrb	r3, [r7, #31]
 8012272:	e03b      	b.n	80122ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012274:	68b9      	ldr	r1, [r7, #8]
 8012276:	68f8      	ldr	r0, [r7, #12]
 8012278:	f7ff fe43 	bl	8011f02 <get_fat>
 801227c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d031      	beq.n	80122e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d101      	bne.n	801228e <remove_chain+0x64>
 801228a:	2302      	movs	r3, #2
 801228c:	e02e      	b.n	80122ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012294:	d101      	bne.n	801229a <remove_chain+0x70>
 8012296:	2301      	movs	r3, #1
 8012298:	e028      	b.n	80122ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801229a:	2200      	movs	r2, #0
 801229c:	68b9      	ldr	r1, [r7, #8]
 801229e:	69b8      	ldr	r0, [r7, #24]
 80122a0:	f7ff fed7 	bl	8012052 <put_fat>
 80122a4:	4603      	mov	r3, r0
 80122a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80122a8:	7ffb      	ldrb	r3, [r7, #31]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d001      	beq.n	80122b2 <remove_chain+0x88>
 80122ae:	7ffb      	ldrb	r3, [r7, #31]
 80122b0:	e01c      	b.n	80122ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	695a      	ldr	r2, [r3, #20]
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	699b      	ldr	r3, [r3, #24]
 80122ba:	3b02      	subs	r3, #2
 80122bc:	429a      	cmp	r2, r3
 80122be:	d20b      	bcs.n	80122d8 <remove_chain+0xae>
			fs->free_clst++;
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	695b      	ldr	r3, [r3, #20]
 80122c4:	1c5a      	adds	r2, r3, #1
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	791b      	ldrb	r3, [r3, #4]
 80122ce:	f043 0301 	orr.w	r3, r3, #1
 80122d2:	b2da      	uxtb	r2, r3
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	699b      	ldr	r3, [r3, #24]
 80122e0:	68ba      	ldr	r2, [r7, #8]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d3c6      	bcc.n	8012274 <remove_chain+0x4a>
 80122e6:	e000      	b.n	80122ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122ea:	2300      	movs	r3, #0
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3720      	adds	r7, #32
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10d      	bne.n	8012326 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <create_chain+0x2c>
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	699b      	ldr	r3, [r3, #24]
 801231a:	69ba      	ldr	r2, [r7, #24]
 801231c:	429a      	cmp	r2, r3
 801231e:	d31b      	bcc.n	8012358 <create_chain+0x64>
 8012320:	2301      	movs	r3, #1
 8012322:	61bb      	str	r3, [r7, #24]
 8012324:	e018      	b.n	8012358 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012326:	6839      	ldr	r1, [r7, #0]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7ff fdea 	bl	8011f02 <get_fat>
 801232e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b01      	cmp	r3, #1
 8012334:	d801      	bhi.n	801233a <create_chain+0x46>
 8012336:	2301      	movs	r3, #1
 8012338:	e070      	b.n	801241c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012340:	d101      	bne.n	8012346 <create_chain+0x52>
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	e06a      	b.n	801241c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	699b      	ldr	r3, [r3, #24]
 801234a:	68fa      	ldr	r2, [r7, #12]
 801234c:	429a      	cmp	r2, r3
 801234e:	d201      	bcs.n	8012354 <create_chain+0x60>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	e063      	b.n	801241c <create_chain+0x128>
		scl = clst;
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	3301      	adds	r3, #1
 8012360:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	699b      	ldr	r3, [r3, #24]
 8012366:	69fa      	ldr	r2, [r7, #28]
 8012368:	429a      	cmp	r2, r3
 801236a:	d307      	bcc.n	801237c <create_chain+0x88>
				ncl = 2;
 801236c:	2302      	movs	r3, #2
 801236e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012370:	69fa      	ldr	r2, [r7, #28]
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	429a      	cmp	r2, r3
 8012376:	d901      	bls.n	801237c <create_chain+0x88>
 8012378:	2300      	movs	r3, #0
 801237a:	e04f      	b.n	801241c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801237c:	69f9      	ldr	r1, [r7, #28]
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7ff fdbf 	bl	8011f02 <get_fat>
 8012384:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d00e      	beq.n	80123aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2b01      	cmp	r3, #1
 8012390:	d003      	beq.n	801239a <create_chain+0xa6>
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012398:	d101      	bne.n	801239e <create_chain+0xaa>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	e03e      	b.n	801241c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801239e:	69fa      	ldr	r2, [r7, #28]
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d1da      	bne.n	801235c <create_chain+0x68>
 80123a6:	2300      	movs	r3, #0
 80123a8:	e038      	b.n	801241c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80123aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80123ac:	f04f 32ff 	mov.w	r2, #4294967295
 80123b0:	69f9      	ldr	r1, [r7, #28]
 80123b2:	6938      	ldr	r0, [r7, #16]
 80123b4:	f7ff fe4d 	bl	8012052 <put_fat>
 80123b8:	4603      	mov	r3, r0
 80123ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80123bc:	7dfb      	ldrb	r3, [r7, #23]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d109      	bne.n	80123d6 <create_chain+0xe2>
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d006      	beq.n	80123d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123c8:	69fa      	ldr	r2, [r7, #28]
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	6938      	ldr	r0, [r7, #16]
 80123ce:	f7ff fe40 	bl	8012052 <put_fat>
 80123d2:	4603      	mov	r3, r0
 80123d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123d6:	7dfb      	ldrb	r3, [r7, #23]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d116      	bne.n	801240a <create_chain+0x116>
		fs->last_clst = ncl;
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	69fa      	ldr	r2, [r7, #28]
 80123e0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	695a      	ldr	r2, [r3, #20]
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	699b      	ldr	r3, [r3, #24]
 80123ea:	3b02      	subs	r3, #2
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d804      	bhi.n	80123fa <create_chain+0x106>
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	1e5a      	subs	r2, r3, #1
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	791b      	ldrb	r3, [r3, #4]
 80123fe:	f043 0301 	orr.w	r3, r3, #1
 8012402:	b2da      	uxtb	r2, r3
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	711a      	strb	r2, [r3, #4]
 8012408:	e007      	b.n	801241a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801240a:	7dfb      	ldrb	r3, [r7, #23]
 801240c:	2b01      	cmp	r3, #1
 801240e:	d102      	bne.n	8012416 <create_chain+0x122>
 8012410:	f04f 33ff 	mov.w	r3, #4294967295
 8012414:	e000      	b.n	8012418 <create_chain+0x124>
 8012416:	2301      	movs	r3, #1
 8012418:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801241a:	69fb      	ldr	r3, [r7, #28]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012424:	b480      	push	{r7}
 8012426:	b087      	sub	sp, #28
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012438:	3304      	adds	r3, #4
 801243a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	0a5b      	lsrs	r3, r3, #9
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	8952      	ldrh	r2, [r2, #10]
 8012444:	fbb3 f3f2 	udiv	r3, r3, r2
 8012448:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	1d1a      	adds	r2, r3, #4
 801244e:	613a      	str	r2, [r7, #16]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d101      	bne.n	801245e <clmt_clust+0x3a>
 801245a:	2300      	movs	r3, #0
 801245c:	e010      	b.n	8012480 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801245e:	697a      	ldr	r2, [r7, #20]
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	429a      	cmp	r2, r3
 8012464:	d307      	bcc.n	8012476 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012466:	697a      	ldr	r2, [r7, #20]
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	617b      	str	r3, [r7, #20]
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	3304      	adds	r3, #4
 8012472:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012474:	e7e9      	b.n	801244a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012476:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	4413      	add	r3, r2
}
 8012480:	4618      	mov	r0, r3
 8012482:	371c      	adds	r7, #28
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr

0801248c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124a2:	d204      	bcs.n	80124ae <dir_sdi+0x22>
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	f003 031f 	and.w	r3, r3, #31
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80124ae:	2302      	movs	r3, #2
 80124b0:	e063      	b.n	801257a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	683a      	ldr	r2, [r7, #0]
 80124b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d106      	bne.n	80124d2 <dir_sdi+0x46>
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	d902      	bls.n	80124d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10c      	bne.n	80124f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	095b      	lsrs	r3, r3, #5
 80124dc:	693a      	ldr	r2, [r7, #16]
 80124de:	8912      	ldrh	r2, [r2, #8]
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d301      	bcc.n	80124e8 <dir_sdi+0x5c>
 80124e4:	2302      	movs	r3, #2
 80124e6:	e048      	b.n	801257a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	61da      	str	r2, [r3, #28]
 80124f0:	e029      	b.n	8012546 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	895b      	ldrh	r3, [r3, #10]
 80124f6:	025b      	lsls	r3, r3, #9
 80124f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124fa:	e019      	b.n	8012530 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6979      	ldr	r1, [r7, #20]
 8012500:	4618      	mov	r0, r3
 8012502:	f7ff fcfe 	bl	8011f02 <get_fat>
 8012506:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250e:	d101      	bne.n	8012514 <dir_sdi+0x88>
 8012510:	2301      	movs	r3, #1
 8012512:	e032      	b.n	801257a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d904      	bls.n	8012524 <dir_sdi+0x98>
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	699b      	ldr	r3, [r3, #24]
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	429a      	cmp	r2, r3
 8012522:	d301      	bcc.n	8012528 <dir_sdi+0x9c>
 8012524:	2302      	movs	r3, #2
 8012526:	e028      	b.n	801257a <dir_sdi+0xee>
			ofs -= csz;
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012530:	683a      	ldr	r2, [r7, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	429a      	cmp	r2, r3
 8012536:	d2e1      	bcs.n	80124fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012538:	6979      	ldr	r1, [r7, #20]
 801253a:	6938      	ldr	r0, [r7, #16]
 801253c:	f7ff fcc2 	bl	8011ec4 <clust2sect>
 8012540:	4602      	mov	r2, r0
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	69db      	ldr	r3, [r3, #28]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d101      	bne.n	8012558 <dir_sdi+0xcc>
 8012554:	2302      	movs	r3, #2
 8012556:	e010      	b.n	801257a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	69da      	ldr	r2, [r3, #28]
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	0a5b      	lsrs	r3, r3, #9
 8012560:	441a      	add	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012572:	441a      	add	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012578:	2300      	movs	r3, #0
}
 801257a:	4618      	mov	r0, r3
 801257c:	3718      	adds	r7, #24
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}

08012582 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012582:	b580      	push	{r7, lr}
 8012584:	b086      	sub	sp, #24
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	695b      	ldr	r3, [r3, #20]
 8012596:	3320      	adds	r3, #32
 8012598:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	69db      	ldr	r3, [r3, #28]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d003      	beq.n	80125aa <dir_next+0x28>
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125a8:	d301      	bcc.n	80125ae <dir_next+0x2c>
 80125aa:	2304      	movs	r3, #4
 80125ac:	e0aa      	b.n	8012704 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	f040 8098 	bne.w	80126ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	69db      	ldr	r3, [r3, #28]
 80125be:	1c5a      	adds	r2, r3, #1
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	699b      	ldr	r3, [r3, #24]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d10b      	bne.n	80125e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	095b      	lsrs	r3, r3, #5
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	8912      	ldrh	r2, [r2, #8]
 80125d4:	4293      	cmp	r3, r2
 80125d6:	f0c0 8088 	bcc.w	80126ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2200      	movs	r2, #0
 80125de:	61da      	str	r2, [r3, #28]
 80125e0:	2304      	movs	r3, #4
 80125e2:	e08f      	b.n	8012704 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	0a5b      	lsrs	r3, r3, #9
 80125e8:	68fa      	ldr	r2, [r7, #12]
 80125ea:	8952      	ldrh	r2, [r2, #10]
 80125ec:	3a01      	subs	r2, #1
 80125ee:	4013      	ands	r3, r2
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d17a      	bne.n	80126ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	699b      	ldr	r3, [r3, #24]
 80125fa:	4619      	mov	r1, r3
 80125fc:	4610      	mov	r0, r2
 80125fe:	f7ff fc80 	bl	8011f02 <get_fat>
 8012602:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2b01      	cmp	r3, #1
 8012608:	d801      	bhi.n	801260e <dir_next+0x8c>
 801260a:	2302      	movs	r3, #2
 801260c:	e07a      	b.n	8012704 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012614:	d101      	bne.n	801261a <dir_next+0x98>
 8012616:	2301      	movs	r3, #1
 8012618:	e074      	b.n	8012704 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	697a      	ldr	r2, [r7, #20]
 8012620:	429a      	cmp	r2, r3
 8012622:	d358      	bcc.n	80126d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d104      	bne.n	8012634 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	61da      	str	r2, [r3, #28]
 8012630:	2304      	movs	r3, #4
 8012632:	e067      	b.n	8012704 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	699b      	ldr	r3, [r3, #24]
 801263a:	4619      	mov	r1, r3
 801263c:	4610      	mov	r0, r2
 801263e:	f7ff fe59 	bl	80122f4 <create_chain>
 8012642:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <dir_next+0xcc>
 801264a:	2307      	movs	r3, #7
 801264c:	e05a      	b.n	8012704 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d101      	bne.n	8012658 <dir_next+0xd6>
 8012654:	2302      	movs	r3, #2
 8012656:	e055      	b.n	8012704 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801265e:	d101      	bne.n	8012664 <dir_next+0xe2>
 8012660:	2301      	movs	r3, #1
 8012662:	e04f      	b.n	8012704 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f7ff fb4d 	bl	8011d04 <sync_window>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	d001      	beq.n	8012674 <dir_next+0xf2>
 8012670:	2301      	movs	r3, #1
 8012672:	e047      	b.n	8012704 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	3334      	adds	r3, #52	; 0x34
 8012678:	f44f 7200 	mov.w	r2, #512	; 0x200
 801267c:	2100      	movs	r1, #0
 801267e:	4618      	mov	r0, r3
 8012680:	f7ff f945 	bl	801190e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012684:	2300      	movs	r3, #0
 8012686:	613b      	str	r3, [r7, #16]
 8012688:	6979      	ldr	r1, [r7, #20]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff fc1a 	bl	8011ec4 <clust2sect>
 8012690:	4602      	mov	r2, r0
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	631a      	str	r2, [r3, #48]	; 0x30
 8012696:	e012      	b.n	80126be <dir_next+0x13c>
						fs->wflag = 1;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2201      	movs	r2, #1
 801269c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f7ff fb30 	bl	8011d04 <sync_window>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <dir_next+0x12c>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e02a      	b.n	8012704 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	3301      	adds	r3, #1
 80126b2:	613b      	str	r3, [r7, #16]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	631a      	str	r2, [r3, #48]	; 0x30
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	895b      	ldrh	r3, [r3, #10]
 80126c2:	461a      	mov	r2, r3
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d3e6      	bcc.n	8012698 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	1ad2      	subs	r2, r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	697a      	ldr	r2, [r7, #20]
 80126da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80126dc:	6979      	ldr	r1, [r7, #20]
 80126de:	68f8      	ldr	r0, [r7, #12]
 80126e0:	f7ff fbf0 	bl	8011ec4 <clust2sect>
 80126e4:	4602      	mov	r2, r0
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	68ba      	ldr	r2, [r7, #8]
 80126ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126fc:	441a      	add	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012702:	2300      	movs	r3, #0
}
 8012704:	4618      	mov	r0, r3
 8012706:	3718      	adds	r7, #24
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801271c:	2100      	movs	r1, #0
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7ff feb4 	bl	801248c <dir_sdi>
 8012724:	4603      	mov	r3, r0
 8012726:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012728:	7dfb      	ldrb	r3, [r7, #23]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d12b      	bne.n	8012786 <dir_alloc+0x7a>
		n = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	69db      	ldr	r3, [r3, #28]
 8012736:	4619      	mov	r1, r3
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f7ff fb27 	bl	8011d8c <move_window>
 801273e:	4603      	mov	r3, r0
 8012740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012742:	7dfb      	ldrb	r3, [r7, #23]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d11d      	bne.n	8012784 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a1b      	ldr	r3, [r3, #32]
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	2be5      	cmp	r3, #229	; 0xe5
 8012750:	d004      	beq.n	801275c <dir_alloc+0x50>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6a1b      	ldr	r3, [r3, #32]
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d107      	bne.n	801276c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	3301      	adds	r3, #1
 8012760:	613b      	str	r3, [r7, #16]
 8012762:	693a      	ldr	r2, [r7, #16]
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d102      	bne.n	8012770 <dir_alloc+0x64>
 801276a:	e00c      	b.n	8012786 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801276c:	2300      	movs	r3, #0
 801276e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012770:	2101      	movs	r1, #1
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ff ff05 	bl	8012582 <dir_next>
 8012778:	4603      	mov	r3, r0
 801277a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801277c:	7dfb      	ldrb	r3, [r7, #23]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d0d7      	beq.n	8012732 <dir_alloc+0x26>
 8012782:	e000      	b.n	8012786 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012784:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	2b04      	cmp	r3, #4
 801278a:	d101      	bne.n	8012790 <dir_alloc+0x84>
 801278c:	2307      	movs	r3, #7
 801278e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012790:	7dfb      	ldrb	r3, [r7, #23]
}
 8012792:	4618      	mov	r0, r3
 8012794:	3718      	adds	r7, #24
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801279a:	b580      	push	{r7, lr}
 801279c:	b084      	sub	sp, #16
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	331a      	adds	r3, #26
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff f80d 	bl	80117c8 <ld_word>
 80127ae:	4603      	mov	r3, r0
 80127b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b03      	cmp	r3, #3
 80127b8:	d109      	bne.n	80127ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	3314      	adds	r3, #20
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ff f802 	bl	80117c8 <ld_word>
 80127c4:	4603      	mov	r3, r0
 80127c6:	041b      	lsls	r3, r3, #16
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	4313      	orrs	r3, r2
 80127cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80127ce:	68fb      	ldr	r3, [r7, #12]
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	331a      	adds	r3, #26
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	b292      	uxth	r2, r2
 80127ec:	4611      	mov	r1, r2
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7ff f825 	bl	801183e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	d109      	bne.n	8012810 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f103 0214 	add.w	r2, r3, #20
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	0c1b      	lsrs	r3, r3, #16
 8012806:	b29b      	uxth	r3, r3
 8012808:	4619      	mov	r1, r3
 801280a:	4610      	mov	r0, r2
 801280c:	f7ff f817 	bl	801183e <st_word>
	}
}
 8012810:	bf00      	nop
 8012812:	3710      	adds	r7, #16
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b086      	sub	sp, #24
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012822:	2304      	movs	r3, #4
 8012824:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801282c:	e03c      	b.n	80128a8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	69db      	ldr	r3, [r3, #28]
 8012832:	4619      	mov	r1, r3
 8012834:	6938      	ldr	r0, [r7, #16]
 8012836:	f7ff faa9 	bl	8011d8c <move_window>
 801283a:	4603      	mov	r3, r0
 801283c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801283e:	7dfb      	ldrb	r3, [r7, #23]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d136      	bne.n	80128b2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6a1b      	ldr	r3, [r3, #32]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801284c:	7bfb      	ldrb	r3, [r7, #15]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012852:	2304      	movs	r3, #4
 8012854:	75fb      	strb	r3, [r7, #23]
 8012856:	e031      	b.n	80128bc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6a1b      	ldr	r3, [r3, #32]
 801285c:	330b      	adds	r3, #11
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012864:	73bb      	strb	r3, [r7, #14]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7bba      	ldrb	r2, [r7, #14]
 801286a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801286c:	7bfb      	ldrb	r3, [r7, #15]
 801286e:	2be5      	cmp	r3, #229	; 0xe5
 8012870:	d011      	beq.n	8012896 <dir_read+0x7e>
 8012872:	7bfb      	ldrb	r3, [r7, #15]
 8012874:	2b2e      	cmp	r3, #46	; 0x2e
 8012876:	d00e      	beq.n	8012896 <dir_read+0x7e>
 8012878:	7bbb      	ldrb	r3, [r7, #14]
 801287a:	2b0f      	cmp	r3, #15
 801287c:	d00b      	beq.n	8012896 <dir_read+0x7e>
 801287e:	7bbb      	ldrb	r3, [r7, #14]
 8012880:	f023 0320 	bic.w	r3, r3, #32
 8012884:	2b08      	cmp	r3, #8
 8012886:	bf0c      	ite	eq
 8012888:	2301      	moveq	r3, #1
 801288a:	2300      	movne	r3, #0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	461a      	mov	r2, r3
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	4293      	cmp	r3, r2
 8012894:	d00f      	beq.n	80128b6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012896:	2100      	movs	r1, #0
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7ff fe72 	bl	8012582 <dir_next>
 801289e:	4603      	mov	r3, r0
 80128a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d108      	bne.n	80128ba <dir_read+0xa2>
	while (dp->sect) {
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	69db      	ldr	r3, [r3, #28]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d1be      	bne.n	801282e <dir_read+0x16>
 80128b0:	e004      	b.n	80128bc <dir_read+0xa4>
		if (res != FR_OK) break;
 80128b2:	bf00      	nop
 80128b4:	e002      	b.n	80128bc <dir_read+0xa4>
				break;
 80128b6:	bf00      	nop
 80128b8:	e000      	b.n	80128bc <dir_read+0xa4>
		if (res != FR_OK) break;
 80128ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80128bc:	7dfb      	ldrb	r3, [r7, #23]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d002      	beq.n	80128c8 <dir_read+0xb0>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	61da      	str	r2, [r3, #28]
	return res;
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3718      	adds	r7, #24
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b086      	sub	sp, #24
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80128e0:	2100      	movs	r1, #0
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fdd2 	bl	801248c <dir_sdi>
 80128e8:	4603      	mov	r3, r0
 80128ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <dir_find+0x24>
 80128f2:	7dfb      	ldrb	r3, [r7, #23]
 80128f4:	e03e      	b.n	8012974 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	69db      	ldr	r3, [r3, #28]
 80128fa:	4619      	mov	r1, r3
 80128fc:	6938      	ldr	r0, [r7, #16]
 80128fe:	f7ff fa45 	bl	8011d8c <move_window>
 8012902:	4603      	mov	r3, r0
 8012904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012906:	7dfb      	ldrb	r3, [r7, #23]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d12f      	bne.n	801296c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6a1b      	ldr	r3, [r3, #32]
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012914:	7bfb      	ldrb	r3, [r7, #15]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d102      	bne.n	8012920 <dir_find+0x4e>
 801291a:	2304      	movs	r3, #4
 801291c:	75fb      	strb	r3, [r7, #23]
 801291e:	e028      	b.n	8012972 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6a1b      	ldr	r3, [r3, #32]
 8012924:	330b      	adds	r3, #11
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801292c:	b2da      	uxtb	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6a1b      	ldr	r3, [r3, #32]
 8012936:	330b      	adds	r3, #11
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	f003 0308 	and.w	r3, r3, #8
 801293e:	2b00      	cmp	r3, #0
 8012940:	d10a      	bne.n	8012958 <dir_find+0x86>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6a18      	ldr	r0, [r3, #32]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3324      	adds	r3, #36	; 0x24
 801294a:	220b      	movs	r2, #11
 801294c:	4619      	mov	r1, r3
 801294e:	f7fe fff9 	bl	8011944 <mem_cmp>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00b      	beq.n	8012970 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012958:	2100      	movs	r1, #0
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7ff fe11 	bl	8012582 <dir_next>
 8012960:	4603      	mov	r3, r0
 8012962:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012964:	7dfb      	ldrb	r3, [r7, #23]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0c5      	beq.n	80128f6 <dir_find+0x24>
 801296a:	e002      	b.n	8012972 <dir_find+0xa0>
		if (res != FR_OK) break;
 801296c:	bf00      	nop
 801296e:	e000      	b.n	8012972 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012970:	bf00      	nop

	return res;
 8012972:	7dfb      	ldrb	r3, [r7, #23]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3718      	adds	r7, #24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801298a:	2101      	movs	r1, #1
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff febd 	bl	801270c <dir_alloc>
 8012992:	4603      	mov	r3, r0
 8012994:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012996:	7bfb      	ldrb	r3, [r7, #15]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d11c      	bne.n	80129d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	69db      	ldr	r3, [r3, #28]
 80129a0:	4619      	mov	r1, r3
 80129a2:	68b8      	ldr	r0, [r7, #8]
 80129a4:	f7ff f9f2 	bl	8011d8c <move_window>
 80129a8:	4603      	mov	r3, r0
 80129aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d111      	bne.n	80129d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	2220      	movs	r2, #32
 80129b8:	2100      	movs	r1, #0
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe ffa7 	bl	801190e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6a18      	ldr	r0, [r3, #32]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3324      	adds	r3, #36	; 0x24
 80129c8:	220b      	movs	r2, #11
 80129ca:	4619      	mov	r1, r3
 80129cc:	f7fe ff7e 	bl	80118cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	2201      	movs	r2, #1
 80129d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80129d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	2200      	movs	r2, #0
 80129ee:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	69db      	ldr	r3, [r3, #28]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d04e      	beq.n	8012a96 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80129f8:	2300      	movs	r3, #0
 80129fa:	613b      	str	r3, [r7, #16]
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012a00:	e021      	b.n	8012a46 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6a1a      	ldr	r2, [r3, #32]
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	1c59      	adds	r1, r3, #1
 8012a0a:	6179      	str	r1, [r7, #20]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012a12:	7bfb      	ldrb	r3, [r7, #15]
 8012a14:	2b20      	cmp	r3, #32
 8012a16:	d100      	bne.n	8012a1a <get_fileinfo+0x3a>
 8012a18:	e015      	b.n	8012a46 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012a1a:	7bfb      	ldrb	r3, [r7, #15]
 8012a1c:	2b05      	cmp	r3, #5
 8012a1e:	d101      	bne.n	8012a24 <get_fileinfo+0x44>
 8012a20:	23e5      	movs	r3, #229	; 0xe5
 8012a22:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	2b09      	cmp	r3, #9
 8012a28:	d106      	bne.n	8012a38 <get_fileinfo+0x58>
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	1c5a      	adds	r2, r3, #1
 8012a2e:	613a      	str	r2, [r7, #16]
 8012a30:	683a      	ldr	r2, [r7, #0]
 8012a32:	4413      	add	r3, r2
 8012a34:	222e      	movs	r2, #46	; 0x2e
 8012a36:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	613a      	str	r2, [r7, #16]
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	4413      	add	r3, r2
 8012a42:	7bfa      	ldrb	r2, [r7, #15]
 8012a44:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b0a      	cmp	r3, #10
 8012a4a:	d9da      	bls.n	8012a02 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012a4c:	683a      	ldr	r2, [r7, #0]
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	4413      	add	r3, r2
 8012a52:	3309      	adds	r3, #9
 8012a54:	2200      	movs	r2, #0
 8012a56:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6a1b      	ldr	r3, [r3, #32]
 8012a5c:	7ada      	ldrb	r2, [r3, #11]
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6a1b      	ldr	r3, [r3, #32]
 8012a66:	331c      	adds	r3, #28
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7fe fec5 	bl	80117f8 <ld_dword>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6a1b      	ldr	r3, [r3, #32]
 8012a78:	3316      	adds	r3, #22
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fe febc 	bl	80117f8 <ld_dword>
 8012a80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	80da      	strh	r2, [r3, #6]
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	0c1b      	lsrs	r3, r3, #16
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	809a      	strh	r2, [r3, #4]
 8012a94:	e000      	b.n	8012a98 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012a96:	bf00      	nop
}
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
	...

08012aa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b088      	sub	sp, #32
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	60fb      	str	r3, [r7, #12]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	3324      	adds	r3, #36	; 0x24
 8012ab4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012ab6:	220b      	movs	r2, #11
 8012ab8:	2120      	movs	r1, #32
 8012aba:	68b8      	ldr	r0, [r7, #8]
 8012abc:	f7fe ff27 	bl	801190e <mem_set>
	si = i = 0; ni = 8;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	613b      	str	r3, [r7, #16]
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	61fb      	str	r3, [r7, #28]
 8012ac8:	2308      	movs	r3, #8
 8012aca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	1c5a      	adds	r2, r3, #1
 8012ad0:	61fa      	str	r2, [r7, #28]
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ada:	7efb      	ldrb	r3, [r7, #27]
 8012adc:	2b20      	cmp	r3, #32
 8012ade:	d94e      	bls.n	8012b7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ae0:	7efb      	ldrb	r3, [r7, #27]
 8012ae2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ae4:	d006      	beq.n	8012af4 <create_name+0x54>
 8012ae6:	7efb      	ldrb	r3, [r7, #27]
 8012ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8012aea:	d110      	bne.n	8012b0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012aec:	e002      	b.n	8012af4 <create_name+0x54>
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	3301      	adds	r3, #1
 8012af2:	61fb      	str	r3, [r7, #28]
 8012af4:	68fa      	ldr	r2, [r7, #12]
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	4413      	add	r3, r2
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	2b2f      	cmp	r3, #47	; 0x2f
 8012afe:	d0f6      	beq.n	8012aee <create_name+0x4e>
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	4413      	add	r3, r2
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b5c      	cmp	r3, #92	; 0x5c
 8012b0a:	d0f0      	beq.n	8012aee <create_name+0x4e>
			break;
 8012b0c:	e038      	b.n	8012b80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b0e:	7efb      	ldrb	r3, [r7, #27]
 8012b10:	2b2e      	cmp	r3, #46	; 0x2e
 8012b12:	d003      	beq.n	8012b1c <create_name+0x7c>
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d30c      	bcc.n	8012b36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	2b0b      	cmp	r3, #11
 8012b20:	d002      	beq.n	8012b28 <create_name+0x88>
 8012b22:	7efb      	ldrb	r3, [r7, #27]
 8012b24:	2b2e      	cmp	r3, #46	; 0x2e
 8012b26:	d001      	beq.n	8012b2c <create_name+0x8c>
 8012b28:	2306      	movs	r3, #6
 8012b2a:	e044      	b.n	8012bb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012b2c:	2308      	movs	r3, #8
 8012b2e:	613b      	str	r3, [r7, #16]
 8012b30:	230b      	movs	r3, #11
 8012b32:	617b      	str	r3, [r7, #20]
			continue;
 8012b34:	e022      	b.n	8012b7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	da04      	bge.n	8012b48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b3e:	7efb      	ldrb	r3, [r7, #27]
 8012b40:	3b80      	subs	r3, #128	; 0x80
 8012b42:	4a1f      	ldr	r2, [pc, #124]	; (8012bc0 <create_name+0x120>)
 8012b44:	5cd3      	ldrb	r3, [r2, r3]
 8012b46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b48:	7efb      	ldrb	r3, [r7, #27]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	481d      	ldr	r0, [pc, #116]	; (8012bc4 <create_name+0x124>)
 8012b4e:	f7fe ff20 	bl	8011992 <chk_chr>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <create_name+0xbc>
 8012b58:	2306      	movs	r3, #6
 8012b5a:	e02c      	b.n	8012bb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b5c:	7efb      	ldrb	r3, [r7, #27]
 8012b5e:	2b60      	cmp	r3, #96	; 0x60
 8012b60:	d905      	bls.n	8012b6e <create_name+0xce>
 8012b62:	7efb      	ldrb	r3, [r7, #27]
 8012b64:	2b7a      	cmp	r3, #122	; 0x7a
 8012b66:	d802      	bhi.n	8012b6e <create_name+0xce>
 8012b68:	7efb      	ldrb	r3, [r7, #27]
 8012b6a:	3b20      	subs	r3, #32
 8012b6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	1c5a      	adds	r2, r3, #1
 8012b72:	613a      	str	r2, [r7, #16]
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	4413      	add	r3, r2
 8012b78:	7efa      	ldrb	r2, [r7, #27]
 8012b7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012b7c:	e7a6      	b.n	8012acc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	441a      	add	r2, r3
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d101      	bne.n	8012b94 <create_name+0xf4>
 8012b90:	2306      	movs	r3, #6
 8012b92:	e010      	b.n	8012bb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2be5      	cmp	r3, #229	; 0xe5
 8012b9a:	d102      	bne.n	8012ba2 <create_name+0x102>
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2205      	movs	r2, #5
 8012ba0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ba2:	7efb      	ldrb	r3, [r7, #27]
 8012ba4:	2b20      	cmp	r3, #32
 8012ba6:	d801      	bhi.n	8012bac <create_name+0x10c>
 8012ba8:	2204      	movs	r2, #4
 8012baa:	e000      	b.n	8012bae <create_name+0x10e>
 8012bac:	2200      	movs	r2, #0
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	330b      	adds	r3, #11
 8012bb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012bb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3720      	adds	r7, #32
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	08020920 	.word	0x08020920
 8012bc4:	08020730 	.word	0x08020730

08012bc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b086      	sub	sp, #24
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012bdc:	e002      	b.n	8012be4 <follow_path+0x1c>
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	3301      	adds	r3, #1
 8012be2:	603b      	str	r3, [r7, #0]
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b2f      	cmp	r3, #47	; 0x2f
 8012bea:	d0f8      	beq.n	8012bde <follow_path+0x16>
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8012bf2:	d0f4      	beq.n	8012bde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	2b1f      	cmp	r3, #31
 8012c00:	d80a      	bhi.n	8012c18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2280      	movs	r2, #128	; 0x80
 8012c06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f7ff fc3d 	bl	801248c <dir_sdi>
 8012c12:	4603      	mov	r3, r0
 8012c14:	75fb      	strb	r3, [r7, #23]
 8012c16:	e043      	b.n	8012ca0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c18:	463b      	mov	r3, r7
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff ff3f 	bl	8012aa0 <create_name>
 8012c22:	4603      	mov	r3, r0
 8012c24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c26:	7dfb      	ldrb	r3, [r7, #23]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d134      	bne.n	8012c96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f7ff fe50 	bl	80128d2 <dir_find>
 8012c32:	4603      	mov	r3, r0
 8012c34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c3e:	7dfb      	ldrb	r3, [r7, #23]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00a      	beq.n	8012c5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c44:	7dfb      	ldrb	r3, [r7, #23]
 8012c46:	2b04      	cmp	r3, #4
 8012c48:	d127      	bne.n	8012c9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c4a:	7afb      	ldrb	r3, [r7, #11]
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d122      	bne.n	8012c9a <follow_path+0xd2>
 8012c54:	2305      	movs	r3, #5
 8012c56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012c58:	e01f      	b.n	8012c9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c5a:	7afb      	ldrb	r3, [r7, #11]
 8012c5c:	f003 0304 	and.w	r3, r3, #4
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d11c      	bne.n	8012c9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	799b      	ldrb	r3, [r3, #6]
 8012c68:	f003 0310 	and.w	r3, r3, #16
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d102      	bne.n	8012c76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012c70:	2305      	movs	r3, #5
 8012c72:	75fb      	strb	r3, [r7, #23]
 8012c74:	e014      	b.n	8012ca0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	695b      	ldr	r3, [r3, #20]
 8012c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c84:	4413      	add	r3, r2
 8012c86:	4619      	mov	r1, r3
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7ff fd86 	bl	801279a <ld_clust>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c94:	e7c0      	b.n	8012c18 <follow_path+0x50>
			if (res != FR_OK) break;
 8012c96:	bf00      	nop
 8012c98:	e002      	b.n	8012ca0 <follow_path+0xd8>
				break;
 8012c9a:	bf00      	nop
 8012c9c:	e000      	b.n	8012ca0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c9e:	bf00      	nop
			}
		}
	}

	return res;
 8012ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012caa:	b480      	push	{r7}
 8012cac:	b087      	sub	sp, #28
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d031      	beq.n	8012d24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	617b      	str	r3, [r7, #20]
 8012cc6:	e002      	b.n	8012cce <get_ldnumber+0x24>
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	617b      	str	r3, [r7, #20]
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2b20      	cmp	r3, #32
 8012cd4:	d903      	bls.n	8012cde <get_ldnumber+0x34>
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b3a      	cmp	r3, #58	; 0x3a
 8012cdc:	d1f4      	bne.n	8012cc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	2b3a      	cmp	r3, #58	; 0x3a
 8012ce4:	d11c      	bne.n	8012d20 <get_ldnumber+0x76>
			tp = *path;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	1c5a      	adds	r2, r3, #1
 8012cf0:	60fa      	str	r2, [r7, #12]
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	3b30      	subs	r3, #48	; 0x30
 8012cf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2b09      	cmp	r3, #9
 8012cfc:	d80e      	bhi.n	8012d1c <get_ldnumber+0x72>
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d10a      	bne.n	8012d1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d107      	bne.n	8012d1c <get_ldnumber+0x72>
					vol = (int)i;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	3301      	adds	r3, #1
 8012d14:	617b      	str	r3, [r7, #20]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	697a      	ldr	r2, [r7, #20]
 8012d1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	e002      	b.n	8012d26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d20:	2300      	movs	r3, #0
 8012d22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d24:	693b      	ldr	r3, [r7, #16]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	371c      	adds	r7, #28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
	...

08012d34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2200      	movs	r2, #0
 8012d42:	70da      	strb	r2, [r3, #3]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012d4c:	6839      	ldr	r1, [r7, #0]
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7ff f81c 	bl	8011d8c <move_window>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d001      	beq.n	8012d5e <check_fs+0x2a>
 8012d5a:	2304      	movs	r3, #4
 8012d5c:	e038      	b.n	8012dd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3334      	adds	r3, #52	; 0x34
 8012d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fe fd2e 	bl	80117c8 <ld_word>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d001      	beq.n	8012d7c <check_fs+0x48>
 8012d78:	2303      	movs	r3, #3
 8012d7a:	e029      	b.n	8012dd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d82:	2be9      	cmp	r3, #233	; 0xe9
 8012d84:	d009      	beq.n	8012d9a <check_fs+0x66>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d8c:	2beb      	cmp	r3, #235	; 0xeb
 8012d8e:	d11e      	bne.n	8012dce <check_fs+0x9a>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012d96:	2b90      	cmp	r3, #144	; 0x90
 8012d98:	d119      	bne.n	8012dce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	3334      	adds	r3, #52	; 0x34
 8012d9e:	3336      	adds	r3, #54	; 0x36
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe fd29 	bl	80117f8 <ld_dword>
 8012da6:	4603      	mov	r3, r0
 8012da8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012dac:	4a0a      	ldr	r2, [pc, #40]	; (8012dd8 <check_fs+0xa4>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d101      	bne.n	8012db6 <check_fs+0x82>
 8012db2:	2300      	movs	r3, #0
 8012db4:	e00c      	b.n	8012dd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	3334      	adds	r3, #52	; 0x34
 8012dba:	3352      	adds	r3, #82	; 0x52
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7fe fd1b 	bl	80117f8 <ld_dword>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	4a05      	ldr	r2, [pc, #20]	; (8012ddc <check_fs+0xa8>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d101      	bne.n	8012dce <check_fs+0x9a>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	e000      	b.n	8012dd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012dce:	2302      	movs	r3, #2
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	00544146 	.word	0x00544146
 8012ddc:	33544146 	.word	0x33544146

08012de0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b096      	sub	sp, #88	; 0x58
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	4613      	mov	r3, r2
 8012dec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2200      	movs	r2, #0
 8012df2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012df4:	68f8      	ldr	r0, [r7, #12]
 8012df6:	f7ff ff58 	bl	8012caa <get_ldnumber>
 8012dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	da01      	bge.n	8012e06 <find_volume+0x26>
 8012e02:	230b      	movs	r3, #11
 8012e04:	e236      	b.n	8013274 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e06:	4aac      	ldr	r2, [pc, #688]	; (80130b8 <find_volume+0x2d8>)
 8012e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d101      	bne.n	8012e1a <find_volume+0x3a>
 8012e16:	230c      	movs	r3, #12
 8012e18:	e22c      	b.n	8013274 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8012e1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e1c:	f7fe fdd4 	bl	80119c8 <lock_fs>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d101      	bne.n	8012e2a <find_volume+0x4a>
 8012e26:	230f      	movs	r3, #15
 8012e28:	e224      	b.n	8013274 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e30:	79fb      	ldrb	r3, [r7, #7]
 8012e32:	f023 0301 	bic.w	r3, r3, #1
 8012e36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01a      	beq.n	8012e76 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	785b      	ldrb	r3, [r3, #1]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7fe fc21 	bl	801168c <disk_status>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e54:	f003 0301 	and.w	r3, r3, #1
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d10c      	bne.n	8012e76 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012e5c:	79fb      	ldrb	r3, [r7, #7]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d007      	beq.n	8012e72 <find_volume+0x92>
 8012e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e66:	f003 0304 	and.w	r3, r3, #4
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8012e6e:	230a      	movs	r3, #10
 8012e70:	e200      	b.n	8013274 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8012e72:	2300      	movs	r3, #0
 8012e74:	e1fe      	b.n	8013274 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e78:	2200      	movs	r2, #0
 8012e7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e86:	785b      	ldrb	r3, [r3, #1]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fe fc19 	bl	80116c0 <disk_initialize>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ea0:	2303      	movs	r3, #3
 8012ea2:	e1e7      	b.n	8013274 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ea4:	79fb      	ldrb	r3, [r7, #7]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d007      	beq.n	8012eba <find_volume+0xda>
 8012eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eae:	f003 0304 	and.w	r3, r3, #4
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012eb6:	230a      	movs	r3, #10
 8012eb8:	e1dc      	b.n	8013274 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ec2:	f7ff ff37 	bl	8012d34 <check_fs>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d14b      	bne.n	8012f6c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8012ed8:	e01f      	b.n	8012f1a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee2:	011b      	lsls	r3, r3, #4
 8012ee4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012ee8:	4413      	add	r3, r2
 8012eea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eee:	3304      	adds	r3, #4
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d006      	beq.n	8012f04 <find_volume+0x124>
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef8:	3308      	adds	r3, #8
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fe fc7c 	bl	80117f8 <ld_dword>
 8012f00:	4602      	mov	r2, r0
 8012f02:	e000      	b.n	8012f06 <find_volume+0x126>
 8012f04:	2200      	movs	r2, #0
 8012f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012f0e:	440b      	add	r3, r1
 8012f10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f16:	3301      	adds	r3, #1
 8012f18:	643b      	str	r3, [r7, #64]	; 0x40
 8012f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f1c:	2b03      	cmp	r3, #3
 8012f1e:	d9dc      	bls.n	8012eda <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012f20:	2300      	movs	r3, #0
 8012f22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d002      	beq.n	8012f30 <find_volume+0x150>
 8012f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012f38:	4413      	add	r3, r2
 8012f3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012f3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d005      	beq.n	8012f52 <find_volume+0x172>
 8012f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f4a:	f7ff fef3 	bl	8012d34 <check_fs>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	e000      	b.n	8012f54 <find_volume+0x174>
 8012f52:	2303      	movs	r3, #3
 8012f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d905      	bls.n	8012f6c <find_volume+0x18c>
 8012f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f62:	3301      	adds	r3, #1
 8012f64:	643b      	str	r3, [r7, #64]	; 0x40
 8012f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f68:	2b03      	cmp	r3, #3
 8012f6a:	d9e1      	bls.n	8012f30 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f70:	2b04      	cmp	r3, #4
 8012f72:	d101      	bne.n	8012f78 <find_volume+0x198>
 8012f74:	2301      	movs	r3, #1
 8012f76:	e17d      	b.n	8013274 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d901      	bls.n	8012f84 <find_volume+0x1a4>
 8012f80:	230d      	movs	r3, #13
 8012f82:	e177      	b.n	8013274 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	3334      	adds	r3, #52	; 0x34
 8012f88:	330b      	adds	r3, #11
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fe fc1c 	bl	80117c8 <ld_word>
 8012f90:	4603      	mov	r3, r0
 8012f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f96:	d001      	beq.n	8012f9c <find_volume+0x1bc>
 8012f98:	230d      	movs	r3, #13
 8012f9a:	e16b      	b.n	8013274 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9e:	3334      	adds	r3, #52	; 0x34
 8012fa0:	3316      	adds	r3, #22
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fe fc10 	bl	80117c8 <ld_word>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d106      	bne.n	8012fc0 <find_volume+0x1e0>
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb4:	3334      	adds	r3, #52	; 0x34
 8012fb6:	3324      	adds	r3, #36	; 0x24
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7fe fc1d 	bl	80117f8 <ld_dword>
 8012fbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012fc4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd2:	789b      	ldrb	r3, [r3, #2]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d005      	beq.n	8012fe4 <find_volume+0x204>
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	789b      	ldrb	r3, [r3, #2]
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d001      	beq.n	8012fe4 <find_volume+0x204>
 8012fe0:	230d      	movs	r3, #13
 8012fe2:	e147      	b.n	8013274 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	789b      	ldrb	r3, [r3, #2]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fec:	fb02 f303 	mul.w	r3, r2, r3
 8012ff0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012ff8:	b29a      	uxth	r2, r3
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	895b      	ldrh	r3, [r3, #10]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d008      	beq.n	8013018 <find_volume+0x238>
 8013006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013008:	895b      	ldrh	r3, [r3, #10]
 801300a:	461a      	mov	r2, r3
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	895b      	ldrh	r3, [r3, #10]
 8013010:	3b01      	subs	r3, #1
 8013012:	4013      	ands	r3, r2
 8013014:	2b00      	cmp	r3, #0
 8013016:	d001      	beq.n	801301c <find_volume+0x23c>
 8013018:	230d      	movs	r3, #13
 801301a:	e12b      	b.n	8013274 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	3334      	adds	r3, #52	; 0x34
 8013020:	3311      	adds	r3, #17
 8013022:	4618      	mov	r0, r3
 8013024:	f7fe fbd0 	bl	80117c8 <ld_word>
 8013028:	4603      	mov	r3, r0
 801302a:	461a      	mov	r2, r3
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013032:	891b      	ldrh	r3, [r3, #8]
 8013034:	f003 030f 	and.w	r3, r3, #15
 8013038:	b29b      	uxth	r3, r3
 801303a:	2b00      	cmp	r3, #0
 801303c:	d001      	beq.n	8013042 <find_volume+0x262>
 801303e:	230d      	movs	r3, #13
 8013040:	e118      	b.n	8013274 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013044:	3334      	adds	r3, #52	; 0x34
 8013046:	3313      	adds	r3, #19
 8013048:	4618      	mov	r0, r3
 801304a:	f7fe fbbd 	bl	80117c8 <ld_word>
 801304e:	4603      	mov	r3, r0
 8013050:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013054:	2b00      	cmp	r3, #0
 8013056:	d106      	bne.n	8013066 <find_volume+0x286>
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	3334      	adds	r3, #52	; 0x34
 801305c:	3320      	adds	r3, #32
 801305e:	4618      	mov	r0, r3
 8013060:	f7fe fbca 	bl	80117f8 <ld_dword>
 8013064:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013068:	3334      	adds	r3, #52	; 0x34
 801306a:	330e      	adds	r3, #14
 801306c:	4618      	mov	r0, r3
 801306e:	f7fe fbab 	bl	80117c8 <ld_word>
 8013072:	4603      	mov	r3, r0
 8013074:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013078:	2b00      	cmp	r3, #0
 801307a:	d101      	bne.n	8013080 <find_volume+0x2a0>
 801307c:	230d      	movs	r3, #13
 801307e:	e0f9      	b.n	8013274 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013080:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013084:	4413      	add	r3, r2
 8013086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013088:	8912      	ldrh	r2, [r2, #8]
 801308a:	0912      	lsrs	r2, r2, #4
 801308c:	b292      	uxth	r2, r2
 801308e:	4413      	add	r3, r2
 8013090:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013096:	429a      	cmp	r2, r3
 8013098:	d201      	bcs.n	801309e <find_volume+0x2be>
 801309a:	230d      	movs	r3, #13
 801309c:	e0ea      	b.n	8013274 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801309e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80130a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130a6:	8952      	ldrh	r2, [r2, #10]
 80130a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80130ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d103      	bne.n	80130bc <find_volume+0x2dc>
 80130b4:	230d      	movs	r3, #13
 80130b6:	e0dd      	b.n	8013274 <find_volume+0x494>
 80130b8:	200007dc 	.word	0x200007dc
		fmt = FS_FAT32;
 80130bc:	2303      	movs	r3, #3
 80130be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80130c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d802      	bhi.n	80130d2 <find_volume+0x2f2>
 80130cc:	2302      	movs	r3, #2
 80130ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80130d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80130d8:	4293      	cmp	r3, r2
 80130da:	d802      	bhi.n	80130e2 <find_volume+0x302>
 80130dc:	2301      	movs	r3, #1
 80130de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	1c9a      	adds	r2, r3, #2
 80130e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80130ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130ee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80130f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130f4:	441a      	add	r2, r3
 80130f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80130fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fe:	441a      	add	r2, r3
 8013100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013102:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013108:	2b03      	cmp	r3, #3
 801310a:	d11e      	bne.n	801314a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	3334      	adds	r3, #52	; 0x34
 8013110:	332a      	adds	r3, #42	; 0x2a
 8013112:	4618      	mov	r0, r3
 8013114:	f7fe fb58 	bl	80117c8 <ld_word>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d001      	beq.n	8013122 <find_volume+0x342>
 801311e:	230d      	movs	r3, #13
 8013120:	e0a8      	b.n	8013274 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013124:	891b      	ldrh	r3, [r3, #8]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <find_volume+0x34e>
 801312a:	230d      	movs	r3, #13
 801312c:	e0a2      	b.n	8013274 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013130:	3334      	adds	r3, #52	; 0x34
 8013132:	332c      	adds	r3, #44	; 0x2c
 8013134:	4618      	mov	r0, r3
 8013136:	f7fe fb5f 	bl	80117f8 <ld_dword>
 801313a:	4602      	mov	r2, r0
 801313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013142:	699b      	ldr	r3, [r3, #24]
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	647b      	str	r3, [r7, #68]	; 0x44
 8013148:	e01f      	b.n	801318a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314c:	891b      	ldrh	r3, [r3, #8]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <find_volume+0x376>
 8013152:	230d      	movs	r3, #13
 8013154:	e08e      	b.n	8013274 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801315c:	441a      	add	r2, r3
 801315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013160:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013166:	2b02      	cmp	r3, #2
 8013168:	d103      	bne.n	8013172 <find_volume+0x392>
 801316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316c:	699b      	ldr	r3, [r3, #24]
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	e00a      	b.n	8013188 <find_volume+0x3a8>
 8013172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013174:	699a      	ldr	r2, [r3, #24]
 8013176:	4613      	mov	r3, r2
 8013178:	005b      	lsls	r3, r3, #1
 801317a:	4413      	add	r3, r2
 801317c:	085a      	lsrs	r2, r3, #1
 801317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013180:	699b      	ldr	r3, [r3, #24]
 8013182:	f003 0301 	and.w	r3, r3, #1
 8013186:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013188:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318c:	69da      	ldr	r2, [r3, #28]
 801318e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013190:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013194:	0a5b      	lsrs	r3, r3, #9
 8013196:	429a      	cmp	r2, r3
 8013198:	d201      	bcs.n	801319e <find_volume+0x3be>
 801319a:	230d      	movs	r3, #13
 801319c:	e06a      	b.n	8013274 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	f04f 32ff 	mov.w	r2, #4294967295
 80131a4:	615a      	str	r2, [r3, #20]
 80131a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a8:	695a      	ldr	r2, [r3, #20]
 80131aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80131ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b0:	2280      	movs	r2, #128	; 0x80
 80131b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80131b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131b8:	2b03      	cmp	r3, #3
 80131ba:	d149      	bne.n	8013250 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80131bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131be:	3334      	adds	r3, #52	; 0x34
 80131c0:	3330      	adds	r3, #48	; 0x30
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7fe fb00 	bl	80117c8 <ld_word>
 80131c8:	4603      	mov	r3, r0
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d140      	bne.n	8013250 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80131ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131d0:	3301      	adds	r3, #1
 80131d2:	4619      	mov	r1, r3
 80131d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131d6:	f7fe fdd9 	bl	8011d8c <move_window>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d137      	bne.n	8013250 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80131e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e2:	2200      	movs	r2, #0
 80131e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80131e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e8:	3334      	adds	r3, #52	; 0x34
 80131ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fe faea 	bl	80117c8 <ld_word>
 80131f4:	4603      	mov	r3, r0
 80131f6:	461a      	mov	r2, r3
 80131f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d127      	bne.n	8013250 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013202:	3334      	adds	r3, #52	; 0x34
 8013204:	4618      	mov	r0, r3
 8013206:	f7fe faf7 	bl	80117f8 <ld_dword>
 801320a:	4603      	mov	r3, r0
 801320c:	4a1b      	ldr	r2, [pc, #108]	; (801327c <find_volume+0x49c>)
 801320e:	4293      	cmp	r3, r2
 8013210:	d11e      	bne.n	8013250 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013214:	3334      	adds	r3, #52	; 0x34
 8013216:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801321a:	4618      	mov	r0, r3
 801321c:	f7fe faec 	bl	80117f8 <ld_dword>
 8013220:	4603      	mov	r3, r0
 8013222:	4a17      	ldr	r2, [pc, #92]	; (8013280 <find_volume+0x4a0>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d113      	bne.n	8013250 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	3334      	adds	r3, #52	; 0x34
 801322c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013230:	4618      	mov	r0, r3
 8013232:	f7fe fae1 	bl	80117f8 <ld_dword>
 8013236:	4602      	mov	r2, r0
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	3334      	adds	r3, #52	; 0x34
 8013240:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013244:	4618      	mov	r0, r3
 8013246:	f7fe fad7 	bl	80117f8 <ld_dword>
 801324a:	4602      	mov	r2, r0
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013256:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <find_volume+0x4a4>)
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	3301      	adds	r3, #1
 801325e:	b29a      	uxth	r2, r3
 8013260:	4b08      	ldr	r3, [pc, #32]	; (8013284 <find_volume+0x4a4>)
 8013262:	801a      	strh	r2, [r3, #0]
 8013264:	4b07      	ldr	r3, [pc, #28]	; (8013284 <find_volume+0x4a4>)
 8013266:	881a      	ldrh	r2, [r3, #0]
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801326c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801326e:	f7fe fd25 	bl	8011cbc <clear_lock>
#endif
	return FR_OK;
 8013272:	2300      	movs	r3, #0
}
 8013274:	4618      	mov	r0, r3
 8013276:	3758      	adds	r7, #88	; 0x58
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	41615252 	.word	0x41615252
 8013280:	61417272 	.word	0x61417272
 8013284:	200007e0 	.word	0x200007e0

08013288 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b084      	sub	sp, #16
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013292:	2309      	movs	r3, #9
 8013294:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d02e      	beq.n	80132fa <validate+0x72>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d02a      	beq.n	80132fa <validate+0x72>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d025      	beq.n	80132fa <validate+0x72>
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	889a      	ldrh	r2, [r3, #4]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	88db      	ldrh	r3, [r3, #6]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d11e      	bne.n	80132fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fe fb81 	bl	80119c8 <lock_fs>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d014      	beq.n	80132f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	785b      	ldrb	r3, [r3, #1]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe f9da 	bl	801168c <disk_status>
 80132d8:	4603      	mov	r3, r0
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d102      	bne.n	80132e8 <validate+0x60>
				res = FR_OK;
 80132e2:	2300      	movs	r3, #0
 80132e4:	73fb      	strb	r3, [r7, #15]
 80132e6:	e008      	b.n	80132fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2100      	movs	r1, #0
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe fb80 	bl	80119f4 <unlock_fs>
 80132f4:	e001      	b.n	80132fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80132f6:	230f      	movs	r3, #15
 80132f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80132fa:	7bfb      	ldrb	r3, [r7, #15]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d102      	bne.n	8013306 <validate+0x7e>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	e000      	b.n	8013308 <validate+0x80>
 8013306:	2300      	movs	r3, #0
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	6013      	str	r3, [r2, #0]
	return res;
 801330c:	7bfb      	ldrb	r3, [r7, #15]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
	...

08013318 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b088      	sub	sp, #32
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	4613      	mov	r3, r2
 8013324:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801332a:	f107 0310 	add.w	r3, r7, #16
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fcbb 	bl	8012caa <get_ldnumber>
 8013334:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	2b00      	cmp	r3, #0
 801333a:	da01      	bge.n	8013340 <f_mount+0x28>
 801333c:	230b      	movs	r3, #11
 801333e:	e048      	b.n	80133d2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013340:	4a26      	ldr	r2, [pc, #152]	; (80133dc <f_mount+0xc4>)
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013348:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00f      	beq.n	8013370 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013350:	69b8      	ldr	r0, [r7, #24]
 8013352:	f7fe fcb3 	bl	8011cbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	4618      	mov	r0, r3
 801335c:	f001 f812 	bl	8014384 <ff_del_syncobj>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d101      	bne.n	801336a <f_mount+0x52>
 8013366:	2302      	movs	r3, #2
 8013368:	e033      	b.n	80133d2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	2200      	movs	r2, #0
 801336e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00f      	beq.n	8013396 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2200      	movs	r2, #0
 801337a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	b2da      	uxtb	r2, r3
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	330c      	adds	r3, #12
 8013384:	4619      	mov	r1, r3
 8013386:	4610      	mov	r0, r2
 8013388:	f000 ffe1 	bl	801434e <ff_cre_syncobj>
 801338c:	4603      	mov	r3, r0
 801338e:	2b00      	cmp	r3, #0
 8013390:	d101      	bne.n	8013396 <f_mount+0x7e>
 8013392:	2302      	movs	r3, #2
 8013394:	e01d      	b.n	80133d2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013396:	68fa      	ldr	r2, [r7, #12]
 8013398:	4910      	ldr	r1, [pc, #64]	; (80133dc <f_mount+0xc4>)
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d002      	beq.n	80133ac <f_mount+0x94>
 80133a6:	79fb      	ldrb	r3, [r7, #7]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d001      	beq.n	80133b0 <f_mount+0x98>
 80133ac:	2300      	movs	r3, #0
 80133ae:	e010      	b.n	80133d2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80133b0:	f107 010c 	add.w	r1, r7, #12
 80133b4:	f107 0308 	add.w	r3, r7, #8
 80133b8:	2200      	movs	r2, #0
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff fd10 	bl	8012de0 <find_volume>
 80133c0:	4603      	mov	r3, r0
 80133c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	7dfa      	ldrb	r2, [r7, #23]
 80133c8:	4611      	mov	r1, r2
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fe fb12 	bl	80119f4 <unlock_fs>
 80133d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3720      	adds	r7, #32
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	200007dc 	.word	0x200007dc

080133e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b098      	sub	sp, #96	; 0x60
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	4613      	mov	r3, r2
 80133ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <f_open+0x18>
 80133f4:	2309      	movs	r3, #9
 80133f6:	e1b4      	b.n	8013762 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013400:	79fa      	ldrb	r2, [r7, #7]
 8013402:	f107 0110 	add.w	r1, r7, #16
 8013406:	f107 0308 	add.w	r3, r7, #8
 801340a:	4618      	mov	r0, r3
 801340c:	f7ff fce8 	bl	8012de0 <find_volume>
 8013410:	4603      	mov	r3, r0
 8013412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801341a:	2b00      	cmp	r3, #0
 801341c:	f040 8191 	bne.w	8013742 <f_open+0x362>
		dj.obj.fs = fs;
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	f107 0314 	add.w	r3, r7, #20
 801342a:	4611      	mov	r1, r2
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff fbcb 	bl	8012bc8 <follow_path>
 8013432:	4603      	mov	r3, r0
 8013434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801343c:	2b00      	cmp	r3, #0
 801343e:	d11a      	bne.n	8013476 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013440:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013444:	b25b      	sxtb	r3, r3
 8013446:	2b00      	cmp	r3, #0
 8013448:	da03      	bge.n	8013452 <f_open+0x72>
				res = FR_INVALID_NAME;
 801344a:	2306      	movs	r3, #6
 801344c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013450:	e011      	b.n	8013476 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013452:	79fb      	ldrb	r3, [r7, #7]
 8013454:	f023 0301 	bic.w	r3, r3, #1
 8013458:	2b00      	cmp	r3, #0
 801345a:	bf14      	ite	ne
 801345c:	2301      	movne	r3, #1
 801345e:	2300      	moveq	r3, #0
 8013460:	b2db      	uxtb	r3, r3
 8013462:	461a      	mov	r2, r3
 8013464:	f107 0314 	add.w	r3, r7, #20
 8013468:	4611      	mov	r1, r2
 801346a:	4618      	mov	r0, r3
 801346c:	f7fe fade 	bl	8011a2c <chk_lock>
 8013470:	4603      	mov	r3, r0
 8013472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013476:	79fb      	ldrb	r3, [r7, #7]
 8013478:	f003 031c 	and.w	r3, r3, #28
 801347c:	2b00      	cmp	r3, #0
 801347e:	d07f      	beq.n	8013580 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013484:	2b00      	cmp	r3, #0
 8013486:	d017      	beq.n	80134b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801348c:	2b04      	cmp	r3, #4
 801348e:	d10e      	bne.n	80134ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013490:	f7fe fb28 	bl	8011ae4 <enq_lock>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d006      	beq.n	80134a8 <f_open+0xc8>
 801349a:	f107 0314 	add.w	r3, r7, #20
 801349e:	4618      	mov	r0, r3
 80134a0:	f7ff fa6c 	bl	801297c <dir_register>
 80134a4:	4603      	mov	r3, r0
 80134a6:	e000      	b.n	80134aa <f_open+0xca>
 80134a8:	2312      	movs	r3, #18
 80134aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	f043 0308 	orr.w	r3, r3, #8
 80134b4:	71fb      	strb	r3, [r7, #7]
 80134b6:	e010      	b.n	80134da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80134b8:	7ebb      	ldrb	r3, [r7, #26]
 80134ba:	f003 0311 	and.w	r3, r3, #17
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d003      	beq.n	80134ca <f_open+0xea>
					res = FR_DENIED;
 80134c2:	2307      	movs	r3, #7
 80134c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134c8:	e007      	b.n	80134da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	f003 0304 	and.w	r3, r3, #4
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <f_open+0xfa>
 80134d4:	2308      	movs	r3, #8
 80134d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80134da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d168      	bne.n	80135b4 <f_open+0x1d4>
 80134e2:	79fb      	ldrb	r3, [r7, #7]
 80134e4:	f003 0308 	and.w	r3, r3, #8
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d063      	beq.n	80135b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80134ec:	f7fb ff2e 	bl	800f34c <get_fattime>
 80134f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80134f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f4:	330e      	adds	r3, #14
 80134f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe f9bb 	bl	8011874 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80134fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013500:	3316      	adds	r3, #22
 8013502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013504:	4618      	mov	r0, r3
 8013506:	f7fe f9b5 	bl	8011874 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350c:	330b      	adds	r3, #11
 801350e:	2220      	movs	r2, #32
 8013510:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013516:	4611      	mov	r1, r2
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff f93e 	bl	801279a <ld_clust>
 801351e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013524:	2200      	movs	r2, #0
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff f956 	bl	80127d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801352e:	331c      	adds	r3, #28
 8013530:	2100      	movs	r1, #0
 8013532:	4618      	mov	r0, r3
 8013534:	f7fe f99e 	bl	8011874 <st_dword>
					fs->wflag = 1;
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	2201      	movs	r2, #1
 801353c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801353e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013540:	2b00      	cmp	r3, #0
 8013542:	d037      	beq.n	80135b4 <f_open+0x1d4>
						dw = fs->winsect;
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013548:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801354a:	f107 0314 	add.w	r3, r7, #20
 801354e:	2200      	movs	r2, #0
 8013550:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fe69 	bl	801222a <remove_chain>
 8013558:	4603      	mov	r3, r0
 801355a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801355e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013562:	2b00      	cmp	r3, #0
 8013564:	d126      	bne.n	80135b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fc0e 	bl	8011d8c <move_window>
 8013570:	4603      	mov	r3, r0
 8013572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801357a:	3a01      	subs	r2, #1
 801357c:	611a      	str	r2, [r3, #16]
 801357e:	e019      	b.n	80135b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013584:	2b00      	cmp	r3, #0
 8013586:	d115      	bne.n	80135b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013588:	7ebb      	ldrb	r3, [r7, #26]
 801358a:	f003 0310 	and.w	r3, r3, #16
 801358e:	2b00      	cmp	r3, #0
 8013590:	d003      	beq.n	801359a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013592:	2304      	movs	r3, #4
 8013594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013598:	e00c      	b.n	80135b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801359a:	79fb      	ldrb	r3, [r7, #7]
 801359c:	f003 0302 	and.w	r3, r3, #2
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d007      	beq.n	80135b4 <f_open+0x1d4>
 80135a4:	7ebb      	ldrb	r3, [r7, #26]
 80135a6:	f003 0301 	and.w	r3, r3, #1
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d002      	beq.n	80135b4 <f_open+0x1d4>
						res = FR_DENIED;
 80135ae:	2307      	movs	r3, #7
 80135b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80135b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d128      	bne.n	801360e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80135bc:	79fb      	ldrb	r3, [r7, #7]
 80135be:	f003 0308 	and.w	r3, r3, #8
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d003      	beq.n	80135ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80135d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	f023 0301 	bic.w	r3, r3, #1
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	bf14      	ite	ne
 80135e6:	2301      	movne	r3, #1
 80135e8:	2300      	moveq	r3, #0
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	461a      	mov	r2, r3
 80135ee:	f107 0314 	add.w	r3, r7, #20
 80135f2:	4611      	mov	r1, r2
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fe fa97 	bl	8011b28 <inc_lock>
 80135fa:	4602      	mov	r2, r0
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	691b      	ldr	r3, [r3, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <f_open+0x22e>
 8013608:	2302      	movs	r3, #2
 801360a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801360e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013612:	2b00      	cmp	r3, #0
 8013614:	f040 8095 	bne.w	8013742 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801361c:	4611      	mov	r1, r2
 801361e:	4618      	mov	r0, r3
 8013620:	f7ff f8bb 	bl	801279a <ld_clust>
 8013624:	4602      	mov	r2, r0
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801362c:	331c      	adds	r3, #28
 801362e:	4618      	mov	r0, r3
 8013630:	f7fe f8e2 	bl	80117f8 <ld_dword>
 8013634:	4602      	mov	r2, r0
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2200      	movs	r2, #0
 801363e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	88da      	ldrh	r2, [r3, #6]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	79fa      	ldrb	r2, [r7, #7]
 8013652:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2200      	movs	r2, #0
 8013658:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2200      	movs	r2, #0
 801365e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2200      	movs	r2, #0
 8013664:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3330      	adds	r3, #48	; 0x30
 801366a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801366e:	2100      	movs	r1, #0
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe f94c 	bl	801190e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	f003 0320 	and.w	r3, r3, #32
 801367c:	2b00      	cmp	r3, #0
 801367e:	d060      	beq.n	8013742 <f_open+0x362>
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d05c      	beq.n	8013742 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	68da      	ldr	r2, [r3, #12]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	895b      	ldrh	r3, [r3, #10]
 8013694:	025b      	lsls	r3, r3, #9
 8013696:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	68db      	ldr	r3, [r3, #12]
 80136a2:	657b      	str	r3, [r7, #84]	; 0x54
 80136a4:	e016      	b.n	80136d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fe fc29 	bl	8011f02 <get_fat>
 80136b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80136b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d802      	bhi.n	80136be <f_open+0x2de>
 80136b8:	2302      	movs	r3, #2
 80136ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80136be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c4:	d102      	bne.n	80136cc <f_open+0x2ec>
 80136c6:	2301      	movs	r3, #1
 80136c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80136cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	657b      	str	r3, [r7, #84]	; 0x54
 80136d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d103      	bne.n	80136e4 <f_open+0x304>
 80136dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d8e0      	bhi.n	80136a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80136e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80136ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d127      	bne.n	8013742 <f_open+0x362>
 80136f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d022      	beq.n	8013742 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013700:	4618      	mov	r0, r3
 8013702:	f7fe fbdf 	bl	8011ec4 <clust2sect>
 8013706:	6478      	str	r0, [r7, #68]	; 0x44
 8013708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801370a:	2b00      	cmp	r3, #0
 801370c:	d103      	bne.n	8013716 <f_open+0x336>
						res = FR_INT_ERR;
 801370e:	2302      	movs	r3, #2
 8013710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013714:	e015      	b.n	8013742 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013718:	0a5a      	lsrs	r2, r3, #9
 801371a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801371c:	441a      	add	r2, r3
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	7858      	ldrb	r0, [r3, #1]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6a1a      	ldr	r2, [r3, #32]
 8013730:	2301      	movs	r3, #1
 8013732:	f7fd ffeb 	bl	801170c <disk_read>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d002      	beq.n	8013742 <f_open+0x362>
 801373c:	2301      	movs	r3, #1
 801373e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013746:	2b00      	cmp	r3, #0
 8013748:	d002      	beq.n	8013750 <f_open+0x370>
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f7fe f94b 	bl	80119f4 <unlock_fs>
 801375e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013762:	4618      	mov	r0, r3
 8013764:	3760      	adds	r7, #96	; 0x60
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}

0801376a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801376a:	b580      	push	{r7, lr}
 801376c:	b08c      	sub	sp, #48	; 0x30
 801376e:	af00      	add	r7, sp, #0
 8013770:	60f8      	str	r0, [r7, #12]
 8013772:	60b9      	str	r1, [r7, #8]
 8013774:	607a      	str	r2, [r7, #4]
 8013776:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	2200      	movs	r2, #0
 8013780:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f107 0210 	add.w	r2, r7, #16
 8013788:	4611      	mov	r1, r2
 801378a:	4618      	mov	r0, r3
 801378c:	f7ff fd7c 	bl	8013288 <validate>
 8013790:	4603      	mov	r3, r0
 8013792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801379a:	2b00      	cmp	r3, #0
 801379c:	d107      	bne.n	80137ae <f_write+0x44>
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	7d5b      	ldrb	r3, [r3, #21]
 80137a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80137a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d009      	beq.n	80137c2 <f_write+0x58>
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80137b4:	4611      	mov	r1, r2
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fe f91c 	bl	80119f4 <unlock_fs>
 80137bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137c0:	e173      	b.n	8013aaa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	7d1b      	ldrb	r3, [r3, #20]
 80137c6:	f003 0302 	and.w	r3, r3, #2
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d106      	bne.n	80137dc <f_write+0x72>
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	2107      	movs	r1, #7
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fe f90e 	bl	80119f4 <unlock_fs>
 80137d8:	2307      	movs	r3, #7
 80137da:	e166      	b.n	8013aaa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	699a      	ldr	r2, [r3, #24]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	441a      	add	r2, r3
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	699b      	ldr	r3, [r3, #24]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	f080 814b 	bcs.w	8013a84 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	699b      	ldr	r3, [r3, #24]
 80137f2:	43db      	mvns	r3, r3
 80137f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80137f6:	e145      	b.n	8013a84 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	699b      	ldr	r3, [r3, #24]
 80137fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013800:	2b00      	cmp	r3, #0
 8013802:	f040 8101 	bne.w	8013a08 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	0a5b      	lsrs	r3, r3, #9
 801380c:	693a      	ldr	r2, [r7, #16]
 801380e:	8952      	ldrh	r2, [r2, #10]
 8013810:	3a01      	subs	r2, #1
 8013812:	4013      	ands	r3, r2
 8013814:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d14d      	bne.n	80138b8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	699b      	ldr	r3, [r3, #24]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10c      	bne.n	801383e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382c:	2b00      	cmp	r3, #0
 801382e:	d11a      	bne.n	8013866 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2100      	movs	r1, #0
 8013834:	4618      	mov	r0, r3
 8013836:	f7fe fd5d 	bl	80122f4 <create_chain>
 801383a:	62b8      	str	r0, [r7, #40]	; 0x28
 801383c:	e013      	b.n	8013866 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013842:	2b00      	cmp	r3, #0
 8013844:	d007      	beq.n	8013856 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	4619      	mov	r1, r3
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	f7fe fde9 	bl	8012424 <clmt_clust>
 8013852:	62b8      	str	r0, [r7, #40]	; 0x28
 8013854:	e007      	b.n	8013866 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	69db      	ldr	r3, [r3, #28]
 801385c:	4619      	mov	r1, r3
 801385e:	4610      	mov	r0, r2
 8013860:	f7fe fd48 	bl	80122f4 <create_chain>
 8013864:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013868:	2b00      	cmp	r3, #0
 801386a:	f000 8110 	beq.w	8013a8e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013870:	2b01      	cmp	r3, #1
 8013872:	d109      	bne.n	8013888 <f_write+0x11e>
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2202      	movs	r2, #2
 8013878:	755a      	strb	r2, [r3, #21]
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	2102      	movs	r1, #2
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe f8b8 	bl	80119f4 <unlock_fs>
 8013884:	2302      	movs	r3, #2
 8013886:	e110      	b.n	8013aaa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388e:	d109      	bne.n	80138a4 <f_write+0x13a>
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2201      	movs	r2, #1
 8013894:	755a      	strb	r2, [r3, #21]
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	2101      	movs	r1, #1
 801389a:	4618      	mov	r0, r3
 801389c:	f7fe f8aa 	bl	80119f4 <unlock_fs>
 80138a0:	2301      	movs	r3, #1
 80138a2:	e102      	b.n	8013aaa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d102      	bne.n	80138b8 <f_write+0x14e>
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	7d1b      	ldrb	r3, [r3, #20]
 80138bc:	b25b      	sxtb	r3, r3
 80138be:	2b00      	cmp	r3, #0
 80138c0:	da1d      	bge.n	80138fe <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	7858      	ldrb	r0, [r3, #1]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	6a1a      	ldr	r2, [r3, #32]
 80138d0:	2301      	movs	r3, #1
 80138d2:	f7fd ff3b 	bl	801174c <disk_write>
 80138d6:	4603      	mov	r3, r0
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d009      	beq.n	80138f0 <f_write+0x186>
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2201      	movs	r2, #1
 80138e0:	755a      	strb	r2, [r3, #21]
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	2101      	movs	r1, #1
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7fe f884 	bl	80119f4 <unlock_fs>
 80138ec:	2301      	movs	r3, #1
 80138ee:	e0dc      	b.n	8013aaa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	7d1b      	ldrb	r3, [r3, #20]
 80138f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	69db      	ldr	r3, [r3, #28]
 8013904:	4619      	mov	r1, r3
 8013906:	4610      	mov	r0, r2
 8013908:	f7fe fadc 	bl	8011ec4 <clust2sect>
 801390c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d109      	bne.n	8013928 <f_write+0x1be>
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2202      	movs	r2, #2
 8013918:	755a      	strb	r2, [r3, #21]
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	2102      	movs	r1, #2
 801391e:	4618      	mov	r0, r3
 8013920:	f7fe f868 	bl	80119f4 <unlock_fs>
 8013924:	2302      	movs	r3, #2
 8013926:	e0c0      	b.n	8013aaa <f_write+0x340>
			sect += csect;
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	4413      	add	r3, r2
 801392e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	0a5b      	lsrs	r3, r3, #9
 8013934:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d041      	beq.n	80139c0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801393c:	69ba      	ldr	r2, [r7, #24]
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	4413      	add	r3, r2
 8013942:	693a      	ldr	r2, [r7, #16]
 8013944:	8952      	ldrh	r2, [r2, #10]
 8013946:	4293      	cmp	r3, r2
 8013948:	d905      	bls.n	8013956 <f_write+0x1ec>
					cc = fs->csize - csect;
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	895b      	ldrh	r3, [r3, #10]
 801394e:	461a      	mov	r2, r3
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	1ad3      	subs	r3, r2, r3
 8013954:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	7858      	ldrb	r0, [r3, #1]
 801395a:	6a3b      	ldr	r3, [r7, #32]
 801395c:	697a      	ldr	r2, [r7, #20]
 801395e:	69f9      	ldr	r1, [r7, #28]
 8013960:	f7fd fef4 	bl	801174c <disk_write>
 8013964:	4603      	mov	r3, r0
 8013966:	2b00      	cmp	r3, #0
 8013968:	d009      	beq.n	801397e <f_write+0x214>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2201      	movs	r2, #1
 801396e:	755a      	strb	r2, [r3, #21]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	2101      	movs	r1, #1
 8013974:	4618      	mov	r0, r3
 8013976:	f7fe f83d 	bl	80119f4 <unlock_fs>
 801397a:	2301      	movs	r3, #1
 801397c:	e095      	b.n	8013aaa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	6a1a      	ldr	r2, [r3, #32]
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	6a3a      	ldr	r2, [r7, #32]
 8013988:	429a      	cmp	r2, r3
 801398a:	d915      	bls.n	80139b8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6a1a      	ldr	r2, [r3, #32]
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	025b      	lsls	r3, r3, #9
 801399c:	69fa      	ldr	r2, [r7, #28]
 801399e:	4413      	add	r3, r2
 80139a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139a4:	4619      	mov	r1, r3
 80139a6:	f7fd ff91 	bl	80118cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	7d1b      	ldrb	r3, [r3, #20]
 80139ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139b2:	b2da      	uxtb	r2, r3
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80139b8:	6a3b      	ldr	r3, [r7, #32]
 80139ba:	025b      	lsls	r3, r3, #9
 80139bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80139be:	e044      	b.n	8013a4a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6a1b      	ldr	r3, [r3, #32]
 80139c4:	697a      	ldr	r2, [r7, #20]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d01b      	beq.n	8013a02 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	699a      	ldr	r2, [r3, #24]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d215      	bcs.n	8013a02 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	7858      	ldrb	r0, [r3, #1]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139e0:	2301      	movs	r3, #1
 80139e2:	697a      	ldr	r2, [r7, #20]
 80139e4:	f7fd fe92 	bl	801170c <disk_read>
 80139e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d009      	beq.n	8013a02 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2201      	movs	r2, #1
 80139f2:	755a      	strb	r2, [r3, #21]
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	2101      	movs	r1, #1
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fd fffb 	bl	80119f4 <unlock_fs>
 80139fe:	2301      	movs	r3, #1
 8013a00:	e053      	b.n	8013aaa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	697a      	ldr	r2, [r7, #20]
 8013a06:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	699b      	ldr	r3, [r3, #24]
 8013a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013a14:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d901      	bls.n	8013a22 <f_write+0x2b8>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a30:	4413      	add	r3, r2
 8013a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a34:	69f9      	ldr	r1, [r7, #28]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fd ff48 	bl	80118cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	7d1b      	ldrb	r3, [r3, #20]
 8013a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a44:	b2da      	uxtb	r2, r3
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013a4a:	69fa      	ldr	r2, [r7, #28]
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	4413      	add	r3, r2
 8013a50:	61fb      	str	r3, [r7, #28]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	699a      	ldr	r2, [r3, #24]
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a58:	441a      	add	r2, r3
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	619a      	str	r2, [r3, #24]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	bf38      	it	cc
 8013a6a:	461a      	movcc	r2, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	60da      	str	r2, [r3, #12]
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	441a      	add	r2, r3
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	601a      	str	r2, [r3, #0]
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	f47f aeb6 	bne.w	80137f8 <f_write+0x8e>
 8013a8c:	e000      	b.n	8013a90 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	7d1b      	ldrb	r3, [r3, #20]
 8013a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fd ffa6 	bl	80119f4 <unlock_fs>
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3730      	adds	r7, #48	; 0x30
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b086      	sub	sp, #24
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f107 0208 	add.w	r2, r7, #8
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff fbe0 	bl	8013288 <validate>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013acc:	7dfb      	ldrb	r3, [r7, #23]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d16d      	bne.n	8013bae <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	7d1b      	ldrb	r3, [r3, #20]
 8013ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d067      	beq.n	8013bae <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	7d1b      	ldrb	r3, [r3, #20]
 8013ae2:	b25b      	sxtb	r3, r3
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	da1a      	bge.n	8013b1e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	7858      	ldrb	r0, [r3, #1]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6a1a      	ldr	r2, [r3, #32]
 8013af6:	2301      	movs	r3, #1
 8013af8:	f7fd fe28 	bl	801174c <disk_write>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d006      	beq.n	8013b10 <f_sync+0x5e>
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	2101      	movs	r1, #1
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fd ff74 	bl	80119f4 <unlock_fs>
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e055      	b.n	8013bbc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	7d1b      	ldrb	r3, [r3, #20]
 8013b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013b1e:	f7fb fc15 	bl	800f34c <get_fattime>
 8013b22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013b24:	68ba      	ldr	r2, [r7, #8]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	4610      	mov	r0, r2
 8013b2e:	f7fe f92d 	bl	8011d8c <move_window>
 8013b32:	4603      	mov	r3, r0
 8013b34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013b36:	7dfb      	ldrb	r3, [r7, #23]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d138      	bne.n	8013bae <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	330b      	adds	r3, #11
 8013b46:	781a      	ldrb	r2, [r3, #0]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	330b      	adds	r3, #11
 8013b4c:	f042 0220 	orr.w	r2, r2, #32
 8013b50:	b2d2      	uxtb	r2, r2
 8013b52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6818      	ldr	r0, [r3, #0]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	68f9      	ldr	r1, [r7, #12]
 8013b60:	f7fe fe3a 	bl	80127d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f103 021c 	add.w	r2, r3, #28
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	4610      	mov	r0, r2
 8013b72:	f7fd fe7f 	bl	8011874 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	3316      	adds	r3, #22
 8013b7a:	6939      	ldr	r1, [r7, #16]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fd fe79 	bl	8011874 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	3312      	adds	r3, #18
 8013b86:	2100      	movs	r1, #0
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7fd fe58 	bl	801183e <st_word>
					fs->wflag = 1;
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	2201      	movs	r2, #1
 8013b92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7fe f926 	bl	8011de8 <sync_fs>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	7d1b      	ldrb	r3, [r3, #20]
 8013ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	7dfa      	ldrb	r2, [r7, #23]
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fd ff1d 	bl	80119f4 <unlock_fs>
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3718      	adds	r7, #24
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7ff ff70 	bl	8013ab2 <f_sync>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013bd6:	7bfb      	ldrb	r3, [r7, #15]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d11d      	bne.n	8013c18 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f107 0208 	add.w	r2, r7, #8
 8013be2:	4611      	mov	r1, r2
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7ff fb4f 	bl	8013288 <validate>
 8013bea:	4603      	mov	r3, r0
 8013bec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d111      	bne.n	8013c18 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	691b      	ldr	r3, [r3, #16]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fe f823 	bl	8011c44 <dec_lock>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013c02:	7bfb      	ldrb	r3, [r7, #15]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d102      	bne.n	8013c0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	2100      	movs	r1, #0
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fd feee 	bl	80119f4 <unlock_fs>
#endif
		}
	}
	return res;
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3710      	adds	r7, #16
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}

08013c22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013c22:	b580      	push	{r7, lr}
 8013c24:	b090      	sub	sp, #64	; 0x40
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
 8013c2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f107 0208 	add.w	r2, r7, #8
 8013c32:	4611      	mov	r1, r2
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7ff fb27 	bl	8013288 <validate>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013c40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d103      	bne.n	8013c50 <f_lseek+0x2e>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	7d5b      	ldrb	r3, [r3, #21]
 8013c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013c50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d009      	beq.n	8013c6c <f_lseek+0x4a>
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013c5e:	4611      	mov	r1, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7fd fec7 	bl	80119f4 <unlock_fs>
 8013c66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c6a:	e229      	b.n	80140c0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 80ea 	beq.w	8013e4a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c7c:	d164      	bne.n	8013d48 <f_lseek+0x126>
			tbl = fp->cltbl;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c82:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c86:	1d1a      	adds	r2, r3, #4
 8013c88:	627a      	str	r2, [r7, #36]	; 0x24
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	617b      	str	r3, [r7, #20]
 8013c8e:	2302      	movs	r3, #2
 8013c90:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	689b      	ldr	r3, [r3, #8]
 8013c96:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d044      	beq.n	8013d28 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	613b      	str	r3, [r7, #16]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca8:	3302      	adds	r3, #2
 8013caa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cae:	60fb      	str	r3, [r7, #12]
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7fe f921 	bl	8011f02 <get_fat>
 8013cc0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	d809      	bhi.n	8013cdc <f_lseek+0xba>
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2202      	movs	r2, #2
 8013ccc:	755a      	strb	r2, [r3, #21]
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	2102      	movs	r1, #2
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fd fe8e 	bl	80119f4 <unlock_fs>
 8013cd8:	2302      	movs	r3, #2
 8013cda:	e1f1      	b.n	80140c0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce2:	d109      	bne.n	8013cf8 <f_lseek+0xd6>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	755a      	strb	r2, [r3, #21]
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	2101      	movs	r1, #1
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fd fe80 	bl	80119f4 <unlock_fs>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e1e3      	b.n	80140c0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d0d4      	beq.n	8013cac <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d809      	bhi.n	8013d1e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0c:	1d1a      	adds	r2, r3, #4
 8013d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8013d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d12:	601a      	str	r2, [r3, #0]
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	1d1a      	adds	r2, r3, #4
 8013d18:	627a      	str	r2, [r7, #36]	; 0x24
 8013d1a:	693a      	ldr	r2, [r7, #16]
 8013d1c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	699b      	ldr	r3, [r3, #24]
 8013d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d3ba      	bcc.n	8013c9e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d2e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d803      	bhi.n	8013d40 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8013d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	601a      	str	r2, [r3, #0]
 8013d3e:	e1b6      	b.n	80140ae <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013d40:	2311      	movs	r3, #17
 8013d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013d46:	e1b2      	b.n	80140ae <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d902      	bls.n	8013d58 <f_lseek+0x136>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	683a      	ldr	r2, [r7, #0]
 8013d5c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f000 81a4 	beq.w	80140ae <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f7fe fb59 	bl	8012424 <clmt_clust>
 8013d72:	4602      	mov	r2, r0
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	69db      	ldr	r3, [r3, #28]
 8013d7e:	4619      	mov	r1, r3
 8013d80:	4610      	mov	r0, r2
 8013d82:	f7fe f89f 	bl	8011ec4 <clust2sect>
 8013d86:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d109      	bne.n	8013da2 <f_lseek+0x180>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2202      	movs	r2, #2
 8013d92:	755a      	strb	r2, [r3, #21]
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2102      	movs	r1, #2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fd fe2b 	bl	80119f4 <unlock_fs>
 8013d9e:	2302      	movs	r3, #2
 8013da0:	e18e      	b.n	80140c0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	3b01      	subs	r3, #1
 8013da6:	0a5b      	lsrs	r3, r3, #9
 8013da8:	68ba      	ldr	r2, [r7, #8]
 8013daa:	8952      	ldrh	r2, [r2, #10]
 8013dac:	3a01      	subs	r2, #1
 8013dae:	4013      	ands	r3, r2
 8013db0:	69ba      	ldr	r2, [r7, #24]
 8013db2:	4413      	add	r3, r2
 8013db4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	699b      	ldr	r3, [r3, #24]
 8013dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f000 8175 	beq.w	80140ae <f_lseek+0x48c>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6a1b      	ldr	r3, [r3, #32]
 8013dc8:	69ba      	ldr	r2, [r7, #24]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	f000 816f 	beq.w	80140ae <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	7d1b      	ldrb	r3, [r3, #20]
 8013dd4:	b25b      	sxtb	r3, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	da1d      	bge.n	8013e16 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	7858      	ldrb	r0, [r3, #1]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6a1a      	ldr	r2, [r3, #32]
 8013de8:	2301      	movs	r3, #1
 8013dea:	f7fd fcaf 	bl	801174c <disk_write>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d009      	beq.n	8013e08 <f_lseek+0x1e6>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2201      	movs	r2, #1
 8013df8:	755a      	strb	r2, [r3, #21]
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	2101      	movs	r1, #1
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fd fdf8 	bl	80119f4 <unlock_fs>
 8013e04:	2301      	movs	r3, #1
 8013e06:	e15b      	b.n	80140c0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7d1b      	ldrb	r3, [r3, #20]
 8013e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e10:	b2da      	uxtb	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	7858      	ldrb	r0, [r3, #1]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e20:	2301      	movs	r3, #1
 8013e22:	69ba      	ldr	r2, [r7, #24]
 8013e24:	f7fd fc72 	bl	801170c <disk_read>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d009      	beq.n	8013e42 <f_lseek+0x220>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2201      	movs	r2, #1
 8013e32:	755a      	strb	r2, [r3, #21]
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	2101      	movs	r1, #1
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7fd fddb 	bl	80119f4 <unlock_fs>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e13e      	b.n	80140c0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	69ba      	ldr	r2, [r7, #24]
 8013e46:	621a      	str	r2, [r3, #32]
 8013e48:	e131      	b.n	80140ae <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	683a      	ldr	r2, [r7, #0]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d908      	bls.n	8013e66 <f_lseek+0x244>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	7d1b      	ldrb	r3, [r3, #20]
 8013e58:	f003 0302 	and.w	r3, r3, #2
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d102      	bne.n	8013e66 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	699b      	ldr	r3, [r3, #24]
 8013e6a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e74:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 80c0 	beq.w	8013ffe <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	895b      	ldrh	r3, [r3, #10]
 8013e82:	025b      	lsls	r3, r3, #9
 8013e84:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d01b      	beq.n	8013ec4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	1e5a      	subs	r2, r3, #1
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e96:	6a3b      	ldr	r3, [r7, #32]
 8013e98:	1e59      	subs	r1, r3, #1
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d30f      	bcc.n	8013ec4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013ea4:	6a3b      	ldr	r3, [r7, #32]
 8013ea6:	1e5a      	subs	r2, r3, #1
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	425b      	negs	r3, r3
 8013eac:	401a      	ands	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	1ad3      	subs	r3, r2, r3
 8013eba:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	69db      	ldr	r3, [r3, #28]
 8013ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ec2:	e02c      	b.n	8013f1e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	689b      	ldr	r3, [r3, #8]
 8013ec8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d123      	bne.n	8013f18 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2100      	movs	r1, #0
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7fe fa0d 	bl	80122f4 <create_chain>
 8013eda:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d109      	bne.n	8013ef6 <f_lseek+0x2d4>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	755a      	strb	r2, [r3, #21]
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2102      	movs	r1, #2
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fd fd81 	bl	80119f4 <unlock_fs>
 8013ef2:	2302      	movs	r3, #2
 8013ef4:	e0e4      	b.n	80140c0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efc:	d109      	bne.n	8013f12 <f_lseek+0x2f0>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2201      	movs	r2, #1
 8013f02:	755a      	strb	r2, [r3, #21]
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	2101      	movs	r1, #1
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fd fd73 	bl	80119f4 <unlock_fs>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	e0d6      	b.n	80140c0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f16:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f1c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d06c      	beq.n	8013ffe <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8013f24:	e044      	b.n	8013fb0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8013f26:	683a      	ldr	r2, [r7, #0]
 8013f28:	69fb      	ldr	r3, [r7, #28]
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	603b      	str	r3, [r7, #0]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	699a      	ldr	r2, [r3, #24]
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	441a      	add	r2, r3
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	7d1b      	ldrb	r3, [r3, #20]
 8013f3e:	f003 0302 	and.w	r3, r3, #2
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00b      	beq.n	8013f5e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fe f9d2 	bl	80122f4 <create_chain>
 8013f50:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d108      	bne.n	8013f6a <f_lseek+0x348>
							ofs = 0; break;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	603b      	str	r3, [r7, #0]
 8013f5c:	e02c      	b.n	8013fb8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fd ffcd 	bl	8011f02 <get_fat>
 8013f68:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f70:	d109      	bne.n	8013f86 <f_lseek+0x364>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2201      	movs	r2, #1
 8013f76:	755a      	strb	r2, [r3, #21]
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fd fd39 	bl	80119f4 <unlock_fs>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e09c      	b.n	80140c0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d904      	bls.n	8013f96 <f_lseek+0x374>
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	699b      	ldr	r3, [r3, #24]
 8013f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d309      	bcc.n	8013faa <f_lseek+0x388>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2202      	movs	r2, #2
 8013f9a:	755a      	strb	r2, [r3, #21]
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	2102      	movs	r1, #2
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7fd fd27 	bl	80119f4 <unlock_fs>
 8013fa6:	2302      	movs	r3, #2
 8013fa8:	e08a      	b.n	80140c0 <f_lseek+0x49e>
					fp->clust = clst;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d8b6      	bhi.n	8013f26 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	699a      	ldr	r2, [r3, #24]
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	441a      	add	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d017      	beq.n	8013ffe <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fd ff76 	bl	8011ec4 <clust2sect>
 8013fd8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d109      	bne.n	8013ff4 <f_lseek+0x3d2>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2202      	movs	r2, #2
 8013fe4:	755a      	strb	r2, [r3, #21]
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	2102      	movs	r1, #2
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fd fd02 	bl	80119f4 <unlock_fs>
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	e065      	b.n	80140c0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	0a5b      	lsrs	r3, r3, #9
 8013ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ffa:	4413      	add	r3, r2
 8013ffc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	699a      	ldr	r2, [r3, #24]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	68db      	ldr	r3, [r3, #12]
 8014006:	429a      	cmp	r2, r3
 8014008:	d90a      	bls.n	8014020 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	699a      	ldr	r2, [r3, #24]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	7d1b      	ldrb	r3, [r3, #20]
 8014016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801401a:	b2da      	uxtb	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	699b      	ldr	r3, [r3, #24]
 8014024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014028:	2b00      	cmp	r3, #0
 801402a:	d040      	beq.n	80140ae <f_lseek+0x48c>
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6a1b      	ldr	r3, [r3, #32]
 8014030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014032:	429a      	cmp	r2, r3
 8014034:	d03b      	beq.n	80140ae <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	7d1b      	ldrb	r3, [r3, #20]
 801403a:	b25b      	sxtb	r3, r3
 801403c:	2b00      	cmp	r3, #0
 801403e:	da1d      	bge.n	801407c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	7858      	ldrb	r0, [r3, #1]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6a1a      	ldr	r2, [r3, #32]
 801404e:	2301      	movs	r3, #1
 8014050:	f7fd fb7c 	bl	801174c <disk_write>
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d009      	beq.n	801406e <f_lseek+0x44c>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2201      	movs	r2, #1
 801405e:	755a      	strb	r2, [r3, #21]
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	2101      	movs	r1, #1
 8014064:	4618      	mov	r0, r3
 8014066:	f7fd fcc5 	bl	80119f4 <unlock_fs>
 801406a:	2301      	movs	r3, #1
 801406c:	e028      	b.n	80140c0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	7d1b      	ldrb	r3, [r3, #20]
 8014072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014076:	b2da      	uxtb	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	7858      	ldrb	r0, [r3, #1]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014086:	2301      	movs	r3, #1
 8014088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801408a:	f7fd fb3f 	bl	801170c <disk_read>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d009      	beq.n	80140a8 <f_lseek+0x486>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	755a      	strb	r2, [r3, #21]
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2101      	movs	r1, #1
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fd fca8 	bl	80119f4 <unlock_fs>
 80140a4:	2301      	movs	r3, #1
 80140a6:	e00b      	b.n	80140c0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ac:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80140b4:	4611      	mov	r1, r2
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7fd fc9c 	bl	80119f4 <unlock_fs>
 80140bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3740      	adds	r7, #64	; 0x40
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b086      	sub	sp, #24
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d101      	bne.n	80140dc <f_opendir+0x14>
 80140d8:	2309      	movs	r3, #9
 80140da:	e06a      	b.n	80141b2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80140e0:	f107 010c 	add.w	r1, r7, #12
 80140e4:	463b      	mov	r3, r7
 80140e6:	2200      	movs	r2, #0
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7fe fe79 	bl	8012de0 <find_volume>
 80140ee:	4603      	mov	r3, r0
 80140f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80140f2:	7dfb      	ldrb	r3, [r7, #23]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d14f      	bne.n	8014198 <f_opendir+0xd0>
		obj->fs = fs;
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	4619      	mov	r1, r3
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f7fe fd60 	bl	8012bc8 <follow_path>
 8014108:	4603      	mov	r3, r0
 801410a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801410c:	7dfb      	ldrb	r3, [r7, #23]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d13d      	bne.n	801418e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014118:	b25b      	sxtb	r3, r3
 801411a:	2b00      	cmp	r3, #0
 801411c:	db12      	blt.n	8014144 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	799b      	ldrb	r3, [r3, #6]
 8014122:	f003 0310 	and.w	r3, r3, #16
 8014126:	2b00      	cmp	r3, #0
 8014128:	d00a      	beq.n	8014140 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801412a:	68fa      	ldr	r2, [r7, #12]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6a1b      	ldr	r3, [r3, #32]
 8014130:	4619      	mov	r1, r3
 8014132:	4610      	mov	r0, r2
 8014134:	f7fe fb31 	bl	801279a <ld_clust>
 8014138:	4602      	mov	r2, r0
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	609a      	str	r2, [r3, #8]
 801413e:	e001      	b.n	8014144 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014140:	2305      	movs	r3, #5
 8014142:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014144:	7dfb      	ldrb	r3, [r7, #23]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d121      	bne.n	801418e <f_opendir+0xc6>
				obj->id = fs->id;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	88da      	ldrh	r2, [r3, #6]
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014152:	2100      	movs	r1, #0
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7fe f999 	bl	801248c <dir_sdi>
 801415a:	4603      	mov	r3, r0
 801415c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d114      	bne.n	801418e <f_opendir+0xc6>
					if (obj->sclust) {
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00d      	beq.n	8014188 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801416c:	2100      	movs	r1, #0
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7fd fcda 	bl	8011b28 <inc_lock>
 8014174:	4602      	mov	r2, r0
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	691b      	ldr	r3, [r3, #16]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d105      	bne.n	801418e <f_opendir+0xc6>
 8014182:	2312      	movs	r3, #18
 8014184:	75fb      	strb	r3, [r7, #23]
 8014186:	e002      	b.n	801418e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	2200      	movs	r2, #0
 801418c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801418e:	7dfb      	ldrb	r3, [r7, #23]
 8014190:	2b04      	cmp	r3, #4
 8014192:	d101      	bne.n	8014198 <f_opendir+0xd0>
 8014194:	2305      	movs	r3, #5
 8014196:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014198:	7dfb      	ldrb	r3, [r7, #23]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d002      	beq.n	80141a4 <f_opendir+0xdc>
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	2200      	movs	r2, #0
 80141a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	7dfa      	ldrb	r2, [r7, #23]
 80141a8:	4611      	mov	r1, r2
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fd fc22 	bl	80119f4 <unlock_fs>
 80141b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3718      	adds	r7, #24
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}

080141ba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80141ba:	b580      	push	{r7, lr}
 80141bc:	b084      	sub	sp, #16
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f107 0208 	add.w	r2, r7, #8
 80141c8:	4611      	mov	r1, r2
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7ff f85c 	bl	8013288 <validate>
 80141d0:	4603      	mov	r3, r0
 80141d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80141d4:	7bfb      	ldrb	r3, [r7, #15]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d115      	bne.n	8014206 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	691b      	ldr	r3, [r3, #16]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d006      	beq.n	80141f0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	691b      	ldr	r3, [r3, #16]
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fd fd2c 	bl	8011c44 <dec_lock>
 80141ec:	4603      	mov	r3, r0
 80141ee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80141f0:	7bfb      	ldrb	r3, [r7, #15]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d102      	bne.n	80141fc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	2100      	movs	r1, #0
 8014200:	4618      	mov	r0, r3
 8014202:	f7fd fbf7 	bl	80119f4 <unlock_fs>
#endif
	}
	return res;
 8014206:	7bfb      	ldrb	r3, [r7, #15]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f107 0208 	add.w	r2, r7, #8
 8014220:	4611      	mov	r1, r2
 8014222:	4618      	mov	r0, r3
 8014224:	f7ff f830 	bl	8013288 <validate>
 8014228:	4603      	mov	r3, r0
 801422a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801422c:	7bfb      	ldrb	r3, [r7, #15]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d126      	bne.n	8014280 <f_readdir+0x70>
		if (!fno) {
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d106      	bne.n	8014246 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014238:	2100      	movs	r1, #0
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7fe f926 	bl	801248c <dir_sdi>
 8014240:	4603      	mov	r3, r0
 8014242:	73fb      	strb	r3, [r7, #15]
 8014244:	e01c      	b.n	8014280 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014246:	2100      	movs	r1, #0
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7fe fae5 	bl	8012818 <dir_read>
 801424e:	4603      	mov	r3, r0
 8014250:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014252:	7bfb      	ldrb	r3, [r7, #15]
 8014254:	2b04      	cmp	r3, #4
 8014256:	d101      	bne.n	801425c <f_readdir+0x4c>
 8014258:	2300      	movs	r3, #0
 801425a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801425c:	7bfb      	ldrb	r3, [r7, #15]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d10e      	bne.n	8014280 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7fe fbbb 	bl	80129e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801426a:	2100      	movs	r1, #0
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7fe f988 	bl	8012582 <dir_next>
 8014272:	4603      	mov	r3, r0
 8014274:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014276:	7bfb      	ldrb	r3, [r7, #15]
 8014278:	2b04      	cmp	r3, #4
 801427a:	d101      	bne.n	8014280 <f_readdir+0x70>
 801427c:	2300      	movs	r3, #0
 801427e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	7bfa      	ldrb	r2, [r7, #15]
 8014284:	4611      	mov	r1, r2
 8014286:	4618      	mov	r0, r3
 8014288:	f7fd fbb4 	bl	80119f4 <unlock_fs>
 801428c:	7bfb      	ldrb	r3, [r7, #15]
}
 801428e:	4618      	mov	r0, r3
 8014290:	3710      	adds	r7, #16
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
	...

08014298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014298:	b480      	push	{r7}
 801429a:	b087      	sub	sp, #28
 801429c:	af00      	add	r7, sp, #0
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	4613      	mov	r3, r2
 80142a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80142a6:	2301      	movs	r3, #1
 80142a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80142aa:	2300      	movs	r3, #0
 80142ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80142ae:	4b1f      	ldr	r3, [pc, #124]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142b0:	7a5b      	ldrb	r3, [r3, #9]
 80142b2:	b2db      	uxtb	r3, r3
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d131      	bne.n	801431c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80142b8:	4b1c      	ldr	r3, [pc, #112]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142ba:	7a5b      	ldrb	r3, [r3, #9]
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	461a      	mov	r2, r3
 80142c0:	4b1a      	ldr	r3, [pc, #104]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142c2:	2100      	movs	r1, #0
 80142c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80142c6:	4b19      	ldr	r3, [pc, #100]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142c8:	7a5b      	ldrb	r3, [r3, #9]
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	4a17      	ldr	r2, [pc, #92]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	4413      	add	r3, r2
 80142d2:	68fa      	ldr	r2, [r7, #12]
 80142d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80142d6:	4b15      	ldr	r3, [pc, #84]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142d8:	7a5b      	ldrb	r3, [r3, #9]
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	461a      	mov	r2, r3
 80142de:	4b13      	ldr	r3, [pc, #76]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142e0:	4413      	add	r3, r2
 80142e2:	79fa      	ldrb	r2, [r7, #7]
 80142e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80142e6:	4b11      	ldr	r3, [pc, #68]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142e8:	7a5b      	ldrb	r3, [r3, #9]
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	1c5a      	adds	r2, r3, #1
 80142ee:	b2d1      	uxtb	r1, r2
 80142f0:	4a0e      	ldr	r2, [pc, #56]	; (801432c <FATFS_LinkDriverEx+0x94>)
 80142f2:	7251      	strb	r1, [r2, #9]
 80142f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80142f6:	7dbb      	ldrb	r3, [r7, #22]
 80142f8:	3330      	adds	r3, #48	; 0x30
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	3301      	adds	r3, #1
 8014304:	223a      	movs	r2, #58	; 0x3a
 8014306:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	3302      	adds	r3, #2
 801430c:	222f      	movs	r2, #47	; 0x2f
 801430e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	3303      	adds	r3, #3
 8014314:	2200      	movs	r2, #0
 8014316:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014318:	2300      	movs	r3, #0
 801431a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801431c:	7dfb      	ldrb	r3, [r7, #23]
}
 801431e:	4618      	mov	r0, r3
 8014320:	371c      	adds	r7, #28
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	20000804 	.word	0x20000804

08014330 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801433a:	2200      	movs	r2, #0
 801433c:	6839      	ldr	r1, [r7, #0]
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7ff ffaa 	bl	8014298 <FATFS_LinkDriverEx>
 8014344:	4603      	mov	r3, r0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}

0801434e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801434e:	b580      	push	{r7, lr}
 8014350:	b084      	sub	sp, #16
 8014352:	af00      	add	r7, sp, #0
 8014354:	4603      	mov	r3, r0
 8014356:	6039      	str	r1, [r7, #0]
 8014358:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801435a:	2200      	movs	r2, #0
 801435c:	2101      	movs	r1, #1
 801435e:	2001      	movs	r0, #1
 8014360:	f000 f9e6 	bl	8014730 <osSemaphoreNew>
 8014364:	4602      	mov	r2, r0
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	bf14      	ite	ne
 8014372:	2301      	movne	r3, #1
 8014374:	2300      	moveq	r3, #0
 8014376:	b2db      	uxtb	r3, r3
 8014378:	60fb      	str	r3, [r7, #12]

    return ret;
 801437a:	68fb      	ldr	r3, [r7, #12]
}
 801437c:	4618      	mov	r0, r3
 801437e:	3710      	adds	r7, #16
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 faef 	bl	8014970 <osSemaphoreDelete>
#endif
    return 1;
 8014392:	2301      	movs	r3, #1
}
 8014394:	4618      	mov	r0, r3
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80143a4:	2300      	movs	r3, #0
 80143a6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80143a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 fa49 	bl	8014844 <osSemaphoreAcquire>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d101      	bne.n	80143bc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80143b8:	2301      	movs	r3, #1
 80143ba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80143bc:	68fb      	ldr	r3, [r7, #12]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b082      	sub	sp, #8
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f000 fa8a 	bl	80148e8 <osSemaphoreRelease>
#endif
}
 80143d4:	bf00      	nop
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <__NVIC_SetPriority>:
{
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	4603      	mov	r3, r0
 80143e4:	6039      	str	r1, [r7, #0]
 80143e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80143e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	db0a      	blt.n	8014406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	b2da      	uxtb	r2, r3
 80143f4:	490c      	ldr	r1, [pc, #48]	; (8014428 <__NVIC_SetPriority+0x4c>)
 80143f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143fa:	0112      	lsls	r2, r2, #4
 80143fc:	b2d2      	uxtb	r2, r2
 80143fe:	440b      	add	r3, r1
 8014400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014404:	e00a      	b.n	801441c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	b2da      	uxtb	r2, r3
 801440a:	4908      	ldr	r1, [pc, #32]	; (801442c <__NVIC_SetPriority+0x50>)
 801440c:	79fb      	ldrb	r3, [r7, #7]
 801440e:	f003 030f 	and.w	r3, r3, #15
 8014412:	3b04      	subs	r3, #4
 8014414:	0112      	lsls	r2, r2, #4
 8014416:	b2d2      	uxtb	r2, r2
 8014418:	440b      	add	r3, r1
 801441a:	761a      	strb	r2, [r3, #24]
}
 801441c:	bf00      	nop
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	e000e100 	.word	0xe000e100
 801442c:	e000ed00 	.word	0xe000ed00

08014430 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014430:	b580      	push	{r7, lr}
 8014432:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014434:	4b05      	ldr	r3, [pc, #20]	; (801444c <SysTick_Handler+0x1c>)
 8014436:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014438:	f002 fb74 	bl	8016b24 <xTaskGetSchedulerState>
 801443c:	4603      	mov	r3, r0
 801443e:	2b01      	cmp	r3, #1
 8014440:	d001      	beq.n	8014446 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014442:	f003 fa59 	bl	80178f8 <xPortSysTickHandler>
  }
}
 8014446:	bf00      	nop
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	e000e010 	.word	0xe000e010

08014450 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014450:	b580      	push	{r7, lr}
 8014452:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014454:	2100      	movs	r1, #0
 8014456:	f06f 0004 	mvn.w	r0, #4
 801445a:	f7ff ffbf 	bl	80143dc <__NVIC_SetPriority>
#endif
}
 801445e:	bf00      	nop
 8014460:	bd80      	pop	{r7, pc}
	...

08014464 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801446a:	f3ef 8305 	mrs	r3, IPSR
 801446e:	603b      	str	r3, [r7, #0]
  return(result);
 8014470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014472:	2b00      	cmp	r3, #0
 8014474:	d003      	beq.n	801447e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014476:	f06f 0305 	mvn.w	r3, #5
 801447a:	607b      	str	r3, [r7, #4]
 801447c:	e00c      	b.n	8014498 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801447e:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <osKernelInitialize+0x44>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d105      	bne.n	8014492 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014486:	4b08      	ldr	r3, [pc, #32]	; (80144a8 <osKernelInitialize+0x44>)
 8014488:	2201      	movs	r2, #1
 801448a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801448c:	2300      	movs	r3, #0
 801448e:	607b      	str	r3, [r7, #4]
 8014490:	e002      	b.n	8014498 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014492:	f04f 33ff 	mov.w	r3, #4294967295
 8014496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014498:	687b      	ldr	r3, [r7, #4]
}
 801449a:	4618      	mov	r0, r3
 801449c:	370c      	adds	r7, #12
 801449e:	46bd      	mov	sp, r7
 80144a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a4:	4770      	bx	lr
 80144a6:	bf00      	nop
 80144a8:	20000810 	.word	0x20000810

080144ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144b2:	f3ef 8305 	mrs	r3, IPSR
 80144b6:	603b      	str	r3, [r7, #0]
  return(result);
 80144b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d003      	beq.n	80144c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80144be:	f06f 0305 	mvn.w	r3, #5
 80144c2:	607b      	str	r3, [r7, #4]
 80144c4:	e010      	b.n	80144e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80144c6:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <osKernelStart+0x48>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2b01      	cmp	r3, #1
 80144cc:	d109      	bne.n	80144e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80144ce:	f7ff ffbf 	bl	8014450 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80144d2:	4b08      	ldr	r3, [pc, #32]	; (80144f4 <osKernelStart+0x48>)
 80144d4:	2202      	movs	r2, #2
 80144d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80144d8:	f001 feb8 	bl	801624c <vTaskStartScheduler>
      stat = osOK;
 80144dc:	2300      	movs	r3, #0
 80144de:	607b      	str	r3, [r7, #4]
 80144e0:	e002      	b.n	80144e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80144e2:	f04f 33ff 	mov.w	r3, #4294967295
 80144e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80144e8:	687b      	ldr	r3, [r7, #4]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20000810 	.word	0x20000810

080144f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b08e      	sub	sp, #56	; 0x38
 80144fc:	af04      	add	r7, sp, #16
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014504:	2300      	movs	r3, #0
 8014506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014508:	f3ef 8305 	mrs	r3, IPSR
 801450c:	617b      	str	r3, [r7, #20]
  return(result);
 801450e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014510:	2b00      	cmp	r3, #0
 8014512:	d17e      	bne.n	8014612 <osThreadNew+0x11a>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d07b      	beq.n	8014612 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801451a:	2380      	movs	r3, #128	; 0x80
 801451c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801451e:	2318      	movs	r3, #24
 8014520:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014522:	2300      	movs	r3, #0
 8014524:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014526:	f04f 33ff 	mov.w	r3, #4294967295
 801452a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d045      	beq.n	80145be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d002      	beq.n	8014540 <osThreadNew+0x48>
        name = attr->name;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	699b      	ldr	r3, [r3, #24]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	699b      	ldr	r3, [r3, #24]
 801454c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d008      	beq.n	8014566 <osThreadNew+0x6e>
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	2b38      	cmp	r3, #56	; 0x38
 8014558:	d805      	bhi.n	8014566 <osThreadNew+0x6e>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	f003 0301 	and.w	r3, r3, #1
 8014562:	2b00      	cmp	r3, #0
 8014564:	d001      	beq.n	801456a <osThreadNew+0x72>
        return (NULL);
 8014566:	2300      	movs	r3, #0
 8014568:	e054      	b.n	8014614 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	695b      	ldr	r3, [r3, #20]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	695b      	ldr	r3, [r3, #20]
 8014576:	089b      	lsrs	r3, r3, #2
 8014578:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d00e      	beq.n	80145a0 <osThreadNew+0xa8>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	2bbb      	cmp	r3, #187	; 0xbb
 8014588:	d90a      	bls.n	80145a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801458e:	2b00      	cmp	r3, #0
 8014590:	d006      	beq.n	80145a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	695b      	ldr	r3, [r3, #20]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d002      	beq.n	80145a0 <osThreadNew+0xa8>
        mem = 1;
 801459a:	2301      	movs	r3, #1
 801459c:	61bb      	str	r3, [r7, #24]
 801459e:	e010      	b.n	80145c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d10c      	bne.n	80145c2 <osThreadNew+0xca>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d108      	bne.n	80145c2 <osThreadNew+0xca>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d104      	bne.n	80145c2 <osThreadNew+0xca>
          mem = 0;
 80145b8:	2300      	movs	r3, #0
 80145ba:	61bb      	str	r3, [r7, #24]
 80145bc:	e001      	b.n	80145c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80145be:	2300      	movs	r3, #0
 80145c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d110      	bne.n	80145ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80145d0:	9202      	str	r2, [sp, #8]
 80145d2:	9301      	str	r3, [sp, #4]
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	6a3a      	ldr	r2, [r7, #32]
 80145dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f001 fae0 	bl	8015ba4 <xTaskCreateStatic>
 80145e4:	4603      	mov	r3, r0
 80145e6:	613b      	str	r3, [r7, #16]
 80145e8:	e013      	b.n	8014612 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d110      	bne.n	8014612 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80145f0:	6a3b      	ldr	r3, [r7, #32]
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	f107 0310 	add.w	r3, r7, #16
 80145f8:	9301      	str	r3, [sp, #4]
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f001 fb2b 	bl	8015c5e <xTaskCreate>
 8014608:	4603      	mov	r3, r0
 801460a:	2b01      	cmp	r3, #1
 801460c:	d001      	beq.n	8014612 <osThreadNew+0x11a>
            hTask = NULL;
 801460e:	2300      	movs	r3, #0
 8014610:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014612:	693b      	ldr	r3, [r7, #16]
}
 8014614:	4618      	mov	r0, r3
 8014616:	3728      	adds	r7, #40	; 0x28
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8014622:	f002 fa6f 	bl	8016b04 <xTaskGetCurrentTaskHandle>
 8014626:	6078      	str	r0, [r7, #4]

  return (id);
 8014628:	687b      	ldr	r3, [r7, #4]
}
 801462a:	4618      	mov	r0, r3
 801462c:	3708      	adds	r7, #8
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
	...

08014634 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8014634:	b580      	push	{r7, lr}
 8014636:	b086      	sub	sp, #24
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014640:	f3ef 8305 	mrs	r3, IPSR
 8014644:	60fb      	str	r3, [r7, #12]
  return(result);
 8014646:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8014648:	2b00      	cmp	r3, #0
 801464a:	d102      	bne.n	8014652 <osThreadGetState+0x1e>
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d103      	bne.n	801465a <osThreadGetState+0x26>
    state = osThreadError;
 8014652:	f04f 33ff 	mov.w	r3, #4294967295
 8014656:	617b      	str	r3, [r7, #20]
 8014658:	e022      	b.n	80146a0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 801465a:	6938      	ldr	r0, [r7, #16]
 801465c:	f001 fd00 	bl	8016060 <eTaskGetState>
 8014660:	4603      	mov	r3, r0
 8014662:	2b04      	cmp	r3, #4
 8014664:	d818      	bhi.n	8014698 <osThreadGetState+0x64>
 8014666:	a201      	add	r2, pc, #4	; (adr r2, 801466c <osThreadGetState+0x38>)
 8014668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801466c:	08014681 	.word	0x08014681
 8014670:	08014687 	.word	0x08014687
 8014674:	0801468d 	.word	0x0801468d
 8014678:	0801468d 	.word	0x0801468d
 801467c:	08014693 	.word	0x08014693
      case eRunning:   state = osThreadRunning;    break;
 8014680:	2302      	movs	r3, #2
 8014682:	617b      	str	r3, [r7, #20]
 8014684:	e00c      	b.n	80146a0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8014686:	2301      	movs	r3, #1
 8014688:	617b      	str	r3, [r7, #20]
 801468a:	e009      	b.n	80146a0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 801468c:	2303      	movs	r3, #3
 801468e:	617b      	str	r3, [r7, #20]
 8014690:	e006      	b.n	80146a0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8014692:	2304      	movs	r3, #4
 8014694:	617b      	str	r3, [r7, #20]
 8014696:	e003      	b.n	80146a0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8014698:	f04f 33ff 	mov.w	r3, #4294967295
 801469c:	617b      	str	r3, [r7, #20]
 801469e:	bf00      	nop
    }
  }

  return (state);
 80146a0:	697b      	ldr	r3, [r7, #20]
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop

080146ac <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b086      	sub	sp, #24
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146b8:	f3ef 8305 	mrs	r3, IPSR
 80146bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80146be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d003      	beq.n	80146cc <osThreadResume+0x20>
    stat = osErrorISR;
 80146c4:	f06f 0305 	mvn.w	r3, #5
 80146c8:	617b      	str	r3, [r7, #20]
 80146ca:	e00b      	b.n	80146e4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d103      	bne.n	80146da <osThreadResume+0x2e>
    stat = osErrorParameter;
 80146d2:	f06f 0303 	mvn.w	r3, #3
 80146d6:	617b      	str	r3, [r7, #20]
 80146d8:	e004      	b.n	80146e4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80146da:	2300      	movs	r3, #0
 80146dc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80146de:	6938      	ldr	r0, [r7, #16]
 80146e0:	f001 fd56 	bl	8016190 <vTaskResume>
  }

  return (stat);
 80146e4:	697b      	ldr	r3, [r7, #20]
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3718      	adds	r7, #24
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}

080146ee <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80146ee:	b580      	push	{r7, lr}
 80146f0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80146f2:	2000      	movs	r0, #0
 80146f4:	f001 fc0e 	bl	8015f14 <vTaskDelete>
#endif
  for (;;);
 80146f8:	e7fe      	b.n	80146f8 <osThreadExit+0xa>

080146fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b084      	sub	sp, #16
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014702:	f3ef 8305 	mrs	r3, IPSR
 8014706:	60bb      	str	r3, [r7, #8]
  return(result);
 8014708:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801470a:	2b00      	cmp	r3, #0
 801470c:	d003      	beq.n	8014716 <osDelay+0x1c>
    stat = osErrorISR;
 801470e:	f06f 0305 	mvn.w	r3, #5
 8014712:	60fb      	str	r3, [r7, #12]
 8014714:	e007      	b.n	8014726 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014716:	2300      	movs	r3, #0
 8014718:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d002      	beq.n	8014726 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f001 fc69 	bl	8015ff8 <vTaskDelay>
    }
  }

  return (stat);
 8014726:	68fb      	ldr	r3, [r7, #12]
}
 8014728:	4618      	mov	r0, r3
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014730:	b580      	push	{r7, lr}
 8014732:	b08a      	sub	sp, #40	; 0x28
 8014734:	af02      	add	r7, sp, #8
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801473c:	2300      	movs	r3, #0
 801473e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014740:	f3ef 8305 	mrs	r3, IPSR
 8014744:	613b      	str	r3, [r7, #16]
  return(result);
 8014746:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014748:	2b00      	cmp	r3, #0
 801474a:	d175      	bne.n	8014838 <osSemaphoreNew+0x108>
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d072      	beq.n	8014838 <osSemaphoreNew+0x108>
 8014752:	68ba      	ldr	r2, [r7, #8]
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	429a      	cmp	r2, r3
 8014758:	d86e      	bhi.n	8014838 <osSemaphoreNew+0x108>
    mem = -1;
 801475a:	f04f 33ff 	mov.w	r3, #4294967295
 801475e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d015      	beq.n	8014792 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d006      	beq.n	801477c <osSemaphoreNew+0x4c>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	2b4f      	cmp	r3, #79	; 0x4f
 8014774:	d902      	bls.n	801477c <osSemaphoreNew+0x4c>
        mem = 1;
 8014776:	2301      	movs	r3, #1
 8014778:	61bb      	str	r3, [r7, #24]
 801477a:	e00c      	b.n	8014796 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	689b      	ldr	r3, [r3, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d108      	bne.n	8014796 <osSemaphoreNew+0x66>
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d104      	bne.n	8014796 <osSemaphoreNew+0x66>
          mem = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	61bb      	str	r3, [r7, #24]
 8014790:	e001      	b.n	8014796 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801479c:	d04c      	beq.n	8014838 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2b01      	cmp	r3, #1
 80147a2:	d128      	bne.n	80147f6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d10a      	bne.n	80147c0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	689b      	ldr	r3, [r3, #8]
 80147ae:	2203      	movs	r2, #3
 80147b0:	9200      	str	r2, [sp, #0]
 80147b2:	2200      	movs	r2, #0
 80147b4:	2100      	movs	r1, #0
 80147b6:	2001      	movs	r0, #1
 80147b8:	f000 fa4e 	bl	8014c58 <xQueueGenericCreateStatic>
 80147bc:	61f8      	str	r0, [r7, #28]
 80147be:	e005      	b.n	80147cc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80147c0:	2203      	movs	r2, #3
 80147c2:	2100      	movs	r1, #0
 80147c4:	2001      	movs	r0, #1
 80147c6:	f000 fabf 	bl	8014d48 <xQueueGenericCreate>
 80147ca:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d022      	beq.n	8014818 <osSemaphoreNew+0xe8>
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d01f      	beq.n	8014818 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80147d8:	2300      	movs	r3, #0
 80147da:	2200      	movs	r2, #0
 80147dc:	2100      	movs	r1, #0
 80147de:	69f8      	ldr	r0, [r7, #28]
 80147e0:	f000 fb7a 	bl	8014ed8 <xQueueGenericSend>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d016      	beq.n	8014818 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80147ea:	69f8      	ldr	r0, [r7, #28]
 80147ec:	f001 f806 	bl	80157fc <vQueueDelete>
            hSemaphore = NULL;
 80147f0:	2300      	movs	r3, #0
 80147f2:	61fb      	str	r3, [r7, #28]
 80147f4:	e010      	b.n	8014818 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80147f6:	69bb      	ldr	r3, [r7, #24]
 80147f8:	2b01      	cmp	r3, #1
 80147fa:	d108      	bne.n	801480e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	461a      	mov	r2, r3
 8014802:	68b9      	ldr	r1, [r7, #8]
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f000 fafc 	bl	8014e02 <xQueueCreateCountingSemaphoreStatic>
 801480a:	61f8      	str	r0, [r7, #28]
 801480c:	e004      	b.n	8014818 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f000 fb2d 	bl	8014e70 <xQueueCreateCountingSemaphore>
 8014816:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00c      	beq.n	8014838 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d003      	beq.n	801482c <osSemaphoreNew+0xfc>
          name = attr->name;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	617b      	str	r3, [r7, #20]
 801482a:	e001      	b.n	8014830 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014830:	6979      	ldr	r1, [r7, #20]
 8014832:	69f8      	ldr	r0, [r7, #28]
 8014834:	f001 f92e 	bl	8015a94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014838:	69fb      	ldr	r3, [r7, #28]
}
 801483a:	4618      	mov	r0, r3
 801483c:	3720      	adds	r7, #32
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
	...

08014844 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014852:	2300      	movs	r3, #0
 8014854:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d103      	bne.n	8014864 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801485c:	f06f 0303 	mvn.w	r3, #3
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	e039      	b.n	80148d8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014864:	f3ef 8305 	mrs	r3, IPSR
 8014868:	60fb      	str	r3, [r7, #12]
  return(result);
 801486a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801486c:	2b00      	cmp	r3, #0
 801486e:	d022      	beq.n	80148b6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d003      	beq.n	801487e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014876:	f06f 0303 	mvn.w	r3, #3
 801487a:	617b      	str	r3, [r7, #20]
 801487c:	e02c      	b.n	80148d8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801487e:	2300      	movs	r3, #0
 8014880:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014882:	f107 0308 	add.w	r3, r7, #8
 8014886:	461a      	mov	r2, r3
 8014888:	2100      	movs	r1, #0
 801488a:	6938      	ldr	r0, [r7, #16]
 801488c:	f000 ff36 	bl	80156fc <xQueueReceiveFromISR>
 8014890:	4603      	mov	r3, r0
 8014892:	2b01      	cmp	r3, #1
 8014894:	d003      	beq.n	801489e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014896:	f06f 0302 	mvn.w	r3, #2
 801489a:	617b      	str	r3, [r7, #20]
 801489c:	e01c      	b.n	80148d8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d019      	beq.n	80148d8 <osSemaphoreAcquire+0x94>
 80148a4:	4b0f      	ldr	r3, [pc, #60]	; (80148e4 <osSemaphoreAcquire+0xa0>)
 80148a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148aa:	601a      	str	r2, [r3, #0]
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	f3bf 8f6f 	isb	sy
 80148b4:	e010      	b.n	80148d8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80148b6:	6839      	ldr	r1, [r7, #0]
 80148b8:	6938      	ldr	r0, [r7, #16]
 80148ba:	f000 fe13 	bl	80154e4 <xQueueSemaphoreTake>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d009      	beq.n	80148d8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d003      	beq.n	80148d2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80148ca:	f06f 0301 	mvn.w	r3, #1
 80148ce:	617b      	str	r3, [r7, #20]
 80148d0:	e002      	b.n	80148d8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80148d2:	f06f 0302 	mvn.w	r3, #2
 80148d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80148d8:	697b      	ldr	r3, [r7, #20]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3718      	adds	r7, #24
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	e000ed04 	.word	0xe000ed04

080148e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d103      	bne.n	8014906 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80148fe:	f06f 0303 	mvn.w	r3, #3
 8014902:	617b      	str	r3, [r7, #20]
 8014904:	e02c      	b.n	8014960 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014906:	f3ef 8305 	mrs	r3, IPSR
 801490a:	60fb      	str	r3, [r7, #12]
  return(result);
 801490c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801490e:	2b00      	cmp	r3, #0
 8014910:	d01a      	beq.n	8014948 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014912:	2300      	movs	r3, #0
 8014914:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014916:	f107 0308 	add.w	r3, r7, #8
 801491a:	4619      	mov	r1, r3
 801491c:	6938      	ldr	r0, [r7, #16]
 801491e:	f000 fc74 	bl	801520a <xQueueGiveFromISR>
 8014922:	4603      	mov	r3, r0
 8014924:	2b01      	cmp	r3, #1
 8014926:	d003      	beq.n	8014930 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014928:	f06f 0302 	mvn.w	r3, #2
 801492c:	617b      	str	r3, [r7, #20]
 801492e:	e017      	b.n	8014960 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d014      	beq.n	8014960 <osSemaphoreRelease+0x78>
 8014936:	4b0d      	ldr	r3, [pc, #52]	; (801496c <osSemaphoreRelease+0x84>)
 8014938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	f3bf 8f6f 	isb	sy
 8014946:	e00b      	b.n	8014960 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014948:	2300      	movs	r3, #0
 801494a:	2200      	movs	r2, #0
 801494c:	2100      	movs	r1, #0
 801494e:	6938      	ldr	r0, [r7, #16]
 8014950:	f000 fac2 	bl	8014ed8 <xQueueGenericSend>
 8014954:	4603      	mov	r3, r0
 8014956:	2b01      	cmp	r3, #1
 8014958:	d002      	beq.n	8014960 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801495a:	f06f 0302 	mvn.w	r3, #2
 801495e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014960:	697b      	ldr	r3, [r7, #20]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3718      	adds	r7, #24
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	e000ed04 	.word	0xe000ed04

08014970 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014970:	b580      	push	{r7, lr}
 8014972:	b086      	sub	sp, #24
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801497c:	f3ef 8305 	mrs	r3, IPSR
 8014980:	60fb      	str	r3, [r7, #12]
  return(result);
 8014982:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014984:	2b00      	cmp	r3, #0
 8014986:	d003      	beq.n	8014990 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014988:	f06f 0305 	mvn.w	r3, #5
 801498c:	617b      	str	r3, [r7, #20]
 801498e:	e00e      	b.n	80149ae <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d103      	bne.n	801499e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014996:	f06f 0303 	mvn.w	r3, #3
 801499a:	617b      	str	r3, [r7, #20]
 801499c:	e007      	b.n	80149ae <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801499e:	6938      	ldr	r0, [r7, #16]
 80149a0:	f001 f8a2 	bl	8015ae8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80149a4:	2300      	movs	r3, #0
 80149a6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80149a8:	6938      	ldr	r0, [r7, #16]
 80149aa:	f000 ff27 	bl	80157fc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80149ae:	697b      	ldr	r3, [r7, #20]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3718      	adds	r7, #24
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80149b8:	b480      	push	{r7}
 80149ba:	b085      	sub	sp, #20
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	4a07      	ldr	r2, [pc, #28]	; (80149e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80149c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	4a06      	ldr	r2, [pc, #24]	; (80149e8 <vApplicationGetIdleTaskMemory+0x30>)
 80149ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2280      	movs	r2, #128	; 0x80
 80149d4:	601a      	str	r2, [r3, #0]
}
 80149d6:	bf00      	nop
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	20000814 	.word	0x20000814
 80149e8:	200008d0 	.word	0x200008d0

080149ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80149ec:	b480      	push	{r7}
 80149ee:	b085      	sub	sp, #20
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	4a07      	ldr	r2, [pc, #28]	; (8014a18 <vApplicationGetTimerTaskMemory+0x2c>)
 80149fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	4a06      	ldr	r2, [pc, #24]	; (8014a1c <vApplicationGetTimerTaskMemory+0x30>)
 8014a02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014a0a:	601a      	str	r2, [r3, #0]
}
 8014a0c:	bf00      	nop
 8014a0e:	3714      	adds	r7, #20
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr
 8014a18:	20000ad0 	.word	0x20000ad0
 8014a1c:	20000b8c 	.word	0x20000b8c

08014a20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014a20:	b480      	push	{r7}
 8014a22:	b083      	sub	sp, #12
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f103 0208 	add.w	r2, r3, #8
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295
 8014a38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f103 0208 	add.w	r2, r3, #8
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f103 0208 	add.w	r2, r3, #8
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2200      	movs	r2, #0
 8014a52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014a54:	bf00      	nop
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014a6e:	bf00      	nop
 8014a70:	370c      	adds	r7, #12
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr

08014a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a7a:	b480      	push	{r7}
 8014a7c:	b085      	sub	sp, #20
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
 8014a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	685b      	ldr	r3, [r3, #4]
 8014a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	689a      	ldr	r2, [r3, #8]
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	683a      	ldr	r2, [r7, #0]
 8014a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	1c5a      	adds	r2, r3, #1
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	601a      	str	r2, [r3, #0]
}
 8014ab6:	bf00      	nop
 8014ab8:	3714      	adds	r7, #20
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr

08014ac2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014ac2:	b480      	push	{r7}
 8014ac4:	b085      	sub	sp, #20
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
 8014aca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ad8:	d103      	bne.n	8014ae2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	691b      	ldr	r3, [r3, #16]
 8014ade:	60fb      	str	r3, [r7, #12]
 8014ae0:	e00c      	b.n	8014afc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	3308      	adds	r3, #8
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e002      	b.n	8014af0 <vListInsert+0x2e>
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	60fb      	str	r3, [r7, #12]
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	68ba      	ldr	r2, [r7, #8]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d2f6      	bcs.n	8014aea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	685a      	ldr	r2, [r3, #4]
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	683a      	ldr	r2, [r7, #0]
 8014b0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	683a      	ldr	r2, [r7, #0]
 8014b16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	1c5a      	adds	r2, r3, #1
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	601a      	str	r2, [r3, #0]
}
 8014b28:	bf00      	nop
 8014b2a:	3714      	adds	r7, #20
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b32:	4770      	bx	lr

08014b34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014b34:	b480      	push	{r7}
 8014b36:	b085      	sub	sp, #20
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	6892      	ldr	r2, [r2, #8]
 8014b4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	689b      	ldr	r3, [r3, #8]
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	6852      	ldr	r2, [r2, #4]
 8014b54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	d103      	bne.n	8014b68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	689a      	ldr	r2, [r3, #8]
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	1e5a      	subs	r2, r3, #1
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3714      	adds	r7, #20
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d10a      	bne.n	8014bb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba0:	f383 8811 	msr	BASEPRI, r3
 8014ba4:	f3bf 8f6f 	isb	sy
 8014ba8:	f3bf 8f4f 	dsb	sy
 8014bac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014bae:	bf00      	nop
 8014bb0:	e7fe      	b.n	8014bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014bb2:	f002 fe0f 	bl	80177d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bbe:	68f9      	ldr	r1, [r7, #12]
 8014bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014bc2:	fb01 f303 	mul.w	r3, r1, r3
 8014bc6:	441a      	add	r2, r3
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681a      	ldr	r2, [r3, #0]
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014be2:	3b01      	subs	r3, #1
 8014be4:	68f9      	ldr	r1, [r7, #12]
 8014be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014be8:	fb01 f303 	mul.w	r3, r1, r3
 8014bec:	441a      	add	r2, r3
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	22ff      	movs	r2, #255	; 0xff
 8014bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	22ff      	movs	r2, #255	; 0xff
 8014bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d114      	bne.n	8014c32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	691b      	ldr	r3, [r3, #16]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d01a      	beq.n	8014c46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	3310      	adds	r3, #16
 8014c14:	4618      	mov	r0, r3
 8014c16:	f001 fdb3 	bl	8016780 <xTaskRemoveFromEventList>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d012      	beq.n	8014c46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014c20:	4b0c      	ldr	r3, [pc, #48]	; (8014c54 <xQueueGenericReset+0xcc>)
 8014c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c26:	601a      	str	r2, [r3, #0]
 8014c28:	f3bf 8f4f 	dsb	sy
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	e009      	b.n	8014c46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	3310      	adds	r3, #16
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7ff fef2 	bl	8014a20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	3324      	adds	r3, #36	; 0x24
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7ff feed 	bl	8014a20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014c46:	f002 fdf5 	bl	8017834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014c4a:	2301      	movs	r3, #1
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	e000ed04 	.word	0xe000ed04

08014c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b08e      	sub	sp, #56	; 0x38
 8014c5c:	af02      	add	r7, sp, #8
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10a      	bne.n	8014c82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014c7e:	bf00      	nop
 8014c80:	e7fe      	b.n	8014c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d10a      	bne.n	8014c9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c8c:	f383 8811 	msr	BASEPRI, r3
 8014c90:	f3bf 8f6f 	isb	sy
 8014c94:	f3bf 8f4f 	dsb	sy
 8014c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014c9a:	bf00      	nop
 8014c9c:	e7fe      	b.n	8014c9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d002      	beq.n	8014caa <xQueueGenericCreateStatic+0x52>
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <xQueueGenericCreateStatic+0x56>
 8014caa:	2301      	movs	r3, #1
 8014cac:	e000      	b.n	8014cb0 <xQueueGenericCreateStatic+0x58>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d10a      	bne.n	8014cca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb8:	f383 8811 	msr	BASEPRI, r3
 8014cbc:	f3bf 8f6f 	isb	sy
 8014cc0:	f3bf 8f4f 	dsb	sy
 8014cc4:	623b      	str	r3, [r7, #32]
}
 8014cc6:	bf00      	nop
 8014cc8:	e7fe      	b.n	8014cc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <xQueueGenericCreateStatic+0x7e>
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d101      	bne.n	8014cda <xQueueGenericCreateStatic+0x82>
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	e000      	b.n	8014cdc <xQueueGenericCreateStatic+0x84>
 8014cda:	2300      	movs	r3, #0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d10a      	bne.n	8014cf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce4:	f383 8811 	msr	BASEPRI, r3
 8014ce8:	f3bf 8f6f 	isb	sy
 8014cec:	f3bf 8f4f 	dsb	sy
 8014cf0:	61fb      	str	r3, [r7, #28]
}
 8014cf2:	bf00      	nop
 8014cf4:	e7fe      	b.n	8014cf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014cf6:	2350      	movs	r3, #80	; 0x50
 8014cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	2b50      	cmp	r3, #80	; 0x50
 8014cfe:	d00a      	beq.n	8014d16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	61bb      	str	r3, [r7, #24]
}
 8014d12:	bf00      	nop
 8014d14:	e7fe      	b.n	8014d14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014d16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d00d      	beq.n	8014d3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d24:	2201      	movs	r2, #1
 8014d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014d2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d30:	9300      	str	r3, [sp, #0]
 8014d32:	4613      	mov	r3, r2
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	68b9      	ldr	r1, [r7, #8]
 8014d38:	68f8      	ldr	r0, [r7, #12]
 8014d3a:	f000 f83f 	bl	8014dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3730      	adds	r7, #48	; 0x30
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b08a      	sub	sp, #40	; 0x28
 8014d4c:	af02      	add	r7, sp, #8
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	4613      	mov	r3, r2
 8014d54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d10a      	bne.n	8014d72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d60:	f383 8811 	msr	BASEPRI, r3
 8014d64:	f3bf 8f6f 	isb	sy
 8014d68:	f3bf 8f4f 	dsb	sy
 8014d6c:	613b      	str	r3, [r7, #16]
}
 8014d6e:	bf00      	nop
 8014d70:	e7fe      	b.n	8014d70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	68ba      	ldr	r2, [r7, #8]
 8014d76:	fb02 f303 	mul.w	r3, r2, r3
 8014d7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014d7c:	69fb      	ldr	r3, [r7, #28]
 8014d7e:	3350      	adds	r3, #80	; 0x50
 8014d80:	4618      	mov	r0, r3
 8014d82:	f002 fe49 	bl	8017a18 <pvPortMalloc>
 8014d86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d011      	beq.n	8014db2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	3350      	adds	r3, #80	; 0x50
 8014d96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014da0:	79fa      	ldrb	r2, [r7, #7]
 8014da2:	69bb      	ldr	r3, [r7, #24]
 8014da4:	9300      	str	r3, [sp, #0]
 8014da6:	4613      	mov	r3, r2
 8014da8:	697a      	ldr	r2, [r7, #20]
 8014daa:	68b9      	ldr	r1, [r7, #8]
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	f000 f805 	bl	8014dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014db2:	69bb      	ldr	r3, [r7, #24]
	}
 8014db4:	4618      	mov	r0, r3
 8014db6:	3720      	adds	r7, #32
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}

08014dbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b084      	sub	sp, #16
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	60f8      	str	r0, [r7, #12]
 8014dc4:	60b9      	str	r1, [r7, #8]
 8014dc6:	607a      	str	r2, [r7, #4]
 8014dc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d103      	bne.n	8014dd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	69ba      	ldr	r2, [r7, #24]
 8014dd4:	601a      	str	r2, [r3, #0]
 8014dd6:	e002      	b.n	8014dde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014dd8:	69bb      	ldr	r3, [r7, #24]
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	68fa      	ldr	r2, [r7, #12]
 8014de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014dea:	2101      	movs	r1, #1
 8014dec:	69b8      	ldr	r0, [r7, #24]
 8014dee:	f7ff fecb 	bl	8014b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014df2:	69bb      	ldr	r3, [r7, #24]
 8014df4:	78fa      	ldrb	r2, [r7, #3]
 8014df6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014dfa:	bf00      	nop
 8014dfc:	3710      	adds	r7, #16
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}

08014e02 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b08a      	sub	sp, #40	; 0x28
 8014e06:	af02      	add	r7, sp, #8
 8014e08:	60f8      	str	r0, [r7, #12]
 8014e0a:	60b9      	str	r1, [r7, #8]
 8014e0c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d10a      	bne.n	8014e2a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	61bb      	str	r3, [r7, #24]
}
 8014e26:	bf00      	nop
 8014e28:	e7fe      	b.n	8014e28 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014e2a:	68ba      	ldr	r2, [r7, #8]
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d90a      	bls.n	8014e48 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e36:	f383 8811 	msr	BASEPRI, r3
 8014e3a:	f3bf 8f6f 	isb	sy
 8014e3e:	f3bf 8f4f 	dsb	sy
 8014e42:	617b      	str	r3, [r7, #20]
}
 8014e44:	bf00      	nop
 8014e46:	e7fe      	b.n	8014e46 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014e48:	2302      	movs	r3, #2
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	2100      	movs	r1, #0
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f7ff ff00 	bl	8014c58 <xQueueGenericCreateStatic>
 8014e58:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d002      	beq.n	8014e66 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	68ba      	ldr	r2, [r7, #8]
 8014e64:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014e66:	69fb      	ldr	r3, [r7, #28]
	}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3720      	adds	r7, #32
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d10a      	bne.n	8014e96 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8014e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e84:	f383 8811 	msr	BASEPRI, r3
 8014e88:	f3bf 8f6f 	isb	sy
 8014e8c:	f3bf 8f4f 	dsb	sy
 8014e90:	613b      	str	r3, [r7, #16]
}
 8014e92:	bf00      	nop
 8014e94:	e7fe      	b.n	8014e94 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d90a      	bls.n	8014eb4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea2:	f383 8811 	msr	BASEPRI, r3
 8014ea6:	f3bf 8f6f 	isb	sy
 8014eaa:	f3bf 8f4f 	dsb	sy
 8014eae:	60fb      	str	r3, [r7, #12]
}
 8014eb0:	bf00      	nop
 8014eb2:	e7fe      	b.n	8014eb2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014eb4:	2202      	movs	r2, #2
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff ff45 	bl	8014d48 <xQueueGenericCreate>
 8014ebe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d002      	beq.n	8014ecc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	683a      	ldr	r2, [r7, #0]
 8014eca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014ecc:	697b      	ldr	r3, [r7, #20]
	}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3718      	adds	r7, #24
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
	...

08014ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b08e      	sub	sp, #56	; 0x38
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	607a      	str	r2, [r7, #4]
 8014ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10a      	bne.n	8014f0a <xQueueGenericSend+0x32>
	__asm volatile
 8014ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef8:	f383 8811 	msr	BASEPRI, r3
 8014efc:	f3bf 8f6f 	isb	sy
 8014f00:	f3bf 8f4f 	dsb	sy
 8014f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014f06:	bf00      	nop
 8014f08:	e7fe      	b.n	8014f08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d103      	bne.n	8014f18 <xQueueGenericSend+0x40>
 8014f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d101      	bne.n	8014f1c <xQueueGenericSend+0x44>
 8014f18:	2301      	movs	r3, #1
 8014f1a:	e000      	b.n	8014f1e <xQueueGenericSend+0x46>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d10a      	bne.n	8014f38 <xQueueGenericSend+0x60>
	__asm volatile
 8014f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f26:	f383 8811 	msr	BASEPRI, r3
 8014f2a:	f3bf 8f6f 	isb	sy
 8014f2e:	f3bf 8f4f 	dsb	sy
 8014f32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f34:	bf00      	nop
 8014f36:	e7fe      	b.n	8014f36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	2b02      	cmp	r3, #2
 8014f3c:	d103      	bne.n	8014f46 <xQueueGenericSend+0x6e>
 8014f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	d101      	bne.n	8014f4a <xQueueGenericSend+0x72>
 8014f46:	2301      	movs	r3, #1
 8014f48:	e000      	b.n	8014f4c <xQueueGenericSend+0x74>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d10a      	bne.n	8014f66 <xQueueGenericSend+0x8e>
	__asm volatile
 8014f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	623b      	str	r3, [r7, #32]
}
 8014f62:	bf00      	nop
 8014f64:	e7fe      	b.n	8014f64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f66:	f001 fddd 	bl	8016b24 <xTaskGetSchedulerState>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d102      	bne.n	8014f76 <xQueueGenericSend+0x9e>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d101      	bne.n	8014f7a <xQueueGenericSend+0xa2>
 8014f76:	2301      	movs	r3, #1
 8014f78:	e000      	b.n	8014f7c <xQueueGenericSend+0xa4>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d10a      	bne.n	8014f96 <xQueueGenericSend+0xbe>
	__asm volatile
 8014f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f84:	f383 8811 	msr	BASEPRI, r3
 8014f88:	f3bf 8f6f 	isb	sy
 8014f8c:	f3bf 8f4f 	dsb	sy
 8014f90:	61fb      	str	r3, [r7, #28]
}
 8014f92:	bf00      	nop
 8014f94:	e7fe      	b.n	8014f94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014f96:	f002 fc1d 	bl	80177d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	d302      	bcc.n	8014fac <xQueueGenericSend+0xd4>
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	2b02      	cmp	r3, #2
 8014faa:	d129      	bne.n	8015000 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014fac:	683a      	ldr	r2, [r7, #0]
 8014fae:	68b9      	ldr	r1, [r7, #8]
 8014fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fb2:	f000 fc5e 	bl	8015872 <prvCopyDataToQueue>
 8014fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d010      	beq.n	8014fe2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc2:	3324      	adds	r3, #36	; 0x24
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f001 fbdb 	bl	8016780 <xTaskRemoveFromEventList>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d013      	beq.n	8014ff8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014fd0:	4b3f      	ldr	r3, [pc, #252]	; (80150d0 <xQueueGenericSend+0x1f8>)
 8014fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fd6:	601a      	str	r2, [r3, #0]
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	e00a      	b.n	8014ff8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d007      	beq.n	8014ff8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014fe8:	4b39      	ldr	r3, [pc, #228]	; (80150d0 <xQueueGenericSend+0x1f8>)
 8014fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fee:	601a      	str	r2, [r3, #0]
 8014ff0:	f3bf 8f4f 	dsb	sy
 8014ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014ff8:	f002 fc1c 	bl	8017834 <vPortExitCritical>
				return pdPASS;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	e063      	b.n	80150c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d103      	bne.n	801500e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015006:	f002 fc15 	bl	8017834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801500a:	2300      	movs	r3, #0
 801500c:	e05c      	b.n	80150c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015010:	2b00      	cmp	r3, #0
 8015012:	d106      	bne.n	8015022 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015014:	f107 0314 	add.w	r3, r7, #20
 8015018:	4618      	mov	r0, r3
 801501a:	f001 fc15 	bl	8016848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801501e:	2301      	movs	r3, #1
 8015020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015022:	f002 fc07 	bl	8017834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015026:	f001 f981 	bl	801632c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801502a:	f002 fbd3 	bl	80177d4 <vPortEnterCritical>
 801502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015034:	b25b      	sxtb	r3, r3
 8015036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801503a:	d103      	bne.n	8015044 <xQueueGenericSend+0x16c>
 801503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503e:	2200      	movs	r2, #0
 8015040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801504a:	b25b      	sxtb	r3, r3
 801504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015050:	d103      	bne.n	801505a <xQueueGenericSend+0x182>
 8015052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015054:	2200      	movs	r2, #0
 8015056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801505a:	f002 fbeb 	bl	8017834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801505e:	1d3a      	adds	r2, r7, #4
 8015060:	f107 0314 	add.w	r3, r7, #20
 8015064:	4611      	mov	r1, r2
 8015066:	4618      	mov	r0, r3
 8015068:	f001 fc04 	bl	8016874 <xTaskCheckForTimeOut>
 801506c:	4603      	mov	r3, r0
 801506e:	2b00      	cmp	r3, #0
 8015070:	d124      	bne.n	80150bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015074:	f000 fcf5 	bl	8015a62 <prvIsQueueFull>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	d018      	beq.n	80150b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015080:	3310      	adds	r3, #16
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	4611      	mov	r1, r2
 8015086:	4618      	mov	r0, r3
 8015088:	f001 fb2a 	bl	80166e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801508c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801508e:	f000 fc80 	bl	8015992 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015092:	f001 f959 	bl	8016348 <xTaskResumeAll>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	f47f af7c 	bne.w	8014f96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801509e:	4b0c      	ldr	r3, [pc, #48]	; (80150d0 <xQueueGenericSend+0x1f8>)
 80150a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150a4:	601a      	str	r2, [r3, #0]
 80150a6:	f3bf 8f4f 	dsb	sy
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	e772      	b.n	8014f96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80150b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150b2:	f000 fc6e 	bl	8015992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150b6:	f001 f947 	bl	8016348 <xTaskResumeAll>
 80150ba:	e76c      	b.n	8014f96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80150bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150be:	f000 fc68 	bl	8015992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150c2:	f001 f941 	bl	8016348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80150c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3738      	adds	r7, #56	; 0x38
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	e000ed04 	.word	0xe000ed04

080150d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b090      	sub	sp, #64	; 0x40
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	607a      	str	r2, [r7, #4]
 80150e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80150e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d10a      	bne.n	8015102 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80150ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f0:	f383 8811 	msr	BASEPRI, r3
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	f3bf 8f4f 	dsb	sy
 80150fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80150fe:	bf00      	nop
 8015100:	e7fe      	b.n	8015100 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d103      	bne.n	8015110 <xQueueGenericSendFromISR+0x3c>
 8015108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801510c:	2b00      	cmp	r3, #0
 801510e:	d101      	bne.n	8015114 <xQueueGenericSendFromISR+0x40>
 8015110:	2301      	movs	r3, #1
 8015112:	e000      	b.n	8015116 <xQueueGenericSendFromISR+0x42>
 8015114:	2300      	movs	r3, #0
 8015116:	2b00      	cmp	r3, #0
 8015118:	d10a      	bne.n	8015130 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801511e:	f383 8811 	msr	BASEPRI, r3
 8015122:	f3bf 8f6f 	isb	sy
 8015126:	f3bf 8f4f 	dsb	sy
 801512a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801512c:	bf00      	nop
 801512e:	e7fe      	b.n	801512e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	2b02      	cmp	r3, #2
 8015134:	d103      	bne.n	801513e <xQueueGenericSendFromISR+0x6a>
 8015136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801513a:	2b01      	cmp	r3, #1
 801513c:	d101      	bne.n	8015142 <xQueueGenericSendFromISR+0x6e>
 801513e:	2301      	movs	r3, #1
 8015140:	e000      	b.n	8015144 <xQueueGenericSendFromISR+0x70>
 8015142:	2300      	movs	r3, #0
 8015144:	2b00      	cmp	r3, #0
 8015146:	d10a      	bne.n	801515e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801514c:	f383 8811 	msr	BASEPRI, r3
 8015150:	f3bf 8f6f 	isb	sy
 8015154:	f3bf 8f4f 	dsb	sy
 8015158:	623b      	str	r3, [r7, #32]
}
 801515a:	bf00      	nop
 801515c:	e7fe      	b.n	801515c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801515e:	f002 fc1b 	bl	8017998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015162:	f3ef 8211 	mrs	r2, BASEPRI
 8015166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801516a:	f383 8811 	msr	BASEPRI, r3
 801516e:	f3bf 8f6f 	isb	sy
 8015172:	f3bf 8f4f 	dsb	sy
 8015176:	61fa      	str	r2, [r7, #28]
 8015178:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801517a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801517c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015186:	429a      	cmp	r2, r3
 8015188:	d302      	bcc.n	8015190 <xQueueGenericSendFromISR+0xbc>
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	2b02      	cmp	r3, #2
 801518e:	d12f      	bne.n	80151f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801519e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80151a0:	683a      	ldr	r2, [r7, #0]
 80151a2:	68b9      	ldr	r1, [r7, #8]
 80151a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80151a6:	f000 fb64 	bl	8015872 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80151aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80151ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b2:	d112      	bne.n	80151da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80151b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d016      	beq.n	80151ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80151bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151be:	3324      	adds	r3, #36	; 0x24
 80151c0:	4618      	mov	r0, r3
 80151c2:	f001 fadd 	bl	8016780 <xTaskRemoveFromEventList>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d00e      	beq.n	80151ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00b      	beq.n	80151ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2201      	movs	r2, #1
 80151d6:	601a      	str	r2, [r3, #0]
 80151d8:	e007      	b.n	80151ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80151da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80151de:	3301      	adds	r3, #1
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	b25a      	sxtb	r2, r3
 80151e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80151ea:	2301      	movs	r3, #1
 80151ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80151ee:	e001      	b.n	80151f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80151f0:	2300      	movs	r3, #0
 80151f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80151fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015202:	4618      	mov	r0, r3
 8015204:	3740      	adds	r7, #64	; 0x40
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}

0801520a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b08e      	sub	sp, #56	; 0x38
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
 8015212:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10a      	bne.n	8015234 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015222:	f383 8811 	msr	BASEPRI, r3
 8015226:	f3bf 8f6f 	isb	sy
 801522a:	f3bf 8f4f 	dsb	sy
 801522e:	623b      	str	r3, [r7, #32]
}
 8015230:	bf00      	nop
 8015232:	e7fe      	b.n	8015232 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00a      	beq.n	8015252 <xQueueGiveFromISR+0x48>
	__asm volatile
 801523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015240:	f383 8811 	msr	BASEPRI, r3
 8015244:	f3bf 8f6f 	isb	sy
 8015248:	f3bf 8f4f 	dsb	sy
 801524c:	61fb      	str	r3, [r7, #28]
}
 801524e:	bf00      	nop
 8015250:	e7fe      	b.n	8015250 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d103      	bne.n	8015262 <xQueueGiveFromISR+0x58>
 801525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525c:	689b      	ldr	r3, [r3, #8]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <xQueueGiveFromISR+0x5c>
 8015262:	2301      	movs	r3, #1
 8015264:	e000      	b.n	8015268 <xQueueGiveFromISR+0x5e>
 8015266:	2300      	movs	r3, #0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d10a      	bne.n	8015282 <xQueueGiveFromISR+0x78>
	__asm volatile
 801526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015270:	f383 8811 	msr	BASEPRI, r3
 8015274:	f3bf 8f6f 	isb	sy
 8015278:	f3bf 8f4f 	dsb	sy
 801527c:	61bb      	str	r3, [r7, #24]
}
 801527e:	bf00      	nop
 8015280:	e7fe      	b.n	8015280 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015282:	f002 fb89 	bl	8017998 <vPortValidateInterruptPriority>
	__asm volatile
 8015286:	f3ef 8211 	mrs	r2, BASEPRI
 801528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801528e:	f383 8811 	msr	BASEPRI, r3
 8015292:	f3bf 8f6f 	isb	sy
 8015296:	f3bf 8f4f 	dsb	sy
 801529a:	617a      	str	r2, [r7, #20]
 801529c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801529e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80152a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80152a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d22b      	bcs.n	801530a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80152b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80152b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152be:	1c5a      	adds	r2, r3, #1
 80152c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80152c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80152c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152cc:	d112      	bne.n	80152f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80152ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d016      	beq.n	8015304 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80152d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d8:	3324      	adds	r3, #36	; 0x24
 80152da:	4618      	mov	r0, r3
 80152dc:	f001 fa50 	bl	8016780 <xTaskRemoveFromEventList>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d00e      	beq.n	8015304 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d00b      	beq.n	8015304 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2201      	movs	r2, #1
 80152f0:	601a      	str	r2, [r3, #0]
 80152f2:	e007      	b.n	8015304 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80152f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152f8:	3301      	adds	r3, #1
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	b25a      	sxtb	r2, r3
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015304:	2301      	movs	r3, #1
 8015306:	637b      	str	r3, [r7, #52]	; 0x34
 8015308:	e001      	b.n	801530e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801530a:	2300      	movs	r3, #0
 801530c:	637b      	str	r3, [r7, #52]	; 0x34
 801530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015310:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	f383 8811 	msr	BASEPRI, r3
}
 8015318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801531c:	4618      	mov	r0, r3
 801531e:	3738      	adds	r7, #56	; 0x38
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b08c      	sub	sp, #48	; 0x30
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015330:	2300      	movs	r3, #0
 8015332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533a:	2b00      	cmp	r3, #0
 801533c:	d10a      	bne.n	8015354 <xQueueReceive+0x30>
	__asm volatile
 801533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	623b      	str	r3, [r7, #32]
}
 8015350:	bf00      	nop
 8015352:	e7fe      	b.n	8015352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d103      	bne.n	8015362 <xQueueReceive+0x3e>
 801535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801535e:	2b00      	cmp	r3, #0
 8015360:	d101      	bne.n	8015366 <xQueueReceive+0x42>
 8015362:	2301      	movs	r3, #1
 8015364:	e000      	b.n	8015368 <xQueueReceive+0x44>
 8015366:	2300      	movs	r3, #0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d10a      	bne.n	8015382 <xQueueReceive+0x5e>
	__asm volatile
 801536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015370:	f383 8811 	msr	BASEPRI, r3
 8015374:	f3bf 8f6f 	isb	sy
 8015378:	f3bf 8f4f 	dsb	sy
 801537c:	61fb      	str	r3, [r7, #28]
}
 801537e:	bf00      	nop
 8015380:	e7fe      	b.n	8015380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015382:	f001 fbcf 	bl	8016b24 <xTaskGetSchedulerState>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d102      	bne.n	8015392 <xQueueReceive+0x6e>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <xQueueReceive+0x72>
 8015392:	2301      	movs	r3, #1
 8015394:	e000      	b.n	8015398 <xQueueReceive+0x74>
 8015396:	2300      	movs	r3, #0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10a      	bne.n	80153b2 <xQueueReceive+0x8e>
	__asm volatile
 801539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a0:	f383 8811 	msr	BASEPRI, r3
 80153a4:	f3bf 8f6f 	isb	sy
 80153a8:	f3bf 8f4f 	dsb	sy
 80153ac:	61bb      	str	r3, [r7, #24]
}
 80153ae:	bf00      	nop
 80153b0:	e7fe      	b.n	80153b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80153b2:	f002 fa0f 	bl	80177d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80153b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80153bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d01f      	beq.n	8015402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80153c2:	68b9      	ldr	r1, [r7, #8]
 80153c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153c6:	f000 fabe 	bl	8015946 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80153ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153cc:	1e5a      	subs	r2, r3, #1
 80153ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d4:	691b      	ldr	r3, [r3, #16]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d00f      	beq.n	80153fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153dc:	3310      	adds	r3, #16
 80153de:	4618      	mov	r0, r3
 80153e0:	f001 f9ce 	bl	8016780 <xTaskRemoveFromEventList>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d007      	beq.n	80153fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80153ea:	4b3d      	ldr	r3, [pc, #244]	; (80154e0 <xQueueReceive+0x1bc>)
 80153ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153f0:	601a      	str	r2, [r3, #0]
 80153f2:	f3bf 8f4f 	dsb	sy
 80153f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80153fa:	f002 fa1b 	bl	8017834 <vPortExitCritical>
				return pdPASS;
 80153fe:	2301      	movs	r3, #1
 8015400:	e069      	b.n	80154d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d103      	bne.n	8015410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015408:	f002 fa14 	bl	8017834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801540c:	2300      	movs	r3, #0
 801540e:	e062      	b.n	80154d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015412:	2b00      	cmp	r3, #0
 8015414:	d106      	bne.n	8015424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015416:	f107 0310 	add.w	r3, r7, #16
 801541a:	4618      	mov	r0, r3
 801541c:	f001 fa14 	bl	8016848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015420:	2301      	movs	r3, #1
 8015422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015424:	f002 fa06 	bl	8017834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015428:	f000 ff80 	bl	801632c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801542c:	f002 f9d2 	bl	80177d4 <vPortEnterCritical>
 8015430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015436:	b25b      	sxtb	r3, r3
 8015438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801543c:	d103      	bne.n	8015446 <xQueueReceive+0x122>
 801543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015440:	2200      	movs	r2, #0
 8015442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801544c:	b25b      	sxtb	r3, r3
 801544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015452:	d103      	bne.n	801545c <xQueueReceive+0x138>
 8015454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015456:	2200      	movs	r2, #0
 8015458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801545c:	f002 f9ea 	bl	8017834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015460:	1d3a      	adds	r2, r7, #4
 8015462:	f107 0310 	add.w	r3, r7, #16
 8015466:	4611      	mov	r1, r2
 8015468:	4618      	mov	r0, r3
 801546a:	f001 fa03 	bl	8016874 <xTaskCheckForTimeOut>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d123      	bne.n	80154bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015476:	f000 fade 	bl	8015a36 <prvIsQueueEmpty>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d017      	beq.n	80154b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015482:	3324      	adds	r3, #36	; 0x24
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	4611      	mov	r1, r2
 8015488:	4618      	mov	r0, r3
 801548a:	f001 f929 	bl	80166e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801548e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015490:	f000 fa7f 	bl	8015992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015494:	f000 ff58 	bl	8016348 <xTaskResumeAll>
 8015498:	4603      	mov	r3, r0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d189      	bne.n	80153b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801549e:	4b10      	ldr	r3, [pc, #64]	; (80154e0 <xQueueReceive+0x1bc>)
 80154a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154a4:	601a      	str	r2, [r3, #0]
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	f3bf 8f6f 	isb	sy
 80154ae:	e780      	b.n	80153b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80154b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154b2:	f000 fa6e 	bl	8015992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80154b6:	f000 ff47 	bl	8016348 <xTaskResumeAll>
 80154ba:	e77a      	b.n	80153b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80154bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154be:	f000 fa68 	bl	8015992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80154c2:	f000 ff41 	bl	8016348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80154c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154c8:	f000 fab5 	bl	8015a36 <prvIsQueueEmpty>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	f43f af6f 	beq.w	80153b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80154d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3730      	adds	r7, #48	; 0x30
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	e000ed04 	.word	0xe000ed04

080154e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08e      	sub	sp, #56	; 0x38
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80154ee:	2300      	movs	r3, #0
 80154f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80154f6:	2300      	movs	r3, #0
 80154f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d10a      	bne.n	8015516 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015504:	f383 8811 	msr	BASEPRI, r3
 8015508:	f3bf 8f6f 	isb	sy
 801550c:	f3bf 8f4f 	dsb	sy
 8015510:	623b      	str	r3, [r7, #32]
}
 8015512:	bf00      	nop
 8015514:	e7fe      	b.n	8015514 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801551a:	2b00      	cmp	r3, #0
 801551c:	d00a      	beq.n	8015534 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015522:	f383 8811 	msr	BASEPRI, r3
 8015526:	f3bf 8f6f 	isb	sy
 801552a:	f3bf 8f4f 	dsb	sy
 801552e:	61fb      	str	r3, [r7, #28]
}
 8015530:	bf00      	nop
 8015532:	e7fe      	b.n	8015532 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015534:	f001 faf6 	bl	8016b24 <xTaskGetSchedulerState>
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	d102      	bne.n	8015544 <xQueueSemaphoreTake+0x60>
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d101      	bne.n	8015548 <xQueueSemaphoreTake+0x64>
 8015544:	2301      	movs	r3, #1
 8015546:	e000      	b.n	801554a <xQueueSemaphoreTake+0x66>
 8015548:	2300      	movs	r3, #0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10a      	bne.n	8015564 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	61bb      	str	r3, [r7, #24]
}
 8015560:	bf00      	nop
 8015562:	e7fe      	b.n	8015562 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015564:	f002 f936 	bl	80177d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801556c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015570:	2b00      	cmp	r3, #0
 8015572:	d024      	beq.n	80155be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015576:	1e5a      	subs	r2, r3, #1
 8015578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d104      	bne.n	801558e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015584:	f001 fc44 	bl	8016e10 <pvTaskIncrementMutexHeldCount>
 8015588:	4602      	mov	r2, r0
 801558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015590:	691b      	ldr	r3, [r3, #16]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00f      	beq.n	80155b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015598:	3310      	adds	r3, #16
 801559a:	4618      	mov	r0, r3
 801559c:	f001 f8f0 	bl	8016780 <xTaskRemoveFromEventList>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d007      	beq.n	80155b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80155a6:	4b54      	ldr	r3, [pc, #336]	; (80156f8 <xQueueSemaphoreTake+0x214>)
 80155a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155ac:	601a      	str	r2, [r3, #0]
 80155ae:	f3bf 8f4f 	dsb	sy
 80155b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80155b6:	f002 f93d 	bl	8017834 <vPortExitCritical>
				return pdPASS;
 80155ba:	2301      	movs	r3, #1
 80155bc:	e097      	b.n	80156ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d111      	bne.n	80155e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80155c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00a      	beq.n	80155e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80155ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ce:	f383 8811 	msr	BASEPRI, r3
 80155d2:	f3bf 8f6f 	isb	sy
 80155d6:	f3bf 8f4f 	dsb	sy
 80155da:	617b      	str	r3, [r7, #20]
}
 80155dc:	bf00      	nop
 80155de:	e7fe      	b.n	80155de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80155e0:	f002 f928 	bl	8017834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80155e4:	2300      	movs	r3, #0
 80155e6:	e082      	b.n	80156ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80155e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80155ee:	f107 030c 	add.w	r3, r7, #12
 80155f2:	4618      	mov	r0, r3
 80155f4:	f001 f928 	bl	8016848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80155f8:	2301      	movs	r3, #1
 80155fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80155fc:	f002 f91a 	bl	8017834 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015600:	f000 fe94 	bl	801632c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015604:	f002 f8e6 	bl	80177d4 <vPortEnterCritical>
 8015608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801560e:	b25b      	sxtb	r3, r3
 8015610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015614:	d103      	bne.n	801561e <xQueueSemaphoreTake+0x13a>
 8015616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015618:	2200      	movs	r2, #0
 801561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015624:	b25b      	sxtb	r3, r3
 8015626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801562a:	d103      	bne.n	8015634 <xQueueSemaphoreTake+0x150>
 801562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562e:	2200      	movs	r2, #0
 8015630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015634:	f002 f8fe 	bl	8017834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015638:	463a      	mov	r2, r7
 801563a:	f107 030c 	add.w	r3, r7, #12
 801563e:	4611      	mov	r1, r2
 8015640:	4618      	mov	r0, r3
 8015642:	f001 f917 	bl	8016874 <xTaskCheckForTimeOut>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d132      	bne.n	80156b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801564c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801564e:	f000 f9f2 	bl	8015a36 <prvIsQueueEmpty>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d026      	beq.n	80156a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d109      	bne.n	8015674 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015660:	f002 f8b8 	bl	80177d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015666:	689b      	ldr	r3, [r3, #8]
 8015668:	4618      	mov	r0, r3
 801566a:	f001 fa79 	bl	8016b60 <xTaskPriorityInherit>
 801566e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015670:	f002 f8e0 	bl	8017834 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	3324      	adds	r3, #36	; 0x24
 8015678:	683a      	ldr	r2, [r7, #0]
 801567a:	4611      	mov	r1, r2
 801567c:	4618      	mov	r0, r3
 801567e:	f001 f82f 	bl	80166e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015684:	f000 f985 	bl	8015992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015688:	f000 fe5e 	bl	8016348 <xTaskResumeAll>
 801568c:	4603      	mov	r3, r0
 801568e:	2b00      	cmp	r3, #0
 8015690:	f47f af68 	bne.w	8015564 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015694:	4b18      	ldr	r3, [pc, #96]	; (80156f8 <xQueueSemaphoreTake+0x214>)
 8015696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	f3bf 8f6f 	isb	sy
 80156a4:	e75e      	b.n	8015564 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80156a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156a8:	f000 f973 	bl	8015992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80156ac:	f000 fe4c 	bl	8016348 <xTaskResumeAll>
 80156b0:	e758      	b.n	8015564 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80156b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156b4:	f000 f96d 	bl	8015992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80156b8:	f000 fe46 	bl	8016348 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80156bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156be:	f000 f9ba 	bl	8015a36 <prvIsQueueEmpty>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f43f af4d 	beq.w	8015564 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80156ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d00d      	beq.n	80156ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80156d0:	f002 f880 	bl	80177d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80156d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156d6:	f000 f8b4 	bl	8015842 <prvGetDisinheritPriorityAfterTimeout>
 80156da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80156dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156e2:	4618      	mov	r0, r3
 80156e4:	f001 fb12 	bl	8016d0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80156e8:	f002 f8a4 	bl	8017834 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80156ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3738      	adds	r7, #56	; 0x38
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop
 80156f8:	e000ed04 	.word	0xe000ed04

080156fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b08e      	sub	sp, #56	; 0x38
 8015700:	af00      	add	r7, sp, #0
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570e:	2b00      	cmp	r3, #0
 8015710:	d10a      	bne.n	8015728 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015716:	f383 8811 	msr	BASEPRI, r3
 801571a:	f3bf 8f6f 	isb	sy
 801571e:	f3bf 8f4f 	dsb	sy
 8015722:	623b      	str	r3, [r7, #32]
}
 8015724:	bf00      	nop
 8015726:	e7fe      	b.n	8015726 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d103      	bne.n	8015736 <xQueueReceiveFromISR+0x3a>
 801572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015732:	2b00      	cmp	r3, #0
 8015734:	d101      	bne.n	801573a <xQueueReceiveFromISR+0x3e>
 8015736:	2301      	movs	r3, #1
 8015738:	e000      	b.n	801573c <xQueueReceiveFromISR+0x40>
 801573a:	2300      	movs	r3, #0
 801573c:	2b00      	cmp	r3, #0
 801573e:	d10a      	bne.n	8015756 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015744:	f383 8811 	msr	BASEPRI, r3
 8015748:	f3bf 8f6f 	isb	sy
 801574c:	f3bf 8f4f 	dsb	sy
 8015750:	61fb      	str	r3, [r7, #28]
}
 8015752:	bf00      	nop
 8015754:	e7fe      	b.n	8015754 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015756:	f002 f91f 	bl	8017998 <vPortValidateInterruptPriority>
	__asm volatile
 801575a:	f3ef 8211 	mrs	r2, BASEPRI
 801575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	61ba      	str	r2, [r7, #24]
 8015770:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015772:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801577a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577e:	2b00      	cmp	r3, #0
 8015780:	d02f      	beq.n	80157e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801578c:	68b9      	ldr	r1, [r7, #8]
 801578e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015790:	f000 f8d9 	bl	8015946 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015796:	1e5a      	subs	r2, r3, #1
 8015798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801579a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801579c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80157a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157a4:	d112      	bne.n	80157cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a8:	691b      	ldr	r3, [r3, #16]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d016      	beq.n	80157dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b0:	3310      	adds	r3, #16
 80157b2:	4618      	mov	r0, r3
 80157b4:	f000 ffe4 	bl	8016780 <xTaskRemoveFromEventList>
 80157b8:	4603      	mov	r3, r0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d00e      	beq.n	80157dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00b      	beq.n	80157dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2201      	movs	r2, #1
 80157c8:	601a      	str	r2, [r3, #0]
 80157ca:	e007      	b.n	80157dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80157cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157d0:	3301      	adds	r3, #1
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	b25a      	sxtb	r2, r3
 80157d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80157dc:	2301      	movs	r3, #1
 80157de:	637b      	str	r3, [r7, #52]	; 0x34
 80157e0:	e001      	b.n	80157e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80157e2:	2300      	movs	r3, #0
 80157e4:	637b      	str	r3, [r7, #52]	; 0x34
 80157e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	f383 8811 	msr	BASEPRI, r3
}
 80157f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80157f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3738      	adds	r7, #56	; 0x38
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}

080157fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d10a      	bne.n	8015824 <vQueueDelete+0x28>
	__asm volatile
 801580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015812:	f383 8811 	msr	BASEPRI, r3
 8015816:	f3bf 8f6f 	isb	sy
 801581a:	f3bf 8f4f 	dsb	sy
 801581e:	60bb      	str	r3, [r7, #8]
}
 8015820:	bf00      	nop
 8015822:	e7fe      	b.n	8015822 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015824:	68f8      	ldr	r0, [r7, #12]
 8015826:	f000 f95f 	bl	8015ae8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015830:	2b00      	cmp	r3, #0
 8015832:	d102      	bne.n	801583a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f002 f9bb 	bl	8017bb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801583a:	bf00      	nop
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}

08015842 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015842:	b480      	push	{r7}
 8015844:	b085      	sub	sp, #20
 8015846:	af00      	add	r7, sp, #0
 8015848:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584e:	2b00      	cmp	r3, #0
 8015850:	d006      	beq.n	8015860 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801585c:	60fb      	str	r3, [r7, #12]
 801585e:	e001      	b.n	8015864 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015860:	2300      	movs	r3, #0
 8015862:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015864:	68fb      	ldr	r3, [r7, #12]
	}
 8015866:	4618      	mov	r0, r3
 8015868:	3714      	adds	r7, #20
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr

08015872 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015872:	b580      	push	{r7, lr}
 8015874:	b086      	sub	sp, #24
 8015876:	af00      	add	r7, sp, #0
 8015878:	60f8      	str	r0, [r7, #12]
 801587a:	60b9      	str	r1, [r7, #8]
 801587c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801587e:	2300      	movs	r3, #0
 8015880:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015886:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10d      	bne.n	80158ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d14d      	bne.n	8015934 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	4618      	mov	r0, r3
 801589e:	f001 f9c7 	bl	8016c30 <xTaskPriorityDisinherit>
 80158a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2200      	movs	r2, #0
 80158a8:	609a      	str	r2, [r3, #8]
 80158aa:	e043      	b.n	8015934 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d119      	bne.n	80158e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	6858      	ldr	r0, [r3, #4]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ba:	461a      	mov	r2, r3
 80158bc:	68b9      	ldr	r1, [r7, #8]
 80158be:	f004 f895 	bl	80199ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	685a      	ldr	r2, [r3, #4]
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ca:	441a      	add	r2, r3
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	685a      	ldr	r2, [r3, #4]
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	689b      	ldr	r3, [r3, #8]
 80158d8:	429a      	cmp	r2, r3
 80158da:	d32b      	bcc.n	8015934 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	605a      	str	r2, [r3, #4]
 80158e4:	e026      	b.n	8015934 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	68d8      	ldr	r0, [r3, #12]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ee:	461a      	mov	r2, r3
 80158f0:	68b9      	ldr	r1, [r7, #8]
 80158f2:	f004 f87b 	bl	80199ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	68da      	ldr	r2, [r3, #12]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158fe:	425b      	negs	r3, r3
 8015900:	441a      	add	r2, r3
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	68da      	ldr	r2, [r3, #12]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	429a      	cmp	r2, r3
 8015910:	d207      	bcs.n	8015922 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	689a      	ldr	r2, [r3, #8]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801591a:	425b      	negs	r3, r3
 801591c:	441a      	add	r2, r3
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2b02      	cmp	r3, #2
 8015926:	d105      	bne.n	8015934 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d002      	beq.n	8015934 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	3b01      	subs	r3, #1
 8015932:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	1c5a      	adds	r2, r3, #1
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801593c:	697b      	ldr	r3, [r7, #20]
}
 801593e:	4618      	mov	r0, r3
 8015940:	3718      	adds	r7, #24
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b082      	sub	sp, #8
 801594a:	af00      	add	r7, sp, #0
 801594c:	6078      	str	r0, [r7, #4]
 801594e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015954:	2b00      	cmp	r3, #0
 8015956:	d018      	beq.n	801598a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	68da      	ldr	r2, [r3, #12]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015960:	441a      	add	r2, r3
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	68da      	ldr	r2, [r3, #12]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	689b      	ldr	r3, [r3, #8]
 801596e:	429a      	cmp	r2, r3
 8015970:	d303      	bcc.n	801597a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681a      	ldr	r2, [r3, #0]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	68d9      	ldr	r1, [r3, #12]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015982:	461a      	mov	r2, r3
 8015984:	6838      	ldr	r0, [r7, #0]
 8015986:	f004 f831 	bl	80199ec <memcpy>
	}
}
 801598a:	bf00      	nop
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015992:	b580      	push	{r7, lr}
 8015994:	b084      	sub	sp, #16
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801599a:	f001 ff1b 	bl	80177d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159a6:	e011      	b.n	80159cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d012      	beq.n	80159d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	3324      	adds	r3, #36	; 0x24
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 fee3 	bl	8016780 <xTaskRemoveFromEventList>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80159c0:	f000 ffba 	bl	8016938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80159c4:	7bfb      	ldrb	r3, [r7, #15]
 80159c6:	3b01      	subs	r3, #1
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	dce9      	bgt.n	80159a8 <prvUnlockQueue+0x16>
 80159d4:	e000      	b.n	80159d8 <prvUnlockQueue+0x46>
					break;
 80159d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	22ff      	movs	r2, #255	; 0xff
 80159dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80159e0:	f001 ff28 	bl	8017834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80159e4:	f001 fef6 	bl	80177d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80159ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80159f0:	e011      	b.n	8015a16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	691b      	ldr	r3, [r3, #16]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d012      	beq.n	8015a20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	3310      	adds	r3, #16
 80159fe:	4618      	mov	r0, r3
 8015a00:	f000 febe 	bl	8016780 <xTaskRemoveFromEventList>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d001      	beq.n	8015a0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015a0a:	f000 ff95 	bl	8016938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015a0e:	7bbb      	ldrb	r3, [r7, #14]
 8015a10:	3b01      	subs	r3, #1
 8015a12:	b2db      	uxtb	r3, r3
 8015a14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	dce9      	bgt.n	80159f2 <prvUnlockQueue+0x60>
 8015a1e:	e000      	b.n	8015a22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015a20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	22ff      	movs	r2, #255	; 0xff
 8015a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015a2a:	f001 ff03 	bl	8017834 <vPortExitCritical>
}
 8015a2e:	bf00      	nop
 8015a30:	3710      	adds	r7, #16
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}

08015a36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015a36:	b580      	push	{r7, lr}
 8015a38:	b084      	sub	sp, #16
 8015a3a:	af00      	add	r7, sp, #0
 8015a3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a3e:	f001 fec9 	bl	80177d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d102      	bne.n	8015a50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	60fb      	str	r3, [r7, #12]
 8015a4e:	e001      	b.n	8015a54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015a50:	2300      	movs	r3, #0
 8015a52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015a54:	f001 feee 	bl	8017834 <vPortExitCritical>

	return xReturn;
 8015a58:	68fb      	ldr	r3, [r7, #12]
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3710      	adds	r7, #16
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b084      	sub	sp, #16
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a6a:	f001 feb3 	bl	80177d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d102      	bne.n	8015a80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	60fb      	str	r3, [r7, #12]
 8015a7e:	e001      	b.n	8015a84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015a80:	2300      	movs	r3, #0
 8015a82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015a84:	f001 fed6 	bl	8017834 <vPortExitCritical>

	return xReturn;
 8015a88:	68fb      	ldr	r3, [r7, #12]
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
	...

08015a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015a94:	b480      	push	{r7}
 8015a96:	b085      	sub	sp, #20
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	60fb      	str	r3, [r7, #12]
 8015aa2:	e014      	b.n	8015ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015aa4:	4a0f      	ldr	r2, [pc, #60]	; (8015ae4 <vQueueAddToRegistry+0x50>)
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d10b      	bne.n	8015ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015ab0:	490c      	ldr	r1, [pc, #48]	; (8015ae4 <vQueueAddToRegistry+0x50>)
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	683a      	ldr	r2, [r7, #0]
 8015ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015aba:	4a0a      	ldr	r2, [pc, #40]	; (8015ae4 <vQueueAddToRegistry+0x50>)
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	4413      	add	r3, r2
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015ac6:	e006      	b.n	8015ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	3301      	adds	r3, #1
 8015acc:	60fb      	str	r3, [r7, #12]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2b07      	cmp	r3, #7
 8015ad2:	d9e7      	bls.n	8015aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015ad4:	bf00      	nop
 8015ad6:	bf00      	nop
 8015ad8:	3714      	adds	r7, #20
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	20007538 	.word	0x20007538

08015ae8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015ae8:	b480      	push	{r7}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015af0:	2300      	movs	r3, #0
 8015af2:	60fb      	str	r3, [r7, #12]
 8015af4:	e016      	b.n	8015b24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015af6:	4a10      	ldr	r2, [pc, #64]	; (8015b38 <vQueueUnregisterQueue+0x50>)
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	00db      	lsls	r3, r3, #3
 8015afc:	4413      	add	r3, r2
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d10b      	bne.n	8015b1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015b06:	4a0c      	ldr	r2, [pc, #48]	; (8015b38 <vQueueUnregisterQueue+0x50>)
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015b10:	4a09      	ldr	r2, [pc, #36]	; (8015b38 <vQueueUnregisterQueue+0x50>)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	00db      	lsls	r3, r3, #3
 8015b16:	4413      	add	r3, r2
 8015b18:	2200      	movs	r2, #0
 8015b1a:	605a      	str	r2, [r3, #4]
				break;
 8015b1c:	e006      	b.n	8015b2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	3301      	adds	r3, #1
 8015b22:	60fb      	str	r3, [r7, #12]
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	2b07      	cmp	r3, #7
 8015b28:	d9e5      	bls.n	8015af6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015b2a:	bf00      	nop
 8015b2c:	bf00      	nop
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	20007538 	.word	0x20007538

08015b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b086      	sub	sp, #24
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015b4c:	f001 fe42 	bl	80177d4 <vPortEnterCritical>
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b56:	b25b      	sxtb	r3, r3
 8015b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b5c:	d103      	bne.n	8015b66 <vQueueWaitForMessageRestricted+0x2a>
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	2200      	movs	r2, #0
 8015b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b6c:	b25b      	sxtb	r3, r3
 8015b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b72:	d103      	bne.n	8015b7c <vQueueWaitForMessageRestricted+0x40>
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	2200      	movs	r2, #0
 8015b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b7c:	f001 fe5a 	bl	8017834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d106      	bne.n	8015b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	3324      	adds	r3, #36	; 0x24
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	68b9      	ldr	r1, [r7, #8]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f000 fdc9 	bl	8016728 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015b96:	6978      	ldr	r0, [r7, #20]
 8015b98:	f7ff fefb 	bl	8015992 <prvUnlockQueue>
	}
 8015b9c:	bf00      	nop
 8015b9e:	3718      	adds	r7, #24
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b08e      	sub	sp, #56	; 0x38
 8015ba8:	af04      	add	r7, sp, #16
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	60b9      	str	r1, [r7, #8]
 8015bae:	607a      	str	r2, [r7, #4]
 8015bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d10a      	bne.n	8015bce <xTaskCreateStatic+0x2a>
	__asm volatile
 8015bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bbc:	f383 8811 	msr	BASEPRI, r3
 8015bc0:	f3bf 8f6f 	isb	sy
 8015bc4:	f3bf 8f4f 	dsb	sy
 8015bc8:	623b      	str	r3, [r7, #32]
}
 8015bca:	bf00      	nop
 8015bcc:	e7fe      	b.n	8015bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10a      	bne.n	8015bea <xTaskCreateStatic+0x46>
	__asm volatile
 8015bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd8:	f383 8811 	msr	BASEPRI, r3
 8015bdc:	f3bf 8f6f 	isb	sy
 8015be0:	f3bf 8f4f 	dsb	sy
 8015be4:	61fb      	str	r3, [r7, #28]
}
 8015be6:	bf00      	nop
 8015be8:	e7fe      	b.n	8015be8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015bea:	23bc      	movs	r3, #188	; 0xbc
 8015bec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	2bbc      	cmp	r3, #188	; 0xbc
 8015bf2:	d00a      	beq.n	8015c0a <xTaskCreateStatic+0x66>
	__asm volatile
 8015bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf8:	f383 8811 	msr	BASEPRI, r3
 8015bfc:	f3bf 8f6f 	isb	sy
 8015c00:	f3bf 8f4f 	dsb	sy
 8015c04:	61bb      	str	r3, [r7, #24]
}
 8015c06:	bf00      	nop
 8015c08:	e7fe      	b.n	8015c08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d01e      	beq.n	8015c50 <xTaskCreateStatic+0xac>
 8015c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d01b      	beq.n	8015c50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	2202      	movs	r2, #2
 8015c26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	9303      	str	r3, [sp, #12]
 8015c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c30:	9302      	str	r3, [sp, #8]
 8015c32:	f107 0314 	add.w	r3, r7, #20
 8015c36:	9301      	str	r3, [sp, #4]
 8015c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	68b9      	ldr	r1, [r7, #8]
 8015c42:	68f8      	ldr	r0, [r7, #12]
 8015c44:	f000 f850 	bl	8015ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c4a:	f000 f8f3 	bl	8015e34 <prvAddNewTaskToReadyList>
 8015c4e:	e001      	b.n	8015c54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015c50:	2300      	movs	r3, #0
 8015c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015c54:	697b      	ldr	r3, [r7, #20]
	}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3728      	adds	r7, #40	; 0x28
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b08c      	sub	sp, #48	; 0x30
 8015c62:	af04      	add	r7, sp, #16
 8015c64:	60f8      	str	r0, [r7, #12]
 8015c66:	60b9      	str	r1, [r7, #8]
 8015c68:	603b      	str	r3, [r7, #0]
 8015c6a:	4613      	mov	r3, r2
 8015c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015c6e:	88fb      	ldrh	r3, [r7, #6]
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	4618      	mov	r0, r3
 8015c74:	f001 fed0 	bl	8017a18 <pvPortMalloc>
 8015c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d00e      	beq.n	8015c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015c80:	20bc      	movs	r0, #188	; 0xbc
 8015c82:	f001 fec9 	bl	8017a18 <pvPortMalloc>
 8015c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d003      	beq.n	8015c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	697a      	ldr	r2, [r7, #20]
 8015c92:	631a      	str	r2, [r3, #48]	; 0x30
 8015c94:	e005      	b.n	8015ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015c96:	6978      	ldr	r0, [r7, #20]
 8015c98:	f001 ff8a 	bl	8017bb0 <vPortFree>
 8015c9c:	e001      	b.n	8015ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d017      	beq.n	8015cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	2200      	movs	r2, #0
 8015cac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015cb0:	88fa      	ldrh	r2, [r7, #6]
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	9303      	str	r3, [sp, #12]
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	9302      	str	r3, [sp, #8]
 8015cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cbc:	9301      	str	r3, [sp, #4]
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	9300      	str	r3, [sp, #0]
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	68b9      	ldr	r1, [r7, #8]
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f000 f80e 	bl	8015ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015ccc:	69f8      	ldr	r0, [r7, #28]
 8015cce:	f000 f8b1 	bl	8015e34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	61bb      	str	r3, [r7, #24]
 8015cd6:	e002      	b.n	8015cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015cde:	69bb      	ldr	r3, [r7, #24]
	}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3720      	adds	r7, #32
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b088      	sub	sp, #32
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	60f8      	str	r0, [r7, #12]
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	607a      	str	r2, [r7, #4]
 8015cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	461a      	mov	r2, r3
 8015d00:	21a5      	movs	r1, #165	; 0xa5
 8015d02:	f003 fe9b 	bl	8019a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d10:	3b01      	subs	r3, #1
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	4413      	add	r3, r2
 8015d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015d18:	69bb      	ldr	r3, [r7, #24]
 8015d1a:	f023 0307 	bic.w	r3, r3, #7
 8015d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	f003 0307 	and.w	r3, r3, #7
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00a      	beq.n	8015d40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2e:	f383 8811 	msr	BASEPRI, r3
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	617b      	str	r3, [r7, #20]
}
 8015d3c:	bf00      	nop
 8015d3e:	e7fe      	b.n	8015d3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d01f      	beq.n	8015d86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d46:	2300      	movs	r3, #0
 8015d48:	61fb      	str	r3, [r7, #28]
 8015d4a:	e012      	b.n	8015d72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015d4c:	68ba      	ldr	r2, [r7, #8]
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	4413      	add	r3, r2
 8015d52:	7819      	ldrb	r1, [r3, #0]
 8015d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d56:	69fb      	ldr	r3, [r7, #28]
 8015d58:	4413      	add	r3, r2
 8015d5a:	3334      	adds	r3, #52	; 0x34
 8015d5c:	460a      	mov	r2, r1
 8015d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	4413      	add	r3, r2
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d006      	beq.n	8015d7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d6c:	69fb      	ldr	r3, [r7, #28]
 8015d6e:	3301      	adds	r3, #1
 8015d70:	61fb      	str	r3, [r7, #28]
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	2b0f      	cmp	r3, #15
 8015d76:	d9e9      	bls.n	8015d4c <prvInitialiseNewTask+0x64>
 8015d78:	e000      	b.n	8015d7c <prvInitialiseNewTask+0x94>
			{
				break;
 8015d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d7e:	2200      	movs	r2, #0
 8015d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015d84:	e003      	b.n	8015d8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	2b37      	cmp	r3, #55	; 0x37
 8015d92:	d901      	bls.n	8015d98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015d94:	2337      	movs	r3, #55	; 0x37
 8015d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da6:	2200      	movs	r2, #0
 8015da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dac:	3304      	adds	r3, #4
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7fe fe56 	bl	8014a60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db6:	3318      	adds	r3, #24
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fe fe51 	bl	8014a60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dde:	2200      	movs	r2, #0
 8015de0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de6:	3354      	adds	r3, #84	; 0x54
 8015de8:	2260      	movs	r2, #96	; 0x60
 8015dea:	2100      	movs	r1, #0
 8015dec:	4618      	mov	r0, r3
 8015dee:	f003 fe25 	bl	8019a3c <memset>
 8015df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df4:	4a0c      	ldr	r2, [pc, #48]	; (8015e28 <prvInitialiseNewTask+0x140>)
 8015df6:	659a      	str	r2, [r3, #88]	; 0x58
 8015df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfa:	4a0c      	ldr	r2, [pc, #48]	; (8015e2c <prvInitialiseNewTask+0x144>)
 8015dfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8015dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e00:	4a0b      	ldr	r2, [pc, #44]	; (8015e30 <prvInitialiseNewTask+0x148>)
 8015e02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e04:	683a      	ldr	r2, [r7, #0]
 8015e06:	68f9      	ldr	r1, [r7, #12]
 8015e08:	69b8      	ldr	r0, [r7, #24]
 8015e0a:	f001 fbb7 	bl	801757c <pxPortInitialiseStack>
 8015e0e:	4602      	mov	r2, r0
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d002      	beq.n	8015e20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015e20:	bf00      	nop
 8015e22:	3720      	adds	r7, #32
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}
 8015e28:	08020b04 	.word	0x08020b04
 8015e2c:	08020b24 	.word	0x08020b24
 8015e30:	08020ae4 	.word	0x08020ae4

08015e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015e3c:	f001 fcca 	bl	80177d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015e40:	4b2d      	ldr	r3, [pc, #180]	; (8015ef8 <prvAddNewTaskToReadyList+0xc4>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	3301      	adds	r3, #1
 8015e46:	4a2c      	ldr	r2, [pc, #176]	; (8015ef8 <prvAddNewTaskToReadyList+0xc4>)
 8015e48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015e4a:	4b2c      	ldr	r3, [pc, #176]	; (8015efc <prvAddNewTaskToReadyList+0xc8>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d109      	bne.n	8015e66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015e52:	4a2a      	ldr	r2, [pc, #168]	; (8015efc <prvAddNewTaskToReadyList+0xc8>)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015e58:	4b27      	ldr	r3, [pc, #156]	; (8015ef8 <prvAddNewTaskToReadyList+0xc4>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b01      	cmp	r3, #1
 8015e5e:	d110      	bne.n	8015e82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015e60:	f000 fd8e 	bl	8016980 <prvInitialiseTaskLists>
 8015e64:	e00d      	b.n	8015e82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015e66:	4b26      	ldr	r3, [pc, #152]	; (8015f00 <prvAddNewTaskToReadyList+0xcc>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d109      	bne.n	8015e82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015e6e:	4b23      	ldr	r3, [pc, #140]	; (8015efc <prvAddNewTaskToReadyList+0xc8>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d802      	bhi.n	8015e82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015e7c:	4a1f      	ldr	r2, [pc, #124]	; (8015efc <prvAddNewTaskToReadyList+0xc8>)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015e82:	4b20      	ldr	r3, [pc, #128]	; (8015f04 <prvAddNewTaskToReadyList+0xd0>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	3301      	adds	r3, #1
 8015e88:	4a1e      	ldr	r2, [pc, #120]	; (8015f04 <prvAddNewTaskToReadyList+0xd0>)
 8015e8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015e8c:	4b1d      	ldr	r3, [pc, #116]	; (8015f04 <prvAddNewTaskToReadyList+0xd0>)
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e98:	4b1b      	ldr	r3, [pc, #108]	; (8015f08 <prvAddNewTaskToReadyList+0xd4>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d903      	bls.n	8015ea8 <prvAddNewTaskToReadyList+0x74>
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ea4:	4a18      	ldr	r2, [pc, #96]	; (8015f08 <prvAddNewTaskToReadyList+0xd4>)
 8015ea6:	6013      	str	r3, [r2, #0]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eac:	4613      	mov	r3, r2
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	4413      	add	r3, r2
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	4a15      	ldr	r2, [pc, #84]	; (8015f0c <prvAddNewTaskToReadyList+0xd8>)
 8015eb6:	441a      	add	r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	3304      	adds	r3, #4
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	4610      	mov	r0, r2
 8015ec0:	f7fe fddb 	bl	8014a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ec4:	f001 fcb6 	bl	8017834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ec8:	4b0d      	ldr	r3, [pc, #52]	; (8015f00 <prvAddNewTaskToReadyList+0xcc>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00e      	beq.n	8015eee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015ed0:	4b0a      	ldr	r3, [pc, #40]	; (8015efc <prvAddNewTaskToReadyList+0xc8>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d207      	bcs.n	8015eee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015ede:	4b0c      	ldr	r3, [pc, #48]	; (8015f10 <prvAddNewTaskToReadyList+0xdc>)
 8015ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ee4:	601a      	str	r2, [r3, #0]
 8015ee6:	f3bf 8f4f 	dsb	sy
 8015eea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015eee:	bf00      	nop
 8015ef0:	3708      	adds	r7, #8
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20001460 	.word	0x20001460
 8015efc:	20000f8c 	.word	0x20000f8c
 8015f00:	2000146c 	.word	0x2000146c
 8015f04:	2000147c 	.word	0x2000147c
 8015f08:	20001468 	.word	0x20001468
 8015f0c:	20000f90 	.word	0x20000f90
 8015f10:	e000ed04 	.word	0xe000ed04

08015f14 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015f1c:	f001 fc5a 	bl	80177d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d102      	bne.n	8015f2c <vTaskDelete+0x18>
 8015f26:	4b2c      	ldr	r3, [pc, #176]	; (8015fd8 <vTaskDelete+0xc4>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	e000      	b.n	8015f2e <vTaskDelete+0x1a>
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	3304      	adds	r3, #4
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7fe fdfd 	bl	8014b34 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d004      	beq.n	8015f4c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	3318      	adds	r3, #24
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fe fdf4 	bl	8014b34 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015f4c:	4b23      	ldr	r3, [pc, #140]	; (8015fdc <vTaskDelete+0xc8>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	3301      	adds	r3, #1
 8015f52:	4a22      	ldr	r2, [pc, #136]	; (8015fdc <vTaskDelete+0xc8>)
 8015f54:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8015f56:	4b20      	ldr	r3, [pc, #128]	; (8015fd8 <vTaskDelete+0xc4>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	68fa      	ldr	r2, [r7, #12]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d10b      	bne.n	8015f78 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	3304      	adds	r3, #4
 8015f64:	4619      	mov	r1, r3
 8015f66:	481e      	ldr	r0, [pc, #120]	; (8015fe0 <vTaskDelete+0xcc>)
 8015f68:	f7fe fd87 	bl	8014a7a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8015f6c:	4b1d      	ldr	r3, [pc, #116]	; (8015fe4 <vTaskDelete+0xd0>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	3301      	adds	r3, #1
 8015f72:	4a1c      	ldr	r2, [pc, #112]	; (8015fe4 <vTaskDelete+0xd0>)
 8015f74:	6013      	str	r3, [r2, #0]
 8015f76:	e009      	b.n	8015f8c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8015f78:	4b1b      	ldr	r3, [pc, #108]	; (8015fe8 <vTaskDelete+0xd4>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	3b01      	subs	r3, #1
 8015f7e:	4a1a      	ldr	r2, [pc, #104]	; (8015fe8 <vTaskDelete+0xd4>)
 8015f80:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8015f82:	68f8      	ldr	r0, [r7, #12]
 8015f84:	f000 fd6a 	bl	8016a5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8015f88:	f000 fd9c 	bl	8016ac4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8015f8c:	f001 fc52 	bl	8017834 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8015f90:	4b16      	ldr	r3, [pc, #88]	; (8015fec <vTaskDelete+0xd8>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d01b      	beq.n	8015fd0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8015f98:	4b0f      	ldr	r3, [pc, #60]	; (8015fd8 <vTaskDelete+0xc4>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	68fa      	ldr	r2, [r7, #12]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d116      	bne.n	8015fd0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8015fa2:	4b13      	ldr	r3, [pc, #76]	; (8015ff0 <vTaskDelete+0xdc>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d00a      	beq.n	8015fc0 <vTaskDelete+0xac>
	__asm volatile
 8015faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fae:	f383 8811 	msr	BASEPRI, r3
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	f3bf 8f4f 	dsb	sy
 8015fba:	60bb      	str	r3, [r7, #8]
}
 8015fbc:	bf00      	nop
 8015fbe:	e7fe      	b.n	8015fbe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8015fc0:	4b0c      	ldr	r3, [pc, #48]	; (8015ff4 <vTaskDelete+0xe0>)
 8015fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fc6:	601a      	str	r2, [r3, #0]
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015fd0:	bf00      	nop
 8015fd2:	3710      	adds	r7, #16
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	20000f8c 	.word	0x20000f8c
 8015fdc:	2000147c 	.word	0x2000147c
 8015fe0:	20001434 	.word	0x20001434
 8015fe4:	20001448 	.word	0x20001448
 8015fe8:	20001460 	.word	0x20001460
 8015fec:	2000146c 	.word	0x2000146c
 8015ff0:	20001488 	.word	0x20001488
 8015ff4:	e000ed04 	.word	0xe000ed04

08015ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016000:	2300      	movs	r3, #0
 8016002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d017      	beq.n	801603a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801600a:	4b13      	ldr	r3, [pc, #76]	; (8016058 <vTaskDelay+0x60>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d00a      	beq.n	8016028 <vTaskDelay+0x30>
	__asm volatile
 8016012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016016:	f383 8811 	msr	BASEPRI, r3
 801601a:	f3bf 8f6f 	isb	sy
 801601e:	f3bf 8f4f 	dsb	sy
 8016022:	60bb      	str	r3, [r7, #8]
}
 8016024:	bf00      	nop
 8016026:	e7fe      	b.n	8016026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016028:	f000 f980 	bl	801632c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801602c:	2100      	movs	r1, #0
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 ff02 	bl	8016e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016034:	f000 f988 	bl	8016348 <xTaskResumeAll>
 8016038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d107      	bne.n	8016050 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016040:	4b06      	ldr	r3, [pc, #24]	; (801605c <vTaskDelay+0x64>)
 8016042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016046:	601a      	str	r2, [r3, #0]
 8016048:	f3bf 8f4f 	dsb	sy
 801604c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016050:	bf00      	nop
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	20001488 	.word	0x20001488
 801605c:	e000ed04 	.word	0xe000ed04

08016060 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8016060:	b580      	push	{r7, lr}
 8016062:	b088      	sub	sp, #32
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801606c:	69bb      	ldr	r3, [r7, #24]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d10a      	bne.n	8016088 <eTaskGetState+0x28>
	__asm volatile
 8016072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016076:	f383 8811 	msr	BASEPRI, r3
 801607a:	f3bf 8f6f 	isb	sy
 801607e:	f3bf 8f4f 	dsb	sy
 8016082:	60bb      	str	r3, [r7, #8]
}
 8016084:	bf00      	nop
 8016086:	e7fe      	b.n	8016086 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8016088:	4b23      	ldr	r3, [pc, #140]	; (8016118 <eTaskGetState+0xb8>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	69ba      	ldr	r2, [r7, #24]
 801608e:	429a      	cmp	r2, r3
 8016090:	d102      	bne.n	8016098 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8016092:	2300      	movs	r3, #0
 8016094:	77fb      	strb	r3, [r7, #31]
 8016096:	e03a      	b.n	801610e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8016098:	f001 fb9c 	bl	80177d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801609c:	69bb      	ldr	r3, [r7, #24]
 801609e:	695b      	ldr	r3, [r3, #20]
 80160a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80160a2:	4b1e      	ldr	r3, [pc, #120]	; (801611c <eTaskGetState+0xbc>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80160a8:	4b1d      	ldr	r3, [pc, #116]	; (8016120 <eTaskGetState+0xc0>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80160ae:	f001 fbc1 	bl	8017834 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80160b2:	697a      	ldr	r2, [r7, #20]
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d003      	beq.n	80160c2 <eTaskGetState+0x62>
 80160ba:	697a      	ldr	r2, [r7, #20]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	429a      	cmp	r2, r3
 80160c0:	d102      	bne.n	80160c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80160c2:	2302      	movs	r3, #2
 80160c4:	77fb      	strb	r3, [r7, #31]
 80160c6:	e022      	b.n	801610e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	4a16      	ldr	r2, [pc, #88]	; (8016124 <eTaskGetState+0xc4>)
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d112      	bne.n	80160f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d10b      	bne.n	80160f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80160d8:	69bb      	ldr	r3, [r7, #24]
 80160da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d102      	bne.n	80160ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80160e4:	2302      	movs	r3, #2
 80160e6:	77fb      	strb	r3, [r7, #31]
 80160e8:	e011      	b.n	801610e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80160ea:	2303      	movs	r3, #3
 80160ec:	77fb      	strb	r3, [r7, #31]
 80160ee:	e00e      	b.n	801610e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80160f0:	2302      	movs	r3, #2
 80160f2:	77fb      	strb	r3, [r7, #31]
 80160f4:	e00b      	b.n	801610e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	4a0b      	ldr	r2, [pc, #44]	; (8016128 <eTaskGetState+0xc8>)
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d002      	beq.n	8016104 <eTaskGetState+0xa4>
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d102      	bne.n	801610a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8016104:	2304      	movs	r3, #4
 8016106:	77fb      	strb	r3, [r7, #31]
 8016108:	e001      	b.n	801610e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801610a:	2301      	movs	r3, #1
 801610c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801610e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8016110:	4618      	mov	r0, r3
 8016112:	3720      	adds	r7, #32
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	20000f8c 	.word	0x20000f8c
 801611c:	20001418 	.word	0x20001418
 8016120:	2000141c 	.word	0x2000141c
 8016124:	2000144c 	.word	0x2000144c
 8016128:	20001434 	.word	0x20001434

0801612c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801612c:	b480      	push	{r7}
 801612e:	b087      	sub	sp, #28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8016134:	2300      	movs	r3, #0
 8016136:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d10a      	bne.n	8016158 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8016142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016146:	f383 8811 	msr	BASEPRI, r3
 801614a:	f3bf 8f6f 	isb	sy
 801614e:	f3bf 8f4f 	dsb	sy
 8016152:	60fb      	str	r3, [r7, #12]
}
 8016154:	bf00      	nop
 8016156:	e7fe      	b.n	8016156 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	695b      	ldr	r3, [r3, #20]
 801615c:	4a0a      	ldr	r2, [pc, #40]	; (8016188 <prvTaskIsTaskSuspended+0x5c>)
 801615e:	4293      	cmp	r3, r2
 8016160:	d10a      	bne.n	8016178 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016166:	4a09      	ldr	r2, [pc, #36]	; (801618c <prvTaskIsTaskSuspended+0x60>)
 8016168:	4293      	cmp	r3, r2
 801616a:	d005      	beq.n	8016178 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016170:	2b00      	cmp	r3, #0
 8016172:	d101      	bne.n	8016178 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8016174:	2301      	movs	r3, #1
 8016176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016178:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801617a:	4618      	mov	r0, r3
 801617c:	371c      	adds	r7, #28
 801617e:	46bd      	mov	sp, r7
 8016180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016184:	4770      	bx	lr
 8016186:	bf00      	nop
 8016188:	2000144c 	.word	0x2000144c
 801618c:	20001420 	.word	0x20001420

08016190 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d10a      	bne.n	80161b8 <vTaskResume+0x28>
	__asm volatile
 80161a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a6:	f383 8811 	msr	BASEPRI, r3
 80161aa:	f3bf 8f6f 	isb	sy
 80161ae:	f3bf 8f4f 	dsb	sy
 80161b2:	60bb      	str	r3, [r7, #8]
}
 80161b4:	bf00      	nop
 80161b6:	e7fe      	b.n	80161b6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80161b8:	4b20      	ldr	r3, [pc, #128]	; (801623c <vTaskResume+0xac>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	68fa      	ldr	r2, [r7, #12]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d038      	beq.n	8016234 <vTaskResume+0xa4>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d035      	beq.n	8016234 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80161c8:	f001 fb04 	bl	80177d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80161cc:	68f8      	ldr	r0, [r7, #12]
 80161ce:	f7ff ffad 	bl	801612c <prvTaskIsTaskSuspended>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d02b      	beq.n	8016230 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	3304      	adds	r3, #4
 80161dc:	4618      	mov	r0, r3
 80161de:	f7fe fca9 	bl	8014b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161e6:	4b16      	ldr	r3, [pc, #88]	; (8016240 <vTaskResume+0xb0>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d903      	bls.n	80161f6 <vTaskResume+0x66>
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161f2:	4a13      	ldr	r2, [pc, #76]	; (8016240 <vTaskResume+0xb0>)
 80161f4:	6013      	str	r3, [r2, #0]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161fa:	4613      	mov	r3, r2
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	4413      	add	r3, r2
 8016200:	009b      	lsls	r3, r3, #2
 8016202:	4a10      	ldr	r2, [pc, #64]	; (8016244 <vTaskResume+0xb4>)
 8016204:	441a      	add	r2, r3
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	3304      	adds	r3, #4
 801620a:	4619      	mov	r1, r3
 801620c:	4610      	mov	r0, r2
 801620e:	f7fe fc34 	bl	8014a7a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016216:	4b09      	ldr	r3, [pc, #36]	; (801623c <vTaskResume+0xac>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801621c:	429a      	cmp	r2, r3
 801621e:	d307      	bcc.n	8016230 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8016220:	4b09      	ldr	r3, [pc, #36]	; (8016248 <vTaskResume+0xb8>)
 8016222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016226:	601a      	str	r2, [r3, #0]
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8016230:	f001 fb00 	bl	8017834 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016234:	bf00      	nop
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	20000f8c 	.word	0x20000f8c
 8016240:	20001468 	.word	0x20001468
 8016244:	20000f90 	.word	0x20000f90
 8016248:	e000ed04 	.word	0xe000ed04

0801624c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b08a      	sub	sp, #40	; 0x28
 8016250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016252:	2300      	movs	r3, #0
 8016254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016256:	2300      	movs	r3, #0
 8016258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801625a:	463a      	mov	r2, r7
 801625c:	1d39      	adds	r1, r7, #4
 801625e:	f107 0308 	add.w	r3, r7, #8
 8016262:	4618      	mov	r0, r3
 8016264:	f7fe fba8 	bl	80149b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	9202      	str	r2, [sp, #8]
 8016270:	9301      	str	r3, [sp, #4]
 8016272:	2300      	movs	r3, #0
 8016274:	9300      	str	r3, [sp, #0]
 8016276:	2300      	movs	r3, #0
 8016278:	460a      	mov	r2, r1
 801627a:	4924      	ldr	r1, [pc, #144]	; (801630c <vTaskStartScheduler+0xc0>)
 801627c:	4824      	ldr	r0, [pc, #144]	; (8016310 <vTaskStartScheduler+0xc4>)
 801627e:	f7ff fc91 	bl	8015ba4 <xTaskCreateStatic>
 8016282:	4603      	mov	r3, r0
 8016284:	4a23      	ldr	r2, [pc, #140]	; (8016314 <vTaskStartScheduler+0xc8>)
 8016286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016288:	4b22      	ldr	r3, [pc, #136]	; (8016314 <vTaskStartScheduler+0xc8>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d002      	beq.n	8016296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016290:	2301      	movs	r3, #1
 8016292:	617b      	str	r3, [r7, #20]
 8016294:	e001      	b.n	801629a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016296:	2300      	movs	r3, #0
 8016298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	2b01      	cmp	r3, #1
 801629e:	d102      	bne.n	80162a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80162a0:	f000 fe1e 	bl	8016ee0 <xTimerCreateTimerTask>
 80162a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d11b      	bne.n	80162e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80162ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b0:	f383 8811 	msr	BASEPRI, r3
 80162b4:	f3bf 8f6f 	isb	sy
 80162b8:	f3bf 8f4f 	dsb	sy
 80162bc:	613b      	str	r3, [r7, #16]
}
 80162be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80162c0:	4b15      	ldr	r3, [pc, #84]	; (8016318 <vTaskStartScheduler+0xcc>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	3354      	adds	r3, #84	; 0x54
 80162c6:	4a15      	ldr	r2, [pc, #84]	; (801631c <vTaskStartScheduler+0xd0>)
 80162c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80162ca:	4b15      	ldr	r3, [pc, #84]	; (8016320 <vTaskStartScheduler+0xd4>)
 80162cc:	f04f 32ff 	mov.w	r2, #4294967295
 80162d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80162d2:	4b14      	ldr	r3, [pc, #80]	; (8016324 <vTaskStartScheduler+0xd8>)
 80162d4:	2201      	movs	r2, #1
 80162d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80162d8:	4b13      	ldr	r3, [pc, #76]	; (8016328 <vTaskStartScheduler+0xdc>)
 80162da:	2200      	movs	r2, #0
 80162dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80162de:	f001 f9d7 	bl	8017690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80162e2:	e00e      	b.n	8016302 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162ea:	d10a      	bne.n	8016302 <vTaskStartScheduler+0xb6>
	__asm volatile
 80162ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162f0:	f383 8811 	msr	BASEPRI, r3
 80162f4:	f3bf 8f6f 	isb	sy
 80162f8:	f3bf 8f4f 	dsb	sy
 80162fc:	60fb      	str	r3, [r7, #12]
}
 80162fe:	bf00      	nop
 8016300:	e7fe      	b.n	8016300 <vTaskStartScheduler+0xb4>
}
 8016302:	bf00      	nop
 8016304:	3718      	adds	r7, #24
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
 801630a:	bf00      	nop
 801630c:	08020774 	.word	0x08020774
 8016310:	08016951 	.word	0x08016951
 8016314:	20001484 	.word	0x20001484
 8016318:	20000f8c 	.word	0x20000f8c
 801631c:	20000200 	.word	0x20000200
 8016320:	20001480 	.word	0x20001480
 8016324:	2000146c 	.word	0x2000146c
 8016328:	20001464 	.word	0x20001464

0801632c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801632c:	b480      	push	{r7}
 801632e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016330:	4b04      	ldr	r3, [pc, #16]	; (8016344 <vTaskSuspendAll+0x18>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	3301      	adds	r3, #1
 8016336:	4a03      	ldr	r2, [pc, #12]	; (8016344 <vTaskSuspendAll+0x18>)
 8016338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801633a:	bf00      	nop
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr
 8016344:	20001488 	.word	0x20001488

08016348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801634e:	2300      	movs	r3, #0
 8016350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016352:	2300      	movs	r3, #0
 8016354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016356:	4b42      	ldr	r3, [pc, #264]	; (8016460 <xTaskResumeAll+0x118>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d10a      	bne.n	8016374 <xTaskResumeAll+0x2c>
	__asm volatile
 801635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016362:	f383 8811 	msr	BASEPRI, r3
 8016366:	f3bf 8f6f 	isb	sy
 801636a:	f3bf 8f4f 	dsb	sy
 801636e:	603b      	str	r3, [r7, #0]
}
 8016370:	bf00      	nop
 8016372:	e7fe      	b.n	8016372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016374:	f001 fa2e 	bl	80177d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016378:	4b39      	ldr	r3, [pc, #228]	; (8016460 <xTaskResumeAll+0x118>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	3b01      	subs	r3, #1
 801637e:	4a38      	ldr	r2, [pc, #224]	; (8016460 <xTaskResumeAll+0x118>)
 8016380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016382:	4b37      	ldr	r3, [pc, #220]	; (8016460 <xTaskResumeAll+0x118>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d162      	bne.n	8016450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801638a:	4b36      	ldr	r3, [pc, #216]	; (8016464 <xTaskResumeAll+0x11c>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d05e      	beq.n	8016450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016392:	e02f      	b.n	80163f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016394:	4b34      	ldr	r3, [pc, #208]	; (8016468 <xTaskResumeAll+0x120>)
 8016396:	68db      	ldr	r3, [r3, #12]
 8016398:	68db      	ldr	r3, [r3, #12]
 801639a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	3318      	adds	r3, #24
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7fe fbc7 	bl	8014b34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	3304      	adds	r3, #4
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7fe fbc2 	bl	8014b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163b4:	4b2d      	ldr	r3, [pc, #180]	; (801646c <xTaskResumeAll+0x124>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d903      	bls.n	80163c4 <xTaskResumeAll+0x7c>
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c0:	4a2a      	ldr	r2, [pc, #168]	; (801646c <xTaskResumeAll+0x124>)
 80163c2:	6013      	str	r3, [r2, #0]
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163c8:	4613      	mov	r3, r2
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4413      	add	r3, r2
 80163ce:	009b      	lsls	r3, r3, #2
 80163d0:	4a27      	ldr	r2, [pc, #156]	; (8016470 <xTaskResumeAll+0x128>)
 80163d2:	441a      	add	r2, r3
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	3304      	adds	r3, #4
 80163d8:	4619      	mov	r1, r3
 80163da:	4610      	mov	r0, r2
 80163dc:	f7fe fb4d 	bl	8014a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163e4:	4b23      	ldr	r3, [pc, #140]	; (8016474 <xTaskResumeAll+0x12c>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d302      	bcc.n	80163f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80163ee:	4b22      	ldr	r3, [pc, #136]	; (8016478 <xTaskResumeAll+0x130>)
 80163f0:	2201      	movs	r2, #1
 80163f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80163f4:	4b1c      	ldr	r3, [pc, #112]	; (8016468 <xTaskResumeAll+0x120>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d1cb      	bne.n	8016394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d001      	beq.n	8016406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016402:	f000 fb5f 	bl	8016ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016406:	4b1d      	ldr	r3, [pc, #116]	; (801647c <xTaskResumeAll+0x134>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d010      	beq.n	8016434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016412:	f000 f847 	bl	80164a4 <xTaskIncrementTick>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d002      	beq.n	8016422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801641c:	4b16      	ldr	r3, [pc, #88]	; (8016478 <xTaskResumeAll+0x130>)
 801641e:	2201      	movs	r2, #1
 8016420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	3b01      	subs	r3, #1
 8016426:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d1f1      	bne.n	8016412 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801642e:	4b13      	ldr	r3, [pc, #76]	; (801647c <xTaskResumeAll+0x134>)
 8016430:	2200      	movs	r2, #0
 8016432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016434:	4b10      	ldr	r3, [pc, #64]	; (8016478 <xTaskResumeAll+0x130>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d009      	beq.n	8016450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801643c:	2301      	movs	r3, #1
 801643e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016440:	4b0f      	ldr	r3, [pc, #60]	; (8016480 <xTaskResumeAll+0x138>)
 8016442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016446:	601a      	str	r2, [r3, #0]
 8016448:	f3bf 8f4f 	dsb	sy
 801644c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016450:	f001 f9f0 	bl	8017834 <vPortExitCritical>

	return xAlreadyYielded;
 8016454:	68bb      	ldr	r3, [r7, #8]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3710      	adds	r7, #16
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	20001488 	.word	0x20001488
 8016464:	20001460 	.word	0x20001460
 8016468:	20001420 	.word	0x20001420
 801646c:	20001468 	.word	0x20001468
 8016470:	20000f90 	.word	0x20000f90
 8016474:	20000f8c 	.word	0x20000f8c
 8016478:	20001474 	.word	0x20001474
 801647c:	20001470 	.word	0x20001470
 8016480:	e000ed04 	.word	0xe000ed04

08016484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016484:	b480      	push	{r7}
 8016486:	b083      	sub	sp, #12
 8016488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801648a:	4b05      	ldr	r3, [pc, #20]	; (80164a0 <xTaskGetTickCount+0x1c>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016490:	687b      	ldr	r3, [r7, #4]
}
 8016492:	4618      	mov	r0, r3
 8016494:	370c      	adds	r7, #12
 8016496:	46bd      	mov	sp, r7
 8016498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649c:	4770      	bx	lr
 801649e:	bf00      	nop
 80164a0:	20001464 	.word	0x20001464

080164a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b086      	sub	sp, #24
 80164a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80164aa:	2300      	movs	r3, #0
 80164ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164ae:	4b4f      	ldr	r3, [pc, #316]	; (80165ec <xTaskIncrementTick+0x148>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f040 808f 	bne.w	80165d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80164b8:	4b4d      	ldr	r3, [pc, #308]	; (80165f0 <xTaskIncrementTick+0x14c>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	3301      	adds	r3, #1
 80164be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80164c0:	4a4b      	ldr	r2, [pc, #300]	; (80165f0 <xTaskIncrementTick+0x14c>)
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d120      	bne.n	801650e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80164cc:	4b49      	ldr	r3, [pc, #292]	; (80165f4 <xTaskIncrementTick+0x150>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d00a      	beq.n	80164ec <xTaskIncrementTick+0x48>
	__asm volatile
 80164d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164da:	f383 8811 	msr	BASEPRI, r3
 80164de:	f3bf 8f6f 	isb	sy
 80164e2:	f3bf 8f4f 	dsb	sy
 80164e6:	603b      	str	r3, [r7, #0]
}
 80164e8:	bf00      	nop
 80164ea:	e7fe      	b.n	80164ea <xTaskIncrementTick+0x46>
 80164ec:	4b41      	ldr	r3, [pc, #260]	; (80165f4 <xTaskIncrementTick+0x150>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	60fb      	str	r3, [r7, #12]
 80164f2:	4b41      	ldr	r3, [pc, #260]	; (80165f8 <xTaskIncrementTick+0x154>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4a3f      	ldr	r2, [pc, #252]	; (80165f4 <xTaskIncrementTick+0x150>)
 80164f8:	6013      	str	r3, [r2, #0]
 80164fa:	4a3f      	ldr	r2, [pc, #252]	; (80165f8 <xTaskIncrementTick+0x154>)
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	6013      	str	r3, [r2, #0]
 8016500:	4b3e      	ldr	r3, [pc, #248]	; (80165fc <xTaskIncrementTick+0x158>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	3301      	adds	r3, #1
 8016506:	4a3d      	ldr	r2, [pc, #244]	; (80165fc <xTaskIncrementTick+0x158>)
 8016508:	6013      	str	r3, [r2, #0]
 801650a:	f000 fadb 	bl	8016ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801650e:	4b3c      	ldr	r3, [pc, #240]	; (8016600 <xTaskIncrementTick+0x15c>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	693a      	ldr	r2, [r7, #16]
 8016514:	429a      	cmp	r2, r3
 8016516:	d349      	bcc.n	80165ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016518:	4b36      	ldr	r3, [pc, #216]	; (80165f4 <xTaskIncrementTick+0x150>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d104      	bne.n	801652c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016522:	4b37      	ldr	r3, [pc, #220]	; (8016600 <xTaskIncrementTick+0x15c>)
 8016524:	f04f 32ff 	mov.w	r2, #4294967295
 8016528:	601a      	str	r2, [r3, #0]
					break;
 801652a:	e03f      	b.n	80165ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801652c:	4b31      	ldr	r3, [pc, #196]	; (80165f4 <xTaskIncrementTick+0x150>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801653c:	693a      	ldr	r2, [r7, #16]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	429a      	cmp	r2, r3
 8016542:	d203      	bcs.n	801654c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016544:	4a2e      	ldr	r2, [pc, #184]	; (8016600 <xTaskIncrementTick+0x15c>)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801654a:	e02f      	b.n	80165ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	3304      	adds	r3, #4
 8016550:	4618      	mov	r0, r3
 8016552:	f7fe faef 	bl	8014b34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801655a:	2b00      	cmp	r3, #0
 801655c:	d004      	beq.n	8016568 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	3318      	adds	r3, #24
 8016562:	4618      	mov	r0, r3
 8016564:	f7fe fae6 	bl	8014b34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801656c:	4b25      	ldr	r3, [pc, #148]	; (8016604 <xTaskIncrementTick+0x160>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	429a      	cmp	r2, r3
 8016572:	d903      	bls.n	801657c <xTaskIncrementTick+0xd8>
 8016574:	68bb      	ldr	r3, [r7, #8]
 8016576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016578:	4a22      	ldr	r2, [pc, #136]	; (8016604 <xTaskIncrementTick+0x160>)
 801657a:	6013      	str	r3, [r2, #0]
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016580:	4613      	mov	r3, r2
 8016582:	009b      	lsls	r3, r3, #2
 8016584:	4413      	add	r3, r2
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	4a1f      	ldr	r2, [pc, #124]	; (8016608 <xTaskIncrementTick+0x164>)
 801658a:	441a      	add	r2, r3
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	3304      	adds	r3, #4
 8016590:	4619      	mov	r1, r3
 8016592:	4610      	mov	r0, r2
 8016594:	f7fe fa71 	bl	8014a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801659c:	4b1b      	ldr	r3, [pc, #108]	; (801660c <xTaskIncrementTick+0x168>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d3b8      	bcc.n	8016518 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80165a6:	2301      	movs	r3, #1
 80165a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165aa:	e7b5      	b.n	8016518 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80165ac:	4b17      	ldr	r3, [pc, #92]	; (801660c <xTaskIncrementTick+0x168>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165b2:	4915      	ldr	r1, [pc, #84]	; (8016608 <xTaskIncrementTick+0x164>)
 80165b4:	4613      	mov	r3, r2
 80165b6:	009b      	lsls	r3, r3, #2
 80165b8:	4413      	add	r3, r2
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	440b      	add	r3, r1
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d901      	bls.n	80165c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80165c4:	2301      	movs	r3, #1
 80165c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80165c8:	4b11      	ldr	r3, [pc, #68]	; (8016610 <xTaskIncrementTick+0x16c>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d007      	beq.n	80165e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80165d0:	2301      	movs	r3, #1
 80165d2:	617b      	str	r3, [r7, #20]
 80165d4:	e004      	b.n	80165e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80165d6:	4b0f      	ldr	r3, [pc, #60]	; (8016614 <xTaskIncrementTick+0x170>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	3301      	adds	r3, #1
 80165dc:	4a0d      	ldr	r2, [pc, #52]	; (8016614 <xTaskIncrementTick+0x170>)
 80165de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80165e0:	697b      	ldr	r3, [r7, #20]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3718      	adds	r7, #24
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	20001488 	.word	0x20001488
 80165f0:	20001464 	.word	0x20001464
 80165f4:	20001418 	.word	0x20001418
 80165f8:	2000141c 	.word	0x2000141c
 80165fc:	20001478 	.word	0x20001478
 8016600:	20001480 	.word	0x20001480
 8016604:	20001468 	.word	0x20001468
 8016608:	20000f90 	.word	0x20000f90
 801660c:	20000f8c 	.word	0x20000f8c
 8016610:	20001474 	.word	0x20001474
 8016614:	20001470 	.word	0x20001470

08016618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016618:	b480      	push	{r7}
 801661a:	b085      	sub	sp, #20
 801661c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801661e:	4b2a      	ldr	r3, [pc, #168]	; (80166c8 <vTaskSwitchContext+0xb0>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d003      	beq.n	801662e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016626:	4b29      	ldr	r3, [pc, #164]	; (80166cc <vTaskSwitchContext+0xb4>)
 8016628:	2201      	movs	r2, #1
 801662a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801662c:	e046      	b.n	80166bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801662e:	4b27      	ldr	r3, [pc, #156]	; (80166cc <vTaskSwitchContext+0xb4>)
 8016630:	2200      	movs	r2, #0
 8016632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016634:	4b26      	ldr	r3, [pc, #152]	; (80166d0 <vTaskSwitchContext+0xb8>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	60fb      	str	r3, [r7, #12]
 801663a:	e010      	b.n	801665e <vTaskSwitchContext+0x46>
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d10a      	bne.n	8016658 <vTaskSwitchContext+0x40>
	__asm volatile
 8016642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016646:	f383 8811 	msr	BASEPRI, r3
 801664a:	f3bf 8f6f 	isb	sy
 801664e:	f3bf 8f4f 	dsb	sy
 8016652:	607b      	str	r3, [r7, #4]
}
 8016654:	bf00      	nop
 8016656:	e7fe      	b.n	8016656 <vTaskSwitchContext+0x3e>
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	3b01      	subs	r3, #1
 801665c:	60fb      	str	r3, [r7, #12]
 801665e:	491d      	ldr	r1, [pc, #116]	; (80166d4 <vTaskSwitchContext+0xbc>)
 8016660:	68fa      	ldr	r2, [r7, #12]
 8016662:	4613      	mov	r3, r2
 8016664:	009b      	lsls	r3, r3, #2
 8016666:	4413      	add	r3, r2
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	440b      	add	r3, r1
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d0e4      	beq.n	801663c <vTaskSwitchContext+0x24>
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	4613      	mov	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	4a15      	ldr	r2, [pc, #84]	; (80166d4 <vTaskSwitchContext+0xbc>)
 801667e:	4413      	add	r3, r2
 8016680:	60bb      	str	r3, [r7, #8]
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	685a      	ldr	r2, [r3, #4]
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	605a      	str	r2, [r3, #4]
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	685a      	ldr	r2, [r3, #4]
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	3308      	adds	r3, #8
 8016694:	429a      	cmp	r2, r3
 8016696:	d104      	bne.n	80166a2 <vTaskSwitchContext+0x8a>
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	685a      	ldr	r2, [r3, #4]
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	605a      	str	r2, [r3, #4]
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	4a0b      	ldr	r2, [pc, #44]	; (80166d8 <vTaskSwitchContext+0xc0>)
 80166aa:	6013      	str	r3, [r2, #0]
 80166ac:	4a08      	ldr	r2, [pc, #32]	; (80166d0 <vTaskSwitchContext+0xb8>)
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80166b2:	4b09      	ldr	r3, [pc, #36]	; (80166d8 <vTaskSwitchContext+0xc0>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	3354      	adds	r3, #84	; 0x54
 80166b8:	4a08      	ldr	r2, [pc, #32]	; (80166dc <vTaskSwitchContext+0xc4>)
 80166ba:	6013      	str	r3, [r2, #0]
}
 80166bc:	bf00      	nop
 80166be:	3714      	adds	r7, #20
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr
 80166c8:	20001488 	.word	0x20001488
 80166cc:	20001474 	.word	0x20001474
 80166d0:	20001468 	.word	0x20001468
 80166d4:	20000f90 	.word	0x20000f90
 80166d8:	20000f8c 	.word	0x20000f8c
 80166dc:	20000200 	.word	0x20000200

080166e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b084      	sub	sp, #16
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d10a      	bne.n	8016706 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80166f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f4:	f383 8811 	msr	BASEPRI, r3
 80166f8:	f3bf 8f6f 	isb	sy
 80166fc:	f3bf 8f4f 	dsb	sy
 8016700:	60fb      	str	r3, [r7, #12]
}
 8016702:	bf00      	nop
 8016704:	e7fe      	b.n	8016704 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016706:	4b07      	ldr	r3, [pc, #28]	; (8016724 <vTaskPlaceOnEventList+0x44>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	3318      	adds	r3, #24
 801670c:	4619      	mov	r1, r3
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7fe f9d7 	bl	8014ac2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016714:	2101      	movs	r1, #1
 8016716:	6838      	ldr	r0, [r7, #0]
 8016718:	f000 fb8e 	bl	8016e38 <prvAddCurrentTaskToDelayedList>
}
 801671c:	bf00      	nop
 801671e:	3710      	adds	r7, #16
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	20000f8c 	.word	0x20000f8c

08016728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d10a      	bne.n	8016750 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801673e:	f383 8811 	msr	BASEPRI, r3
 8016742:	f3bf 8f6f 	isb	sy
 8016746:	f3bf 8f4f 	dsb	sy
 801674a:	617b      	str	r3, [r7, #20]
}
 801674c:	bf00      	nop
 801674e:	e7fe      	b.n	801674e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016750:	4b0a      	ldr	r3, [pc, #40]	; (801677c <vTaskPlaceOnEventListRestricted+0x54>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3318      	adds	r3, #24
 8016756:	4619      	mov	r1, r3
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f7fe f98e 	bl	8014a7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d002      	beq.n	801676a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016764:	f04f 33ff 	mov.w	r3, #4294967295
 8016768:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801676a:	6879      	ldr	r1, [r7, #4]
 801676c:	68b8      	ldr	r0, [r7, #8]
 801676e:	f000 fb63 	bl	8016e38 <prvAddCurrentTaskToDelayedList>
	}
 8016772:	bf00      	nop
 8016774:	3718      	adds	r7, #24
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	20000f8c 	.word	0x20000f8c

08016780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b086      	sub	sp, #24
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d10a      	bne.n	80167ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801679a:	f383 8811 	msr	BASEPRI, r3
 801679e:	f3bf 8f6f 	isb	sy
 80167a2:	f3bf 8f4f 	dsb	sy
 80167a6:	60fb      	str	r3, [r7, #12]
}
 80167a8:	bf00      	nop
 80167aa:	e7fe      	b.n	80167aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	3318      	adds	r3, #24
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7fe f9bf 	bl	8014b34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167b6:	4b1e      	ldr	r3, [pc, #120]	; (8016830 <xTaskRemoveFromEventList+0xb0>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d11d      	bne.n	80167fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	3304      	adds	r3, #4
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7fe f9b6 	bl	8014b34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167cc:	4b19      	ldr	r3, [pc, #100]	; (8016834 <xTaskRemoveFromEventList+0xb4>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d903      	bls.n	80167dc <xTaskRemoveFromEventList+0x5c>
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167d8:	4a16      	ldr	r2, [pc, #88]	; (8016834 <xTaskRemoveFromEventList+0xb4>)
 80167da:	6013      	str	r3, [r2, #0]
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167e0:	4613      	mov	r3, r2
 80167e2:	009b      	lsls	r3, r3, #2
 80167e4:	4413      	add	r3, r2
 80167e6:	009b      	lsls	r3, r3, #2
 80167e8:	4a13      	ldr	r2, [pc, #76]	; (8016838 <xTaskRemoveFromEventList+0xb8>)
 80167ea:	441a      	add	r2, r3
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	3304      	adds	r3, #4
 80167f0:	4619      	mov	r1, r3
 80167f2:	4610      	mov	r0, r2
 80167f4:	f7fe f941 	bl	8014a7a <vListInsertEnd>
 80167f8:	e005      	b.n	8016806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	3318      	adds	r3, #24
 80167fe:	4619      	mov	r1, r3
 8016800:	480e      	ldr	r0, [pc, #56]	; (801683c <xTaskRemoveFromEventList+0xbc>)
 8016802:	f7fe f93a 	bl	8014a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016806:	693b      	ldr	r3, [r7, #16]
 8016808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801680a:	4b0d      	ldr	r3, [pc, #52]	; (8016840 <xTaskRemoveFromEventList+0xc0>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016810:	429a      	cmp	r2, r3
 8016812:	d905      	bls.n	8016820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016814:	2301      	movs	r3, #1
 8016816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016818:	4b0a      	ldr	r3, [pc, #40]	; (8016844 <xTaskRemoveFromEventList+0xc4>)
 801681a:	2201      	movs	r2, #1
 801681c:	601a      	str	r2, [r3, #0]
 801681e:	e001      	b.n	8016824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016820:	2300      	movs	r3, #0
 8016822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016824:	697b      	ldr	r3, [r7, #20]
}
 8016826:	4618      	mov	r0, r3
 8016828:	3718      	adds	r7, #24
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	20001488 	.word	0x20001488
 8016834:	20001468 	.word	0x20001468
 8016838:	20000f90 	.word	0x20000f90
 801683c:	20001420 	.word	0x20001420
 8016840:	20000f8c 	.word	0x20000f8c
 8016844:	20001474 	.word	0x20001474

08016848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016850:	4b06      	ldr	r3, [pc, #24]	; (801686c <vTaskInternalSetTimeOutState+0x24>)
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016858:	4b05      	ldr	r3, [pc, #20]	; (8016870 <vTaskInternalSetTimeOutState+0x28>)
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	605a      	str	r2, [r3, #4]
}
 8016860:	bf00      	nop
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr
 801686c:	20001478 	.word	0x20001478
 8016870:	20001464 	.word	0x20001464

08016874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b088      	sub	sp, #32
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d10a      	bne.n	801689a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016888:	f383 8811 	msr	BASEPRI, r3
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	613b      	str	r3, [r7, #16]
}
 8016896:	bf00      	nop
 8016898:	e7fe      	b.n	8016898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d10a      	bne.n	80168b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80168a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168a4:	f383 8811 	msr	BASEPRI, r3
 80168a8:	f3bf 8f6f 	isb	sy
 80168ac:	f3bf 8f4f 	dsb	sy
 80168b0:	60fb      	str	r3, [r7, #12]
}
 80168b2:	bf00      	nop
 80168b4:	e7fe      	b.n	80168b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80168b6:	f000 ff8d 	bl	80177d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80168ba:	4b1d      	ldr	r3, [pc, #116]	; (8016930 <xTaskCheckForTimeOut+0xbc>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	685b      	ldr	r3, [r3, #4]
 80168c4:	69ba      	ldr	r2, [r7, #24]
 80168c6:	1ad3      	subs	r3, r2, r3
 80168c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d2:	d102      	bne.n	80168da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80168d4:	2300      	movs	r3, #0
 80168d6:	61fb      	str	r3, [r7, #28]
 80168d8:	e023      	b.n	8016922 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	4b15      	ldr	r3, [pc, #84]	; (8016934 <xTaskCheckForTimeOut+0xc0>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d007      	beq.n	80168f6 <xTaskCheckForTimeOut+0x82>
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	685b      	ldr	r3, [r3, #4]
 80168ea:	69ba      	ldr	r2, [r7, #24]
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d302      	bcc.n	80168f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80168f0:	2301      	movs	r3, #1
 80168f2:	61fb      	str	r3, [r7, #28]
 80168f4:	e015      	b.n	8016922 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	697a      	ldr	r2, [r7, #20]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d20b      	bcs.n	8016918 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	1ad2      	subs	r2, r2, r3
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7ff ff9b 	bl	8016848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016912:	2300      	movs	r3, #0
 8016914:	61fb      	str	r3, [r7, #28]
 8016916:	e004      	b.n	8016922 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	2200      	movs	r2, #0
 801691c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801691e:	2301      	movs	r3, #1
 8016920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016922:	f000 ff87 	bl	8017834 <vPortExitCritical>

	return xReturn;
 8016926:	69fb      	ldr	r3, [r7, #28]
}
 8016928:	4618      	mov	r0, r3
 801692a:	3720      	adds	r7, #32
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	20001464 	.word	0x20001464
 8016934:	20001478 	.word	0x20001478

08016938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016938:	b480      	push	{r7}
 801693a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801693c:	4b03      	ldr	r3, [pc, #12]	; (801694c <vTaskMissedYield+0x14>)
 801693e:	2201      	movs	r2, #1
 8016940:	601a      	str	r2, [r3, #0]
}
 8016942:	bf00      	nop
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	20001474 	.word	0x20001474

08016950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016958:	f000 f852 	bl	8016a00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801695c:	4b06      	ldr	r3, [pc, #24]	; (8016978 <prvIdleTask+0x28>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b01      	cmp	r3, #1
 8016962:	d9f9      	bls.n	8016958 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016964:	4b05      	ldr	r3, [pc, #20]	; (801697c <prvIdleTask+0x2c>)
 8016966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801696a:	601a      	str	r2, [r3, #0]
 801696c:	f3bf 8f4f 	dsb	sy
 8016970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016974:	e7f0      	b.n	8016958 <prvIdleTask+0x8>
 8016976:	bf00      	nop
 8016978:	20000f90 	.word	0x20000f90
 801697c:	e000ed04 	.word	0xe000ed04

08016980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016986:	2300      	movs	r3, #0
 8016988:	607b      	str	r3, [r7, #4]
 801698a:	e00c      	b.n	80169a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801698c:	687a      	ldr	r2, [r7, #4]
 801698e:	4613      	mov	r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	4a12      	ldr	r2, [pc, #72]	; (80169e0 <prvInitialiseTaskLists+0x60>)
 8016998:	4413      	add	r3, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f7fe f840 	bl	8014a20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	3301      	adds	r3, #1
 80169a4:	607b      	str	r3, [r7, #4]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2b37      	cmp	r3, #55	; 0x37
 80169aa:	d9ef      	bls.n	801698c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80169ac:	480d      	ldr	r0, [pc, #52]	; (80169e4 <prvInitialiseTaskLists+0x64>)
 80169ae:	f7fe f837 	bl	8014a20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80169b2:	480d      	ldr	r0, [pc, #52]	; (80169e8 <prvInitialiseTaskLists+0x68>)
 80169b4:	f7fe f834 	bl	8014a20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80169b8:	480c      	ldr	r0, [pc, #48]	; (80169ec <prvInitialiseTaskLists+0x6c>)
 80169ba:	f7fe f831 	bl	8014a20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80169be:	480c      	ldr	r0, [pc, #48]	; (80169f0 <prvInitialiseTaskLists+0x70>)
 80169c0:	f7fe f82e 	bl	8014a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80169c4:	480b      	ldr	r0, [pc, #44]	; (80169f4 <prvInitialiseTaskLists+0x74>)
 80169c6:	f7fe f82b 	bl	8014a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80169ca:	4b0b      	ldr	r3, [pc, #44]	; (80169f8 <prvInitialiseTaskLists+0x78>)
 80169cc:	4a05      	ldr	r2, [pc, #20]	; (80169e4 <prvInitialiseTaskLists+0x64>)
 80169ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80169d0:	4b0a      	ldr	r3, [pc, #40]	; (80169fc <prvInitialiseTaskLists+0x7c>)
 80169d2:	4a05      	ldr	r2, [pc, #20]	; (80169e8 <prvInitialiseTaskLists+0x68>)
 80169d4:	601a      	str	r2, [r3, #0]
}
 80169d6:	bf00      	nop
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	20000f90 	.word	0x20000f90
 80169e4:	200013f0 	.word	0x200013f0
 80169e8:	20001404 	.word	0x20001404
 80169ec:	20001420 	.word	0x20001420
 80169f0:	20001434 	.word	0x20001434
 80169f4:	2000144c 	.word	0x2000144c
 80169f8:	20001418 	.word	0x20001418
 80169fc:	2000141c 	.word	0x2000141c

08016a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016a06:	e019      	b.n	8016a3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016a08:	f000 fee4 	bl	80177d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a0c:	4b10      	ldr	r3, [pc, #64]	; (8016a50 <prvCheckTasksWaitingTermination+0x50>)
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	68db      	ldr	r3, [r3, #12]
 8016a12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	3304      	adds	r3, #4
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7fe f88b 	bl	8014b34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016a1e:	4b0d      	ldr	r3, [pc, #52]	; (8016a54 <prvCheckTasksWaitingTermination+0x54>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	3b01      	subs	r3, #1
 8016a24:	4a0b      	ldr	r2, [pc, #44]	; (8016a54 <prvCheckTasksWaitingTermination+0x54>)
 8016a26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016a28:	4b0b      	ldr	r3, [pc, #44]	; (8016a58 <prvCheckTasksWaitingTermination+0x58>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	4a0a      	ldr	r2, [pc, #40]	; (8016a58 <prvCheckTasksWaitingTermination+0x58>)
 8016a30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016a32:	f000 feff 	bl	8017834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 f810 	bl	8016a5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016a3c:	4b06      	ldr	r3, [pc, #24]	; (8016a58 <prvCheckTasksWaitingTermination+0x58>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1e1      	bne.n	8016a08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016a44:	bf00      	nop
 8016a46:	bf00      	nop
 8016a48:	3708      	adds	r7, #8
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	20001434 	.word	0x20001434
 8016a54:	20001460 	.word	0x20001460
 8016a58:	20001448 	.word	0x20001448

08016a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3354      	adds	r3, #84	; 0x54
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f003 ffaf 	bl	801a9cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d108      	bne.n	8016a8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f001 f897 	bl	8017bb0 <vPortFree>
				vPortFree( pxTCB );
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f001 f894 	bl	8017bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016a88:	e018      	b.n	8016abc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d103      	bne.n	8016a9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f001 f88b 	bl	8017bb0 <vPortFree>
	}
 8016a9a:	e00f      	b.n	8016abc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016aa2:	2b02      	cmp	r3, #2
 8016aa4:	d00a      	beq.n	8016abc <prvDeleteTCB+0x60>
	__asm volatile
 8016aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aaa:	f383 8811 	msr	BASEPRI, r3
 8016aae:	f3bf 8f6f 	isb	sy
 8016ab2:	f3bf 8f4f 	dsb	sy
 8016ab6:	60fb      	str	r3, [r7, #12]
}
 8016ab8:	bf00      	nop
 8016aba:	e7fe      	b.n	8016aba <prvDeleteTCB+0x5e>
	}
 8016abc:	bf00      	nop
 8016abe:	3710      	adds	r7, #16
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}

08016ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016aca:	4b0c      	ldr	r3, [pc, #48]	; (8016afc <prvResetNextTaskUnblockTime+0x38>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d104      	bne.n	8016ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016ad4:	4b0a      	ldr	r3, [pc, #40]	; (8016b00 <prvResetNextTaskUnblockTime+0x3c>)
 8016ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8016ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016adc:	e008      	b.n	8016af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ade:	4b07      	ldr	r3, [pc, #28]	; (8016afc <prvResetNextTaskUnblockTime+0x38>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	4a04      	ldr	r2, [pc, #16]	; (8016b00 <prvResetNextTaskUnblockTime+0x3c>)
 8016aee:	6013      	str	r3, [r2, #0]
}
 8016af0:	bf00      	nop
 8016af2:	370c      	adds	r7, #12
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr
 8016afc:	20001418 	.word	0x20001418
 8016b00:	20001480 	.word	0x20001480

08016b04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016b04:	b480      	push	{r7}
 8016b06:	b083      	sub	sp, #12
 8016b08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016b0a:	4b05      	ldr	r3, [pc, #20]	; (8016b20 <xTaskGetCurrentTaskHandle+0x1c>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016b10:	687b      	ldr	r3, [r7, #4]
	}
 8016b12:	4618      	mov	r0, r3
 8016b14:	370c      	adds	r7, #12
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	20000f8c 	.word	0x20000f8c

08016b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016b24:	b480      	push	{r7}
 8016b26:	b083      	sub	sp, #12
 8016b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016b2a:	4b0b      	ldr	r3, [pc, #44]	; (8016b58 <xTaskGetSchedulerState+0x34>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d102      	bne.n	8016b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016b32:	2301      	movs	r3, #1
 8016b34:	607b      	str	r3, [r7, #4]
 8016b36:	e008      	b.n	8016b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b38:	4b08      	ldr	r3, [pc, #32]	; (8016b5c <xTaskGetSchedulerState+0x38>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d102      	bne.n	8016b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016b40:	2302      	movs	r3, #2
 8016b42:	607b      	str	r3, [r7, #4]
 8016b44:	e001      	b.n	8016b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016b46:	2300      	movs	r3, #0
 8016b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016b4a:	687b      	ldr	r3, [r7, #4]
	}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	370c      	adds	r7, #12
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr
 8016b58:	2000146c 	.word	0x2000146c
 8016b5c:	20001488 	.word	0x20001488

08016b60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d051      	beq.n	8016c1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b7a:	4b2a      	ldr	r3, [pc, #168]	; (8016c24 <xTaskPriorityInherit+0xc4>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d241      	bcs.n	8016c08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	699b      	ldr	r3, [r3, #24]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	db06      	blt.n	8016b9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b8c:	4b25      	ldr	r3, [pc, #148]	; (8016c24 <xTaskPriorityInherit+0xc4>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	6959      	ldr	r1, [r3, #20]
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	009b      	lsls	r3, r3, #2
 8016ba6:	4413      	add	r3, r2
 8016ba8:	009b      	lsls	r3, r3, #2
 8016baa:	4a1f      	ldr	r2, [pc, #124]	; (8016c28 <xTaskPriorityInherit+0xc8>)
 8016bac:	4413      	add	r3, r2
 8016bae:	4299      	cmp	r1, r3
 8016bb0:	d122      	bne.n	8016bf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7fd ffbc 	bl	8014b34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016bbc:	4b19      	ldr	r3, [pc, #100]	; (8016c24 <xTaskPriorityInherit+0xc4>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bca:	4b18      	ldr	r3, [pc, #96]	; (8016c2c <xTaskPriorityInherit+0xcc>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	d903      	bls.n	8016bda <xTaskPriorityInherit+0x7a>
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd6:	4a15      	ldr	r2, [pc, #84]	; (8016c2c <xTaskPriorityInherit+0xcc>)
 8016bd8:	6013      	str	r3, [r2, #0]
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bde:	4613      	mov	r3, r2
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	4413      	add	r3, r2
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	4a10      	ldr	r2, [pc, #64]	; (8016c28 <xTaskPriorityInherit+0xc8>)
 8016be8:	441a      	add	r2, r3
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	3304      	adds	r3, #4
 8016bee:	4619      	mov	r1, r3
 8016bf0:	4610      	mov	r0, r2
 8016bf2:	f7fd ff42 	bl	8014a7a <vListInsertEnd>
 8016bf6:	e004      	b.n	8016c02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016bf8:	4b0a      	ldr	r3, [pc, #40]	; (8016c24 <xTaskPriorityInherit+0xc4>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016c02:	2301      	movs	r3, #1
 8016c04:	60fb      	str	r3, [r7, #12]
 8016c06:	e008      	b.n	8016c1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016c0c:	4b05      	ldr	r3, [pc, #20]	; (8016c24 <xTaskPriorityInherit+0xc4>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d201      	bcs.n	8016c1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016c16:	2301      	movs	r3, #1
 8016c18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	3710      	adds	r7, #16
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	20000f8c 	.word	0x20000f8c
 8016c28:	20000f90 	.word	0x20000f90
 8016c2c:	20001468 	.word	0x20001468

08016c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b086      	sub	sp, #24
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d056      	beq.n	8016cf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016c46:	4b2e      	ldr	r3, [pc, #184]	; (8016d00 <xTaskPriorityDisinherit+0xd0>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	693a      	ldr	r2, [r7, #16]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d00a      	beq.n	8016c66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	60fb      	str	r3, [r7, #12]
}
 8016c62:	bf00      	nop
 8016c64:	e7fe      	b.n	8016c64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d10a      	bne.n	8016c84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c72:	f383 8811 	msr	BASEPRI, r3
 8016c76:	f3bf 8f6f 	isb	sy
 8016c7a:	f3bf 8f4f 	dsb	sy
 8016c7e:	60bb      	str	r3, [r7, #8]
}
 8016c80:	bf00      	nop
 8016c82:	e7fe      	b.n	8016c82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c88:	1e5a      	subs	r2, r3, #1
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d02c      	beq.n	8016cf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d128      	bne.n	8016cf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ca2:	693b      	ldr	r3, [r7, #16]
 8016ca4:	3304      	adds	r3, #4
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fd ff44 	bl	8014b34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cc4:	4b0f      	ldr	r3, [pc, #60]	; (8016d04 <xTaskPriorityDisinherit+0xd4>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d903      	bls.n	8016cd4 <xTaskPriorityDisinherit+0xa4>
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd0:	4a0c      	ldr	r2, [pc, #48]	; (8016d04 <xTaskPriorityDisinherit+0xd4>)
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cd8:	4613      	mov	r3, r2
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	4413      	add	r3, r2
 8016cde:	009b      	lsls	r3, r3, #2
 8016ce0:	4a09      	ldr	r2, [pc, #36]	; (8016d08 <xTaskPriorityDisinherit+0xd8>)
 8016ce2:	441a      	add	r2, r3
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	3304      	adds	r3, #4
 8016ce8:	4619      	mov	r1, r3
 8016cea:	4610      	mov	r0, r2
 8016cec:	f7fd fec5 	bl	8014a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016cf4:	697b      	ldr	r3, [r7, #20]
	}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3718      	adds	r7, #24
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	20000f8c 	.word	0x20000f8c
 8016d04:	20001468 	.word	0x20001468
 8016d08:	20000f90 	.word	0x20000f90

08016d0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b088      	sub	sp, #32
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d06a      	beq.n	8016dfa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016d24:	69bb      	ldr	r3, [r7, #24]
 8016d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d10a      	bne.n	8016d42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d30:	f383 8811 	msr	BASEPRI, r3
 8016d34:	f3bf 8f6f 	isb	sy
 8016d38:	f3bf 8f4f 	dsb	sy
 8016d3c:	60fb      	str	r3, [r7, #12]
}
 8016d3e:	bf00      	nop
 8016d40:	e7fe      	b.n	8016d40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d46:	683a      	ldr	r2, [r7, #0]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d902      	bls.n	8016d52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	61fb      	str	r3, [r7, #28]
 8016d50:	e002      	b.n	8016d58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016d52:	69bb      	ldr	r3, [r7, #24]
 8016d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016d58:	69bb      	ldr	r3, [r7, #24]
 8016d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d5c:	69fa      	ldr	r2, [r7, #28]
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d04b      	beq.n	8016dfa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d66:	697a      	ldr	r2, [r7, #20]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d146      	bne.n	8016dfa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016d6c:	4b25      	ldr	r3, [pc, #148]	; (8016e04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	69ba      	ldr	r2, [r7, #24]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d10a      	bne.n	8016d8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d7a:	f383 8811 	msr	BASEPRI, r3
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	f3bf 8f4f 	dsb	sy
 8016d86:	60bb      	str	r3, [r7, #8]
}
 8016d88:	bf00      	nop
 8016d8a:	e7fe      	b.n	8016d8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	69fa      	ldr	r2, [r7, #28]
 8016d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	699b      	ldr	r3, [r3, #24]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	db04      	blt.n	8016daa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	6959      	ldr	r1, [r3, #20]
 8016dae:	693a      	ldr	r2, [r7, #16]
 8016db0:	4613      	mov	r3, r2
 8016db2:	009b      	lsls	r3, r3, #2
 8016db4:	4413      	add	r3, r2
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	4a13      	ldr	r2, [pc, #76]	; (8016e08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016dba:	4413      	add	r3, r2
 8016dbc:	4299      	cmp	r1, r3
 8016dbe:	d11c      	bne.n	8016dfa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dc0:	69bb      	ldr	r3, [r7, #24]
 8016dc2:	3304      	adds	r3, #4
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7fd feb5 	bl	8014b34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dce:	4b0f      	ldr	r3, [pc, #60]	; (8016e0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d903      	bls.n	8016dde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dda:	4a0c      	ldr	r2, [pc, #48]	; (8016e0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016ddc:	6013      	str	r3, [r2, #0]
 8016dde:	69bb      	ldr	r3, [r7, #24]
 8016de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016de2:	4613      	mov	r3, r2
 8016de4:	009b      	lsls	r3, r3, #2
 8016de6:	4413      	add	r3, r2
 8016de8:	009b      	lsls	r3, r3, #2
 8016dea:	4a07      	ldr	r2, [pc, #28]	; (8016e08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016dec:	441a      	add	r2, r3
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	3304      	adds	r3, #4
 8016df2:	4619      	mov	r1, r3
 8016df4:	4610      	mov	r0, r2
 8016df6:	f7fd fe40 	bl	8014a7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016dfa:	bf00      	nop
 8016dfc:	3720      	adds	r7, #32
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	20000f8c 	.word	0x20000f8c
 8016e08:	20000f90 	.word	0x20000f90
 8016e0c:	20001468 	.word	0x20001468

08016e10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016e10:	b480      	push	{r7}
 8016e12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016e14:	4b07      	ldr	r3, [pc, #28]	; (8016e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d004      	beq.n	8016e26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016e1c:	4b05      	ldr	r3, [pc, #20]	; (8016e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e22:	3201      	adds	r2, #1
 8016e24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016e26:	4b03      	ldr	r3, [pc, #12]	; (8016e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e28:	681b      	ldr	r3, [r3, #0]
	}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr
 8016e34:	20000f8c 	.word	0x20000f8c

08016e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016e42:	4b21      	ldr	r3, [pc, #132]	; (8016ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e48:	4b20      	ldr	r3, [pc, #128]	; (8016ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	3304      	adds	r3, #4
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7fd fe70 	bl	8014b34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e5a:	d10a      	bne.n	8016e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d007      	beq.n	8016e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e62:	4b1a      	ldr	r3, [pc, #104]	; (8016ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	3304      	adds	r3, #4
 8016e68:	4619      	mov	r1, r3
 8016e6a:	4819      	ldr	r0, [pc, #100]	; (8016ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8016e6c:	f7fd fe05 	bl	8014a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016e70:	e026      	b.n	8016ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016e72:	68fa      	ldr	r2, [r7, #12]
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4413      	add	r3, r2
 8016e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016e7a:	4b14      	ldr	r3, [pc, #80]	; (8016ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	68ba      	ldr	r2, [r7, #8]
 8016e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016e82:	68ba      	ldr	r2, [r7, #8]
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d209      	bcs.n	8016e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e8a:	4b12      	ldr	r3, [pc, #72]	; (8016ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016e8c:	681a      	ldr	r2, [r3, #0]
 8016e8e:	4b0f      	ldr	r3, [pc, #60]	; (8016ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	3304      	adds	r3, #4
 8016e94:	4619      	mov	r1, r3
 8016e96:	4610      	mov	r0, r2
 8016e98:	f7fd fe13 	bl	8014ac2 <vListInsert>
}
 8016e9c:	e010      	b.n	8016ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e9e:	4b0e      	ldr	r3, [pc, #56]	; (8016ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016ea0:	681a      	ldr	r2, [r3, #0]
 8016ea2:	4b0a      	ldr	r3, [pc, #40]	; (8016ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	3304      	adds	r3, #4
 8016ea8:	4619      	mov	r1, r3
 8016eaa:	4610      	mov	r0, r2
 8016eac:	f7fd fe09 	bl	8014ac2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016eb0:	4b0a      	ldr	r3, [pc, #40]	; (8016edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	68ba      	ldr	r2, [r7, #8]
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d202      	bcs.n	8016ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016eba:	4a08      	ldr	r2, [pc, #32]	; (8016edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	6013      	str	r3, [r2, #0]
}
 8016ec0:	bf00      	nop
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	20001464 	.word	0x20001464
 8016ecc:	20000f8c 	.word	0x20000f8c
 8016ed0:	2000144c 	.word	0x2000144c
 8016ed4:	2000141c 	.word	0x2000141c
 8016ed8:	20001418 	.word	0x20001418
 8016edc:	20001480 	.word	0x20001480

08016ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b08a      	sub	sp, #40	; 0x28
 8016ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016eea:	f000 fb07 	bl	80174fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016eee:	4b1c      	ldr	r3, [pc, #112]	; (8016f60 <xTimerCreateTimerTask+0x80>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d021      	beq.n	8016f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016efa:	2300      	movs	r3, #0
 8016efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016efe:	1d3a      	adds	r2, r7, #4
 8016f00:	f107 0108 	add.w	r1, r7, #8
 8016f04:	f107 030c 	add.w	r3, r7, #12
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7fd fd6f 	bl	80149ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016f0e:	6879      	ldr	r1, [r7, #4]
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	68fa      	ldr	r2, [r7, #12]
 8016f14:	9202      	str	r2, [sp, #8]
 8016f16:	9301      	str	r3, [sp, #4]
 8016f18:	2302      	movs	r3, #2
 8016f1a:	9300      	str	r3, [sp, #0]
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	460a      	mov	r2, r1
 8016f20:	4910      	ldr	r1, [pc, #64]	; (8016f64 <xTimerCreateTimerTask+0x84>)
 8016f22:	4811      	ldr	r0, [pc, #68]	; (8016f68 <xTimerCreateTimerTask+0x88>)
 8016f24:	f7fe fe3e 	bl	8015ba4 <xTaskCreateStatic>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	4a10      	ldr	r2, [pc, #64]	; (8016f6c <xTimerCreateTimerTask+0x8c>)
 8016f2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016f2e:	4b0f      	ldr	r3, [pc, #60]	; (8016f6c <xTimerCreateTimerTask+0x8c>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d001      	beq.n	8016f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016f36:	2301      	movs	r3, #1
 8016f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d10a      	bne.n	8016f56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8016f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f44:	f383 8811 	msr	BASEPRI, r3
 8016f48:	f3bf 8f6f 	isb	sy
 8016f4c:	f3bf 8f4f 	dsb	sy
 8016f50:	613b      	str	r3, [r7, #16]
}
 8016f52:	bf00      	nop
 8016f54:	e7fe      	b.n	8016f54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016f56:	697b      	ldr	r3, [r7, #20]
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3718      	adds	r7, #24
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	200014bc 	.word	0x200014bc
 8016f64:	0802077c 	.word	0x0802077c
 8016f68:	080170a5 	.word	0x080170a5
 8016f6c:	200014c0 	.word	0x200014c0

08016f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b08a      	sub	sp, #40	; 0x28
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
 8016f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d10a      	bne.n	8016f9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8016f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f8c:	f383 8811 	msr	BASEPRI, r3
 8016f90:	f3bf 8f6f 	isb	sy
 8016f94:	f3bf 8f4f 	dsb	sy
 8016f98:	623b      	str	r3, [r7, #32]
}
 8016f9a:	bf00      	nop
 8016f9c:	e7fe      	b.n	8016f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016f9e:	4b1a      	ldr	r3, [pc, #104]	; (8017008 <xTimerGenericCommand+0x98>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d02a      	beq.n	8016ffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	2b05      	cmp	r3, #5
 8016fb6:	dc18      	bgt.n	8016fea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016fb8:	f7ff fdb4 	bl	8016b24 <xTaskGetSchedulerState>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	2b02      	cmp	r3, #2
 8016fc0:	d109      	bne.n	8016fd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016fc2:	4b11      	ldr	r3, [pc, #68]	; (8017008 <xTimerGenericCommand+0x98>)
 8016fc4:	6818      	ldr	r0, [r3, #0]
 8016fc6:	f107 0110 	add.w	r1, r7, #16
 8016fca:	2300      	movs	r3, #0
 8016fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fce:	f7fd ff83 	bl	8014ed8 <xQueueGenericSend>
 8016fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8016fd4:	e012      	b.n	8016ffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016fd6:	4b0c      	ldr	r3, [pc, #48]	; (8017008 <xTimerGenericCommand+0x98>)
 8016fd8:	6818      	ldr	r0, [r3, #0]
 8016fda:	f107 0110 	add.w	r1, r7, #16
 8016fde:	2300      	movs	r3, #0
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	f7fd ff79 	bl	8014ed8 <xQueueGenericSend>
 8016fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8016fe8:	e008      	b.n	8016ffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016fea:	4b07      	ldr	r3, [pc, #28]	; (8017008 <xTimerGenericCommand+0x98>)
 8016fec:	6818      	ldr	r0, [r3, #0]
 8016fee:	f107 0110 	add.w	r1, r7, #16
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	683a      	ldr	r2, [r7, #0]
 8016ff6:	f7fe f86d 	bl	80150d4 <xQueueGenericSendFromISR>
 8016ffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3728      	adds	r7, #40	; 0x28
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	200014bc 	.word	0x200014bc

0801700c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b088      	sub	sp, #32
 8017010:	af02      	add	r7, sp, #8
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017016:	4b22      	ldr	r3, [pc, #136]	; (80170a0 <prvProcessExpiredTimer+0x94>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	3304      	adds	r3, #4
 8017024:	4618      	mov	r0, r3
 8017026:	f7fd fd85 	bl	8014b34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017030:	f003 0304 	and.w	r3, r3, #4
 8017034:	2b00      	cmp	r3, #0
 8017036:	d022      	beq.n	801707e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	699a      	ldr	r2, [r3, #24]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	18d1      	adds	r1, r2, r3
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	683a      	ldr	r2, [r7, #0]
 8017044:	6978      	ldr	r0, [r7, #20]
 8017046:	f000 f8d1 	bl	80171ec <prvInsertTimerInActiveList>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d01f      	beq.n	8017090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017050:	2300      	movs	r3, #0
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	2300      	movs	r3, #0
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	2100      	movs	r1, #0
 801705a:	6978      	ldr	r0, [r7, #20]
 801705c:	f7ff ff88 	bl	8016f70 <xTimerGenericCommand>
 8017060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d113      	bne.n	8017090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706c:	f383 8811 	msr	BASEPRI, r3
 8017070:	f3bf 8f6f 	isb	sy
 8017074:	f3bf 8f4f 	dsb	sy
 8017078:	60fb      	str	r3, [r7, #12]
}
 801707a:	bf00      	nop
 801707c:	e7fe      	b.n	801707c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017084:	f023 0301 	bic.w	r3, r3, #1
 8017088:	b2da      	uxtb	r2, r3
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	6a1b      	ldr	r3, [r3, #32]
 8017094:	6978      	ldr	r0, [r7, #20]
 8017096:	4798      	blx	r3
}
 8017098:	bf00      	nop
 801709a:	3718      	adds	r7, #24
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	200014b4 	.word	0x200014b4

080170a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b084      	sub	sp, #16
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80170ac:	f107 0308 	add.w	r3, r7, #8
 80170b0:	4618      	mov	r0, r3
 80170b2:	f000 f857 	bl	8017164 <prvGetNextExpireTime>
 80170b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	4619      	mov	r1, r3
 80170bc:	68f8      	ldr	r0, [r7, #12]
 80170be:	f000 f803 	bl	80170c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80170c2:	f000 f8d5 	bl	8017270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80170c6:	e7f1      	b.n	80170ac <prvTimerTask+0x8>

080170c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b084      	sub	sp, #16
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80170d2:	f7ff f92b 	bl	801632c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80170d6:	f107 0308 	add.w	r3, r7, #8
 80170da:	4618      	mov	r0, r3
 80170dc:	f000 f866 	bl	80171ac <prvSampleTimeNow>
 80170e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d130      	bne.n	801714a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d10a      	bne.n	8017104 <prvProcessTimerOrBlockTask+0x3c>
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d806      	bhi.n	8017104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80170f6:	f7ff f927 	bl	8016348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80170fa:	68f9      	ldr	r1, [r7, #12]
 80170fc:	6878      	ldr	r0, [r7, #4]
 80170fe:	f7ff ff85 	bl	801700c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017102:	e024      	b.n	801714e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d008      	beq.n	801711c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801710a:	4b13      	ldr	r3, [pc, #76]	; (8017158 <prvProcessTimerOrBlockTask+0x90>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d101      	bne.n	8017118 <prvProcessTimerOrBlockTask+0x50>
 8017114:	2301      	movs	r3, #1
 8017116:	e000      	b.n	801711a <prvProcessTimerOrBlockTask+0x52>
 8017118:	2300      	movs	r3, #0
 801711a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801711c:	4b0f      	ldr	r3, [pc, #60]	; (801715c <prvProcessTimerOrBlockTask+0x94>)
 801711e:	6818      	ldr	r0, [r3, #0]
 8017120:	687a      	ldr	r2, [r7, #4]
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	683a      	ldr	r2, [r7, #0]
 8017128:	4619      	mov	r1, r3
 801712a:	f7fe fd07 	bl	8015b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801712e:	f7ff f90b 	bl	8016348 <xTaskResumeAll>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d10a      	bne.n	801714e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017138:	4b09      	ldr	r3, [pc, #36]	; (8017160 <prvProcessTimerOrBlockTask+0x98>)
 801713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801713e:	601a      	str	r2, [r3, #0]
 8017140:	f3bf 8f4f 	dsb	sy
 8017144:	f3bf 8f6f 	isb	sy
}
 8017148:	e001      	b.n	801714e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801714a:	f7ff f8fd 	bl	8016348 <xTaskResumeAll>
}
 801714e:	bf00      	nop
 8017150:	3710      	adds	r7, #16
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	200014b8 	.word	0x200014b8
 801715c:	200014bc 	.word	0x200014bc
 8017160:	e000ed04 	.word	0xe000ed04

08017164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017164:	b480      	push	{r7}
 8017166:	b085      	sub	sp, #20
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801716c:	4b0e      	ldr	r3, [pc, #56]	; (80171a8 <prvGetNextExpireTime+0x44>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d101      	bne.n	801717a <prvGetNextExpireTime+0x16>
 8017176:	2201      	movs	r2, #1
 8017178:	e000      	b.n	801717c <prvGetNextExpireTime+0x18>
 801717a:	2200      	movs	r2, #0
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d105      	bne.n	8017194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017188:	4b07      	ldr	r3, [pc, #28]	; (80171a8 <prvGetNextExpireTime+0x44>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	60fb      	str	r3, [r7, #12]
 8017192:	e001      	b.n	8017198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017194:	2300      	movs	r3, #0
 8017196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017198:	68fb      	ldr	r3, [r7, #12]
}
 801719a:	4618      	mov	r0, r3
 801719c:	3714      	adds	r7, #20
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop
 80171a8:	200014b4 	.word	0x200014b4

080171ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b084      	sub	sp, #16
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80171b4:	f7ff f966 	bl	8016484 <xTaskGetTickCount>
 80171b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80171ba:	4b0b      	ldr	r3, [pc, #44]	; (80171e8 <prvSampleTimeNow+0x3c>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d205      	bcs.n	80171d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80171c4:	f000 f936 	bl	8017434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2201      	movs	r2, #1
 80171cc:	601a      	str	r2, [r3, #0]
 80171ce:	e002      	b.n	80171d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2200      	movs	r2, #0
 80171d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80171d6:	4a04      	ldr	r2, [pc, #16]	; (80171e8 <prvSampleTimeNow+0x3c>)
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80171dc:	68fb      	ldr	r3, [r7, #12]
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	200014c4 	.word	0x200014c4

080171ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b086      	sub	sp, #24
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
 80171f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80171fa:	2300      	movs	r3, #0
 80171fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	68ba      	ldr	r2, [r7, #8]
 8017202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	68fa      	ldr	r2, [r7, #12]
 8017208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801720a:	68ba      	ldr	r2, [r7, #8]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	429a      	cmp	r2, r3
 8017210:	d812      	bhi.n	8017238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017212:	687a      	ldr	r2, [r7, #4]
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	1ad2      	subs	r2, r2, r3
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	699b      	ldr	r3, [r3, #24]
 801721c:	429a      	cmp	r2, r3
 801721e:	d302      	bcc.n	8017226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017220:	2301      	movs	r3, #1
 8017222:	617b      	str	r3, [r7, #20]
 8017224:	e01b      	b.n	801725e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017226:	4b10      	ldr	r3, [pc, #64]	; (8017268 <prvInsertTimerInActiveList+0x7c>)
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	3304      	adds	r3, #4
 801722e:	4619      	mov	r1, r3
 8017230:	4610      	mov	r0, r2
 8017232:	f7fd fc46 	bl	8014ac2 <vListInsert>
 8017236:	e012      	b.n	801725e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	429a      	cmp	r2, r3
 801723e:	d206      	bcs.n	801724e <prvInsertTimerInActiveList+0x62>
 8017240:	68ba      	ldr	r2, [r7, #8]
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	429a      	cmp	r2, r3
 8017246:	d302      	bcc.n	801724e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017248:	2301      	movs	r3, #1
 801724a:	617b      	str	r3, [r7, #20]
 801724c:	e007      	b.n	801725e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801724e:	4b07      	ldr	r3, [pc, #28]	; (801726c <prvInsertTimerInActiveList+0x80>)
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	3304      	adds	r3, #4
 8017256:	4619      	mov	r1, r3
 8017258:	4610      	mov	r0, r2
 801725a:	f7fd fc32 	bl	8014ac2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801725e:	697b      	ldr	r3, [r7, #20]
}
 8017260:	4618      	mov	r0, r3
 8017262:	3718      	adds	r7, #24
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	200014b8 	.word	0x200014b8
 801726c:	200014b4 	.word	0x200014b4

08017270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b08e      	sub	sp, #56	; 0x38
 8017274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017276:	e0ca      	b.n	801740e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	da18      	bge.n	80172b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801727e:	1d3b      	adds	r3, r7, #4
 8017280:	3304      	adds	r3, #4
 8017282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017286:	2b00      	cmp	r3, #0
 8017288:	d10a      	bne.n	80172a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801728e:	f383 8811 	msr	BASEPRI, r3
 8017292:	f3bf 8f6f 	isb	sy
 8017296:	f3bf 8f4f 	dsb	sy
 801729a:	61fb      	str	r3, [r7, #28]
}
 801729c:	bf00      	nop
 801729e:	e7fe      	b.n	801729e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80172a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172a6:	6850      	ldr	r0, [r2, #4]
 80172a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172aa:	6892      	ldr	r2, [r2, #8]
 80172ac:	4611      	mov	r1, r2
 80172ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	f2c0 80aa 	blt.w	801740c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80172bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172be:	695b      	ldr	r3, [r3, #20]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d004      	beq.n	80172ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80172c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c6:	3304      	adds	r3, #4
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7fd fc33 	bl	8014b34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80172ce:	463b      	mov	r3, r7
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff ff6b 	bl	80171ac <prvSampleTimeNow>
 80172d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2b09      	cmp	r3, #9
 80172dc:	f200 8097 	bhi.w	801740e <prvProcessReceivedCommands+0x19e>
 80172e0:	a201      	add	r2, pc, #4	; (adr r2, 80172e8 <prvProcessReceivedCommands+0x78>)
 80172e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172e6:	bf00      	nop
 80172e8:	08017311 	.word	0x08017311
 80172ec:	08017311 	.word	0x08017311
 80172f0:	08017311 	.word	0x08017311
 80172f4:	08017385 	.word	0x08017385
 80172f8:	08017399 	.word	0x08017399
 80172fc:	080173e3 	.word	0x080173e3
 8017300:	08017311 	.word	0x08017311
 8017304:	08017311 	.word	0x08017311
 8017308:	08017385 	.word	0x08017385
 801730c:	08017399 	.word	0x08017399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017316:	f043 0301 	orr.w	r3, r3, #1
 801731a:	b2da      	uxtb	r2, r3
 801731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801731e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017322:	68ba      	ldr	r2, [r7, #8]
 8017324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017326:	699b      	ldr	r3, [r3, #24]
 8017328:	18d1      	adds	r1, r2, r3
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801732e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017330:	f7ff ff5c 	bl	80171ec <prvInsertTimerInActiveList>
 8017334:	4603      	mov	r3, r0
 8017336:	2b00      	cmp	r3, #0
 8017338:	d069      	beq.n	801740e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733c:	6a1b      	ldr	r3, [r3, #32]
 801733e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017348:	f003 0304 	and.w	r3, r3, #4
 801734c:	2b00      	cmp	r3, #0
 801734e:	d05e      	beq.n	801740e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017350:	68ba      	ldr	r2, [r7, #8]
 8017352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017354:	699b      	ldr	r3, [r3, #24]
 8017356:	441a      	add	r2, r3
 8017358:	2300      	movs	r3, #0
 801735a:	9300      	str	r3, [sp, #0]
 801735c:	2300      	movs	r3, #0
 801735e:	2100      	movs	r1, #0
 8017360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017362:	f7ff fe05 	bl	8016f70 <xTimerGenericCommand>
 8017366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017368:	6a3b      	ldr	r3, [r7, #32]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d14f      	bne.n	801740e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017372:	f383 8811 	msr	BASEPRI, r3
 8017376:	f3bf 8f6f 	isb	sy
 801737a:	f3bf 8f4f 	dsb	sy
 801737e:	61bb      	str	r3, [r7, #24]
}
 8017380:	bf00      	nop
 8017382:	e7fe      	b.n	8017382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801738a:	f023 0301 	bic.w	r3, r3, #1
 801738e:	b2da      	uxtb	r2, r3
 8017390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017396:	e03a      	b.n	801740e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801739e:	f043 0301 	orr.w	r3, r3, #1
 80173a2:	b2da      	uxtb	r2, r3
 80173a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80173aa:	68ba      	ldr	r2, [r7, #8]
 80173ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80173b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b2:	699b      	ldr	r3, [r3, #24]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d10a      	bne.n	80173ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80173b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173bc:	f383 8811 	msr	BASEPRI, r3
 80173c0:	f3bf 8f6f 	isb	sy
 80173c4:	f3bf 8f4f 	dsb	sy
 80173c8:	617b      	str	r3, [r7, #20]
}
 80173ca:	bf00      	nop
 80173cc:	e7fe      	b.n	80173cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	699a      	ldr	r2, [r3, #24]
 80173d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d4:	18d1      	adds	r1, r2, r3
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173dc:	f7ff ff06 	bl	80171ec <prvInsertTimerInActiveList>
					break;
 80173e0:	e015      	b.n	801740e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173e8:	f003 0302 	and.w	r3, r3, #2
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d103      	bne.n	80173f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80173f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f2:	f000 fbdd 	bl	8017bb0 <vPortFree>
 80173f6:	e00a      	b.n	801740e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80173f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173fe:	f023 0301 	bic.w	r3, r3, #1
 8017402:	b2da      	uxtb	r2, r3
 8017404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801740a:	e000      	b.n	801740e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801740c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801740e:	4b08      	ldr	r3, [pc, #32]	; (8017430 <prvProcessReceivedCommands+0x1c0>)
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	1d39      	adds	r1, r7, #4
 8017414:	2200      	movs	r2, #0
 8017416:	4618      	mov	r0, r3
 8017418:	f7fd ff84 	bl	8015324 <xQueueReceive>
 801741c:	4603      	mov	r3, r0
 801741e:	2b00      	cmp	r3, #0
 8017420:	f47f af2a 	bne.w	8017278 <prvProcessReceivedCommands+0x8>
	}
}
 8017424:	bf00      	nop
 8017426:	bf00      	nop
 8017428:	3730      	adds	r7, #48	; 0x30
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}
 801742e:	bf00      	nop
 8017430:	200014bc 	.word	0x200014bc

08017434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b088      	sub	sp, #32
 8017438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801743a:	e048      	b.n	80174ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801743c:	4b2d      	ldr	r3, [pc, #180]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	68db      	ldr	r3, [r3, #12]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017446:	4b2b      	ldr	r3, [pc, #172]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	68db      	ldr	r3, [r3, #12]
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	3304      	adds	r3, #4
 8017454:	4618      	mov	r0, r3
 8017456:	f7fd fb6d 	bl	8014b34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6a1b      	ldr	r3, [r3, #32]
 801745e:	68f8      	ldr	r0, [r7, #12]
 8017460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017468:	f003 0304 	and.w	r3, r3, #4
 801746c:	2b00      	cmp	r3, #0
 801746e:	d02e      	beq.n	80174ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	699b      	ldr	r3, [r3, #24]
 8017474:	693a      	ldr	r2, [r7, #16]
 8017476:	4413      	add	r3, r2
 8017478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801747a:	68ba      	ldr	r2, [r7, #8]
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	429a      	cmp	r2, r3
 8017480:	d90e      	bls.n	80174a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	68ba      	ldr	r2, [r7, #8]
 8017486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	68fa      	ldr	r2, [r7, #12]
 801748c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801748e:	4b19      	ldr	r3, [pc, #100]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	3304      	adds	r3, #4
 8017496:	4619      	mov	r1, r3
 8017498:	4610      	mov	r0, r2
 801749a:	f7fd fb12 	bl	8014ac2 <vListInsert>
 801749e:	e016      	b.n	80174ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80174a0:	2300      	movs	r3, #0
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	2300      	movs	r3, #0
 80174a6:	693a      	ldr	r2, [r7, #16]
 80174a8:	2100      	movs	r1, #0
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fd60 	bl	8016f70 <xTimerGenericCommand>
 80174b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d10a      	bne.n	80174ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80174b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174bc:	f383 8811 	msr	BASEPRI, r3
 80174c0:	f3bf 8f6f 	isb	sy
 80174c4:	f3bf 8f4f 	dsb	sy
 80174c8:	603b      	str	r3, [r7, #0]
}
 80174ca:	bf00      	nop
 80174cc:	e7fe      	b.n	80174cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80174ce:	4b09      	ldr	r3, [pc, #36]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d1b1      	bne.n	801743c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80174d8:	4b06      	ldr	r3, [pc, #24]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80174de:	4b06      	ldr	r3, [pc, #24]	; (80174f8 <prvSwitchTimerLists+0xc4>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	4a04      	ldr	r2, [pc, #16]	; (80174f4 <prvSwitchTimerLists+0xc0>)
 80174e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80174e6:	4a04      	ldr	r2, [pc, #16]	; (80174f8 <prvSwitchTimerLists+0xc4>)
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	6013      	str	r3, [r2, #0]
}
 80174ec:	bf00      	nop
 80174ee:	3718      	adds	r7, #24
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}
 80174f4:	200014b4 	.word	0x200014b4
 80174f8:	200014b8 	.word	0x200014b8

080174fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017502:	f000 f967 	bl	80177d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017506:	4b15      	ldr	r3, [pc, #84]	; (801755c <prvCheckForValidListAndQueue+0x60>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d120      	bne.n	8017550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801750e:	4814      	ldr	r0, [pc, #80]	; (8017560 <prvCheckForValidListAndQueue+0x64>)
 8017510:	f7fd fa86 	bl	8014a20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017514:	4813      	ldr	r0, [pc, #76]	; (8017564 <prvCheckForValidListAndQueue+0x68>)
 8017516:	f7fd fa83 	bl	8014a20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801751a:	4b13      	ldr	r3, [pc, #76]	; (8017568 <prvCheckForValidListAndQueue+0x6c>)
 801751c:	4a10      	ldr	r2, [pc, #64]	; (8017560 <prvCheckForValidListAndQueue+0x64>)
 801751e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017520:	4b12      	ldr	r3, [pc, #72]	; (801756c <prvCheckForValidListAndQueue+0x70>)
 8017522:	4a10      	ldr	r2, [pc, #64]	; (8017564 <prvCheckForValidListAndQueue+0x68>)
 8017524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017526:	2300      	movs	r3, #0
 8017528:	9300      	str	r3, [sp, #0]
 801752a:	4b11      	ldr	r3, [pc, #68]	; (8017570 <prvCheckForValidListAndQueue+0x74>)
 801752c:	4a11      	ldr	r2, [pc, #68]	; (8017574 <prvCheckForValidListAndQueue+0x78>)
 801752e:	2110      	movs	r1, #16
 8017530:	200a      	movs	r0, #10
 8017532:	f7fd fb91 	bl	8014c58 <xQueueGenericCreateStatic>
 8017536:	4603      	mov	r3, r0
 8017538:	4a08      	ldr	r2, [pc, #32]	; (801755c <prvCheckForValidListAndQueue+0x60>)
 801753a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801753c:	4b07      	ldr	r3, [pc, #28]	; (801755c <prvCheckForValidListAndQueue+0x60>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d005      	beq.n	8017550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017544:	4b05      	ldr	r3, [pc, #20]	; (801755c <prvCheckForValidListAndQueue+0x60>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	490b      	ldr	r1, [pc, #44]	; (8017578 <prvCheckForValidListAndQueue+0x7c>)
 801754a:	4618      	mov	r0, r3
 801754c:	f7fe faa2 	bl	8015a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017550:	f000 f970 	bl	8017834 <vPortExitCritical>
}
 8017554:	bf00      	nop
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	200014bc 	.word	0x200014bc
 8017560:	2000148c 	.word	0x2000148c
 8017564:	200014a0 	.word	0x200014a0
 8017568:	200014b4 	.word	0x200014b4
 801756c:	200014b8 	.word	0x200014b8
 8017570:	20001568 	.word	0x20001568
 8017574:	200014c8 	.word	0x200014c8
 8017578:	08020784 	.word	0x08020784

0801757c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801757c:	b480      	push	{r7}
 801757e:	b085      	sub	sp, #20
 8017580:	af00      	add	r7, sp, #0
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	3b04      	subs	r3, #4
 801758c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	3b04      	subs	r3, #4
 801759a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801759c:	68bb      	ldr	r3, [r7, #8]
 801759e:	f023 0201 	bic.w	r2, r3, #1
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	3b04      	subs	r3, #4
 80175aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80175ac:	4a0c      	ldr	r2, [pc, #48]	; (80175e0 <pxPortInitialiseStack+0x64>)
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	3b14      	subs	r3, #20
 80175b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80175b8:	687a      	ldr	r2, [r7, #4]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	3b04      	subs	r3, #4
 80175c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	f06f 0202 	mvn.w	r2, #2
 80175ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	3b20      	subs	r3, #32
 80175d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80175d2:	68fb      	ldr	r3, [r7, #12]
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3714      	adds	r7, #20
 80175d8:	46bd      	mov	sp, r7
 80175da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175de:	4770      	bx	lr
 80175e0:	080175e5 	.word	0x080175e5

080175e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80175e4:	b480      	push	{r7}
 80175e6:	b085      	sub	sp, #20
 80175e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80175ea:	2300      	movs	r3, #0
 80175ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80175ee:	4b12      	ldr	r3, [pc, #72]	; (8017638 <prvTaskExitError+0x54>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175f6:	d00a      	beq.n	801760e <prvTaskExitError+0x2a>
	__asm volatile
 80175f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175fc:	f383 8811 	msr	BASEPRI, r3
 8017600:	f3bf 8f6f 	isb	sy
 8017604:	f3bf 8f4f 	dsb	sy
 8017608:	60fb      	str	r3, [r7, #12]
}
 801760a:	bf00      	nop
 801760c:	e7fe      	b.n	801760c <prvTaskExitError+0x28>
	__asm volatile
 801760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017612:	f383 8811 	msr	BASEPRI, r3
 8017616:	f3bf 8f6f 	isb	sy
 801761a:	f3bf 8f4f 	dsb	sy
 801761e:	60bb      	str	r3, [r7, #8]
}
 8017620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017622:	bf00      	nop
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d0fc      	beq.n	8017624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801762a:	bf00      	nop
 801762c:	bf00      	nop
 801762e:	3714      	adds	r7, #20
 8017630:	46bd      	mov	sp, r7
 8017632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017636:	4770      	bx	lr
 8017638:	20000190 	.word	0x20000190
 801763c:	00000000 	.word	0x00000000

08017640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017640:	4b07      	ldr	r3, [pc, #28]	; (8017660 <pxCurrentTCBConst2>)
 8017642:	6819      	ldr	r1, [r3, #0]
 8017644:	6808      	ldr	r0, [r1, #0]
 8017646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764a:	f380 8809 	msr	PSP, r0
 801764e:	f3bf 8f6f 	isb	sy
 8017652:	f04f 0000 	mov.w	r0, #0
 8017656:	f380 8811 	msr	BASEPRI, r0
 801765a:	4770      	bx	lr
 801765c:	f3af 8000 	nop.w

08017660 <pxCurrentTCBConst2>:
 8017660:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017664:	bf00      	nop
 8017666:	bf00      	nop

08017668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017668:	4808      	ldr	r0, [pc, #32]	; (801768c <prvPortStartFirstTask+0x24>)
 801766a:	6800      	ldr	r0, [r0, #0]
 801766c:	6800      	ldr	r0, [r0, #0]
 801766e:	f380 8808 	msr	MSP, r0
 8017672:	f04f 0000 	mov.w	r0, #0
 8017676:	f380 8814 	msr	CONTROL, r0
 801767a:	b662      	cpsie	i
 801767c:	b661      	cpsie	f
 801767e:	f3bf 8f4f 	dsb	sy
 8017682:	f3bf 8f6f 	isb	sy
 8017686:	df00      	svc	0
 8017688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801768a:	bf00      	nop
 801768c:	e000ed08 	.word	0xe000ed08

08017690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b086      	sub	sp, #24
 8017694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017696:	4b46      	ldr	r3, [pc, #280]	; (80177b0 <xPortStartScheduler+0x120>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	4a46      	ldr	r2, [pc, #280]	; (80177b4 <xPortStartScheduler+0x124>)
 801769c:	4293      	cmp	r3, r2
 801769e:	d10a      	bne.n	80176b6 <xPortStartScheduler+0x26>
	__asm volatile
 80176a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a4:	f383 8811 	msr	BASEPRI, r3
 80176a8:	f3bf 8f6f 	isb	sy
 80176ac:	f3bf 8f4f 	dsb	sy
 80176b0:	613b      	str	r3, [r7, #16]
}
 80176b2:	bf00      	nop
 80176b4:	e7fe      	b.n	80176b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80176b6:	4b3e      	ldr	r3, [pc, #248]	; (80177b0 <xPortStartScheduler+0x120>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	4a3f      	ldr	r2, [pc, #252]	; (80177b8 <xPortStartScheduler+0x128>)
 80176bc:	4293      	cmp	r3, r2
 80176be:	d10a      	bne.n	80176d6 <xPortStartScheduler+0x46>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c4:	f383 8811 	msr	BASEPRI, r3
 80176c8:	f3bf 8f6f 	isb	sy
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	60fb      	str	r3, [r7, #12]
}
 80176d2:	bf00      	nop
 80176d4:	e7fe      	b.n	80176d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80176d6:	4b39      	ldr	r3, [pc, #228]	; (80177bc <xPortStartScheduler+0x12c>)
 80176d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80176e2:	697b      	ldr	r3, [r7, #20]
 80176e4:	22ff      	movs	r2, #255	; 0xff
 80176e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80176f0:	78fb      	ldrb	r3, [r7, #3]
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	4b31      	ldr	r3, [pc, #196]	; (80177c0 <xPortStartScheduler+0x130>)
 80176fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80176fe:	4b31      	ldr	r3, [pc, #196]	; (80177c4 <xPortStartScheduler+0x134>)
 8017700:	2207      	movs	r2, #7
 8017702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017704:	e009      	b.n	801771a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017706:	4b2f      	ldr	r3, [pc, #188]	; (80177c4 <xPortStartScheduler+0x134>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	3b01      	subs	r3, #1
 801770c:	4a2d      	ldr	r2, [pc, #180]	; (80177c4 <xPortStartScheduler+0x134>)
 801770e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017710:	78fb      	ldrb	r3, [r7, #3]
 8017712:	b2db      	uxtb	r3, r3
 8017714:	005b      	lsls	r3, r3, #1
 8017716:	b2db      	uxtb	r3, r3
 8017718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801771a:	78fb      	ldrb	r3, [r7, #3]
 801771c:	b2db      	uxtb	r3, r3
 801771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017722:	2b80      	cmp	r3, #128	; 0x80
 8017724:	d0ef      	beq.n	8017706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017726:	4b27      	ldr	r3, [pc, #156]	; (80177c4 <xPortStartScheduler+0x134>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	f1c3 0307 	rsb	r3, r3, #7
 801772e:	2b04      	cmp	r3, #4
 8017730:	d00a      	beq.n	8017748 <xPortStartScheduler+0xb8>
	__asm volatile
 8017732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017736:	f383 8811 	msr	BASEPRI, r3
 801773a:	f3bf 8f6f 	isb	sy
 801773e:	f3bf 8f4f 	dsb	sy
 8017742:	60bb      	str	r3, [r7, #8]
}
 8017744:	bf00      	nop
 8017746:	e7fe      	b.n	8017746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017748:	4b1e      	ldr	r3, [pc, #120]	; (80177c4 <xPortStartScheduler+0x134>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	021b      	lsls	r3, r3, #8
 801774e:	4a1d      	ldr	r2, [pc, #116]	; (80177c4 <xPortStartScheduler+0x134>)
 8017750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017752:	4b1c      	ldr	r3, [pc, #112]	; (80177c4 <xPortStartScheduler+0x134>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801775a:	4a1a      	ldr	r2, [pc, #104]	; (80177c4 <xPortStartScheduler+0x134>)
 801775c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	b2da      	uxtb	r2, r3
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017766:	4b18      	ldr	r3, [pc, #96]	; (80177c8 <xPortStartScheduler+0x138>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	4a17      	ldr	r2, [pc, #92]	; (80177c8 <xPortStartScheduler+0x138>)
 801776c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017772:	4b15      	ldr	r3, [pc, #84]	; (80177c8 <xPortStartScheduler+0x138>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4a14      	ldr	r2, [pc, #80]	; (80177c8 <xPortStartScheduler+0x138>)
 8017778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801777c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801777e:	f000 f8dd 	bl	801793c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017782:	4b12      	ldr	r3, [pc, #72]	; (80177cc <xPortStartScheduler+0x13c>)
 8017784:	2200      	movs	r2, #0
 8017786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017788:	f000 f8fc 	bl	8017984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801778c:	4b10      	ldr	r3, [pc, #64]	; (80177d0 <xPortStartScheduler+0x140>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	4a0f      	ldr	r2, [pc, #60]	; (80177d0 <xPortStartScheduler+0x140>)
 8017792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017798:	f7ff ff66 	bl	8017668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801779c:	f7fe ff3c 	bl	8016618 <vTaskSwitchContext>
	prvTaskExitError();
 80177a0:	f7ff ff20 	bl	80175e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80177a4:	2300      	movs	r3, #0
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3718      	adds	r7, #24
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	e000ed00 	.word	0xe000ed00
 80177b4:	410fc271 	.word	0x410fc271
 80177b8:	410fc270 	.word	0x410fc270
 80177bc:	e000e400 	.word	0xe000e400
 80177c0:	200015b8 	.word	0x200015b8
 80177c4:	200015bc 	.word	0x200015bc
 80177c8:	e000ed20 	.word	0xe000ed20
 80177cc:	20000190 	.word	0x20000190
 80177d0:	e000ef34 	.word	0xe000ef34

080177d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80177d4:	b480      	push	{r7}
 80177d6:	b083      	sub	sp, #12
 80177d8:	af00      	add	r7, sp, #0
	__asm volatile
 80177da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177de:	f383 8811 	msr	BASEPRI, r3
 80177e2:	f3bf 8f6f 	isb	sy
 80177e6:	f3bf 8f4f 	dsb	sy
 80177ea:	607b      	str	r3, [r7, #4]
}
 80177ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80177ee:	4b0f      	ldr	r3, [pc, #60]	; (801782c <vPortEnterCritical+0x58>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	3301      	adds	r3, #1
 80177f4:	4a0d      	ldr	r2, [pc, #52]	; (801782c <vPortEnterCritical+0x58>)
 80177f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80177f8:	4b0c      	ldr	r3, [pc, #48]	; (801782c <vPortEnterCritical+0x58>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	d10f      	bne.n	8017820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017800:	4b0b      	ldr	r3, [pc, #44]	; (8017830 <vPortEnterCritical+0x5c>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	b2db      	uxtb	r3, r3
 8017806:	2b00      	cmp	r3, #0
 8017808:	d00a      	beq.n	8017820 <vPortEnterCritical+0x4c>
	__asm volatile
 801780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801780e:	f383 8811 	msr	BASEPRI, r3
 8017812:	f3bf 8f6f 	isb	sy
 8017816:	f3bf 8f4f 	dsb	sy
 801781a:	603b      	str	r3, [r7, #0]
}
 801781c:	bf00      	nop
 801781e:	e7fe      	b.n	801781e <vPortEnterCritical+0x4a>
	}
}
 8017820:	bf00      	nop
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr
 801782c:	20000190 	.word	0x20000190
 8017830:	e000ed04 	.word	0xe000ed04

08017834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017834:	b480      	push	{r7}
 8017836:	b083      	sub	sp, #12
 8017838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801783a:	4b12      	ldr	r3, [pc, #72]	; (8017884 <vPortExitCritical+0x50>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d10a      	bne.n	8017858 <vPortExitCritical+0x24>
	__asm volatile
 8017842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017846:	f383 8811 	msr	BASEPRI, r3
 801784a:	f3bf 8f6f 	isb	sy
 801784e:	f3bf 8f4f 	dsb	sy
 8017852:	607b      	str	r3, [r7, #4]
}
 8017854:	bf00      	nop
 8017856:	e7fe      	b.n	8017856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017858:	4b0a      	ldr	r3, [pc, #40]	; (8017884 <vPortExitCritical+0x50>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	3b01      	subs	r3, #1
 801785e:	4a09      	ldr	r2, [pc, #36]	; (8017884 <vPortExitCritical+0x50>)
 8017860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017862:	4b08      	ldr	r3, [pc, #32]	; (8017884 <vPortExitCritical+0x50>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d105      	bne.n	8017876 <vPortExitCritical+0x42>
 801786a:	2300      	movs	r3, #0
 801786c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	f383 8811 	msr	BASEPRI, r3
}
 8017874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017876:	bf00      	nop
 8017878:	370c      	adds	r7, #12
 801787a:	46bd      	mov	sp, r7
 801787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017880:	4770      	bx	lr
 8017882:	bf00      	nop
 8017884:	20000190 	.word	0x20000190
	...

08017890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017890:	f3ef 8009 	mrs	r0, PSP
 8017894:	f3bf 8f6f 	isb	sy
 8017898:	4b15      	ldr	r3, [pc, #84]	; (80178f0 <pxCurrentTCBConst>)
 801789a:	681a      	ldr	r2, [r3, #0]
 801789c:	f01e 0f10 	tst.w	lr, #16
 80178a0:	bf08      	it	eq
 80178a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80178a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178aa:	6010      	str	r0, [r2, #0]
 80178ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80178b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80178b4:	f380 8811 	msr	BASEPRI, r0
 80178b8:	f3bf 8f4f 	dsb	sy
 80178bc:	f3bf 8f6f 	isb	sy
 80178c0:	f7fe feaa 	bl	8016618 <vTaskSwitchContext>
 80178c4:	f04f 0000 	mov.w	r0, #0
 80178c8:	f380 8811 	msr	BASEPRI, r0
 80178cc:	bc09      	pop	{r0, r3}
 80178ce:	6819      	ldr	r1, [r3, #0]
 80178d0:	6808      	ldr	r0, [r1, #0]
 80178d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d6:	f01e 0f10 	tst.w	lr, #16
 80178da:	bf08      	it	eq
 80178dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80178e0:	f380 8809 	msr	PSP, r0
 80178e4:	f3bf 8f6f 	isb	sy
 80178e8:	4770      	bx	lr
 80178ea:	bf00      	nop
 80178ec:	f3af 8000 	nop.w

080178f0 <pxCurrentTCBConst>:
 80178f0:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80178f4:	bf00      	nop
 80178f6:	bf00      	nop

080178f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
	__asm volatile
 80178fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017902:	f383 8811 	msr	BASEPRI, r3
 8017906:	f3bf 8f6f 	isb	sy
 801790a:	f3bf 8f4f 	dsb	sy
 801790e:	607b      	str	r3, [r7, #4]
}
 8017910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017912:	f7fe fdc7 	bl	80164a4 <xTaskIncrementTick>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d003      	beq.n	8017924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801791c:	4b06      	ldr	r3, [pc, #24]	; (8017938 <xPortSysTickHandler+0x40>)
 801791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017922:	601a      	str	r2, [r3, #0]
 8017924:	2300      	movs	r3, #0
 8017926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	f383 8811 	msr	BASEPRI, r3
}
 801792e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017930:	bf00      	nop
 8017932:	3708      	adds	r7, #8
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	e000ed04 	.word	0xe000ed04

0801793c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801793c:	b480      	push	{r7}
 801793e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017940:	4b0b      	ldr	r3, [pc, #44]	; (8017970 <vPortSetupTimerInterrupt+0x34>)
 8017942:	2200      	movs	r2, #0
 8017944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017946:	4b0b      	ldr	r3, [pc, #44]	; (8017974 <vPortSetupTimerInterrupt+0x38>)
 8017948:	2200      	movs	r2, #0
 801794a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801794c:	4b0a      	ldr	r3, [pc, #40]	; (8017978 <vPortSetupTimerInterrupt+0x3c>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	4a0a      	ldr	r2, [pc, #40]	; (801797c <vPortSetupTimerInterrupt+0x40>)
 8017952:	fba2 2303 	umull	r2, r3, r2, r3
 8017956:	099b      	lsrs	r3, r3, #6
 8017958:	4a09      	ldr	r2, [pc, #36]	; (8017980 <vPortSetupTimerInterrupt+0x44>)
 801795a:	3b01      	subs	r3, #1
 801795c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801795e:	4b04      	ldr	r3, [pc, #16]	; (8017970 <vPortSetupTimerInterrupt+0x34>)
 8017960:	2207      	movs	r2, #7
 8017962:	601a      	str	r2, [r3, #0]
}
 8017964:	bf00      	nop
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	e000e010 	.word	0xe000e010
 8017974:	e000e018 	.word	0xe000e018
 8017978:	20000000 	.word	0x20000000
 801797c:	10624dd3 	.word	0x10624dd3
 8017980:	e000e014 	.word	0xe000e014

08017984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017994 <vPortEnableVFP+0x10>
 8017988:	6801      	ldr	r1, [r0, #0]
 801798a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801798e:	6001      	str	r1, [r0, #0]
 8017990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017992:	bf00      	nop
 8017994:	e000ed88 	.word	0xe000ed88

08017998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017998:	b480      	push	{r7}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801799e:	f3ef 8305 	mrs	r3, IPSR
 80179a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	2b0f      	cmp	r3, #15
 80179a8:	d914      	bls.n	80179d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80179aa:	4a17      	ldr	r2, [pc, #92]	; (8017a08 <vPortValidateInterruptPriority+0x70>)
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	4413      	add	r3, r2
 80179b0:	781b      	ldrb	r3, [r3, #0]
 80179b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80179b4:	4b15      	ldr	r3, [pc, #84]	; (8017a0c <vPortValidateInterruptPriority+0x74>)
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	7afa      	ldrb	r2, [r7, #11]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d20a      	bcs.n	80179d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80179be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c2:	f383 8811 	msr	BASEPRI, r3
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	f3bf 8f4f 	dsb	sy
 80179ce:	607b      	str	r3, [r7, #4]
}
 80179d0:	bf00      	nop
 80179d2:	e7fe      	b.n	80179d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80179d4:	4b0e      	ldr	r3, [pc, #56]	; (8017a10 <vPortValidateInterruptPriority+0x78>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80179dc:	4b0d      	ldr	r3, [pc, #52]	; (8017a14 <vPortValidateInterruptPriority+0x7c>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	429a      	cmp	r2, r3
 80179e2:	d90a      	bls.n	80179fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80179e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e8:	f383 8811 	msr	BASEPRI, r3
 80179ec:	f3bf 8f6f 	isb	sy
 80179f0:	f3bf 8f4f 	dsb	sy
 80179f4:	603b      	str	r3, [r7, #0]
}
 80179f6:	bf00      	nop
 80179f8:	e7fe      	b.n	80179f8 <vPortValidateInterruptPriority+0x60>
	}
 80179fa:	bf00      	nop
 80179fc:	3714      	adds	r7, #20
 80179fe:	46bd      	mov	sp, r7
 8017a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a04:	4770      	bx	lr
 8017a06:	bf00      	nop
 8017a08:	e000e3f0 	.word	0xe000e3f0
 8017a0c:	200015b8 	.word	0x200015b8
 8017a10:	e000ed0c 	.word	0xe000ed0c
 8017a14:	200015bc 	.word	0x200015bc

08017a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b08a      	sub	sp, #40	; 0x28
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017a20:	2300      	movs	r3, #0
 8017a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017a24:	f7fe fc82 	bl	801632c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017a28:	4b5b      	ldr	r3, [pc, #364]	; (8017b98 <pvPortMalloc+0x180>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d101      	bne.n	8017a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017a30:	f000 f920 	bl	8017c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017a34:	4b59      	ldr	r3, [pc, #356]	; (8017b9c <pvPortMalloc+0x184>)
 8017a36:	681a      	ldr	r2, [r3, #0]
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	4013      	ands	r3, r2
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f040 8093 	bne.w	8017b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d01d      	beq.n	8017a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017a48:	2208      	movs	r2, #8
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	4413      	add	r3, r2
 8017a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f003 0307 	and.w	r3, r3, #7
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d014      	beq.n	8017a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f023 0307 	bic.w	r3, r3, #7
 8017a60:	3308      	adds	r3, #8
 8017a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f003 0307 	and.w	r3, r3, #7
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00a      	beq.n	8017a84 <pvPortMalloc+0x6c>
	__asm volatile
 8017a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a72:	f383 8811 	msr	BASEPRI, r3
 8017a76:	f3bf 8f6f 	isb	sy
 8017a7a:	f3bf 8f4f 	dsb	sy
 8017a7e:	617b      	str	r3, [r7, #20]
}
 8017a80:	bf00      	nop
 8017a82:	e7fe      	b.n	8017a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d06e      	beq.n	8017b68 <pvPortMalloc+0x150>
 8017a8a:	4b45      	ldr	r3, [pc, #276]	; (8017ba0 <pvPortMalloc+0x188>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	687a      	ldr	r2, [r7, #4]
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d869      	bhi.n	8017b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017a94:	4b43      	ldr	r3, [pc, #268]	; (8017ba4 <pvPortMalloc+0x18c>)
 8017a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017a98:	4b42      	ldr	r3, [pc, #264]	; (8017ba4 <pvPortMalloc+0x18c>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017a9e:	e004      	b.n	8017aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	687a      	ldr	r2, [r7, #4]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d903      	bls.n	8017abc <pvPortMalloc+0xa4>
 8017ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d1f1      	bne.n	8017aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017abc:	4b36      	ldr	r3, [pc, #216]	; (8017b98 <pvPortMalloc+0x180>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d050      	beq.n	8017b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017ac6:	6a3b      	ldr	r3, [r7, #32]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2208      	movs	r2, #8
 8017acc:	4413      	add	r3, r2
 8017ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad2:	681a      	ldr	r2, [r3, #0]
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ada:	685a      	ldr	r2, [r3, #4]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	1ad2      	subs	r2, r2, r3
 8017ae0:	2308      	movs	r3, #8
 8017ae2:	005b      	lsls	r3, r3, #1
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d91f      	bls.n	8017b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	4413      	add	r3, r2
 8017aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017af0:	69bb      	ldr	r3, [r7, #24]
 8017af2:	f003 0307 	and.w	r3, r3, #7
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d00a      	beq.n	8017b10 <pvPortMalloc+0xf8>
	__asm volatile
 8017afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afe:	f383 8811 	msr	BASEPRI, r3
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	f3bf 8f4f 	dsb	sy
 8017b0a:	613b      	str	r3, [r7, #16]
}
 8017b0c:	bf00      	nop
 8017b0e:	e7fe      	b.n	8017b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b12:	685a      	ldr	r2, [r3, #4]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	1ad2      	subs	r2, r2, r3
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1e:	687a      	ldr	r2, [r7, #4]
 8017b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017b22:	69b8      	ldr	r0, [r7, #24]
 8017b24:	f000 f908 	bl	8017d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017b28:	4b1d      	ldr	r3, [pc, #116]	; (8017ba0 <pvPortMalloc+0x188>)
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	4a1b      	ldr	r2, [pc, #108]	; (8017ba0 <pvPortMalloc+0x188>)
 8017b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017b36:	4b1a      	ldr	r3, [pc, #104]	; (8017ba0 <pvPortMalloc+0x188>)
 8017b38:	681a      	ldr	r2, [r3, #0]
 8017b3a:	4b1b      	ldr	r3, [pc, #108]	; (8017ba8 <pvPortMalloc+0x190>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d203      	bcs.n	8017b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017b42:	4b17      	ldr	r3, [pc, #92]	; (8017ba0 <pvPortMalloc+0x188>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4a18      	ldr	r2, [pc, #96]	; (8017ba8 <pvPortMalloc+0x190>)
 8017b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4c:	685a      	ldr	r2, [r3, #4]
 8017b4e:	4b13      	ldr	r3, [pc, #76]	; (8017b9c <pvPortMalloc+0x184>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	431a      	orrs	r2, r3
 8017b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017b5e:	4b13      	ldr	r3, [pc, #76]	; (8017bac <pvPortMalloc+0x194>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	3301      	adds	r3, #1
 8017b64:	4a11      	ldr	r2, [pc, #68]	; (8017bac <pvPortMalloc+0x194>)
 8017b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017b68:	f7fe fbee 	bl	8016348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	f003 0307 	and.w	r3, r3, #7
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d00a      	beq.n	8017b8c <pvPortMalloc+0x174>
	__asm volatile
 8017b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b7a:	f383 8811 	msr	BASEPRI, r3
 8017b7e:	f3bf 8f6f 	isb	sy
 8017b82:	f3bf 8f4f 	dsb	sy
 8017b86:	60fb      	str	r3, [r7, #12]
}
 8017b88:	bf00      	nop
 8017b8a:	e7fe      	b.n	8017b8a <pvPortMalloc+0x172>
	return pvReturn;
 8017b8c:	69fb      	ldr	r3, [r7, #28]
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3728      	adds	r7, #40	; 0x28
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	20005c18 	.word	0x20005c18
 8017b9c:	20005c2c 	.word	0x20005c2c
 8017ba0:	20005c1c 	.word	0x20005c1c
 8017ba4:	20005c10 	.word	0x20005c10
 8017ba8:	20005c20 	.word	0x20005c20
 8017bac:	20005c24 	.word	0x20005c24

08017bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b086      	sub	sp, #24
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d04d      	beq.n	8017c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017bc2:	2308      	movs	r3, #8
 8017bc4:	425b      	negs	r3, r3
 8017bc6:	697a      	ldr	r2, [r7, #20]
 8017bc8:	4413      	add	r3, r2
 8017bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	685a      	ldr	r2, [r3, #4]
 8017bd4:	4b24      	ldr	r3, [pc, #144]	; (8017c68 <vPortFree+0xb8>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	4013      	ands	r3, r2
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d10a      	bne.n	8017bf4 <vPortFree+0x44>
	__asm volatile
 8017bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017be2:	f383 8811 	msr	BASEPRI, r3
 8017be6:	f3bf 8f6f 	isb	sy
 8017bea:	f3bf 8f4f 	dsb	sy
 8017bee:	60fb      	str	r3, [r7, #12]
}
 8017bf0:	bf00      	nop
 8017bf2:	e7fe      	b.n	8017bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00a      	beq.n	8017c12 <vPortFree+0x62>
	__asm volatile
 8017bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c00:	f383 8811 	msr	BASEPRI, r3
 8017c04:	f3bf 8f6f 	isb	sy
 8017c08:	f3bf 8f4f 	dsb	sy
 8017c0c:	60bb      	str	r3, [r7, #8]
}
 8017c0e:	bf00      	nop
 8017c10:	e7fe      	b.n	8017c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	685a      	ldr	r2, [r3, #4]
 8017c16:	4b14      	ldr	r3, [pc, #80]	; (8017c68 <vPortFree+0xb8>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	4013      	ands	r3, r2
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d01e      	beq.n	8017c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d11a      	bne.n	8017c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	685a      	ldr	r2, [r3, #4]
 8017c2c:	4b0e      	ldr	r3, [pc, #56]	; (8017c68 <vPortFree+0xb8>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	43db      	mvns	r3, r3
 8017c32:	401a      	ands	r2, r3
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017c38:	f7fe fb78 	bl	801632c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017c3c:	693b      	ldr	r3, [r7, #16]
 8017c3e:	685a      	ldr	r2, [r3, #4]
 8017c40:	4b0a      	ldr	r3, [pc, #40]	; (8017c6c <vPortFree+0xbc>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	4413      	add	r3, r2
 8017c46:	4a09      	ldr	r2, [pc, #36]	; (8017c6c <vPortFree+0xbc>)
 8017c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017c4a:	6938      	ldr	r0, [r7, #16]
 8017c4c:	f000 f874 	bl	8017d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017c50:	4b07      	ldr	r3, [pc, #28]	; (8017c70 <vPortFree+0xc0>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	3301      	adds	r3, #1
 8017c56:	4a06      	ldr	r2, [pc, #24]	; (8017c70 <vPortFree+0xc0>)
 8017c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017c5a:	f7fe fb75 	bl	8016348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017c5e:	bf00      	nop
 8017c60:	3718      	adds	r7, #24
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}
 8017c66:	bf00      	nop
 8017c68:	20005c2c 	.word	0x20005c2c
 8017c6c:	20005c1c 	.word	0x20005c1c
 8017c70:	20005c28 	.word	0x20005c28

08017c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017c74:	b480      	push	{r7}
 8017c76:	b085      	sub	sp, #20
 8017c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017c7a:	f244 6350 	movw	r3, #18000	; 0x4650
 8017c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017c80:	4b27      	ldr	r3, [pc, #156]	; (8017d20 <prvHeapInit+0xac>)
 8017c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	f003 0307 	and.w	r3, r3, #7
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d00c      	beq.n	8017ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	3307      	adds	r3, #7
 8017c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	f023 0307 	bic.w	r3, r3, #7
 8017c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017c9c:	68ba      	ldr	r2, [r7, #8]
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	1ad3      	subs	r3, r2, r3
 8017ca2:	4a1f      	ldr	r2, [pc, #124]	; (8017d20 <prvHeapInit+0xac>)
 8017ca4:	4413      	add	r3, r2
 8017ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017cac:	4a1d      	ldr	r2, [pc, #116]	; (8017d24 <prvHeapInit+0xb0>)
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017cb2:	4b1c      	ldr	r3, [pc, #112]	; (8017d24 <prvHeapInit+0xb0>)
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	68ba      	ldr	r2, [r7, #8]
 8017cbc:	4413      	add	r3, r2
 8017cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017cc0:	2208      	movs	r2, #8
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	1a9b      	subs	r3, r3, r2
 8017cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	f023 0307 	bic.w	r3, r3, #7
 8017cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	4a15      	ldr	r2, [pc, #84]	; (8017d28 <prvHeapInit+0xb4>)
 8017cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017cd6:	4b14      	ldr	r3, [pc, #80]	; (8017d28 <prvHeapInit+0xb4>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2200      	movs	r2, #0
 8017cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017cde:	4b12      	ldr	r3, [pc, #72]	; (8017d28 <prvHeapInit+0xb4>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	68fa      	ldr	r2, [r7, #12]
 8017cee:	1ad2      	subs	r2, r2, r3
 8017cf0:	683b      	ldr	r3, [r7, #0]
 8017cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017cf4:	4b0c      	ldr	r3, [pc, #48]	; (8017d28 <prvHeapInit+0xb4>)
 8017cf6:	681a      	ldr	r2, [r3, #0]
 8017cf8:	683b      	ldr	r3, [r7, #0]
 8017cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	685b      	ldr	r3, [r3, #4]
 8017d00:	4a0a      	ldr	r2, [pc, #40]	; (8017d2c <prvHeapInit+0xb8>)
 8017d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	4a09      	ldr	r2, [pc, #36]	; (8017d30 <prvHeapInit+0xbc>)
 8017d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017d0c:	4b09      	ldr	r3, [pc, #36]	; (8017d34 <prvHeapInit+0xc0>)
 8017d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017d12:	601a      	str	r2, [r3, #0]
}
 8017d14:	bf00      	nop
 8017d16:	3714      	adds	r7, #20
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr
 8017d20:	200015c0 	.word	0x200015c0
 8017d24:	20005c10 	.word	0x20005c10
 8017d28:	20005c18 	.word	0x20005c18
 8017d2c:	20005c20 	.word	0x20005c20
 8017d30:	20005c1c 	.word	0x20005c1c
 8017d34:	20005c2c 	.word	0x20005c2c

08017d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b085      	sub	sp, #20
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017d40:	4b28      	ldr	r3, [pc, #160]	; (8017de4 <prvInsertBlockIntoFreeList+0xac>)
 8017d42:	60fb      	str	r3, [r7, #12]
 8017d44:	e002      	b.n	8017d4c <prvInsertBlockIntoFreeList+0x14>
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	60fb      	str	r3, [r7, #12]
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	687a      	ldr	r2, [r7, #4]
 8017d52:	429a      	cmp	r2, r3
 8017d54:	d8f7      	bhi.n	8017d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	685b      	ldr	r3, [r3, #4]
 8017d5e:	68ba      	ldr	r2, [r7, #8]
 8017d60:	4413      	add	r3, r2
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d108      	bne.n	8017d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	685a      	ldr	r2, [r3, #4]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	441a      	add	r2, r3
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	68ba      	ldr	r2, [r7, #8]
 8017d84:	441a      	add	r2, r3
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d118      	bne.n	8017dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	681a      	ldr	r2, [r3, #0]
 8017d92:	4b15      	ldr	r3, [pc, #84]	; (8017de8 <prvInsertBlockIntoFreeList+0xb0>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d00d      	beq.n	8017db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	685a      	ldr	r2, [r3, #4]
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	441a      	add	r2, r3
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	681a      	ldr	r2, [r3, #0]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	e008      	b.n	8017dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017db6:	4b0c      	ldr	r3, [pc, #48]	; (8017de8 <prvInsertBlockIntoFreeList+0xb0>)
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	601a      	str	r2, [r3, #0]
 8017dbe:	e003      	b.n	8017dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	681a      	ldr	r2, [r3, #0]
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017dc8:	68fa      	ldr	r2, [r7, #12]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d002      	beq.n	8017dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	687a      	ldr	r2, [r7, #4]
 8017dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017dd6:	bf00      	nop
 8017dd8:	3714      	adds	r7, #20
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de0:	4770      	bx	lr
 8017de2:	bf00      	nop
 8017de4:	20005c10 	.word	0x20005c10
 8017de8:	20005c18 	.word	0x20005c18

08017dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017df0:	2200      	movs	r2, #0
 8017df2:	4912      	ldr	r1, [pc, #72]	; (8017e3c <MX_USB_DEVICE_Init+0x50>)
 8017df4:	4812      	ldr	r0, [pc, #72]	; (8017e40 <MX_USB_DEVICE_Init+0x54>)
 8017df6:	f7f8 fadf 	bl	80103b8 <USBD_Init>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d001      	beq.n	8017e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017e00:	f7ea fe04 	bl	8002a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017e04:	490f      	ldr	r1, [pc, #60]	; (8017e44 <MX_USB_DEVICE_Init+0x58>)
 8017e06:	480e      	ldr	r0, [pc, #56]	; (8017e40 <MX_USB_DEVICE_Init+0x54>)
 8017e08:	f7f8 fb06 	bl	8010418 <USBD_RegisterClass>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d001      	beq.n	8017e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017e12:	f7ea fdfb 	bl	8002a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017e16:	490c      	ldr	r1, [pc, #48]	; (8017e48 <MX_USB_DEVICE_Init+0x5c>)
 8017e18:	4809      	ldr	r0, [pc, #36]	; (8017e40 <MX_USB_DEVICE_Init+0x54>)
 8017e1a:	f7f8 fa57 	bl	80102cc <USBD_CDC_RegisterInterface>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d001      	beq.n	8017e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017e24:	f7ea fdf2 	bl	8002a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017e28:	4805      	ldr	r0, [pc, #20]	; (8017e40 <MX_USB_DEVICE_Init+0x54>)
 8017e2a:	f7f8 fb1c 	bl	8010466 <USBD_Start>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d001      	beq.n	8017e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017e34:	f7ea fdea 	bl	8002a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017e38:	bf00      	nop
 8017e3a:	bd80      	pop	{r7, pc}
 8017e3c:	200001a8 	.word	0x200001a8
 8017e40:	20007578 	.word	0x20007578
 8017e44:	2000008c 	.word	0x2000008c
 8017e48:	20000194 	.word	0x20000194

08017e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017e50:	2200      	movs	r2, #0
 8017e52:	4905      	ldr	r1, [pc, #20]	; (8017e68 <CDC_Init_FS+0x1c>)
 8017e54:	4805      	ldr	r0, [pc, #20]	; (8017e6c <CDC_Init_FS+0x20>)
 8017e56:	f7f8 fa4e 	bl	80102f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017e5a:	4905      	ldr	r1, [pc, #20]	; (8017e70 <CDC_Init_FS+0x24>)
 8017e5c:	4803      	ldr	r0, [pc, #12]	; (8017e6c <CDC_Init_FS+0x20>)
 8017e5e:	f7f8 fa68 	bl	8010332 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	bd80      	pop	{r7, pc}
 8017e68:	20008048 	.word	0x20008048
 8017e6c:	20007578 	.word	0x20007578
 8017e70:	20007848 	.word	0x20007848

08017e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017e74:	b480      	push	{r7}
 8017e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017e84:	b480      	push	{r7}
 8017e86:	b083      	sub	sp, #12
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	6039      	str	r1, [r7, #0]
 8017e8e:	71fb      	strb	r3, [r7, #7]
 8017e90:	4613      	mov	r3, r2
 8017e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017e94:	79fb      	ldrb	r3, [r7, #7]
 8017e96:	2b23      	cmp	r3, #35	; 0x23
 8017e98:	d84a      	bhi.n	8017f30 <CDC_Control_FS+0xac>
 8017e9a:	a201      	add	r2, pc, #4	; (adr r2, 8017ea0 <CDC_Control_FS+0x1c>)
 8017e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ea0:	08017f31 	.word	0x08017f31
 8017ea4:	08017f31 	.word	0x08017f31
 8017ea8:	08017f31 	.word	0x08017f31
 8017eac:	08017f31 	.word	0x08017f31
 8017eb0:	08017f31 	.word	0x08017f31
 8017eb4:	08017f31 	.word	0x08017f31
 8017eb8:	08017f31 	.word	0x08017f31
 8017ebc:	08017f31 	.word	0x08017f31
 8017ec0:	08017f31 	.word	0x08017f31
 8017ec4:	08017f31 	.word	0x08017f31
 8017ec8:	08017f31 	.word	0x08017f31
 8017ecc:	08017f31 	.word	0x08017f31
 8017ed0:	08017f31 	.word	0x08017f31
 8017ed4:	08017f31 	.word	0x08017f31
 8017ed8:	08017f31 	.word	0x08017f31
 8017edc:	08017f31 	.word	0x08017f31
 8017ee0:	08017f31 	.word	0x08017f31
 8017ee4:	08017f31 	.word	0x08017f31
 8017ee8:	08017f31 	.word	0x08017f31
 8017eec:	08017f31 	.word	0x08017f31
 8017ef0:	08017f31 	.word	0x08017f31
 8017ef4:	08017f31 	.word	0x08017f31
 8017ef8:	08017f31 	.word	0x08017f31
 8017efc:	08017f31 	.word	0x08017f31
 8017f00:	08017f31 	.word	0x08017f31
 8017f04:	08017f31 	.word	0x08017f31
 8017f08:	08017f31 	.word	0x08017f31
 8017f0c:	08017f31 	.word	0x08017f31
 8017f10:	08017f31 	.word	0x08017f31
 8017f14:	08017f31 	.word	0x08017f31
 8017f18:	08017f31 	.word	0x08017f31
 8017f1c:	08017f31 	.word	0x08017f31
 8017f20:	08017f31 	.word	0x08017f31
 8017f24:	08017f31 	.word	0x08017f31
 8017f28:	08017f31 	.word	0x08017f31
 8017f2c:	08017f31 	.word	0x08017f31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017f30:	bf00      	nop
  }

  return (USBD_OK);
 8017f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	370c      	adds	r7, #12
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3e:	4770      	bx	lr

08017f40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017f4a:	6879      	ldr	r1, [r7, #4]
 8017f4c:	4805      	ldr	r0, [pc, #20]	; (8017f64 <CDC_Receive_FS+0x24>)
 8017f4e:	f7f8 f9f0 	bl	8010332 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017f52:	4804      	ldr	r0, [pc, #16]	; (8017f64 <CDC_Receive_FS+0x24>)
 8017f54:	f7f8 fa06 	bl	8010364 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017f58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3708      	adds	r7, #8
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	20007578 	.word	0x20007578

08017f68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b087      	sub	sp, #28
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	60f8      	str	r0, [r7, #12]
 8017f70:	60b9      	str	r1, [r7, #8]
 8017f72:	4613      	mov	r3, r2
 8017f74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017f76:	2300      	movs	r3, #0
 8017f78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	371c      	adds	r7, #28
 8017f82:	46bd      	mov	sp, r7
 8017f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f88:	4770      	bx	lr
	...

08017f8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	4603      	mov	r3, r0
 8017f94:	6039      	str	r1, [r7, #0]
 8017f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	2212      	movs	r2, #18
 8017f9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017f9e:	4b03      	ldr	r3, [pc, #12]	; (8017fac <USBD_FS_DeviceDescriptor+0x20>)
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	370c      	adds	r7, #12
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr
 8017fac:	200001c4 	.word	0x200001c4

08017fb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b083      	sub	sp, #12
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	6039      	str	r1, [r7, #0]
 8017fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	2204      	movs	r2, #4
 8017fc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017fc2:	4b03      	ldr	r3, [pc, #12]	; (8017fd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	370c      	adds	r7, #12
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fce:	4770      	bx	lr
 8017fd0:	200001d8 	.word	0x200001d8

08017fd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	4603      	mov	r3, r0
 8017fdc:	6039      	str	r1, [r7, #0]
 8017fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017fe0:	79fb      	ldrb	r3, [r7, #7]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d105      	bne.n	8017ff2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017fe6:	683a      	ldr	r2, [r7, #0]
 8017fe8:	4907      	ldr	r1, [pc, #28]	; (8018008 <USBD_FS_ProductStrDescriptor+0x34>)
 8017fea:	4808      	ldr	r0, [pc, #32]	; (801800c <USBD_FS_ProductStrDescriptor+0x38>)
 8017fec:	f7f9 fa6d 	bl	80114ca <USBD_GetString>
 8017ff0:	e004      	b.n	8017ffc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017ff2:	683a      	ldr	r2, [r7, #0]
 8017ff4:	4904      	ldr	r1, [pc, #16]	; (8018008 <USBD_FS_ProductStrDescriptor+0x34>)
 8017ff6:	4805      	ldr	r0, [pc, #20]	; (801800c <USBD_FS_ProductStrDescriptor+0x38>)
 8017ff8:	f7f9 fa67 	bl	80114ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ffc:	4b02      	ldr	r3, [pc, #8]	; (8018008 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	3708      	adds	r7, #8
 8018002:	46bd      	mov	sp, r7
 8018004:	bd80      	pop	{r7, pc}
 8018006:	bf00      	nop
 8018008:	20008848 	.word	0x20008848
 801800c:	0802078c 	.word	0x0802078c

08018010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b082      	sub	sp, #8
 8018014:	af00      	add	r7, sp, #0
 8018016:	4603      	mov	r3, r0
 8018018:	6039      	str	r1, [r7, #0]
 801801a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801801c:	683a      	ldr	r2, [r7, #0]
 801801e:	4904      	ldr	r1, [pc, #16]	; (8018030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018020:	4804      	ldr	r0, [pc, #16]	; (8018034 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018022:	f7f9 fa52 	bl	80114ca <USBD_GetString>
  return USBD_StrDesc;
 8018026:	4b02      	ldr	r3, [pc, #8]	; (8018030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018028:	4618      	mov	r0, r3
 801802a:	3708      	adds	r7, #8
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}
 8018030:	20008848 	.word	0x20008848
 8018034:	080207a4 	.word	0x080207a4

08018038 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	4603      	mov	r3, r0
 8018040:	6039      	str	r1, [r7, #0]
 8018042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	221a      	movs	r2, #26
 8018048:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801804a:	f000 f843 	bl	80180d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801804e:	4b02      	ldr	r3, [pc, #8]	; (8018058 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018050:	4618      	mov	r0, r3
 8018052:	3708      	adds	r7, #8
 8018054:	46bd      	mov	sp, r7
 8018056:	bd80      	pop	{r7, pc}
 8018058:	200001dc 	.word	0x200001dc

0801805c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b082      	sub	sp, #8
 8018060:	af00      	add	r7, sp, #0
 8018062:	4603      	mov	r3, r0
 8018064:	6039      	str	r1, [r7, #0]
 8018066:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018068:	79fb      	ldrb	r3, [r7, #7]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d105      	bne.n	801807a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801806e:	683a      	ldr	r2, [r7, #0]
 8018070:	4907      	ldr	r1, [pc, #28]	; (8018090 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018072:	4808      	ldr	r0, [pc, #32]	; (8018094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018074:	f7f9 fa29 	bl	80114ca <USBD_GetString>
 8018078:	e004      	b.n	8018084 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801807a:	683a      	ldr	r2, [r7, #0]
 801807c:	4904      	ldr	r1, [pc, #16]	; (8018090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801807e:	4805      	ldr	r0, [pc, #20]	; (8018094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018080:	f7f9 fa23 	bl	80114ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8018084:	4b02      	ldr	r3, [pc, #8]	; (8018090 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018086:	4618      	mov	r0, r3
 8018088:	3708      	adds	r7, #8
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
 801808e:	bf00      	nop
 8018090:	20008848 	.word	0x20008848
 8018094:	080207b8 	.word	0x080207b8

08018098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	4603      	mov	r3, r0
 80180a0:	6039      	str	r1, [r7, #0]
 80180a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80180a4:	79fb      	ldrb	r3, [r7, #7]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d105      	bne.n	80180b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80180aa:	683a      	ldr	r2, [r7, #0]
 80180ac:	4907      	ldr	r1, [pc, #28]	; (80180cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80180ae:	4808      	ldr	r0, [pc, #32]	; (80180d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80180b0:	f7f9 fa0b 	bl	80114ca <USBD_GetString>
 80180b4:	e004      	b.n	80180c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80180b6:	683a      	ldr	r2, [r7, #0]
 80180b8:	4904      	ldr	r1, [pc, #16]	; (80180cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80180ba:	4805      	ldr	r0, [pc, #20]	; (80180d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80180bc:	f7f9 fa05 	bl	80114ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80180c0:	4b02      	ldr	r3, [pc, #8]	; (80180cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3708      	adds	r7, #8
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	20008848 	.word	0x20008848
 80180d0:	080207c4 	.word	0x080207c4

080180d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80180da:	4b0f      	ldr	r3, [pc, #60]	; (8018118 <Get_SerialNum+0x44>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80180e0:	4b0e      	ldr	r3, [pc, #56]	; (801811c <Get_SerialNum+0x48>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80180e6:	4b0e      	ldr	r3, [pc, #56]	; (8018120 <Get_SerialNum+0x4c>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80180ec:	68fa      	ldr	r2, [r7, #12]
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	4413      	add	r3, r2
 80180f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d009      	beq.n	801810e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80180fa:	2208      	movs	r2, #8
 80180fc:	4909      	ldr	r1, [pc, #36]	; (8018124 <Get_SerialNum+0x50>)
 80180fe:	68f8      	ldr	r0, [r7, #12]
 8018100:	f000 f814 	bl	801812c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018104:	2204      	movs	r2, #4
 8018106:	4908      	ldr	r1, [pc, #32]	; (8018128 <Get_SerialNum+0x54>)
 8018108:	68b8      	ldr	r0, [r7, #8]
 801810a:	f000 f80f 	bl	801812c <IntToUnicode>
  }
}
 801810e:	bf00      	nop
 8018110:	3710      	adds	r7, #16
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	1fff7a10 	.word	0x1fff7a10
 801811c:	1fff7a14 	.word	0x1fff7a14
 8018120:	1fff7a18 	.word	0x1fff7a18
 8018124:	200001de 	.word	0x200001de
 8018128:	200001ee 	.word	0x200001ee

0801812c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801812c:	b480      	push	{r7}
 801812e:	b087      	sub	sp, #28
 8018130:	af00      	add	r7, sp, #0
 8018132:	60f8      	str	r0, [r7, #12]
 8018134:	60b9      	str	r1, [r7, #8]
 8018136:	4613      	mov	r3, r2
 8018138:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801813a:	2300      	movs	r3, #0
 801813c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801813e:	2300      	movs	r3, #0
 8018140:	75fb      	strb	r3, [r7, #23]
 8018142:	e027      	b.n	8018194 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	0f1b      	lsrs	r3, r3, #28
 8018148:	2b09      	cmp	r3, #9
 801814a:	d80b      	bhi.n	8018164 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	0f1b      	lsrs	r3, r3, #28
 8018150:	b2da      	uxtb	r2, r3
 8018152:	7dfb      	ldrb	r3, [r7, #23]
 8018154:	005b      	lsls	r3, r3, #1
 8018156:	4619      	mov	r1, r3
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	440b      	add	r3, r1
 801815c:	3230      	adds	r2, #48	; 0x30
 801815e:	b2d2      	uxtb	r2, r2
 8018160:	701a      	strb	r2, [r3, #0]
 8018162:	e00a      	b.n	801817a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	0f1b      	lsrs	r3, r3, #28
 8018168:	b2da      	uxtb	r2, r3
 801816a:	7dfb      	ldrb	r3, [r7, #23]
 801816c:	005b      	lsls	r3, r3, #1
 801816e:	4619      	mov	r1, r3
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	440b      	add	r3, r1
 8018174:	3237      	adds	r2, #55	; 0x37
 8018176:	b2d2      	uxtb	r2, r2
 8018178:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	011b      	lsls	r3, r3, #4
 801817e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018180:	7dfb      	ldrb	r3, [r7, #23]
 8018182:	005b      	lsls	r3, r3, #1
 8018184:	3301      	adds	r3, #1
 8018186:	68ba      	ldr	r2, [r7, #8]
 8018188:	4413      	add	r3, r2
 801818a:	2200      	movs	r2, #0
 801818c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801818e:	7dfb      	ldrb	r3, [r7, #23]
 8018190:	3301      	adds	r3, #1
 8018192:	75fb      	strb	r3, [r7, #23]
 8018194:	7dfa      	ldrb	r2, [r7, #23]
 8018196:	79fb      	ldrb	r3, [r7, #7]
 8018198:	429a      	cmp	r2, r3
 801819a:	d3d3      	bcc.n	8018144 <IntToUnicode+0x18>
  }
}
 801819c:	bf00      	nop
 801819e:	bf00      	nop
 80181a0:	371c      	adds	r7, #28
 80181a2:	46bd      	mov	sp, r7
 80181a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a8:	4770      	bx	lr
	...

080181ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b08a      	sub	sp, #40	; 0x28
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181b4:	f107 0314 	add.w	r3, r7, #20
 80181b8:	2200      	movs	r2, #0
 80181ba:	601a      	str	r2, [r3, #0]
 80181bc:	605a      	str	r2, [r3, #4]
 80181be:	609a      	str	r2, [r3, #8]
 80181c0:	60da      	str	r2, [r3, #12]
 80181c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80181cc:	d147      	bne.n	801825e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80181ce:	2300      	movs	r3, #0
 80181d0:	613b      	str	r3, [r7, #16]
 80181d2:	4b25      	ldr	r3, [pc, #148]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 80181d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181d6:	4a24      	ldr	r2, [pc, #144]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 80181d8:	f043 0301 	orr.w	r3, r3, #1
 80181dc:	6313      	str	r3, [r2, #48]	; 0x30
 80181de:	4b22      	ldr	r3, [pc, #136]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 80181e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181e2:	f003 0301 	and.w	r3, r3, #1
 80181e6:	613b      	str	r3, [r7, #16]
 80181e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80181ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80181ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80181f0:	2300      	movs	r3, #0
 80181f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181f4:	2300      	movs	r3, #0
 80181f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80181f8:	f107 0314 	add.w	r3, r7, #20
 80181fc:	4619      	mov	r1, r3
 80181fe:	481b      	ldr	r0, [pc, #108]	; (801826c <HAL_PCD_MspInit+0xc0>)
 8018200:	f7ef fd1e 	bl	8007c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018204:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801820a:	2302      	movs	r3, #2
 801820c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801820e:	2300      	movs	r3, #0
 8018210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018212:	2303      	movs	r3, #3
 8018214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018216:	230a      	movs	r3, #10
 8018218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801821a:	f107 0314 	add.w	r3, r7, #20
 801821e:	4619      	mov	r1, r3
 8018220:	4812      	ldr	r0, [pc, #72]	; (801826c <HAL_PCD_MspInit+0xc0>)
 8018222:	f7ef fd0d 	bl	8007c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018226:	4b10      	ldr	r3, [pc, #64]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 8018228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801822a:	4a0f      	ldr	r2, [pc, #60]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 801822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018230:	6353      	str	r3, [r2, #52]	; 0x34
 8018232:	2300      	movs	r3, #0
 8018234:	60fb      	str	r3, [r7, #12]
 8018236:	4b0c      	ldr	r3, [pc, #48]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 8018238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801823a:	4a0b      	ldr	r2, [pc, #44]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 801823c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018240:	6453      	str	r3, [r2, #68]	; 0x44
 8018242:	4b09      	ldr	r3, [pc, #36]	; (8018268 <HAL_PCD_MspInit+0xbc>)
 8018244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801824a:	60fb      	str	r3, [r7, #12]
 801824c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801824e:	2200      	movs	r2, #0
 8018250:	2105      	movs	r1, #5
 8018252:	2043      	movs	r0, #67	; 0x43
 8018254:	f7ef fcbc 	bl	8007bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018258:	2043      	movs	r0, #67	; 0x43
 801825a:	f7ef fcd5 	bl	8007c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801825e:	bf00      	nop
 8018260:	3728      	adds	r7, #40	; 0x28
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
 8018266:	bf00      	nop
 8018268:	40023800 	.word	0x40023800
 801826c:	40020000 	.word	0x40020000

08018270 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b082      	sub	sp, #8
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018284:	4619      	mov	r1, r3
 8018286:	4610      	mov	r0, r2
 8018288:	f7f8 f938 	bl	80104fc <USBD_LL_SetupStage>
}
 801828c:	bf00      	nop
 801828e:	3708      	adds	r7, #8
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	460b      	mov	r3, r1
 801829e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80182a6:	78fa      	ldrb	r2, [r7, #3]
 80182a8:	6879      	ldr	r1, [r7, #4]
 80182aa:	4613      	mov	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	1a9b      	subs	r3, r3, r2
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	440b      	add	r3, r1
 80182b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80182b8:	681a      	ldr	r2, [r3, #0]
 80182ba:	78fb      	ldrb	r3, [r7, #3]
 80182bc:	4619      	mov	r1, r3
 80182be:	f7f8 f972 	bl	80105a6 <USBD_LL_DataOutStage>
}
 80182c2:	bf00      	nop
 80182c4:	3708      	adds	r7, #8
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}

080182ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182ca:	b580      	push	{r7, lr}
 80182cc:	b082      	sub	sp, #8
 80182ce:	af00      	add	r7, sp, #0
 80182d0:	6078      	str	r0, [r7, #4]
 80182d2:	460b      	mov	r3, r1
 80182d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80182dc:	78fa      	ldrb	r2, [r7, #3]
 80182de:	6879      	ldr	r1, [r7, #4]
 80182e0:	4613      	mov	r3, r2
 80182e2:	00db      	lsls	r3, r3, #3
 80182e4:	1a9b      	subs	r3, r3, r2
 80182e6:	009b      	lsls	r3, r3, #2
 80182e8:	440b      	add	r3, r1
 80182ea:	3348      	adds	r3, #72	; 0x48
 80182ec:	681a      	ldr	r2, [r3, #0]
 80182ee:	78fb      	ldrb	r3, [r7, #3]
 80182f0:	4619      	mov	r1, r3
 80182f2:	f7f8 f9bb 	bl	801066c <USBD_LL_DataInStage>
}
 80182f6:	bf00      	nop
 80182f8:	3708      	adds	r7, #8
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}

080182fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182fe:	b580      	push	{r7, lr}
 8018300:	b082      	sub	sp, #8
 8018302:	af00      	add	r7, sp, #0
 8018304:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801830c:	4618      	mov	r0, r3
 801830e:	f7f8 facf 	bl	80108b0 <USBD_LL_SOF>
}
 8018312:	bf00      	nop
 8018314:	3708      	adds	r7, #8
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}

0801831a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801831a:	b580      	push	{r7, lr}
 801831c:	b084      	sub	sp, #16
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018322:	2301      	movs	r3, #1
 8018324:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	68db      	ldr	r3, [r3, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d102      	bne.n	8018334 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801832e:	2300      	movs	r3, #0
 8018330:	73fb      	strb	r3, [r7, #15]
 8018332:	e008      	b.n	8018346 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	68db      	ldr	r3, [r3, #12]
 8018338:	2b02      	cmp	r3, #2
 801833a:	d102      	bne.n	8018342 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801833c:	2301      	movs	r3, #1
 801833e:	73fb      	strb	r3, [r7, #15]
 8018340:	e001      	b.n	8018346 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018342:	f7ea fb63 	bl	8002a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801834c:	7bfa      	ldrb	r2, [r7, #15]
 801834e:	4611      	mov	r1, r2
 8018350:	4618      	mov	r0, r3
 8018352:	f7f8 fa6f 	bl	8010834 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801835c:	4618      	mov	r0, r3
 801835e:	f7f8 fa1b 	bl	8010798 <USBD_LL_Reset>
}
 8018362:	bf00      	nop
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
	...

0801836c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801837a:	4618      	mov	r0, r3
 801837c:	f7f8 fa6a 	bl	8010854 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	687a      	ldr	r2, [r7, #4]
 801838c:	6812      	ldr	r2, [r2, #0]
 801838e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018392:	f043 0301 	orr.w	r3, r3, #1
 8018396:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6a1b      	ldr	r3, [r3, #32]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d005      	beq.n	80183ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80183a0:	4b04      	ldr	r3, [pc, #16]	; (80183b4 <HAL_PCD_SuspendCallback+0x48>)
 80183a2:	691b      	ldr	r3, [r3, #16]
 80183a4:	4a03      	ldr	r2, [pc, #12]	; (80183b4 <HAL_PCD_SuspendCallback+0x48>)
 80183a6:	f043 0306 	orr.w	r3, r3, #6
 80183aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80183ac:	bf00      	nop
 80183ae:	3708      	adds	r7, #8
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}
 80183b4:	e000ed00 	.word	0xe000ed00

080183b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7f8 fa5a 	bl	8010880 <USBD_LL_Resume>
}
 80183cc:	bf00      	nop
 80183ce:	3708      	adds	r7, #8
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bd80      	pop	{r7, pc}

080183d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	460b      	mov	r3, r1
 80183de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80183e6:	78fa      	ldrb	r2, [r7, #3]
 80183e8:	4611      	mov	r1, r2
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7f8 faa8 	bl	8010940 <USBD_LL_IsoOUTIncomplete>
}
 80183f0:	bf00      	nop
 80183f2:	3708      	adds	r7, #8
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}

080183f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	460b      	mov	r3, r1
 8018402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801840a:	78fa      	ldrb	r2, [r7, #3]
 801840c:	4611      	mov	r1, r2
 801840e:	4618      	mov	r0, r3
 8018410:	f7f8 fa70 	bl	80108f4 <USBD_LL_IsoINIncomplete>
}
 8018414:	bf00      	nop
 8018416:	3708      	adds	r7, #8
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b082      	sub	sp, #8
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801842a:	4618      	mov	r0, r3
 801842c:	f7f8 faae 	bl	801098c <USBD_LL_DevConnected>
}
 8018430:	bf00      	nop
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018446:	4618      	mov	r0, r3
 8018448:	f7f8 faab 	bl	80109a2 <USBD_LL_DevDisconnected>
}
 801844c:	bf00      	nop
 801844e:	3708      	adds	r7, #8
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d13c      	bne.n	80184de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018464:	4a20      	ldr	r2, [pc, #128]	; (80184e8 <USBD_LL_Init+0x94>)
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	4a1e      	ldr	r2, [pc, #120]	; (80184e8 <USBD_LL_Init+0x94>)
 8018470:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018474:	4b1c      	ldr	r3, [pc, #112]	; (80184e8 <USBD_LL_Init+0x94>)
 8018476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801847a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801847c:	4b1a      	ldr	r3, [pc, #104]	; (80184e8 <USBD_LL_Init+0x94>)
 801847e:	2204      	movs	r2, #4
 8018480:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018482:	4b19      	ldr	r3, [pc, #100]	; (80184e8 <USBD_LL_Init+0x94>)
 8018484:	2202      	movs	r2, #2
 8018486:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018488:	4b17      	ldr	r3, [pc, #92]	; (80184e8 <USBD_LL_Init+0x94>)
 801848a:	2200      	movs	r2, #0
 801848c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801848e:	4b16      	ldr	r3, [pc, #88]	; (80184e8 <USBD_LL_Init+0x94>)
 8018490:	2202      	movs	r2, #2
 8018492:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018494:	4b14      	ldr	r3, [pc, #80]	; (80184e8 <USBD_LL_Init+0x94>)
 8018496:	2200      	movs	r2, #0
 8018498:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801849a:	4b13      	ldr	r3, [pc, #76]	; (80184e8 <USBD_LL_Init+0x94>)
 801849c:	2200      	movs	r2, #0
 801849e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80184a0:	4b11      	ldr	r3, [pc, #68]	; (80184e8 <USBD_LL_Init+0x94>)
 80184a2:	2200      	movs	r2, #0
 80184a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80184a6:	4b10      	ldr	r3, [pc, #64]	; (80184e8 <USBD_LL_Init+0x94>)
 80184a8:	2201      	movs	r2, #1
 80184aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80184ac:	4b0e      	ldr	r3, [pc, #56]	; (80184e8 <USBD_LL_Init+0x94>)
 80184ae:	2200      	movs	r2, #0
 80184b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80184b2:	480d      	ldr	r0, [pc, #52]	; (80184e8 <USBD_LL_Init+0x94>)
 80184b4:	f7f0 fe7c 	bl	80091b0 <HAL_PCD_Init>
 80184b8:	4603      	mov	r3, r0
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d001      	beq.n	80184c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80184be:	f7ea faa5 	bl	8002a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80184c2:	2180      	movs	r1, #128	; 0x80
 80184c4:	4808      	ldr	r0, [pc, #32]	; (80184e8 <USBD_LL_Init+0x94>)
 80184c6:	f7f1 ffda 	bl	800a47e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80184ca:	2240      	movs	r2, #64	; 0x40
 80184cc:	2100      	movs	r1, #0
 80184ce:	4806      	ldr	r0, [pc, #24]	; (80184e8 <USBD_LL_Init+0x94>)
 80184d0:	f7f1 ff8e 	bl	800a3f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80184d4:	2280      	movs	r2, #128	; 0x80
 80184d6:	2101      	movs	r1, #1
 80184d8:	4803      	ldr	r0, [pc, #12]	; (80184e8 <USBD_LL_Init+0x94>)
 80184da:	f7f1 ff89 	bl	800a3f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80184de:	2300      	movs	r3, #0
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3708      	adds	r7, #8
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	20008a48 	.word	0x20008a48

080184ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b084      	sub	sp, #16
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184f4:	2300      	movs	r3, #0
 80184f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184f8:	2300      	movs	r3, #0
 80184fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018502:	4618      	mov	r0, r3
 8018504:	f7f0 ff71 	bl	80093ea <HAL_PCD_Start>
 8018508:	4603      	mov	r3, r0
 801850a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801850c:	7bfb      	ldrb	r3, [r7, #15]
 801850e:	4618      	mov	r0, r3
 8018510:	f000 f942 	bl	8018798 <USBD_Get_USB_Status>
 8018514:	4603      	mov	r3, r0
 8018516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018518:	7bbb      	ldrb	r3, [r7, #14]
}
 801851a:	4618      	mov	r0, r3
 801851c:	3710      	adds	r7, #16
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}

08018522 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018522:	b580      	push	{r7, lr}
 8018524:	b084      	sub	sp, #16
 8018526:	af00      	add	r7, sp, #0
 8018528:	6078      	str	r0, [r7, #4]
 801852a:	4608      	mov	r0, r1
 801852c:	4611      	mov	r1, r2
 801852e:	461a      	mov	r2, r3
 8018530:	4603      	mov	r3, r0
 8018532:	70fb      	strb	r3, [r7, #3]
 8018534:	460b      	mov	r3, r1
 8018536:	70bb      	strb	r3, [r7, #2]
 8018538:	4613      	mov	r3, r2
 801853a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801853c:	2300      	movs	r3, #0
 801853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018540:	2300      	movs	r3, #0
 8018542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801854a:	78bb      	ldrb	r3, [r7, #2]
 801854c:	883a      	ldrh	r2, [r7, #0]
 801854e:	78f9      	ldrb	r1, [r7, #3]
 8018550:	f7f1 fb55 	bl	8009bfe <HAL_PCD_EP_Open>
 8018554:	4603      	mov	r3, r0
 8018556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018558:	7bfb      	ldrb	r3, [r7, #15]
 801855a:	4618      	mov	r0, r3
 801855c:	f000 f91c 	bl	8018798 <USBD_Get_USB_Status>
 8018560:	4603      	mov	r3, r0
 8018562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018564:	7bbb      	ldrb	r3, [r7, #14]
}
 8018566:	4618      	mov	r0, r3
 8018568:	3710      	adds	r7, #16
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}

0801856e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801856e:	b580      	push	{r7, lr}
 8018570:	b084      	sub	sp, #16
 8018572:	af00      	add	r7, sp, #0
 8018574:	6078      	str	r0, [r7, #4]
 8018576:	460b      	mov	r3, r1
 8018578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801857a:	2300      	movs	r3, #0
 801857c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801857e:	2300      	movs	r3, #0
 8018580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018588:	78fa      	ldrb	r2, [r7, #3]
 801858a:	4611      	mov	r1, r2
 801858c:	4618      	mov	r0, r3
 801858e:	f7f1 fb9e 	bl	8009cce <HAL_PCD_EP_Close>
 8018592:	4603      	mov	r3, r0
 8018594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018596:	7bfb      	ldrb	r3, [r7, #15]
 8018598:	4618      	mov	r0, r3
 801859a:	f000 f8fd 	bl	8018798 <USBD_Get_USB_Status>
 801859e:	4603      	mov	r3, r0
 80185a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	460b      	mov	r3, r1
 80185b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185b8:	2300      	movs	r3, #0
 80185ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185bc:	2300      	movs	r3, #0
 80185be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80185c6:	78fa      	ldrb	r2, [r7, #3]
 80185c8:	4611      	mov	r1, r2
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7f1 fc76 	bl	8009ebc <HAL_PCD_EP_SetStall>
 80185d0:	4603      	mov	r3, r0
 80185d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185d4:	7bfb      	ldrb	r3, [r7, #15]
 80185d6:	4618      	mov	r0, r3
 80185d8:	f000 f8de 	bl	8018798 <USBD_Get_USB_Status>
 80185dc:	4603      	mov	r3, r0
 80185de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3710      	adds	r7, #16
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}

080185ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185ea:	b580      	push	{r7, lr}
 80185ec:	b084      	sub	sp, #16
 80185ee:	af00      	add	r7, sp, #0
 80185f0:	6078      	str	r0, [r7, #4]
 80185f2:	460b      	mov	r3, r1
 80185f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185f6:	2300      	movs	r3, #0
 80185f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185fa:	2300      	movs	r3, #0
 80185fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018604:	78fa      	ldrb	r2, [r7, #3]
 8018606:	4611      	mov	r1, r2
 8018608:	4618      	mov	r0, r3
 801860a:	f7f1 fcbb 	bl	8009f84 <HAL_PCD_EP_ClrStall>
 801860e:	4603      	mov	r3, r0
 8018610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018612:	7bfb      	ldrb	r3, [r7, #15]
 8018614:	4618      	mov	r0, r3
 8018616:	f000 f8bf 	bl	8018798 <USBD_Get_USB_Status>
 801861a:	4603      	mov	r3, r0
 801861c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801861e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018620:	4618      	mov	r0, r3
 8018622:	3710      	adds	r7, #16
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}

08018628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
 8018630:	460b      	mov	r3, r1
 8018632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801863a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801863c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018640:	2b00      	cmp	r3, #0
 8018642:	da0b      	bge.n	801865c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018644:	78fb      	ldrb	r3, [r7, #3]
 8018646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801864a:	68f9      	ldr	r1, [r7, #12]
 801864c:	4613      	mov	r3, r2
 801864e:	00db      	lsls	r3, r3, #3
 8018650:	1a9b      	subs	r3, r3, r2
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	440b      	add	r3, r1
 8018656:	333e      	adds	r3, #62	; 0x3e
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	e00b      	b.n	8018674 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801865c:	78fb      	ldrb	r3, [r7, #3]
 801865e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018662:	68f9      	ldr	r1, [r7, #12]
 8018664:	4613      	mov	r3, r2
 8018666:	00db      	lsls	r3, r3, #3
 8018668:	1a9b      	subs	r3, r3, r2
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	440b      	add	r3, r1
 801866e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018672:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018674:	4618      	mov	r0, r3
 8018676:	3714      	adds	r7, #20
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr

08018680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
 8018688:	460b      	mov	r3, r1
 801868a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801868c:	2300      	movs	r3, #0
 801868e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018690:	2300      	movs	r3, #0
 8018692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801869a:	78fa      	ldrb	r2, [r7, #3]
 801869c:	4611      	mov	r1, r2
 801869e:	4618      	mov	r0, r3
 80186a0:	f7f1 fa88 	bl	8009bb4 <HAL_PCD_SetAddress>
 80186a4:	4603      	mov	r3, r0
 80186a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186a8:	7bfb      	ldrb	r3, [r7, #15]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f000 f874 	bl	8018798 <USBD_Get_USB_Status>
 80186b0:	4603      	mov	r3, r0
 80186b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}

080186be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80186be:	b580      	push	{r7, lr}
 80186c0:	b086      	sub	sp, #24
 80186c2:	af00      	add	r7, sp, #0
 80186c4:	60f8      	str	r0, [r7, #12]
 80186c6:	607a      	str	r2, [r7, #4]
 80186c8:	603b      	str	r3, [r7, #0]
 80186ca:	460b      	mov	r3, r1
 80186cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186ce:	2300      	movs	r3, #0
 80186d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186d2:	2300      	movs	r3, #0
 80186d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80186dc:	7af9      	ldrb	r1, [r7, #11]
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	687a      	ldr	r2, [r7, #4]
 80186e2:	f7f1 fba1 	bl	8009e28 <HAL_PCD_EP_Transmit>
 80186e6:	4603      	mov	r3, r0
 80186e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186ea:	7dfb      	ldrb	r3, [r7, #23]
 80186ec:	4618      	mov	r0, r3
 80186ee:	f000 f853 	bl	8018798 <USBD_Get_USB_Status>
 80186f2:	4603      	mov	r3, r0
 80186f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80186f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	3718      	adds	r7, #24
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}

08018700 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b086      	sub	sp, #24
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	607a      	str	r2, [r7, #4]
 801870a:	603b      	str	r3, [r7, #0]
 801870c:	460b      	mov	r3, r1
 801870e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018710:	2300      	movs	r3, #0
 8018712:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018714:	2300      	movs	r3, #0
 8018716:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801871e:	7af9      	ldrb	r1, [r7, #11]
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	f7f1 fb1d 	bl	8009d62 <HAL_PCD_EP_Receive>
 8018728:	4603      	mov	r3, r0
 801872a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801872c:	7dfb      	ldrb	r3, [r7, #23]
 801872e:	4618      	mov	r0, r3
 8018730:	f000 f832 	bl	8018798 <USBD_Get_USB_Status>
 8018734:	4603      	mov	r3, r0
 8018736:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018738:	7dbb      	ldrb	r3, [r7, #22]
}
 801873a:	4618      	mov	r0, r3
 801873c:	3718      	adds	r7, #24
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}

08018742 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018742:	b580      	push	{r7, lr}
 8018744:	b082      	sub	sp, #8
 8018746:	af00      	add	r7, sp, #0
 8018748:	6078      	str	r0, [r7, #4]
 801874a:	460b      	mov	r3, r1
 801874c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018754:	78fa      	ldrb	r2, [r7, #3]
 8018756:	4611      	mov	r1, r2
 8018758:	4618      	mov	r0, r3
 801875a:	f7f1 fb4d 	bl	8009df8 <HAL_PCD_EP_GetRxCount>
 801875e:	4603      	mov	r3, r0
}
 8018760:	4618      	mov	r0, r3
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018768:	b480      	push	{r7}
 801876a:	b083      	sub	sp, #12
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018770:	4b03      	ldr	r3, [pc, #12]	; (8018780 <USBD_static_malloc+0x18>)
}
 8018772:	4618      	mov	r0, r3
 8018774:	370c      	adds	r7, #12
 8018776:	46bd      	mov	sp, r7
 8018778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877c:	4770      	bx	lr
 801877e:	bf00      	nop
 8018780:	20005c30 	.word	0x20005c30

08018784 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018784:	b480      	push	{r7}
 8018786:	b083      	sub	sp, #12
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]

}
 801878c:	bf00      	nop
 801878e:	370c      	adds	r7, #12
 8018790:	46bd      	mov	sp, r7
 8018792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018796:	4770      	bx	lr

08018798 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018798:	b480      	push	{r7}
 801879a:	b085      	sub	sp, #20
 801879c:	af00      	add	r7, sp, #0
 801879e:	4603      	mov	r3, r0
 80187a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187a2:	2300      	movs	r3, #0
 80187a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80187a6:	79fb      	ldrb	r3, [r7, #7]
 80187a8:	2b03      	cmp	r3, #3
 80187aa:	d817      	bhi.n	80187dc <USBD_Get_USB_Status+0x44>
 80187ac:	a201      	add	r2, pc, #4	; (adr r2, 80187b4 <USBD_Get_USB_Status+0x1c>)
 80187ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187b2:	bf00      	nop
 80187b4:	080187c5 	.word	0x080187c5
 80187b8:	080187cb 	.word	0x080187cb
 80187bc:	080187d1 	.word	0x080187d1
 80187c0:	080187d7 	.word	0x080187d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80187c4:	2300      	movs	r3, #0
 80187c6:	73fb      	strb	r3, [r7, #15]
    break;
 80187c8:	e00b      	b.n	80187e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80187ca:	2303      	movs	r3, #3
 80187cc:	73fb      	strb	r3, [r7, #15]
    break;
 80187ce:	e008      	b.n	80187e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80187d0:	2301      	movs	r3, #1
 80187d2:	73fb      	strb	r3, [r7, #15]
    break;
 80187d4:	e005      	b.n	80187e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80187d6:	2303      	movs	r3, #3
 80187d8:	73fb      	strb	r3, [r7, #15]
    break;
 80187da:	e002      	b.n	80187e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80187dc:	2303      	movs	r3, #3
 80187de:	73fb      	strb	r3, [r7, #15]
    break;
 80187e0:	bf00      	nop
  }
  return usb_status;
 80187e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3714      	adds	r7, #20
 80187e8:	46bd      	mov	sp, r7
 80187ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ee:	4770      	bx	lr

080187f0 <__cxa_pure_virtual>:
 80187f0:	b508      	push	{r3, lr}
 80187f2:	f000 f80d 	bl	8018810 <_ZSt9terminatev>

080187f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80187f6:	b508      	push	{r3, lr}
 80187f8:	4780      	blx	r0
 80187fa:	f000 ffc3 	bl	8019784 <abort>
	...

08018800 <_ZSt13get_terminatev>:
 8018800:	4b02      	ldr	r3, [pc, #8]	; (801880c <_ZSt13get_terminatev+0xc>)
 8018802:	6818      	ldr	r0, [r3, #0]
 8018804:	f3bf 8f5b 	dmb	ish
 8018808:	4770      	bx	lr
 801880a:	bf00      	nop
 801880c:	200001f8 	.word	0x200001f8

08018810 <_ZSt9terminatev>:
 8018810:	b508      	push	{r3, lr}
 8018812:	f7ff fff5 	bl	8018800 <_ZSt13get_terminatev>
 8018816:	f7ff ffee 	bl	80187f6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801881c <pow>:
 801881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018820:	ec59 8b10 	vmov	r8, r9, d0
 8018824:	ec57 6b11 	vmov	r6, r7, d1
 8018828:	f000 f8a6 	bl	8018978 <__ieee754_pow>
 801882c:	4b4e      	ldr	r3, [pc, #312]	; (8018968 <pow+0x14c>)
 801882e:	f993 3000 	ldrsb.w	r3, [r3]
 8018832:	3301      	adds	r3, #1
 8018834:	ec55 4b10 	vmov	r4, r5, d0
 8018838:	d015      	beq.n	8018866 <pow+0x4a>
 801883a:	4632      	mov	r2, r6
 801883c:	463b      	mov	r3, r7
 801883e:	4630      	mov	r0, r6
 8018840:	4639      	mov	r1, r7
 8018842:	f7e8 f983 	bl	8000b4c <__aeabi_dcmpun>
 8018846:	b970      	cbnz	r0, 8018866 <pow+0x4a>
 8018848:	4642      	mov	r2, r8
 801884a:	464b      	mov	r3, r9
 801884c:	4640      	mov	r0, r8
 801884e:	4649      	mov	r1, r9
 8018850:	f7e8 f97c 	bl	8000b4c <__aeabi_dcmpun>
 8018854:	2200      	movs	r2, #0
 8018856:	2300      	movs	r3, #0
 8018858:	b148      	cbz	r0, 801886e <pow+0x52>
 801885a:	4630      	mov	r0, r6
 801885c:	4639      	mov	r1, r7
 801885e:	f7e8 f943 	bl	8000ae8 <__aeabi_dcmpeq>
 8018862:	2800      	cmp	r0, #0
 8018864:	d17d      	bne.n	8018962 <pow+0x146>
 8018866:	ec45 4b10 	vmov	d0, r4, r5
 801886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801886e:	4640      	mov	r0, r8
 8018870:	4649      	mov	r1, r9
 8018872:	f7e8 f939 	bl	8000ae8 <__aeabi_dcmpeq>
 8018876:	b1e0      	cbz	r0, 80188b2 <pow+0x96>
 8018878:	2200      	movs	r2, #0
 801887a:	2300      	movs	r3, #0
 801887c:	4630      	mov	r0, r6
 801887e:	4639      	mov	r1, r7
 8018880:	f7e8 f932 	bl	8000ae8 <__aeabi_dcmpeq>
 8018884:	2800      	cmp	r0, #0
 8018886:	d16c      	bne.n	8018962 <pow+0x146>
 8018888:	ec47 6b10 	vmov	d0, r6, r7
 801888c:	f000 fe53 	bl	8019536 <finite>
 8018890:	2800      	cmp	r0, #0
 8018892:	d0e8      	beq.n	8018866 <pow+0x4a>
 8018894:	2200      	movs	r2, #0
 8018896:	2300      	movs	r3, #0
 8018898:	4630      	mov	r0, r6
 801889a:	4639      	mov	r1, r7
 801889c:	f7e8 f92e 	bl	8000afc <__aeabi_dcmplt>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	d0e0      	beq.n	8018866 <pow+0x4a>
 80188a4:	f000 ff76 	bl	8019794 <__errno>
 80188a8:	2321      	movs	r3, #33	; 0x21
 80188aa:	6003      	str	r3, [r0, #0]
 80188ac:	2400      	movs	r4, #0
 80188ae:	4d2f      	ldr	r5, [pc, #188]	; (801896c <pow+0x150>)
 80188b0:	e7d9      	b.n	8018866 <pow+0x4a>
 80188b2:	ec45 4b10 	vmov	d0, r4, r5
 80188b6:	f000 fe3e 	bl	8019536 <finite>
 80188ba:	bbb8      	cbnz	r0, 801892c <pow+0x110>
 80188bc:	ec49 8b10 	vmov	d0, r8, r9
 80188c0:	f000 fe39 	bl	8019536 <finite>
 80188c4:	b390      	cbz	r0, 801892c <pow+0x110>
 80188c6:	ec47 6b10 	vmov	d0, r6, r7
 80188ca:	f000 fe34 	bl	8019536 <finite>
 80188ce:	b368      	cbz	r0, 801892c <pow+0x110>
 80188d0:	4622      	mov	r2, r4
 80188d2:	462b      	mov	r3, r5
 80188d4:	4620      	mov	r0, r4
 80188d6:	4629      	mov	r1, r5
 80188d8:	f7e8 f938 	bl	8000b4c <__aeabi_dcmpun>
 80188dc:	b160      	cbz	r0, 80188f8 <pow+0xdc>
 80188de:	f000 ff59 	bl	8019794 <__errno>
 80188e2:	2321      	movs	r3, #33	; 0x21
 80188e4:	6003      	str	r3, [r0, #0]
 80188e6:	2200      	movs	r2, #0
 80188e8:	2300      	movs	r3, #0
 80188ea:	4610      	mov	r0, r2
 80188ec:	4619      	mov	r1, r3
 80188ee:	f7e7 ffbd 	bl	800086c <__aeabi_ddiv>
 80188f2:	4604      	mov	r4, r0
 80188f4:	460d      	mov	r5, r1
 80188f6:	e7b6      	b.n	8018866 <pow+0x4a>
 80188f8:	f000 ff4c 	bl	8019794 <__errno>
 80188fc:	2322      	movs	r3, #34	; 0x22
 80188fe:	6003      	str	r3, [r0, #0]
 8018900:	2200      	movs	r2, #0
 8018902:	2300      	movs	r3, #0
 8018904:	4640      	mov	r0, r8
 8018906:	4649      	mov	r1, r9
 8018908:	f7e8 f8f8 	bl	8000afc <__aeabi_dcmplt>
 801890c:	2400      	movs	r4, #0
 801890e:	b158      	cbz	r0, 8018928 <pow+0x10c>
 8018910:	ec47 6b10 	vmov	d0, r6, r7
 8018914:	f000 fe24 	bl	8019560 <rint>
 8018918:	4632      	mov	r2, r6
 801891a:	ec51 0b10 	vmov	r0, r1, d0
 801891e:	463b      	mov	r3, r7
 8018920:	f7e8 f8e2 	bl	8000ae8 <__aeabi_dcmpeq>
 8018924:	2800      	cmp	r0, #0
 8018926:	d0c2      	beq.n	80188ae <pow+0x92>
 8018928:	4d11      	ldr	r5, [pc, #68]	; (8018970 <pow+0x154>)
 801892a:	e79c      	b.n	8018866 <pow+0x4a>
 801892c:	2200      	movs	r2, #0
 801892e:	2300      	movs	r3, #0
 8018930:	4620      	mov	r0, r4
 8018932:	4629      	mov	r1, r5
 8018934:	f7e8 f8d8 	bl	8000ae8 <__aeabi_dcmpeq>
 8018938:	2800      	cmp	r0, #0
 801893a:	d094      	beq.n	8018866 <pow+0x4a>
 801893c:	ec49 8b10 	vmov	d0, r8, r9
 8018940:	f000 fdf9 	bl	8019536 <finite>
 8018944:	2800      	cmp	r0, #0
 8018946:	d08e      	beq.n	8018866 <pow+0x4a>
 8018948:	ec47 6b10 	vmov	d0, r6, r7
 801894c:	f000 fdf3 	bl	8019536 <finite>
 8018950:	2800      	cmp	r0, #0
 8018952:	d088      	beq.n	8018866 <pow+0x4a>
 8018954:	f000 ff1e 	bl	8019794 <__errno>
 8018958:	2322      	movs	r3, #34	; 0x22
 801895a:	6003      	str	r3, [r0, #0]
 801895c:	2400      	movs	r4, #0
 801895e:	2500      	movs	r5, #0
 8018960:	e781      	b.n	8018866 <pow+0x4a>
 8018962:	4d04      	ldr	r5, [pc, #16]	; (8018974 <pow+0x158>)
 8018964:	2400      	movs	r4, #0
 8018966:	e77e      	b.n	8018866 <pow+0x4a>
 8018968:	200001fc 	.word	0x200001fc
 801896c:	fff00000 	.word	0xfff00000
 8018970:	7ff00000 	.word	0x7ff00000
 8018974:	3ff00000 	.word	0x3ff00000

08018978 <__ieee754_pow>:
 8018978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801897c:	ed2d 8b06 	vpush	{d8-d10}
 8018980:	b08d      	sub	sp, #52	; 0x34
 8018982:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018986:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801898a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801898e:	ea56 0100 	orrs.w	r1, r6, r0
 8018992:	ec53 2b10 	vmov	r2, r3, d0
 8018996:	f000 84d1 	beq.w	801933c <__ieee754_pow+0x9c4>
 801899a:	497f      	ldr	r1, [pc, #508]	; (8018b98 <__ieee754_pow+0x220>)
 801899c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80189a0:	428c      	cmp	r4, r1
 80189a2:	ee10 8a10 	vmov	r8, s0
 80189a6:	4699      	mov	r9, r3
 80189a8:	dc09      	bgt.n	80189be <__ieee754_pow+0x46>
 80189aa:	d103      	bne.n	80189b4 <__ieee754_pow+0x3c>
 80189ac:	b97a      	cbnz	r2, 80189ce <__ieee754_pow+0x56>
 80189ae:	42a6      	cmp	r6, r4
 80189b0:	dd02      	ble.n	80189b8 <__ieee754_pow+0x40>
 80189b2:	e00c      	b.n	80189ce <__ieee754_pow+0x56>
 80189b4:	428e      	cmp	r6, r1
 80189b6:	dc02      	bgt.n	80189be <__ieee754_pow+0x46>
 80189b8:	428e      	cmp	r6, r1
 80189ba:	d110      	bne.n	80189de <__ieee754_pow+0x66>
 80189bc:	b178      	cbz	r0, 80189de <__ieee754_pow+0x66>
 80189be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80189c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80189c6:	ea54 0308 	orrs.w	r3, r4, r8
 80189ca:	f000 84b7 	beq.w	801933c <__ieee754_pow+0x9c4>
 80189ce:	4873      	ldr	r0, [pc, #460]	; (8018b9c <__ieee754_pow+0x224>)
 80189d0:	b00d      	add	sp, #52	; 0x34
 80189d2:	ecbd 8b06 	vpop	{d8-d10}
 80189d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189da:	f000 bdb9 	b.w	8019550 <nan>
 80189de:	f1b9 0f00 	cmp.w	r9, #0
 80189e2:	da36      	bge.n	8018a52 <__ieee754_pow+0xda>
 80189e4:	496e      	ldr	r1, [pc, #440]	; (8018ba0 <__ieee754_pow+0x228>)
 80189e6:	428e      	cmp	r6, r1
 80189e8:	dc51      	bgt.n	8018a8e <__ieee754_pow+0x116>
 80189ea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80189ee:	428e      	cmp	r6, r1
 80189f0:	f340 84af 	ble.w	8019352 <__ieee754_pow+0x9da>
 80189f4:	1531      	asrs	r1, r6, #20
 80189f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80189fa:	2914      	cmp	r1, #20
 80189fc:	dd0f      	ble.n	8018a1e <__ieee754_pow+0xa6>
 80189fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8018a02:	fa20 fc01 	lsr.w	ip, r0, r1
 8018a06:	fa0c f101 	lsl.w	r1, ip, r1
 8018a0a:	4281      	cmp	r1, r0
 8018a0c:	f040 84a1 	bne.w	8019352 <__ieee754_pow+0x9da>
 8018a10:	f00c 0c01 	and.w	ip, ip, #1
 8018a14:	f1cc 0102 	rsb	r1, ip, #2
 8018a18:	9100      	str	r1, [sp, #0]
 8018a1a:	b180      	cbz	r0, 8018a3e <__ieee754_pow+0xc6>
 8018a1c:	e059      	b.n	8018ad2 <__ieee754_pow+0x15a>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	d155      	bne.n	8018ace <__ieee754_pow+0x156>
 8018a22:	f1c1 0114 	rsb	r1, r1, #20
 8018a26:	fa46 fc01 	asr.w	ip, r6, r1
 8018a2a:	fa0c f101 	lsl.w	r1, ip, r1
 8018a2e:	42b1      	cmp	r1, r6
 8018a30:	f040 848c 	bne.w	801934c <__ieee754_pow+0x9d4>
 8018a34:	f00c 0c01 	and.w	ip, ip, #1
 8018a38:	f1cc 0102 	rsb	r1, ip, #2
 8018a3c:	9100      	str	r1, [sp, #0]
 8018a3e:	4959      	ldr	r1, [pc, #356]	; (8018ba4 <__ieee754_pow+0x22c>)
 8018a40:	428e      	cmp	r6, r1
 8018a42:	d12d      	bne.n	8018aa0 <__ieee754_pow+0x128>
 8018a44:	2f00      	cmp	r7, #0
 8018a46:	da79      	bge.n	8018b3c <__ieee754_pow+0x1c4>
 8018a48:	4956      	ldr	r1, [pc, #344]	; (8018ba4 <__ieee754_pow+0x22c>)
 8018a4a:	2000      	movs	r0, #0
 8018a4c:	f7e7 ff0e 	bl	800086c <__aeabi_ddiv>
 8018a50:	e016      	b.n	8018a80 <__ieee754_pow+0x108>
 8018a52:	2100      	movs	r1, #0
 8018a54:	9100      	str	r1, [sp, #0]
 8018a56:	2800      	cmp	r0, #0
 8018a58:	d13b      	bne.n	8018ad2 <__ieee754_pow+0x15a>
 8018a5a:	494f      	ldr	r1, [pc, #316]	; (8018b98 <__ieee754_pow+0x220>)
 8018a5c:	428e      	cmp	r6, r1
 8018a5e:	d1ee      	bne.n	8018a3e <__ieee754_pow+0xc6>
 8018a60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018a64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018a68:	ea53 0308 	orrs.w	r3, r3, r8
 8018a6c:	f000 8466 	beq.w	801933c <__ieee754_pow+0x9c4>
 8018a70:	4b4d      	ldr	r3, [pc, #308]	; (8018ba8 <__ieee754_pow+0x230>)
 8018a72:	429c      	cmp	r4, r3
 8018a74:	dd0d      	ble.n	8018a92 <__ieee754_pow+0x11a>
 8018a76:	2f00      	cmp	r7, #0
 8018a78:	f280 8464 	bge.w	8019344 <__ieee754_pow+0x9cc>
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	2100      	movs	r1, #0
 8018a80:	ec41 0b10 	vmov	d0, r0, r1
 8018a84:	b00d      	add	sp, #52	; 0x34
 8018a86:	ecbd 8b06 	vpop	{d8-d10}
 8018a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a8e:	2102      	movs	r1, #2
 8018a90:	e7e0      	b.n	8018a54 <__ieee754_pow+0xdc>
 8018a92:	2f00      	cmp	r7, #0
 8018a94:	daf2      	bge.n	8018a7c <__ieee754_pow+0x104>
 8018a96:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8018a9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018a9e:	e7ef      	b.n	8018a80 <__ieee754_pow+0x108>
 8018aa0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8018aa4:	d104      	bne.n	8018ab0 <__ieee754_pow+0x138>
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	4619      	mov	r1, r3
 8018aaa:	f7e7 fdb5 	bl	8000618 <__aeabi_dmul>
 8018aae:	e7e7      	b.n	8018a80 <__ieee754_pow+0x108>
 8018ab0:	493e      	ldr	r1, [pc, #248]	; (8018bac <__ieee754_pow+0x234>)
 8018ab2:	428f      	cmp	r7, r1
 8018ab4:	d10d      	bne.n	8018ad2 <__ieee754_pow+0x15a>
 8018ab6:	f1b9 0f00 	cmp.w	r9, #0
 8018aba:	db0a      	blt.n	8018ad2 <__ieee754_pow+0x15a>
 8018abc:	ec43 2b10 	vmov	d0, r2, r3
 8018ac0:	b00d      	add	sp, #52	; 0x34
 8018ac2:	ecbd 8b06 	vpop	{d8-d10}
 8018ac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aca:	f000 bc77 	b.w	80193bc <__ieee754_sqrt>
 8018ace:	2100      	movs	r1, #0
 8018ad0:	9100      	str	r1, [sp, #0]
 8018ad2:	ec43 2b10 	vmov	d0, r2, r3
 8018ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018ada:	f000 fd23 	bl	8019524 <fabs>
 8018ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ae2:	ec51 0b10 	vmov	r0, r1, d0
 8018ae6:	f1b8 0f00 	cmp.w	r8, #0
 8018aea:	d12a      	bne.n	8018b42 <__ieee754_pow+0x1ca>
 8018aec:	b12c      	cbz	r4, 8018afa <__ieee754_pow+0x182>
 8018aee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018ba4 <__ieee754_pow+0x22c>
 8018af2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018af6:	45e6      	cmp	lr, ip
 8018af8:	d123      	bne.n	8018b42 <__ieee754_pow+0x1ca>
 8018afa:	2f00      	cmp	r7, #0
 8018afc:	da05      	bge.n	8018b0a <__ieee754_pow+0x192>
 8018afe:	4602      	mov	r2, r0
 8018b00:	460b      	mov	r3, r1
 8018b02:	2000      	movs	r0, #0
 8018b04:	4927      	ldr	r1, [pc, #156]	; (8018ba4 <__ieee754_pow+0x22c>)
 8018b06:	f7e7 feb1 	bl	800086c <__aeabi_ddiv>
 8018b0a:	f1b9 0f00 	cmp.w	r9, #0
 8018b0e:	dab7      	bge.n	8018a80 <__ieee754_pow+0x108>
 8018b10:	9b00      	ldr	r3, [sp, #0]
 8018b12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018b16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018b1a:	4323      	orrs	r3, r4
 8018b1c:	d108      	bne.n	8018b30 <__ieee754_pow+0x1b8>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	460b      	mov	r3, r1
 8018b22:	4610      	mov	r0, r2
 8018b24:	4619      	mov	r1, r3
 8018b26:	f7e7 fbbf 	bl	80002a8 <__aeabi_dsub>
 8018b2a:	4602      	mov	r2, r0
 8018b2c:	460b      	mov	r3, r1
 8018b2e:	e78d      	b.n	8018a4c <__ieee754_pow+0xd4>
 8018b30:	9b00      	ldr	r3, [sp, #0]
 8018b32:	2b01      	cmp	r3, #1
 8018b34:	d1a4      	bne.n	8018a80 <__ieee754_pow+0x108>
 8018b36:	4602      	mov	r2, r0
 8018b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018b3c:	4610      	mov	r0, r2
 8018b3e:	4619      	mov	r1, r3
 8018b40:	e79e      	b.n	8018a80 <__ieee754_pow+0x108>
 8018b42:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018b46:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018b4a:	950a      	str	r5, [sp, #40]	; 0x28
 8018b4c:	9d00      	ldr	r5, [sp, #0]
 8018b4e:	46ac      	mov	ip, r5
 8018b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018b52:	ea5c 0505 	orrs.w	r5, ip, r5
 8018b56:	d0e4      	beq.n	8018b22 <__ieee754_pow+0x1aa>
 8018b58:	4b15      	ldr	r3, [pc, #84]	; (8018bb0 <__ieee754_pow+0x238>)
 8018b5a:	429e      	cmp	r6, r3
 8018b5c:	f340 80fc 	ble.w	8018d58 <__ieee754_pow+0x3e0>
 8018b60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018b64:	429e      	cmp	r6, r3
 8018b66:	4b10      	ldr	r3, [pc, #64]	; (8018ba8 <__ieee754_pow+0x230>)
 8018b68:	dd07      	ble.n	8018b7a <__ieee754_pow+0x202>
 8018b6a:	429c      	cmp	r4, r3
 8018b6c:	dc0a      	bgt.n	8018b84 <__ieee754_pow+0x20c>
 8018b6e:	2f00      	cmp	r7, #0
 8018b70:	da84      	bge.n	8018a7c <__ieee754_pow+0x104>
 8018b72:	a307      	add	r3, pc, #28	; (adr r3, 8018b90 <__ieee754_pow+0x218>)
 8018b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b78:	e795      	b.n	8018aa6 <__ieee754_pow+0x12e>
 8018b7a:	429c      	cmp	r4, r3
 8018b7c:	dbf7      	blt.n	8018b6e <__ieee754_pow+0x1f6>
 8018b7e:	4b09      	ldr	r3, [pc, #36]	; (8018ba4 <__ieee754_pow+0x22c>)
 8018b80:	429c      	cmp	r4, r3
 8018b82:	dd17      	ble.n	8018bb4 <__ieee754_pow+0x23c>
 8018b84:	2f00      	cmp	r7, #0
 8018b86:	dcf4      	bgt.n	8018b72 <__ieee754_pow+0x1fa>
 8018b88:	e778      	b.n	8018a7c <__ieee754_pow+0x104>
 8018b8a:	bf00      	nop
 8018b8c:	f3af 8000 	nop.w
 8018b90:	8800759c 	.word	0x8800759c
 8018b94:	7e37e43c 	.word	0x7e37e43c
 8018b98:	7ff00000 	.word	0x7ff00000
 8018b9c:	08020c0b 	.word	0x08020c0b
 8018ba0:	433fffff 	.word	0x433fffff
 8018ba4:	3ff00000 	.word	0x3ff00000
 8018ba8:	3fefffff 	.word	0x3fefffff
 8018bac:	3fe00000 	.word	0x3fe00000
 8018bb0:	41e00000 	.word	0x41e00000
 8018bb4:	4b64      	ldr	r3, [pc, #400]	; (8018d48 <__ieee754_pow+0x3d0>)
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	f7e7 fb76 	bl	80002a8 <__aeabi_dsub>
 8018bbc:	a356      	add	r3, pc, #344	; (adr r3, 8018d18 <__ieee754_pow+0x3a0>)
 8018bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	460d      	mov	r5, r1
 8018bc6:	f7e7 fd27 	bl	8000618 <__aeabi_dmul>
 8018bca:	a355      	add	r3, pc, #340	; (adr r3, 8018d20 <__ieee754_pow+0x3a8>)
 8018bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd0:	4606      	mov	r6, r0
 8018bd2:	460f      	mov	r7, r1
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	4629      	mov	r1, r5
 8018bd8:	f7e7 fd1e 	bl	8000618 <__aeabi_dmul>
 8018bdc:	4b5b      	ldr	r3, [pc, #364]	; (8018d4c <__ieee754_pow+0x3d4>)
 8018bde:	4682      	mov	sl, r0
 8018be0:	468b      	mov	fp, r1
 8018be2:	2200      	movs	r2, #0
 8018be4:	4620      	mov	r0, r4
 8018be6:	4629      	mov	r1, r5
 8018be8:	f7e7 fd16 	bl	8000618 <__aeabi_dmul>
 8018bec:	4602      	mov	r2, r0
 8018bee:	460b      	mov	r3, r1
 8018bf0:	a14d      	add	r1, pc, #308	; (adr r1, 8018d28 <__ieee754_pow+0x3b0>)
 8018bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bf6:	f7e7 fb57 	bl	80002a8 <__aeabi_dsub>
 8018bfa:	4622      	mov	r2, r4
 8018bfc:	462b      	mov	r3, r5
 8018bfe:	f7e7 fd0b 	bl	8000618 <__aeabi_dmul>
 8018c02:	4602      	mov	r2, r0
 8018c04:	460b      	mov	r3, r1
 8018c06:	2000      	movs	r0, #0
 8018c08:	4951      	ldr	r1, [pc, #324]	; (8018d50 <__ieee754_pow+0x3d8>)
 8018c0a:	f7e7 fb4d 	bl	80002a8 <__aeabi_dsub>
 8018c0e:	4622      	mov	r2, r4
 8018c10:	4680      	mov	r8, r0
 8018c12:	4689      	mov	r9, r1
 8018c14:	462b      	mov	r3, r5
 8018c16:	4620      	mov	r0, r4
 8018c18:	4629      	mov	r1, r5
 8018c1a:	f7e7 fcfd 	bl	8000618 <__aeabi_dmul>
 8018c1e:	4602      	mov	r2, r0
 8018c20:	460b      	mov	r3, r1
 8018c22:	4640      	mov	r0, r8
 8018c24:	4649      	mov	r1, r9
 8018c26:	f7e7 fcf7 	bl	8000618 <__aeabi_dmul>
 8018c2a:	a341      	add	r3, pc, #260	; (adr r3, 8018d30 <__ieee754_pow+0x3b8>)
 8018c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c30:	f7e7 fcf2 	bl	8000618 <__aeabi_dmul>
 8018c34:	4602      	mov	r2, r0
 8018c36:	460b      	mov	r3, r1
 8018c38:	4650      	mov	r0, sl
 8018c3a:	4659      	mov	r1, fp
 8018c3c:	f7e7 fb34 	bl	80002a8 <__aeabi_dsub>
 8018c40:	4602      	mov	r2, r0
 8018c42:	460b      	mov	r3, r1
 8018c44:	4680      	mov	r8, r0
 8018c46:	4689      	mov	r9, r1
 8018c48:	4630      	mov	r0, r6
 8018c4a:	4639      	mov	r1, r7
 8018c4c:	f7e7 fb2e 	bl	80002ac <__adddf3>
 8018c50:	2400      	movs	r4, #0
 8018c52:	4632      	mov	r2, r6
 8018c54:	463b      	mov	r3, r7
 8018c56:	4620      	mov	r0, r4
 8018c58:	460d      	mov	r5, r1
 8018c5a:	f7e7 fb25 	bl	80002a8 <__aeabi_dsub>
 8018c5e:	4602      	mov	r2, r0
 8018c60:	460b      	mov	r3, r1
 8018c62:	4640      	mov	r0, r8
 8018c64:	4649      	mov	r1, r9
 8018c66:	f7e7 fb1f 	bl	80002a8 <__aeabi_dsub>
 8018c6a:	9b00      	ldr	r3, [sp, #0]
 8018c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c6e:	3b01      	subs	r3, #1
 8018c70:	4313      	orrs	r3, r2
 8018c72:	4682      	mov	sl, r0
 8018c74:	468b      	mov	fp, r1
 8018c76:	f040 81f1 	bne.w	801905c <__ieee754_pow+0x6e4>
 8018c7a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018d38 <__ieee754_pow+0x3c0>
 8018c7e:	eeb0 8a47 	vmov.f32	s16, s14
 8018c82:	eef0 8a67 	vmov.f32	s17, s15
 8018c86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c8a:	2600      	movs	r6, #0
 8018c8c:	4632      	mov	r2, r6
 8018c8e:	463b      	mov	r3, r7
 8018c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c94:	f7e7 fb08 	bl	80002a8 <__aeabi_dsub>
 8018c98:	4622      	mov	r2, r4
 8018c9a:	462b      	mov	r3, r5
 8018c9c:	f7e7 fcbc 	bl	8000618 <__aeabi_dmul>
 8018ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ca4:	4680      	mov	r8, r0
 8018ca6:	4689      	mov	r9, r1
 8018ca8:	4650      	mov	r0, sl
 8018caa:	4659      	mov	r1, fp
 8018cac:	f7e7 fcb4 	bl	8000618 <__aeabi_dmul>
 8018cb0:	4602      	mov	r2, r0
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	4640      	mov	r0, r8
 8018cb6:	4649      	mov	r1, r9
 8018cb8:	f7e7 faf8 	bl	80002ac <__adddf3>
 8018cbc:	4632      	mov	r2, r6
 8018cbe:	463b      	mov	r3, r7
 8018cc0:	4680      	mov	r8, r0
 8018cc2:	4689      	mov	r9, r1
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	4629      	mov	r1, r5
 8018cc8:	f7e7 fca6 	bl	8000618 <__aeabi_dmul>
 8018ccc:	460b      	mov	r3, r1
 8018cce:	4604      	mov	r4, r0
 8018cd0:	460d      	mov	r5, r1
 8018cd2:	4602      	mov	r2, r0
 8018cd4:	4649      	mov	r1, r9
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	f7e7 fae8 	bl	80002ac <__adddf3>
 8018cdc:	4b1d      	ldr	r3, [pc, #116]	; (8018d54 <__ieee754_pow+0x3dc>)
 8018cde:	4299      	cmp	r1, r3
 8018ce0:	ec45 4b19 	vmov	d9, r4, r5
 8018ce4:	4606      	mov	r6, r0
 8018ce6:	460f      	mov	r7, r1
 8018ce8:	468b      	mov	fp, r1
 8018cea:	f340 82fe 	ble.w	80192ea <__ieee754_pow+0x972>
 8018cee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018cf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018cf6:	4303      	orrs	r3, r0
 8018cf8:	f000 81f0 	beq.w	80190dc <__ieee754_pow+0x764>
 8018cfc:	a310      	add	r3, pc, #64	; (adr r3, 8018d40 <__ieee754_pow+0x3c8>)
 8018cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d02:	ec51 0b18 	vmov	r0, r1, d8
 8018d06:	f7e7 fc87 	bl	8000618 <__aeabi_dmul>
 8018d0a:	a30d      	add	r3, pc, #52	; (adr r3, 8018d40 <__ieee754_pow+0x3c8>)
 8018d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d10:	e6cb      	b.n	8018aaa <__ieee754_pow+0x132>
 8018d12:	bf00      	nop
 8018d14:	f3af 8000 	nop.w
 8018d18:	60000000 	.word	0x60000000
 8018d1c:	3ff71547 	.word	0x3ff71547
 8018d20:	f85ddf44 	.word	0xf85ddf44
 8018d24:	3e54ae0b 	.word	0x3e54ae0b
 8018d28:	55555555 	.word	0x55555555
 8018d2c:	3fd55555 	.word	0x3fd55555
 8018d30:	652b82fe 	.word	0x652b82fe
 8018d34:	3ff71547 	.word	0x3ff71547
 8018d38:	00000000 	.word	0x00000000
 8018d3c:	bff00000 	.word	0xbff00000
 8018d40:	8800759c 	.word	0x8800759c
 8018d44:	7e37e43c 	.word	0x7e37e43c
 8018d48:	3ff00000 	.word	0x3ff00000
 8018d4c:	3fd00000 	.word	0x3fd00000
 8018d50:	3fe00000 	.word	0x3fe00000
 8018d54:	408fffff 	.word	0x408fffff
 8018d58:	4bd7      	ldr	r3, [pc, #860]	; (80190b8 <__ieee754_pow+0x740>)
 8018d5a:	ea03 0309 	and.w	r3, r3, r9
 8018d5e:	2200      	movs	r2, #0
 8018d60:	b92b      	cbnz	r3, 8018d6e <__ieee754_pow+0x3f6>
 8018d62:	4bd6      	ldr	r3, [pc, #856]	; (80190bc <__ieee754_pow+0x744>)
 8018d64:	f7e7 fc58 	bl	8000618 <__aeabi_dmul>
 8018d68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018d6c:	460c      	mov	r4, r1
 8018d6e:	1523      	asrs	r3, r4, #20
 8018d70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018d74:	4413      	add	r3, r2
 8018d76:	9309      	str	r3, [sp, #36]	; 0x24
 8018d78:	4bd1      	ldr	r3, [pc, #836]	; (80190c0 <__ieee754_pow+0x748>)
 8018d7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018d7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018d82:	429c      	cmp	r4, r3
 8018d84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018d88:	dd08      	ble.n	8018d9c <__ieee754_pow+0x424>
 8018d8a:	4bce      	ldr	r3, [pc, #824]	; (80190c4 <__ieee754_pow+0x74c>)
 8018d8c:	429c      	cmp	r4, r3
 8018d8e:	f340 8163 	ble.w	8019058 <__ieee754_pow+0x6e0>
 8018d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d94:	3301      	adds	r3, #1
 8018d96:	9309      	str	r3, [sp, #36]	; 0x24
 8018d98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018d9c:	2400      	movs	r4, #0
 8018d9e:	00e3      	lsls	r3, r4, #3
 8018da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018da2:	4bc9      	ldr	r3, [pc, #804]	; (80190c8 <__ieee754_pow+0x750>)
 8018da4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018da8:	ed93 7b00 	vldr	d7, [r3]
 8018dac:	4629      	mov	r1, r5
 8018dae:	ec53 2b17 	vmov	r2, r3, d7
 8018db2:	eeb0 8a47 	vmov.f32	s16, s14
 8018db6:	eef0 8a67 	vmov.f32	s17, s15
 8018dba:	4682      	mov	sl, r0
 8018dbc:	f7e7 fa74 	bl	80002a8 <__aeabi_dsub>
 8018dc0:	4652      	mov	r2, sl
 8018dc2:	4606      	mov	r6, r0
 8018dc4:	460f      	mov	r7, r1
 8018dc6:	462b      	mov	r3, r5
 8018dc8:	ec51 0b18 	vmov	r0, r1, d8
 8018dcc:	f7e7 fa6e 	bl	80002ac <__adddf3>
 8018dd0:	4602      	mov	r2, r0
 8018dd2:	460b      	mov	r3, r1
 8018dd4:	2000      	movs	r0, #0
 8018dd6:	49bd      	ldr	r1, [pc, #756]	; (80190cc <__ieee754_pow+0x754>)
 8018dd8:	f7e7 fd48 	bl	800086c <__aeabi_ddiv>
 8018ddc:	ec41 0b19 	vmov	d9, r0, r1
 8018de0:	4602      	mov	r2, r0
 8018de2:	460b      	mov	r3, r1
 8018de4:	4630      	mov	r0, r6
 8018de6:	4639      	mov	r1, r7
 8018de8:	f7e7 fc16 	bl	8000618 <__aeabi_dmul>
 8018dec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018df4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	9304      	str	r3, [sp, #16]
 8018dfc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018e00:	46ab      	mov	fp, r5
 8018e02:	106d      	asrs	r5, r5, #1
 8018e04:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018e08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018e0c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018e10:	2200      	movs	r2, #0
 8018e12:	4640      	mov	r0, r8
 8018e14:	4649      	mov	r1, r9
 8018e16:	4614      	mov	r4, r2
 8018e18:	461d      	mov	r5, r3
 8018e1a:	f7e7 fbfd 	bl	8000618 <__aeabi_dmul>
 8018e1e:	4602      	mov	r2, r0
 8018e20:	460b      	mov	r3, r1
 8018e22:	4630      	mov	r0, r6
 8018e24:	4639      	mov	r1, r7
 8018e26:	f7e7 fa3f 	bl	80002a8 <__aeabi_dsub>
 8018e2a:	ec53 2b18 	vmov	r2, r3, d8
 8018e2e:	4606      	mov	r6, r0
 8018e30:	460f      	mov	r7, r1
 8018e32:	4620      	mov	r0, r4
 8018e34:	4629      	mov	r1, r5
 8018e36:	f7e7 fa37 	bl	80002a8 <__aeabi_dsub>
 8018e3a:	4602      	mov	r2, r0
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	4650      	mov	r0, sl
 8018e40:	4659      	mov	r1, fp
 8018e42:	f7e7 fa31 	bl	80002a8 <__aeabi_dsub>
 8018e46:	4642      	mov	r2, r8
 8018e48:	464b      	mov	r3, r9
 8018e4a:	f7e7 fbe5 	bl	8000618 <__aeabi_dmul>
 8018e4e:	4602      	mov	r2, r0
 8018e50:	460b      	mov	r3, r1
 8018e52:	4630      	mov	r0, r6
 8018e54:	4639      	mov	r1, r7
 8018e56:	f7e7 fa27 	bl	80002a8 <__aeabi_dsub>
 8018e5a:	ec53 2b19 	vmov	r2, r3, d9
 8018e5e:	f7e7 fbdb 	bl	8000618 <__aeabi_dmul>
 8018e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e66:	ec41 0b18 	vmov	d8, r0, r1
 8018e6a:	4610      	mov	r0, r2
 8018e6c:	4619      	mov	r1, r3
 8018e6e:	f7e7 fbd3 	bl	8000618 <__aeabi_dmul>
 8018e72:	a37d      	add	r3, pc, #500	; (adr r3, 8019068 <__ieee754_pow+0x6f0>)
 8018e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e78:	4604      	mov	r4, r0
 8018e7a:	460d      	mov	r5, r1
 8018e7c:	f7e7 fbcc 	bl	8000618 <__aeabi_dmul>
 8018e80:	a37b      	add	r3, pc, #492	; (adr r3, 8019070 <__ieee754_pow+0x6f8>)
 8018e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e86:	f7e7 fa11 	bl	80002ac <__adddf3>
 8018e8a:	4622      	mov	r2, r4
 8018e8c:	462b      	mov	r3, r5
 8018e8e:	f7e7 fbc3 	bl	8000618 <__aeabi_dmul>
 8018e92:	a379      	add	r3, pc, #484	; (adr r3, 8019078 <__ieee754_pow+0x700>)
 8018e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e98:	f7e7 fa08 	bl	80002ac <__adddf3>
 8018e9c:	4622      	mov	r2, r4
 8018e9e:	462b      	mov	r3, r5
 8018ea0:	f7e7 fbba 	bl	8000618 <__aeabi_dmul>
 8018ea4:	a376      	add	r3, pc, #472	; (adr r3, 8019080 <__ieee754_pow+0x708>)
 8018ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eaa:	f7e7 f9ff 	bl	80002ac <__adddf3>
 8018eae:	4622      	mov	r2, r4
 8018eb0:	462b      	mov	r3, r5
 8018eb2:	f7e7 fbb1 	bl	8000618 <__aeabi_dmul>
 8018eb6:	a374      	add	r3, pc, #464	; (adr r3, 8019088 <__ieee754_pow+0x710>)
 8018eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ebc:	f7e7 f9f6 	bl	80002ac <__adddf3>
 8018ec0:	4622      	mov	r2, r4
 8018ec2:	462b      	mov	r3, r5
 8018ec4:	f7e7 fba8 	bl	8000618 <__aeabi_dmul>
 8018ec8:	a371      	add	r3, pc, #452	; (adr r3, 8019090 <__ieee754_pow+0x718>)
 8018eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ece:	f7e7 f9ed 	bl	80002ac <__adddf3>
 8018ed2:	4622      	mov	r2, r4
 8018ed4:	4606      	mov	r6, r0
 8018ed6:	460f      	mov	r7, r1
 8018ed8:	462b      	mov	r3, r5
 8018eda:	4620      	mov	r0, r4
 8018edc:	4629      	mov	r1, r5
 8018ede:	f7e7 fb9b 	bl	8000618 <__aeabi_dmul>
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	460b      	mov	r3, r1
 8018ee6:	4630      	mov	r0, r6
 8018ee8:	4639      	mov	r1, r7
 8018eea:	f7e7 fb95 	bl	8000618 <__aeabi_dmul>
 8018eee:	4642      	mov	r2, r8
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	460d      	mov	r5, r1
 8018ef4:	464b      	mov	r3, r9
 8018ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018efa:	f7e7 f9d7 	bl	80002ac <__adddf3>
 8018efe:	ec53 2b18 	vmov	r2, r3, d8
 8018f02:	f7e7 fb89 	bl	8000618 <__aeabi_dmul>
 8018f06:	4622      	mov	r2, r4
 8018f08:	462b      	mov	r3, r5
 8018f0a:	f7e7 f9cf 	bl	80002ac <__adddf3>
 8018f0e:	4642      	mov	r2, r8
 8018f10:	4682      	mov	sl, r0
 8018f12:	468b      	mov	fp, r1
 8018f14:	464b      	mov	r3, r9
 8018f16:	4640      	mov	r0, r8
 8018f18:	4649      	mov	r1, r9
 8018f1a:	f7e7 fb7d 	bl	8000618 <__aeabi_dmul>
 8018f1e:	4b6c      	ldr	r3, [pc, #432]	; (80190d0 <__ieee754_pow+0x758>)
 8018f20:	2200      	movs	r2, #0
 8018f22:	4606      	mov	r6, r0
 8018f24:	460f      	mov	r7, r1
 8018f26:	f7e7 f9c1 	bl	80002ac <__adddf3>
 8018f2a:	4652      	mov	r2, sl
 8018f2c:	465b      	mov	r3, fp
 8018f2e:	f7e7 f9bd 	bl	80002ac <__adddf3>
 8018f32:	9c04      	ldr	r4, [sp, #16]
 8018f34:	460d      	mov	r5, r1
 8018f36:	4622      	mov	r2, r4
 8018f38:	460b      	mov	r3, r1
 8018f3a:	4640      	mov	r0, r8
 8018f3c:	4649      	mov	r1, r9
 8018f3e:	f7e7 fb6b 	bl	8000618 <__aeabi_dmul>
 8018f42:	4b63      	ldr	r3, [pc, #396]	; (80190d0 <__ieee754_pow+0x758>)
 8018f44:	4680      	mov	r8, r0
 8018f46:	4689      	mov	r9, r1
 8018f48:	2200      	movs	r2, #0
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	4629      	mov	r1, r5
 8018f4e:	f7e7 f9ab 	bl	80002a8 <__aeabi_dsub>
 8018f52:	4632      	mov	r2, r6
 8018f54:	463b      	mov	r3, r7
 8018f56:	f7e7 f9a7 	bl	80002a8 <__aeabi_dsub>
 8018f5a:	4602      	mov	r2, r0
 8018f5c:	460b      	mov	r3, r1
 8018f5e:	4650      	mov	r0, sl
 8018f60:	4659      	mov	r1, fp
 8018f62:	f7e7 f9a1 	bl	80002a8 <__aeabi_dsub>
 8018f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018f6a:	f7e7 fb55 	bl	8000618 <__aeabi_dmul>
 8018f6e:	4622      	mov	r2, r4
 8018f70:	4606      	mov	r6, r0
 8018f72:	460f      	mov	r7, r1
 8018f74:	462b      	mov	r3, r5
 8018f76:	ec51 0b18 	vmov	r0, r1, d8
 8018f7a:	f7e7 fb4d 	bl	8000618 <__aeabi_dmul>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	460b      	mov	r3, r1
 8018f82:	4630      	mov	r0, r6
 8018f84:	4639      	mov	r1, r7
 8018f86:	f7e7 f991 	bl	80002ac <__adddf3>
 8018f8a:	4606      	mov	r6, r0
 8018f8c:	460f      	mov	r7, r1
 8018f8e:	4602      	mov	r2, r0
 8018f90:	460b      	mov	r3, r1
 8018f92:	4640      	mov	r0, r8
 8018f94:	4649      	mov	r1, r9
 8018f96:	f7e7 f989 	bl	80002ac <__adddf3>
 8018f9a:	9c04      	ldr	r4, [sp, #16]
 8018f9c:	a33e      	add	r3, pc, #248	; (adr r3, 8019098 <__ieee754_pow+0x720>)
 8018f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	460d      	mov	r5, r1
 8018fa6:	f7e7 fb37 	bl	8000618 <__aeabi_dmul>
 8018faa:	4642      	mov	r2, r8
 8018fac:	ec41 0b18 	vmov	d8, r0, r1
 8018fb0:	464b      	mov	r3, r9
 8018fb2:	4620      	mov	r0, r4
 8018fb4:	4629      	mov	r1, r5
 8018fb6:	f7e7 f977 	bl	80002a8 <__aeabi_dsub>
 8018fba:	4602      	mov	r2, r0
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	4639      	mov	r1, r7
 8018fc2:	f7e7 f971 	bl	80002a8 <__aeabi_dsub>
 8018fc6:	a336      	add	r3, pc, #216	; (adr r3, 80190a0 <__ieee754_pow+0x728>)
 8018fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fcc:	f7e7 fb24 	bl	8000618 <__aeabi_dmul>
 8018fd0:	a335      	add	r3, pc, #212	; (adr r3, 80190a8 <__ieee754_pow+0x730>)
 8018fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd6:	4606      	mov	r6, r0
 8018fd8:	460f      	mov	r7, r1
 8018fda:	4620      	mov	r0, r4
 8018fdc:	4629      	mov	r1, r5
 8018fde:	f7e7 fb1b 	bl	8000618 <__aeabi_dmul>
 8018fe2:	4602      	mov	r2, r0
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	4630      	mov	r0, r6
 8018fe8:	4639      	mov	r1, r7
 8018fea:	f7e7 f95f 	bl	80002ac <__adddf3>
 8018fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ff0:	4b38      	ldr	r3, [pc, #224]	; (80190d4 <__ieee754_pow+0x75c>)
 8018ff2:	4413      	add	r3, r2
 8018ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ff8:	f7e7 f958 	bl	80002ac <__adddf3>
 8018ffc:	4682      	mov	sl, r0
 8018ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019000:	468b      	mov	fp, r1
 8019002:	f7e7 fa9f 	bl	8000544 <__aeabi_i2d>
 8019006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019008:	4b33      	ldr	r3, [pc, #204]	; (80190d8 <__ieee754_pow+0x760>)
 801900a:	4413      	add	r3, r2
 801900c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019010:	4606      	mov	r6, r0
 8019012:	460f      	mov	r7, r1
 8019014:	4652      	mov	r2, sl
 8019016:	465b      	mov	r3, fp
 8019018:	ec51 0b18 	vmov	r0, r1, d8
 801901c:	f7e7 f946 	bl	80002ac <__adddf3>
 8019020:	4642      	mov	r2, r8
 8019022:	464b      	mov	r3, r9
 8019024:	f7e7 f942 	bl	80002ac <__adddf3>
 8019028:	4632      	mov	r2, r6
 801902a:	463b      	mov	r3, r7
 801902c:	f7e7 f93e 	bl	80002ac <__adddf3>
 8019030:	9c04      	ldr	r4, [sp, #16]
 8019032:	4632      	mov	r2, r6
 8019034:	463b      	mov	r3, r7
 8019036:	4620      	mov	r0, r4
 8019038:	460d      	mov	r5, r1
 801903a:	f7e7 f935 	bl	80002a8 <__aeabi_dsub>
 801903e:	4642      	mov	r2, r8
 8019040:	464b      	mov	r3, r9
 8019042:	f7e7 f931 	bl	80002a8 <__aeabi_dsub>
 8019046:	ec53 2b18 	vmov	r2, r3, d8
 801904a:	f7e7 f92d 	bl	80002a8 <__aeabi_dsub>
 801904e:	4602      	mov	r2, r0
 8019050:	460b      	mov	r3, r1
 8019052:	4650      	mov	r0, sl
 8019054:	4659      	mov	r1, fp
 8019056:	e606      	b.n	8018c66 <__ieee754_pow+0x2ee>
 8019058:	2401      	movs	r4, #1
 801905a:	e6a0      	b.n	8018d9e <__ieee754_pow+0x426>
 801905c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80190b0 <__ieee754_pow+0x738>
 8019060:	e60d      	b.n	8018c7e <__ieee754_pow+0x306>
 8019062:	bf00      	nop
 8019064:	f3af 8000 	nop.w
 8019068:	4a454eef 	.word	0x4a454eef
 801906c:	3fca7e28 	.word	0x3fca7e28
 8019070:	93c9db65 	.word	0x93c9db65
 8019074:	3fcd864a 	.word	0x3fcd864a
 8019078:	a91d4101 	.word	0xa91d4101
 801907c:	3fd17460 	.word	0x3fd17460
 8019080:	518f264d 	.word	0x518f264d
 8019084:	3fd55555 	.word	0x3fd55555
 8019088:	db6fabff 	.word	0xdb6fabff
 801908c:	3fdb6db6 	.word	0x3fdb6db6
 8019090:	33333303 	.word	0x33333303
 8019094:	3fe33333 	.word	0x3fe33333
 8019098:	e0000000 	.word	0xe0000000
 801909c:	3feec709 	.word	0x3feec709
 80190a0:	dc3a03fd 	.word	0xdc3a03fd
 80190a4:	3feec709 	.word	0x3feec709
 80190a8:	145b01f5 	.word	0x145b01f5
 80190ac:	be3e2fe0 	.word	0xbe3e2fe0
 80190b0:	00000000 	.word	0x00000000
 80190b4:	3ff00000 	.word	0x3ff00000
 80190b8:	7ff00000 	.word	0x7ff00000
 80190bc:	43400000 	.word	0x43400000
 80190c0:	0003988e 	.word	0x0003988e
 80190c4:	000bb679 	.word	0x000bb679
 80190c8:	080209a0 	.word	0x080209a0
 80190cc:	3ff00000 	.word	0x3ff00000
 80190d0:	40080000 	.word	0x40080000
 80190d4:	080209c0 	.word	0x080209c0
 80190d8:	080209b0 	.word	0x080209b0
 80190dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80193b4 <__ieee754_pow+0xa3c>)
 80190de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e2:	4640      	mov	r0, r8
 80190e4:	4649      	mov	r1, r9
 80190e6:	f7e7 f8e1 	bl	80002ac <__adddf3>
 80190ea:	4622      	mov	r2, r4
 80190ec:	ec41 0b1a 	vmov	d10, r0, r1
 80190f0:	462b      	mov	r3, r5
 80190f2:	4630      	mov	r0, r6
 80190f4:	4639      	mov	r1, r7
 80190f6:	f7e7 f8d7 	bl	80002a8 <__aeabi_dsub>
 80190fa:	4602      	mov	r2, r0
 80190fc:	460b      	mov	r3, r1
 80190fe:	ec51 0b1a 	vmov	r0, r1, d10
 8019102:	f7e7 fd19 	bl	8000b38 <__aeabi_dcmpgt>
 8019106:	2800      	cmp	r0, #0
 8019108:	f47f adf8 	bne.w	8018cfc <__ieee754_pow+0x384>
 801910c:	4aa4      	ldr	r2, [pc, #656]	; (80193a0 <__ieee754_pow+0xa28>)
 801910e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019112:	4293      	cmp	r3, r2
 8019114:	f340 810b 	ble.w	801932e <__ieee754_pow+0x9b6>
 8019118:	151b      	asrs	r3, r3, #20
 801911a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801911e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019122:	fa4a f303 	asr.w	r3, sl, r3
 8019126:	445b      	add	r3, fp
 8019128:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801912c:	4e9d      	ldr	r6, [pc, #628]	; (80193a4 <__ieee754_pow+0xa2c>)
 801912e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019132:	4116      	asrs	r6, r2
 8019134:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019138:	2000      	movs	r0, #0
 801913a:	ea23 0106 	bic.w	r1, r3, r6
 801913e:	f1c2 0214 	rsb	r2, r2, #20
 8019142:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019146:	fa4a fa02 	asr.w	sl, sl, r2
 801914a:	f1bb 0f00 	cmp.w	fp, #0
 801914e:	4602      	mov	r2, r0
 8019150:	460b      	mov	r3, r1
 8019152:	4620      	mov	r0, r4
 8019154:	4629      	mov	r1, r5
 8019156:	bfb8      	it	lt
 8019158:	f1ca 0a00 	rsblt	sl, sl, #0
 801915c:	f7e7 f8a4 	bl	80002a8 <__aeabi_dsub>
 8019160:	ec41 0b19 	vmov	d9, r0, r1
 8019164:	4642      	mov	r2, r8
 8019166:	464b      	mov	r3, r9
 8019168:	ec51 0b19 	vmov	r0, r1, d9
 801916c:	f7e7 f89e 	bl	80002ac <__adddf3>
 8019170:	2400      	movs	r4, #0
 8019172:	a379      	add	r3, pc, #484	; (adr r3, 8019358 <__ieee754_pow+0x9e0>)
 8019174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019178:	4620      	mov	r0, r4
 801917a:	460d      	mov	r5, r1
 801917c:	f7e7 fa4c 	bl	8000618 <__aeabi_dmul>
 8019180:	ec53 2b19 	vmov	r2, r3, d9
 8019184:	4606      	mov	r6, r0
 8019186:	460f      	mov	r7, r1
 8019188:	4620      	mov	r0, r4
 801918a:	4629      	mov	r1, r5
 801918c:	f7e7 f88c 	bl	80002a8 <__aeabi_dsub>
 8019190:	4602      	mov	r2, r0
 8019192:	460b      	mov	r3, r1
 8019194:	4640      	mov	r0, r8
 8019196:	4649      	mov	r1, r9
 8019198:	f7e7 f886 	bl	80002a8 <__aeabi_dsub>
 801919c:	a370      	add	r3, pc, #448	; (adr r3, 8019360 <__ieee754_pow+0x9e8>)
 801919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a2:	f7e7 fa39 	bl	8000618 <__aeabi_dmul>
 80191a6:	a370      	add	r3, pc, #448	; (adr r3, 8019368 <__ieee754_pow+0x9f0>)
 80191a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ac:	4680      	mov	r8, r0
 80191ae:	4689      	mov	r9, r1
 80191b0:	4620      	mov	r0, r4
 80191b2:	4629      	mov	r1, r5
 80191b4:	f7e7 fa30 	bl	8000618 <__aeabi_dmul>
 80191b8:	4602      	mov	r2, r0
 80191ba:	460b      	mov	r3, r1
 80191bc:	4640      	mov	r0, r8
 80191be:	4649      	mov	r1, r9
 80191c0:	f7e7 f874 	bl	80002ac <__adddf3>
 80191c4:	4604      	mov	r4, r0
 80191c6:	460d      	mov	r5, r1
 80191c8:	4602      	mov	r2, r0
 80191ca:	460b      	mov	r3, r1
 80191cc:	4630      	mov	r0, r6
 80191ce:	4639      	mov	r1, r7
 80191d0:	f7e7 f86c 	bl	80002ac <__adddf3>
 80191d4:	4632      	mov	r2, r6
 80191d6:	463b      	mov	r3, r7
 80191d8:	4680      	mov	r8, r0
 80191da:	4689      	mov	r9, r1
 80191dc:	f7e7 f864 	bl	80002a8 <__aeabi_dsub>
 80191e0:	4602      	mov	r2, r0
 80191e2:	460b      	mov	r3, r1
 80191e4:	4620      	mov	r0, r4
 80191e6:	4629      	mov	r1, r5
 80191e8:	f7e7 f85e 	bl	80002a8 <__aeabi_dsub>
 80191ec:	4642      	mov	r2, r8
 80191ee:	4606      	mov	r6, r0
 80191f0:	460f      	mov	r7, r1
 80191f2:	464b      	mov	r3, r9
 80191f4:	4640      	mov	r0, r8
 80191f6:	4649      	mov	r1, r9
 80191f8:	f7e7 fa0e 	bl	8000618 <__aeabi_dmul>
 80191fc:	a35c      	add	r3, pc, #368	; (adr r3, 8019370 <__ieee754_pow+0x9f8>)
 80191fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019202:	4604      	mov	r4, r0
 8019204:	460d      	mov	r5, r1
 8019206:	f7e7 fa07 	bl	8000618 <__aeabi_dmul>
 801920a:	a35b      	add	r3, pc, #364	; (adr r3, 8019378 <__ieee754_pow+0xa00>)
 801920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019210:	f7e7 f84a 	bl	80002a8 <__aeabi_dsub>
 8019214:	4622      	mov	r2, r4
 8019216:	462b      	mov	r3, r5
 8019218:	f7e7 f9fe 	bl	8000618 <__aeabi_dmul>
 801921c:	a358      	add	r3, pc, #352	; (adr r3, 8019380 <__ieee754_pow+0xa08>)
 801921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019222:	f7e7 f843 	bl	80002ac <__adddf3>
 8019226:	4622      	mov	r2, r4
 8019228:	462b      	mov	r3, r5
 801922a:	f7e7 f9f5 	bl	8000618 <__aeabi_dmul>
 801922e:	a356      	add	r3, pc, #344	; (adr r3, 8019388 <__ieee754_pow+0xa10>)
 8019230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019234:	f7e7 f838 	bl	80002a8 <__aeabi_dsub>
 8019238:	4622      	mov	r2, r4
 801923a:	462b      	mov	r3, r5
 801923c:	f7e7 f9ec 	bl	8000618 <__aeabi_dmul>
 8019240:	a353      	add	r3, pc, #332	; (adr r3, 8019390 <__ieee754_pow+0xa18>)
 8019242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019246:	f7e7 f831 	bl	80002ac <__adddf3>
 801924a:	4622      	mov	r2, r4
 801924c:	462b      	mov	r3, r5
 801924e:	f7e7 f9e3 	bl	8000618 <__aeabi_dmul>
 8019252:	4602      	mov	r2, r0
 8019254:	460b      	mov	r3, r1
 8019256:	4640      	mov	r0, r8
 8019258:	4649      	mov	r1, r9
 801925a:	f7e7 f825 	bl	80002a8 <__aeabi_dsub>
 801925e:	4604      	mov	r4, r0
 8019260:	460d      	mov	r5, r1
 8019262:	4602      	mov	r2, r0
 8019264:	460b      	mov	r3, r1
 8019266:	4640      	mov	r0, r8
 8019268:	4649      	mov	r1, r9
 801926a:	f7e7 f9d5 	bl	8000618 <__aeabi_dmul>
 801926e:	2200      	movs	r2, #0
 8019270:	ec41 0b19 	vmov	d9, r0, r1
 8019274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019278:	4620      	mov	r0, r4
 801927a:	4629      	mov	r1, r5
 801927c:	f7e7 f814 	bl	80002a8 <__aeabi_dsub>
 8019280:	4602      	mov	r2, r0
 8019282:	460b      	mov	r3, r1
 8019284:	ec51 0b19 	vmov	r0, r1, d9
 8019288:	f7e7 faf0 	bl	800086c <__aeabi_ddiv>
 801928c:	4632      	mov	r2, r6
 801928e:	4604      	mov	r4, r0
 8019290:	460d      	mov	r5, r1
 8019292:	463b      	mov	r3, r7
 8019294:	4640      	mov	r0, r8
 8019296:	4649      	mov	r1, r9
 8019298:	f7e7 f9be 	bl	8000618 <__aeabi_dmul>
 801929c:	4632      	mov	r2, r6
 801929e:	463b      	mov	r3, r7
 80192a0:	f7e7 f804 	bl	80002ac <__adddf3>
 80192a4:	4602      	mov	r2, r0
 80192a6:	460b      	mov	r3, r1
 80192a8:	4620      	mov	r0, r4
 80192aa:	4629      	mov	r1, r5
 80192ac:	f7e6 fffc 	bl	80002a8 <__aeabi_dsub>
 80192b0:	4642      	mov	r2, r8
 80192b2:	464b      	mov	r3, r9
 80192b4:	f7e6 fff8 	bl	80002a8 <__aeabi_dsub>
 80192b8:	460b      	mov	r3, r1
 80192ba:	4602      	mov	r2, r0
 80192bc:	493a      	ldr	r1, [pc, #232]	; (80193a8 <__ieee754_pow+0xa30>)
 80192be:	2000      	movs	r0, #0
 80192c0:	f7e6 fff2 	bl	80002a8 <__aeabi_dsub>
 80192c4:	e9cd 0100 	strd	r0, r1, [sp]
 80192c8:	9b01      	ldr	r3, [sp, #4]
 80192ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80192ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80192d2:	da2f      	bge.n	8019334 <__ieee754_pow+0x9bc>
 80192d4:	4650      	mov	r0, sl
 80192d6:	ed9d 0b00 	vldr	d0, [sp]
 80192da:	f000 f9cd 	bl	8019678 <scalbn>
 80192de:	ec51 0b10 	vmov	r0, r1, d0
 80192e2:	ec53 2b18 	vmov	r2, r3, d8
 80192e6:	f7ff bbe0 	b.w	8018aaa <__ieee754_pow+0x132>
 80192ea:	4b30      	ldr	r3, [pc, #192]	; (80193ac <__ieee754_pow+0xa34>)
 80192ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80192f0:	429e      	cmp	r6, r3
 80192f2:	f77f af0b 	ble.w	801910c <__ieee754_pow+0x794>
 80192f6:	4b2e      	ldr	r3, [pc, #184]	; (80193b0 <__ieee754_pow+0xa38>)
 80192f8:	440b      	add	r3, r1
 80192fa:	4303      	orrs	r3, r0
 80192fc:	d00b      	beq.n	8019316 <__ieee754_pow+0x99e>
 80192fe:	a326      	add	r3, pc, #152	; (adr r3, 8019398 <__ieee754_pow+0xa20>)
 8019300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019304:	ec51 0b18 	vmov	r0, r1, d8
 8019308:	f7e7 f986 	bl	8000618 <__aeabi_dmul>
 801930c:	a322      	add	r3, pc, #136	; (adr r3, 8019398 <__ieee754_pow+0xa20>)
 801930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019312:	f7ff bbca 	b.w	8018aaa <__ieee754_pow+0x132>
 8019316:	4622      	mov	r2, r4
 8019318:	462b      	mov	r3, r5
 801931a:	f7e6 ffc5 	bl	80002a8 <__aeabi_dsub>
 801931e:	4642      	mov	r2, r8
 8019320:	464b      	mov	r3, r9
 8019322:	f7e7 fbff 	bl	8000b24 <__aeabi_dcmpge>
 8019326:	2800      	cmp	r0, #0
 8019328:	f43f aef0 	beq.w	801910c <__ieee754_pow+0x794>
 801932c:	e7e7      	b.n	80192fe <__ieee754_pow+0x986>
 801932e:	f04f 0a00 	mov.w	sl, #0
 8019332:	e717      	b.n	8019164 <__ieee754_pow+0x7ec>
 8019334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019338:	4619      	mov	r1, r3
 801933a:	e7d2      	b.n	80192e2 <__ieee754_pow+0x96a>
 801933c:	491a      	ldr	r1, [pc, #104]	; (80193a8 <__ieee754_pow+0xa30>)
 801933e:	2000      	movs	r0, #0
 8019340:	f7ff bb9e 	b.w	8018a80 <__ieee754_pow+0x108>
 8019344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019348:	f7ff bb9a 	b.w	8018a80 <__ieee754_pow+0x108>
 801934c:	9000      	str	r0, [sp, #0]
 801934e:	f7ff bb76 	b.w	8018a3e <__ieee754_pow+0xc6>
 8019352:	2100      	movs	r1, #0
 8019354:	f7ff bb60 	b.w	8018a18 <__ieee754_pow+0xa0>
 8019358:	00000000 	.word	0x00000000
 801935c:	3fe62e43 	.word	0x3fe62e43
 8019360:	fefa39ef 	.word	0xfefa39ef
 8019364:	3fe62e42 	.word	0x3fe62e42
 8019368:	0ca86c39 	.word	0x0ca86c39
 801936c:	be205c61 	.word	0xbe205c61
 8019370:	72bea4d0 	.word	0x72bea4d0
 8019374:	3e663769 	.word	0x3e663769
 8019378:	c5d26bf1 	.word	0xc5d26bf1
 801937c:	3ebbbd41 	.word	0x3ebbbd41
 8019380:	af25de2c 	.word	0xaf25de2c
 8019384:	3f11566a 	.word	0x3f11566a
 8019388:	16bebd93 	.word	0x16bebd93
 801938c:	3f66c16c 	.word	0x3f66c16c
 8019390:	5555553e 	.word	0x5555553e
 8019394:	3fc55555 	.word	0x3fc55555
 8019398:	c2f8f359 	.word	0xc2f8f359
 801939c:	01a56e1f 	.word	0x01a56e1f
 80193a0:	3fe00000 	.word	0x3fe00000
 80193a4:	000fffff 	.word	0x000fffff
 80193a8:	3ff00000 	.word	0x3ff00000
 80193ac:	4090cbff 	.word	0x4090cbff
 80193b0:	3f6f3400 	.word	0x3f6f3400
 80193b4:	652b82fe 	.word	0x652b82fe
 80193b8:	3c971547 	.word	0x3c971547

080193bc <__ieee754_sqrt>:
 80193bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193c0:	ec55 4b10 	vmov	r4, r5, d0
 80193c4:	4e56      	ldr	r6, [pc, #344]	; (8019520 <__ieee754_sqrt+0x164>)
 80193c6:	43ae      	bics	r6, r5
 80193c8:	ee10 0a10 	vmov	r0, s0
 80193cc:	ee10 3a10 	vmov	r3, s0
 80193d0:	4629      	mov	r1, r5
 80193d2:	462a      	mov	r2, r5
 80193d4:	d110      	bne.n	80193f8 <__ieee754_sqrt+0x3c>
 80193d6:	ee10 2a10 	vmov	r2, s0
 80193da:	462b      	mov	r3, r5
 80193dc:	f7e7 f91c 	bl	8000618 <__aeabi_dmul>
 80193e0:	4602      	mov	r2, r0
 80193e2:	460b      	mov	r3, r1
 80193e4:	4620      	mov	r0, r4
 80193e6:	4629      	mov	r1, r5
 80193e8:	f7e6 ff60 	bl	80002ac <__adddf3>
 80193ec:	4604      	mov	r4, r0
 80193ee:	460d      	mov	r5, r1
 80193f0:	ec45 4b10 	vmov	d0, r4, r5
 80193f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193f8:	2d00      	cmp	r5, #0
 80193fa:	dc10      	bgt.n	801941e <__ieee754_sqrt+0x62>
 80193fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019400:	4330      	orrs	r0, r6
 8019402:	d0f5      	beq.n	80193f0 <__ieee754_sqrt+0x34>
 8019404:	b15d      	cbz	r5, 801941e <__ieee754_sqrt+0x62>
 8019406:	ee10 2a10 	vmov	r2, s0
 801940a:	462b      	mov	r3, r5
 801940c:	ee10 0a10 	vmov	r0, s0
 8019410:	f7e6 ff4a 	bl	80002a8 <__aeabi_dsub>
 8019414:	4602      	mov	r2, r0
 8019416:	460b      	mov	r3, r1
 8019418:	f7e7 fa28 	bl	800086c <__aeabi_ddiv>
 801941c:	e7e6      	b.n	80193ec <__ieee754_sqrt+0x30>
 801941e:	1509      	asrs	r1, r1, #20
 8019420:	d076      	beq.n	8019510 <__ieee754_sqrt+0x154>
 8019422:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019426:	07ce      	lsls	r6, r1, #31
 8019428:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801942c:	bf5e      	ittt	pl
 801942e:	0fda      	lsrpl	r2, r3, #31
 8019430:	005b      	lslpl	r3, r3, #1
 8019432:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019436:	0fda      	lsrs	r2, r3, #31
 8019438:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801943c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019440:	2000      	movs	r0, #0
 8019442:	106d      	asrs	r5, r5, #1
 8019444:	005b      	lsls	r3, r3, #1
 8019446:	f04f 0e16 	mov.w	lr, #22
 801944a:	4684      	mov	ip, r0
 801944c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019450:	eb0c 0401 	add.w	r4, ip, r1
 8019454:	4294      	cmp	r4, r2
 8019456:	bfde      	ittt	le
 8019458:	1b12      	suble	r2, r2, r4
 801945a:	eb04 0c01 	addle.w	ip, r4, r1
 801945e:	1840      	addle	r0, r0, r1
 8019460:	0052      	lsls	r2, r2, #1
 8019462:	f1be 0e01 	subs.w	lr, lr, #1
 8019466:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801946a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801946e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019472:	d1ed      	bne.n	8019450 <__ieee754_sqrt+0x94>
 8019474:	4671      	mov	r1, lr
 8019476:	2720      	movs	r7, #32
 8019478:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801947c:	4562      	cmp	r2, ip
 801947e:	eb04 060e 	add.w	r6, r4, lr
 8019482:	dc02      	bgt.n	801948a <__ieee754_sqrt+0xce>
 8019484:	d113      	bne.n	80194ae <__ieee754_sqrt+0xf2>
 8019486:	429e      	cmp	r6, r3
 8019488:	d811      	bhi.n	80194ae <__ieee754_sqrt+0xf2>
 801948a:	2e00      	cmp	r6, #0
 801948c:	eb06 0e04 	add.w	lr, r6, r4
 8019490:	da43      	bge.n	801951a <__ieee754_sqrt+0x15e>
 8019492:	f1be 0f00 	cmp.w	lr, #0
 8019496:	db40      	blt.n	801951a <__ieee754_sqrt+0x15e>
 8019498:	f10c 0801 	add.w	r8, ip, #1
 801949c:	eba2 020c 	sub.w	r2, r2, ip
 80194a0:	429e      	cmp	r6, r3
 80194a2:	bf88      	it	hi
 80194a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80194a8:	1b9b      	subs	r3, r3, r6
 80194aa:	4421      	add	r1, r4
 80194ac:	46c4      	mov	ip, r8
 80194ae:	0052      	lsls	r2, r2, #1
 80194b0:	3f01      	subs	r7, #1
 80194b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80194b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80194ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194be:	d1dd      	bne.n	801947c <__ieee754_sqrt+0xc0>
 80194c0:	4313      	orrs	r3, r2
 80194c2:	d006      	beq.n	80194d2 <__ieee754_sqrt+0x116>
 80194c4:	1c4c      	adds	r4, r1, #1
 80194c6:	bf13      	iteet	ne
 80194c8:	3101      	addne	r1, #1
 80194ca:	3001      	addeq	r0, #1
 80194cc:	4639      	moveq	r1, r7
 80194ce:	f021 0101 	bicne.w	r1, r1, #1
 80194d2:	1043      	asrs	r3, r0, #1
 80194d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80194d8:	0849      	lsrs	r1, r1, #1
 80194da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80194de:	07c2      	lsls	r2, r0, #31
 80194e0:	bf48      	it	mi
 80194e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80194e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80194ea:	460c      	mov	r4, r1
 80194ec:	463d      	mov	r5, r7
 80194ee:	e77f      	b.n	80193f0 <__ieee754_sqrt+0x34>
 80194f0:	0ada      	lsrs	r2, r3, #11
 80194f2:	3815      	subs	r0, #21
 80194f4:	055b      	lsls	r3, r3, #21
 80194f6:	2a00      	cmp	r2, #0
 80194f8:	d0fa      	beq.n	80194f0 <__ieee754_sqrt+0x134>
 80194fa:	02d7      	lsls	r7, r2, #11
 80194fc:	d50a      	bpl.n	8019514 <__ieee754_sqrt+0x158>
 80194fe:	f1c1 0420 	rsb	r4, r1, #32
 8019502:	fa23 f404 	lsr.w	r4, r3, r4
 8019506:	1e4d      	subs	r5, r1, #1
 8019508:	408b      	lsls	r3, r1
 801950a:	4322      	orrs	r2, r4
 801950c:	1b41      	subs	r1, r0, r5
 801950e:	e788      	b.n	8019422 <__ieee754_sqrt+0x66>
 8019510:	4608      	mov	r0, r1
 8019512:	e7f0      	b.n	80194f6 <__ieee754_sqrt+0x13a>
 8019514:	0052      	lsls	r2, r2, #1
 8019516:	3101      	adds	r1, #1
 8019518:	e7ef      	b.n	80194fa <__ieee754_sqrt+0x13e>
 801951a:	46e0      	mov	r8, ip
 801951c:	e7be      	b.n	801949c <__ieee754_sqrt+0xe0>
 801951e:	bf00      	nop
 8019520:	7ff00000 	.word	0x7ff00000

08019524 <fabs>:
 8019524:	ec51 0b10 	vmov	r0, r1, d0
 8019528:	ee10 2a10 	vmov	r2, s0
 801952c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019530:	ec43 2b10 	vmov	d0, r2, r3
 8019534:	4770      	bx	lr

08019536 <finite>:
 8019536:	b082      	sub	sp, #8
 8019538:	ed8d 0b00 	vstr	d0, [sp]
 801953c:	9801      	ldr	r0, [sp, #4]
 801953e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019542:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019546:	0fc0      	lsrs	r0, r0, #31
 8019548:	b002      	add	sp, #8
 801954a:	4770      	bx	lr
 801954c:	0000      	movs	r0, r0
	...

08019550 <nan>:
 8019550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019558 <nan+0x8>
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	00000000 	.word	0x00000000
 801955c:	7ff80000 	.word	0x7ff80000

08019560 <rint>:
 8019560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019562:	ec51 0b10 	vmov	r0, r1, d0
 8019566:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801956a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801956e:	2e13      	cmp	r6, #19
 8019570:	ee10 4a10 	vmov	r4, s0
 8019574:	460b      	mov	r3, r1
 8019576:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801957a:	dc58      	bgt.n	801962e <rint+0xce>
 801957c:	2e00      	cmp	r6, #0
 801957e:	da2b      	bge.n	80195d8 <rint+0x78>
 8019580:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019584:	4302      	orrs	r2, r0
 8019586:	d023      	beq.n	80195d0 <rint+0x70>
 8019588:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801958c:	4302      	orrs	r2, r0
 801958e:	4254      	negs	r4, r2
 8019590:	4314      	orrs	r4, r2
 8019592:	0c4b      	lsrs	r3, r1, #17
 8019594:	0b24      	lsrs	r4, r4, #12
 8019596:	045b      	lsls	r3, r3, #17
 8019598:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801959c:	ea44 0103 	orr.w	r1, r4, r3
 80195a0:	4b32      	ldr	r3, [pc, #200]	; (801966c <rint+0x10c>)
 80195a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80195a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80195aa:	4602      	mov	r2, r0
 80195ac:	460b      	mov	r3, r1
 80195ae:	4630      	mov	r0, r6
 80195b0:	4639      	mov	r1, r7
 80195b2:	f7e6 fe7b 	bl	80002ac <__adddf3>
 80195b6:	e9cd 0100 	strd	r0, r1, [sp]
 80195ba:	463b      	mov	r3, r7
 80195bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195c0:	4632      	mov	r2, r6
 80195c2:	f7e6 fe71 	bl	80002a8 <__aeabi_dsub>
 80195c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80195ce:	4639      	mov	r1, r7
 80195d0:	ec41 0b10 	vmov	d0, r0, r1
 80195d4:	b003      	add	sp, #12
 80195d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195d8:	4a25      	ldr	r2, [pc, #148]	; (8019670 <rint+0x110>)
 80195da:	4132      	asrs	r2, r6
 80195dc:	ea01 0702 	and.w	r7, r1, r2
 80195e0:	4307      	orrs	r7, r0
 80195e2:	d0f5      	beq.n	80195d0 <rint+0x70>
 80195e4:	0851      	lsrs	r1, r2, #1
 80195e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80195ea:	4314      	orrs	r4, r2
 80195ec:	d00c      	beq.n	8019608 <rint+0xa8>
 80195ee:	ea23 0201 	bic.w	r2, r3, r1
 80195f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80195f6:	2e13      	cmp	r6, #19
 80195f8:	fa43 f606 	asr.w	r6, r3, r6
 80195fc:	bf0c      	ite	eq
 80195fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019602:	2400      	movne	r4, #0
 8019604:	ea42 0306 	orr.w	r3, r2, r6
 8019608:	4918      	ldr	r1, [pc, #96]	; (801966c <rint+0x10c>)
 801960a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801960e:	4622      	mov	r2, r4
 8019610:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019614:	4620      	mov	r0, r4
 8019616:	4629      	mov	r1, r5
 8019618:	f7e6 fe48 	bl	80002ac <__adddf3>
 801961c:	e9cd 0100 	strd	r0, r1, [sp]
 8019620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019624:	4622      	mov	r2, r4
 8019626:	462b      	mov	r3, r5
 8019628:	f7e6 fe3e 	bl	80002a8 <__aeabi_dsub>
 801962c:	e7d0      	b.n	80195d0 <rint+0x70>
 801962e:	2e33      	cmp	r6, #51	; 0x33
 8019630:	dd07      	ble.n	8019642 <rint+0xe2>
 8019632:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019636:	d1cb      	bne.n	80195d0 <rint+0x70>
 8019638:	ee10 2a10 	vmov	r2, s0
 801963c:	f7e6 fe36 	bl	80002ac <__adddf3>
 8019640:	e7c6      	b.n	80195d0 <rint+0x70>
 8019642:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019646:	f04f 36ff 	mov.w	r6, #4294967295
 801964a:	40d6      	lsrs	r6, r2
 801964c:	4230      	tst	r0, r6
 801964e:	d0bf      	beq.n	80195d0 <rint+0x70>
 8019650:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019654:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8019658:	bf1f      	itttt	ne
 801965a:	ea24 0101 	bicne.w	r1, r4, r1
 801965e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019662:	fa44 f202 	asrne.w	r2, r4, r2
 8019666:	ea41 0402 	orrne.w	r4, r1, r2
 801966a:	e7cd      	b.n	8019608 <rint+0xa8>
 801966c:	080209d0 	.word	0x080209d0
 8019670:	000fffff 	.word	0x000fffff
 8019674:	00000000 	.word	0x00000000

08019678 <scalbn>:
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	ec55 4b10 	vmov	r4, r5, d0
 801967e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019682:	4606      	mov	r6, r0
 8019684:	462b      	mov	r3, r5
 8019686:	b99a      	cbnz	r2, 80196b0 <scalbn+0x38>
 8019688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801968c:	4323      	orrs	r3, r4
 801968e:	d036      	beq.n	80196fe <scalbn+0x86>
 8019690:	4b39      	ldr	r3, [pc, #228]	; (8019778 <scalbn+0x100>)
 8019692:	4629      	mov	r1, r5
 8019694:	ee10 0a10 	vmov	r0, s0
 8019698:	2200      	movs	r2, #0
 801969a:	f7e6 ffbd 	bl	8000618 <__aeabi_dmul>
 801969e:	4b37      	ldr	r3, [pc, #220]	; (801977c <scalbn+0x104>)
 80196a0:	429e      	cmp	r6, r3
 80196a2:	4604      	mov	r4, r0
 80196a4:	460d      	mov	r5, r1
 80196a6:	da10      	bge.n	80196ca <scalbn+0x52>
 80196a8:	a32b      	add	r3, pc, #172	; (adr r3, 8019758 <scalbn+0xe0>)
 80196aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ae:	e03a      	b.n	8019726 <scalbn+0xae>
 80196b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80196b4:	428a      	cmp	r2, r1
 80196b6:	d10c      	bne.n	80196d2 <scalbn+0x5a>
 80196b8:	ee10 2a10 	vmov	r2, s0
 80196bc:	4620      	mov	r0, r4
 80196be:	4629      	mov	r1, r5
 80196c0:	f7e6 fdf4 	bl	80002ac <__adddf3>
 80196c4:	4604      	mov	r4, r0
 80196c6:	460d      	mov	r5, r1
 80196c8:	e019      	b.n	80196fe <scalbn+0x86>
 80196ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80196ce:	460b      	mov	r3, r1
 80196d0:	3a36      	subs	r2, #54	; 0x36
 80196d2:	4432      	add	r2, r6
 80196d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80196d8:	428a      	cmp	r2, r1
 80196da:	dd08      	ble.n	80196ee <scalbn+0x76>
 80196dc:	2d00      	cmp	r5, #0
 80196de:	a120      	add	r1, pc, #128	; (adr r1, 8019760 <scalbn+0xe8>)
 80196e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196e4:	da1c      	bge.n	8019720 <scalbn+0xa8>
 80196e6:	a120      	add	r1, pc, #128	; (adr r1, 8019768 <scalbn+0xf0>)
 80196e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196ec:	e018      	b.n	8019720 <scalbn+0xa8>
 80196ee:	2a00      	cmp	r2, #0
 80196f0:	dd08      	ble.n	8019704 <scalbn+0x8c>
 80196f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80196f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80196fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80196fe:	ec45 4b10 	vmov	d0, r4, r5
 8019702:	bd70      	pop	{r4, r5, r6, pc}
 8019704:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019708:	da19      	bge.n	801973e <scalbn+0xc6>
 801970a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801970e:	429e      	cmp	r6, r3
 8019710:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019714:	dd0a      	ble.n	801972c <scalbn+0xb4>
 8019716:	a112      	add	r1, pc, #72	; (adr r1, 8019760 <scalbn+0xe8>)
 8019718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d1e2      	bne.n	80196e6 <scalbn+0x6e>
 8019720:	a30f      	add	r3, pc, #60	; (adr r3, 8019760 <scalbn+0xe8>)
 8019722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019726:	f7e6 ff77 	bl	8000618 <__aeabi_dmul>
 801972a:	e7cb      	b.n	80196c4 <scalbn+0x4c>
 801972c:	a10a      	add	r1, pc, #40	; (adr r1, 8019758 <scalbn+0xe0>)
 801972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d0b8      	beq.n	80196a8 <scalbn+0x30>
 8019736:	a10e      	add	r1, pc, #56	; (adr r1, 8019770 <scalbn+0xf8>)
 8019738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801973c:	e7b4      	b.n	80196a8 <scalbn+0x30>
 801973e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019742:	3236      	adds	r2, #54	; 0x36
 8019744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019748:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801974c:	4620      	mov	r0, r4
 801974e:	4b0c      	ldr	r3, [pc, #48]	; (8019780 <scalbn+0x108>)
 8019750:	2200      	movs	r2, #0
 8019752:	e7e8      	b.n	8019726 <scalbn+0xae>
 8019754:	f3af 8000 	nop.w
 8019758:	c2f8f359 	.word	0xc2f8f359
 801975c:	01a56e1f 	.word	0x01a56e1f
 8019760:	8800759c 	.word	0x8800759c
 8019764:	7e37e43c 	.word	0x7e37e43c
 8019768:	8800759c 	.word	0x8800759c
 801976c:	fe37e43c 	.word	0xfe37e43c
 8019770:	c2f8f359 	.word	0xc2f8f359
 8019774:	81a56e1f 	.word	0x81a56e1f
 8019778:	43500000 	.word	0x43500000
 801977c:	ffff3cb0 	.word	0xffff3cb0
 8019780:	3c900000 	.word	0x3c900000

08019784 <abort>:
 8019784:	b508      	push	{r3, lr}
 8019786:	2006      	movs	r0, #6
 8019788:	f001 f9ba 	bl	801ab00 <raise>
 801978c:	2001      	movs	r0, #1
 801978e:	f7e9 fd31 	bl	80031f4 <_exit>
	...

08019794 <__errno>:
 8019794:	4b01      	ldr	r3, [pc, #4]	; (801979c <__errno+0x8>)
 8019796:	6818      	ldr	r0, [r3, #0]
 8019798:	4770      	bx	lr
 801979a:	bf00      	nop
 801979c:	20000200 	.word	0x20000200

080197a0 <std>:
 80197a0:	2300      	movs	r3, #0
 80197a2:	b510      	push	{r4, lr}
 80197a4:	4604      	mov	r4, r0
 80197a6:	e9c0 3300 	strd	r3, r3, [r0]
 80197aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197ae:	6083      	str	r3, [r0, #8]
 80197b0:	8181      	strh	r1, [r0, #12]
 80197b2:	6643      	str	r3, [r0, #100]	; 0x64
 80197b4:	81c2      	strh	r2, [r0, #14]
 80197b6:	6183      	str	r3, [r0, #24]
 80197b8:	4619      	mov	r1, r3
 80197ba:	2208      	movs	r2, #8
 80197bc:	305c      	adds	r0, #92	; 0x5c
 80197be:	f000 f93d 	bl	8019a3c <memset>
 80197c2:	4b05      	ldr	r3, [pc, #20]	; (80197d8 <std+0x38>)
 80197c4:	6263      	str	r3, [r4, #36]	; 0x24
 80197c6:	4b05      	ldr	r3, [pc, #20]	; (80197dc <std+0x3c>)
 80197c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80197ca:	4b05      	ldr	r3, [pc, #20]	; (80197e0 <std+0x40>)
 80197cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80197ce:	4b05      	ldr	r3, [pc, #20]	; (80197e4 <std+0x44>)
 80197d0:	6224      	str	r4, [r4, #32]
 80197d2:	6323      	str	r3, [r4, #48]	; 0x30
 80197d4:	bd10      	pop	{r4, pc}
 80197d6:	bf00      	nop
 80197d8:	0801abd1 	.word	0x0801abd1
 80197dc:	0801abf7 	.word	0x0801abf7
 80197e0:	0801ac2f 	.word	0x0801ac2f
 80197e4:	0801ac53 	.word	0x0801ac53

080197e8 <_cleanup_r>:
 80197e8:	4901      	ldr	r1, [pc, #4]	; (80197f0 <_cleanup_r+0x8>)
 80197ea:	f000 b8af 	b.w	801994c <_fwalk_reent>
 80197ee:	bf00      	nop
 80197f0:	0801cb75 	.word	0x0801cb75

080197f4 <__sfmoreglue>:
 80197f4:	b570      	push	{r4, r5, r6, lr}
 80197f6:	1e4a      	subs	r2, r1, #1
 80197f8:	2568      	movs	r5, #104	; 0x68
 80197fa:	4355      	muls	r5, r2
 80197fc:	460e      	mov	r6, r1
 80197fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019802:	f000 f973 	bl	8019aec <_malloc_r>
 8019806:	4604      	mov	r4, r0
 8019808:	b140      	cbz	r0, 801981c <__sfmoreglue+0x28>
 801980a:	2100      	movs	r1, #0
 801980c:	e9c0 1600 	strd	r1, r6, [r0]
 8019810:	300c      	adds	r0, #12
 8019812:	60a0      	str	r0, [r4, #8]
 8019814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019818:	f000 f910 	bl	8019a3c <memset>
 801981c:	4620      	mov	r0, r4
 801981e:	bd70      	pop	{r4, r5, r6, pc}

08019820 <__sfp_lock_acquire>:
 8019820:	4801      	ldr	r0, [pc, #4]	; (8019828 <__sfp_lock_acquire+0x8>)
 8019822:	f000 b8d8 	b.w	80199d6 <__retarget_lock_acquire_recursive>
 8019826:	bf00      	nop
 8019828:	20008e58 	.word	0x20008e58

0801982c <__sfp_lock_release>:
 801982c:	4801      	ldr	r0, [pc, #4]	; (8019834 <__sfp_lock_release+0x8>)
 801982e:	f000 b8d3 	b.w	80199d8 <__retarget_lock_release_recursive>
 8019832:	bf00      	nop
 8019834:	20008e58 	.word	0x20008e58

08019838 <__sinit_lock_acquire>:
 8019838:	4801      	ldr	r0, [pc, #4]	; (8019840 <__sinit_lock_acquire+0x8>)
 801983a:	f000 b8cc 	b.w	80199d6 <__retarget_lock_acquire_recursive>
 801983e:	bf00      	nop
 8019840:	20008e53 	.word	0x20008e53

08019844 <__sinit_lock_release>:
 8019844:	4801      	ldr	r0, [pc, #4]	; (801984c <__sinit_lock_release+0x8>)
 8019846:	f000 b8c7 	b.w	80199d8 <__retarget_lock_release_recursive>
 801984a:	bf00      	nop
 801984c:	20008e53 	.word	0x20008e53

08019850 <__sinit>:
 8019850:	b510      	push	{r4, lr}
 8019852:	4604      	mov	r4, r0
 8019854:	f7ff fff0 	bl	8019838 <__sinit_lock_acquire>
 8019858:	69a3      	ldr	r3, [r4, #24]
 801985a:	b11b      	cbz	r3, 8019864 <__sinit+0x14>
 801985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019860:	f7ff bff0 	b.w	8019844 <__sinit_lock_release>
 8019864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019868:	6523      	str	r3, [r4, #80]	; 0x50
 801986a:	4b13      	ldr	r3, [pc, #76]	; (80198b8 <__sinit+0x68>)
 801986c:	4a13      	ldr	r2, [pc, #76]	; (80198bc <__sinit+0x6c>)
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	62a2      	str	r2, [r4, #40]	; 0x28
 8019872:	42a3      	cmp	r3, r4
 8019874:	bf04      	itt	eq
 8019876:	2301      	moveq	r3, #1
 8019878:	61a3      	streq	r3, [r4, #24]
 801987a:	4620      	mov	r0, r4
 801987c:	f000 f820 	bl	80198c0 <__sfp>
 8019880:	6060      	str	r0, [r4, #4]
 8019882:	4620      	mov	r0, r4
 8019884:	f000 f81c 	bl	80198c0 <__sfp>
 8019888:	60a0      	str	r0, [r4, #8]
 801988a:	4620      	mov	r0, r4
 801988c:	f000 f818 	bl	80198c0 <__sfp>
 8019890:	2200      	movs	r2, #0
 8019892:	60e0      	str	r0, [r4, #12]
 8019894:	2104      	movs	r1, #4
 8019896:	6860      	ldr	r0, [r4, #4]
 8019898:	f7ff ff82 	bl	80197a0 <std>
 801989c:	68a0      	ldr	r0, [r4, #8]
 801989e:	2201      	movs	r2, #1
 80198a0:	2109      	movs	r1, #9
 80198a2:	f7ff ff7d 	bl	80197a0 <std>
 80198a6:	68e0      	ldr	r0, [r4, #12]
 80198a8:	2202      	movs	r2, #2
 80198aa:	2112      	movs	r1, #18
 80198ac:	f7ff ff78 	bl	80197a0 <std>
 80198b0:	2301      	movs	r3, #1
 80198b2:	61a3      	str	r3, [r4, #24]
 80198b4:	e7d2      	b.n	801985c <__sinit+0xc>
 80198b6:	bf00      	nop
 80198b8:	08020b44 	.word	0x08020b44
 80198bc:	080197e9 	.word	0x080197e9

080198c0 <__sfp>:
 80198c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198c2:	4607      	mov	r7, r0
 80198c4:	f7ff ffac 	bl	8019820 <__sfp_lock_acquire>
 80198c8:	4b1e      	ldr	r3, [pc, #120]	; (8019944 <__sfp+0x84>)
 80198ca:	681e      	ldr	r6, [r3, #0]
 80198cc:	69b3      	ldr	r3, [r6, #24]
 80198ce:	b913      	cbnz	r3, 80198d6 <__sfp+0x16>
 80198d0:	4630      	mov	r0, r6
 80198d2:	f7ff ffbd 	bl	8019850 <__sinit>
 80198d6:	3648      	adds	r6, #72	; 0x48
 80198d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80198dc:	3b01      	subs	r3, #1
 80198de:	d503      	bpl.n	80198e8 <__sfp+0x28>
 80198e0:	6833      	ldr	r3, [r6, #0]
 80198e2:	b30b      	cbz	r3, 8019928 <__sfp+0x68>
 80198e4:	6836      	ldr	r6, [r6, #0]
 80198e6:	e7f7      	b.n	80198d8 <__sfp+0x18>
 80198e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80198ec:	b9d5      	cbnz	r5, 8019924 <__sfp+0x64>
 80198ee:	4b16      	ldr	r3, [pc, #88]	; (8019948 <__sfp+0x88>)
 80198f0:	60e3      	str	r3, [r4, #12]
 80198f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80198f6:	6665      	str	r5, [r4, #100]	; 0x64
 80198f8:	f000 f86c 	bl	80199d4 <__retarget_lock_init_recursive>
 80198fc:	f7ff ff96 	bl	801982c <__sfp_lock_release>
 8019900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019908:	6025      	str	r5, [r4, #0]
 801990a:	61a5      	str	r5, [r4, #24]
 801990c:	2208      	movs	r2, #8
 801990e:	4629      	mov	r1, r5
 8019910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019914:	f000 f892 	bl	8019a3c <memset>
 8019918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801991c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019920:	4620      	mov	r0, r4
 8019922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019924:	3468      	adds	r4, #104	; 0x68
 8019926:	e7d9      	b.n	80198dc <__sfp+0x1c>
 8019928:	2104      	movs	r1, #4
 801992a:	4638      	mov	r0, r7
 801992c:	f7ff ff62 	bl	80197f4 <__sfmoreglue>
 8019930:	4604      	mov	r4, r0
 8019932:	6030      	str	r0, [r6, #0]
 8019934:	2800      	cmp	r0, #0
 8019936:	d1d5      	bne.n	80198e4 <__sfp+0x24>
 8019938:	f7ff ff78 	bl	801982c <__sfp_lock_release>
 801993c:	230c      	movs	r3, #12
 801993e:	603b      	str	r3, [r7, #0]
 8019940:	e7ee      	b.n	8019920 <__sfp+0x60>
 8019942:	bf00      	nop
 8019944:	08020b44 	.word	0x08020b44
 8019948:	ffff0001 	.word	0xffff0001

0801994c <_fwalk_reent>:
 801994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019950:	4606      	mov	r6, r0
 8019952:	4688      	mov	r8, r1
 8019954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019958:	2700      	movs	r7, #0
 801995a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801995e:	f1b9 0901 	subs.w	r9, r9, #1
 8019962:	d505      	bpl.n	8019970 <_fwalk_reent+0x24>
 8019964:	6824      	ldr	r4, [r4, #0]
 8019966:	2c00      	cmp	r4, #0
 8019968:	d1f7      	bne.n	801995a <_fwalk_reent+0xe>
 801996a:	4638      	mov	r0, r7
 801996c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019970:	89ab      	ldrh	r3, [r5, #12]
 8019972:	2b01      	cmp	r3, #1
 8019974:	d907      	bls.n	8019986 <_fwalk_reent+0x3a>
 8019976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801997a:	3301      	adds	r3, #1
 801997c:	d003      	beq.n	8019986 <_fwalk_reent+0x3a>
 801997e:	4629      	mov	r1, r5
 8019980:	4630      	mov	r0, r6
 8019982:	47c0      	blx	r8
 8019984:	4307      	orrs	r7, r0
 8019986:	3568      	adds	r5, #104	; 0x68
 8019988:	e7e9      	b.n	801995e <_fwalk_reent+0x12>
	...

0801998c <__libc_init_array>:
 801998c:	b570      	push	{r4, r5, r6, lr}
 801998e:	4d0d      	ldr	r5, [pc, #52]	; (80199c4 <__libc_init_array+0x38>)
 8019990:	4c0d      	ldr	r4, [pc, #52]	; (80199c8 <__libc_init_array+0x3c>)
 8019992:	1b64      	subs	r4, r4, r5
 8019994:	10a4      	asrs	r4, r4, #2
 8019996:	2600      	movs	r6, #0
 8019998:	42a6      	cmp	r6, r4
 801999a:	d109      	bne.n	80199b0 <__libc_init_array+0x24>
 801999c:	4d0b      	ldr	r5, [pc, #44]	; (80199cc <__libc_init_array+0x40>)
 801999e:	4c0c      	ldr	r4, [pc, #48]	; (80199d0 <__libc_init_array+0x44>)
 80199a0:	f005 f8c0 	bl	801eb24 <_init>
 80199a4:	1b64      	subs	r4, r4, r5
 80199a6:	10a4      	asrs	r4, r4, #2
 80199a8:	2600      	movs	r6, #0
 80199aa:	42a6      	cmp	r6, r4
 80199ac:	d105      	bne.n	80199ba <__libc_init_array+0x2e>
 80199ae:	bd70      	pop	{r4, r5, r6, pc}
 80199b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80199b4:	4798      	blx	r3
 80199b6:	3601      	adds	r6, #1
 80199b8:	e7ee      	b.n	8019998 <__libc_init_array+0xc>
 80199ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80199be:	4798      	blx	r3
 80199c0:	3601      	adds	r6, #1
 80199c2:	e7f2      	b.n	80199aa <__libc_init_array+0x1e>
 80199c4:	08020eb0 	.word	0x08020eb0
 80199c8:	08020eb0 	.word	0x08020eb0
 80199cc:	08020eb0 	.word	0x08020eb0
 80199d0:	08020eb8 	.word	0x08020eb8

080199d4 <__retarget_lock_init_recursive>:
 80199d4:	4770      	bx	lr

080199d6 <__retarget_lock_acquire_recursive>:
 80199d6:	4770      	bx	lr

080199d8 <__retarget_lock_release_recursive>:
 80199d8:	4770      	bx	lr
	...

080199dc <malloc>:
 80199dc:	4b02      	ldr	r3, [pc, #8]	; (80199e8 <malloc+0xc>)
 80199de:	4601      	mov	r1, r0
 80199e0:	6818      	ldr	r0, [r3, #0]
 80199e2:	f000 b883 	b.w	8019aec <_malloc_r>
 80199e6:	bf00      	nop
 80199e8:	20000200 	.word	0x20000200

080199ec <memcpy>:
 80199ec:	440a      	add	r2, r1
 80199ee:	4291      	cmp	r1, r2
 80199f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80199f4:	d100      	bne.n	80199f8 <memcpy+0xc>
 80199f6:	4770      	bx	lr
 80199f8:	b510      	push	{r4, lr}
 80199fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80199fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a02:	4291      	cmp	r1, r2
 8019a04:	d1f9      	bne.n	80199fa <memcpy+0xe>
 8019a06:	bd10      	pop	{r4, pc}

08019a08 <memmove>:
 8019a08:	4288      	cmp	r0, r1
 8019a0a:	b510      	push	{r4, lr}
 8019a0c:	eb01 0402 	add.w	r4, r1, r2
 8019a10:	d902      	bls.n	8019a18 <memmove+0x10>
 8019a12:	4284      	cmp	r4, r0
 8019a14:	4623      	mov	r3, r4
 8019a16:	d807      	bhi.n	8019a28 <memmove+0x20>
 8019a18:	1e43      	subs	r3, r0, #1
 8019a1a:	42a1      	cmp	r1, r4
 8019a1c:	d008      	beq.n	8019a30 <memmove+0x28>
 8019a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a26:	e7f8      	b.n	8019a1a <memmove+0x12>
 8019a28:	4402      	add	r2, r0
 8019a2a:	4601      	mov	r1, r0
 8019a2c:	428a      	cmp	r2, r1
 8019a2e:	d100      	bne.n	8019a32 <memmove+0x2a>
 8019a30:	bd10      	pop	{r4, pc}
 8019a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a3a:	e7f7      	b.n	8019a2c <memmove+0x24>

08019a3c <memset>:
 8019a3c:	4402      	add	r2, r0
 8019a3e:	4603      	mov	r3, r0
 8019a40:	4293      	cmp	r3, r2
 8019a42:	d100      	bne.n	8019a46 <memset+0xa>
 8019a44:	4770      	bx	lr
 8019a46:	f803 1b01 	strb.w	r1, [r3], #1
 8019a4a:	e7f9      	b.n	8019a40 <memset+0x4>

08019a4c <_free_r>:
 8019a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a4e:	2900      	cmp	r1, #0
 8019a50:	d048      	beq.n	8019ae4 <_free_r+0x98>
 8019a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a56:	9001      	str	r0, [sp, #4]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8019a5e:	bfb8      	it	lt
 8019a60:	18e4      	addlt	r4, r4, r3
 8019a62:	f003 fcd1 	bl	801d408 <__malloc_lock>
 8019a66:	4a20      	ldr	r2, [pc, #128]	; (8019ae8 <_free_r+0x9c>)
 8019a68:	9801      	ldr	r0, [sp, #4]
 8019a6a:	6813      	ldr	r3, [r2, #0]
 8019a6c:	4615      	mov	r5, r2
 8019a6e:	b933      	cbnz	r3, 8019a7e <_free_r+0x32>
 8019a70:	6063      	str	r3, [r4, #4]
 8019a72:	6014      	str	r4, [r2, #0]
 8019a74:	b003      	add	sp, #12
 8019a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a7a:	f003 bccb 	b.w	801d414 <__malloc_unlock>
 8019a7e:	42a3      	cmp	r3, r4
 8019a80:	d90b      	bls.n	8019a9a <_free_r+0x4e>
 8019a82:	6821      	ldr	r1, [r4, #0]
 8019a84:	1862      	adds	r2, r4, r1
 8019a86:	4293      	cmp	r3, r2
 8019a88:	bf04      	itt	eq
 8019a8a:	681a      	ldreq	r2, [r3, #0]
 8019a8c:	685b      	ldreq	r3, [r3, #4]
 8019a8e:	6063      	str	r3, [r4, #4]
 8019a90:	bf04      	itt	eq
 8019a92:	1852      	addeq	r2, r2, r1
 8019a94:	6022      	streq	r2, [r4, #0]
 8019a96:	602c      	str	r4, [r5, #0]
 8019a98:	e7ec      	b.n	8019a74 <_free_r+0x28>
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	b10b      	cbz	r3, 8019aa4 <_free_r+0x58>
 8019aa0:	42a3      	cmp	r3, r4
 8019aa2:	d9fa      	bls.n	8019a9a <_free_r+0x4e>
 8019aa4:	6811      	ldr	r1, [r2, #0]
 8019aa6:	1855      	adds	r5, r2, r1
 8019aa8:	42a5      	cmp	r5, r4
 8019aaa:	d10b      	bne.n	8019ac4 <_free_r+0x78>
 8019aac:	6824      	ldr	r4, [r4, #0]
 8019aae:	4421      	add	r1, r4
 8019ab0:	1854      	adds	r4, r2, r1
 8019ab2:	42a3      	cmp	r3, r4
 8019ab4:	6011      	str	r1, [r2, #0]
 8019ab6:	d1dd      	bne.n	8019a74 <_free_r+0x28>
 8019ab8:	681c      	ldr	r4, [r3, #0]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	6053      	str	r3, [r2, #4]
 8019abe:	4421      	add	r1, r4
 8019ac0:	6011      	str	r1, [r2, #0]
 8019ac2:	e7d7      	b.n	8019a74 <_free_r+0x28>
 8019ac4:	d902      	bls.n	8019acc <_free_r+0x80>
 8019ac6:	230c      	movs	r3, #12
 8019ac8:	6003      	str	r3, [r0, #0]
 8019aca:	e7d3      	b.n	8019a74 <_free_r+0x28>
 8019acc:	6825      	ldr	r5, [r4, #0]
 8019ace:	1961      	adds	r1, r4, r5
 8019ad0:	428b      	cmp	r3, r1
 8019ad2:	bf04      	itt	eq
 8019ad4:	6819      	ldreq	r1, [r3, #0]
 8019ad6:	685b      	ldreq	r3, [r3, #4]
 8019ad8:	6063      	str	r3, [r4, #4]
 8019ada:	bf04      	itt	eq
 8019adc:	1949      	addeq	r1, r1, r5
 8019ade:	6021      	streq	r1, [r4, #0]
 8019ae0:	6054      	str	r4, [r2, #4]
 8019ae2:	e7c7      	b.n	8019a74 <_free_r+0x28>
 8019ae4:	b003      	add	sp, #12
 8019ae6:	bd30      	pop	{r4, r5, pc}
 8019ae8:	20005e50 	.word	0x20005e50

08019aec <_malloc_r>:
 8019aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aee:	1ccd      	adds	r5, r1, #3
 8019af0:	f025 0503 	bic.w	r5, r5, #3
 8019af4:	3508      	adds	r5, #8
 8019af6:	2d0c      	cmp	r5, #12
 8019af8:	bf38      	it	cc
 8019afa:	250c      	movcc	r5, #12
 8019afc:	2d00      	cmp	r5, #0
 8019afe:	4606      	mov	r6, r0
 8019b00:	db01      	blt.n	8019b06 <_malloc_r+0x1a>
 8019b02:	42a9      	cmp	r1, r5
 8019b04:	d903      	bls.n	8019b0e <_malloc_r+0x22>
 8019b06:	230c      	movs	r3, #12
 8019b08:	6033      	str	r3, [r6, #0]
 8019b0a:	2000      	movs	r0, #0
 8019b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b0e:	f003 fc7b 	bl	801d408 <__malloc_lock>
 8019b12:	4921      	ldr	r1, [pc, #132]	; (8019b98 <_malloc_r+0xac>)
 8019b14:	680a      	ldr	r2, [r1, #0]
 8019b16:	4614      	mov	r4, r2
 8019b18:	b99c      	cbnz	r4, 8019b42 <_malloc_r+0x56>
 8019b1a:	4f20      	ldr	r7, [pc, #128]	; (8019b9c <_malloc_r+0xb0>)
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	b923      	cbnz	r3, 8019b2a <_malloc_r+0x3e>
 8019b20:	4621      	mov	r1, r4
 8019b22:	4630      	mov	r0, r6
 8019b24:	f000 ffae 	bl	801aa84 <_sbrk_r>
 8019b28:	6038      	str	r0, [r7, #0]
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	4630      	mov	r0, r6
 8019b2e:	f000 ffa9 	bl	801aa84 <_sbrk_r>
 8019b32:	1c43      	adds	r3, r0, #1
 8019b34:	d123      	bne.n	8019b7e <_malloc_r+0x92>
 8019b36:	230c      	movs	r3, #12
 8019b38:	6033      	str	r3, [r6, #0]
 8019b3a:	4630      	mov	r0, r6
 8019b3c:	f003 fc6a 	bl	801d414 <__malloc_unlock>
 8019b40:	e7e3      	b.n	8019b0a <_malloc_r+0x1e>
 8019b42:	6823      	ldr	r3, [r4, #0]
 8019b44:	1b5b      	subs	r3, r3, r5
 8019b46:	d417      	bmi.n	8019b78 <_malloc_r+0x8c>
 8019b48:	2b0b      	cmp	r3, #11
 8019b4a:	d903      	bls.n	8019b54 <_malloc_r+0x68>
 8019b4c:	6023      	str	r3, [r4, #0]
 8019b4e:	441c      	add	r4, r3
 8019b50:	6025      	str	r5, [r4, #0]
 8019b52:	e004      	b.n	8019b5e <_malloc_r+0x72>
 8019b54:	6863      	ldr	r3, [r4, #4]
 8019b56:	42a2      	cmp	r2, r4
 8019b58:	bf0c      	ite	eq
 8019b5a:	600b      	streq	r3, [r1, #0]
 8019b5c:	6053      	strne	r3, [r2, #4]
 8019b5e:	4630      	mov	r0, r6
 8019b60:	f003 fc58 	bl	801d414 <__malloc_unlock>
 8019b64:	f104 000b 	add.w	r0, r4, #11
 8019b68:	1d23      	adds	r3, r4, #4
 8019b6a:	f020 0007 	bic.w	r0, r0, #7
 8019b6e:	1ac2      	subs	r2, r0, r3
 8019b70:	d0cc      	beq.n	8019b0c <_malloc_r+0x20>
 8019b72:	1a1b      	subs	r3, r3, r0
 8019b74:	50a3      	str	r3, [r4, r2]
 8019b76:	e7c9      	b.n	8019b0c <_malloc_r+0x20>
 8019b78:	4622      	mov	r2, r4
 8019b7a:	6864      	ldr	r4, [r4, #4]
 8019b7c:	e7cc      	b.n	8019b18 <_malloc_r+0x2c>
 8019b7e:	1cc4      	adds	r4, r0, #3
 8019b80:	f024 0403 	bic.w	r4, r4, #3
 8019b84:	42a0      	cmp	r0, r4
 8019b86:	d0e3      	beq.n	8019b50 <_malloc_r+0x64>
 8019b88:	1a21      	subs	r1, r4, r0
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f000 ff7a 	bl	801aa84 <_sbrk_r>
 8019b90:	3001      	adds	r0, #1
 8019b92:	d1dd      	bne.n	8019b50 <_malloc_r+0x64>
 8019b94:	e7cf      	b.n	8019b36 <_malloc_r+0x4a>
 8019b96:	bf00      	nop
 8019b98:	20005e50 	.word	0x20005e50
 8019b9c:	20005e54 	.word	0x20005e54

08019ba0 <__cvt>:
 8019ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ba4:	ec55 4b10 	vmov	r4, r5, d0
 8019ba8:	2d00      	cmp	r5, #0
 8019baa:	460e      	mov	r6, r1
 8019bac:	4619      	mov	r1, r3
 8019bae:	462b      	mov	r3, r5
 8019bb0:	bfbb      	ittet	lt
 8019bb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019bb6:	461d      	movlt	r5, r3
 8019bb8:	2300      	movge	r3, #0
 8019bba:	232d      	movlt	r3, #45	; 0x2d
 8019bbc:	700b      	strb	r3, [r1, #0]
 8019bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019bc4:	4691      	mov	r9, r2
 8019bc6:	f023 0820 	bic.w	r8, r3, #32
 8019bca:	bfbc      	itt	lt
 8019bcc:	4622      	movlt	r2, r4
 8019bce:	4614      	movlt	r4, r2
 8019bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019bd4:	d005      	beq.n	8019be2 <__cvt+0x42>
 8019bd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019bda:	d100      	bne.n	8019bde <__cvt+0x3e>
 8019bdc:	3601      	adds	r6, #1
 8019bde:	2102      	movs	r1, #2
 8019be0:	e000      	b.n	8019be4 <__cvt+0x44>
 8019be2:	2103      	movs	r1, #3
 8019be4:	ab03      	add	r3, sp, #12
 8019be6:	9301      	str	r3, [sp, #4]
 8019be8:	ab02      	add	r3, sp, #8
 8019bea:	9300      	str	r3, [sp, #0]
 8019bec:	ec45 4b10 	vmov	d0, r4, r5
 8019bf0:	4653      	mov	r3, sl
 8019bf2:	4632      	mov	r2, r6
 8019bf4:	f002 f94c 	bl	801be90 <_dtoa_r>
 8019bf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019bfc:	4607      	mov	r7, r0
 8019bfe:	d102      	bne.n	8019c06 <__cvt+0x66>
 8019c00:	f019 0f01 	tst.w	r9, #1
 8019c04:	d022      	beq.n	8019c4c <__cvt+0xac>
 8019c06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019c0a:	eb07 0906 	add.w	r9, r7, r6
 8019c0e:	d110      	bne.n	8019c32 <__cvt+0x92>
 8019c10:	783b      	ldrb	r3, [r7, #0]
 8019c12:	2b30      	cmp	r3, #48	; 0x30
 8019c14:	d10a      	bne.n	8019c2c <__cvt+0x8c>
 8019c16:	2200      	movs	r2, #0
 8019c18:	2300      	movs	r3, #0
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	4629      	mov	r1, r5
 8019c1e:	f7e6 ff63 	bl	8000ae8 <__aeabi_dcmpeq>
 8019c22:	b918      	cbnz	r0, 8019c2c <__cvt+0x8c>
 8019c24:	f1c6 0601 	rsb	r6, r6, #1
 8019c28:	f8ca 6000 	str.w	r6, [sl]
 8019c2c:	f8da 3000 	ldr.w	r3, [sl]
 8019c30:	4499      	add	r9, r3
 8019c32:	2200      	movs	r2, #0
 8019c34:	2300      	movs	r3, #0
 8019c36:	4620      	mov	r0, r4
 8019c38:	4629      	mov	r1, r5
 8019c3a:	f7e6 ff55 	bl	8000ae8 <__aeabi_dcmpeq>
 8019c3e:	b108      	cbz	r0, 8019c44 <__cvt+0xa4>
 8019c40:	f8cd 900c 	str.w	r9, [sp, #12]
 8019c44:	2230      	movs	r2, #48	; 0x30
 8019c46:	9b03      	ldr	r3, [sp, #12]
 8019c48:	454b      	cmp	r3, r9
 8019c4a:	d307      	bcc.n	8019c5c <__cvt+0xbc>
 8019c4c:	9b03      	ldr	r3, [sp, #12]
 8019c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019c50:	1bdb      	subs	r3, r3, r7
 8019c52:	4638      	mov	r0, r7
 8019c54:	6013      	str	r3, [r2, #0]
 8019c56:	b004      	add	sp, #16
 8019c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c5c:	1c59      	adds	r1, r3, #1
 8019c5e:	9103      	str	r1, [sp, #12]
 8019c60:	701a      	strb	r2, [r3, #0]
 8019c62:	e7f0      	b.n	8019c46 <__cvt+0xa6>

08019c64 <__exponent>:
 8019c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c66:	4603      	mov	r3, r0
 8019c68:	2900      	cmp	r1, #0
 8019c6a:	bfb8      	it	lt
 8019c6c:	4249      	neglt	r1, r1
 8019c6e:	f803 2b02 	strb.w	r2, [r3], #2
 8019c72:	bfb4      	ite	lt
 8019c74:	222d      	movlt	r2, #45	; 0x2d
 8019c76:	222b      	movge	r2, #43	; 0x2b
 8019c78:	2909      	cmp	r1, #9
 8019c7a:	7042      	strb	r2, [r0, #1]
 8019c7c:	dd2a      	ble.n	8019cd4 <__exponent+0x70>
 8019c7e:	f10d 0407 	add.w	r4, sp, #7
 8019c82:	46a4      	mov	ip, r4
 8019c84:	270a      	movs	r7, #10
 8019c86:	46a6      	mov	lr, r4
 8019c88:	460a      	mov	r2, r1
 8019c8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8019c8e:	fb07 1516 	mls	r5, r7, r6, r1
 8019c92:	3530      	adds	r5, #48	; 0x30
 8019c94:	2a63      	cmp	r2, #99	; 0x63
 8019c96:	f104 34ff 	add.w	r4, r4, #4294967295
 8019c9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019c9e:	4631      	mov	r1, r6
 8019ca0:	dcf1      	bgt.n	8019c86 <__exponent+0x22>
 8019ca2:	3130      	adds	r1, #48	; 0x30
 8019ca4:	f1ae 0502 	sub.w	r5, lr, #2
 8019ca8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019cac:	1c44      	adds	r4, r0, #1
 8019cae:	4629      	mov	r1, r5
 8019cb0:	4561      	cmp	r1, ip
 8019cb2:	d30a      	bcc.n	8019cca <__exponent+0x66>
 8019cb4:	f10d 0209 	add.w	r2, sp, #9
 8019cb8:	eba2 020e 	sub.w	r2, r2, lr
 8019cbc:	4565      	cmp	r5, ip
 8019cbe:	bf88      	it	hi
 8019cc0:	2200      	movhi	r2, #0
 8019cc2:	4413      	add	r3, r2
 8019cc4:	1a18      	subs	r0, r3, r0
 8019cc6:	b003      	add	sp, #12
 8019cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019cce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019cd2:	e7ed      	b.n	8019cb0 <__exponent+0x4c>
 8019cd4:	2330      	movs	r3, #48	; 0x30
 8019cd6:	3130      	adds	r1, #48	; 0x30
 8019cd8:	7083      	strb	r3, [r0, #2]
 8019cda:	70c1      	strb	r1, [r0, #3]
 8019cdc:	1d03      	adds	r3, r0, #4
 8019cde:	e7f1      	b.n	8019cc4 <__exponent+0x60>

08019ce0 <_printf_float>:
 8019ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce4:	ed2d 8b02 	vpush	{d8}
 8019ce8:	b08d      	sub	sp, #52	; 0x34
 8019cea:	460c      	mov	r4, r1
 8019cec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019cf0:	4616      	mov	r6, r2
 8019cf2:	461f      	mov	r7, r3
 8019cf4:	4605      	mov	r5, r0
 8019cf6:	f003 fafb 	bl	801d2f0 <_localeconv_r>
 8019cfa:	f8d0 a000 	ldr.w	sl, [r0]
 8019cfe:	4650      	mov	r0, sl
 8019d00:	f7e6 fa76 	bl	80001f0 <strlen>
 8019d04:	2300      	movs	r3, #0
 8019d06:	930a      	str	r3, [sp, #40]	; 0x28
 8019d08:	6823      	ldr	r3, [r4, #0]
 8019d0a:	9305      	str	r3, [sp, #20]
 8019d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8019d10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019d14:	3307      	adds	r3, #7
 8019d16:	f023 0307 	bic.w	r3, r3, #7
 8019d1a:	f103 0208 	add.w	r2, r3, #8
 8019d1e:	f8c8 2000 	str.w	r2, [r8]
 8019d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019d2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019d32:	9307      	str	r3, [sp, #28]
 8019d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8019d38:	ee08 0a10 	vmov	s16, r0
 8019d3c:	4b9f      	ldr	r3, [pc, #636]	; (8019fbc <_printf_float+0x2dc>)
 8019d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d42:	f04f 32ff 	mov.w	r2, #4294967295
 8019d46:	f7e6 ff01 	bl	8000b4c <__aeabi_dcmpun>
 8019d4a:	bb88      	cbnz	r0, 8019db0 <_printf_float+0xd0>
 8019d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d50:	4b9a      	ldr	r3, [pc, #616]	; (8019fbc <_printf_float+0x2dc>)
 8019d52:	f04f 32ff 	mov.w	r2, #4294967295
 8019d56:	f7e6 fedb 	bl	8000b10 <__aeabi_dcmple>
 8019d5a:	bb48      	cbnz	r0, 8019db0 <_printf_float+0xd0>
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	2300      	movs	r3, #0
 8019d60:	4640      	mov	r0, r8
 8019d62:	4649      	mov	r1, r9
 8019d64:	f7e6 feca 	bl	8000afc <__aeabi_dcmplt>
 8019d68:	b110      	cbz	r0, 8019d70 <_printf_float+0x90>
 8019d6a:	232d      	movs	r3, #45	; 0x2d
 8019d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d70:	4b93      	ldr	r3, [pc, #588]	; (8019fc0 <_printf_float+0x2e0>)
 8019d72:	4894      	ldr	r0, [pc, #592]	; (8019fc4 <_printf_float+0x2e4>)
 8019d74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019d78:	bf94      	ite	ls
 8019d7a:	4698      	movls	r8, r3
 8019d7c:	4680      	movhi	r8, r0
 8019d7e:	2303      	movs	r3, #3
 8019d80:	6123      	str	r3, [r4, #16]
 8019d82:	9b05      	ldr	r3, [sp, #20]
 8019d84:	f023 0204 	bic.w	r2, r3, #4
 8019d88:	6022      	str	r2, [r4, #0]
 8019d8a:	f04f 0900 	mov.w	r9, #0
 8019d8e:	9700      	str	r7, [sp, #0]
 8019d90:	4633      	mov	r3, r6
 8019d92:	aa0b      	add	r2, sp, #44	; 0x2c
 8019d94:	4621      	mov	r1, r4
 8019d96:	4628      	mov	r0, r5
 8019d98:	f000 f9d8 	bl	801a14c <_printf_common>
 8019d9c:	3001      	adds	r0, #1
 8019d9e:	f040 8090 	bne.w	8019ec2 <_printf_float+0x1e2>
 8019da2:	f04f 30ff 	mov.w	r0, #4294967295
 8019da6:	b00d      	add	sp, #52	; 0x34
 8019da8:	ecbd 8b02 	vpop	{d8}
 8019dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019db0:	4642      	mov	r2, r8
 8019db2:	464b      	mov	r3, r9
 8019db4:	4640      	mov	r0, r8
 8019db6:	4649      	mov	r1, r9
 8019db8:	f7e6 fec8 	bl	8000b4c <__aeabi_dcmpun>
 8019dbc:	b140      	cbz	r0, 8019dd0 <_printf_float+0xf0>
 8019dbe:	464b      	mov	r3, r9
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	bfbc      	itt	lt
 8019dc4:	232d      	movlt	r3, #45	; 0x2d
 8019dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019dca:	487f      	ldr	r0, [pc, #508]	; (8019fc8 <_printf_float+0x2e8>)
 8019dcc:	4b7f      	ldr	r3, [pc, #508]	; (8019fcc <_printf_float+0x2ec>)
 8019dce:	e7d1      	b.n	8019d74 <_printf_float+0x94>
 8019dd0:	6863      	ldr	r3, [r4, #4]
 8019dd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019dd6:	9206      	str	r2, [sp, #24]
 8019dd8:	1c5a      	adds	r2, r3, #1
 8019dda:	d13f      	bne.n	8019e5c <_printf_float+0x17c>
 8019ddc:	2306      	movs	r3, #6
 8019dde:	6063      	str	r3, [r4, #4]
 8019de0:	9b05      	ldr	r3, [sp, #20]
 8019de2:	6861      	ldr	r1, [r4, #4]
 8019de4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019de8:	2300      	movs	r3, #0
 8019dea:	9303      	str	r3, [sp, #12]
 8019dec:	ab0a      	add	r3, sp, #40	; 0x28
 8019dee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019df2:	ab09      	add	r3, sp, #36	; 0x24
 8019df4:	ec49 8b10 	vmov	d0, r8, r9
 8019df8:	9300      	str	r3, [sp, #0]
 8019dfa:	6022      	str	r2, [r4, #0]
 8019dfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019e00:	4628      	mov	r0, r5
 8019e02:	f7ff fecd 	bl	8019ba0 <__cvt>
 8019e06:	9b06      	ldr	r3, [sp, #24]
 8019e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e0a:	2b47      	cmp	r3, #71	; 0x47
 8019e0c:	4680      	mov	r8, r0
 8019e0e:	d108      	bne.n	8019e22 <_printf_float+0x142>
 8019e10:	1cc8      	adds	r0, r1, #3
 8019e12:	db02      	blt.n	8019e1a <_printf_float+0x13a>
 8019e14:	6863      	ldr	r3, [r4, #4]
 8019e16:	4299      	cmp	r1, r3
 8019e18:	dd41      	ble.n	8019e9e <_printf_float+0x1be>
 8019e1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019e1e:	fa5f fb8b 	uxtb.w	fp, fp
 8019e22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019e26:	d820      	bhi.n	8019e6a <_printf_float+0x18a>
 8019e28:	3901      	subs	r1, #1
 8019e2a:	465a      	mov	r2, fp
 8019e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019e30:	9109      	str	r1, [sp, #36]	; 0x24
 8019e32:	f7ff ff17 	bl	8019c64 <__exponent>
 8019e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e38:	1813      	adds	r3, r2, r0
 8019e3a:	2a01      	cmp	r2, #1
 8019e3c:	4681      	mov	r9, r0
 8019e3e:	6123      	str	r3, [r4, #16]
 8019e40:	dc02      	bgt.n	8019e48 <_printf_float+0x168>
 8019e42:	6822      	ldr	r2, [r4, #0]
 8019e44:	07d2      	lsls	r2, r2, #31
 8019e46:	d501      	bpl.n	8019e4c <_printf_float+0x16c>
 8019e48:	3301      	adds	r3, #1
 8019e4a:	6123      	str	r3, [r4, #16]
 8019e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d09c      	beq.n	8019d8e <_printf_float+0xae>
 8019e54:	232d      	movs	r3, #45	; 0x2d
 8019e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e5a:	e798      	b.n	8019d8e <_printf_float+0xae>
 8019e5c:	9a06      	ldr	r2, [sp, #24]
 8019e5e:	2a47      	cmp	r2, #71	; 0x47
 8019e60:	d1be      	bne.n	8019de0 <_printf_float+0x100>
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d1bc      	bne.n	8019de0 <_printf_float+0x100>
 8019e66:	2301      	movs	r3, #1
 8019e68:	e7b9      	b.n	8019dde <_printf_float+0xfe>
 8019e6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019e6e:	d118      	bne.n	8019ea2 <_printf_float+0x1c2>
 8019e70:	2900      	cmp	r1, #0
 8019e72:	6863      	ldr	r3, [r4, #4]
 8019e74:	dd0b      	ble.n	8019e8e <_printf_float+0x1ae>
 8019e76:	6121      	str	r1, [r4, #16]
 8019e78:	b913      	cbnz	r3, 8019e80 <_printf_float+0x1a0>
 8019e7a:	6822      	ldr	r2, [r4, #0]
 8019e7c:	07d0      	lsls	r0, r2, #31
 8019e7e:	d502      	bpl.n	8019e86 <_printf_float+0x1a6>
 8019e80:	3301      	adds	r3, #1
 8019e82:	440b      	add	r3, r1
 8019e84:	6123      	str	r3, [r4, #16]
 8019e86:	65a1      	str	r1, [r4, #88]	; 0x58
 8019e88:	f04f 0900 	mov.w	r9, #0
 8019e8c:	e7de      	b.n	8019e4c <_printf_float+0x16c>
 8019e8e:	b913      	cbnz	r3, 8019e96 <_printf_float+0x1b6>
 8019e90:	6822      	ldr	r2, [r4, #0]
 8019e92:	07d2      	lsls	r2, r2, #31
 8019e94:	d501      	bpl.n	8019e9a <_printf_float+0x1ba>
 8019e96:	3302      	adds	r3, #2
 8019e98:	e7f4      	b.n	8019e84 <_printf_float+0x1a4>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	e7f2      	b.n	8019e84 <_printf_float+0x1a4>
 8019e9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ea4:	4299      	cmp	r1, r3
 8019ea6:	db05      	blt.n	8019eb4 <_printf_float+0x1d4>
 8019ea8:	6823      	ldr	r3, [r4, #0]
 8019eaa:	6121      	str	r1, [r4, #16]
 8019eac:	07d8      	lsls	r0, r3, #31
 8019eae:	d5ea      	bpl.n	8019e86 <_printf_float+0x1a6>
 8019eb0:	1c4b      	adds	r3, r1, #1
 8019eb2:	e7e7      	b.n	8019e84 <_printf_float+0x1a4>
 8019eb4:	2900      	cmp	r1, #0
 8019eb6:	bfd4      	ite	le
 8019eb8:	f1c1 0202 	rsble	r2, r1, #2
 8019ebc:	2201      	movgt	r2, #1
 8019ebe:	4413      	add	r3, r2
 8019ec0:	e7e0      	b.n	8019e84 <_printf_float+0x1a4>
 8019ec2:	6823      	ldr	r3, [r4, #0]
 8019ec4:	055a      	lsls	r2, r3, #21
 8019ec6:	d407      	bmi.n	8019ed8 <_printf_float+0x1f8>
 8019ec8:	6923      	ldr	r3, [r4, #16]
 8019eca:	4642      	mov	r2, r8
 8019ecc:	4631      	mov	r1, r6
 8019ece:	4628      	mov	r0, r5
 8019ed0:	47b8      	blx	r7
 8019ed2:	3001      	adds	r0, #1
 8019ed4:	d12c      	bne.n	8019f30 <_printf_float+0x250>
 8019ed6:	e764      	b.n	8019da2 <_printf_float+0xc2>
 8019ed8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019edc:	f240 80e0 	bls.w	801a0a0 <_printf_float+0x3c0>
 8019ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	f7e6 fdfe 	bl	8000ae8 <__aeabi_dcmpeq>
 8019eec:	2800      	cmp	r0, #0
 8019eee:	d034      	beq.n	8019f5a <_printf_float+0x27a>
 8019ef0:	4a37      	ldr	r2, [pc, #220]	; (8019fd0 <_printf_float+0x2f0>)
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	4631      	mov	r1, r6
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	47b8      	blx	r7
 8019efa:	3001      	adds	r0, #1
 8019efc:	f43f af51 	beq.w	8019da2 <_printf_float+0xc2>
 8019f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f04:	429a      	cmp	r2, r3
 8019f06:	db02      	blt.n	8019f0e <_printf_float+0x22e>
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	07d8      	lsls	r0, r3, #31
 8019f0c:	d510      	bpl.n	8019f30 <_printf_float+0x250>
 8019f0e:	ee18 3a10 	vmov	r3, s16
 8019f12:	4652      	mov	r2, sl
 8019f14:	4631      	mov	r1, r6
 8019f16:	4628      	mov	r0, r5
 8019f18:	47b8      	blx	r7
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	f43f af41 	beq.w	8019da2 <_printf_float+0xc2>
 8019f20:	f04f 0800 	mov.w	r8, #0
 8019f24:	f104 091a 	add.w	r9, r4, #26
 8019f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f2a:	3b01      	subs	r3, #1
 8019f2c:	4543      	cmp	r3, r8
 8019f2e:	dc09      	bgt.n	8019f44 <_printf_float+0x264>
 8019f30:	6823      	ldr	r3, [r4, #0]
 8019f32:	079b      	lsls	r3, r3, #30
 8019f34:	f100 8105 	bmi.w	801a142 <_printf_float+0x462>
 8019f38:	68e0      	ldr	r0, [r4, #12]
 8019f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f3c:	4298      	cmp	r0, r3
 8019f3e:	bfb8      	it	lt
 8019f40:	4618      	movlt	r0, r3
 8019f42:	e730      	b.n	8019da6 <_printf_float+0xc6>
 8019f44:	2301      	movs	r3, #1
 8019f46:	464a      	mov	r2, r9
 8019f48:	4631      	mov	r1, r6
 8019f4a:	4628      	mov	r0, r5
 8019f4c:	47b8      	blx	r7
 8019f4e:	3001      	adds	r0, #1
 8019f50:	f43f af27 	beq.w	8019da2 <_printf_float+0xc2>
 8019f54:	f108 0801 	add.w	r8, r8, #1
 8019f58:	e7e6      	b.n	8019f28 <_printf_float+0x248>
 8019f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	dc39      	bgt.n	8019fd4 <_printf_float+0x2f4>
 8019f60:	4a1b      	ldr	r2, [pc, #108]	; (8019fd0 <_printf_float+0x2f0>)
 8019f62:	2301      	movs	r3, #1
 8019f64:	4631      	mov	r1, r6
 8019f66:	4628      	mov	r0, r5
 8019f68:	47b8      	blx	r7
 8019f6a:	3001      	adds	r0, #1
 8019f6c:	f43f af19 	beq.w	8019da2 <_printf_float+0xc2>
 8019f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f74:	4313      	orrs	r3, r2
 8019f76:	d102      	bne.n	8019f7e <_printf_float+0x29e>
 8019f78:	6823      	ldr	r3, [r4, #0]
 8019f7a:	07d9      	lsls	r1, r3, #31
 8019f7c:	d5d8      	bpl.n	8019f30 <_printf_float+0x250>
 8019f7e:	ee18 3a10 	vmov	r3, s16
 8019f82:	4652      	mov	r2, sl
 8019f84:	4631      	mov	r1, r6
 8019f86:	4628      	mov	r0, r5
 8019f88:	47b8      	blx	r7
 8019f8a:	3001      	adds	r0, #1
 8019f8c:	f43f af09 	beq.w	8019da2 <_printf_float+0xc2>
 8019f90:	f04f 0900 	mov.w	r9, #0
 8019f94:	f104 0a1a 	add.w	sl, r4, #26
 8019f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f9a:	425b      	negs	r3, r3
 8019f9c:	454b      	cmp	r3, r9
 8019f9e:	dc01      	bgt.n	8019fa4 <_printf_float+0x2c4>
 8019fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019fa2:	e792      	b.n	8019eca <_printf_float+0x1ea>
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	4652      	mov	r2, sl
 8019fa8:	4631      	mov	r1, r6
 8019faa:	4628      	mov	r0, r5
 8019fac:	47b8      	blx	r7
 8019fae:	3001      	adds	r0, #1
 8019fb0:	f43f aef7 	beq.w	8019da2 <_printf_float+0xc2>
 8019fb4:	f109 0901 	add.w	r9, r9, #1
 8019fb8:	e7ee      	b.n	8019f98 <_printf_float+0x2b8>
 8019fba:	bf00      	nop
 8019fbc:	7fefffff 	.word	0x7fefffff
 8019fc0:	08020b48 	.word	0x08020b48
 8019fc4:	08020b4c 	.word	0x08020b4c
 8019fc8:	08020b54 	.word	0x08020b54
 8019fcc:	08020b50 	.word	0x08020b50
 8019fd0:	08020e91 	.word	0x08020e91
 8019fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019fd8:	429a      	cmp	r2, r3
 8019fda:	bfa8      	it	ge
 8019fdc:	461a      	movge	r2, r3
 8019fde:	2a00      	cmp	r2, #0
 8019fe0:	4691      	mov	r9, r2
 8019fe2:	dc37      	bgt.n	801a054 <_printf_float+0x374>
 8019fe4:	f04f 0b00 	mov.w	fp, #0
 8019fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019fec:	f104 021a 	add.w	r2, r4, #26
 8019ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019ff2:	9305      	str	r3, [sp, #20]
 8019ff4:	eba3 0309 	sub.w	r3, r3, r9
 8019ff8:	455b      	cmp	r3, fp
 8019ffa:	dc33      	bgt.n	801a064 <_printf_float+0x384>
 8019ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a000:	429a      	cmp	r2, r3
 801a002:	db3b      	blt.n	801a07c <_printf_float+0x39c>
 801a004:	6823      	ldr	r3, [r4, #0]
 801a006:	07da      	lsls	r2, r3, #31
 801a008:	d438      	bmi.n	801a07c <_printf_float+0x39c>
 801a00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a00c:	9b05      	ldr	r3, [sp, #20]
 801a00e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a010:	1ad3      	subs	r3, r2, r3
 801a012:	eba2 0901 	sub.w	r9, r2, r1
 801a016:	4599      	cmp	r9, r3
 801a018:	bfa8      	it	ge
 801a01a:	4699      	movge	r9, r3
 801a01c:	f1b9 0f00 	cmp.w	r9, #0
 801a020:	dc35      	bgt.n	801a08e <_printf_float+0x3ae>
 801a022:	f04f 0800 	mov.w	r8, #0
 801a026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a02a:	f104 0a1a 	add.w	sl, r4, #26
 801a02e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a032:	1a9b      	subs	r3, r3, r2
 801a034:	eba3 0309 	sub.w	r3, r3, r9
 801a038:	4543      	cmp	r3, r8
 801a03a:	f77f af79 	ble.w	8019f30 <_printf_float+0x250>
 801a03e:	2301      	movs	r3, #1
 801a040:	4652      	mov	r2, sl
 801a042:	4631      	mov	r1, r6
 801a044:	4628      	mov	r0, r5
 801a046:	47b8      	blx	r7
 801a048:	3001      	adds	r0, #1
 801a04a:	f43f aeaa 	beq.w	8019da2 <_printf_float+0xc2>
 801a04e:	f108 0801 	add.w	r8, r8, #1
 801a052:	e7ec      	b.n	801a02e <_printf_float+0x34e>
 801a054:	4613      	mov	r3, r2
 801a056:	4631      	mov	r1, r6
 801a058:	4642      	mov	r2, r8
 801a05a:	4628      	mov	r0, r5
 801a05c:	47b8      	blx	r7
 801a05e:	3001      	adds	r0, #1
 801a060:	d1c0      	bne.n	8019fe4 <_printf_float+0x304>
 801a062:	e69e      	b.n	8019da2 <_printf_float+0xc2>
 801a064:	2301      	movs	r3, #1
 801a066:	4631      	mov	r1, r6
 801a068:	4628      	mov	r0, r5
 801a06a:	9205      	str	r2, [sp, #20]
 801a06c:	47b8      	blx	r7
 801a06e:	3001      	adds	r0, #1
 801a070:	f43f ae97 	beq.w	8019da2 <_printf_float+0xc2>
 801a074:	9a05      	ldr	r2, [sp, #20]
 801a076:	f10b 0b01 	add.w	fp, fp, #1
 801a07a:	e7b9      	b.n	8019ff0 <_printf_float+0x310>
 801a07c:	ee18 3a10 	vmov	r3, s16
 801a080:	4652      	mov	r2, sl
 801a082:	4631      	mov	r1, r6
 801a084:	4628      	mov	r0, r5
 801a086:	47b8      	blx	r7
 801a088:	3001      	adds	r0, #1
 801a08a:	d1be      	bne.n	801a00a <_printf_float+0x32a>
 801a08c:	e689      	b.n	8019da2 <_printf_float+0xc2>
 801a08e:	9a05      	ldr	r2, [sp, #20]
 801a090:	464b      	mov	r3, r9
 801a092:	4442      	add	r2, r8
 801a094:	4631      	mov	r1, r6
 801a096:	4628      	mov	r0, r5
 801a098:	47b8      	blx	r7
 801a09a:	3001      	adds	r0, #1
 801a09c:	d1c1      	bne.n	801a022 <_printf_float+0x342>
 801a09e:	e680      	b.n	8019da2 <_printf_float+0xc2>
 801a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a0a2:	2a01      	cmp	r2, #1
 801a0a4:	dc01      	bgt.n	801a0aa <_printf_float+0x3ca>
 801a0a6:	07db      	lsls	r3, r3, #31
 801a0a8:	d538      	bpl.n	801a11c <_printf_float+0x43c>
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	4642      	mov	r2, r8
 801a0ae:	4631      	mov	r1, r6
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	47b8      	blx	r7
 801a0b4:	3001      	adds	r0, #1
 801a0b6:	f43f ae74 	beq.w	8019da2 <_printf_float+0xc2>
 801a0ba:	ee18 3a10 	vmov	r3, s16
 801a0be:	4652      	mov	r2, sl
 801a0c0:	4631      	mov	r1, r6
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	47b8      	blx	r7
 801a0c6:	3001      	adds	r0, #1
 801a0c8:	f43f ae6b 	beq.w	8019da2 <_printf_float+0xc2>
 801a0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	f7e6 fd08 	bl	8000ae8 <__aeabi_dcmpeq>
 801a0d8:	b9d8      	cbnz	r0, 801a112 <_printf_float+0x432>
 801a0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0dc:	f108 0201 	add.w	r2, r8, #1
 801a0e0:	3b01      	subs	r3, #1
 801a0e2:	4631      	mov	r1, r6
 801a0e4:	4628      	mov	r0, r5
 801a0e6:	47b8      	blx	r7
 801a0e8:	3001      	adds	r0, #1
 801a0ea:	d10e      	bne.n	801a10a <_printf_float+0x42a>
 801a0ec:	e659      	b.n	8019da2 <_printf_float+0xc2>
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	4652      	mov	r2, sl
 801a0f2:	4631      	mov	r1, r6
 801a0f4:	4628      	mov	r0, r5
 801a0f6:	47b8      	blx	r7
 801a0f8:	3001      	adds	r0, #1
 801a0fa:	f43f ae52 	beq.w	8019da2 <_printf_float+0xc2>
 801a0fe:	f108 0801 	add.w	r8, r8, #1
 801a102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a104:	3b01      	subs	r3, #1
 801a106:	4543      	cmp	r3, r8
 801a108:	dcf1      	bgt.n	801a0ee <_printf_float+0x40e>
 801a10a:	464b      	mov	r3, r9
 801a10c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a110:	e6dc      	b.n	8019ecc <_printf_float+0x1ec>
 801a112:	f04f 0800 	mov.w	r8, #0
 801a116:	f104 0a1a 	add.w	sl, r4, #26
 801a11a:	e7f2      	b.n	801a102 <_printf_float+0x422>
 801a11c:	2301      	movs	r3, #1
 801a11e:	4642      	mov	r2, r8
 801a120:	e7df      	b.n	801a0e2 <_printf_float+0x402>
 801a122:	2301      	movs	r3, #1
 801a124:	464a      	mov	r2, r9
 801a126:	4631      	mov	r1, r6
 801a128:	4628      	mov	r0, r5
 801a12a:	47b8      	blx	r7
 801a12c:	3001      	adds	r0, #1
 801a12e:	f43f ae38 	beq.w	8019da2 <_printf_float+0xc2>
 801a132:	f108 0801 	add.w	r8, r8, #1
 801a136:	68e3      	ldr	r3, [r4, #12]
 801a138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a13a:	1a5b      	subs	r3, r3, r1
 801a13c:	4543      	cmp	r3, r8
 801a13e:	dcf0      	bgt.n	801a122 <_printf_float+0x442>
 801a140:	e6fa      	b.n	8019f38 <_printf_float+0x258>
 801a142:	f04f 0800 	mov.w	r8, #0
 801a146:	f104 0919 	add.w	r9, r4, #25
 801a14a:	e7f4      	b.n	801a136 <_printf_float+0x456>

0801a14c <_printf_common>:
 801a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a150:	4616      	mov	r6, r2
 801a152:	4699      	mov	r9, r3
 801a154:	688a      	ldr	r2, [r1, #8]
 801a156:	690b      	ldr	r3, [r1, #16]
 801a158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a15c:	4293      	cmp	r3, r2
 801a15e:	bfb8      	it	lt
 801a160:	4613      	movlt	r3, r2
 801a162:	6033      	str	r3, [r6, #0]
 801a164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a168:	4607      	mov	r7, r0
 801a16a:	460c      	mov	r4, r1
 801a16c:	b10a      	cbz	r2, 801a172 <_printf_common+0x26>
 801a16e:	3301      	adds	r3, #1
 801a170:	6033      	str	r3, [r6, #0]
 801a172:	6823      	ldr	r3, [r4, #0]
 801a174:	0699      	lsls	r1, r3, #26
 801a176:	bf42      	ittt	mi
 801a178:	6833      	ldrmi	r3, [r6, #0]
 801a17a:	3302      	addmi	r3, #2
 801a17c:	6033      	strmi	r3, [r6, #0]
 801a17e:	6825      	ldr	r5, [r4, #0]
 801a180:	f015 0506 	ands.w	r5, r5, #6
 801a184:	d106      	bne.n	801a194 <_printf_common+0x48>
 801a186:	f104 0a19 	add.w	sl, r4, #25
 801a18a:	68e3      	ldr	r3, [r4, #12]
 801a18c:	6832      	ldr	r2, [r6, #0]
 801a18e:	1a9b      	subs	r3, r3, r2
 801a190:	42ab      	cmp	r3, r5
 801a192:	dc26      	bgt.n	801a1e2 <_printf_common+0x96>
 801a194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a198:	1e13      	subs	r3, r2, #0
 801a19a:	6822      	ldr	r2, [r4, #0]
 801a19c:	bf18      	it	ne
 801a19e:	2301      	movne	r3, #1
 801a1a0:	0692      	lsls	r2, r2, #26
 801a1a2:	d42b      	bmi.n	801a1fc <_printf_common+0xb0>
 801a1a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1a8:	4649      	mov	r1, r9
 801a1aa:	4638      	mov	r0, r7
 801a1ac:	47c0      	blx	r8
 801a1ae:	3001      	adds	r0, #1
 801a1b0:	d01e      	beq.n	801a1f0 <_printf_common+0xa4>
 801a1b2:	6823      	ldr	r3, [r4, #0]
 801a1b4:	68e5      	ldr	r5, [r4, #12]
 801a1b6:	6832      	ldr	r2, [r6, #0]
 801a1b8:	f003 0306 	and.w	r3, r3, #6
 801a1bc:	2b04      	cmp	r3, #4
 801a1be:	bf08      	it	eq
 801a1c0:	1aad      	subeq	r5, r5, r2
 801a1c2:	68a3      	ldr	r3, [r4, #8]
 801a1c4:	6922      	ldr	r2, [r4, #16]
 801a1c6:	bf0c      	ite	eq
 801a1c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a1cc:	2500      	movne	r5, #0
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	bfc4      	itt	gt
 801a1d2:	1a9b      	subgt	r3, r3, r2
 801a1d4:	18ed      	addgt	r5, r5, r3
 801a1d6:	2600      	movs	r6, #0
 801a1d8:	341a      	adds	r4, #26
 801a1da:	42b5      	cmp	r5, r6
 801a1dc:	d11a      	bne.n	801a214 <_printf_common+0xc8>
 801a1de:	2000      	movs	r0, #0
 801a1e0:	e008      	b.n	801a1f4 <_printf_common+0xa8>
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	4652      	mov	r2, sl
 801a1e6:	4649      	mov	r1, r9
 801a1e8:	4638      	mov	r0, r7
 801a1ea:	47c0      	blx	r8
 801a1ec:	3001      	adds	r0, #1
 801a1ee:	d103      	bne.n	801a1f8 <_printf_common+0xac>
 801a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1f8:	3501      	adds	r5, #1
 801a1fa:	e7c6      	b.n	801a18a <_printf_common+0x3e>
 801a1fc:	18e1      	adds	r1, r4, r3
 801a1fe:	1c5a      	adds	r2, r3, #1
 801a200:	2030      	movs	r0, #48	; 0x30
 801a202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a206:	4422      	add	r2, r4
 801a208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a20c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a210:	3302      	adds	r3, #2
 801a212:	e7c7      	b.n	801a1a4 <_printf_common+0x58>
 801a214:	2301      	movs	r3, #1
 801a216:	4622      	mov	r2, r4
 801a218:	4649      	mov	r1, r9
 801a21a:	4638      	mov	r0, r7
 801a21c:	47c0      	blx	r8
 801a21e:	3001      	adds	r0, #1
 801a220:	d0e6      	beq.n	801a1f0 <_printf_common+0xa4>
 801a222:	3601      	adds	r6, #1
 801a224:	e7d9      	b.n	801a1da <_printf_common+0x8e>
	...

0801a228 <_printf_i>:
 801a228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a22c:	460c      	mov	r4, r1
 801a22e:	4691      	mov	r9, r2
 801a230:	7e27      	ldrb	r7, [r4, #24]
 801a232:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a234:	2f78      	cmp	r7, #120	; 0x78
 801a236:	4680      	mov	r8, r0
 801a238:	469a      	mov	sl, r3
 801a23a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a23e:	d807      	bhi.n	801a250 <_printf_i+0x28>
 801a240:	2f62      	cmp	r7, #98	; 0x62
 801a242:	d80a      	bhi.n	801a25a <_printf_i+0x32>
 801a244:	2f00      	cmp	r7, #0
 801a246:	f000 80d8 	beq.w	801a3fa <_printf_i+0x1d2>
 801a24a:	2f58      	cmp	r7, #88	; 0x58
 801a24c:	f000 80a3 	beq.w	801a396 <_printf_i+0x16e>
 801a250:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a258:	e03a      	b.n	801a2d0 <_printf_i+0xa8>
 801a25a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a25e:	2b15      	cmp	r3, #21
 801a260:	d8f6      	bhi.n	801a250 <_printf_i+0x28>
 801a262:	a001      	add	r0, pc, #4	; (adr r0, 801a268 <_printf_i+0x40>)
 801a264:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a268:	0801a2c1 	.word	0x0801a2c1
 801a26c:	0801a2d5 	.word	0x0801a2d5
 801a270:	0801a251 	.word	0x0801a251
 801a274:	0801a251 	.word	0x0801a251
 801a278:	0801a251 	.word	0x0801a251
 801a27c:	0801a251 	.word	0x0801a251
 801a280:	0801a2d5 	.word	0x0801a2d5
 801a284:	0801a251 	.word	0x0801a251
 801a288:	0801a251 	.word	0x0801a251
 801a28c:	0801a251 	.word	0x0801a251
 801a290:	0801a251 	.word	0x0801a251
 801a294:	0801a3e1 	.word	0x0801a3e1
 801a298:	0801a305 	.word	0x0801a305
 801a29c:	0801a3c3 	.word	0x0801a3c3
 801a2a0:	0801a251 	.word	0x0801a251
 801a2a4:	0801a251 	.word	0x0801a251
 801a2a8:	0801a403 	.word	0x0801a403
 801a2ac:	0801a251 	.word	0x0801a251
 801a2b0:	0801a305 	.word	0x0801a305
 801a2b4:	0801a251 	.word	0x0801a251
 801a2b8:	0801a251 	.word	0x0801a251
 801a2bc:	0801a3cb 	.word	0x0801a3cb
 801a2c0:	680b      	ldr	r3, [r1, #0]
 801a2c2:	1d1a      	adds	r2, r3, #4
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	600a      	str	r2, [r1, #0]
 801a2c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a2cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	e0a3      	b.n	801a41c <_printf_i+0x1f4>
 801a2d4:	6825      	ldr	r5, [r4, #0]
 801a2d6:	6808      	ldr	r0, [r1, #0]
 801a2d8:	062e      	lsls	r6, r5, #24
 801a2da:	f100 0304 	add.w	r3, r0, #4
 801a2de:	d50a      	bpl.n	801a2f6 <_printf_i+0xce>
 801a2e0:	6805      	ldr	r5, [r0, #0]
 801a2e2:	600b      	str	r3, [r1, #0]
 801a2e4:	2d00      	cmp	r5, #0
 801a2e6:	da03      	bge.n	801a2f0 <_printf_i+0xc8>
 801a2e8:	232d      	movs	r3, #45	; 0x2d
 801a2ea:	426d      	negs	r5, r5
 801a2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2f0:	485e      	ldr	r0, [pc, #376]	; (801a46c <_printf_i+0x244>)
 801a2f2:	230a      	movs	r3, #10
 801a2f4:	e019      	b.n	801a32a <_printf_i+0x102>
 801a2f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a2fa:	6805      	ldr	r5, [r0, #0]
 801a2fc:	600b      	str	r3, [r1, #0]
 801a2fe:	bf18      	it	ne
 801a300:	b22d      	sxthne	r5, r5
 801a302:	e7ef      	b.n	801a2e4 <_printf_i+0xbc>
 801a304:	680b      	ldr	r3, [r1, #0]
 801a306:	6825      	ldr	r5, [r4, #0]
 801a308:	1d18      	adds	r0, r3, #4
 801a30a:	6008      	str	r0, [r1, #0]
 801a30c:	0628      	lsls	r0, r5, #24
 801a30e:	d501      	bpl.n	801a314 <_printf_i+0xec>
 801a310:	681d      	ldr	r5, [r3, #0]
 801a312:	e002      	b.n	801a31a <_printf_i+0xf2>
 801a314:	0669      	lsls	r1, r5, #25
 801a316:	d5fb      	bpl.n	801a310 <_printf_i+0xe8>
 801a318:	881d      	ldrh	r5, [r3, #0]
 801a31a:	4854      	ldr	r0, [pc, #336]	; (801a46c <_printf_i+0x244>)
 801a31c:	2f6f      	cmp	r7, #111	; 0x6f
 801a31e:	bf0c      	ite	eq
 801a320:	2308      	moveq	r3, #8
 801a322:	230a      	movne	r3, #10
 801a324:	2100      	movs	r1, #0
 801a326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a32a:	6866      	ldr	r6, [r4, #4]
 801a32c:	60a6      	str	r6, [r4, #8]
 801a32e:	2e00      	cmp	r6, #0
 801a330:	bfa2      	ittt	ge
 801a332:	6821      	ldrge	r1, [r4, #0]
 801a334:	f021 0104 	bicge.w	r1, r1, #4
 801a338:	6021      	strge	r1, [r4, #0]
 801a33a:	b90d      	cbnz	r5, 801a340 <_printf_i+0x118>
 801a33c:	2e00      	cmp	r6, #0
 801a33e:	d04d      	beq.n	801a3dc <_printf_i+0x1b4>
 801a340:	4616      	mov	r6, r2
 801a342:	fbb5 f1f3 	udiv	r1, r5, r3
 801a346:	fb03 5711 	mls	r7, r3, r1, r5
 801a34a:	5dc7      	ldrb	r7, [r0, r7]
 801a34c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a350:	462f      	mov	r7, r5
 801a352:	42bb      	cmp	r3, r7
 801a354:	460d      	mov	r5, r1
 801a356:	d9f4      	bls.n	801a342 <_printf_i+0x11a>
 801a358:	2b08      	cmp	r3, #8
 801a35a:	d10b      	bne.n	801a374 <_printf_i+0x14c>
 801a35c:	6823      	ldr	r3, [r4, #0]
 801a35e:	07df      	lsls	r7, r3, #31
 801a360:	d508      	bpl.n	801a374 <_printf_i+0x14c>
 801a362:	6923      	ldr	r3, [r4, #16]
 801a364:	6861      	ldr	r1, [r4, #4]
 801a366:	4299      	cmp	r1, r3
 801a368:	bfde      	ittt	le
 801a36a:	2330      	movle	r3, #48	; 0x30
 801a36c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a370:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a374:	1b92      	subs	r2, r2, r6
 801a376:	6122      	str	r2, [r4, #16]
 801a378:	f8cd a000 	str.w	sl, [sp]
 801a37c:	464b      	mov	r3, r9
 801a37e:	aa03      	add	r2, sp, #12
 801a380:	4621      	mov	r1, r4
 801a382:	4640      	mov	r0, r8
 801a384:	f7ff fee2 	bl	801a14c <_printf_common>
 801a388:	3001      	adds	r0, #1
 801a38a:	d14c      	bne.n	801a426 <_printf_i+0x1fe>
 801a38c:	f04f 30ff 	mov.w	r0, #4294967295
 801a390:	b004      	add	sp, #16
 801a392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a396:	4835      	ldr	r0, [pc, #212]	; (801a46c <_printf_i+0x244>)
 801a398:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a39c:	6823      	ldr	r3, [r4, #0]
 801a39e:	680e      	ldr	r6, [r1, #0]
 801a3a0:	061f      	lsls	r7, r3, #24
 801a3a2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a3a6:	600e      	str	r6, [r1, #0]
 801a3a8:	d514      	bpl.n	801a3d4 <_printf_i+0x1ac>
 801a3aa:	07d9      	lsls	r1, r3, #31
 801a3ac:	bf44      	itt	mi
 801a3ae:	f043 0320 	orrmi.w	r3, r3, #32
 801a3b2:	6023      	strmi	r3, [r4, #0]
 801a3b4:	b91d      	cbnz	r5, 801a3be <_printf_i+0x196>
 801a3b6:	6823      	ldr	r3, [r4, #0]
 801a3b8:	f023 0320 	bic.w	r3, r3, #32
 801a3bc:	6023      	str	r3, [r4, #0]
 801a3be:	2310      	movs	r3, #16
 801a3c0:	e7b0      	b.n	801a324 <_printf_i+0xfc>
 801a3c2:	6823      	ldr	r3, [r4, #0]
 801a3c4:	f043 0320 	orr.w	r3, r3, #32
 801a3c8:	6023      	str	r3, [r4, #0]
 801a3ca:	2378      	movs	r3, #120	; 0x78
 801a3cc:	4828      	ldr	r0, [pc, #160]	; (801a470 <_printf_i+0x248>)
 801a3ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a3d2:	e7e3      	b.n	801a39c <_printf_i+0x174>
 801a3d4:	065e      	lsls	r6, r3, #25
 801a3d6:	bf48      	it	mi
 801a3d8:	b2ad      	uxthmi	r5, r5
 801a3da:	e7e6      	b.n	801a3aa <_printf_i+0x182>
 801a3dc:	4616      	mov	r6, r2
 801a3de:	e7bb      	b.n	801a358 <_printf_i+0x130>
 801a3e0:	680b      	ldr	r3, [r1, #0]
 801a3e2:	6826      	ldr	r6, [r4, #0]
 801a3e4:	6960      	ldr	r0, [r4, #20]
 801a3e6:	1d1d      	adds	r5, r3, #4
 801a3e8:	600d      	str	r5, [r1, #0]
 801a3ea:	0635      	lsls	r5, r6, #24
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	d501      	bpl.n	801a3f4 <_printf_i+0x1cc>
 801a3f0:	6018      	str	r0, [r3, #0]
 801a3f2:	e002      	b.n	801a3fa <_printf_i+0x1d2>
 801a3f4:	0671      	lsls	r1, r6, #25
 801a3f6:	d5fb      	bpl.n	801a3f0 <_printf_i+0x1c8>
 801a3f8:	8018      	strh	r0, [r3, #0]
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	6123      	str	r3, [r4, #16]
 801a3fe:	4616      	mov	r6, r2
 801a400:	e7ba      	b.n	801a378 <_printf_i+0x150>
 801a402:	680b      	ldr	r3, [r1, #0]
 801a404:	1d1a      	adds	r2, r3, #4
 801a406:	600a      	str	r2, [r1, #0]
 801a408:	681e      	ldr	r6, [r3, #0]
 801a40a:	6862      	ldr	r2, [r4, #4]
 801a40c:	2100      	movs	r1, #0
 801a40e:	4630      	mov	r0, r6
 801a410:	f7e5 fef6 	bl	8000200 <memchr>
 801a414:	b108      	cbz	r0, 801a41a <_printf_i+0x1f2>
 801a416:	1b80      	subs	r0, r0, r6
 801a418:	6060      	str	r0, [r4, #4]
 801a41a:	6863      	ldr	r3, [r4, #4]
 801a41c:	6123      	str	r3, [r4, #16]
 801a41e:	2300      	movs	r3, #0
 801a420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a424:	e7a8      	b.n	801a378 <_printf_i+0x150>
 801a426:	6923      	ldr	r3, [r4, #16]
 801a428:	4632      	mov	r2, r6
 801a42a:	4649      	mov	r1, r9
 801a42c:	4640      	mov	r0, r8
 801a42e:	47d0      	blx	sl
 801a430:	3001      	adds	r0, #1
 801a432:	d0ab      	beq.n	801a38c <_printf_i+0x164>
 801a434:	6823      	ldr	r3, [r4, #0]
 801a436:	079b      	lsls	r3, r3, #30
 801a438:	d413      	bmi.n	801a462 <_printf_i+0x23a>
 801a43a:	68e0      	ldr	r0, [r4, #12]
 801a43c:	9b03      	ldr	r3, [sp, #12]
 801a43e:	4298      	cmp	r0, r3
 801a440:	bfb8      	it	lt
 801a442:	4618      	movlt	r0, r3
 801a444:	e7a4      	b.n	801a390 <_printf_i+0x168>
 801a446:	2301      	movs	r3, #1
 801a448:	4632      	mov	r2, r6
 801a44a:	4649      	mov	r1, r9
 801a44c:	4640      	mov	r0, r8
 801a44e:	47d0      	blx	sl
 801a450:	3001      	adds	r0, #1
 801a452:	d09b      	beq.n	801a38c <_printf_i+0x164>
 801a454:	3501      	adds	r5, #1
 801a456:	68e3      	ldr	r3, [r4, #12]
 801a458:	9903      	ldr	r1, [sp, #12]
 801a45a:	1a5b      	subs	r3, r3, r1
 801a45c:	42ab      	cmp	r3, r5
 801a45e:	dcf2      	bgt.n	801a446 <_printf_i+0x21e>
 801a460:	e7eb      	b.n	801a43a <_printf_i+0x212>
 801a462:	2500      	movs	r5, #0
 801a464:	f104 0619 	add.w	r6, r4, #25
 801a468:	e7f5      	b.n	801a456 <_printf_i+0x22e>
 801a46a:	bf00      	nop
 801a46c:	08020b58 	.word	0x08020b58
 801a470:	08020b69 	.word	0x08020b69

0801a474 <_scanf_float>:
 801a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a478:	b087      	sub	sp, #28
 801a47a:	4617      	mov	r7, r2
 801a47c:	9303      	str	r3, [sp, #12]
 801a47e:	688b      	ldr	r3, [r1, #8]
 801a480:	1e5a      	subs	r2, r3, #1
 801a482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a486:	bf83      	ittte	hi
 801a488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a48c:	195b      	addhi	r3, r3, r5
 801a48e:	9302      	strhi	r3, [sp, #8]
 801a490:	2300      	movls	r3, #0
 801a492:	bf86      	itte	hi
 801a494:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a498:	608b      	strhi	r3, [r1, #8]
 801a49a:	9302      	strls	r3, [sp, #8]
 801a49c:	680b      	ldr	r3, [r1, #0]
 801a49e:	468b      	mov	fp, r1
 801a4a0:	2500      	movs	r5, #0
 801a4a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a4a6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a4aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a4ae:	4680      	mov	r8, r0
 801a4b0:	460c      	mov	r4, r1
 801a4b2:	465e      	mov	r6, fp
 801a4b4:	46aa      	mov	sl, r5
 801a4b6:	46a9      	mov	r9, r5
 801a4b8:	9501      	str	r5, [sp, #4]
 801a4ba:	68a2      	ldr	r2, [r4, #8]
 801a4bc:	b152      	cbz	r2, 801a4d4 <_scanf_float+0x60>
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	2b4e      	cmp	r3, #78	; 0x4e
 801a4c4:	d864      	bhi.n	801a590 <_scanf_float+0x11c>
 801a4c6:	2b40      	cmp	r3, #64	; 0x40
 801a4c8:	d83c      	bhi.n	801a544 <_scanf_float+0xd0>
 801a4ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a4ce:	b2c8      	uxtb	r0, r1
 801a4d0:	280e      	cmp	r0, #14
 801a4d2:	d93a      	bls.n	801a54a <_scanf_float+0xd6>
 801a4d4:	f1b9 0f00 	cmp.w	r9, #0
 801a4d8:	d003      	beq.n	801a4e2 <_scanf_float+0x6e>
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4e6:	f1ba 0f01 	cmp.w	sl, #1
 801a4ea:	f200 8113 	bhi.w	801a714 <_scanf_float+0x2a0>
 801a4ee:	455e      	cmp	r6, fp
 801a4f0:	f200 8105 	bhi.w	801a6fe <_scanf_float+0x28a>
 801a4f4:	2501      	movs	r5, #1
 801a4f6:	4628      	mov	r0, r5
 801a4f8:	b007      	add	sp, #28
 801a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a502:	2a0d      	cmp	r2, #13
 801a504:	d8e6      	bhi.n	801a4d4 <_scanf_float+0x60>
 801a506:	a101      	add	r1, pc, #4	; (adr r1, 801a50c <_scanf_float+0x98>)
 801a508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a50c:	0801a64b 	.word	0x0801a64b
 801a510:	0801a4d5 	.word	0x0801a4d5
 801a514:	0801a4d5 	.word	0x0801a4d5
 801a518:	0801a4d5 	.word	0x0801a4d5
 801a51c:	0801a6ab 	.word	0x0801a6ab
 801a520:	0801a683 	.word	0x0801a683
 801a524:	0801a4d5 	.word	0x0801a4d5
 801a528:	0801a4d5 	.word	0x0801a4d5
 801a52c:	0801a659 	.word	0x0801a659
 801a530:	0801a4d5 	.word	0x0801a4d5
 801a534:	0801a4d5 	.word	0x0801a4d5
 801a538:	0801a4d5 	.word	0x0801a4d5
 801a53c:	0801a4d5 	.word	0x0801a4d5
 801a540:	0801a611 	.word	0x0801a611
 801a544:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a548:	e7db      	b.n	801a502 <_scanf_float+0x8e>
 801a54a:	290e      	cmp	r1, #14
 801a54c:	d8c2      	bhi.n	801a4d4 <_scanf_float+0x60>
 801a54e:	a001      	add	r0, pc, #4	; (adr r0, 801a554 <_scanf_float+0xe0>)
 801a550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a554:	0801a603 	.word	0x0801a603
 801a558:	0801a4d5 	.word	0x0801a4d5
 801a55c:	0801a603 	.word	0x0801a603
 801a560:	0801a697 	.word	0x0801a697
 801a564:	0801a4d5 	.word	0x0801a4d5
 801a568:	0801a5b1 	.word	0x0801a5b1
 801a56c:	0801a5ed 	.word	0x0801a5ed
 801a570:	0801a5ed 	.word	0x0801a5ed
 801a574:	0801a5ed 	.word	0x0801a5ed
 801a578:	0801a5ed 	.word	0x0801a5ed
 801a57c:	0801a5ed 	.word	0x0801a5ed
 801a580:	0801a5ed 	.word	0x0801a5ed
 801a584:	0801a5ed 	.word	0x0801a5ed
 801a588:	0801a5ed 	.word	0x0801a5ed
 801a58c:	0801a5ed 	.word	0x0801a5ed
 801a590:	2b6e      	cmp	r3, #110	; 0x6e
 801a592:	d809      	bhi.n	801a5a8 <_scanf_float+0x134>
 801a594:	2b60      	cmp	r3, #96	; 0x60
 801a596:	d8b2      	bhi.n	801a4fe <_scanf_float+0x8a>
 801a598:	2b54      	cmp	r3, #84	; 0x54
 801a59a:	d077      	beq.n	801a68c <_scanf_float+0x218>
 801a59c:	2b59      	cmp	r3, #89	; 0x59
 801a59e:	d199      	bne.n	801a4d4 <_scanf_float+0x60>
 801a5a0:	2d07      	cmp	r5, #7
 801a5a2:	d197      	bne.n	801a4d4 <_scanf_float+0x60>
 801a5a4:	2508      	movs	r5, #8
 801a5a6:	e029      	b.n	801a5fc <_scanf_float+0x188>
 801a5a8:	2b74      	cmp	r3, #116	; 0x74
 801a5aa:	d06f      	beq.n	801a68c <_scanf_float+0x218>
 801a5ac:	2b79      	cmp	r3, #121	; 0x79
 801a5ae:	e7f6      	b.n	801a59e <_scanf_float+0x12a>
 801a5b0:	6821      	ldr	r1, [r4, #0]
 801a5b2:	05c8      	lsls	r0, r1, #23
 801a5b4:	d51a      	bpl.n	801a5ec <_scanf_float+0x178>
 801a5b6:	9b02      	ldr	r3, [sp, #8]
 801a5b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a5bc:	6021      	str	r1, [r4, #0]
 801a5be:	f109 0901 	add.w	r9, r9, #1
 801a5c2:	b11b      	cbz	r3, 801a5cc <_scanf_float+0x158>
 801a5c4:	3b01      	subs	r3, #1
 801a5c6:	3201      	adds	r2, #1
 801a5c8:	9302      	str	r3, [sp, #8]
 801a5ca:	60a2      	str	r2, [r4, #8]
 801a5cc:	68a3      	ldr	r3, [r4, #8]
 801a5ce:	3b01      	subs	r3, #1
 801a5d0:	60a3      	str	r3, [r4, #8]
 801a5d2:	6923      	ldr	r3, [r4, #16]
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	6123      	str	r3, [r4, #16]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	3b01      	subs	r3, #1
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	607b      	str	r3, [r7, #4]
 801a5e0:	f340 8084 	ble.w	801a6ec <_scanf_float+0x278>
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	603b      	str	r3, [r7, #0]
 801a5ea:	e766      	b.n	801a4ba <_scanf_float+0x46>
 801a5ec:	eb1a 0f05 	cmn.w	sl, r5
 801a5f0:	f47f af70 	bne.w	801a4d4 <_scanf_float+0x60>
 801a5f4:	6822      	ldr	r2, [r4, #0]
 801a5f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a5fa:	6022      	str	r2, [r4, #0]
 801a5fc:	f806 3b01 	strb.w	r3, [r6], #1
 801a600:	e7e4      	b.n	801a5cc <_scanf_float+0x158>
 801a602:	6822      	ldr	r2, [r4, #0]
 801a604:	0610      	lsls	r0, r2, #24
 801a606:	f57f af65 	bpl.w	801a4d4 <_scanf_float+0x60>
 801a60a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a60e:	e7f4      	b.n	801a5fa <_scanf_float+0x186>
 801a610:	f1ba 0f00 	cmp.w	sl, #0
 801a614:	d10e      	bne.n	801a634 <_scanf_float+0x1c0>
 801a616:	f1b9 0f00 	cmp.w	r9, #0
 801a61a:	d10e      	bne.n	801a63a <_scanf_float+0x1c6>
 801a61c:	6822      	ldr	r2, [r4, #0]
 801a61e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a622:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a626:	d108      	bne.n	801a63a <_scanf_float+0x1c6>
 801a628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a62c:	6022      	str	r2, [r4, #0]
 801a62e:	f04f 0a01 	mov.w	sl, #1
 801a632:	e7e3      	b.n	801a5fc <_scanf_float+0x188>
 801a634:	f1ba 0f02 	cmp.w	sl, #2
 801a638:	d055      	beq.n	801a6e6 <_scanf_float+0x272>
 801a63a:	2d01      	cmp	r5, #1
 801a63c:	d002      	beq.n	801a644 <_scanf_float+0x1d0>
 801a63e:	2d04      	cmp	r5, #4
 801a640:	f47f af48 	bne.w	801a4d4 <_scanf_float+0x60>
 801a644:	3501      	adds	r5, #1
 801a646:	b2ed      	uxtb	r5, r5
 801a648:	e7d8      	b.n	801a5fc <_scanf_float+0x188>
 801a64a:	f1ba 0f01 	cmp.w	sl, #1
 801a64e:	f47f af41 	bne.w	801a4d4 <_scanf_float+0x60>
 801a652:	f04f 0a02 	mov.w	sl, #2
 801a656:	e7d1      	b.n	801a5fc <_scanf_float+0x188>
 801a658:	b97d      	cbnz	r5, 801a67a <_scanf_float+0x206>
 801a65a:	f1b9 0f00 	cmp.w	r9, #0
 801a65e:	f47f af3c 	bne.w	801a4da <_scanf_float+0x66>
 801a662:	6822      	ldr	r2, [r4, #0]
 801a664:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a668:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a66c:	f47f af39 	bne.w	801a4e2 <_scanf_float+0x6e>
 801a670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a674:	6022      	str	r2, [r4, #0]
 801a676:	2501      	movs	r5, #1
 801a678:	e7c0      	b.n	801a5fc <_scanf_float+0x188>
 801a67a:	2d03      	cmp	r5, #3
 801a67c:	d0e2      	beq.n	801a644 <_scanf_float+0x1d0>
 801a67e:	2d05      	cmp	r5, #5
 801a680:	e7de      	b.n	801a640 <_scanf_float+0x1cc>
 801a682:	2d02      	cmp	r5, #2
 801a684:	f47f af26 	bne.w	801a4d4 <_scanf_float+0x60>
 801a688:	2503      	movs	r5, #3
 801a68a:	e7b7      	b.n	801a5fc <_scanf_float+0x188>
 801a68c:	2d06      	cmp	r5, #6
 801a68e:	f47f af21 	bne.w	801a4d4 <_scanf_float+0x60>
 801a692:	2507      	movs	r5, #7
 801a694:	e7b2      	b.n	801a5fc <_scanf_float+0x188>
 801a696:	6822      	ldr	r2, [r4, #0]
 801a698:	0591      	lsls	r1, r2, #22
 801a69a:	f57f af1b 	bpl.w	801a4d4 <_scanf_float+0x60>
 801a69e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a6a2:	6022      	str	r2, [r4, #0]
 801a6a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a6a8:	e7a8      	b.n	801a5fc <_scanf_float+0x188>
 801a6aa:	6822      	ldr	r2, [r4, #0]
 801a6ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a6b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a6b4:	d006      	beq.n	801a6c4 <_scanf_float+0x250>
 801a6b6:	0550      	lsls	r0, r2, #21
 801a6b8:	f57f af0c 	bpl.w	801a4d4 <_scanf_float+0x60>
 801a6bc:	f1b9 0f00 	cmp.w	r9, #0
 801a6c0:	f43f af0f 	beq.w	801a4e2 <_scanf_float+0x6e>
 801a6c4:	0591      	lsls	r1, r2, #22
 801a6c6:	bf58      	it	pl
 801a6c8:	9901      	ldrpl	r1, [sp, #4]
 801a6ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a6ce:	bf58      	it	pl
 801a6d0:	eba9 0101 	subpl.w	r1, r9, r1
 801a6d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a6d8:	bf58      	it	pl
 801a6da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a6de:	6022      	str	r2, [r4, #0]
 801a6e0:	f04f 0900 	mov.w	r9, #0
 801a6e4:	e78a      	b.n	801a5fc <_scanf_float+0x188>
 801a6e6:	f04f 0a03 	mov.w	sl, #3
 801a6ea:	e787      	b.n	801a5fc <_scanf_float+0x188>
 801a6ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a6f0:	4639      	mov	r1, r7
 801a6f2:	4640      	mov	r0, r8
 801a6f4:	4798      	blx	r3
 801a6f6:	2800      	cmp	r0, #0
 801a6f8:	f43f aedf 	beq.w	801a4ba <_scanf_float+0x46>
 801a6fc:	e6ea      	b.n	801a4d4 <_scanf_float+0x60>
 801a6fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a706:	463a      	mov	r2, r7
 801a708:	4640      	mov	r0, r8
 801a70a:	4798      	blx	r3
 801a70c:	6923      	ldr	r3, [r4, #16]
 801a70e:	3b01      	subs	r3, #1
 801a710:	6123      	str	r3, [r4, #16]
 801a712:	e6ec      	b.n	801a4ee <_scanf_float+0x7a>
 801a714:	1e6b      	subs	r3, r5, #1
 801a716:	2b06      	cmp	r3, #6
 801a718:	d825      	bhi.n	801a766 <_scanf_float+0x2f2>
 801a71a:	2d02      	cmp	r5, #2
 801a71c:	d836      	bhi.n	801a78c <_scanf_float+0x318>
 801a71e:	455e      	cmp	r6, fp
 801a720:	f67f aee8 	bls.w	801a4f4 <_scanf_float+0x80>
 801a724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a72c:	463a      	mov	r2, r7
 801a72e:	4640      	mov	r0, r8
 801a730:	4798      	blx	r3
 801a732:	6923      	ldr	r3, [r4, #16]
 801a734:	3b01      	subs	r3, #1
 801a736:	6123      	str	r3, [r4, #16]
 801a738:	e7f1      	b.n	801a71e <_scanf_float+0x2aa>
 801a73a:	9802      	ldr	r0, [sp, #8]
 801a73c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a740:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a744:	9002      	str	r0, [sp, #8]
 801a746:	463a      	mov	r2, r7
 801a748:	4640      	mov	r0, r8
 801a74a:	4798      	blx	r3
 801a74c:	6923      	ldr	r3, [r4, #16]
 801a74e:	3b01      	subs	r3, #1
 801a750:	6123      	str	r3, [r4, #16]
 801a752:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a756:	fa5f fa8a 	uxtb.w	sl, sl
 801a75a:	f1ba 0f02 	cmp.w	sl, #2
 801a75e:	d1ec      	bne.n	801a73a <_scanf_float+0x2c6>
 801a760:	3d03      	subs	r5, #3
 801a762:	b2ed      	uxtb	r5, r5
 801a764:	1b76      	subs	r6, r6, r5
 801a766:	6823      	ldr	r3, [r4, #0]
 801a768:	05da      	lsls	r2, r3, #23
 801a76a:	d52f      	bpl.n	801a7cc <_scanf_float+0x358>
 801a76c:	055b      	lsls	r3, r3, #21
 801a76e:	d510      	bpl.n	801a792 <_scanf_float+0x31e>
 801a770:	455e      	cmp	r6, fp
 801a772:	f67f aebf 	bls.w	801a4f4 <_scanf_float+0x80>
 801a776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a77a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a77e:	463a      	mov	r2, r7
 801a780:	4640      	mov	r0, r8
 801a782:	4798      	blx	r3
 801a784:	6923      	ldr	r3, [r4, #16]
 801a786:	3b01      	subs	r3, #1
 801a788:	6123      	str	r3, [r4, #16]
 801a78a:	e7f1      	b.n	801a770 <_scanf_float+0x2fc>
 801a78c:	46aa      	mov	sl, r5
 801a78e:	9602      	str	r6, [sp, #8]
 801a790:	e7df      	b.n	801a752 <_scanf_float+0x2de>
 801a792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a796:	6923      	ldr	r3, [r4, #16]
 801a798:	2965      	cmp	r1, #101	; 0x65
 801a79a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a79e:	f106 35ff 	add.w	r5, r6, #4294967295
 801a7a2:	6123      	str	r3, [r4, #16]
 801a7a4:	d00c      	beq.n	801a7c0 <_scanf_float+0x34c>
 801a7a6:	2945      	cmp	r1, #69	; 0x45
 801a7a8:	d00a      	beq.n	801a7c0 <_scanf_float+0x34c>
 801a7aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a7ae:	463a      	mov	r2, r7
 801a7b0:	4640      	mov	r0, r8
 801a7b2:	4798      	blx	r3
 801a7b4:	6923      	ldr	r3, [r4, #16]
 801a7b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	1eb5      	subs	r5, r6, #2
 801a7be:	6123      	str	r3, [r4, #16]
 801a7c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a7c4:	463a      	mov	r2, r7
 801a7c6:	4640      	mov	r0, r8
 801a7c8:	4798      	blx	r3
 801a7ca:	462e      	mov	r6, r5
 801a7cc:	6825      	ldr	r5, [r4, #0]
 801a7ce:	f015 0510 	ands.w	r5, r5, #16
 801a7d2:	d158      	bne.n	801a886 <_scanf_float+0x412>
 801a7d4:	7035      	strb	r5, [r6, #0]
 801a7d6:	6823      	ldr	r3, [r4, #0]
 801a7d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a7dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a7e0:	d11c      	bne.n	801a81c <_scanf_float+0x3a8>
 801a7e2:	9b01      	ldr	r3, [sp, #4]
 801a7e4:	454b      	cmp	r3, r9
 801a7e6:	eba3 0209 	sub.w	r2, r3, r9
 801a7ea:	d124      	bne.n	801a836 <_scanf_float+0x3c2>
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	4659      	mov	r1, fp
 801a7f0:	4640      	mov	r0, r8
 801a7f2:	f001 f873 	bl	801b8dc <_strtod_r>
 801a7f6:	9b03      	ldr	r3, [sp, #12]
 801a7f8:	6821      	ldr	r1, [r4, #0]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	f011 0f02 	tst.w	r1, #2
 801a800:	ec57 6b10 	vmov	r6, r7, d0
 801a804:	f103 0204 	add.w	r2, r3, #4
 801a808:	d020      	beq.n	801a84c <_scanf_float+0x3d8>
 801a80a:	9903      	ldr	r1, [sp, #12]
 801a80c:	600a      	str	r2, [r1, #0]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	e9c3 6700 	strd	r6, r7, [r3]
 801a814:	68e3      	ldr	r3, [r4, #12]
 801a816:	3301      	adds	r3, #1
 801a818:	60e3      	str	r3, [r4, #12]
 801a81a:	e66c      	b.n	801a4f6 <_scanf_float+0x82>
 801a81c:	9b04      	ldr	r3, [sp, #16]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d0e4      	beq.n	801a7ec <_scanf_float+0x378>
 801a822:	9905      	ldr	r1, [sp, #20]
 801a824:	230a      	movs	r3, #10
 801a826:	462a      	mov	r2, r5
 801a828:	3101      	adds	r1, #1
 801a82a:	4640      	mov	r0, r8
 801a82c:	f001 f8e0 	bl	801b9f0 <_strtol_r>
 801a830:	9b04      	ldr	r3, [sp, #16]
 801a832:	9e05      	ldr	r6, [sp, #20]
 801a834:	1ac2      	subs	r2, r0, r3
 801a836:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a83a:	429e      	cmp	r6, r3
 801a83c:	bf28      	it	cs
 801a83e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a842:	4912      	ldr	r1, [pc, #72]	; (801a88c <_scanf_float+0x418>)
 801a844:	4630      	mov	r0, r6
 801a846:	f000 f977 	bl	801ab38 <siprintf>
 801a84a:	e7cf      	b.n	801a7ec <_scanf_float+0x378>
 801a84c:	f011 0f04 	tst.w	r1, #4
 801a850:	9903      	ldr	r1, [sp, #12]
 801a852:	600a      	str	r2, [r1, #0]
 801a854:	d1db      	bne.n	801a80e <_scanf_float+0x39a>
 801a856:	f8d3 8000 	ldr.w	r8, [r3]
 801a85a:	ee10 2a10 	vmov	r2, s0
 801a85e:	ee10 0a10 	vmov	r0, s0
 801a862:	463b      	mov	r3, r7
 801a864:	4639      	mov	r1, r7
 801a866:	f7e6 f971 	bl	8000b4c <__aeabi_dcmpun>
 801a86a:	b128      	cbz	r0, 801a878 <_scanf_float+0x404>
 801a86c:	4808      	ldr	r0, [pc, #32]	; (801a890 <_scanf_float+0x41c>)
 801a86e:	f000 f919 	bl	801aaa4 <nanf>
 801a872:	ed88 0a00 	vstr	s0, [r8]
 801a876:	e7cd      	b.n	801a814 <_scanf_float+0x3a0>
 801a878:	4630      	mov	r0, r6
 801a87a:	4639      	mov	r1, r7
 801a87c:	f7e6 f9c4 	bl	8000c08 <__aeabi_d2f>
 801a880:	f8c8 0000 	str.w	r0, [r8]
 801a884:	e7c6      	b.n	801a814 <_scanf_float+0x3a0>
 801a886:	2500      	movs	r5, #0
 801a888:	e635      	b.n	801a4f6 <_scanf_float+0x82>
 801a88a:	bf00      	nop
 801a88c:	08020b7a 	.word	0x08020b7a
 801a890:	08020c0b 	.word	0x08020c0b

0801a894 <iprintf>:
 801a894:	b40f      	push	{r0, r1, r2, r3}
 801a896:	4b0a      	ldr	r3, [pc, #40]	; (801a8c0 <iprintf+0x2c>)
 801a898:	b513      	push	{r0, r1, r4, lr}
 801a89a:	681c      	ldr	r4, [r3, #0]
 801a89c:	b124      	cbz	r4, 801a8a8 <iprintf+0x14>
 801a89e:	69a3      	ldr	r3, [r4, #24]
 801a8a0:	b913      	cbnz	r3, 801a8a8 <iprintf+0x14>
 801a8a2:	4620      	mov	r0, r4
 801a8a4:	f7fe ffd4 	bl	8019850 <__sinit>
 801a8a8:	ab05      	add	r3, sp, #20
 801a8aa:	9a04      	ldr	r2, [sp, #16]
 801a8ac:	68a1      	ldr	r1, [r4, #8]
 801a8ae:	9301      	str	r3, [sp, #4]
 801a8b0:	4620      	mov	r0, r4
 801a8b2:	f003 fdfd 	bl	801e4b0 <_vfiprintf_r>
 801a8b6:	b002      	add	sp, #8
 801a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8bc:	b004      	add	sp, #16
 801a8be:	4770      	bx	lr
 801a8c0:	20000200 	.word	0x20000200

0801a8c4 <_puts_r>:
 801a8c4:	b570      	push	{r4, r5, r6, lr}
 801a8c6:	460e      	mov	r6, r1
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	b118      	cbz	r0, 801a8d4 <_puts_r+0x10>
 801a8cc:	6983      	ldr	r3, [r0, #24]
 801a8ce:	b90b      	cbnz	r3, 801a8d4 <_puts_r+0x10>
 801a8d0:	f7fe ffbe 	bl	8019850 <__sinit>
 801a8d4:	69ab      	ldr	r3, [r5, #24]
 801a8d6:	68ac      	ldr	r4, [r5, #8]
 801a8d8:	b913      	cbnz	r3, 801a8e0 <_puts_r+0x1c>
 801a8da:	4628      	mov	r0, r5
 801a8dc:	f7fe ffb8 	bl	8019850 <__sinit>
 801a8e0:	4b2c      	ldr	r3, [pc, #176]	; (801a994 <_puts_r+0xd0>)
 801a8e2:	429c      	cmp	r4, r3
 801a8e4:	d120      	bne.n	801a928 <_puts_r+0x64>
 801a8e6:	686c      	ldr	r4, [r5, #4]
 801a8e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a8ea:	07db      	lsls	r3, r3, #31
 801a8ec:	d405      	bmi.n	801a8fa <_puts_r+0x36>
 801a8ee:	89a3      	ldrh	r3, [r4, #12]
 801a8f0:	0598      	lsls	r0, r3, #22
 801a8f2:	d402      	bmi.n	801a8fa <_puts_r+0x36>
 801a8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8f6:	f7ff f86e 	bl	80199d6 <__retarget_lock_acquire_recursive>
 801a8fa:	89a3      	ldrh	r3, [r4, #12]
 801a8fc:	0719      	lsls	r1, r3, #28
 801a8fe:	d51d      	bpl.n	801a93c <_puts_r+0x78>
 801a900:	6923      	ldr	r3, [r4, #16]
 801a902:	b1db      	cbz	r3, 801a93c <_puts_r+0x78>
 801a904:	3e01      	subs	r6, #1
 801a906:	68a3      	ldr	r3, [r4, #8]
 801a908:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a90c:	3b01      	subs	r3, #1
 801a90e:	60a3      	str	r3, [r4, #8]
 801a910:	bb39      	cbnz	r1, 801a962 <_puts_r+0x9e>
 801a912:	2b00      	cmp	r3, #0
 801a914:	da38      	bge.n	801a988 <_puts_r+0xc4>
 801a916:	4622      	mov	r2, r4
 801a918:	210a      	movs	r1, #10
 801a91a:	4628      	mov	r0, r5
 801a91c:	f001 f92c 	bl	801bb78 <__swbuf_r>
 801a920:	3001      	adds	r0, #1
 801a922:	d011      	beq.n	801a948 <_puts_r+0x84>
 801a924:	250a      	movs	r5, #10
 801a926:	e011      	b.n	801a94c <_puts_r+0x88>
 801a928:	4b1b      	ldr	r3, [pc, #108]	; (801a998 <_puts_r+0xd4>)
 801a92a:	429c      	cmp	r4, r3
 801a92c:	d101      	bne.n	801a932 <_puts_r+0x6e>
 801a92e:	68ac      	ldr	r4, [r5, #8]
 801a930:	e7da      	b.n	801a8e8 <_puts_r+0x24>
 801a932:	4b1a      	ldr	r3, [pc, #104]	; (801a99c <_puts_r+0xd8>)
 801a934:	429c      	cmp	r4, r3
 801a936:	bf08      	it	eq
 801a938:	68ec      	ldreq	r4, [r5, #12]
 801a93a:	e7d5      	b.n	801a8e8 <_puts_r+0x24>
 801a93c:	4621      	mov	r1, r4
 801a93e:	4628      	mov	r0, r5
 801a940:	f001 f97e 	bl	801bc40 <__swsetup_r>
 801a944:	2800      	cmp	r0, #0
 801a946:	d0dd      	beq.n	801a904 <_puts_r+0x40>
 801a948:	f04f 35ff 	mov.w	r5, #4294967295
 801a94c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a94e:	07da      	lsls	r2, r3, #31
 801a950:	d405      	bmi.n	801a95e <_puts_r+0x9a>
 801a952:	89a3      	ldrh	r3, [r4, #12]
 801a954:	059b      	lsls	r3, r3, #22
 801a956:	d402      	bmi.n	801a95e <_puts_r+0x9a>
 801a958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a95a:	f7ff f83d 	bl	80199d8 <__retarget_lock_release_recursive>
 801a95e:	4628      	mov	r0, r5
 801a960:	bd70      	pop	{r4, r5, r6, pc}
 801a962:	2b00      	cmp	r3, #0
 801a964:	da04      	bge.n	801a970 <_puts_r+0xac>
 801a966:	69a2      	ldr	r2, [r4, #24]
 801a968:	429a      	cmp	r2, r3
 801a96a:	dc06      	bgt.n	801a97a <_puts_r+0xb6>
 801a96c:	290a      	cmp	r1, #10
 801a96e:	d004      	beq.n	801a97a <_puts_r+0xb6>
 801a970:	6823      	ldr	r3, [r4, #0]
 801a972:	1c5a      	adds	r2, r3, #1
 801a974:	6022      	str	r2, [r4, #0]
 801a976:	7019      	strb	r1, [r3, #0]
 801a978:	e7c5      	b.n	801a906 <_puts_r+0x42>
 801a97a:	4622      	mov	r2, r4
 801a97c:	4628      	mov	r0, r5
 801a97e:	f001 f8fb 	bl	801bb78 <__swbuf_r>
 801a982:	3001      	adds	r0, #1
 801a984:	d1bf      	bne.n	801a906 <_puts_r+0x42>
 801a986:	e7df      	b.n	801a948 <_puts_r+0x84>
 801a988:	6823      	ldr	r3, [r4, #0]
 801a98a:	250a      	movs	r5, #10
 801a98c:	1c5a      	adds	r2, r3, #1
 801a98e:	6022      	str	r2, [r4, #0]
 801a990:	701d      	strb	r5, [r3, #0]
 801a992:	e7db      	b.n	801a94c <_puts_r+0x88>
 801a994:	08020b04 	.word	0x08020b04
 801a998:	08020b24 	.word	0x08020b24
 801a99c:	08020ae4 	.word	0x08020ae4

0801a9a0 <puts>:
 801a9a0:	4b02      	ldr	r3, [pc, #8]	; (801a9ac <puts+0xc>)
 801a9a2:	4601      	mov	r1, r0
 801a9a4:	6818      	ldr	r0, [r3, #0]
 801a9a6:	f7ff bf8d 	b.w	801a8c4 <_puts_r>
 801a9aa:	bf00      	nop
 801a9ac:	20000200 	.word	0x20000200

0801a9b0 <cleanup_glue>:
 801a9b0:	b538      	push	{r3, r4, r5, lr}
 801a9b2:	460c      	mov	r4, r1
 801a9b4:	6809      	ldr	r1, [r1, #0]
 801a9b6:	4605      	mov	r5, r0
 801a9b8:	b109      	cbz	r1, 801a9be <cleanup_glue+0xe>
 801a9ba:	f7ff fff9 	bl	801a9b0 <cleanup_glue>
 801a9be:	4621      	mov	r1, r4
 801a9c0:	4628      	mov	r0, r5
 801a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9c6:	f7ff b841 	b.w	8019a4c <_free_r>
	...

0801a9cc <_reclaim_reent>:
 801a9cc:	4b2c      	ldr	r3, [pc, #176]	; (801aa80 <_reclaim_reent+0xb4>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	4283      	cmp	r3, r0
 801a9d2:	b570      	push	{r4, r5, r6, lr}
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	d051      	beq.n	801aa7c <_reclaim_reent+0xb0>
 801a9d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a9da:	b143      	cbz	r3, 801a9ee <_reclaim_reent+0x22>
 801a9dc:	68db      	ldr	r3, [r3, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d14a      	bne.n	801aa78 <_reclaim_reent+0xac>
 801a9e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a9e4:	6819      	ldr	r1, [r3, #0]
 801a9e6:	b111      	cbz	r1, 801a9ee <_reclaim_reent+0x22>
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f7ff f82f 	bl	8019a4c <_free_r>
 801a9ee:	6961      	ldr	r1, [r4, #20]
 801a9f0:	b111      	cbz	r1, 801a9f8 <_reclaim_reent+0x2c>
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	f7ff f82a 	bl	8019a4c <_free_r>
 801a9f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a9fa:	b111      	cbz	r1, 801aa02 <_reclaim_reent+0x36>
 801a9fc:	4620      	mov	r0, r4
 801a9fe:	f7ff f825 	bl	8019a4c <_free_r>
 801aa02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801aa04:	b111      	cbz	r1, 801aa0c <_reclaim_reent+0x40>
 801aa06:	4620      	mov	r0, r4
 801aa08:	f7ff f820 	bl	8019a4c <_free_r>
 801aa0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801aa0e:	b111      	cbz	r1, 801aa16 <_reclaim_reent+0x4a>
 801aa10:	4620      	mov	r0, r4
 801aa12:	f7ff f81b 	bl	8019a4c <_free_r>
 801aa16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801aa18:	b111      	cbz	r1, 801aa20 <_reclaim_reent+0x54>
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	f7ff f816 	bl	8019a4c <_free_r>
 801aa20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801aa22:	b111      	cbz	r1, 801aa2a <_reclaim_reent+0x5e>
 801aa24:	4620      	mov	r0, r4
 801aa26:	f7ff f811 	bl	8019a4c <_free_r>
 801aa2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801aa2c:	b111      	cbz	r1, 801aa34 <_reclaim_reent+0x68>
 801aa2e:	4620      	mov	r0, r4
 801aa30:	f7ff f80c 	bl	8019a4c <_free_r>
 801aa34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa36:	b111      	cbz	r1, 801aa3e <_reclaim_reent+0x72>
 801aa38:	4620      	mov	r0, r4
 801aa3a:	f7ff f807 	bl	8019a4c <_free_r>
 801aa3e:	69a3      	ldr	r3, [r4, #24]
 801aa40:	b1e3      	cbz	r3, 801aa7c <_reclaim_reent+0xb0>
 801aa42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801aa44:	4620      	mov	r0, r4
 801aa46:	4798      	blx	r3
 801aa48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801aa4a:	b1b9      	cbz	r1, 801aa7c <_reclaim_reent+0xb0>
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa52:	f7ff bfad 	b.w	801a9b0 <cleanup_glue>
 801aa56:	5949      	ldr	r1, [r1, r5]
 801aa58:	b941      	cbnz	r1, 801aa6c <_reclaim_reent+0xa0>
 801aa5a:	3504      	adds	r5, #4
 801aa5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa5e:	2d80      	cmp	r5, #128	; 0x80
 801aa60:	68d9      	ldr	r1, [r3, #12]
 801aa62:	d1f8      	bne.n	801aa56 <_reclaim_reent+0x8a>
 801aa64:	4620      	mov	r0, r4
 801aa66:	f7fe fff1 	bl	8019a4c <_free_r>
 801aa6a:	e7ba      	b.n	801a9e2 <_reclaim_reent+0x16>
 801aa6c:	680e      	ldr	r6, [r1, #0]
 801aa6e:	4620      	mov	r0, r4
 801aa70:	f7fe ffec 	bl	8019a4c <_free_r>
 801aa74:	4631      	mov	r1, r6
 801aa76:	e7ef      	b.n	801aa58 <_reclaim_reent+0x8c>
 801aa78:	2500      	movs	r5, #0
 801aa7a:	e7ef      	b.n	801aa5c <_reclaim_reent+0x90>
 801aa7c:	bd70      	pop	{r4, r5, r6, pc}
 801aa7e:	bf00      	nop
 801aa80:	20000200 	.word	0x20000200

0801aa84 <_sbrk_r>:
 801aa84:	b538      	push	{r3, r4, r5, lr}
 801aa86:	4d06      	ldr	r5, [pc, #24]	; (801aaa0 <_sbrk_r+0x1c>)
 801aa88:	2300      	movs	r3, #0
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	4608      	mov	r0, r1
 801aa8e:	602b      	str	r3, [r5, #0]
 801aa90:	f7e8 fc28 	bl	80032e4 <_sbrk>
 801aa94:	1c43      	adds	r3, r0, #1
 801aa96:	d102      	bne.n	801aa9e <_sbrk_r+0x1a>
 801aa98:	682b      	ldr	r3, [r5, #0]
 801aa9a:	b103      	cbz	r3, 801aa9e <_sbrk_r+0x1a>
 801aa9c:	6023      	str	r3, [r4, #0]
 801aa9e:	bd38      	pop	{r3, r4, r5, pc}
 801aaa0:	20008e5c 	.word	0x20008e5c

0801aaa4 <nanf>:
 801aaa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aaac <nanf+0x8>
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	7fc00000 	.word	0x7fc00000

0801aab0 <_raise_r>:
 801aab0:	291f      	cmp	r1, #31
 801aab2:	b538      	push	{r3, r4, r5, lr}
 801aab4:	4604      	mov	r4, r0
 801aab6:	460d      	mov	r5, r1
 801aab8:	d904      	bls.n	801aac4 <_raise_r+0x14>
 801aaba:	2316      	movs	r3, #22
 801aabc:	6003      	str	r3, [r0, #0]
 801aabe:	f04f 30ff 	mov.w	r0, #4294967295
 801aac2:	bd38      	pop	{r3, r4, r5, pc}
 801aac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801aac6:	b112      	cbz	r2, 801aace <_raise_r+0x1e>
 801aac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aacc:	b94b      	cbnz	r3, 801aae2 <_raise_r+0x32>
 801aace:	4620      	mov	r0, r4
 801aad0:	f000 f830 	bl	801ab34 <_getpid_r>
 801aad4:	462a      	mov	r2, r5
 801aad6:	4601      	mov	r1, r0
 801aad8:	4620      	mov	r0, r4
 801aada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aade:	f000 b817 	b.w	801ab10 <_kill_r>
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	d00a      	beq.n	801aafc <_raise_r+0x4c>
 801aae6:	1c59      	adds	r1, r3, #1
 801aae8:	d103      	bne.n	801aaf2 <_raise_r+0x42>
 801aaea:	2316      	movs	r3, #22
 801aaec:	6003      	str	r3, [r0, #0]
 801aaee:	2001      	movs	r0, #1
 801aaf0:	e7e7      	b.n	801aac2 <_raise_r+0x12>
 801aaf2:	2400      	movs	r4, #0
 801aaf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801aaf8:	4628      	mov	r0, r5
 801aafa:	4798      	blx	r3
 801aafc:	2000      	movs	r0, #0
 801aafe:	e7e0      	b.n	801aac2 <_raise_r+0x12>

0801ab00 <raise>:
 801ab00:	4b02      	ldr	r3, [pc, #8]	; (801ab0c <raise+0xc>)
 801ab02:	4601      	mov	r1, r0
 801ab04:	6818      	ldr	r0, [r3, #0]
 801ab06:	f7ff bfd3 	b.w	801aab0 <_raise_r>
 801ab0a:	bf00      	nop
 801ab0c:	20000200 	.word	0x20000200

0801ab10 <_kill_r>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	4d07      	ldr	r5, [pc, #28]	; (801ab30 <_kill_r+0x20>)
 801ab14:	2300      	movs	r3, #0
 801ab16:	4604      	mov	r4, r0
 801ab18:	4608      	mov	r0, r1
 801ab1a:	4611      	mov	r1, r2
 801ab1c:	602b      	str	r3, [r5, #0]
 801ab1e:	f7e8 fb59 	bl	80031d4 <_kill>
 801ab22:	1c43      	adds	r3, r0, #1
 801ab24:	d102      	bne.n	801ab2c <_kill_r+0x1c>
 801ab26:	682b      	ldr	r3, [r5, #0]
 801ab28:	b103      	cbz	r3, 801ab2c <_kill_r+0x1c>
 801ab2a:	6023      	str	r3, [r4, #0]
 801ab2c:	bd38      	pop	{r3, r4, r5, pc}
 801ab2e:	bf00      	nop
 801ab30:	20008e5c 	.word	0x20008e5c

0801ab34 <_getpid_r>:
 801ab34:	f7e8 bb46 	b.w	80031c4 <_getpid>

0801ab38 <siprintf>:
 801ab38:	b40e      	push	{r1, r2, r3}
 801ab3a:	b500      	push	{lr}
 801ab3c:	b09c      	sub	sp, #112	; 0x70
 801ab3e:	ab1d      	add	r3, sp, #116	; 0x74
 801ab40:	9002      	str	r0, [sp, #8]
 801ab42:	9006      	str	r0, [sp, #24]
 801ab44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab48:	4809      	ldr	r0, [pc, #36]	; (801ab70 <siprintf+0x38>)
 801ab4a:	9107      	str	r1, [sp, #28]
 801ab4c:	9104      	str	r1, [sp, #16]
 801ab4e:	4909      	ldr	r1, [pc, #36]	; (801ab74 <siprintf+0x3c>)
 801ab50:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab54:	9105      	str	r1, [sp, #20]
 801ab56:	6800      	ldr	r0, [r0, #0]
 801ab58:	9301      	str	r3, [sp, #4]
 801ab5a:	a902      	add	r1, sp, #8
 801ab5c:	f003 f9ac 	bl	801deb8 <_svfiprintf_r>
 801ab60:	9b02      	ldr	r3, [sp, #8]
 801ab62:	2200      	movs	r2, #0
 801ab64:	701a      	strb	r2, [r3, #0]
 801ab66:	b01c      	add	sp, #112	; 0x70
 801ab68:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab6c:	b003      	add	sp, #12
 801ab6e:	4770      	bx	lr
 801ab70:	20000200 	.word	0x20000200
 801ab74:	ffff0208 	.word	0xffff0208

0801ab78 <siscanf>:
 801ab78:	b40e      	push	{r1, r2, r3}
 801ab7a:	b510      	push	{r4, lr}
 801ab7c:	b09f      	sub	sp, #124	; 0x7c
 801ab7e:	ac21      	add	r4, sp, #132	; 0x84
 801ab80:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ab84:	f854 2b04 	ldr.w	r2, [r4], #4
 801ab88:	9201      	str	r2, [sp, #4]
 801ab8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ab8e:	9004      	str	r0, [sp, #16]
 801ab90:	9008      	str	r0, [sp, #32]
 801ab92:	f7e5 fb2d 	bl	80001f0 <strlen>
 801ab96:	4b0c      	ldr	r3, [pc, #48]	; (801abc8 <siscanf+0x50>)
 801ab98:	9005      	str	r0, [sp, #20]
 801ab9a:	9009      	str	r0, [sp, #36]	; 0x24
 801ab9c:	930d      	str	r3, [sp, #52]	; 0x34
 801ab9e:	480b      	ldr	r0, [pc, #44]	; (801abcc <siscanf+0x54>)
 801aba0:	9a01      	ldr	r2, [sp, #4]
 801aba2:	6800      	ldr	r0, [r0, #0]
 801aba4:	9403      	str	r4, [sp, #12]
 801aba6:	2300      	movs	r3, #0
 801aba8:	9311      	str	r3, [sp, #68]	; 0x44
 801abaa:	9316      	str	r3, [sp, #88]	; 0x58
 801abac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801abb4:	a904      	add	r1, sp, #16
 801abb6:	4623      	mov	r3, r4
 801abb8:	f003 fad8 	bl	801e16c <__ssvfiscanf_r>
 801abbc:	b01f      	add	sp, #124	; 0x7c
 801abbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abc2:	b003      	add	sp, #12
 801abc4:	4770      	bx	lr
 801abc6:	bf00      	nop
 801abc8:	0801abf3 	.word	0x0801abf3
 801abcc:	20000200 	.word	0x20000200

0801abd0 <__sread>:
 801abd0:	b510      	push	{r4, lr}
 801abd2:	460c      	mov	r4, r1
 801abd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abd8:	f003 fee6 	bl	801e9a8 <_read_r>
 801abdc:	2800      	cmp	r0, #0
 801abde:	bfab      	itete	ge
 801abe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801abe2:	89a3      	ldrhlt	r3, [r4, #12]
 801abe4:	181b      	addge	r3, r3, r0
 801abe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801abea:	bfac      	ite	ge
 801abec:	6563      	strge	r3, [r4, #84]	; 0x54
 801abee:	81a3      	strhlt	r3, [r4, #12]
 801abf0:	bd10      	pop	{r4, pc}

0801abf2 <__seofread>:
 801abf2:	2000      	movs	r0, #0
 801abf4:	4770      	bx	lr

0801abf6 <__swrite>:
 801abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abfa:	461f      	mov	r7, r3
 801abfc:	898b      	ldrh	r3, [r1, #12]
 801abfe:	05db      	lsls	r3, r3, #23
 801ac00:	4605      	mov	r5, r0
 801ac02:	460c      	mov	r4, r1
 801ac04:	4616      	mov	r6, r2
 801ac06:	d505      	bpl.n	801ac14 <__swrite+0x1e>
 801ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac0c:	2302      	movs	r3, #2
 801ac0e:	2200      	movs	r2, #0
 801ac10:	f002 fb72 	bl	801d2f8 <_lseek_r>
 801ac14:	89a3      	ldrh	r3, [r4, #12]
 801ac16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac1e:	81a3      	strh	r3, [r4, #12]
 801ac20:	4632      	mov	r2, r6
 801ac22:	463b      	mov	r3, r7
 801ac24:	4628      	mov	r0, r5
 801ac26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2a:	f000 bff7 	b.w	801bc1c <_write_r>

0801ac2e <__sseek>:
 801ac2e:	b510      	push	{r4, lr}
 801ac30:	460c      	mov	r4, r1
 801ac32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac36:	f002 fb5f 	bl	801d2f8 <_lseek_r>
 801ac3a:	1c43      	adds	r3, r0, #1
 801ac3c:	89a3      	ldrh	r3, [r4, #12]
 801ac3e:	bf15      	itete	ne
 801ac40:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac4a:	81a3      	strheq	r3, [r4, #12]
 801ac4c:	bf18      	it	ne
 801ac4e:	81a3      	strhne	r3, [r4, #12]
 801ac50:	bd10      	pop	{r4, pc}

0801ac52 <__sclose>:
 801ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac56:	f001 b87f 	b.w	801bd58 <_close_r>

0801ac5a <strcpy>:
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac60:	f803 2b01 	strb.w	r2, [r3], #1
 801ac64:	2a00      	cmp	r2, #0
 801ac66:	d1f9      	bne.n	801ac5c <strcpy+0x2>
 801ac68:	4770      	bx	lr

0801ac6a <strncmp>:
 801ac6a:	b510      	push	{r4, lr}
 801ac6c:	b16a      	cbz	r2, 801ac8a <strncmp+0x20>
 801ac6e:	3901      	subs	r1, #1
 801ac70:	1884      	adds	r4, r0, r2
 801ac72:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ac76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ac7a:	4293      	cmp	r3, r2
 801ac7c:	d103      	bne.n	801ac86 <strncmp+0x1c>
 801ac7e:	42a0      	cmp	r0, r4
 801ac80:	d001      	beq.n	801ac86 <strncmp+0x1c>
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d1f5      	bne.n	801ac72 <strncmp+0x8>
 801ac86:	1a98      	subs	r0, r3, r2
 801ac88:	bd10      	pop	{r4, pc}
 801ac8a:	4610      	mov	r0, r2
 801ac8c:	e7fc      	b.n	801ac88 <strncmp+0x1e>

0801ac8e <sulp>:
 801ac8e:	b570      	push	{r4, r5, r6, lr}
 801ac90:	4604      	mov	r4, r0
 801ac92:	460d      	mov	r5, r1
 801ac94:	ec45 4b10 	vmov	d0, r4, r5
 801ac98:	4616      	mov	r6, r2
 801ac9a:	f002 ff2d 	bl	801daf8 <__ulp>
 801ac9e:	ec51 0b10 	vmov	r0, r1, d0
 801aca2:	b17e      	cbz	r6, 801acc4 <sulp+0x36>
 801aca4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801aca8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801acac:	2b00      	cmp	r3, #0
 801acae:	dd09      	ble.n	801acc4 <sulp+0x36>
 801acb0:	051b      	lsls	r3, r3, #20
 801acb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801acb6:	2400      	movs	r4, #0
 801acb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801acbc:	4622      	mov	r2, r4
 801acbe:	462b      	mov	r3, r5
 801acc0:	f7e5 fcaa 	bl	8000618 <__aeabi_dmul>
 801acc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801acc8 <_strtod_l>:
 801acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801accc:	b0a3      	sub	sp, #140	; 0x8c
 801acce:	461f      	mov	r7, r3
 801acd0:	2300      	movs	r3, #0
 801acd2:	931e      	str	r3, [sp, #120]	; 0x78
 801acd4:	4ba4      	ldr	r3, [pc, #656]	; (801af68 <_strtod_l+0x2a0>)
 801acd6:	9219      	str	r2, [sp, #100]	; 0x64
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	9307      	str	r3, [sp, #28]
 801acdc:	4604      	mov	r4, r0
 801acde:	4618      	mov	r0, r3
 801ace0:	4688      	mov	r8, r1
 801ace2:	f7e5 fa85 	bl	80001f0 <strlen>
 801ace6:	f04f 0a00 	mov.w	sl, #0
 801acea:	4605      	mov	r5, r0
 801acec:	f04f 0b00 	mov.w	fp, #0
 801acf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801acf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801acf6:	781a      	ldrb	r2, [r3, #0]
 801acf8:	2a2b      	cmp	r2, #43	; 0x2b
 801acfa:	d04c      	beq.n	801ad96 <_strtod_l+0xce>
 801acfc:	d839      	bhi.n	801ad72 <_strtod_l+0xaa>
 801acfe:	2a0d      	cmp	r2, #13
 801ad00:	d832      	bhi.n	801ad68 <_strtod_l+0xa0>
 801ad02:	2a08      	cmp	r2, #8
 801ad04:	d832      	bhi.n	801ad6c <_strtod_l+0xa4>
 801ad06:	2a00      	cmp	r2, #0
 801ad08:	d03c      	beq.n	801ad84 <_strtod_l+0xbc>
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	930e      	str	r3, [sp, #56]	; 0x38
 801ad0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ad10:	7833      	ldrb	r3, [r6, #0]
 801ad12:	2b30      	cmp	r3, #48	; 0x30
 801ad14:	f040 80b4 	bne.w	801ae80 <_strtod_l+0x1b8>
 801ad18:	7873      	ldrb	r3, [r6, #1]
 801ad1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ad1e:	2b58      	cmp	r3, #88	; 0x58
 801ad20:	d16c      	bne.n	801adfc <_strtod_l+0x134>
 801ad22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad24:	9301      	str	r3, [sp, #4]
 801ad26:	ab1e      	add	r3, sp, #120	; 0x78
 801ad28:	9702      	str	r7, [sp, #8]
 801ad2a:	9300      	str	r3, [sp, #0]
 801ad2c:	4a8f      	ldr	r2, [pc, #572]	; (801af6c <_strtod_l+0x2a4>)
 801ad2e:	ab1f      	add	r3, sp, #124	; 0x7c
 801ad30:	a91d      	add	r1, sp, #116	; 0x74
 801ad32:	4620      	mov	r0, r4
 801ad34:	f001 ffd4 	bl	801cce0 <__gethex>
 801ad38:	f010 0707 	ands.w	r7, r0, #7
 801ad3c:	4605      	mov	r5, r0
 801ad3e:	d005      	beq.n	801ad4c <_strtod_l+0x84>
 801ad40:	2f06      	cmp	r7, #6
 801ad42:	d12a      	bne.n	801ad9a <_strtod_l+0xd2>
 801ad44:	3601      	adds	r6, #1
 801ad46:	2300      	movs	r3, #0
 801ad48:	961d      	str	r6, [sp, #116]	; 0x74
 801ad4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ad4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	f040 8596 	bne.w	801b880 <_strtod_l+0xbb8>
 801ad54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad56:	b1db      	cbz	r3, 801ad90 <_strtod_l+0xc8>
 801ad58:	4652      	mov	r2, sl
 801ad5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ad5e:	ec43 2b10 	vmov	d0, r2, r3
 801ad62:	b023      	add	sp, #140	; 0x8c
 801ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad68:	2a20      	cmp	r2, #32
 801ad6a:	d1ce      	bne.n	801ad0a <_strtod_l+0x42>
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	931d      	str	r3, [sp, #116]	; 0x74
 801ad70:	e7c0      	b.n	801acf4 <_strtod_l+0x2c>
 801ad72:	2a2d      	cmp	r2, #45	; 0x2d
 801ad74:	d1c9      	bne.n	801ad0a <_strtod_l+0x42>
 801ad76:	2201      	movs	r2, #1
 801ad78:	920e      	str	r2, [sp, #56]	; 0x38
 801ad7a:	1c5a      	adds	r2, r3, #1
 801ad7c:	921d      	str	r2, [sp, #116]	; 0x74
 801ad7e:	785b      	ldrb	r3, [r3, #1]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d1c4      	bne.n	801ad0e <_strtod_l+0x46>
 801ad84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	f040 8576 	bne.w	801b87c <_strtod_l+0xbb4>
 801ad90:	4652      	mov	r2, sl
 801ad92:	465b      	mov	r3, fp
 801ad94:	e7e3      	b.n	801ad5e <_strtod_l+0x96>
 801ad96:	2200      	movs	r2, #0
 801ad98:	e7ee      	b.n	801ad78 <_strtod_l+0xb0>
 801ad9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ad9c:	b13a      	cbz	r2, 801adae <_strtod_l+0xe6>
 801ad9e:	2135      	movs	r1, #53	; 0x35
 801ada0:	a820      	add	r0, sp, #128	; 0x80
 801ada2:	f002 ffb4 	bl	801dd0e <__copybits>
 801ada6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ada8:	4620      	mov	r0, r4
 801adaa:	f002 fb79 	bl	801d4a0 <_Bfree>
 801adae:	3f01      	subs	r7, #1
 801adb0:	2f05      	cmp	r7, #5
 801adb2:	d807      	bhi.n	801adc4 <_strtod_l+0xfc>
 801adb4:	e8df f007 	tbb	[pc, r7]
 801adb8:	1d180b0e 	.word	0x1d180b0e
 801adbc:	030e      	.short	0x030e
 801adbe:	f04f 0b00 	mov.w	fp, #0
 801adc2:	46da      	mov	sl, fp
 801adc4:	0728      	lsls	r0, r5, #28
 801adc6:	d5c1      	bpl.n	801ad4c <_strtod_l+0x84>
 801adc8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801adcc:	e7be      	b.n	801ad4c <_strtod_l+0x84>
 801adce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801add2:	e7f7      	b.n	801adc4 <_strtod_l+0xfc>
 801add4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801add8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801adda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801adde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ade2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ade6:	e7ed      	b.n	801adc4 <_strtod_l+0xfc>
 801ade8:	f8df b184 	ldr.w	fp, [pc, #388]	; 801af70 <_strtod_l+0x2a8>
 801adec:	f04f 0a00 	mov.w	sl, #0
 801adf0:	e7e8      	b.n	801adc4 <_strtod_l+0xfc>
 801adf2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801adf6:	f04f 3aff 	mov.w	sl, #4294967295
 801adfa:	e7e3      	b.n	801adc4 <_strtod_l+0xfc>
 801adfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adfe:	1c5a      	adds	r2, r3, #1
 801ae00:	921d      	str	r2, [sp, #116]	; 0x74
 801ae02:	785b      	ldrb	r3, [r3, #1]
 801ae04:	2b30      	cmp	r3, #48	; 0x30
 801ae06:	d0f9      	beq.n	801adfc <_strtod_l+0x134>
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d09f      	beq.n	801ad4c <_strtod_l+0x84>
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	f04f 0900 	mov.w	r9, #0
 801ae12:	9304      	str	r3, [sp, #16]
 801ae14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae16:	930a      	str	r3, [sp, #40]	; 0x28
 801ae18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ae1c:	464f      	mov	r7, r9
 801ae1e:	220a      	movs	r2, #10
 801ae20:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ae22:	7806      	ldrb	r6, [r0, #0]
 801ae24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ae28:	b2d9      	uxtb	r1, r3
 801ae2a:	2909      	cmp	r1, #9
 801ae2c:	d92a      	bls.n	801ae84 <_strtod_l+0x1bc>
 801ae2e:	9907      	ldr	r1, [sp, #28]
 801ae30:	462a      	mov	r2, r5
 801ae32:	f7ff ff1a 	bl	801ac6a <strncmp>
 801ae36:	b398      	cbz	r0, 801aea0 <_strtod_l+0x1d8>
 801ae38:	2000      	movs	r0, #0
 801ae3a:	4633      	mov	r3, r6
 801ae3c:	463d      	mov	r5, r7
 801ae3e:	9007      	str	r0, [sp, #28]
 801ae40:	4602      	mov	r2, r0
 801ae42:	2b65      	cmp	r3, #101	; 0x65
 801ae44:	d001      	beq.n	801ae4a <_strtod_l+0x182>
 801ae46:	2b45      	cmp	r3, #69	; 0x45
 801ae48:	d118      	bne.n	801ae7c <_strtod_l+0x1b4>
 801ae4a:	b91d      	cbnz	r5, 801ae54 <_strtod_l+0x18c>
 801ae4c:	9b04      	ldr	r3, [sp, #16]
 801ae4e:	4303      	orrs	r3, r0
 801ae50:	d098      	beq.n	801ad84 <_strtod_l+0xbc>
 801ae52:	2500      	movs	r5, #0
 801ae54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ae58:	f108 0301 	add.w	r3, r8, #1
 801ae5c:	931d      	str	r3, [sp, #116]	; 0x74
 801ae5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ae62:	2b2b      	cmp	r3, #43	; 0x2b
 801ae64:	d075      	beq.n	801af52 <_strtod_l+0x28a>
 801ae66:	2b2d      	cmp	r3, #45	; 0x2d
 801ae68:	d07b      	beq.n	801af62 <_strtod_l+0x29a>
 801ae6a:	f04f 0c00 	mov.w	ip, #0
 801ae6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ae72:	2909      	cmp	r1, #9
 801ae74:	f240 8082 	bls.w	801af7c <_strtod_l+0x2b4>
 801ae78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ae7c:	2600      	movs	r6, #0
 801ae7e:	e09d      	b.n	801afbc <_strtod_l+0x2f4>
 801ae80:	2300      	movs	r3, #0
 801ae82:	e7c4      	b.n	801ae0e <_strtod_l+0x146>
 801ae84:	2f08      	cmp	r7, #8
 801ae86:	bfd8      	it	le
 801ae88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ae8a:	f100 0001 	add.w	r0, r0, #1
 801ae8e:	bfda      	itte	le
 801ae90:	fb02 3301 	mlale	r3, r2, r1, r3
 801ae94:	9309      	strle	r3, [sp, #36]	; 0x24
 801ae96:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ae9a:	3701      	adds	r7, #1
 801ae9c:	901d      	str	r0, [sp, #116]	; 0x74
 801ae9e:	e7bf      	b.n	801ae20 <_strtod_l+0x158>
 801aea0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aea2:	195a      	adds	r2, r3, r5
 801aea4:	921d      	str	r2, [sp, #116]	; 0x74
 801aea6:	5d5b      	ldrb	r3, [r3, r5]
 801aea8:	2f00      	cmp	r7, #0
 801aeaa:	d037      	beq.n	801af1c <_strtod_l+0x254>
 801aeac:	9007      	str	r0, [sp, #28]
 801aeae:	463d      	mov	r5, r7
 801aeb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801aeb4:	2a09      	cmp	r2, #9
 801aeb6:	d912      	bls.n	801aede <_strtod_l+0x216>
 801aeb8:	2201      	movs	r2, #1
 801aeba:	e7c2      	b.n	801ae42 <_strtod_l+0x17a>
 801aebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aebe:	1c5a      	adds	r2, r3, #1
 801aec0:	921d      	str	r2, [sp, #116]	; 0x74
 801aec2:	785b      	ldrb	r3, [r3, #1]
 801aec4:	3001      	adds	r0, #1
 801aec6:	2b30      	cmp	r3, #48	; 0x30
 801aec8:	d0f8      	beq.n	801aebc <_strtod_l+0x1f4>
 801aeca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801aece:	2a08      	cmp	r2, #8
 801aed0:	f200 84db 	bhi.w	801b88a <_strtod_l+0xbc2>
 801aed4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801aed6:	9007      	str	r0, [sp, #28]
 801aed8:	2000      	movs	r0, #0
 801aeda:	920a      	str	r2, [sp, #40]	; 0x28
 801aedc:	4605      	mov	r5, r0
 801aede:	3b30      	subs	r3, #48	; 0x30
 801aee0:	f100 0201 	add.w	r2, r0, #1
 801aee4:	d014      	beq.n	801af10 <_strtod_l+0x248>
 801aee6:	9907      	ldr	r1, [sp, #28]
 801aee8:	4411      	add	r1, r2
 801aeea:	9107      	str	r1, [sp, #28]
 801aeec:	462a      	mov	r2, r5
 801aeee:	eb00 0e05 	add.w	lr, r0, r5
 801aef2:	210a      	movs	r1, #10
 801aef4:	4572      	cmp	r2, lr
 801aef6:	d113      	bne.n	801af20 <_strtod_l+0x258>
 801aef8:	182a      	adds	r2, r5, r0
 801aefa:	2a08      	cmp	r2, #8
 801aefc:	f105 0501 	add.w	r5, r5, #1
 801af00:	4405      	add	r5, r0
 801af02:	dc1c      	bgt.n	801af3e <_strtod_l+0x276>
 801af04:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af06:	220a      	movs	r2, #10
 801af08:	fb02 3301 	mla	r3, r2, r1, r3
 801af0c:	9309      	str	r3, [sp, #36]	; 0x24
 801af0e:	2200      	movs	r2, #0
 801af10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af12:	1c59      	adds	r1, r3, #1
 801af14:	911d      	str	r1, [sp, #116]	; 0x74
 801af16:	785b      	ldrb	r3, [r3, #1]
 801af18:	4610      	mov	r0, r2
 801af1a:	e7c9      	b.n	801aeb0 <_strtod_l+0x1e8>
 801af1c:	4638      	mov	r0, r7
 801af1e:	e7d2      	b.n	801aec6 <_strtod_l+0x1fe>
 801af20:	2a08      	cmp	r2, #8
 801af22:	dc04      	bgt.n	801af2e <_strtod_l+0x266>
 801af24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801af26:	434e      	muls	r6, r1
 801af28:	9609      	str	r6, [sp, #36]	; 0x24
 801af2a:	3201      	adds	r2, #1
 801af2c:	e7e2      	b.n	801aef4 <_strtod_l+0x22c>
 801af2e:	f102 0c01 	add.w	ip, r2, #1
 801af32:	f1bc 0f10 	cmp.w	ip, #16
 801af36:	bfd8      	it	le
 801af38:	fb01 f909 	mulle.w	r9, r1, r9
 801af3c:	e7f5      	b.n	801af2a <_strtod_l+0x262>
 801af3e:	2d10      	cmp	r5, #16
 801af40:	bfdc      	itt	le
 801af42:	220a      	movle	r2, #10
 801af44:	fb02 3909 	mlale	r9, r2, r9, r3
 801af48:	e7e1      	b.n	801af0e <_strtod_l+0x246>
 801af4a:	2300      	movs	r3, #0
 801af4c:	9307      	str	r3, [sp, #28]
 801af4e:	2201      	movs	r2, #1
 801af50:	e77c      	b.n	801ae4c <_strtod_l+0x184>
 801af52:	f04f 0c00 	mov.w	ip, #0
 801af56:	f108 0302 	add.w	r3, r8, #2
 801af5a:	931d      	str	r3, [sp, #116]	; 0x74
 801af5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801af60:	e785      	b.n	801ae6e <_strtod_l+0x1a6>
 801af62:	f04f 0c01 	mov.w	ip, #1
 801af66:	e7f6      	b.n	801af56 <_strtod_l+0x28e>
 801af68:	08020d0c 	.word	0x08020d0c
 801af6c:	08020b80 	.word	0x08020b80
 801af70:	7ff00000 	.word	0x7ff00000
 801af74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af76:	1c59      	adds	r1, r3, #1
 801af78:	911d      	str	r1, [sp, #116]	; 0x74
 801af7a:	785b      	ldrb	r3, [r3, #1]
 801af7c:	2b30      	cmp	r3, #48	; 0x30
 801af7e:	d0f9      	beq.n	801af74 <_strtod_l+0x2ac>
 801af80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801af84:	2908      	cmp	r1, #8
 801af86:	f63f af79 	bhi.w	801ae7c <_strtod_l+0x1b4>
 801af8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801af8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af90:	9308      	str	r3, [sp, #32]
 801af92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af94:	1c59      	adds	r1, r3, #1
 801af96:	911d      	str	r1, [sp, #116]	; 0x74
 801af98:	785b      	ldrb	r3, [r3, #1]
 801af9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801af9e:	2e09      	cmp	r6, #9
 801afa0:	d937      	bls.n	801b012 <_strtod_l+0x34a>
 801afa2:	9e08      	ldr	r6, [sp, #32]
 801afa4:	1b89      	subs	r1, r1, r6
 801afa6:	2908      	cmp	r1, #8
 801afa8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801afac:	dc02      	bgt.n	801afb4 <_strtod_l+0x2ec>
 801afae:	4576      	cmp	r6, lr
 801afb0:	bfa8      	it	ge
 801afb2:	4676      	movge	r6, lr
 801afb4:	f1bc 0f00 	cmp.w	ip, #0
 801afb8:	d000      	beq.n	801afbc <_strtod_l+0x2f4>
 801afba:	4276      	negs	r6, r6
 801afbc:	2d00      	cmp	r5, #0
 801afbe:	d14f      	bne.n	801b060 <_strtod_l+0x398>
 801afc0:	9904      	ldr	r1, [sp, #16]
 801afc2:	4301      	orrs	r1, r0
 801afc4:	f47f aec2 	bne.w	801ad4c <_strtod_l+0x84>
 801afc8:	2a00      	cmp	r2, #0
 801afca:	f47f aedb 	bne.w	801ad84 <_strtod_l+0xbc>
 801afce:	2b69      	cmp	r3, #105	; 0x69
 801afd0:	d027      	beq.n	801b022 <_strtod_l+0x35a>
 801afd2:	dc24      	bgt.n	801b01e <_strtod_l+0x356>
 801afd4:	2b49      	cmp	r3, #73	; 0x49
 801afd6:	d024      	beq.n	801b022 <_strtod_l+0x35a>
 801afd8:	2b4e      	cmp	r3, #78	; 0x4e
 801afda:	f47f aed3 	bne.w	801ad84 <_strtod_l+0xbc>
 801afde:	499e      	ldr	r1, [pc, #632]	; (801b258 <_strtod_l+0x590>)
 801afe0:	a81d      	add	r0, sp, #116	; 0x74
 801afe2:	f002 f8d5 	bl	801d190 <__match>
 801afe6:	2800      	cmp	r0, #0
 801afe8:	f43f aecc 	beq.w	801ad84 <_strtod_l+0xbc>
 801afec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	2b28      	cmp	r3, #40	; 0x28
 801aff2:	d12d      	bne.n	801b050 <_strtod_l+0x388>
 801aff4:	4999      	ldr	r1, [pc, #612]	; (801b25c <_strtod_l+0x594>)
 801aff6:	aa20      	add	r2, sp, #128	; 0x80
 801aff8:	a81d      	add	r0, sp, #116	; 0x74
 801affa:	f002 f8dd 	bl	801d1b8 <__hexnan>
 801affe:	2805      	cmp	r0, #5
 801b000:	d126      	bne.n	801b050 <_strtod_l+0x388>
 801b002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b004:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b008:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b00c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b010:	e69c      	b.n	801ad4c <_strtod_l+0x84>
 801b012:	210a      	movs	r1, #10
 801b014:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b018:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b01c:	e7b9      	b.n	801af92 <_strtod_l+0x2ca>
 801b01e:	2b6e      	cmp	r3, #110	; 0x6e
 801b020:	e7db      	b.n	801afda <_strtod_l+0x312>
 801b022:	498f      	ldr	r1, [pc, #572]	; (801b260 <_strtod_l+0x598>)
 801b024:	a81d      	add	r0, sp, #116	; 0x74
 801b026:	f002 f8b3 	bl	801d190 <__match>
 801b02a:	2800      	cmp	r0, #0
 801b02c:	f43f aeaa 	beq.w	801ad84 <_strtod_l+0xbc>
 801b030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b032:	498c      	ldr	r1, [pc, #560]	; (801b264 <_strtod_l+0x59c>)
 801b034:	3b01      	subs	r3, #1
 801b036:	a81d      	add	r0, sp, #116	; 0x74
 801b038:	931d      	str	r3, [sp, #116]	; 0x74
 801b03a:	f002 f8a9 	bl	801d190 <__match>
 801b03e:	b910      	cbnz	r0, 801b046 <_strtod_l+0x37e>
 801b040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b042:	3301      	adds	r3, #1
 801b044:	931d      	str	r3, [sp, #116]	; 0x74
 801b046:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b274 <_strtod_l+0x5ac>
 801b04a:	f04f 0a00 	mov.w	sl, #0
 801b04e:	e67d      	b.n	801ad4c <_strtod_l+0x84>
 801b050:	4885      	ldr	r0, [pc, #532]	; (801b268 <_strtod_l+0x5a0>)
 801b052:	f7fe fa7d 	bl	8019550 <nan>
 801b056:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b05a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b05e:	e675      	b.n	801ad4c <_strtod_l+0x84>
 801b060:	9b07      	ldr	r3, [sp, #28]
 801b062:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b064:	1af3      	subs	r3, r6, r3
 801b066:	2f00      	cmp	r7, #0
 801b068:	bf08      	it	eq
 801b06a:	462f      	moveq	r7, r5
 801b06c:	2d10      	cmp	r5, #16
 801b06e:	9308      	str	r3, [sp, #32]
 801b070:	46a8      	mov	r8, r5
 801b072:	bfa8      	it	ge
 801b074:	f04f 0810 	movge.w	r8, #16
 801b078:	f7e5 fa54 	bl	8000524 <__aeabi_ui2d>
 801b07c:	2d09      	cmp	r5, #9
 801b07e:	4682      	mov	sl, r0
 801b080:	468b      	mov	fp, r1
 801b082:	dd13      	ble.n	801b0ac <_strtod_l+0x3e4>
 801b084:	4b79      	ldr	r3, [pc, #484]	; (801b26c <_strtod_l+0x5a4>)
 801b086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b08a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b08e:	f7e5 fac3 	bl	8000618 <__aeabi_dmul>
 801b092:	4682      	mov	sl, r0
 801b094:	4648      	mov	r0, r9
 801b096:	468b      	mov	fp, r1
 801b098:	f7e5 fa44 	bl	8000524 <__aeabi_ui2d>
 801b09c:	4602      	mov	r2, r0
 801b09e:	460b      	mov	r3, r1
 801b0a0:	4650      	mov	r0, sl
 801b0a2:	4659      	mov	r1, fp
 801b0a4:	f7e5 f902 	bl	80002ac <__adddf3>
 801b0a8:	4682      	mov	sl, r0
 801b0aa:	468b      	mov	fp, r1
 801b0ac:	2d0f      	cmp	r5, #15
 801b0ae:	dc38      	bgt.n	801b122 <_strtod_l+0x45a>
 801b0b0:	9b08      	ldr	r3, [sp, #32]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	f43f ae4a 	beq.w	801ad4c <_strtod_l+0x84>
 801b0b8:	dd24      	ble.n	801b104 <_strtod_l+0x43c>
 801b0ba:	2b16      	cmp	r3, #22
 801b0bc:	dc0b      	bgt.n	801b0d6 <_strtod_l+0x40e>
 801b0be:	4d6b      	ldr	r5, [pc, #428]	; (801b26c <_strtod_l+0x5a4>)
 801b0c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b0c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b0c8:	4652      	mov	r2, sl
 801b0ca:	465b      	mov	r3, fp
 801b0cc:	f7e5 faa4 	bl	8000618 <__aeabi_dmul>
 801b0d0:	4682      	mov	sl, r0
 801b0d2:	468b      	mov	fp, r1
 801b0d4:	e63a      	b.n	801ad4c <_strtod_l+0x84>
 801b0d6:	9a08      	ldr	r2, [sp, #32]
 801b0d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b0dc:	4293      	cmp	r3, r2
 801b0de:	db20      	blt.n	801b122 <_strtod_l+0x45a>
 801b0e0:	4c62      	ldr	r4, [pc, #392]	; (801b26c <_strtod_l+0x5a4>)
 801b0e2:	f1c5 050f 	rsb	r5, r5, #15
 801b0e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b0ea:	4652      	mov	r2, sl
 801b0ec:	465b      	mov	r3, fp
 801b0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0f2:	f7e5 fa91 	bl	8000618 <__aeabi_dmul>
 801b0f6:	9b08      	ldr	r3, [sp, #32]
 801b0f8:	1b5d      	subs	r5, r3, r5
 801b0fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b0fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b102:	e7e3      	b.n	801b0cc <_strtod_l+0x404>
 801b104:	9b08      	ldr	r3, [sp, #32]
 801b106:	3316      	adds	r3, #22
 801b108:	db0b      	blt.n	801b122 <_strtod_l+0x45a>
 801b10a:	9b07      	ldr	r3, [sp, #28]
 801b10c:	4a57      	ldr	r2, [pc, #348]	; (801b26c <_strtod_l+0x5a4>)
 801b10e:	1b9e      	subs	r6, r3, r6
 801b110:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b114:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b118:	4650      	mov	r0, sl
 801b11a:	4659      	mov	r1, fp
 801b11c:	f7e5 fba6 	bl	800086c <__aeabi_ddiv>
 801b120:	e7d6      	b.n	801b0d0 <_strtod_l+0x408>
 801b122:	9b08      	ldr	r3, [sp, #32]
 801b124:	eba5 0808 	sub.w	r8, r5, r8
 801b128:	4498      	add	r8, r3
 801b12a:	f1b8 0f00 	cmp.w	r8, #0
 801b12e:	dd71      	ble.n	801b214 <_strtod_l+0x54c>
 801b130:	f018 030f 	ands.w	r3, r8, #15
 801b134:	d00a      	beq.n	801b14c <_strtod_l+0x484>
 801b136:	494d      	ldr	r1, [pc, #308]	; (801b26c <_strtod_l+0x5a4>)
 801b138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b13c:	4652      	mov	r2, sl
 801b13e:	465b      	mov	r3, fp
 801b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b144:	f7e5 fa68 	bl	8000618 <__aeabi_dmul>
 801b148:	4682      	mov	sl, r0
 801b14a:	468b      	mov	fp, r1
 801b14c:	f038 080f 	bics.w	r8, r8, #15
 801b150:	d04d      	beq.n	801b1ee <_strtod_l+0x526>
 801b152:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b156:	dd22      	ble.n	801b19e <_strtod_l+0x4d6>
 801b158:	2500      	movs	r5, #0
 801b15a:	462e      	mov	r6, r5
 801b15c:	9509      	str	r5, [sp, #36]	; 0x24
 801b15e:	9507      	str	r5, [sp, #28]
 801b160:	2322      	movs	r3, #34	; 0x22
 801b162:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b274 <_strtod_l+0x5ac>
 801b166:	6023      	str	r3, [r4, #0]
 801b168:	f04f 0a00 	mov.w	sl, #0
 801b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b16e:	2b00      	cmp	r3, #0
 801b170:	f43f adec 	beq.w	801ad4c <_strtod_l+0x84>
 801b174:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b176:	4620      	mov	r0, r4
 801b178:	f002 f992 	bl	801d4a0 <_Bfree>
 801b17c:	9907      	ldr	r1, [sp, #28]
 801b17e:	4620      	mov	r0, r4
 801b180:	f002 f98e 	bl	801d4a0 <_Bfree>
 801b184:	4631      	mov	r1, r6
 801b186:	4620      	mov	r0, r4
 801b188:	f002 f98a 	bl	801d4a0 <_Bfree>
 801b18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b18e:	4620      	mov	r0, r4
 801b190:	f002 f986 	bl	801d4a0 <_Bfree>
 801b194:	4629      	mov	r1, r5
 801b196:	4620      	mov	r0, r4
 801b198:	f002 f982 	bl	801d4a0 <_Bfree>
 801b19c:	e5d6      	b.n	801ad4c <_strtod_l+0x84>
 801b19e:	2300      	movs	r3, #0
 801b1a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b1a4:	4650      	mov	r0, sl
 801b1a6:	4659      	mov	r1, fp
 801b1a8:	4699      	mov	r9, r3
 801b1aa:	f1b8 0f01 	cmp.w	r8, #1
 801b1ae:	dc21      	bgt.n	801b1f4 <_strtod_l+0x52c>
 801b1b0:	b10b      	cbz	r3, 801b1b6 <_strtod_l+0x4ee>
 801b1b2:	4682      	mov	sl, r0
 801b1b4:	468b      	mov	fp, r1
 801b1b6:	4b2e      	ldr	r3, [pc, #184]	; (801b270 <_strtod_l+0x5a8>)
 801b1b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b1bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b1c0:	4652      	mov	r2, sl
 801b1c2:	465b      	mov	r3, fp
 801b1c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b1c8:	f7e5 fa26 	bl	8000618 <__aeabi_dmul>
 801b1cc:	4b29      	ldr	r3, [pc, #164]	; (801b274 <_strtod_l+0x5ac>)
 801b1ce:	460a      	mov	r2, r1
 801b1d0:	400b      	ands	r3, r1
 801b1d2:	4929      	ldr	r1, [pc, #164]	; (801b278 <_strtod_l+0x5b0>)
 801b1d4:	428b      	cmp	r3, r1
 801b1d6:	4682      	mov	sl, r0
 801b1d8:	d8be      	bhi.n	801b158 <_strtod_l+0x490>
 801b1da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b1de:	428b      	cmp	r3, r1
 801b1e0:	bf86      	itte	hi
 801b1e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b27c <_strtod_l+0x5b4>
 801b1e6:	f04f 3aff 	movhi.w	sl, #4294967295
 801b1ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	9304      	str	r3, [sp, #16]
 801b1f2:	e081      	b.n	801b2f8 <_strtod_l+0x630>
 801b1f4:	f018 0f01 	tst.w	r8, #1
 801b1f8:	d007      	beq.n	801b20a <_strtod_l+0x542>
 801b1fa:	4b1d      	ldr	r3, [pc, #116]	; (801b270 <_strtod_l+0x5a8>)
 801b1fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b204:	f7e5 fa08 	bl	8000618 <__aeabi_dmul>
 801b208:	2301      	movs	r3, #1
 801b20a:	f109 0901 	add.w	r9, r9, #1
 801b20e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b212:	e7ca      	b.n	801b1aa <_strtod_l+0x4e2>
 801b214:	d0eb      	beq.n	801b1ee <_strtod_l+0x526>
 801b216:	f1c8 0800 	rsb	r8, r8, #0
 801b21a:	f018 020f 	ands.w	r2, r8, #15
 801b21e:	d00a      	beq.n	801b236 <_strtod_l+0x56e>
 801b220:	4b12      	ldr	r3, [pc, #72]	; (801b26c <_strtod_l+0x5a4>)
 801b222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b226:	4650      	mov	r0, sl
 801b228:	4659      	mov	r1, fp
 801b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b22e:	f7e5 fb1d 	bl	800086c <__aeabi_ddiv>
 801b232:	4682      	mov	sl, r0
 801b234:	468b      	mov	fp, r1
 801b236:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b23a:	d0d8      	beq.n	801b1ee <_strtod_l+0x526>
 801b23c:	f1b8 0f1f 	cmp.w	r8, #31
 801b240:	dd1e      	ble.n	801b280 <_strtod_l+0x5b8>
 801b242:	2500      	movs	r5, #0
 801b244:	462e      	mov	r6, r5
 801b246:	9509      	str	r5, [sp, #36]	; 0x24
 801b248:	9507      	str	r5, [sp, #28]
 801b24a:	2322      	movs	r3, #34	; 0x22
 801b24c:	f04f 0a00 	mov.w	sl, #0
 801b250:	f04f 0b00 	mov.w	fp, #0
 801b254:	6023      	str	r3, [r4, #0]
 801b256:	e789      	b.n	801b16c <_strtod_l+0x4a4>
 801b258:	08020b55 	.word	0x08020b55
 801b25c:	08020b94 	.word	0x08020b94
 801b260:	08020b4d 	.word	0x08020b4d
 801b264:	08020c0f 	.word	0x08020c0f
 801b268:	08020c0b 	.word	0x08020c0b
 801b26c:	08020da8 	.word	0x08020da8
 801b270:	08020d80 	.word	0x08020d80
 801b274:	7ff00000 	.word	0x7ff00000
 801b278:	7ca00000 	.word	0x7ca00000
 801b27c:	7fefffff 	.word	0x7fefffff
 801b280:	f018 0310 	ands.w	r3, r8, #16
 801b284:	bf18      	it	ne
 801b286:	236a      	movne	r3, #106	; 0x6a
 801b288:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b640 <_strtod_l+0x978>
 801b28c:	9304      	str	r3, [sp, #16]
 801b28e:	4650      	mov	r0, sl
 801b290:	4659      	mov	r1, fp
 801b292:	2300      	movs	r3, #0
 801b294:	f018 0f01 	tst.w	r8, #1
 801b298:	d004      	beq.n	801b2a4 <_strtod_l+0x5dc>
 801b29a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b29e:	f7e5 f9bb 	bl	8000618 <__aeabi_dmul>
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b2a8:	f109 0908 	add.w	r9, r9, #8
 801b2ac:	d1f2      	bne.n	801b294 <_strtod_l+0x5cc>
 801b2ae:	b10b      	cbz	r3, 801b2b4 <_strtod_l+0x5ec>
 801b2b0:	4682      	mov	sl, r0
 801b2b2:	468b      	mov	fp, r1
 801b2b4:	9b04      	ldr	r3, [sp, #16]
 801b2b6:	b1bb      	cbz	r3, 801b2e8 <_strtod_l+0x620>
 801b2b8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b2bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	4659      	mov	r1, fp
 801b2c4:	dd10      	ble.n	801b2e8 <_strtod_l+0x620>
 801b2c6:	2b1f      	cmp	r3, #31
 801b2c8:	f340 8128 	ble.w	801b51c <_strtod_l+0x854>
 801b2cc:	2b34      	cmp	r3, #52	; 0x34
 801b2ce:	bfde      	ittt	le
 801b2d0:	3b20      	suble	r3, #32
 801b2d2:	f04f 32ff 	movle.w	r2, #4294967295
 801b2d6:	fa02 f303 	lslle.w	r3, r2, r3
 801b2da:	f04f 0a00 	mov.w	sl, #0
 801b2de:	bfcc      	ite	gt
 801b2e0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b2e4:	ea03 0b01 	andle.w	fp, r3, r1
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	4650      	mov	r0, sl
 801b2ee:	4659      	mov	r1, fp
 801b2f0:	f7e5 fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 801b2f4:	2800      	cmp	r0, #0
 801b2f6:	d1a4      	bne.n	801b242 <_strtod_l+0x57a>
 801b2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2fa:	9300      	str	r3, [sp, #0]
 801b2fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b2fe:	462b      	mov	r3, r5
 801b300:	463a      	mov	r2, r7
 801b302:	4620      	mov	r0, r4
 801b304:	f002 f938 	bl	801d578 <__s2b>
 801b308:	9009      	str	r0, [sp, #36]	; 0x24
 801b30a:	2800      	cmp	r0, #0
 801b30c:	f43f af24 	beq.w	801b158 <_strtod_l+0x490>
 801b310:	9b07      	ldr	r3, [sp, #28]
 801b312:	1b9e      	subs	r6, r3, r6
 801b314:	9b08      	ldr	r3, [sp, #32]
 801b316:	2b00      	cmp	r3, #0
 801b318:	bfb4      	ite	lt
 801b31a:	4633      	movlt	r3, r6
 801b31c:	2300      	movge	r3, #0
 801b31e:	9310      	str	r3, [sp, #64]	; 0x40
 801b320:	9b08      	ldr	r3, [sp, #32]
 801b322:	2500      	movs	r5, #0
 801b324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b328:	9318      	str	r3, [sp, #96]	; 0x60
 801b32a:	462e      	mov	r6, r5
 801b32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b32e:	4620      	mov	r0, r4
 801b330:	6859      	ldr	r1, [r3, #4]
 801b332:	f002 f875 	bl	801d420 <_Balloc>
 801b336:	9007      	str	r0, [sp, #28]
 801b338:	2800      	cmp	r0, #0
 801b33a:	f43f af11 	beq.w	801b160 <_strtod_l+0x498>
 801b33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b340:	691a      	ldr	r2, [r3, #16]
 801b342:	3202      	adds	r2, #2
 801b344:	f103 010c 	add.w	r1, r3, #12
 801b348:	0092      	lsls	r2, r2, #2
 801b34a:	300c      	adds	r0, #12
 801b34c:	f7fe fb4e 	bl	80199ec <memcpy>
 801b350:	ec4b ab10 	vmov	d0, sl, fp
 801b354:	aa20      	add	r2, sp, #128	; 0x80
 801b356:	a91f      	add	r1, sp, #124	; 0x7c
 801b358:	4620      	mov	r0, r4
 801b35a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b35e:	f002 fc47 	bl	801dbf0 <__d2b>
 801b362:	901e      	str	r0, [sp, #120]	; 0x78
 801b364:	2800      	cmp	r0, #0
 801b366:	f43f aefb 	beq.w	801b160 <_strtod_l+0x498>
 801b36a:	2101      	movs	r1, #1
 801b36c:	4620      	mov	r0, r4
 801b36e:	f002 f99d 	bl	801d6ac <__i2b>
 801b372:	4606      	mov	r6, r0
 801b374:	2800      	cmp	r0, #0
 801b376:	f43f aef3 	beq.w	801b160 <_strtod_l+0x498>
 801b37a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b37c:	9904      	ldr	r1, [sp, #16]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	bfab      	itete	ge
 801b382:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b384:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b386:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b388:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b38c:	bfac      	ite	ge
 801b38e:	eb03 0902 	addge.w	r9, r3, r2
 801b392:	1ad7      	sublt	r7, r2, r3
 801b394:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b396:	eba3 0801 	sub.w	r8, r3, r1
 801b39a:	4490      	add	r8, r2
 801b39c:	4ba3      	ldr	r3, [pc, #652]	; (801b62c <_strtod_l+0x964>)
 801b39e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3a2:	4598      	cmp	r8, r3
 801b3a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b3a8:	f280 80cc 	bge.w	801b544 <_strtod_l+0x87c>
 801b3ac:	eba3 0308 	sub.w	r3, r3, r8
 801b3b0:	2b1f      	cmp	r3, #31
 801b3b2:	eba2 0203 	sub.w	r2, r2, r3
 801b3b6:	f04f 0101 	mov.w	r1, #1
 801b3ba:	f300 80b6 	bgt.w	801b52a <_strtod_l+0x862>
 801b3be:	fa01 f303 	lsl.w	r3, r1, r3
 801b3c2:	9311      	str	r3, [sp, #68]	; 0x44
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	930c      	str	r3, [sp, #48]	; 0x30
 801b3c8:	eb09 0802 	add.w	r8, r9, r2
 801b3cc:	9b04      	ldr	r3, [sp, #16]
 801b3ce:	45c1      	cmp	r9, r8
 801b3d0:	4417      	add	r7, r2
 801b3d2:	441f      	add	r7, r3
 801b3d4:	464b      	mov	r3, r9
 801b3d6:	bfa8      	it	ge
 801b3d8:	4643      	movge	r3, r8
 801b3da:	42bb      	cmp	r3, r7
 801b3dc:	bfa8      	it	ge
 801b3de:	463b      	movge	r3, r7
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	bfc2      	ittt	gt
 801b3e4:	eba8 0803 	subgt.w	r8, r8, r3
 801b3e8:	1aff      	subgt	r7, r7, r3
 801b3ea:	eba9 0903 	subgt.w	r9, r9, r3
 801b3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	dd17      	ble.n	801b424 <_strtod_l+0x75c>
 801b3f4:	4631      	mov	r1, r6
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f002 fa13 	bl	801d824 <__pow5mult>
 801b3fe:	4606      	mov	r6, r0
 801b400:	2800      	cmp	r0, #0
 801b402:	f43f aead 	beq.w	801b160 <_strtod_l+0x498>
 801b406:	4601      	mov	r1, r0
 801b408:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b40a:	4620      	mov	r0, r4
 801b40c:	f002 f964 	bl	801d6d8 <__multiply>
 801b410:	900f      	str	r0, [sp, #60]	; 0x3c
 801b412:	2800      	cmp	r0, #0
 801b414:	f43f aea4 	beq.w	801b160 <_strtod_l+0x498>
 801b418:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b41a:	4620      	mov	r0, r4
 801b41c:	f002 f840 	bl	801d4a0 <_Bfree>
 801b420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b422:	931e      	str	r3, [sp, #120]	; 0x78
 801b424:	f1b8 0f00 	cmp.w	r8, #0
 801b428:	f300 8091 	bgt.w	801b54e <_strtod_l+0x886>
 801b42c:	9b08      	ldr	r3, [sp, #32]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	dd08      	ble.n	801b444 <_strtod_l+0x77c>
 801b432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b434:	9907      	ldr	r1, [sp, #28]
 801b436:	4620      	mov	r0, r4
 801b438:	f002 f9f4 	bl	801d824 <__pow5mult>
 801b43c:	9007      	str	r0, [sp, #28]
 801b43e:	2800      	cmp	r0, #0
 801b440:	f43f ae8e 	beq.w	801b160 <_strtod_l+0x498>
 801b444:	2f00      	cmp	r7, #0
 801b446:	dd08      	ble.n	801b45a <_strtod_l+0x792>
 801b448:	9907      	ldr	r1, [sp, #28]
 801b44a:	463a      	mov	r2, r7
 801b44c:	4620      	mov	r0, r4
 801b44e:	f002 fa43 	bl	801d8d8 <__lshift>
 801b452:	9007      	str	r0, [sp, #28]
 801b454:	2800      	cmp	r0, #0
 801b456:	f43f ae83 	beq.w	801b160 <_strtod_l+0x498>
 801b45a:	f1b9 0f00 	cmp.w	r9, #0
 801b45e:	dd08      	ble.n	801b472 <_strtod_l+0x7aa>
 801b460:	4631      	mov	r1, r6
 801b462:	464a      	mov	r2, r9
 801b464:	4620      	mov	r0, r4
 801b466:	f002 fa37 	bl	801d8d8 <__lshift>
 801b46a:	4606      	mov	r6, r0
 801b46c:	2800      	cmp	r0, #0
 801b46e:	f43f ae77 	beq.w	801b160 <_strtod_l+0x498>
 801b472:	9a07      	ldr	r2, [sp, #28]
 801b474:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b476:	4620      	mov	r0, r4
 801b478:	f002 fab6 	bl	801d9e8 <__mdiff>
 801b47c:	4605      	mov	r5, r0
 801b47e:	2800      	cmp	r0, #0
 801b480:	f43f ae6e 	beq.w	801b160 <_strtod_l+0x498>
 801b484:	68c3      	ldr	r3, [r0, #12]
 801b486:	930f      	str	r3, [sp, #60]	; 0x3c
 801b488:	2300      	movs	r3, #0
 801b48a:	60c3      	str	r3, [r0, #12]
 801b48c:	4631      	mov	r1, r6
 801b48e:	f002 fa8f 	bl	801d9b0 <__mcmp>
 801b492:	2800      	cmp	r0, #0
 801b494:	da65      	bge.n	801b562 <_strtod_l+0x89a>
 801b496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b498:	ea53 030a 	orrs.w	r3, r3, sl
 801b49c:	f040 8087 	bne.w	801b5ae <_strtod_l+0x8e6>
 801b4a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	f040 8082 	bne.w	801b5ae <_strtod_l+0x8e6>
 801b4aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b4ae:	0d1b      	lsrs	r3, r3, #20
 801b4b0:	051b      	lsls	r3, r3, #20
 801b4b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b4b6:	d97a      	bls.n	801b5ae <_strtod_l+0x8e6>
 801b4b8:	696b      	ldr	r3, [r5, #20]
 801b4ba:	b913      	cbnz	r3, 801b4c2 <_strtod_l+0x7fa>
 801b4bc:	692b      	ldr	r3, [r5, #16]
 801b4be:	2b01      	cmp	r3, #1
 801b4c0:	dd75      	ble.n	801b5ae <_strtod_l+0x8e6>
 801b4c2:	4629      	mov	r1, r5
 801b4c4:	2201      	movs	r2, #1
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f002 fa06 	bl	801d8d8 <__lshift>
 801b4cc:	4631      	mov	r1, r6
 801b4ce:	4605      	mov	r5, r0
 801b4d0:	f002 fa6e 	bl	801d9b0 <__mcmp>
 801b4d4:	2800      	cmp	r0, #0
 801b4d6:	dd6a      	ble.n	801b5ae <_strtod_l+0x8e6>
 801b4d8:	9904      	ldr	r1, [sp, #16]
 801b4da:	4a55      	ldr	r2, [pc, #340]	; (801b630 <_strtod_l+0x968>)
 801b4dc:	465b      	mov	r3, fp
 801b4de:	2900      	cmp	r1, #0
 801b4e0:	f000 8085 	beq.w	801b5ee <_strtod_l+0x926>
 801b4e4:	ea02 010b 	and.w	r1, r2, fp
 801b4e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b4ec:	dc7f      	bgt.n	801b5ee <_strtod_l+0x926>
 801b4ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b4f2:	f77f aeaa 	ble.w	801b24a <_strtod_l+0x582>
 801b4f6:	4a4f      	ldr	r2, [pc, #316]	; (801b634 <_strtod_l+0x96c>)
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b4fe:	4650      	mov	r0, sl
 801b500:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b504:	4659      	mov	r1, fp
 801b506:	f7e5 f887 	bl	8000618 <__aeabi_dmul>
 801b50a:	460b      	mov	r3, r1
 801b50c:	4303      	orrs	r3, r0
 801b50e:	bf08      	it	eq
 801b510:	2322      	moveq	r3, #34	; 0x22
 801b512:	4682      	mov	sl, r0
 801b514:	468b      	mov	fp, r1
 801b516:	bf08      	it	eq
 801b518:	6023      	streq	r3, [r4, #0]
 801b51a:	e62b      	b.n	801b174 <_strtod_l+0x4ac>
 801b51c:	f04f 32ff 	mov.w	r2, #4294967295
 801b520:	fa02 f303 	lsl.w	r3, r2, r3
 801b524:	ea03 0a0a 	and.w	sl, r3, sl
 801b528:	e6de      	b.n	801b2e8 <_strtod_l+0x620>
 801b52a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b52e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b532:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b536:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b53a:	fa01 f308 	lsl.w	r3, r1, r8
 801b53e:	930c      	str	r3, [sp, #48]	; 0x30
 801b540:	9111      	str	r1, [sp, #68]	; 0x44
 801b542:	e741      	b.n	801b3c8 <_strtod_l+0x700>
 801b544:	2300      	movs	r3, #0
 801b546:	930c      	str	r3, [sp, #48]	; 0x30
 801b548:	2301      	movs	r3, #1
 801b54a:	9311      	str	r3, [sp, #68]	; 0x44
 801b54c:	e73c      	b.n	801b3c8 <_strtod_l+0x700>
 801b54e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b550:	4642      	mov	r2, r8
 801b552:	4620      	mov	r0, r4
 801b554:	f002 f9c0 	bl	801d8d8 <__lshift>
 801b558:	901e      	str	r0, [sp, #120]	; 0x78
 801b55a:	2800      	cmp	r0, #0
 801b55c:	f47f af66 	bne.w	801b42c <_strtod_l+0x764>
 801b560:	e5fe      	b.n	801b160 <_strtod_l+0x498>
 801b562:	465f      	mov	r7, fp
 801b564:	d16e      	bne.n	801b644 <_strtod_l+0x97c>
 801b566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b56c:	b342      	cbz	r2, 801b5c0 <_strtod_l+0x8f8>
 801b56e:	4a32      	ldr	r2, [pc, #200]	; (801b638 <_strtod_l+0x970>)
 801b570:	4293      	cmp	r3, r2
 801b572:	d128      	bne.n	801b5c6 <_strtod_l+0x8fe>
 801b574:	9b04      	ldr	r3, [sp, #16]
 801b576:	4650      	mov	r0, sl
 801b578:	b1eb      	cbz	r3, 801b5b6 <_strtod_l+0x8ee>
 801b57a:	4a2d      	ldr	r2, [pc, #180]	; (801b630 <_strtod_l+0x968>)
 801b57c:	403a      	ands	r2, r7
 801b57e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b582:	f04f 31ff 	mov.w	r1, #4294967295
 801b586:	d819      	bhi.n	801b5bc <_strtod_l+0x8f4>
 801b588:	0d12      	lsrs	r2, r2, #20
 801b58a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b58e:	fa01 f303 	lsl.w	r3, r1, r3
 801b592:	4298      	cmp	r0, r3
 801b594:	d117      	bne.n	801b5c6 <_strtod_l+0x8fe>
 801b596:	4b29      	ldr	r3, [pc, #164]	; (801b63c <_strtod_l+0x974>)
 801b598:	429f      	cmp	r7, r3
 801b59a:	d102      	bne.n	801b5a2 <_strtod_l+0x8da>
 801b59c:	3001      	adds	r0, #1
 801b59e:	f43f addf 	beq.w	801b160 <_strtod_l+0x498>
 801b5a2:	4b23      	ldr	r3, [pc, #140]	; (801b630 <_strtod_l+0x968>)
 801b5a4:	403b      	ands	r3, r7
 801b5a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b5aa:	f04f 0a00 	mov.w	sl, #0
 801b5ae:	9b04      	ldr	r3, [sp, #16]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d1a0      	bne.n	801b4f6 <_strtod_l+0x82e>
 801b5b4:	e5de      	b.n	801b174 <_strtod_l+0x4ac>
 801b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5ba:	e7ea      	b.n	801b592 <_strtod_l+0x8ca>
 801b5bc:	460b      	mov	r3, r1
 801b5be:	e7e8      	b.n	801b592 <_strtod_l+0x8ca>
 801b5c0:	ea53 030a 	orrs.w	r3, r3, sl
 801b5c4:	d088      	beq.n	801b4d8 <_strtod_l+0x810>
 801b5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5c8:	b1db      	cbz	r3, 801b602 <_strtod_l+0x93a>
 801b5ca:	423b      	tst	r3, r7
 801b5cc:	d0ef      	beq.n	801b5ae <_strtod_l+0x8e6>
 801b5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5d0:	9a04      	ldr	r2, [sp, #16]
 801b5d2:	4650      	mov	r0, sl
 801b5d4:	4659      	mov	r1, fp
 801b5d6:	b1c3      	cbz	r3, 801b60a <_strtod_l+0x942>
 801b5d8:	f7ff fb59 	bl	801ac8e <sulp>
 801b5dc:	4602      	mov	r2, r0
 801b5de:	460b      	mov	r3, r1
 801b5e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b5e4:	f7e4 fe62 	bl	80002ac <__adddf3>
 801b5e8:	4682      	mov	sl, r0
 801b5ea:	468b      	mov	fp, r1
 801b5ec:	e7df      	b.n	801b5ae <_strtod_l+0x8e6>
 801b5ee:	4013      	ands	r3, r2
 801b5f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b5f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b5f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b5fc:	f04f 3aff 	mov.w	sl, #4294967295
 801b600:	e7d5      	b.n	801b5ae <_strtod_l+0x8e6>
 801b602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b604:	ea13 0f0a 	tst.w	r3, sl
 801b608:	e7e0      	b.n	801b5cc <_strtod_l+0x904>
 801b60a:	f7ff fb40 	bl	801ac8e <sulp>
 801b60e:	4602      	mov	r2, r0
 801b610:	460b      	mov	r3, r1
 801b612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b616:	f7e4 fe47 	bl	80002a8 <__aeabi_dsub>
 801b61a:	2200      	movs	r2, #0
 801b61c:	2300      	movs	r3, #0
 801b61e:	4682      	mov	sl, r0
 801b620:	468b      	mov	fp, r1
 801b622:	f7e5 fa61 	bl	8000ae8 <__aeabi_dcmpeq>
 801b626:	2800      	cmp	r0, #0
 801b628:	d0c1      	beq.n	801b5ae <_strtod_l+0x8e6>
 801b62a:	e60e      	b.n	801b24a <_strtod_l+0x582>
 801b62c:	fffffc02 	.word	0xfffffc02
 801b630:	7ff00000 	.word	0x7ff00000
 801b634:	39500000 	.word	0x39500000
 801b638:	000fffff 	.word	0x000fffff
 801b63c:	7fefffff 	.word	0x7fefffff
 801b640:	08020ba8 	.word	0x08020ba8
 801b644:	4631      	mov	r1, r6
 801b646:	4628      	mov	r0, r5
 801b648:	f002 fb2e 	bl	801dca8 <__ratio>
 801b64c:	ec59 8b10 	vmov	r8, r9, d0
 801b650:	ee10 0a10 	vmov	r0, s0
 801b654:	2200      	movs	r2, #0
 801b656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b65a:	4649      	mov	r1, r9
 801b65c:	f7e5 fa58 	bl	8000b10 <__aeabi_dcmple>
 801b660:	2800      	cmp	r0, #0
 801b662:	d07c      	beq.n	801b75e <_strtod_l+0xa96>
 801b664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b666:	2b00      	cmp	r3, #0
 801b668:	d04c      	beq.n	801b704 <_strtod_l+0xa3c>
 801b66a:	4b95      	ldr	r3, [pc, #596]	; (801b8c0 <_strtod_l+0xbf8>)
 801b66c:	2200      	movs	r2, #0
 801b66e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b672:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b8c0 <_strtod_l+0xbf8>
 801b676:	f04f 0800 	mov.w	r8, #0
 801b67a:	4b92      	ldr	r3, [pc, #584]	; (801b8c4 <_strtod_l+0xbfc>)
 801b67c:	403b      	ands	r3, r7
 801b67e:	9311      	str	r3, [sp, #68]	; 0x44
 801b680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b682:	4b91      	ldr	r3, [pc, #580]	; (801b8c8 <_strtod_l+0xc00>)
 801b684:	429a      	cmp	r2, r3
 801b686:	f040 80b2 	bne.w	801b7ee <_strtod_l+0xb26>
 801b68a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b68e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b692:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b696:	ec4b ab10 	vmov	d0, sl, fp
 801b69a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b69e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b6a2:	f002 fa29 	bl	801daf8 <__ulp>
 801b6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b6aa:	ec53 2b10 	vmov	r2, r3, d0
 801b6ae:	f7e4 ffb3 	bl	8000618 <__aeabi_dmul>
 801b6b2:	4652      	mov	r2, sl
 801b6b4:	465b      	mov	r3, fp
 801b6b6:	f7e4 fdf9 	bl	80002ac <__adddf3>
 801b6ba:	460b      	mov	r3, r1
 801b6bc:	4981      	ldr	r1, [pc, #516]	; (801b8c4 <_strtod_l+0xbfc>)
 801b6be:	4a83      	ldr	r2, [pc, #524]	; (801b8cc <_strtod_l+0xc04>)
 801b6c0:	4019      	ands	r1, r3
 801b6c2:	4291      	cmp	r1, r2
 801b6c4:	4682      	mov	sl, r0
 801b6c6:	d95e      	bls.n	801b786 <_strtod_l+0xabe>
 801b6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	d103      	bne.n	801b6da <_strtod_l+0xa12>
 801b6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6d4:	3301      	adds	r3, #1
 801b6d6:	f43f ad43 	beq.w	801b160 <_strtod_l+0x498>
 801b6da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b8d8 <_strtod_l+0xc10>
 801b6de:	f04f 3aff 	mov.w	sl, #4294967295
 801b6e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f001 fedb 	bl	801d4a0 <_Bfree>
 801b6ea:	9907      	ldr	r1, [sp, #28]
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f001 fed7 	bl	801d4a0 <_Bfree>
 801b6f2:	4631      	mov	r1, r6
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	f001 fed3 	bl	801d4a0 <_Bfree>
 801b6fa:	4629      	mov	r1, r5
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	f001 fecf 	bl	801d4a0 <_Bfree>
 801b702:	e613      	b.n	801b32c <_strtod_l+0x664>
 801b704:	f1ba 0f00 	cmp.w	sl, #0
 801b708:	d11b      	bne.n	801b742 <_strtod_l+0xa7a>
 801b70a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b70e:	b9f3      	cbnz	r3, 801b74e <_strtod_l+0xa86>
 801b710:	4b6b      	ldr	r3, [pc, #428]	; (801b8c0 <_strtod_l+0xbf8>)
 801b712:	2200      	movs	r2, #0
 801b714:	4640      	mov	r0, r8
 801b716:	4649      	mov	r1, r9
 801b718:	f7e5 f9f0 	bl	8000afc <__aeabi_dcmplt>
 801b71c:	b9d0      	cbnz	r0, 801b754 <_strtod_l+0xa8c>
 801b71e:	4640      	mov	r0, r8
 801b720:	4649      	mov	r1, r9
 801b722:	4b6b      	ldr	r3, [pc, #428]	; (801b8d0 <_strtod_l+0xc08>)
 801b724:	2200      	movs	r2, #0
 801b726:	f7e4 ff77 	bl	8000618 <__aeabi_dmul>
 801b72a:	4680      	mov	r8, r0
 801b72c:	4689      	mov	r9, r1
 801b72e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b732:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b736:	931b      	str	r3, [sp, #108]	; 0x6c
 801b738:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b73c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b740:	e79b      	b.n	801b67a <_strtod_l+0x9b2>
 801b742:	f1ba 0f01 	cmp.w	sl, #1
 801b746:	d102      	bne.n	801b74e <_strtod_l+0xa86>
 801b748:	2f00      	cmp	r7, #0
 801b74a:	f43f ad7e 	beq.w	801b24a <_strtod_l+0x582>
 801b74e:	4b61      	ldr	r3, [pc, #388]	; (801b8d4 <_strtod_l+0xc0c>)
 801b750:	2200      	movs	r2, #0
 801b752:	e78c      	b.n	801b66e <_strtod_l+0x9a6>
 801b754:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b8d0 <_strtod_l+0xc08>
 801b758:	f04f 0800 	mov.w	r8, #0
 801b75c:	e7e7      	b.n	801b72e <_strtod_l+0xa66>
 801b75e:	4b5c      	ldr	r3, [pc, #368]	; (801b8d0 <_strtod_l+0xc08>)
 801b760:	4640      	mov	r0, r8
 801b762:	4649      	mov	r1, r9
 801b764:	2200      	movs	r2, #0
 801b766:	f7e4 ff57 	bl	8000618 <__aeabi_dmul>
 801b76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b76c:	4680      	mov	r8, r0
 801b76e:	4689      	mov	r9, r1
 801b770:	b933      	cbnz	r3, 801b780 <_strtod_l+0xab8>
 801b772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b776:	9012      	str	r0, [sp, #72]	; 0x48
 801b778:	9313      	str	r3, [sp, #76]	; 0x4c
 801b77a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b77e:	e7dd      	b.n	801b73c <_strtod_l+0xa74>
 801b780:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b784:	e7f9      	b.n	801b77a <_strtod_l+0xab2>
 801b786:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b78a:	9b04      	ldr	r3, [sp, #16]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d1a8      	bne.n	801b6e2 <_strtod_l+0xa1a>
 801b790:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b794:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b796:	0d1b      	lsrs	r3, r3, #20
 801b798:	051b      	lsls	r3, r3, #20
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d1a1      	bne.n	801b6e2 <_strtod_l+0xa1a>
 801b79e:	4640      	mov	r0, r8
 801b7a0:	4649      	mov	r1, r9
 801b7a2:	f7e5 fa99 	bl	8000cd8 <__aeabi_d2lz>
 801b7a6:	f7e4 ff09 	bl	80005bc <__aeabi_l2d>
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	460b      	mov	r3, r1
 801b7ae:	4640      	mov	r0, r8
 801b7b0:	4649      	mov	r1, r9
 801b7b2:	f7e4 fd79 	bl	80002a8 <__aeabi_dsub>
 801b7b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b7b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7bc:	ea43 030a 	orr.w	r3, r3, sl
 801b7c0:	4313      	orrs	r3, r2
 801b7c2:	4680      	mov	r8, r0
 801b7c4:	4689      	mov	r9, r1
 801b7c6:	d053      	beq.n	801b870 <_strtod_l+0xba8>
 801b7c8:	a335      	add	r3, pc, #212	; (adr r3, 801b8a0 <_strtod_l+0xbd8>)
 801b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ce:	f7e5 f995 	bl	8000afc <__aeabi_dcmplt>
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	f47f acce 	bne.w	801b174 <_strtod_l+0x4ac>
 801b7d8:	a333      	add	r3, pc, #204	; (adr r3, 801b8a8 <_strtod_l+0xbe0>)
 801b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7de:	4640      	mov	r0, r8
 801b7e0:	4649      	mov	r1, r9
 801b7e2:	f7e5 f9a9 	bl	8000b38 <__aeabi_dcmpgt>
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	f43f af7b 	beq.w	801b6e2 <_strtod_l+0xa1a>
 801b7ec:	e4c2      	b.n	801b174 <_strtod_l+0x4ac>
 801b7ee:	9b04      	ldr	r3, [sp, #16]
 801b7f0:	b333      	cbz	r3, 801b840 <_strtod_l+0xb78>
 801b7f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b7f8:	d822      	bhi.n	801b840 <_strtod_l+0xb78>
 801b7fa:	a32d      	add	r3, pc, #180	; (adr r3, 801b8b0 <_strtod_l+0xbe8>)
 801b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b800:	4640      	mov	r0, r8
 801b802:	4649      	mov	r1, r9
 801b804:	f7e5 f984 	bl	8000b10 <__aeabi_dcmple>
 801b808:	b1a0      	cbz	r0, 801b834 <_strtod_l+0xb6c>
 801b80a:	4649      	mov	r1, r9
 801b80c:	4640      	mov	r0, r8
 801b80e:	f7e5 f9db 	bl	8000bc8 <__aeabi_d2uiz>
 801b812:	2801      	cmp	r0, #1
 801b814:	bf38      	it	cc
 801b816:	2001      	movcc	r0, #1
 801b818:	f7e4 fe84 	bl	8000524 <__aeabi_ui2d>
 801b81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b81e:	4680      	mov	r8, r0
 801b820:	4689      	mov	r9, r1
 801b822:	bb13      	cbnz	r3, 801b86a <_strtod_l+0xba2>
 801b824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b828:	9014      	str	r0, [sp, #80]	; 0x50
 801b82a:	9315      	str	r3, [sp, #84]	; 0x54
 801b82c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b830:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b838:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b83c:	1a9b      	subs	r3, r3, r2
 801b83e:	930d      	str	r3, [sp, #52]	; 0x34
 801b840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b844:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b848:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b84c:	f002 f954 	bl	801daf8 <__ulp>
 801b850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b854:	ec53 2b10 	vmov	r2, r3, d0
 801b858:	f7e4 fede 	bl	8000618 <__aeabi_dmul>
 801b85c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b860:	f7e4 fd24 	bl	80002ac <__adddf3>
 801b864:	4682      	mov	sl, r0
 801b866:	468b      	mov	fp, r1
 801b868:	e78f      	b.n	801b78a <_strtod_l+0xac2>
 801b86a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b86e:	e7dd      	b.n	801b82c <_strtod_l+0xb64>
 801b870:	a311      	add	r3, pc, #68	; (adr r3, 801b8b8 <_strtod_l+0xbf0>)
 801b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b876:	f7e5 f941 	bl	8000afc <__aeabi_dcmplt>
 801b87a:	e7b4      	b.n	801b7e6 <_strtod_l+0xb1e>
 801b87c:	2300      	movs	r3, #0
 801b87e:	930e      	str	r3, [sp, #56]	; 0x38
 801b880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b882:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b884:	6013      	str	r3, [r2, #0]
 801b886:	f7ff ba65 	b.w	801ad54 <_strtod_l+0x8c>
 801b88a:	2b65      	cmp	r3, #101	; 0x65
 801b88c:	f43f ab5d 	beq.w	801af4a <_strtod_l+0x282>
 801b890:	2b45      	cmp	r3, #69	; 0x45
 801b892:	f43f ab5a 	beq.w	801af4a <_strtod_l+0x282>
 801b896:	2201      	movs	r2, #1
 801b898:	f7ff bb92 	b.w	801afc0 <_strtod_l+0x2f8>
 801b89c:	f3af 8000 	nop.w
 801b8a0:	94a03595 	.word	0x94a03595
 801b8a4:	3fdfffff 	.word	0x3fdfffff
 801b8a8:	35afe535 	.word	0x35afe535
 801b8ac:	3fe00000 	.word	0x3fe00000
 801b8b0:	ffc00000 	.word	0xffc00000
 801b8b4:	41dfffff 	.word	0x41dfffff
 801b8b8:	94a03595 	.word	0x94a03595
 801b8bc:	3fcfffff 	.word	0x3fcfffff
 801b8c0:	3ff00000 	.word	0x3ff00000
 801b8c4:	7ff00000 	.word	0x7ff00000
 801b8c8:	7fe00000 	.word	0x7fe00000
 801b8cc:	7c9fffff 	.word	0x7c9fffff
 801b8d0:	3fe00000 	.word	0x3fe00000
 801b8d4:	bff00000 	.word	0xbff00000
 801b8d8:	7fefffff 	.word	0x7fefffff

0801b8dc <_strtod_r>:
 801b8dc:	4b01      	ldr	r3, [pc, #4]	; (801b8e4 <_strtod_r+0x8>)
 801b8de:	f7ff b9f3 	b.w	801acc8 <_strtod_l>
 801b8e2:	bf00      	nop
 801b8e4:	20000268 	.word	0x20000268

0801b8e8 <_strtol_l.isra.0>:
 801b8e8:	2b01      	cmp	r3, #1
 801b8ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8ee:	d001      	beq.n	801b8f4 <_strtol_l.isra.0+0xc>
 801b8f0:	2b24      	cmp	r3, #36	; 0x24
 801b8f2:	d906      	bls.n	801b902 <_strtol_l.isra.0+0x1a>
 801b8f4:	f7fd ff4e 	bl	8019794 <__errno>
 801b8f8:	2316      	movs	r3, #22
 801b8fa:	6003      	str	r3, [r0, #0]
 801b8fc:	2000      	movs	r0, #0
 801b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b902:	4f3a      	ldr	r7, [pc, #232]	; (801b9ec <_strtol_l.isra.0+0x104>)
 801b904:	468e      	mov	lr, r1
 801b906:	4676      	mov	r6, lr
 801b908:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b90c:	5de5      	ldrb	r5, [r4, r7]
 801b90e:	f015 0508 	ands.w	r5, r5, #8
 801b912:	d1f8      	bne.n	801b906 <_strtol_l.isra.0+0x1e>
 801b914:	2c2d      	cmp	r4, #45	; 0x2d
 801b916:	d134      	bne.n	801b982 <_strtol_l.isra.0+0x9a>
 801b918:	f89e 4000 	ldrb.w	r4, [lr]
 801b91c:	f04f 0801 	mov.w	r8, #1
 801b920:	f106 0e02 	add.w	lr, r6, #2
 801b924:	2b00      	cmp	r3, #0
 801b926:	d05c      	beq.n	801b9e2 <_strtol_l.isra.0+0xfa>
 801b928:	2b10      	cmp	r3, #16
 801b92a:	d10c      	bne.n	801b946 <_strtol_l.isra.0+0x5e>
 801b92c:	2c30      	cmp	r4, #48	; 0x30
 801b92e:	d10a      	bne.n	801b946 <_strtol_l.isra.0+0x5e>
 801b930:	f89e 4000 	ldrb.w	r4, [lr]
 801b934:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b938:	2c58      	cmp	r4, #88	; 0x58
 801b93a:	d14d      	bne.n	801b9d8 <_strtol_l.isra.0+0xf0>
 801b93c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b940:	2310      	movs	r3, #16
 801b942:	f10e 0e02 	add.w	lr, lr, #2
 801b946:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b94a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b94e:	2600      	movs	r6, #0
 801b950:	fbbc f9f3 	udiv	r9, ip, r3
 801b954:	4635      	mov	r5, r6
 801b956:	fb03 ca19 	mls	sl, r3, r9, ip
 801b95a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b95e:	2f09      	cmp	r7, #9
 801b960:	d818      	bhi.n	801b994 <_strtol_l.isra.0+0xac>
 801b962:	463c      	mov	r4, r7
 801b964:	42a3      	cmp	r3, r4
 801b966:	dd24      	ble.n	801b9b2 <_strtol_l.isra.0+0xca>
 801b968:	2e00      	cmp	r6, #0
 801b96a:	db1f      	blt.n	801b9ac <_strtol_l.isra.0+0xc4>
 801b96c:	45a9      	cmp	r9, r5
 801b96e:	d31d      	bcc.n	801b9ac <_strtol_l.isra.0+0xc4>
 801b970:	d101      	bne.n	801b976 <_strtol_l.isra.0+0x8e>
 801b972:	45a2      	cmp	sl, r4
 801b974:	db1a      	blt.n	801b9ac <_strtol_l.isra.0+0xc4>
 801b976:	fb05 4503 	mla	r5, r5, r3, r4
 801b97a:	2601      	movs	r6, #1
 801b97c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b980:	e7eb      	b.n	801b95a <_strtol_l.isra.0+0x72>
 801b982:	2c2b      	cmp	r4, #43	; 0x2b
 801b984:	bf08      	it	eq
 801b986:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b98a:	46a8      	mov	r8, r5
 801b98c:	bf08      	it	eq
 801b98e:	f106 0e02 	addeq.w	lr, r6, #2
 801b992:	e7c7      	b.n	801b924 <_strtol_l.isra.0+0x3c>
 801b994:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b998:	2f19      	cmp	r7, #25
 801b99a:	d801      	bhi.n	801b9a0 <_strtol_l.isra.0+0xb8>
 801b99c:	3c37      	subs	r4, #55	; 0x37
 801b99e:	e7e1      	b.n	801b964 <_strtol_l.isra.0+0x7c>
 801b9a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b9a4:	2f19      	cmp	r7, #25
 801b9a6:	d804      	bhi.n	801b9b2 <_strtol_l.isra.0+0xca>
 801b9a8:	3c57      	subs	r4, #87	; 0x57
 801b9aa:	e7db      	b.n	801b964 <_strtol_l.isra.0+0x7c>
 801b9ac:	f04f 36ff 	mov.w	r6, #4294967295
 801b9b0:	e7e4      	b.n	801b97c <_strtol_l.isra.0+0x94>
 801b9b2:	2e00      	cmp	r6, #0
 801b9b4:	da05      	bge.n	801b9c2 <_strtol_l.isra.0+0xda>
 801b9b6:	2322      	movs	r3, #34	; 0x22
 801b9b8:	6003      	str	r3, [r0, #0]
 801b9ba:	4665      	mov	r5, ip
 801b9bc:	b942      	cbnz	r2, 801b9d0 <_strtol_l.isra.0+0xe8>
 801b9be:	4628      	mov	r0, r5
 801b9c0:	e79d      	b.n	801b8fe <_strtol_l.isra.0+0x16>
 801b9c2:	f1b8 0f00 	cmp.w	r8, #0
 801b9c6:	d000      	beq.n	801b9ca <_strtol_l.isra.0+0xe2>
 801b9c8:	426d      	negs	r5, r5
 801b9ca:	2a00      	cmp	r2, #0
 801b9cc:	d0f7      	beq.n	801b9be <_strtol_l.isra.0+0xd6>
 801b9ce:	b10e      	cbz	r6, 801b9d4 <_strtol_l.isra.0+0xec>
 801b9d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b9d4:	6011      	str	r1, [r2, #0]
 801b9d6:	e7f2      	b.n	801b9be <_strtol_l.isra.0+0xd6>
 801b9d8:	2430      	movs	r4, #48	; 0x30
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d1b3      	bne.n	801b946 <_strtol_l.isra.0+0x5e>
 801b9de:	2308      	movs	r3, #8
 801b9e0:	e7b1      	b.n	801b946 <_strtol_l.isra.0+0x5e>
 801b9e2:	2c30      	cmp	r4, #48	; 0x30
 801b9e4:	d0a4      	beq.n	801b930 <_strtol_l.isra.0+0x48>
 801b9e6:	230a      	movs	r3, #10
 801b9e8:	e7ad      	b.n	801b946 <_strtol_l.isra.0+0x5e>
 801b9ea:	bf00      	nop
 801b9ec:	080209e1 	.word	0x080209e1

0801b9f0 <_strtol_r>:
 801b9f0:	f7ff bf7a 	b.w	801b8e8 <_strtol_l.isra.0>

0801b9f4 <strtol>:
 801b9f4:	4613      	mov	r3, r2
 801b9f6:	460a      	mov	r2, r1
 801b9f8:	4601      	mov	r1, r0
 801b9fa:	4802      	ldr	r0, [pc, #8]	; (801ba04 <strtol+0x10>)
 801b9fc:	6800      	ldr	r0, [r0, #0]
 801b9fe:	f7ff bf73 	b.w	801b8e8 <_strtol_l.isra.0>
 801ba02:	bf00      	nop
 801ba04:	20000200 	.word	0x20000200

0801ba08 <_strtoul_l.isra.0>:
 801ba08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba0c:	4e3b      	ldr	r6, [pc, #236]	; (801bafc <_strtoul_l.isra.0+0xf4>)
 801ba0e:	4686      	mov	lr, r0
 801ba10:	468c      	mov	ip, r1
 801ba12:	4660      	mov	r0, ip
 801ba14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ba18:	5da5      	ldrb	r5, [r4, r6]
 801ba1a:	f015 0508 	ands.w	r5, r5, #8
 801ba1e:	d1f8      	bne.n	801ba12 <_strtoul_l.isra.0+0xa>
 801ba20:	2c2d      	cmp	r4, #45	; 0x2d
 801ba22:	d134      	bne.n	801ba8e <_strtoul_l.isra.0+0x86>
 801ba24:	f89c 4000 	ldrb.w	r4, [ip]
 801ba28:	f04f 0801 	mov.w	r8, #1
 801ba2c:	f100 0c02 	add.w	ip, r0, #2
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d05e      	beq.n	801baf2 <_strtoul_l.isra.0+0xea>
 801ba34:	2b10      	cmp	r3, #16
 801ba36:	d10c      	bne.n	801ba52 <_strtoul_l.isra.0+0x4a>
 801ba38:	2c30      	cmp	r4, #48	; 0x30
 801ba3a:	d10a      	bne.n	801ba52 <_strtoul_l.isra.0+0x4a>
 801ba3c:	f89c 0000 	ldrb.w	r0, [ip]
 801ba40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ba44:	2858      	cmp	r0, #88	; 0x58
 801ba46:	d14f      	bne.n	801bae8 <_strtoul_l.isra.0+0xe0>
 801ba48:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801ba4c:	2310      	movs	r3, #16
 801ba4e:	f10c 0c02 	add.w	ip, ip, #2
 801ba52:	f04f 37ff 	mov.w	r7, #4294967295
 801ba56:	2500      	movs	r5, #0
 801ba58:	fbb7 f7f3 	udiv	r7, r7, r3
 801ba5c:	fb03 f907 	mul.w	r9, r3, r7
 801ba60:	ea6f 0909 	mvn.w	r9, r9
 801ba64:	4628      	mov	r0, r5
 801ba66:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801ba6a:	2e09      	cmp	r6, #9
 801ba6c:	d818      	bhi.n	801baa0 <_strtoul_l.isra.0+0x98>
 801ba6e:	4634      	mov	r4, r6
 801ba70:	42a3      	cmp	r3, r4
 801ba72:	dd24      	ble.n	801babe <_strtoul_l.isra.0+0xb6>
 801ba74:	2d00      	cmp	r5, #0
 801ba76:	db1f      	blt.n	801bab8 <_strtoul_l.isra.0+0xb0>
 801ba78:	4287      	cmp	r7, r0
 801ba7a:	d31d      	bcc.n	801bab8 <_strtoul_l.isra.0+0xb0>
 801ba7c:	d101      	bne.n	801ba82 <_strtoul_l.isra.0+0x7a>
 801ba7e:	45a1      	cmp	r9, r4
 801ba80:	db1a      	blt.n	801bab8 <_strtoul_l.isra.0+0xb0>
 801ba82:	fb00 4003 	mla	r0, r0, r3, r4
 801ba86:	2501      	movs	r5, #1
 801ba88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ba8c:	e7eb      	b.n	801ba66 <_strtoul_l.isra.0+0x5e>
 801ba8e:	2c2b      	cmp	r4, #43	; 0x2b
 801ba90:	bf08      	it	eq
 801ba92:	f89c 4000 	ldrbeq.w	r4, [ip]
 801ba96:	46a8      	mov	r8, r5
 801ba98:	bf08      	it	eq
 801ba9a:	f100 0c02 	addeq.w	ip, r0, #2
 801ba9e:	e7c7      	b.n	801ba30 <_strtoul_l.isra.0+0x28>
 801baa0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801baa4:	2e19      	cmp	r6, #25
 801baa6:	d801      	bhi.n	801baac <_strtoul_l.isra.0+0xa4>
 801baa8:	3c37      	subs	r4, #55	; 0x37
 801baaa:	e7e1      	b.n	801ba70 <_strtoul_l.isra.0+0x68>
 801baac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801bab0:	2e19      	cmp	r6, #25
 801bab2:	d804      	bhi.n	801babe <_strtoul_l.isra.0+0xb6>
 801bab4:	3c57      	subs	r4, #87	; 0x57
 801bab6:	e7db      	b.n	801ba70 <_strtoul_l.isra.0+0x68>
 801bab8:	f04f 35ff 	mov.w	r5, #4294967295
 801babc:	e7e4      	b.n	801ba88 <_strtoul_l.isra.0+0x80>
 801babe:	2d00      	cmp	r5, #0
 801bac0:	da07      	bge.n	801bad2 <_strtoul_l.isra.0+0xca>
 801bac2:	2322      	movs	r3, #34	; 0x22
 801bac4:	f8ce 3000 	str.w	r3, [lr]
 801bac8:	f04f 30ff 	mov.w	r0, #4294967295
 801bacc:	b942      	cbnz	r2, 801bae0 <_strtoul_l.isra.0+0xd8>
 801bace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bad2:	f1b8 0f00 	cmp.w	r8, #0
 801bad6:	d000      	beq.n	801bada <_strtoul_l.isra.0+0xd2>
 801bad8:	4240      	negs	r0, r0
 801bada:	2a00      	cmp	r2, #0
 801badc:	d0f7      	beq.n	801bace <_strtoul_l.isra.0+0xc6>
 801bade:	b10d      	cbz	r5, 801bae4 <_strtoul_l.isra.0+0xdc>
 801bae0:	f10c 31ff 	add.w	r1, ip, #4294967295
 801bae4:	6011      	str	r1, [r2, #0]
 801bae6:	e7f2      	b.n	801bace <_strtoul_l.isra.0+0xc6>
 801bae8:	2430      	movs	r4, #48	; 0x30
 801baea:	2b00      	cmp	r3, #0
 801baec:	d1b1      	bne.n	801ba52 <_strtoul_l.isra.0+0x4a>
 801baee:	2308      	movs	r3, #8
 801baf0:	e7af      	b.n	801ba52 <_strtoul_l.isra.0+0x4a>
 801baf2:	2c30      	cmp	r4, #48	; 0x30
 801baf4:	d0a2      	beq.n	801ba3c <_strtoul_l.isra.0+0x34>
 801baf6:	230a      	movs	r3, #10
 801baf8:	e7ab      	b.n	801ba52 <_strtoul_l.isra.0+0x4a>
 801bafa:	bf00      	nop
 801bafc:	080209e1 	.word	0x080209e1

0801bb00 <_strtoul_r>:
 801bb00:	f7ff bf82 	b.w	801ba08 <_strtoul_l.isra.0>

0801bb04 <_vsniprintf_r>:
 801bb04:	b530      	push	{r4, r5, lr}
 801bb06:	1e14      	subs	r4, r2, #0
 801bb08:	4605      	mov	r5, r0
 801bb0a:	b09b      	sub	sp, #108	; 0x6c
 801bb0c:	4618      	mov	r0, r3
 801bb0e:	da05      	bge.n	801bb1c <_vsniprintf_r+0x18>
 801bb10:	238b      	movs	r3, #139	; 0x8b
 801bb12:	602b      	str	r3, [r5, #0]
 801bb14:	f04f 30ff 	mov.w	r0, #4294967295
 801bb18:	b01b      	add	sp, #108	; 0x6c
 801bb1a:	bd30      	pop	{r4, r5, pc}
 801bb1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bb20:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bb24:	bf14      	ite	ne
 801bb26:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bb2a:	4623      	moveq	r3, r4
 801bb2c:	9302      	str	r3, [sp, #8]
 801bb2e:	9305      	str	r3, [sp, #20]
 801bb30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bb34:	9100      	str	r1, [sp, #0]
 801bb36:	9104      	str	r1, [sp, #16]
 801bb38:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bb40:	4669      	mov	r1, sp
 801bb42:	4628      	mov	r0, r5
 801bb44:	f002 f9b8 	bl	801deb8 <_svfiprintf_r>
 801bb48:	1c43      	adds	r3, r0, #1
 801bb4a:	bfbc      	itt	lt
 801bb4c:	238b      	movlt	r3, #139	; 0x8b
 801bb4e:	602b      	strlt	r3, [r5, #0]
 801bb50:	2c00      	cmp	r4, #0
 801bb52:	d0e1      	beq.n	801bb18 <_vsniprintf_r+0x14>
 801bb54:	9b00      	ldr	r3, [sp, #0]
 801bb56:	2200      	movs	r2, #0
 801bb58:	701a      	strb	r2, [r3, #0]
 801bb5a:	e7dd      	b.n	801bb18 <_vsniprintf_r+0x14>

0801bb5c <vsniprintf>:
 801bb5c:	b507      	push	{r0, r1, r2, lr}
 801bb5e:	9300      	str	r3, [sp, #0]
 801bb60:	4613      	mov	r3, r2
 801bb62:	460a      	mov	r2, r1
 801bb64:	4601      	mov	r1, r0
 801bb66:	4803      	ldr	r0, [pc, #12]	; (801bb74 <vsniprintf+0x18>)
 801bb68:	6800      	ldr	r0, [r0, #0]
 801bb6a:	f7ff ffcb 	bl	801bb04 <_vsniprintf_r>
 801bb6e:	b003      	add	sp, #12
 801bb70:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb74:	20000200 	.word	0x20000200

0801bb78 <__swbuf_r>:
 801bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb7a:	460e      	mov	r6, r1
 801bb7c:	4614      	mov	r4, r2
 801bb7e:	4605      	mov	r5, r0
 801bb80:	b118      	cbz	r0, 801bb8a <__swbuf_r+0x12>
 801bb82:	6983      	ldr	r3, [r0, #24]
 801bb84:	b90b      	cbnz	r3, 801bb8a <__swbuf_r+0x12>
 801bb86:	f7fd fe63 	bl	8019850 <__sinit>
 801bb8a:	4b21      	ldr	r3, [pc, #132]	; (801bc10 <__swbuf_r+0x98>)
 801bb8c:	429c      	cmp	r4, r3
 801bb8e:	d12b      	bne.n	801bbe8 <__swbuf_r+0x70>
 801bb90:	686c      	ldr	r4, [r5, #4]
 801bb92:	69a3      	ldr	r3, [r4, #24]
 801bb94:	60a3      	str	r3, [r4, #8]
 801bb96:	89a3      	ldrh	r3, [r4, #12]
 801bb98:	071a      	lsls	r2, r3, #28
 801bb9a:	d52f      	bpl.n	801bbfc <__swbuf_r+0x84>
 801bb9c:	6923      	ldr	r3, [r4, #16]
 801bb9e:	b36b      	cbz	r3, 801bbfc <__swbuf_r+0x84>
 801bba0:	6923      	ldr	r3, [r4, #16]
 801bba2:	6820      	ldr	r0, [r4, #0]
 801bba4:	1ac0      	subs	r0, r0, r3
 801bba6:	6963      	ldr	r3, [r4, #20]
 801bba8:	b2f6      	uxtb	r6, r6
 801bbaa:	4283      	cmp	r3, r0
 801bbac:	4637      	mov	r7, r6
 801bbae:	dc04      	bgt.n	801bbba <__swbuf_r+0x42>
 801bbb0:	4621      	mov	r1, r4
 801bbb2:	4628      	mov	r0, r5
 801bbb4:	f000 ffde 	bl	801cb74 <_fflush_r>
 801bbb8:	bb30      	cbnz	r0, 801bc08 <__swbuf_r+0x90>
 801bbba:	68a3      	ldr	r3, [r4, #8]
 801bbbc:	3b01      	subs	r3, #1
 801bbbe:	60a3      	str	r3, [r4, #8]
 801bbc0:	6823      	ldr	r3, [r4, #0]
 801bbc2:	1c5a      	adds	r2, r3, #1
 801bbc4:	6022      	str	r2, [r4, #0]
 801bbc6:	701e      	strb	r6, [r3, #0]
 801bbc8:	6963      	ldr	r3, [r4, #20]
 801bbca:	3001      	adds	r0, #1
 801bbcc:	4283      	cmp	r3, r0
 801bbce:	d004      	beq.n	801bbda <__swbuf_r+0x62>
 801bbd0:	89a3      	ldrh	r3, [r4, #12]
 801bbd2:	07db      	lsls	r3, r3, #31
 801bbd4:	d506      	bpl.n	801bbe4 <__swbuf_r+0x6c>
 801bbd6:	2e0a      	cmp	r6, #10
 801bbd8:	d104      	bne.n	801bbe4 <__swbuf_r+0x6c>
 801bbda:	4621      	mov	r1, r4
 801bbdc:	4628      	mov	r0, r5
 801bbde:	f000 ffc9 	bl	801cb74 <_fflush_r>
 801bbe2:	b988      	cbnz	r0, 801bc08 <__swbuf_r+0x90>
 801bbe4:	4638      	mov	r0, r7
 801bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbe8:	4b0a      	ldr	r3, [pc, #40]	; (801bc14 <__swbuf_r+0x9c>)
 801bbea:	429c      	cmp	r4, r3
 801bbec:	d101      	bne.n	801bbf2 <__swbuf_r+0x7a>
 801bbee:	68ac      	ldr	r4, [r5, #8]
 801bbf0:	e7cf      	b.n	801bb92 <__swbuf_r+0x1a>
 801bbf2:	4b09      	ldr	r3, [pc, #36]	; (801bc18 <__swbuf_r+0xa0>)
 801bbf4:	429c      	cmp	r4, r3
 801bbf6:	bf08      	it	eq
 801bbf8:	68ec      	ldreq	r4, [r5, #12]
 801bbfa:	e7ca      	b.n	801bb92 <__swbuf_r+0x1a>
 801bbfc:	4621      	mov	r1, r4
 801bbfe:	4628      	mov	r0, r5
 801bc00:	f000 f81e 	bl	801bc40 <__swsetup_r>
 801bc04:	2800      	cmp	r0, #0
 801bc06:	d0cb      	beq.n	801bba0 <__swbuf_r+0x28>
 801bc08:	f04f 37ff 	mov.w	r7, #4294967295
 801bc0c:	e7ea      	b.n	801bbe4 <__swbuf_r+0x6c>
 801bc0e:	bf00      	nop
 801bc10:	08020b04 	.word	0x08020b04
 801bc14:	08020b24 	.word	0x08020b24
 801bc18:	08020ae4 	.word	0x08020ae4

0801bc1c <_write_r>:
 801bc1c:	b538      	push	{r3, r4, r5, lr}
 801bc1e:	4d07      	ldr	r5, [pc, #28]	; (801bc3c <_write_r+0x20>)
 801bc20:	4604      	mov	r4, r0
 801bc22:	4608      	mov	r0, r1
 801bc24:	4611      	mov	r1, r2
 801bc26:	2200      	movs	r2, #0
 801bc28:	602a      	str	r2, [r5, #0]
 801bc2a:	461a      	mov	r2, r3
 801bc2c:	f7e7 fb09 	bl	8003242 <_write>
 801bc30:	1c43      	adds	r3, r0, #1
 801bc32:	d102      	bne.n	801bc3a <_write_r+0x1e>
 801bc34:	682b      	ldr	r3, [r5, #0]
 801bc36:	b103      	cbz	r3, 801bc3a <_write_r+0x1e>
 801bc38:	6023      	str	r3, [r4, #0]
 801bc3a:	bd38      	pop	{r3, r4, r5, pc}
 801bc3c:	20008e5c 	.word	0x20008e5c

0801bc40 <__swsetup_r>:
 801bc40:	4b32      	ldr	r3, [pc, #200]	; (801bd0c <__swsetup_r+0xcc>)
 801bc42:	b570      	push	{r4, r5, r6, lr}
 801bc44:	681d      	ldr	r5, [r3, #0]
 801bc46:	4606      	mov	r6, r0
 801bc48:	460c      	mov	r4, r1
 801bc4a:	b125      	cbz	r5, 801bc56 <__swsetup_r+0x16>
 801bc4c:	69ab      	ldr	r3, [r5, #24]
 801bc4e:	b913      	cbnz	r3, 801bc56 <__swsetup_r+0x16>
 801bc50:	4628      	mov	r0, r5
 801bc52:	f7fd fdfd 	bl	8019850 <__sinit>
 801bc56:	4b2e      	ldr	r3, [pc, #184]	; (801bd10 <__swsetup_r+0xd0>)
 801bc58:	429c      	cmp	r4, r3
 801bc5a:	d10f      	bne.n	801bc7c <__swsetup_r+0x3c>
 801bc5c:	686c      	ldr	r4, [r5, #4]
 801bc5e:	89a3      	ldrh	r3, [r4, #12]
 801bc60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc64:	0719      	lsls	r1, r3, #28
 801bc66:	d42c      	bmi.n	801bcc2 <__swsetup_r+0x82>
 801bc68:	06dd      	lsls	r5, r3, #27
 801bc6a:	d411      	bmi.n	801bc90 <__swsetup_r+0x50>
 801bc6c:	2309      	movs	r3, #9
 801bc6e:	6033      	str	r3, [r6, #0]
 801bc70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc74:	81a3      	strh	r3, [r4, #12]
 801bc76:	f04f 30ff 	mov.w	r0, #4294967295
 801bc7a:	e03e      	b.n	801bcfa <__swsetup_r+0xba>
 801bc7c:	4b25      	ldr	r3, [pc, #148]	; (801bd14 <__swsetup_r+0xd4>)
 801bc7e:	429c      	cmp	r4, r3
 801bc80:	d101      	bne.n	801bc86 <__swsetup_r+0x46>
 801bc82:	68ac      	ldr	r4, [r5, #8]
 801bc84:	e7eb      	b.n	801bc5e <__swsetup_r+0x1e>
 801bc86:	4b24      	ldr	r3, [pc, #144]	; (801bd18 <__swsetup_r+0xd8>)
 801bc88:	429c      	cmp	r4, r3
 801bc8a:	bf08      	it	eq
 801bc8c:	68ec      	ldreq	r4, [r5, #12]
 801bc8e:	e7e6      	b.n	801bc5e <__swsetup_r+0x1e>
 801bc90:	0758      	lsls	r0, r3, #29
 801bc92:	d512      	bpl.n	801bcba <__swsetup_r+0x7a>
 801bc94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc96:	b141      	cbz	r1, 801bcaa <__swsetup_r+0x6a>
 801bc98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc9c:	4299      	cmp	r1, r3
 801bc9e:	d002      	beq.n	801bca6 <__swsetup_r+0x66>
 801bca0:	4630      	mov	r0, r6
 801bca2:	f7fd fed3 	bl	8019a4c <_free_r>
 801bca6:	2300      	movs	r3, #0
 801bca8:	6363      	str	r3, [r4, #52]	; 0x34
 801bcaa:	89a3      	ldrh	r3, [r4, #12]
 801bcac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bcb0:	81a3      	strh	r3, [r4, #12]
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	6063      	str	r3, [r4, #4]
 801bcb6:	6923      	ldr	r3, [r4, #16]
 801bcb8:	6023      	str	r3, [r4, #0]
 801bcba:	89a3      	ldrh	r3, [r4, #12]
 801bcbc:	f043 0308 	orr.w	r3, r3, #8
 801bcc0:	81a3      	strh	r3, [r4, #12]
 801bcc2:	6923      	ldr	r3, [r4, #16]
 801bcc4:	b94b      	cbnz	r3, 801bcda <__swsetup_r+0x9a>
 801bcc6:	89a3      	ldrh	r3, [r4, #12]
 801bcc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bcd0:	d003      	beq.n	801bcda <__swsetup_r+0x9a>
 801bcd2:	4621      	mov	r1, r4
 801bcd4:	4630      	mov	r0, r6
 801bcd6:	f001 fb45 	bl	801d364 <__smakebuf_r>
 801bcda:	89a0      	ldrh	r0, [r4, #12]
 801bcdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bce0:	f010 0301 	ands.w	r3, r0, #1
 801bce4:	d00a      	beq.n	801bcfc <__swsetup_r+0xbc>
 801bce6:	2300      	movs	r3, #0
 801bce8:	60a3      	str	r3, [r4, #8]
 801bcea:	6963      	ldr	r3, [r4, #20]
 801bcec:	425b      	negs	r3, r3
 801bcee:	61a3      	str	r3, [r4, #24]
 801bcf0:	6923      	ldr	r3, [r4, #16]
 801bcf2:	b943      	cbnz	r3, 801bd06 <__swsetup_r+0xc6>
 801bcf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bcf8:	d1ba      	bne.n	801bc70 <__swsetup_r+0x30>
 801bcfa:	bd70      	pop	{r4, r5, r6, pc}
 801bcfc:	0781      	lsls	r1, r0, #30
 801bcfe:	bf58      	it	pl
 801bd00:	6963      	ldrpl	r3, [r4, #20]
 801bd02:	60a3      	str	r3, [r4, #8]
 801bd04:	e7f4      	b.n	801bcf0 <__swsetup_r+0xb0>
 801bd06:	2000      	movs	r0, #0
 801bd08:	e7f7      	b.n	801bcfa <__swsetup_r+0xba>
 801bd0a:	bf00      	nop
 801bd0c:	20000200 	.word	0x20000200
 801bd10:	08020b04 	.word	0x08020b04
 801bd14:	08020b24 	.word	0x08020b24
 801bd18:	08020ae4 	.word	0x08020ae4

0801bd1c <__assert_func>:
 801bd1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bd1e:	4614      	mov	r4, r2
 801bd20:	461a      	mov	r2, r3
 801bd22:	4b09      	ldr	r3, [pc, #36]	; (801bd48 <__assert_func+0x2c>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	4605      	mov	r5, r0
 801bd28:	68d8      	ldr	r0, [r3, #12]
 801bd2a:	b14c      	cbz	r4, 801bd40 <__assert_func+0x24>
 801bd2c:	4b07      	ldr	r3, [pc, #28]	; (801bd4c <__assert_func+0x30>)
 801bd2e:	9100      	str	r1, [sp, #0]
 801bd30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bd34:	4906      	ldr	r1, [pc, #24]	; (801bd50 <__assert_func+0x34>)
 801bd36:	462b      	mov	r3, r5
 801bd38:	f000 ff58 	bl	801cbec <fiprintf>
 801bd3c:	f7fd fd22 	bl	8019784 <abort>
 801bd40:	4b04      	ldr	r3, [pc, #16]	; (801bd54 <__assert_func+0x38>)
 801bd42:	461c      	mov	r4, r3
 801bd44:	e7f3      	b.n	801bd2e <__assert_func+0x12>
 801bd46:	bf00      	nop
 801bd48:	20000200 	.word	0x20000200
 801bd4c:	08020bd0 	.word	0x08020bd0
 801bd50:	08020bdd 	.word	0x08020bdd
 801bd54:	08020c0b 	.word	0x08020c0b

0801bd58 <_close_r>:
 801bd58:	b538      	push	{r3, r4, r5, lr}
 801bd5a:	4d06      	ldr	r5, [pc, #24]	; (801bd74 <_close_r+0x1c>)
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	4604      	mov	r4, r0
 801bd60:	4608      	mov	r0, r1
 801bd62:	602b      	str	r3, [r5, #0]
 801bd64:	f7e7 fa89 	bl	800327a <_close>
 801bd68:	1c43      	adds	r3, r0, #1
 801bd6a:	d102      	bne.n	801bd72 <_close_r+0x1a>
 801bd6c:	682b      	ldr	r3, [r5, #0]
 801bd6e:	b103      	cbz	r3, 801bd72 <_close_r+0x1a>
 801bd70:	6023      	str	r3, [r4, #0]
 801bd72:	bd38      	pop	{r3, r4, r5, pc}
 801bd74:	20008e5c 	.word	0x20008e5c

0801bd78 <quorem>:
 801bd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd7c:	6903      	ldr	r3, [r0, #16]
 801bd7e:	690c      	ldr	r4, [r1, #16]
 801bd80:	42a3      	cmp	r3, r4
 801bd82:	4607      	mov	r7, r0
 801bd84:	f2c0 8081 	blt.w	801be8a <quorem+0x112>
 801bd88:	3c01      	subs	r4, #1
 801bd8a:	f101 0814 	add.w	r8, r1, #20
 801bd8e:	f100 0514 	add.w	r5, r0, #20
 801bd92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bd96:	9301      	str	r3, [sp, #4]
 801bd98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bd9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bda0:	3301      	adds	r3, #1
 801bda2:	429a      	cmp	r2, r3
 801bda4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bda8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bdac:	fbb2 f6f3 	udiv	r6, r2, r3
 801bdb0:	d331      	bcc.n	801be16 <quorem+0x9e>
 801bdb2:	f04f 0e00 	mov.w	lr, #0
 801bdb6:	4640      	mov	r0, r8
 801bdb8:	46ac      	mov	ip, r5
 801bdba:	46f2      	mov	sl, lr
 801bdbc:	f850 2b04 	ldr.w	r2, [r0], #4
 801bdc0:	b293      	uxth	r3, r2
 801bdc2:	fb06 e303 	mla	r3, r6, r3, lr
 801bdc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bdca:	b29b      	uxth	r3, r3
 801bdcc:	ebaa 0303 	sub.w	r3, sl, r3
 801bdd0:	0c12      	lsrs	r2, r2, #16
 801bdd2:	f8dc a000 	ldr.w	sl, [ip]
 801bdd6:	fb06 e202 	mla	r2, r6, r2, lr
 801bdda:	fa13 f38a 	uxtah	r3, r3, sl
 801bdde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bde2:	fa1f fa82 	uxth.w	sl, r2
 801bde6:	f8dc 2000 	ldr.w	r2, [ip]
 801bdea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801bdee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bdf2:	b29b      	uxth	r3, r3
 801bdf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bdf8:	4581      	cmp	r9, r0
 801bdfa:	f84c 3b04 	str.w	r3, [ip], #4
 801bdfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801be02:	d2db      	bcs.n	801bdbc <quorem+0x44>
 801be04:	f855 300b 	ldr.w	r3, [r5, fp]
 801be08:	b92b      	cbnz	r3, 801be16 <quorem+0x9e>
 801be0a:	9b01      	ldr	r3, [sp, #4]
 801be0c:	3b04      	subs	r3, #4
 801be0e:	429d      	cmp	r5, r3
 801be10:	461a      	mov	r2, r3
 801be12:	d32e      	bcc.n	801be72 <quorem+0xfa>
 801be14:	613c      	str	r4, [r7, #16]
 801be16:	4638      	mov	r0, r7
 801be18:	f001 fdca 	bl	801d9b0 <__mcmp>
 801be1c:	2800      	cmp	r0, #0
 801be1e:	db24      	blt.n	801be6a <quorem+0xf2>
 801be20:	3601      	adds	r6, #1
 801be22:	4628      	mov	r0, r5
 801be24:	f04f 0c00 	mov.w	ip, #0
 801be28:	f858 2b04 	ldr.w	r2, [r8], #4
 801be2c:	f8d0 e000 	ldr.w	lr, [r0]
 801be30:	b293      	uxth	r3, r2
 801be32:	ebac 0303 	sub.w	r3, ip, r3
 801be36:	0c12      	lsrs	r2, r2, #16
 801be38:	fa13 f38e 	uxtah	r3, r3, lr
 801be3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801be40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801be44:	b29b      	uxth	r3, r3
 801be46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801be4a:	45c1      	cmp	r9, r8
 801be4c:	f840 3b04 	str.w	r3, [r0], #4
 801be50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801be54:	d2e8      	bcs.n	801be28 <quorem+0xb0>
 801be56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801be5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801be5e:	b922      	cbnz	r2, 801be6a <quorem+0xf2>
 801be60:	3b04      	subs	r3, #4
 801be62:	429d      	cmp	r5, r3
 801be64:	461a      	mov	r2, r3
 801be66:	d30a      	bcc.n	801be7e <quorem+0x106>
 801be68:	613c      	str	r4, [r7, #16]
 801be6a:	4630      	mov	r0, r6
 801be6c:	b003      	add	sp, #12
 801be6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be72:	6812      	ldr	r2, [r2, #0]
 801be74:	3b04      	subs	r3, #4
 801be76:	2a00      	cmp	r2, #0
 801be78:	d1cc      	bne.n	801be14 <quorem+0x9c>
 801be7a:	3c01      	subs	r4, #1
 801be7c:	e7c7      	b.n	801be0e <quorem+0x96>
 801be7e:	6812      	ldr	r2, [r2, #0]
 801be80:	3b04      	subs	r3, #4
 801be82:	2a00      	cmp	r2, #0
 801be84:	d1f0      	bne.n	801be68 <quorem+0xf0>
 801be86:	3c01      	subs	r4, #1
 801be88:	e7eb      	b.n	801be62 <quorem+0xea>
 801be8a:	2000      	movs	r0, #0
 801be8c:	e7ee      	b.n	801be6c <quorem+0xf4>
	...

0801be90 <_dtoa_r>:
 801be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be94:	ed2d 8b02 	vpush	{d8}
 801be98:	ec57 6b10 	vmov	r6, r7, d0
 801be9c:	b095      	sub	sp, #84	; 0x54
 801be9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bea4:	9105      	str	r1, [sp, #20]
 801bea6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801beaa:	4604      	mov	r4, r0
 801beac:	9209      	str	r2, [sp, #36]	; 0x24
 801beae:	930f      	str	r3, [sp, #60]	; 0x3c
 801beb0:	b975      	cbnz	r5, 801bed0 <_dtoa_r+0x40>
 801beb2:	2010      	movs	r0, #16
 801beb4:	f7fd fd92 	bl	80199dc <malloc>
 801beb8:	4602      	mov	r2, r0
 801beba:	6260      	str	r0, [r4, #36]	; 0x24
 801bebc:	b920      	cbnz	r0, 801bec8 <_dtoa_r+0x38>
 801bebe:	4bb2      	ldr	r3, [pc, #712]	; (801c188 <_dtoa_r+0x2f8>)
 801bec0:	21ea      	movs	r1, #234	; 0xea
 801bec2:	48b2      	ldr	r0, [pc, #712]	; (801c18c <_dtoa_r+0x2fc>)
 801bec4:	f7ff ff2a 	bl	801bd1c <__assert_func>
 801bec8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801becc:	6005      	str	r5, [r0, #0]
 801bece:	60c5      	str	r5, [r0, #12]
 801bed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bed2:	6819      	ldr	r1, [r3, #0]
 801bed4:	b151      	cbz	r1, 801beec <_dtoa_r+0x5c>
 801bed6:	685a      	ldr	r2, [r3, #4]
 801bed8:	604a      	str	r2, [r1, #4]
 801beda:	2301      	movs	r3, #1
 801bedc:	4093      	lsls	r3, r2
 801bede:	608b      	str	r3, [r1, #8]
 801bee0:	4620      	mov	r0, r4
 801bee2:	f001 fadd 	bl	801d4a0 <_Bfree>
 801bee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bee8:	2200      	movs	r2, #0
 801beea:	601a      	str	r2, [r3, #0]
 801beec:	1e3b      	subs	r3, r7, #0
 801beee:	bfb9      	ittee	lt
 801bef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801bef4:	9303      	strlt	r3, [sp, #12]
 801bef6:	2300      	movge	r3, #0
 801bef8:	f8c8 3000 	strge.w	r3, [r8]
 801befc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801bf00:	4ba3      	ldr	r3, [pc, #652]	; (801c190 <_dtoa_r+0x300>)
 801bf02:	bfbc      	itt	lt
 801bf04:	2201      	movlt	r2, #1
 801bf06:	f8c8 2000 	strlt.w	r2, [r8]
 801bf0a:	ea33 0309 	bics.w	r3, r3, r9
 801bf0e:	d11b      	bne.n	801bf48 <_dtoa_r+0xb8>
 801bf10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf12:	f242 730f 	movw	r3, #9999	; 0x270f
 801bf16:	6013      	str	r3, [r2, #0]
 801bf18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bf1c:	4333      	orrs	r3, r6
 801bf1e:	f000 857a 	beq.w	801ca16 <_dtoa_r+0xb86>
 801bf22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bf24:	b963      	cbnz	r3, 801bf40 <_dtoa_r+0xb0>
 801bf26:	4b9b      	ldr	r3, [pc, #620]	; (801c194 <_dtoa_r+0x304>)
 801bf28:	e024      	b.n	801bf74 <_dtoa_r+0xe4>
 801bf2a:	4b9b      	ldr	r3, [pc, #620]	; (801c198 <_dtoa_r+0x308>)
 801bf2c:	9300      	str	r3, [sp, #0]
 801bf2e:	3308      	adds	r3, #8
 801bf30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bf32:	6013      	str	r3, [r2, #0]
 801bf34:	9800      	ldr	r0, [sp, #0]
 801bf36:	b015      	add	sp, #84	; 0x54
 801bf38:	ecbd 8b02 	vpop	{d8}
 801bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf40:	4b94      	ldr	r3, [pc, #592]	; (801c194 <_dtoa_r+0x304>)
 801bf42:	9300      	str	r3, [sp, #0]
 801bf44:	3303      	adds	r3, #3
 801bf46:	e7f3      	b.n	801bf30 <_dtoa_r+0xa0>
 801bf48:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	ec51 0b17 	vmov	r0, r1, d7
 801bf52:	2300      	movs	r3, #0
 801bf54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801bf58:	f7e4 fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 801bf5c:	4680      	mov	r8, r0
 801bf5e:	b158      	cbz	r0, 801bf78 <_dtoa_r+0xe8>
 801bf60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf62:	2301      	movs	r3, #1
 801bf64:	6013      	str	r3, [r2, #0]
 801bf66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	f000 8551 	beq.w	801ca10 <_dtoa_r+0xb80>
 801bf6e:	488b      	ldr	r0, [pc, #556]	; (801c19c <_dtoa_r+0x30c>)
 801bf70:	6018      	str	r0, [r3, #0]
 801bf72:	1e43      	subs	r3, r0, #1
 801bf74:	9300      	str	r3, [sp, #0]
 801bf76:	e7dd      	b.n	801bf34 <_dtoa_r+0xa4>
 801bf78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bf7c:	aa12      	add	r2, sp, #72	; 0x48
 801bf7e:	a913      	add	r1, sp, #76	; 0x4c
 801bf80:	4620      	mov	r0, r4
 801bf82:	f001 fe35 	bl	801dbf0 <__d2b>
 801bf86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bf8a:	4683      	mov	fp, r0
 801bf8c:	2d00      	cmp	r5, #0
 801bf8e:	d07c      	beq.n	801c08a <_dtoa_r+0x1fa>
 801bf90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801bf96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bf9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801bf9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bfa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bfa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bfaa:	4b7d      	ldr	r3, [pc, #500]	; (801c1a0 <_dtoa_r+0x310>)
 801bfac:	2200      	movs	r2, #0
 801bfae:	4630      	mov	r0, r6
 801bfb0:	4639      	mov	r1, r7
 801bfb2:	f7e4 f979 	bl	80002a8 <__aeabi_dsub>
 801bfb6:	a36e      	add	r3, pc, #440	; (adr r3, 801c170 <_dtoa_r+0x2e0>)
 801bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfbc:	f7e4 fb2c 	bl	8000618 <__aeabi_dmul>
 801bfc0:	a36d      	add	r3, pc, #436	; (adr r3, 801c178 <_dtoa_r+0x2e8>)
 801bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc6:	f7e4 f971 	bl	80002ac <__adddf3>
 801bfca:	4606      	mov	r6, r0
 801bfcc:	4628      	mov	r0, r5
 801bfce:	460f      	mov	r7, r1
 801bfd0:	f7e4 fab8 	bl	8000544 <__aeabi_i2d>
 801bfd4:	a36a      	add	r3, pc, #424	; (adr r3, 801c180 <_dtoa_r+0x2f0>)
 801bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfda:	f7e4 fb1d 	bl	8000618 <__aeabi_dmul>
 801bfde:	4602      	mov	r2, r0
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	4639      	mov	r1, r7
 801bfe6:	f7e4 f961 	bl	80002ac <__adddf3>
 801bfea:	4606      	mov	r6, r0
 801bfec:	460f      	mov	r7, r1
 801bfee:	f7e4 fdc3 	bl	8000b78 <__aeabi_d2iz>
 801bff2:	2200      	movs	r2, #0
 801bff4:	4682      	mov	sl, r0
 801bff6:	2300      	movs	r3, #0
 801bff8:	4630      	mov	r0, r6
 801bffa:	4639      	mov	r1, r7
 801bffc:	f7e4 fd7e 	bl	8000afc <__aeabi_dcmplt>
 801c000:	b148      	cbz	r0, 801c016 <_dtoa_r+0x186>
 801c002:	4650      	mov	r0, sl
 801c004:	f7e4 fa9e 	bl	8000544 <__aeabi_i2d>
 801c008:	4632      	mov	r2, r6
 801c00a:	463b      	mov	r3, r7
 801c00c:	f7e4 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c010:	b908      	cbnz	r0, 801c016 <_dtoa_r+0x186>
 801c012:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c016:	f1ba 0f16 	cmp.w	sl, #22
 801c01a:	d854      	bhi.n	801c0c6 <_dtoa_r+0x236>
 801c01c:	4b61      	ldr	r3, [pc, #388]	; (801c1a4 <_dtoa_r+0x314>)
 801c01e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c02a:	f7e4 fd67 	bl	8000afc <__aeabi_dcmplt>
 801c02e:	2800      	cmp	r0, #0
 801c030:	d04b      	beq.n	801c0ca <_dtoa_r+0x23a>
 801c032:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c036:	2300      	movs	r3, #0
 801c038:	930e      	str	r3, [sp, #56]	; 0x38
 801c03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c03c:	1b5d      	subs	r5, r3, r5
 801c03e:	1e6b      	subs	r3, r5, #1
 801c040:	9304      	str	r3, [sp, #16]
 801c042:	bf43      	ittte	mi
 801c044:	2300      	movmi	r3, #0
 801c046:	f1c5 0801 	rsbmi	r8, r5, #1
 801c04a:	9304      	strmi	r3, [sp, #16]
 801c04c:	f04f 0800 	movpl.w	r8, #0
 801c050:	f1ba 0f00 	cmp.w	sl, #0
 801c054:	db3b      	blt.n	801c0ce <_dtoa_r+0x23e>
 801c056:	9b04      	ldr	r3, [sp, #16]
 801c058:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c05c:	4453      	add	r3, sl
 801c05e:	9304      	str	r3, [sp, #16]
 801c060:	2300      	movs	r3, #0
 801c062:	9306      	str	r3, [sp, #24]
 801c064:	9b05      	ldr	r3, [sp, #20]
 801c066:	2b09      	cmp	r3, #9
 801c068:	d869      	bhi.n	801c13e <_dtoa_r+0x2ae>
 801c06a:	2b05      	cmp	r3, #5
 801c06c:	bfc4      	itt	gt
 801c06e:	3b04      	subgt	r3, #4
 801c070:	9305      	strgt	r3, [sp, #20]
 801c072:	9b05      	ldr	r3, [sp, #20]
 801c074:	f1a3 0302 	sub.w	r3, r3, #2
 801c078:	bfcc      	ite	gt
 801c07a:	2500      	movgt	r5, #0
 801c07c:	2501      	movle	r5, #1
 801c07e:	2b03      	cmp	r3, #3
 801c080:	d869      	bhi.n	801c156 <_dtoa_r+0x2c6>
 801c082:	e8df f003 	tbb	[pc, r3]
 801c086:	4e2c      	.short	0x4e2c
 801c088:	5a4c      	.short	0x5a4c
 801c08a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c08e:	441d      	add	r5, r3
 801c090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c094:	2b20      	cmp	r3, #32
 801c096:	bfc1      	itttt	gt
 801c098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c09c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c0a0:	fa09 f303 	lslgt.w	r3, r9, r3
 801c0a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c0a8:	bfda      	itte	le
 801c0aa:	f1c3 0320 	rsble	r3, r3, #32
 801c0ae:	fa06 f003 	lslle.w	r0, r6, r3
 801c0b2:	4318      	orrgt	r0, r3
 801c0b4:	f7e4 fa36 	bl	8000524 <__aeabi_ui2d>
 801c0b8:	2301      	movs	r3, #1
 801c0ba:	4606      	mov	r6, r0
 801c0bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c0c0:	3d01      	subs	r5, #1
 801c0c2:	9310      	str	r3, [sp, #64]	; 0x40
 801c0c4:	e771      	b.n	801bfaa <_dtoa_r+0x11a>
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	e7b6      	b.n	801c038 <_dtoa_r+0x1a8>
 801c0ca:	900e      	str	r0, [sp, #56]	; 0x38
 801c0cc:	e7b5      	b.n	801c03a <_dtoa_r+0x1aa>
 801c0ce:	f1ca 0300 	rsb	r3, sl, #0
 801c0d2:	9306      	str	r3, [sp, #24]
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	eba8 080a 	sub.w	r8, r8, sl
 801c0da:	930d      	str	r3, [sp, #52]	; 0x34
 801c0dc:	e7c2      	b.n	801c064 <_dtoa_r+0x1d4>
 801c0de:	2300      	movs	r3, #0
 801c0e0:	9308      	str	r3, [sp, #32]
 801c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	dc39      	bgt.n	801c15c <_dtoa_r+0x2cc>
 801c0e8:	f04f 0901 	mov.w	r9, #1
 801c0ec:	f8cd 9004 	str.w	r9, [sp, #4]
 801c0f0:	464b      	mov	r3, r9
 801c0f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c0f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	6042      	str	r2, [r0, #4]
 801c0fc:	2204      	movs	r2, #4
 801c0fe:	f102 0614 	add.w	r6, r2, #20
 801c102:	429e      	cmp	r6, r3
 801c104:	6841      	ldr	r1, [r0, #4]
 801c106:	d92f      	bls.n	801c168 <_dtoa_r+0x2d8>
 801c108:	4620      	mov	r0, r4
 801c10a:	f001 f989 	bl	801d420 <_Balloc>
 801c10e:	9000      	str	r0, [sp, #0]
 801c110:	2800      	cmp	r0, #0
 801c112:	d14b      	bne.n	801c1ac <_dtoa_r+0x31c>
 801c114:	4b24      	ldr	r3, [pc, #144]	; (801c1a8 <_dtoa_r+0x318>)
 801c116:	4602      	mov	r2, r0
 801c118:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c11c:	e6d1      	b.n	801bec2 <_dtoa_r+0x32>
 801c11e:	2301      	movs	r3, #1
 801c120:	e7de      	b.n	801c0e0 <_dtoa_r+0x250>
 801c122:	2300      	movs	r3, #0
 801c124:	9308      	str	r3, [sp, #32]
 801c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c128:	eb0a 0903 	add.w	r9, sl, r3
 801c12c:	f109 0301 	add.w	r3, r9, #1
 801c130:	2b01      	cmp	r3, #1
 801c132:	9301      	str	r3, [sp, #4]
 801c134:	bfb8      	it	lt
 801c136:	2301      	movlt	r3, #1
 801c138:	e7dd      	b.n	801c0f6 <_dtoa_r+0x266>
 801c13a:	2301      	movs	r3, #1
 801c13c:	e7f2      	b.n	801c124 <_dtoa_r+0x294>
 801c13e:	2501      	movs	r5, #1
 801c140:	2300      	movs	r3, #0
 801c142:	9305      	str	r3, [sp, #20]
 801c144:	9508      	str	r5, [sp, #32]
 801c146:	f04f 39ff 	mov.w	r9, #4294967295
 801c14a:	2200      	movs	r2, #0
 801c14c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c150:	2312      	movs	r3, #18
 801c152:	9209      	str	r2, [sp, #36]	; 0x24
 801c154:	e7cf      	b.n	801c0f6 <_dtoa_r+0x266>
 801c156:	2301      	movs	r3, #1
 801c158:	9308      	str	r3, [sp, #32]
 801c15a:	e7f4      	b.n	801c146 <_dtoa_r+0x2b6>
 801c15c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c160:	f8cd 9004 	str.w	r9, [sp, #4]
 801c164:	464b      	mov	r3, r9
 801c166:	e7c6      	b.n	801c0f6 <_dtoa_r+0x266>
 801c168:	3101      	adds	r1, #1
 801c16a:	6041      	str	r1, [r0, #4]
 801c16c:	0052      	lsls	r2, r2, #1
 801c16e:	e7c6      	b.n	801c0fe <_dtoa_r+0x26e>
 801c170:	636f4361 	.word	0x636f4361
 801c174:	3fd287a7 	.word	0x3fd287a7
 801c178:	8b60c8b3 	.word	0x8b60c8b3
 801c17c:	3fc68a28 	.word	0x3fc68a28
 801c180:	509f79fb 	.word	0x509f79fb
 801c184:	3fd34413 	.word	0x3fd34413
 801c188:	08020c19 	.word	0x08020c19
 801c18c:	08020c30 	.word	0x08020c30
 801c190:	7ff00000 	.word	0x7ff00000
 801c194:	08020c15 	.word	0x08020c15
 801c198:	08020c0c 	.word	0x08020c0c
 801c19c:	08020e92 	.word	0x08020e92
 801c1a0:	3ff80000 	.word	0x3ff80000
 801c1a4:	08020da8 	.word	0x08020da8
 801c1a8:	08020c8f 	.word	0x08020c8f
 801c1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c1ae:	9a00      	ldr	r2, [sp, #0]
 801c1b0:	601a      	str	r2, [r3, #0]
 801c1b2:	9b01      	ldr	r3, [sp, #4]
 801c1b4:	2b0e      	cmp	r3, #14
 801c1b6:	f200 80ad 	bhi.w	801c314 <_dtoa_r+0x484>
 801c1ba:	2d00      	cmp	r5, #0
 801c1bc:	f000 80aa 	beq.w	801c314 <_dtoa_r+0x484>
 801c1c0:	f1ba 0f00 	cmp.w	sl, #0
 801c1c4:	dd36      	ble.n	801c234 <_dtoa_r+0x3a4>
 801c1c6:	4ac3      	ldr	r2, [pc, #780]	; (801c4d4 <_dtoa_r+0x644>)
 801c1c8:	f00a 030f 	and.w	r3, sl, #15
 801c1cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c1d0:	ed93 7b00 	vldr	d7, [r3]
 801c1d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c1d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c1dc:	eeb0 8a47 	vmov.f32	s16, s14
 801c1e0:	eef0 8a67 	vmov.f32	s17, s15
 801c1e4:	d016      	beq.n	801c214 <_dtoa_r+0x384>
 801c1e6:	4bbc      	ldr	r3, [pc, #752]	; (801c4d8 <_dtoa_r+0x648>)
 801c1e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c1ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c1f0:	f7e4 fb3c 	bl	800086c <__aeabi_ddiv>
 801c1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1f8:	f007 070f 	and.w	r7, r7, #15
 801c1fc:	2503      	movs	r5, #3
 801c1fe:	4eb6      	ldr	r6, [pc, #728]	; (801c4d8 <_dtoa_r+0x648>)
 801c200:	b957      	cbnz	r7, 801c218 <_dtoa_r+0x388>
 801c202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c206:	ec53 2b18 	vmov	r2, r3, d8
 801c20a:	f7e4 fb2f 	bl	800086c <__aeabi_ddiv>
 801c20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c212:	e029      	b.n	801c268 <_dtoa_r+0x3d8>
 801c214:	2502      	movs	r5, #2
 801c216:	e7f2      	b.n	801c1fe <_dtoa_r+0x36e>
 801c218:	07f9      	lsls	r1, r7, #31
 801c21a:	d508      	bpl.n	801c22e <_dtoa_r+0x39e>
 801c21c:	ec51 0b18 	vmov	r0, r1, d8
 801c220:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c224:	f7e4 f9f8 	bl	8000618 <__aeabi_dmul>
 801c228:	ec41 0b18 	vmov	d8, r0, r1
 801c22c:	3501      	adds	r5, #1
 801c22e:	107f      	asrs	r7, r7, #1
 801c230:	3608      	adds	r6, #8
 801c232:	e7e5      	b.n	801c200 <_dtoa_r+0x370>
 801c234:	f000 80a6 	beq.w	801c384 <_dtoa_r+0x4f4>
 801c238:	f1ca 0600 	rsb	r6, sl, #0
 801c23c:	4ba5      	ldr	r3, [pc, #660]	; (801c4d4 <_dtoa_r+0x644>)
 801c23e:	4fa6      	ldr	r7, [pc, #664]	; (801c4d8 <_dtoa_r+0x648>)
 801c240:	f006 020f 	and.w	r2, r6, #15
 801c244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c24c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c250:	f7e4 f9e2 	bl	8000618 <__aeabi_dmul>
 801c254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c258:	1136      	asrs	r6, r6, #4
 801c25a:	2300      	movs	r3, #0
 801c25c:	2502      	movs	r5, #2
 801c25e:	2e00      	cmp	r6, #0
 801c260:	f040 8085 	bne.w	801c36e <_dtoa_r+0x4de>
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1d2      	bne.n	801c20e <_dtoa_r+0x37e>
 801c268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	f000 808c 	beq.w	801c388 <_dtoa_r+0x4f8>
 801c270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c274:	4b99      	ldr	r3, [pc, #612]	; (801c4dc <_dtoa_r+0x64c>)
 801c276:	2200      	movs	r2, #0
 801c278:	4630      	mov	r0, r6
 801c27a:	4639      	mov	r1, r7
 801c27c:	f7e4 fc3e 	bl	8000afc <__aeabi_dcmplt>
 801c280:	2800      	cmp	r0, #0
 801c282:	f000 8081 	beq.w	801c388 <_dtoa_r+0x4f8>
 801c286:	9b01      	ldr	r3, [sp, #4]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d07d      	beq.n	801c388 <_dtoa_r+0x4f8>
 801c28c:	f1b9 0f00 	cmp.w	r9, #0
 801c290:	dd3c      	ble.n	801c30c <_dtoa_r+0x47c>
 801c292:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c296:	9307      	str	r3, [sp, #28]
 801c298:	2200      	movs	r2, #0
 801c29a:	4b91      	ldr	r3, [pc, #580]	; (801c4e0 <_dtoa_r+0x650>)
 801c29c:	4630      	mov	r0, r6
 801c29e:	4639      	mov	r1, r7
 801c2a0:	f7e4 f9ba 	bl	8000618 <__aeabi_dmul>
 801c2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c2a8:	3501      	adds	r5, #1
 801c2aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c2ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7e4 f946 	bl	8000544 <__aeabi_i2d>
 801c2b8:	4632      	mov	r2, r6
 801c2ba:	463b      	mov	r3, r7
 801c2bc:	f7e4 f9ac 	bl	8000618 <__aeabi_dmul>
 801c2c0:	4b88      	ldr	r3, [pc, #544]	; (801c4e4 <_dtoa_r+0x654>)
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	f7e3 fff2 	bl	80002ac <__adddf3>
 801c2c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c2d0:	9303      	str	r3, [sp, #12]
 801c2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d15c      	bne.n	801c392 <_dtoa_r+0x502>
 801c2d8:	4b83      	ldr	r3, [pc, #524]	; (801c4e8 <_dtoa_r+0x658>)
 801c2da:	2200      	movs	r2, #0
 801c2dc:	4630      	mov	r0, r6
 801c2de:	4639      	mov	r1, r7
 801c2e0:	f7e3 ffe2 	bl	80002a8 <__aeabi_dsub>
 801c2e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c2e8:	4606      	mov	r6, r0
 801c2ea:	460f      	mov	r7, r1
 801c2ec:	f7e4 fc24 	bl	8000b38 <__aeabi_dcmpgt>
 801c2f0:	2800      	cmp	r0, #0
 801c2f2:	f040 8296 	bne.w	801c822 <_dtoa_r+0x992>
 801c2f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c2fa:	4630      	mov	r0, r6
 801c2fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c300:	4639      	mov	r1, r7
 801c302:	f7e4 fbfb 	bl	8000afc <__aeabi_dcmplt>
 801c306:	2800      	cmp	r0, #0
 801c308:	f040 8288 	bne.w	801c81c <_dtoa_r+0x98c>
 801c30c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c310:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c316:	2b00      	cmp	r3, #0
 801c318:	f2c0 8158 	blt.w	801c5cc <_dtoa_r+0x73c>
 801c31c:	f1ba 0f0e 	cmp.w	sl, #14
 801c320:	f300 8154 	bgt.w	801c5cc <_dtoa_r+0x73c>
 801c324:	4b6b      	ldr	r3, [pc, #428]	; (801c4d4 <_dtoa_r+0x644>)
 801c326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c32a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c330:	2b00      	cmp	r3, #0
 801c332:	f280 80e3 	bge.w	801c4fc <_dtoa_r+0x66c>
 801c336:	9b01      	ldr	r3, [sp, #4]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	f300 80df 	bgt.w	801c4fc <_dtoa_r+0x66c>
 801c33e:	f040 826d 	bne.w	801c81c <_dtoa_r+0x98c>
 801c342:	4b69      	ldr	r3, [pc, #420]	; (801c4e8 <_dtoa_r+0x658>)
 801c344:	2200      	movs	r2, #0
 801c346:	4640      	mov	r0, r8
 801c348:	4649      	mov	r1, r9
 801c34a:	f7e4 f965 	bl	8000618 <__aeabi_dmul>
 801c34e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c352:	f7e4 fbe7 	bl	8000b24 <__aeabi_dcmpge>
 801c356:	9e01      	ldr	r6, [sp, #4]
 801c358:	4637      	mov	r7, r6
 801c35a:	2800      	cmp	r0, #0
 801c35c:	f040 8243 	bne.w	801c7e6 <_dtoa_r+0x956>
 801c360:	9d00      	ldr	r5, [sp, #0]
 801c362:	2331      	movs	r3, #49	; 0x31
 801c364:	f805 3b01 	strb.w	r3, [r5], #1
 801c368:	f10a 0a01 	add.w	sl, sl, #1
 801c36c:	e23f      	b.n	801c7ee <_dtoa_r+0x95e>
 801c36e:	07f2      	lsls	r2, r6, #31
 801c370:	d505      	bpl.n	801c37e <_dtoa_r+0x4ee>
 801c372:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c376:	f7e4 f94f 	bl	8000618 <__aeabi_dmul>
 801c37a:	3501      	adds	r5, #1
 801c37c:	2301      	movs	r3, #1
 801c37e:	1076      	asrs	r6, r6, #1
 801c380:	3708      	adds	r7, #8
 801c382:	e76c      	b.n	801c25e <_dtoa_r+0x3ce>
 801c384:	2502      	movs	r5, #2
 801c386:	e76f      	b.n	801c268 <_dtoa_r+0x3d8>
 801c388:	9b01      	ldr	r3, [sp, #4]
 801c38a:	f8cd a01c 	str.w	sl, [sp, #28]
 801c38e:	930c      	str	r3, [sp, #48]	; 0x30
 801c390:	e78d      	b.n	801c2ae <_dtoa_r+0x41e>
 801c392:	9900      	ldr	r1, [sp, #0]
 801c394:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c398:	4b4e      	ldr	r3, [pc, #312]	; (801c4d4 <_dtoa_r+0x644>)
 801c39a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c39e:	4401      	add	r1, r0
 801c3a0:	9102      	str	r1, [sp, #8]
 801c3a2:	9908      	ldr	r1, [sp, #32]
 801c3a4:	eeb0 8a47 	vmov.f32	s16, s14
 801c3a8:	eef0 8a67 	vmov.f32	s17, s15
 801c3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c3b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c3b4:	2900      	cmp	r1, #0
 801c3b6:	d045      	beq.n	801c444 <_dtoa_r+0x5b4>
 801c3b8:	494c      	ldr	r1, [pc, #304]	; (801c4ec <_dtoa_r+0x65c>)
 801c3ba:	2000      	movs	r0, #0
 801c3bc:	f7e4 fa56 	bl	800086c <__aeabi_ddiv>
 801c3c0:	ec53 2b18 	vmov	r2, r3, d8
 801c3c4:	f7e3 ff70 	bl	80002a8 <__aeabi_dsub>
 801c3c8:	9d00      	ldr	r5, [sp, #0]
 801c3ca:	ec41 0b18 	vmov	d8, r0, r1
 801c3ce:	4639      	mov	r1, r7
 801c3d0:	4630      	mov	r0, r6
 801c3d2:	f7e4 fbd1 	bl	8000b78 <__aeabi_d2iz>
 801c3d6:	900c      	str	r0, [sp, #48]	; 0x30
 801c3d8:	f7e4 f8b4 	bl	8000544 <__aeabi_i2d>
 801c3dc:	4602      	mov	r2, r0
 801c3de:	460b      	mov	r3, r1
 801c3e0:	4630      	mov	r0, r6
 801c3e2:	4639      	mov	r1, r7
 801c3e4:	f7e3 ff60 	bl	80002a8 <__aeabi_dsub>
 801c3e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c3ea:	3330      	adds	r3, #48	; 0x30
 801c3ec:	f805 3b01 	strb.w	r3, [r5], #1
 801c3f0:	ec53 2b18 	vmov	r2, r3, d8
 801c3f4:	4606      	mov	r6, r0
 801c3f6:	460f      	mov	r7, r1
 801c3f8:	f7e4 fb80 	bl	8000afc <__aeabi_dcmplt>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	d165      	bne.n	801c4cc <_dtoa_r+0x63c>
 801c400:	4632      	mov	r2, r6
 801c402:	463b      	mov	r3, r7
 801c404:	4935      	ldr	r1, [pc, #212]	; (801c4dc <_dtoa_r+0x64c>)
 801c406:	2000      	movs	r0, #0
 801c408:	f7e3 ff4e 	bl	80002a8 <__aeabi_dsub>
 801c40c:	ec53 2b18 	vmov	r2, r3, d8
 801c410:	f7e4 fb74 	bl	8000afc <__aeabi_dcmplt>
 801c414:	2800      	cmp	r0, #0
 801c416:	f040 80b9 	bne.w	801c58c <_dtoa_r+0x6fc>
 801c41a:	9b02      	ldr	r3, [sp, #8]
 801c41c:	429d      	cmp	r5, r3
 801c41e:	f43f af75 	beq.w	801c30c <_dtoa_r+0x47c>
 801c422:	4b2f      	ldr	r3, [pc, #188]	; (801c4e0 <_dtoa_r+0x650>)
 801c424:	ec51 0b18 	vmov	r0, r1, d8
 801c428:	2200      	movs	r2, #0
 801c42a:	f7e4 f8f5 	bl	8000618 <__aeabi_dmul>
 801c42e:	4b2c      	ldr	r3, [pc, #176]	; (801c4e0 <_dtoa_r+0x650>)
 801c430:	ec41 0b18 	vmov	d8, r0, r1
 801c434:	2200      	movs	r2, #0
 801c436:	4630      	mov	r0, r6
 801c438:	4639      	mov	r1, r7
 801c43a:	f7e4 f8ed 	bl	8000618 <__aeabi_dmul>
 801c43e:	4606      	mov	r6, r0
 801c440:	460f      	mov	r7, r1
 801c442:	e7c4      	b.n	801c3ce <_dtoa_r+0x53e>
 801c444:	ec51 0b17 	vmov	r0, r1, d7
 801c448:	f7e4 f8e6 	bl	8000618 <__aeabi_dmul>
 801c44c:	9b02      	ldr	r3, [sp, #8]
 801c44e:	9d00      	ldr	r5, [sp, #0]
 801c450:	930c      	str	r3, [sp, #48]	; 0x30
 801c452:	ec41 0b18 	vmov	d8, r0, r1
 801c456:	4639      	mov	r1, r7
 801c458:	4630      	mov	r0, r6
 801c45a:	f7e4 fb8d 	bl	8000b78 <__aeabi_d2iz>
 801c45e:	9011      	str	r0, [sp, #68]	; 0x44
 801c460:	f7e4 f870 	bl	8000544 <__aeabi_i2d>
 801c464:	4602      	mov	r2, r0
 801c466:	460b      	mov	r3, r1
 801c468:	4630      	mov	r0, r6
 801c46a:	4639      	mov	r1, r7
 801c46c:	f7e3 ff1c 	bl	80002a8 <__aeabi_dsub>
 801c470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c472:	3330      	adds	r3, #48	; 0x30
 801c474:	f805 3b01 	strb.w	r3, [r5], #1
 801c478:	9b02      	ldr	r3, [sp, #8]
 801c47a:	429d      	cmp	r5, r3
 801c47c:	4606      	mov	r6, r0
 801c47e:	460f      	mov	r7, r1
 801c480:	f04f 0200 	mov.w	r2, #0
 801c484:	d134      	bne.n	801c4f0 <_dtoa_r+0x660>
 801c486:	4b19      	ldr	r3, [pc, #100]	; (801c4ec <_dtoa_r+0x65c>)
 801c488:	ec51 0b18 	vmov	r0, r1, d8
 801c48c:	f7e3 ff0e 	bl	80002ac <__adddf3>
 801c490:	4602      	mov	r2, r0
 801c492:	460b      	mov	r3, r1
 801c494:	4630      	mov	r0, r6
 801c496:	4639      	mov	r1, r7
 801c498:	f7e4 fb4e 	bl	8000b38 <__aeabi_dcmpgt>
 801c49c:	2800      	cmp	r0, #0
 801c49e:	d175      	bne.n	801c58c <_dtoa_r+0x6fc>
 801c4a0:	ec53 2b18 	vmov	r2, r3, d8
 801c4a4:	4911      	ldr	r1, [pc, #68]	; (801c4ec <_dtoa_r+0x65c>)
 801c4a6:	2000      	movs	r0, #0
 801c4a8:	f7e3 fefe 	bl	80002a8 <__aeabi_dsub>
 801c4ac:	4602      	mov	r2, r0
 801c4ae:	460b      	mov	r3, r1
 801c4b0:	4630      	mov	r0, r6
 801c4b2:	4639      	mov	r1, r7
 801c4b4:	f7e4 fb22 	bl	8000afc <__aeabi_dcmplt>
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	f43f af27 	beq.w	801c30c <_dtoa_r+0x47c>
 801c4be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c4c0:	1e6b      	subs	r3, r5, #1
 801c4c2:	930c      	str	r3, [sp, #48]	; 0x30
 801c4c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c4c8:	2b30      	cmp	r3, #48	; 0x30
 801c4ca:	d0f8      	beq.n	801c4be <_dtoa_r+0x62e>
 801c4cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c4d0:	e04a      	b.n	801c568 <_dtoa_r+0x6d8>
 801c4d2:	bf00      	nop
 801c4d4:	08020da8 	.word	0x08020da8
 801c4d8:	08020d80 	.word	0x08020d80
 801c4dc:	3ff00000 	.word	0x3ff00000
 801c4e0:	40240000 	.word	0x40240000
 801c4e4:	401c0000 	.word	0x401c0000
 801c4e8:	40140000 	.word	0x40140000
 801c4ec:	3fe00000 	.word	0x3fe00000
 801c4f0:	4baf      	ldr	r3, [pc, #700]	; (801c7b0 <_dtoa_r+0x920>)
 801c4f2:	f7e4 f891 	bl	8000618 <__aeabi_dmul>
 801c4f6:	4606      	mov	r6, r0
 801c4f8:	460f      	mov	r7, r1
 801c4fa:	e7ac      	b.n	801c456 <_dtoa_r+0x5c6>
 801c4fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c500:	9d00      	ldr	r5, [sp, #0]
 801c502:	4642      	mov	r2, r8
 801c504:	464b      	mov	r3, r9
 801c506:	4630      	mov	r0, r6
 801c508:	4639      	mov	r1, r7
 801c50a:	f7e4 f9af 	bl	800086c <__aeabi_ddiv>
 801c50e:	f7e4 fb33 	bl	8000b78 <__aeabi_d2iz>
 801c512:	9002      	str	r0, [sp, #8]
 801c514:	f7e4 f816 	bl	8000544 <__aeabi_i2d>
 801c518:	4642      	mov	r2, r8
 801c51a:	464b      	mov	r3, r9
 801c51c:	f7e4 f87c 	bl	8000618 <__aeabi_dmul>
 801c520:	4602      	mov	r2, r0
 801c522:	460b      	mov	r3, r1
 801c524:	4630      	mov	r0, r6
 801c526:	4639      	mov	r1, r7
 801c528:	f7e3 febe 	bl	80002a8 <__aeabi_dsub>
 801c52c:	9e02      	ldr	r6, [sp, #8]
 801c52e:	9f01      	ldr	r7, [sp, #4]
 801c530:	3630      	adds	r6, #48	; 0x30
 801c532:	f805 6b01 	strb.w	r6, [r5], #1
 801c536:	9e00      	ldr	r6, [sp, #0]
 801c538:	1bae      	subs	r6, r5, r6
 801c53a:	42b7      	cmp	r7, r6
 801c53c:	4602      	mov	r2, r0
 801c53e:	460b      	mov	r3, r1
 801c540:	d137      	bne.n	801c5b2 <_dtoa_r+0x722>
 801c542:	f7e3 feb3 	bl	80002ac <__adddf3>
 801c546:	4642      	mov	r2, r8
 801c548:	464b      	mov	r3, r9
 801c54a:	4606      	mov	r6, r0
 801c54c:	460f      	mov	r7, r1
 801c54e:	f7e4 faf3 	bl	8000b38 <__aeabi_dcmpgt>
 801c552:	b9c8      	cbnz	r0, 801c588 <_dtoa_r+0x6f8>
 801c554:	4642      	mov	r2, r8
 801c556:	464b      	mov	r3, r9
 801c558:	4630      	mov	r0, r6
 801c55a:	4639      	mov	r1, r7
 801c55c:	f7e4 fac4 	bl	8000ae8 <__aeabi_dcmpeq>
 801c560:	b110      	cbz	r0, 801c568 <_dtoa_r+0x6d8>
 801c562:	9b02      	ldr	r3, [sp, #8]
 801c564:	07d9      	lsls	r1, r3, #31
 801c566:	d40f      	bmi.n	801c588 <_dtoa_r+0x6f8>
 801c568:	4620      	mov	r0, r4
 801c56a:	4659      	mov	r1, fp
 801c56c:	f000 ff98 	bl	801d4a0 <_Bfree>
 801c570:	2300      	movs	r3, #0
 801c572:	702b      	strb	r3, [r5, #0]
 801c574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c576:	f10a 0001 	add.w	r0, sl, #1
 801c57a:	6018      	str	r0, [r3, #0]
 801c57c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c57e:	2b00      	cmp	r3, #0
 801c580:	f43f acd8 	beq.w	801bf34 <_dtoa_r+0xa4>
 801c584:	601d      	str	r5, [r3, #0]
 801c586:	e4d5      	b.n	801bf34 <_dtoa_r+0xa4>
 801c588:	f8cd a01c 	str.w	sl, [sp, #28]
 801c58c:	462b      	mov	r3, r5
 801c58e:	461d      	mov	r5, r3
 801c590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c594:	2a39      	cmp	r2, #57	; 0x39
 801c596:	d108      	bne.n	801c5aa <_dtoa_r+0x71a>
 801c598:	9a00      	ldr	r2, [sp, #0]
 801c59a:	429a      	cmp	r2, r3
 801c59c:	d1f7      	bne.n	801c58e <_dtoa_r+0x6fe>
 801c59e:	9a07      	ldr	r2, [sp, #28]
 801c5a0:	9900      	ldr	r1, [sp, #0]
 801c5a2:	3201      	adds	r2, #1
 801c5a4:	9207      	str	r2, [sp, #28]
 801c5a6:	2230      	movs	r2, #48	; 0x30
 801c5a8:	700a      	strb	r2, [r1, #0]
 801c5aa:	781a      	ldrb	r2, [r3, #0]
 801c5ac:	3201      	adds	r2, #1
 801c5ae:	701a      	strb	r2, [r3, #0]
 801c5b0:	e78c      	b.n	801c4cc <_dtoa_r+0x63c>
 801c5b2:	4b7f      	ldr	r3, [pc, #508]	; (801c7b0 <_dtoa_r+0x920>)
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	f7e4 f82f 	bl	8000618 <__aeabi_dmul>
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	2300      	movs	r3, #0
 801c5be:	4606      	mov	r6, r0
 801c5c0:	460f      	mov	r7, r1
 801c5c2:	f7e4 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 801c5c6:	2800      	cmp	r0, #0
 801c5c8:	d09b      	beq.n	801c502 <_dtoa_r+0x672>
 801c5ca:	e7cd      	b.n	801c568 <_dtoa_r+0x6d8>
 801c5cc:	9a08      	ldr	r2, [sp, #32]
 801c5ce:	2a00      	cmp	r2, #0
 801c5d0:	f000 80c4 	beq.w	801c75c <_dtoa_r+0x8cc>
 801c5d4:	9a05      	ldr	r2, [sp, #20]
 801c5d6:	2a01      	cmp	r2, #1
 801c5d8:	f300 80a8 	bgt.w	801c72c <_dtoa_r+0x89c>
 801c5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5de:	2a00      	cmp	r2, #0
 801c5e0:	f000 80a0 	beq.w	801c724 <_dtoa_r+0x894>
 801c5e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c5e8:	9e06      	ldr	r6, [sp, #24]
 801c5ea:	4645      	mov	r5, r8
 801c5ec:	9a04      	ldr	r2, [sp, #16]
 801c5ee:	2101      	movs	r1, #1
 801c5f0:	441a      	add	r2, r3
 801c5f2:	4620      	mov	r0, r4
 801c5f4:	4498      	add	r8, r3
 801c5f6:	9204      	str	r2, [sp, #16]
 801c5f8:	f001 f858 	bl	801d6ac <__i2b>
 801c5fc:	4607      	mov	r7, r0
 801c5fe:	2d00      	cmp	r5, #0
 801c600:	dd0b      	ble.n	801c61a <_dtoa_r+0x78a>
 801c602:	9b04      	ldr	r3, [sp, #16]
 801c604:	2b00      	cmp	r3, #0
 801c606:	dd08      	ble.n	801c61a <_dtoa_r+0x78a>
 801c608:	42ab      	cmp	r3, r5
 801c60a:	9a04      	ldr	r2, [sp, #16]
 801c60c:	bfa8      	it	ge
 801c60e:	462b      	movge	r3, r5
 801c610:	eba8 0803 	sub.w	r8, r8, r3
 801c614:	1aed      	subs	r5, r5, r3
 801c616:	1ad3      	subs	r3, r2, r3
 801c618:	9304      	str	r3, [sp, #16]
 801c61a:	9b06      	ldr	r3, [sp, #24]
 801c61c:	b1fb      	cbz	r3, 801c65e <_dtoa_r+0x7ce>
 801c61e:	9b08      	ldr	r3, [sp, #32]
 801c620:	2b00      	cmp	r3, #0
 801c622:	f000 809f 	beq.w	801c764 <_dtoa_r+0x8d4>
 801c626:	2e00      	cmp	r6, #0
 801c628:	dd11      	ble.n	801c64e <_dtoa_r+0x7be>
 801c62a:	4639      	mov	r1, r7
 801c62c:	4632      	mov	r2, r6
 801c62e:	4620      	mov	r0, r4
 801c630:	f001 f8f8 	bl	801d824 <__pow5mult>
 801c634:	465a      	mov	r2, fp
 801c636:	4601      	mov	r1, r0
 801c638:	4607      	mov	r7, r0
 801c63a:	4620      	mov	r0, r4
 801c63c:	f001 f84c 	bl	801d6d8 <__multiply>
 801c640:	4659      	mov	r1, fp
 801c642:	9007      	str	r0, [sp, #28]
 801c644:	4620      	mov	r0, r4
 801c646:	f000 ff2b 	bl	801d4a0 <_Bfree>
 801c64a:	9b07      	ldr	r3, [sp, #28]
 801c64c:	469b      	mov	fp, r3
 801c64e:	9b06      	ldr	r3, [sp, #24]
 801c650:	1b9a      	subs	r2, r3, r6
 801c652:	d004      	beq.n	801c65e <_dtoa_r+0x7ce>
 801c654:	4659      	mov	r1, fp
 801c656:	4620      	mov	r0, r4
 801c658:	f001 f8e4 	bl	801d824 <__pow5mult>
 801c65c:	4683      	mov	fp, r0
 801c65e:	2101      	movs	r1, #1
 801c660:	4620      	mov	r0, r4
 801c662:	f001 f823 	bl	801d6ac <__i2b>
 801c666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c668:	2b00      	cmp	r3, #0
 801c66a:	4606      	mov	r6, r0
 801c66c:	dd7c      	ble.n	801c768 <_dtoa_r+0x8d8>
 801c66e:	461a      	mov	r2, r3
 801c670:	4601      	mov	r1, r0
 801c672:	4620      	mov	r0, r4
 801c674:	f001 f8d6 	bl	801d824 <__pow5mult>
 801c678:	9b05      	ldr	r3, [sp, #20]
 801c67a:	2b01      	cmp	r3, #1
 801c67c:	4606      	mov	r6, r0
 801c67e:	dd76      	ble.n	801c76e <_dtoa_r+0x8de>
 801c680:	2300      	movs	r3, #0
 801c682:	9306      	str	r3, [sp, #24]
 801c684:	6933      	ldr	r3, [r6, #16]
 801c686:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c68a:	6918      	ldr	r0, [r3, #16]
 801c68c:	f000 ffbe 	bl	801d60c <__hi0bits>
 801c690:	f1c0 0020 	rsb	r0, r0, #32
 801c694:	9b04      	ldr	r3, [sp, #16]
 801c696:	4418      	add	r0, r3
 801c698:	f010 001f 	ands.w	r0, r0, #31
 801c69c:	f000 8086 	beq.w	801c7ac <_dtoa_r+0x91c>
 801c6a0:	f1c0 0320 	rsb	r3, r0, #32
 801c6a4:	2b04      	cmp	r3, #4
 801c6a6:	dd7f      	ble.n	801c7a8 <_dtoa_r+0x918>
 801c6a8:	f1c0 001c 	rsb	r0, r0, #28
 801c6ac:	9b04      	ldr	r3, [sp, #16]
 801c6ae:	4403      	add	r3, r0
 801c6b0:	4480      	add	r8, r0
 801c6b2:	4405      	add	r5, r0
 801c6b4:	9304      	str	r3, [sp, #16]
 801c6b6:	f1b8 0f00 	cmp.w	r8, #0
 801c6ba:	dd05      	ble.n	801c6c8 <_dtoa_r+0x838>
 801c6bc:	4659      	mov	r1, fp
 801c6be:	4642      	mov	r2, r8
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	f001 f909 	bl	801d8d8 <__lshift>
 801c6c6:	4683      	mov	fp, r0
 801c6c8:	9b04      	ldr	r3, [sp, #16]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	dd05      	ble.n	801c6da <_dtoa_r+0x84a>
 801c6ce:	4631      	mov	r1, r6
 801c6d0:	461a      	mov	r2, r3
 801c6d2:	4620      	mov	r0, r4
 801c6d4:	f001 f900 	bl	801d8d8 <__lshift>
 801c6d8:	4606      	mov	r6, r0
 801c6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d069      	beq.n	801c7b4 <_dtoa_r+0x924>
 801c6e0:	4631      	mov	r1, r6
 801c6e2:	4658      	mov	r0, fp
 801c6e4:	f001 f964 	bl	801d9b0 <__mcmp>
 801c6e8:	2800      	cmp	r0, #0
 801c6ea:	da63      	bge.n	801c7b4 <_dtoa_r+0x924>
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	4659      	mov	r1, fp
 801c6f0:	220a      	movs	r2, #10
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	f000 fef6 	bl	801d4e4 <__multadd>
 801c6f8:	9b08      	ldr	r3, [sp, #32]
 801c6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c6fe:	4683      	mov	fp, r0
 801c700:	2b00      	cmp	r3, #0
 801c702:	f000 818f 	beq.w	801ca24 <_dtoa_r+0xb94>
 801c706:	4639      	mov	r1, r7
 801c708:	2300      	movs	r3, #0
 801c70a:	220a      	movs	r2, #10
 801c70c:	4620      	mov	r0, r4
 801c70e:	f000 fee9 	bl	801d4e4 <__multadd>
 801c712:	f1b9 0f00 	cmp.w	r9, #0
 801c716:	4607      	mov	r7, r0
 801c718:	f300 808e 	bgt.w	801c838 <_dtoa_r+0x9a8>
 801c71c:	9b05      	ldr	r3, [sp, #20]
 801c71e:	2b02      	cmp	r3, #2
 801c720:	dc50      	bgt.n	801c7c4 <_dtoa_r+0x934>
 801c722:	e089      	b.n	801c838 <_dtoa_r+0x9a8>
 801c724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c72a:	e75d      	b.n	801c5e8 <_dtoa_r+0x758>
 801c72c:	9b01      	ldr	r3, [sp, #4]
 801c72e:	1e5e      	subs	r6, r3, #1
 801c730:	9b06      	ldr	r3, [sp, #24]
 801c732:	42b3      	cmp	r3, r6
 801c734:	bfbf      	itttt	lt
 801c736:	9b06      	ldrlt	r3, [sp, #24]
 801c738:	9606      	strlt	r6, [sp, #24]
 801c73a:	1af2      	sublt	r2, r6, r3
 801c73c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801c73e:	bfb6      	itet	lt
 801c740:	189b      	addlt	r3, r3, r2
 801c742:	1b9e      	subge	r6, r3, r6
 801c744:	930d      	strlt	r3, [sp, #52]	; 0x34
 801c746:	9b01      	ldr	r3, [sp, #4]
 801c748:	bfb8      	it	lt
 801c74a:	2600      	movlt	r6, #0
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	bfb5      	itete	lt
 801c750:	eba8 0503 	sublt.w	r5, r8, r3
 801c754:	9b01      	ldrge	r3, [sp, #4]
 801c756:	2300      	movlt	r3, #0
 801c758:	4645      	movge	r5, r8
 801c75a:	e747      	b.n	801c5ec <_dtoa_r+0x75c>
 801c75c:	9e06      	ldr	r6, [sp, #24]
 801c75e:	9f08      	ldr	r7, [sp, #32]
 801c760:	4645      	mov	r5, r8
 801c762:	e74c      	b.n	801c5fe <_dtoa_r+0x76e>
 801c764:	9a06      	ldr	r2, [sp, #24]
 801c766:	e775      	b.n	801c654 <_dtoa_r+0x7c4>
 801c768:	9b05      	ldr	r3, [sp, #20]
 801c76a:	2b01      	cmp	r3, #1
 801c76c:	dc18      	bgt.n	801c7a0 <_dtoa_r+0x910>
 801c76e:	9b02      	ldr	r3, [sp, #8]
 801c770:	b9b3      	cbnz	r3, 801c7a0 <_dtoa_r+0x910>
 801c772:	9b03      	ldr	r3, [sp, #12]
 801c774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c778:	b9a3      	cbnz	r3, 801c7a4 <_dtoa_r+0x914>
 801c77a:	9b03      	ldr	r3, [sp, #12]
 801c77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c780:	0d1b      	lsrs	r3, r3, #20
 801c782:	051b      	lsls	r3, r3, #20
 801c784:	b12b      	cbz	r3, 801c792 <_dtoa_r+0x902>
 801c786:	9b04      	ldr	r3, [sp, #16]
 801c788:	3301      	adds	r3, #1
 801c78a:	9304      	str	r3, [sp, #16]
 801c78c:	f108 0801 	add.w	r8, r8, #1
 801c790:	2301      	movs	r3, #1
 801c792:	9306      	str	r3, [sp, #24]
 801c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c796:	2b00      	cmp	r3, #0
 801c798:	f47f af74 	bne.w	801c684 <_dtoa_r+0x7f4>
 801c79c:	2001      	movs	r0, #1
 801c79e:	e779      	b.n	801c694 <_dtoa_r+0x804>
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	e7f6      	b.n	801c792 <_dtoa_r+0x902>
 801c7a4:	9b02      	ldr	r3, [sp, #8]
 801c7a6:	e7f4      	b.n	801c792 <_dtoa_r+0x902>
 801c7a8:	d085      	beq.n	801c6b6 <_dtoa_r+0x826>
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	301c      	adds	r0, #28
 801c7ae:	e77d      	b.n	801c6ac <_dtoa_r+0x81c>
 801c7b0:	40240000 	.word	0x40240000
 801c7b4:	9b01      	ldr	r3, [sp, #4]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	dc38      	bgt.n	801c82c <_dtoa_r+0x99c>
 801c7ba:	9b05      	ldr	r3, [sp, #20]
 801c7bc:	2b02      	cmp	r3, #2
 801c7be:	dd35      	ble.n	801c82c <_dtoa_r+0x99c>
 801c7c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c7c4:	f1b9 0f00 	cmp.w	r9, #0
 801c7c8:	d10d      	bne.n	801c7e6 <_dtoa_r+0x956>
 801c7ca:	4631      	mov	r1, r6
 801c7cc:	464b      	mov	r3, r9
 801c7ce:	2205      	movs	r2, #5
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	f000 fe87 	bl	801d4e4 <__multadd>
 801c7d6:	4601      	mov	r1, r0
 801c7d8:	4606      	mov	r6, r0
 801c7da:	4658      	mov	r0, fp
 801c7dc:	f001 f8e8 	bl	801d9b0 <__mcmp>
 801c7e0:	2800      	cmp	r0, #0
 801c7e2:	f73f adbd 	bgt.w	801c360 <_dtoa_r+0x4d0>
 801c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7e8:	9d00      	ldr	r5, [sp, #0]
 801c7ea:	ea6f 0a03 	mvn.w	sl, r3
 801c7ee:	f04f 0800 	mov.w	r8, #0
 801c7f2:	4631      	mov	r1, r6
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	f000 fe53 	bl	801d4a0 <_Bfree>
 801c7fa:	2f00      	cmp	r7, #0
 801c7fc:	f43f aeb4 	beq.w	801c568 <_dtoa_r+0x6d8>
 801c800:	f1b8 0f00 	cmp.w	r8, #0
 801c804:	d005      	beq.n	801c812 <_dtoa_r+0x982>
 801c806:	45b8      	cmp	r8, r7
 801c808:	d003      	beq.n	801c812 <_dtoa_r+0x982>
 801c80a:	4641      	mov	r1, r8
 801c80c:	4620      	mov	r0, r4
 801c80e:	f000 fe47 	bl	801d4a0 <_Bfree>
 801c812:	4639      	mov	r1, r7
 801c814:	4620      	mov	r0, r4
 801c816:	f000 fe43 	bl	801d4a0 <_Bfree>
 801c81a:	e6a5      	b.n	801c568 <_dtoa_r+0x6d8>
 801c81c:	2600      	movs	r6, #0
 801c81e:	4637      	mov	r7, r6
 801c820:	e7e1      	b.n	801c7e6 <_dtoa_r+0x956>
 801c822:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c828:	4637      	mov	r7, r6
 801c82a:	e599      	b.n	801c360 <_dtoa_r+0x4d0>
 801c82c:	9b08      	ldr	r3, [sp, #32]
 801c82e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c832:	2b00      	cmp	r3, #0
 801c834:	f000 80fd 	beq.w	801ca32 <_dtoa_r+0xba2>
 801c838:	2d00      	cmp	r5, #0
 801c83a:	dd05      	ble.n	801c848 <_dtoa_r+0x9b8>
 801c83c:	4639      	mov	r1, r7
 801c83e:	462a      	mov	r2, r5
 801c840:	4620      	mov	r0, r4
 801c842:	f001 f849 	bl	801d8d8 <__lshift>
 801c846:	4607      	mov	r7, r0
 801c848:	9b06      	ldr	r3, [sp, #24]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d05c      	beq.n	801c908 <_dtoa_r+0xa78>
 801c84e:	6879      	ldr	r1, [r7, #4]
 801c850:	4620      	mov	r0, r4
 801c852:	f000 fde5 	bl	801d420 <_Balloc>
 801c856:	4605      	mov	r5, r0
 801c858:	b928      	cbnz	r0, 801c866 <_dtoa_r+0x9d6>
 801c85a:	4b80      	ldr	r3, [pc, #512]	; (801ca5c <_dtoa_r+0xbcc>)
 801c85c:	4602      	mov	r2, r0
 801c85e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c862:	f7ff bb2e 	b.w	801bec2 <_dtoa_r+0x32>
 801c866:	693a      	ldr	r2, [r7, #16]
 801c868:	3202      	adds	r2, #2
 801c86a:	0092      	lsls	r2, r2, #2
 801c86c:	f107 010c 	add.w	r1, r7, #12
 801c870:	300c      	adds	r0, #12
 801c872:	f7fd f8bb 	bl	80199ec <memcpy>
 801c876:	2201      	movs	r2, #1
 801c878:	4629      	mov	r1, r5
 801c87a:	4620      	mov	r0, r4
 801c87c:	f001 f82c 	bl	801d8d8 <__lshift>
 801c880:	9b00      	ldr	r3, [sp, #0]
 801c882:	3301      	adds	r3, #1
 801c884:	9301      	str	r3, [sp, #4]
 801c886:	9b00      	ldr	r3, [sp, #0]
 801c888:	444b      	add	r3, r9
 801c88a:	9307      	str	r3, [sp, #28]
 801c88c:	9b02      	ldr	r3, [sp, #8]
 801c88e:	f003 0301 	and.w	r3, r3, #1
 801c892:	46b8      	mov	r8, r7
 801c894:	9306      	str	r3, [sp, #24]
 801c896:	4607      	mov	r7, r0
 801c898:	9b01      	ldr	r3, [sp, #4]
 801c89a:	4631      	mov	r1, r6
 801c89c:	3b01      	subs	r3, #1
 801c89e:	4658      	mov	r0, fp
 801c8a0:	9302      	str	r3, [sp, #8]
 801c8a2:	f7ff fa69 	bl	801bd78 <quorem>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	3330      	adds	r3, #48	; 0x30
 801c8aa:	9004      	str	r0, [sp, #16]
 801c8ac:	4641      	mov	r1, r8
 801c8ae:	4658      	mov	r0, fp
 801c8b0:	9308      	str	r3, [sp, #32]
 801c8b2:	f001 f87d 	bl	801d9b0 <__mcmp>
 801c8b6:	463a      	mov	r2, r7
 801c8b8:	4681      	mov	r9, r0
 801c8ba:	4631      	mov	r1, r6
 801c8bc:	4620      	mov	r0, r4
 801c8be:	f001 f893 	bl	801d9e8 <__mdiff>
 801c8c2:	68c2      	ldr	r2, [r0, #12]
 801c8c4:	9b08      	ldr	r3, [sp, #32]
 801c8c6:	4605      	mov	r5, r0
 801c8c8:	bb02      	cbnz	r2, 801c90c <_dtoa_r+0xa7c>
 801c8ca:	4601      	mov	r1, r0
 801c8cc:	4658      	mov	r0, fp
 801c8ce:	f001 f86f 	bl	801d9b0 <__mcmp>
 801c8d2:	9b08      	ldr	r3, [sp, #32]
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	4629      	mov	r1, r5
 801c8d8:	4620      	mov	r0, r4
 801c8da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c8de:	f000 fddf 	bl	801d4a0 <_Bfree>
 801c8e2:	9b05      	ldr	r3, [sp, #20]
 801c8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c8e6:	9d01      	ldr	r5, [sp, #4]
 801c8e8:	ea43 0102 	orr.w	r1, r3, r2
 801c8ec:	9b06      	ldr	r3, [sp, #24]
 801c8ee:	430b      	orrs	r3, r1
 801c8f0:	9b08      	ldr	r3, [sp, #32]
 801c8f2:	d10d      	bne.n	801c910 <_dtoa_r+0xa80>
 801c8f4:	2b39      	cmp	r3, #57	; 0x39
 801c8f6:	d029      	beq.n	801c94c <_dtoa_r+0xabc>
 801c8f8:	f1b9 0f00 	cmp.w	r9, #0
 801c8fc:	dd01      	ble.n	801c902 <_dtoa_r+0xa72>
 801c8fe:	9b04      	ldr	r3, [sp, #16]
 801c900:	3331      	adds	r3, #49	; 0x31
 801c902:	9a02      	ldr	r2, [sp, #8]
 801c904:	7013      	strb	r3, [r2, #0]
 801c906:	e774      	b.n	801c7f2 <_dtoa_r+0x962>
 801c908:	4638      	mov	r0, r7
 801c90a:	e7b9      	b.n	801c880 <_dtoa_r+0x9f0>
 801c90c:	2201      	movs	r2, #1
 801c90e:	e7e2      	b.n	801c8d6 <_dtoa_r+0xa46>
 801c910:	f1b9 0f00 	cmp.w	r9, #0
 801c914:	db06      	blt.n	801c924 <_dtoa_r+0xa94>
 801c916:	9905      	ldr	r1, [sp, #20]
 801c918:	ea41 0909 	orr.w	r9, r1, r9
 801c91c:	9906      	ldr	r1, [sp, #24]
 801c91e:	ea59 0101 	orrs.w	r1, r9, r1
 801c922:	d120      	bne.n	801c966 <_dtoa_r+0xad6>
 801c924:	2a00      	cmp	r2, #0
 801c926:	ddec      	ble.n	801c902 <_dtoa_r+0xa72>
 801c928:	4659      	mov	r1, fp
 801c92a:	2201      	movs	r2, #1
 801c92c:	4620      	mov	r0, r4
 801c92e:	9301      	str	r3, [sp, #4]
 801c930:	f000 ffd2 	bl	801d8d8 <__lshift>
 801c934:	4631      	mov	r1, r6
 801c936:	4683      	mov	fp, r0
 801c938:	f001 f83a 	bl	801d9b0 <__mcmp>
 801c93c:	2800      	cmp	r0, #0
 801c93e:	9b01      	ldr	r3, [sp, #4]
 801c940:	dc02      	bgt.n	801c948 <_dtoa_r+0xab8>
 801c942:	d1de      	bne.n	801c902 <_dtoa_r+0xa72>
 801c944:	07da      	lsls	r2, r3, #31
 801c946:	d5dc      	bpl.n	801c902 <_dtoa_r+0xa72>
 801c948:	2b39      	cmp	r3, #57	; 0x39
 801c94a:	d1d8      	bne.n	801c8fe <_dtoa_r+0xa6e>
 801c94c:	9a02      	ldr	r2, [sp, #8]
 801c94e:	2339      	movs	r3, #57	; 0x39
 801c950:	7013      	strb	r3, [r2, #0]
 801c952:	462b      	mov	r3, r5
 801c954:	461d      	mov	r5, r3
 801c956:	3b01      	subs	r3, #1
 801c958:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c95c:	2a39      	cmp	r2, #57	; 0x39
 801c95e:	d050      	beq.n	801ca02 <_dtoa_r+0xb72>
 801c960:	3201      	adds	r2, #1
 801c962:	701a      	strb	r2, [r3, #0]
 801c964:	e745      	b.n	801c7f2 <_dtoa_r+0x962>
 801c966:	2a00      	cmp	r2, #0
 801c968:	dd03      	ble.n	801c972 <_dtoa_r+0xae2>
 801c96a:	2b39      	cmp	r3, #57	; 0x39
 801c96c:	d0ee      	beq.n	801c94c <_dtoa_r+0xabc>
 801c96e:	3301      	adds	r3, #1
 801c970:	e7c7      	b.n	801c902 <_dtoa_r+0xa72>
 801c972:	9a01      	ldr	r2, [sp, #4]
 801c974:	9907      	ldr	r1, [sp, #28]
 801c976:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c97a:	428a      	cmp	r2, r1
 801c97c:	d02a      	beq.n	801c9d4 <_dtoa_r+0xb44>
 801c97e:	4659      	mov	r1, fp
 801c980:	2300      	movs	r3, #0
 801c982:	220a      	movs	r2, #10
 801c984:	4620      	mov	r0, r4
 801c986:	f000 fdad 	bl	801d4e4 <__multadd>
 801c98a:	45b8      	cmp	r8, r7
 801c98c:	4683      	mov	fp, r0
 801c98e:	f04f 0300 	mov.w	r3, #0
 801c992:	f04f 020a 	mov.w	r2, #10
 801c996:	4641      	mov	r1, r8
 801c998:	4620      	mov	r0, r4
 801c99a:	d107      	bne.n	801c9ac <_dtoa_r+0xb1c>
 801c99c:	f000 fda2 	bl	801d4e4 <__multadd>
 801c9a0:	4680      	mov	r8, r0
 801c9a2:	4607      	mov	r7, r0
 801c9a4:	9b01      	ldr	r3, [sp, #4]
 801c9a6:	3301      	adds	r3, #1
 801c9a8:	9301      	str	r3, [sp, #4]
 801c9aa:	e775      	b.n	801c898 <_dtoa_r+0xa08>
 801c9ac:	f000 fd9a 	bl	801d4e4 <__multadd>
 801c9b0:	4639      	mov	r1, r7
 801c9b2:	4680      	mov	r8, r0
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	220a      	movs	r2, #10
 801c9b8:	4620      	mov	r0, r4
 801c9ba:	f000 fd93 	bl	801d4e4 <__multadd>
 801c9be:	4607      	mov	r7, r0
 801c9c0:	e7f0      	b.n	801c9a4 <_dtoa_r+0xb14>
 801c9c2:	f1b9 0f00 	cmp.w	r9, #0
 801c9c6:	9a00      	ldr	r2, [sp, #0]
 801c9c8:	bfcc      	ite	gt
 801c9ca:	464d      	movgt	r5, r9
 801c9cc:	2501      	movle	r5, #1
 801c9ce:	4415      	add	r5, r2
 801c9d0:	f04f 0800 	mov.w	r8, #0
 801c9d4:	4659      	mov	r1, fp
 801c9d6:	2201      	movs	r2, #1
 801c9d8:	4620      	mov	r0, r4
 801c9da:	9301      	str	r3, [sp, #4]
 801c9dc:	f000 ff7c 	bl	801d8d8 <__lshift>
 801c9e0:	4631      	mov	r1, r6
 801c9e2:	4683      	mov	fp, r0
 801c9e4:	f000 ffe4 	bl	801d9b0 <__mcmp>
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	dcb2      	bgt.n	801c952 <_dtoa_r+0xac2>
 801c9ec:	d102      	bne.n	801c9f4 <_dtoa_r+0xb64>
 801c9ee:	9b01      	ldr	r3, [sp, #4]
 801c9f0:	07db      	lsls	r3, r3, #31
 801c9f2:	d4ae      	bmi.n	801c952 <_dtoa_r+0xac2>
 801c9f4:	462b      	mov	r3, r5
 801c9f6:	461d      	mov	r5, r3
 801c9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c9fc:	2a30      	cmp	r2, #48	; 0x30
 801c9fe:	d0fa      	beq.n	801c9f6 <_dtoa_r+0xb66>
 801ca00:	e6f7      	b.n	801c7f2 <_dtoa_r+0x962>
 801ca02:	9a00      	ldr	r2, [sp, #0]
 801ca04:	429a      	cmp	r2, r3
 801ca06:	d1a5      	bne.n	801c954 <_dtoa_r+0xac4>
 801ca08:	f10a 0a01 	add.w	sl, sl, #1
 801ca0c:	2331      	movs	r3, #49	; 0x31
 801ca0e:	e779      	b.n	801c904 <_dtoa_r+0xa74>
 801ca10:	4b13      	ldr	r3, [pc, #76]	; (801ca60 <_dtoa_r+0xbd0>)
 801ca12:	f7ff baaf 	b.w	801bf74 <_dtoa_r+0xe4>
 801ca16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	f47f aa86 	bne.w	801bf2a <_dtoa_r+0x9a>
 801ca1e:	4b11      	ldr	r3, [pc, #68]	; (801ca64 <_dtoa_r+0xbd4>)
 801ca20:	f7ff baa8 	b.w	801bf74 <_dtoa_r+0xe4>
 801ca24:	f1b9 0f00 	cmp.w	r9, #0
 801ca28:	dc03      	bgt.n	801ca32 <_dtoa_r+0xba2>
 801ca2a:	9b05      	ldr	r3, [sp, #20]
 801ca2c:	2b02      	cmp	r3, #2
 801ca2e:	f73f aec9 	bgt.w	801c7c4 <_dtoa_r+0x934>
 801ca32:	9d00      	ldr	r5, [sp, #0]
 801ca34:	4631      	mov	r1, r6
 801ca36:	4658      	mov	r0, fp
 801ca38:	f7ff f99e 	bl	801bd78 <quorem>
 801ca3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ca40:	f805 3b01 	strb.w	r3, [r5], #1
 801ca44:	9a00      	ldr	r2, [sp, #0]
 801ca46:	1aaa      	subs	r2, r5, r2
 801ca48:	4591      	cmp	r9, r2
 801ca4a:	ddba      	ble.n	801c9c2 <_dtoa_r+0xb32>
 801ca4c:	4659      	mov	r1, fp
 801ca4e:	2300      	movs	r3, #0
 801ca50:	220a      	movs	r2, #10
 801ca52:	4620      	mov	r0, r4
 801ca54:	f000 fd46 	bl	801d4e4 <__multadd>
 801ca58:	4683      	mov	fp, r0
 801ca5a:	e7eb      	b.n	801ca34 <_dtoa_r+0xba4>
 801ca5c:	08020c8f 	.word	0x08020c8f
 801ca60:	08020e91 	.word	0x08020e91
 801ca64:	08020c0c 	.word	0x08020c0c

0801ca68 <__sflush_r>:
 801ca68:	898a      	ldrh	r2, [r1, #12]
 801ca6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca6e:	4605      	mov	r5, r0
 801ca70:	0710      	lsls	r0, r2, #28
 801ca72:	460c      	mov	r4, r1
 801ca74:	d458      	bmi.n	801cb28 <__sflush_r+0xc0>
 801ca76:	684b      	ldr	r3, [r1, #4]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	dc05      	bgt.n	801ca88 <__sflush_r+0x20>
 801ca7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	dc02      	bgt.n	801ca88 <__sflush_r+0x20>
 801ca82:	2000      	movs	r0, #0
 801ca84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca8a:	2e00      	cmp	r6, #0
 801ca8c:	d0f9      	beq.n	801ca82 <__sflush_r+0x1a>
 801ca8e:	2300      	movs	r3, #0
 801ca90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ca94:	682f      	ldr	r7, [r5, #0]
 801ca96:	602b      	str	r3, [r5, #0]
 801ca98:	d032      	beq.n	801cb00 <__sflush_r+0x98>
 801ca9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ca9c:	89a3      	ldrh	r3, [r4, #12]
 801ca9e:	075a      	lsls	r2, r3, #29
 801caa0:	d505      	bpl.n	801caae <__sflush_r+0x46>
 801caa2:	6863      	ldr	r3, [r4, #4]
 801caa4:	1ac0      	subs	r0, r0, r3
 801caa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801caa8:	b10b      	cbz	r3, 801caae <__sflush_r+0x46>
 801caaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801caac:	1ac0      	subs	r0, r0, r3
 801caae:	2300      	movs	r3, #0
 801cab0:	4602      	mov	r2, r0
 801cab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cab4:	6a21      	ldr	r1, [r4, #32]
 801cab6:	4628      	mov	r0, r5
 801cab8:	47b0      	blx	r6
 801caba:	1c43      	adds	r3, r0, #1
 801cabc:	89a3      	ldrh	r3, [r4, #12]
 801cabe:	d106      	bne.n	801cace <__sflush_r+0x66>
 801cac0:	6829      	ldr	r1, [r5, #0]
 801cac2:	291d      	cmp	r1, #29
 801cac4:	d82c      	bhi.n	801cb20 <__sflush_r+0xb8>
 801cac6:	4a2a      	ldr	r2, [pc, #168]	; (801cb70 <__sflush_r+0x108>)
 801cac8:	40ca      	lsrs	r2, r1
 801caca:	07d6      	lsls	r6, r2, #31
 801cacc:	d528      	bpl.n	801cb20 <__sflush_r+0xb8>
 801cace:	2200      	movs	r2, #0
 801cad0:	6062      	str	r2, [r4, #4]
 801cad2:	04d9      	lsls	r1, r3, #19
 801cad4:	6922      	ldr	r2, [r4, #16]
 801cad6:	6022      	str	r2, [r4, #0]
 801cad8:	d504      	bpl.n	801cae4 <__sflush_r+0x7c>
 801cada:	1c42      	adds	r2, r0, #1
 801cadc:	d101      	bne.n	801cae2 <__sflush_r+0x7a>
 801cade:	682b      	ldr	r3, [r5, #0]
 801cae0:	b903      	cbnz	r3, 801cae4 <__sflush_r+0x7c>
 801cae2:	6560      	str	r0, [r4, #84]	; 0x54
 801cae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cae6:	602f      	str	r7, [r5, #0]
 801cae8:	2900      	cmp	r1, #0
 801caea:	d0ca      	beq.n	801ca82 <__sflush_r+0x1a>
 801caec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801caf0:	4299      	cmp	r1, r3
 801caf2:	d002      	beq.n	801cafa <__sflush_r+0x92>
 801caf4:	4628      	mov	r0, r5
 801caf6:	f7fc ffa9 	bl	8019a4c <_free_r>
 801cafa:	2000      	movs	r0, #0
 801cafc:	6360      	str	r0, [r4, #52]	; 0x34
 801cafe:	e7c1      	b.n	801ca84 <__sflush_r+0x1c>
 801cb00:	6a21      	ldr	r1, [r4, #32]
 801cb02:	2301      	movs	r3, #1
 801cb04:	4628      	mov	r0, r5
 801cb06:	47b0      	blx	r6
 801cb08:	1c41      	adds	r1, r0, #1
 801cb0a:	d1c7      	bne.n	801ca9c <__sflush_r+0x34>
 801cb0c:	682b      	ldr	r3, [r5, #0]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d0c4      	beq.n	801ca9c <__sflush_r+0x34>
 801cb12:	2b1d      	cmp	r3, #29
 801cb14:	d001      	beq.n	801cb1a <__sflush_r+0xb2>
 801cb16:	2b16      	cmp	r3, #22
 801cb18:	d101      	bne.n	801cb1e <__sflush_r+0xb6>
 801cb1a:	602f      	str	r7, [r5, #0]
 801cb1c:	e7b1      	b.n	801ca82 <__sflush_r+0x1a>
 801cb1e:	89a3      	ldrh	r3, [r4, #12]
 801cb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb24:	81a3      	strh	r3, [r4, #12]
 801cb26:	e7ad      	b.n	801ca84 <__sflush_r+0x1c>
 801cb28:	690f      	ldr	r7, [r1, #16]
 801cb2a:	2f00      	cmp	r7, #0
 801cb2c:	d0a9      	beq.n	801ca82 <__sflush_r+0x1a>
 801cb2e:	0793      	lsls	r3, r2, #30
 801cb30:	680e      	ldr	r6, [r1, #0]
 801cb32:	bf08      	it	eq
 801cb34:	694b      	ldreq	r3, [r1, #20]
 801cb36:	600f      	str	r7, [r1, #0]
 801cb38:	bf18      	it	ne
 801cb3a:	2300      	movne	r3, #0
 801cb3c:	eba6 0807 	sub.w	r8, r6, r7
 801cb40:	608b      	str	r3, [r1, #8]
 801cb42:	f1b8 0f00 	cmp.w	r8, #0
 801cb46:	dd9c      	ble.n	801ca82 <__sflush_r+0x1a>
 801cb48:	6a21      	ldr	r1, [r4, #32]
 801cb4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb4c:	4643      	mov	r3, r8
 801cb4e:	463a      	mov	r2, r7
 801cb50:	4628      	mov	r0, r5
 801cb52:	47b0      	blx	r6
 801cb54:	2800      	cmp	r0, #0
 801cb56:	dc06      	bgt.n	801cb66 <__sflush_r+0xfe>
 801cb58:	89a3      	ldrh	r3, [r4, #12]
 801cb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb5e:	81a3      	strh	r3, [r4, #12]
 801cb60:	f04f 30ff 	mov.w	r0, #4294967295
 801cb64:	e78e      	b.n	801ca84 <__sflush_r+0x1c>
 801cb66:	4407      	add	r7, r0
 801cb68:	eba8 0800 	sub.w	r8, r8, r0
 801cb6c:	e7e9      	b.n	801cb42 <__sflush_r+0xda>
 801cb6e:	bf00      	nop
 801cb70:	20400001 	.word	0x20400001

0801cb74 <_fflush_r>:
 801cb74:	b538      	push	{r3, r4, r5, lr}
 801cb76:	690b      	ldr	r3, [r1, #16]
 801cb78:	4605      	mov	r5, r0
 801cb7a:	460c      	mov	r4, r1
 801cb7c:	b913      	cbnz	r3, 801cb84 <_fflush_r+0x10>
 801cb7e:	2500      	movs	r5, #0
 801cb80:	4628      	mov	r0, r5
 801cb82:	bd38      	pop	{r3, r4, r5, pc}
 801cb84:	b118      	cbz	r0, 801cb8e <_fflush_r+0x1a>
 801cb86:	6983      	ldr	r3, [r0, #24]
 801cb88:	b90b      	cbnz	r3, 801cb8e <_fflush_r+0x1a>
 801cb8a:	f7fc fe61 	bl	8019850 <__sinit>
 801cb8e:	4b14      	ldr	r3, [pc, #80]	; (801cbe0 <_fflush_r+0x6c>)
 801cb90:	429c      	cmp	r4, r3
 801cb92:	d11b      	bne.n	801cbcc <_fflush_r+0x58>
 801cb94:	686c      	ldr	r4, [r5, #4]
 801cb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d0ef      	beq.n	801cb7e <_fflush_r+0xa>
 801cb9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cba0:	07d0      	lsls	r0, r2, #31
 801cba2:	d404      	bmi.n	801cbae <_fflush_r+0x3a>
 801cba4:	0599      	lsls	r1, r3, #22
 801cba6:	d402      	bmi.n	801cbae <_fflush_r+0x3a>
 801cba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbaa:	f7fc ff14 	bl	80199d6 <__retarget_lock_acquire_recursive>
 801cbae:	4628      	mov	r0, r5
 801cbb0:	4621      	mov	r1, r4
 801cbb2:	f7ff ff59 	bl	801ca68 <__sflush_r>
 801cbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbb8:	07da      	lsls	r2, r3, #31
 801cbba:	4605      	mov	r5, r0
 801cbbc:	d4e0      	bmi.n	801cb80 <_fflush_r+0xc>
 801cbbe:	89a3      	ldrh	r3, [r4, #12]
 801cbc0:	059b      	lsls	r3, r3, #22
 801cbc2:	d4dd      	bmi.n	801cb80 <_fflush_r+0xc>
 801cbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbc6:	f7fc ff07 	bl	80199d8 <__retarget_lock_release_recursive>
 801cbca:	e7d9      	b.n	801cb80 <_fflush_r+0xc>
 801cbcc:	4b05      	ldr	r3, [pc, #20]	; (801cbe4 <_fflush_r+0x70>)
 801cbce:	429c      	cmp	r4, r3
 801cbd0:	d101      	bne.n	801cbd6 <_fflush_r+0x62>
 801cbd2:	68ac      	ldr	r4, [r5, #8]
 801cbd4:	e7df      	b.n	801cb96 <_fflush_r+0x22>
 801cbd6:	4b04      	ldr	r3, [pc, #16]	; (801cbe8 <_fflush_r+0x74>)
 801cbd8:	429c      	cmp	r4, r3
 801cbda:	bf08      	it	eq
 801cbdc:	68ec      	ldreq	r4, [r5, #12]
 801cbde:	e7da      	b.n	801cb96 <_fflush_r+0x22>
 801cbe0:	08020b04 	.word	0x08020b04
 801cbe4:	08020b24 	.word	0x08020b24
 801cbe8:	08020ae4 	.word	0x08020ae4

0801cbec <fiprintf>:
 801cbec:	b40e      	push	{r1, r2, r3}
 801cbee:	b503      	push	{r0, r1, lr}
 801cbf0:	4601      	mov	r1, r0
 801cbf2:	ab03      	add	r3, sp, #12
 801cbf4:	4805      	ldr	r0, [pc, #20]	; (801cc0c <fiprintf+0x20>)
 801cbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbfa:	6800      	ldr	r0, [r0, #0]
 801cbfc:	9301      	str	r3, [sp, #4]
 801cbfe:	f001 fc57 	bl	801e4b0 <_vfiprintf_r>
 801cc02:	b002      	add	sp, #8
 801cc04:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc08:	b003      	add	sp, #12
 801cc0a:	4770      	bx	lr
 801cc0c:	20000200 	.word	0x20000200

0801cc10 <rshift>:
 801cc10:	6903      	ldr	r3, [r0, #16]
 801cc12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cc16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cc1e:	f100 0414 	add.w	r4, r0, #20
 801cc22:	dd45      	ble.n	801ccb0 <rshift+0xa0>
 801cc24:	f011 011f 	ands.w	r1, r1, #31
 801cc28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cc2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cc30:	d10c      	bne.n	801cc4c <rshift+0x3c>
 801cc32:	f100 0710 	add.w	r7, r0, #16
 801cc36:	4629      	mov	r1, r5
 801cc38:	42b1      	cmp	r1, r6
 801cc3a:	d334      	bcc.n	801cca6 <rshift+0x96>
 801cc3c:	1a9b      	subs	r3, r3, r2
 801cc3e:	009b      	lsls	r3, r3, #2
 801cc40:	1eea      	subs	r2, r5, #3
 801cc42:	4296      	cmp	r6, r2
 801cc44:	bf38      	it	cc
 801cc46:	2300      	movcc	r3, #0
 801cc48:	4423      	add	r3, r4
 801cc4a:	e015      	b.n	801cc78 <rshift+0x68>
 801cc4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cc50:	f1c1 0820 	rsb	r8, r1, #32
 801cc54:	40cf      	lsrs	r7, r1
 801cc56:	f105 0e04 	add.w	lr, r5, #4
 801cc5a:	46a1      	mov	r9, r4
 801cc5c:	4576      	cmp	r6, lr
 801cc5e:	46f4      	mov	ip, lr
 801cc60:	d815      	bhi.n	801cc8e <rshift+0x7e>
 801cc62:	1a9b      	subs	r3, r3, r2
 801cc64:	009a      	lsls	r2, r3, #2
 801cc66:	3a04      	subs	r2, #4
 801cc68:	3501      	adds	r5, #1
 801cc6a:	42ae      	cmp	r6, r5
 801cc6c:	bf38      	it	cc
 801cc6e:	2200      	movcc	r2, #0
 801cc70:	18a3      	adds	r3, r4, r2
 801cc72:	50a7      	str	r7, [r4, r2]
 801cc74:	b107      	cbz	r7, 801cc78 <rshift+0x68>
 801cc76:	3304      	adds	r3, #4
 801cc78:	1b1a      	subs	r2, r3, r4
 801cc7a:	42a3      	cmp	r3, r4
 801cc7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cc80:	bf08      	it	eq
 801cc82:	2300      	moveq	r3, #0
 801cc84:	6102      	str	r2, [r0, #16]
 801cc86:	bf08      	it	eq
 801cc88:	6143      	streq	r3, [r0, #20]
 801cc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc8e:	f8dc c000 	ldr.w	ip, [ip]
 801cc92:	fa0c fc08 	lsl.w	ip, ip, r8
 801cc96:	ea4c 0707 	orr.w	r7, ip, r7
 801cc9a:	f849 7b04 	str.w	r7, [r9], #4
 801cc9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cca2:	40cf      	lsrs	r7, r1
 801cca4:	e7da      	b.n	801cc5c <rshift+0x4c>
 801cca6:	f851 cb04 	ldr.w	ip, [r1], #4
 801ccaa:	f847 cf04 	str.w	ip, [r7, #4]!
 801ccae:	e7c3      	b.n	801cc38 <rshift+0x28>
 801ccb0:	4623      	mov	r3, r4
 801ccb2:	e7e1      	b.n	801cc78 <rshift+0x68>

0801ccb4 <__hexdig_fun>:
 801ccb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ccb8:	2b09      	cmp	r3, #9
 801ccba:	d802      	bhi.n	801ccc2 <__hexdig_fun+0xe>
 801ccbc:	3820      	subs	r0, #32
 801ccbe:	b2c0      	uxtb	r0, r0
 801ccc0:	4770      	bx	lr
 801ccc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ccc6:	2b05      	cmp	r3, #5
 801ccc8:	d801      	bhi.n	801ccce <__hexdig_fun+0x1a>
 801ccca:	3847      	subs	r0, #71	; 0x47
 801cccc:	e7f7      	b.n	801ccbe <__hexdig_fun+0xa>
 801ccce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ccd2:	2b05      	cmp	r3, #5
 801ccd4:	d801      	bhi.n	801ccda <__hexdig_fun+0x26>
 801ccd6:	3827      	subs	r0, #39	; 0x27
 801ccd8:	e7f1      	b.n	801ccbe <__hexdig_fun+0xa>
 801ccda:	2000      	movs	r0, #0
 801ccdc:	4770      	bx	lr
	...

0801cce0 <__gethex>:
 801cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce4:	ed2d 8b02 	vpush	{d8}
 801cce8:	b089      	sub	sp, #36	; 0x24
 801ccea:	ee08 0a10 	vmov	s16, r0
 801ccee:	9304      	str	r3, [sp, #16]
 801ccf0:	4bbc      	ldr	r3, [pc, #752]	; (801cfe4 <__gethex+0x304>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	9301      	str	r3, [sp, #4]
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	468b      	mov	fp, r1
 801ccfa:	4690      	mov	r8, r2
 801ccfc:	f7e3 fa78 	bl	80001f0 <strlen>
 801cd00:	9b01      	ldr	r3, [sp, #4]
 801cd02:	f8db 2000 	ldr.w	r2, [fp]
 801cd06:	4403      	add	r3, r0
 801cd08:	4682      	mov	sl, r0
 801cd0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cd0e:	9305      	str	r3, [sp, #20]
 801cd10:	1c93      	adds	r3, r2, #2
 801cd12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cd16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cd1a:	32fe      	adds	r2, #254	; 0xfe
 801cd1c:	18d1      	adds	r1, r2, r3
 801cd1e:	461f      	mov	r7, r3
 801cd20:	f813 0b01 	ldrb.w	r0, [r3], #1
 801cd24:	9100      	str	r1, [sp, #0]
 801cd26:	2830      	cmp	r0, #48	; 0x30
 801cd28:	d0f8      	beq.n	801cd1c <__gethex+0x3c>
 801cd2a:	f7ff ffc3 	bl	801ccb4 <__hexdig_fun>
 801cd2e:	4604      	mov	r4, r0
 801cd30:	2800      	cmp	r0, #0
 801cd32:	d13a      	bne.n	801cdaa <__gethex+0xca>
 801cd34:	9901      	ldr	r1, [sp, #4]
 801cd36:	4652      	mov	r2, sl
 801cd38:	4638      	mov	r0, r7
 801cd3a:	f7fd ff96 	bl	801ac6a <strncmp>
 801cd3e:	4605      	mov	r5, r0
 801cd40:	2800      	cmp	r0, #0
 801cd42:	d168      	bne.n	801ce16 <__gethex+0x136>
 801cd44:	f817 000a 	ldrb.w	r0, [r7, sl]
 801cd48:	eb07 060a 	add.w	r6, r7, sl
 801cd4c:	f7ff ffb2 	bl	801ccb4 <__hexdig_fun>
 801cd50:	2800      	cmp	r0, #0
 801cd52:	d062      	beq.n	801ce1a <__gethex+0x13a>
 801cd54:	4633      	mov	r3, r6
 801cd56:	7818      	ldrb	r0, [r3, #0]
 801cd58:	2830      	cmp	r0, #48	; 0x30
 801cd5a:	461f      	mov	r7, r3
 801cd5c:	f103 0301 	add.w	r3, r3, #1
 801cd60:	d0f9      	beq.n	801cd56 <__gethex+0x76>
 801cd62:	f7ff ffa7 	bl	801ccb4 <__hexdig_fun>
 801cd66:	2301      	movs	r3, #1
 801cd68:	fab0 f480 	clz	r4, r0
 801cd6c:	0964      	lsrs	r4, r4, #5
 801cd6e:	4635      	mov	r5, r6
 801cd70:	9300      	str	r3, [sp, #0]
 801cd72:	463a      	mov	r2, r7
 801cd74:	4616      	mov	r6, r2
 801cd76:	3201      	adds	r2, #1
 801cd78:	7830      	ldrb	r0, [r6, #0]
 801cd7a:	f7ff ff9b 	bl	801ccb4 <__hexdig_fun>
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	d1f8      	bne.n	801cd74 <__gethex+0x94>
 801cd82:	9901      	ldr	r1, [sp, #4]
 801cd84:	4652      	mov	r2, sl
 801cd86:	4630      	mov	r0, r6
 801cd88:	f7fd ff6f 	bl	801ac6a <strncmp>
 801cd8c:	b980      	cbnz	r0, 801cdb0 <__gethex+0xd0>
 801cd8e:	b94d      	cbnz	r5, 801cda4 <__gethex+0xc4>
 801cd90:	eb06 050a 	add.w	r5, r6, sl
 801cd94:	462a      	mov	r2, r5
 801cd96:	4616      	mov	r6, r2
 801cd98:	3201      	adds	r2, #1
 801cd9a:	7830      	ldrb	r0, [r6, #0]
 801cd9c:	f7ff ff8a 	bl	801ccb4 <__hexdig_fun>
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d1f8      	bne.n	801cd96 <__gethex+0xb6>
 801cda4:	1bad      	subs	r5, r5, r6
 801cda6:	00ad      	lsls	r5, r5, #2
 801cda8:	e004      	b.n	801cdb4 <__gethex+0xd4>
 801cdaa:	2400      	movs	r4, #0
 801cdac:	4625      	mov	r5, r4
 801cdae:	e7e0      	b.n	801cd72 <__gethex+0x92>
 801cdb0:	2d00      	cmp	r5, #0
 801cdb2:	d1f7      	bne.n	801cda4 <__gethex+0xc4>
 801cdb4:	7833      	ldrb	r3, [r6, #0]
 801cdb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cdba:	2b50      	cmp	r3, #80	; 0x50
 801cdbc:	d13b      	bne.n	801ce36 <__gethex+0x156>
 801cdbe:	7873      	ldrb	r3, [r6, #1]
 801cdc0:	2b2b      	cmp	r3, #43	; 0x2b
 801cdc2:	d02c      	beq.n	801ce1e <__gethex+0x13e>
 801cdc4:	2b2d      	cmp	r3, #45	; 0x2d
 801cdc6:	d02e      	beq.n	801ce26 <__gethex+0x146>
 801cdc8:	1c71      	adds	r1, r6, #1
 801cdca:	f04f 0900 	mov.w	r9, #0
 801cdce:	7808      	ldrb	r0, [r1, #0]
 801cdd0:	f7ff ff70 	bl	801ccb4 <__hexdig_fun>
 801cdd4:	1e43      	subs	r3, r0, #1
 801cdd6:	b2db      	uxtb	r3, r3
 801cdd8:	2b18      	cmp	r3, #24
 801cdda:	d82c      	bhi.n	801ce36 <__gethex+0x156>
 801cddc:	f1a0 0210 	sub.w	r2, r0, #16
 801cde0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cde4:	f7ff ff66 	bl	801ccb4 <__hexdig_fun>
 801cde8:	1e43      	subs	r3, r0, #1
 801cdea:	b2db      	uxtb	r3, r3
 801cdec:	2b18      	cmp	r3, #24
 801cdee:	d91d      	bls.n	801ce2c <__gethex+0x14c>
 801cdf0:	f1b9 0f00 	cmp.w	r9, #0
 801cdf4:	d000      	beq.n	801cdf8 <__gethex+0x118>
 801cdf6:	4252      	negs	r2, r2
 801cdf8:	4415      	add	r5, r2
 801cdfa:	f8cb 1000 	str.w	r1, [fp]
 801cdfe:	b1e4      	cbz	r4, 801ce3a <__gethex+0x15a>
 801ce00:	9b00      	ldr	r3, [sp, #0]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	bf14      	ite	ne
 801ce06:	2700      	movne	r7, #0
 801ce08:	2706      	moveq	r7, #6
 801ce0a:	4638      	mov	r0, r7
 801ce0c:	b009      	add	sp, #36	; 0x24
 801ce0e:	ecbd 8b02 	vpop	{d8}
 801ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce16:	463e      	mov	r6, r7
 801ce18:	4625      	mov	r5, r4
 801ce1a:	2401      	movs	r4, #1
 801ce1c:	e7ca      	b.n	801cdb4 <__gethex+0xd4>
 801ce1e:	f04f 0900 	mov.w	r9, #0
 801ce22:	1cb1      	adds	r1, r6, #2
 801ce24:	e7d3      	b.n	801cdce <__gethex+0xee>
 801ce26:	f04f 0901 	mov.w	r9, #1
 801ce2a:	e7fa      	b.n	801ce22 <__gethex+0x142>
 801ce2c:	230a      	movs	r3, #10
 801ce2e:	fb03 0202 	mla	r2, r3, r2, r0
 801ce32:	3a10      	subs	r2, #16
 801ce34:	e7d4      	b.n	801cde0 <__gethex+0x100>
 801ce36:	4631      	mov	r1, r6
 801ce38:	e7df      	b.n	801cdfa <__gethex+0x11a>
 801ce3a:	1bf3      	subs	r3, r6, r7
 801ce3c:	3b01      	subs	r3, #1
 801ce3e:	4621      	mov	r1, r4
 801ce40:	2b07      	cmp	r3, #7
 801ce42:	dc0b      	bgt.n	801ce5c <__gethex+0x17c>
 801ce44:	ee18 0a10 	vmov	r0, s16
 801ce48:	f000 faea 	bl	801d420 <_Balloc>
 801ce4c:	4604      	mov	r4, r0
 801ce4e:	b940      	cbnz	r0, 801ce62 <__gethex+0x182>
 801ce50:	4b65      	ldr	r3, [pc, #404]	; (801cfe8 <__gethex+0x308>)
 801ce52:	4602      	mov	r2, r0
 801ce54:	21de      	movs	r1, #222	; 0xde
 801ce56:	4865      	ldr	r0, [pc, #404]	; (801cfec <__gethex+0x30c>)
 801ce58:	f7fe ff60 	bl	801bd1c <__assert_func>
 801ce5c:	3101      	adds	r1, #1
 801ce5e:	105b      	asrs	r3, r3, #1
 801ce60:	e7ee      	b.n	801ce40 <__gethex+0x160>
 801ce62:	f100 0914 	add.w	r9, r0, #20
 801ce66:	f04f 0b00 	mov.w	fp, #0
 801ce6a:	f1ca 0301 	rsb	r3, sl, #1
 801ce6e:	f8cd 9008 	str.w	r9, [sp, #8]
 801ce72:	f8cd b000 	str.w	fp, [sp]
 801ce76:	9306      	str	r3, [sp, #24]
 801ce78:	42b7      	cmp	r7, r6
 801ce7a:	d340      	bcc.n	801cefe <__gethex+0x21e>
 801ce7c:	9802      	ldr	r0, [sp, #8]
 801ce7e:	9b00      	ldr	r3, [sp, #0]
 801ce80:	f840 3b04 	str.w	r3, [r0], #4
 801ce84:	eba0 0009 	sub.w	r0, r0, r9
 801ce88:	1080      	asrs	r0, r0, #2
 801ce8a:	0146      	lsls	r6, r0, #5
 801ce8c:	6120      	str	r0, [r4, #16]
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f000 fbbc 	bl	801d60c <__hi0bits>
 801ce94:	1a30      	subs	r0, r6, r0
 801ce96:	f8d8 6000 	ldr.w	r6, [r8]
 801ce9a:	42b0      	cmp	r0, r6
 801ce9c:	dd63      	ble.n	801cf66 <__gethex+0x286>
 801ce9e:	1b87      	subs	r7, r0, r6
 801cea0:	4639      	mov	r1, r7
 801cea2:	4620      	mov	r0, r4
 801cea4:	f000 ff56 	bl	801dd54 <__any_on>
 801cea8:	4682      	mov	sl, r0
 801ceaa:	b1a8      	cbz	r0, 801ced8 <__gethex+0x1f8>
 801ceac:	1e7b      	subs	r3, r7, #1
 801ceae:	1159      	asrs	r1, r3, #5
 801ceb0:	f003 021f 	and.w	r2, r3, #31
 801ceb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ceb8:	f04f 0a01 	mov.w	sl, #1
 801cebc:	fa0a f202 	lsl.w	r2, sl, r2
 801cec0:	420a      	tst	r2, r1
 801cec2:	d009      	beq.n	801ced8 <__gethex+0x1f8>
 801cec4:	4553      	cmp	r3, sl
 801cec6:	dd05      	ble.n	801ced4 <__gethex+0x1f4>
 801cec8:	1eb9      	subs	r1, r7, #2
 801ceca:	4620      	mov	r0, r4
 801cecc:	f000 ff42 	bl	801dd54 <__any_on>
 801ced0:	2800      	cmp	r0, #0
 801ced2:	d145      	bne.n	801cf60 <__gethex+0x280>
 801ced4:	f04f 0a02 	mov.w	sl, #2
 801ced8:	4639      	mov	r1, r7
 801ceda:	4620      	mov	r0, r4
 801cedc:	f7ff fe98 	bl	801cc10 <rshift>
 801cee0:	443d      	add	r5, r7
 801cee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cee6:	42ab      	cmp	r3, r5
 801cee8:	da4c      	bge.n	801cf84 <__gethex+0x2a4>
 801ceea:	ee18 0a10 	vmov	r0, s16
 801ceee:	4621      	mov	r1, r4
 801cef0:	f000 fad6 	bl	801d4a0 <_Bfree>
 801cef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cef6:	2300      	movs	r3, #0
 801cef8:	6013      	str	r3, [r2, #0]
 801cefa:	27a3      	movs	r7, #163	; 0xa3
 801cefc:	e785      	b.n	801ce0a <__gethex+0x12a>
 801cefe:	1e73      	subs	r3, r6, #1
 801cf00:	9a05      	ldr	r2, [sp, #20]
 801cf02:	9303      	str	r3, [sp, #12]
 801cf04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cf08:	4293      	cmp	r3, r2
 801cf0a:	d019      	beq.n	801cf40 <__gethex+0x260>
 801cf0c:	f1bb 0f20 	cmp.w	fp, #32
 801cf10:	d107      	bne.n	801cf22 <__gethex+0x242>
 801cf12:	9b02      	ldr	r3, [sp, #8]
 801cf14:	9a00      	ldr	r2, [sp, #0]
 801cf16:	f843 2b04 	str.w	r2, [r3], #4
 801cf1a:	9302      	str	r3, [sp, #8]
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	9300      	str	r3, [sp, #0]
 801cf20:	469b      	mov	fp, r3
 801cf22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801cf26:	f7ff fec5 	bl	801ccb4 <__hexdig_fun>
 801cf2a:	9b00      	ldr	r3, [sp, #0]
 801cf2c:	f000 000f 	and.w	r0, r0, #15
 801cf30:	fa00 f00b 	lsl.w	r0, r0, fp
 801cf34:	4303      	orrs	r3, r0
 801cf36:	9300      	str	r3, [sp, #0]
 801cf38:	f10b 0b04 	add.w	fp, fp, #4
 801cf3c:	9b03      	ldr	r3, [sp, #12]
 801cf3e:	e00d      	b.n	801cf5c <__gethex+0x27c>
 801cf40:	9b03      	ldr	r3, [sp, #12]
 801cf42:	9a06      	ldr	r2, [sp, #24]
 801cf44:	4413      	add	r3, r2
 801cf46:	42bb      	cmp	r3, r7
 801cf48:	d3e0      	bcc.n	801cf0c <__gethex+0x22c>
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	9901      	ldr	r1, [sp, #4]
 801cf4e:	9307      	str	r3, [sp, #28]
 801cf50:	4652      	mov	r2, sl
 801cf52:	f7fd fe8a 	bl	801ac6a <strncmp>
 801cf56:	9b07      	ldr	r3, [sp, #28]
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	d1d7      	bne.n	801cf0c <__gethex+0x22c>
 801cf5c:	461e      	mov	r6, r3
 801cf5e:	e78b      	b.n	801ce78 <__gethex+0x198>
 801cf60:	f04f 0a03 	mov.w	sl, #3
 801cf64:	e7b8      	b.n	801ced8 <__gethex+0x1f8>
 801cf66:	da0a      	bge.n	801cf7e <__gethex+0x29e>
 801cf68:	1a37      	subs	r7, r6, r0
 801cf6a:	4621      	mov	r1, r4
 801cf6c:	ee18 0a10 	vmov	r0, s16
 801cf70:	463a      	mov	r2, r7
 801cf72:	f000 fcb1 	bl	801d8d8 <__lshift>
 801cf76:	1bed      	subs	r5, r5, r7
 801cf78:	4604      	mov	r4, r0
 801cf7a:	f100 0914 	add.w	r9, r0, #20
 801cf7e:	f04f 0a00 	mov.w	sl, #0
 801cf82:	e7ae      	b.n	801cee2 <__gethex+0x202>
 801cf84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cf88:	42a8      	cmp	r0, r5
 801cf8a:	dd72      	ble.n	801d072 <__gethex+0x392>
 801cf8c:	1b45      	subs	r5, r0, r5
 801cf8e:	42ae      	cmp	r6, r5
 801cf90:	dc36      	bgt.n	801d000 <__gethex+0x320>
 801cf92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cf96:	2b02      	cmp	r3, #2
 801cf98:	d02a      	beq.n	801cff0 <__gethex+0x310>
 801cf9a:	2b03      	cmp	r3, #3
 801cf9c:	d02c      	beq.n	801cff8 <__gethex+0x318>
 801cf9e:	2b01      	cmp	r3, #1
 801cfa0:	d115      	bne.n	801cfce <__gethex+0x2ee>
 801cfa2:	42ae      	cmp	r6, r5
 801cfa4:	d113      	bne.n	801cfce <__gethex+0x2ee>
 801cfa6:	2e01      	cmp	r6, #1
 801cfa8:	d10b      	bne.n	801cfc2 <__gethex+0x2e2>
 801cfaa:	9a04      	ldr	r2, [sp, #16]
 801cfac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cfb0:	6013      	str	r3, [r2, #0]
 801cfb2:	2301      	movs	r3, #1
 801cfb4:	6123      	str	r3, [r4, #16]
 801cfb6:	f8c9 3000 	str.w	r3, [r9]
 801cfba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cfbc:	2762      	movs	r7, #98	; 0x62
 801cfbe:	601c      	str	r4, [r3, #0]
 801cfc0:	e723      	b.n	801ce0a <__gethex+0x12a>
 801cfc2:	1e71      	subs	r1, r6, #1
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	f000 fec5 	bl	801dd54 <__any_on>
 801cfca:	2800      	cmp	r0, #0
 801cfcc:	d1ed      	bne.n	801cfaa <__gethex+0x2ca>
 801cfce:	ee18 0a10 	vmov	r0, s16
 801cfd2:	4621      	mov	r1, r4
 801cfd4:	f000 fa64 	bl	801d4a0 <_Bfree>
 801cfd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cfda:	2300      	movs	r3, #0
 801cfdc:	6013      	str	r3, [r2, #0]
 801cfde:	2750      	movs	r7, #80	; 0x50
 801cfe0:	e713      	b.n	801ce0a <__gethex+0x12a>
 801cfe2:	bf00      	nop
 801cfe4:	08020d0c 	.word	0x08020d0c
 801cfe8:	08020c8f 	.word	0x08020c8f
 801cfec:	08020ca0 	.word	0x08020ca0
 801cff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d1eb      	bne.n	801cfce <__gethex+0x2ee>
 801cff6:	e7d8      	b.n	801cfaa <__gethex+0x2ca>
 801cff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d1d5      	bne.n	801cfaa <__gethex+0x2ca>
 801cffe:	e7e6      	b.n	801cfce <__gethex+0x2ee>
 801d000:	1e6f      	subs	r7, r5, #1
 801d002:	f1ba 0f00 	cmp.w	sl, #0
 801d006:	d131      	bne.n	801d06c <__gethex+0x38c>
 801d008:	b127      	cbz	r7, 801d014 <__gethex+0x334>
 801d00a:	4639      	mov	r1, r7
 801d00c:	4620      	mov	r0, r4
 801d00e:	f000 fea1 	bl	801dd54 <__any_on>
 801d012:	4682      	mov	sl, r0
 801d014:	117b      	asrs	r3, r7, #5
 801d016:	2101      	movs	r1, #1
 801d018:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d01c:	f007 071f 	and.w	r7, r7, #31
 801d020:	fa01 f707 	lsl.w	r7, r1, r7
 801d024:	421f      	tst	r7, r3
 801d026:	4629      	mov	r1, r5
 801d028:	4620      	mov	r0, r4
 801d02a:	bf18      	it	ne
 801d02c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d030:	1b76      	subs	r6, r6, r5
 801d032:	f7ff fded 	bl	801cc10 <rshift>
 801d036:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d03a:	2702      	movs	r7, #2
 801d03c:	f1ba 0f00 	cmp.w	sl, #0
 801d040:	d048      	beq.n	801d0d4 <__gethex+0x3f4>
 801d042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d046:	2b02      	cmp	r3, #2
 801d048:	d015      	beq.n	801d076 <__gethex+0x396>
 801d04a:	2b03      	cmp	r3, #3
 801d04c:	d017      	beq.n	801d07e <__gethex+0x39e>
 801d04e:	2b01      	cmp	r3, #1
 801d050:	d109      	bne.n	801d066 <__gethex+0x386>
 801d052:	f01a 0f02 	tst.w	sl, #2
 801d056:	d006      	beq.n	801d066 <__gethex+0x386>
 801d058:	f8d9 0000 	ldr.w	r0, [r9]
 801d05c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d060:	f01a 0f01 	tst.w	sl, #1
 801d064:	d10e      	bne.n	801d084 <__gethex+0x3a4>
 801d066:	f047 0710 	orr.w	r7, r7, #16
 801d06a:	e033      	b.n	801d0d4 <__gethex+0x3f4>
 801d06c:	f04f 0a01 	mov.w	sl, #1
 801d070:	e7d0      	b.n	801d014 <__gethex+0x334>
 801d072:	2701      	movs	r7, #1
 801d074:	e7e2      	b.n	801d03c <__gethex+0x35c>
 801d076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d078:	f1c3 0301 	rsb	r3, r3, #1
 801d07c:	9315      	str	r3, [sp, #84]	; 0x54
 801d07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d080:	2b00      	cmp	r3, #0
 801d082:	d0f0      	beq.n	801d066 <__gethex+0x386>
 801d084:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d088:	f104 0314 	add.w	r3, r4, #20
 801d08c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d090:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d094:	f04f 0c00 	mov.w	ip, #0
 801d098:	4618      	mov	r0, r3
 801d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d09e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d0a2:	d01c      	beq.n	801d0de <__gethex+0x3fe>
 801d0a4:	3201      	adds	r2, #1
 801d0a6:	6002      	str	r2, [r0, #0]
 801d0a8:	2f02      	cmp	r7, #2
 801d0aa:	f104 0314 	add.w	r3, r4, #20
 801d0ae:	d13f      	bne.n	801d130 <__gethex+0x450>
 801d0b0:	f8d8 2000 	ldr.w	r2, [r8]
 801d0b4:	3a01      	subs	r2, #1
 801d0b6:	42b2      	cmp	r2, r6
 801d0b8:	d10a      	bne.n	801d0d0 <__gethex+0x3f0>
 801d0ba:	1171      	asrs	r1, r6, #5
 801d0bc:	2201      	movs	r2, #1
 801d0be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d0c2:	f006 061f 	and.w	r6, r6, #31
 801d0c6:	fa02 f606 	lsl.w	r6, r2, r6
 801d0ca:	421e      	tst	r6, r3
 801d0cc:	bf18      	it	ne
 801d0ce:	4617      	movne	r7, r2
 801d0d0:	f047 0720 	orr.w	r7, r7, #32
 801d0d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d0d6:	601c      	str	r4, [r3, #0]
 801d0d8:	9b04      	ldr	r3, [sp, #16]
 801d0da:	601d      	str	r5, [r3, #0]
 801d0dc:	e695      	b.n	801ce0a <__gethex+0x12a>
 801d0de:	4299      	cmp	r1, r3
 801d0e0:	f843 cc04 	str.w	ip, [r3, #-4]
 801d0e4:	d8d8      	bhi.n	801d098 <__gethex+0x3b8>
 801d0e6:	68a3      	ldr	r3, [r4, #8]
 801d0e8:	459b      	cmp	fp, r3
 801d0ea:	db19      	blt.n	801d120 <__gethex+0x440>
 801d0ec:	6861      	ldr	r1, [r4, #4]
 801d0ee:	ee18 0a10 	vmov	r0, s16
 801d0f2:	3101      	adds	r1, #1
 801d0f4:	f000 f994 	bl	801d420 <_Balloc>
 801d0f8:	4681      	mov	r9, r0
 801d0fa:	b918      	cbnz	r0, 801d104 <__gethex+0x424>
 801d0fc:	4b1a      	ldr	r3, [pc, #104]	; (801d168 <__gethex+0x488>)
 801d0fe:	4602      	mov	r2, r0
 801d100:	2184      	movs	r1, #132	; 0x84
 801d102:	e6a8      	b.n	801ce56 <__gethex+0x176>
 801d104:	6922      	ldr	r2, [r4, #16]
 801d106:	3202      	adds	r2, #2
 801d108:	f104 010c 	add.w	r1, r4, #12
 801d10c:	0092      	lsls	r2, r2, #2
 801d10e:	300c      	adds	r0, #12
 801d110:	f7fc fc6c 	bl	80199ec <memcpy>
 801d114:	4621      	mov	r1, r4
 801d116:	ee18 0a10 	vmov	r0, s16
 801d11a:	f000 f9c1 	bl	801d4a0 <_Bfree>
 801d11e:	464c      	mov	r4, r9
 801d120:	6923      	ldr	r3, [r4, #16]
 801d122:	1c5a      	adds	r2, r3, #1
 801d124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d128:	6122      	str	r2, [r4, #16]
 801d12a:	2201      	movs	r2, #1
 801d12c:	615a      	str	r2, [r3, #20]
 801d12e:	e7bb      	b.n	801d0a8 <__gethex+0x3c8>
 801d130:	6922      	ldr	r2, [r4, #16]
 801d132:	455a      	cmp	r2, fp
 801d134:	dd0b      	ble.n	801d14e <__gethex+0x46e>
 801d136:	2101      	movs	r1, #1
 801d138:	4620      	mov	r0, r4
 801d13a:	f7ff fd69 	bl	801cc10 <rshift>
 801d13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d142:	3501      	adds	r5, #1
 801d144:	42ab      	cmp	r3, r5
 801d146:	f6ff aed0 	blt.w	801ceea <__gethex+0x20a>
 801d14a:	2701      	movs	r7, #1
 801d14c:	e7c0      	b.n	801d0d0 <__gethex+0x3f0>
 801d14e:	f016 061f 	ands.w	r6, r6, #31
 801d152:	d0fa      	beq.n	801d14a <__gethex+0x46a>
 801d154:	449a      	add	sl, r3
 801d156:	f1c6 0620 	rsb	r6, r6, #32
 801d15a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d15e:	f000 fa55 	bl	801d60c <__hi0bits>
 801d162:	42b0      	cmp	r0, r6
 801d164:	dbe7      	blt.n	801d136 <__gethex+0x456>
 801d166:	e7f0      	b.n	801d14a <__gethex+0x46a>
 801d168:	08020c8f 	.word	0x08020c8f

0801d16c <L_shift>:
 801d16c:	f1c2 0208 	rsb	r2, r2, #8
 801d170:	0092      	lsls	r2, r2, #2
 801d172:	b570      	push	{r4, r5, r6, lr}
 801d174:	f1c2 0620 	rsb	r6, r2, #32
 801d178:	6843      	ldr	r3, [r0, #4]
 801d17a:	6804      	ldr	r4, [r0, #0]
 801d17c:	fa03 f506 	lsl.w	r5, r3, r6
 801d180:	432c      	orrs	r4, r5
 801d182:	40d3      	lsrs	r3, r2
 801d184:	6004      	str	r4, [r0, #0]
 801d186:	f840 3f04 	str.w	r3, [r0, #4]!
 801d18a:	4288      	cmp	r0, r1
 801d18c:	d3f4      	bcc.n	801d178 <L_shift+0xc>
 801d18e:	bd70      	pop	{r4, r5, r6, pc}

0801d190 <__match>:
 801d190:	b530      	push	{r4, r5, lr}
 801d192:	6803      	ldr	r3, [r0, #0]
 801d194:	3301      	adds	r3, #1
 801d196:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d19a:	b914      	cbnz	r4, 801d1a2 <__match+0x12>
 801d19c:	6003      	str	r3, [r0, #0]
 801d19e:	2001      	movs	r0, #1
 801d1a0:	bd30      	pop	{r4, r5, pc}
 801d1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d1aa:	2d19      	cmp	r5, #25
 801d1ac:	bf98      	it	ls
 801d1ae:	3220      	addls	r2, #32
 801d1b0:	42a2      	cmp	r2, r4
 801d1b2:	d0f0      	beq.n	801d196 <__match+0x6>
 801d1b4:	2000      	movs	r0, #0
 801d1b6:	e7f3      	b.n	801d1a0 <__match+0x10>

0801d1b8 <__hexnan>:
 801d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1bc:	680b      	ldr	r3, [r1, #0]
 801d1be:	6801      	ldr	r1, [r0, #0]
 801d1c0:	115e      	asrs	r6, r3, #5
 801d1c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d1c6:	f013 031f 	ands.w	r3, r3, #31
 801d1ca:	b087      	sub	sp, #28
 801d1cc:	bf18      	it	ne
 801d1ce:	3604      	addne	r6, #4
 801d1d0:	2500      	movs	r5, #0
 801d1d2:	1f37      	subs	r7, r6, #4
 801d1d4:	4682      	mov	sl, r0
 801d1d6:	4690      	mov	r8, r2
 801d1d8:	9301      	str	r3, [sp, #4]
 801d1da:	f846 5c04 	str.w	r5, [r6, #-4]
 801d1de:	46b9      	mov	r9, r7
 801d1e0:	463c      	mov	r4, r7
 801d1e2:	9502      	str	r5, [sp, #8]
 801d1e4:	46ab      	mov	fp, r5
 801d1e6:	784a      	ldrb	r2, [r1, #1]
 801d1e8:	1c4b      	adds	r3, r1, #1
 801d1ea:	9303      	str	r3, [sp, #12]
 801d1ec:	b342      	cbz	r2, 801d240 <__hexnan+0x88>
 801d1ee:	4610      	mov	r0, r2
 801d1f0:	9105      	str	r1, [sp, #20]
 801d1f2:	9204      	str	r2, [sp, #16]
 801d1f4:	f7ff fd5e 	bl	801ccb4 <__hexdig_fun>
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	d14f      	bne.n	801d29c <__hexnan+0xe4>
 801d1fc:	9a04      	ldr	r2, [sp, #16]
 801d1fe:	9905      	ldr	r1, [sp, #20]
 801d200:	2a20      	cmp	r2, #32
 801d202:	d818      	bhi.n	801d236 <__hexnan+0x7e>
 801d204:	9b02      	ldr	r3, [sp, #8]
 801d206:	459b      	cmp	fp, r3
 801d208:	dd13      	ble.n	801d232 <__hexnan+0x7a>
 801d20a:	454c      	cmp	r4, r9
 801d20c:	d206      	bcs.n	801d21c <__hexnan+0x64>
 801d20e:	2d07      	cmp	r5, #7
 801d210:	dc04      	bgt.n	801d21c <__hexnan+0x64>
 801d212:	462a      	mov	r2, r5
 801d214:	4649      	mov	r1, r9
 801d216:	4620      	mov	r0, r4
 801d218:	f7ff ffa8 	bl	801d16c <L_shift>
 801d21c:	4544      	cmp	r4, r8
 801d21e:	d950      	bls.n	801d2c2 <__hexnan+0x10a>
 801d220:	2300      	movs	r3, #0
 801d222:	f1a4 0904 	sub.w	r9, r4, #4
 801d226:	f844 3c04 	str.w	r3, [r4, #-4]
 801d22a:	f8cd b008 	str.w	fp, [sp, #8]
 801d22e:	464c      	mov	r4, r9
 801d230:	461d      	mov	r5, r3
 801d232:	9903      	ldr	r1, [sp, #12]
 801d234:	e7d7      	b.n	801d1e6 <__hexnan+0x2e>
 801d236:	2a29      	cmp	r2, #41	; 0x29
 801d238:	d156      	bne.n	801d2e8 <__hexnan+0x130>
 801d23a:	3102      	adds	r1, #2
 801d23c:	f8ca 1000 	str.w	r1, [sl]
 801d240:	f1bb 0f00 	cmp.w	fp, #0
 801d244:	d050      	beq.n	801d2e8 <__hexnan+0x130>
 801d246:	454c      	cmp	r4, r9
 801d248:	d206      	bcs.n	801d258 <__hexnan+0xa0>
 801d24a:	2d07      	cmp	r5, #7
 801d24c:	dc04      	bgt.n	801d258 <__hexnan+0xa0>
 801d24e:	462a      	mov	r2, r5
 801d250:	4649      	mov	r1, r9
 801d252:	4620      	mov	r0, r4
 801d254:	f7ff ff8a 	bl	801d16c <L_shift>
 801d258:	4544      	cmp	r4, r8
 801d25a:	d934      	bls.n	801d2c6 <__hexnan+0x10e>
 801d25c:	f1a8 0204 	sub.w	r2, r8, #4
 801d260:	4623      	mov	r3, r4
 801d262:	f853 1b04 	ldr.w	r1, [r3], #4
 801d266:	f842 1f04 	str.w	r1, [r2, #4]!
 801d26a:	429f      	cmp	r7, r3
 801d26c:	d2f9      	bcs.n	801d262 <__hexnan+0xaa>
 801d26e:	1b3b      	subs	r3, r7, r4
 801d270:	f023 0303 	bic.w	r3, r3, #3
 801d274:	3304      	adds	r3, #4
 801d276:	3401      	adds	r4, #1
 801d278:	3e03      	subs	r6, #3
 801d27a:	42b4      	cmp	r4, r6
 801d27c:	bf88      	it	hi
 801d27e:	2304      	movhi	r3, #4
 801d280:	4443      	add	r3, r8
 801d282:	2200      	movs	r2, #0
 801d284:	f843 2b04 	str.w	r2, [r3], #4
 801d288:	429f      	cmp	r7, r3
 801d28a:	d2fb      	bcs.n	801d284 <__hexnan+0xcc>
 801d28c:	683b      	ldr	r3, [r7, #0]
 801d28e:	b91b      	cbnz	r3, 801d298 <__hexnan+0xe0>
 801d290:	4547      	cmp	r7, r8
 801d292:	d127      	bne.n	801d2e4 <__hexnan+0x12c>
 801d294:	2301      	movs	r3, #1
 801d296:	603b      	str	r3, [r7, #0]
 801d298:	2005      	movs	r0, #5
 801d29a:	e026      	b.n	801d2ea <__hexnan+0x132>
 801d29c:	3501      	adds	r5, #1
 801d29e:	2d08      	cmp	r5, #8
 801d2a0:	f10b 0b01 	add.w	fp, fp, #1
 801d2a4:	dd06      	ble.n	801d2b4 <__hexnan+0xfc>
 801d2a6:	4544      	cmp	r4, r8
 801d2a8:	d9c3      	bls.n	801d232 <__hexnan+0x7a>
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	f844 3c04 	str.w	r3, [r4, #-4]
 801d2b0:	2501      	movs	r5, #1
 801d2b2:	3c04      	subs	r4, #4
 801d2b4:	6822      	ldr	r2, [r4, #0]
 801d2b6:	f000 000f 	and.w	r0, r0, #15
 801d2ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d2be:	6022      	str	r2, [r4, #0]
 801d2c0:	e7b7      	b.n	801d232 <__hexnan+0x7a>
 801d2c2:	2508      	movs	r5, #8
 801d2c4:	e7b5      	b.n	801d232 <__hexnan+0x7a>
 801d2c6:	9b01      	ldr	r3, [sp, #4]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d0df      	beq.n	801d28c <__hexnan+0xd4>
 801d2cc:	f04f 32ff 	mov.w	r2, #4294967295
 801d2d0:	f1c3 0320 	rsb	r3, r3, #32
 801d2d4:	fa22 f303 	lsr.w	r3, r2, r3
 801d2d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d2dc:	401a      	ands	r2, r3
 801d2de:	f846 2c04 	str.w	r2, [r6, #-4]
 801d2e2:	e7d3      	b.n	801d28c <__hexnan+0xd4>
 801d2e4:	3f04      	subs	r7, #4
 801d2e6:	e7d1      	b.n	801d28c <__hexnan+0xd4>
 801d2e8:	2004      	movs	r0, #4
 801d2ea:	b007      	add	sp, #28
 801d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2f0 <_localeconv_r>:
 801d2f0:	4800      	ldr	r0, [pc, #0]	; (801d2f4 <_localeconv_r+0x4>)
 801d2f2:	4770      	bx	lr
 801d2f4:	20000358 	.word	0x20000358

0801d2f8 <_lseek_r>:
 801d2f8:	b538      	push	{r3, r4, r5, lr}
 801d2fa:	4d07      	ldr	r5, [pc, #28]	; (801d318 <_lseek_r+0x20>)
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	4608      	mov	r0, r1
 801d300:	4611      	mov	r1, r2
 801d302:	2200      	movs	r2, #0
 801d304:	602a      	str	r2, [r5, #0]
 801d306:	461a      	mov	r2, r3
 801d308:	f7e5 ffde 	bl	80032c8 <_lseek>
 801d30c:	1c43      	adds	r3, r0, #1
 801d30e:	d102      	bne.n	801d316 <_lseek_r+0x1e>
 801d310:	682b      	ldr	r3, [r5, #0]
 801d312:	b103      	cbz	r3, 801d316 <_lseek_r+0x1e>
 801d314:	6023      	str	r3, [r4, #0]
 801d316:	bd38      	pop	{r3, r4, r5, pc}
 801d318:	20008e5c 	.word	0x20008e5c

0801d31c <__swhatbuf_r>:
 801d31c:	b570      	push	{r4, r5, r6, lr}
 801d31e:	460e      	mov	r6, r1
 801d320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d324:	2900      	cmp	r1, #0
 801d326:	b096      	sub	sp, #88	; 0x58
 801d328:	4614      	mov	r4, r2
 801d32a:	461d      	mov	r5, r3
 801d32c:	da07      	bge.n	801d33e <__swhatbuf_r+0x22>
 801d32e:	2300      	movs	r3, #0
 801d330:	602b      	str	r3, [r5, #0]
 801d332:	89b3      	ldrh	r3, [r6, #12]
 801d334:	061a      	lsls	r2, r3, #24
 801d336:	d410      	bmi.n	801d35a <__swhatbuf_r+0x3e>
 801d338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d33c:	e00e      	b.n	801d35c <__swhatbuf_r+0x40>
 801d33e:	466a      	mov	r2, sp
 801d340:	f001 fbc6 	bl	801ead0 <_fstat_r>
 801d344:	2800      	cmp	r0, #0
 801d346:	dbf2      	blt.n	801d32e <__swhatbuf_r+0x12>
 801d348:	9a01      	ldr	r2, [sp, #4]
 801d34a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d34e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d352:	425a      	negs	r2, r3
 801d354:	415a      	adcs	r2, r3
 801d356:	602a      	str	r2, [r5, #0]
 801d358:	e7ee      	b.n	801d338 <__swhatbuf_r+0x1c>
 801d35a:	2340      	movs	r3, #64	; 0x40
 801d35c:	2000      	movs	r0, #0
 801d35e:	6023      	str	r3, [r4, #0]
 801d360:	b016      	add	sp, #88	; 0x58
 801d362:	bd70      	pop	{r4, r5, r6, pc}

0801d364 <__smakebuf_r>:
 801d364:	898b      	ldrh	r3, [r1, #12]
 801d366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d368:	079d      	lsls	r5, r3, #30
 801d36a:	4606      	mov	r6, r0
 801d36c:	460c      	mov	r4, r1
 801d36e:	d507      	bpl.n	801d380 <__smakebuf_r+0x1c>
 801d370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d374:	6023      	str	r3, [r4, #0]
 801d376:	6123      	str	r3, [r4, #16]
 801d378:	2301      	movs	r3, #1
 801d37a:	6163      	str	r3, [r4, #20]
 801d37c:	b002      	add	sp, #8
 801d37e:	bd70      	pop	{r4, r5, r6, pc}
 801d380:	ab01      	add	r3, sp, #4
 801d382:	466a      	mov	r2, sp
 801d384:	f7ff ffca 	bl	801d31c <__swhatbuf_r>
 801d388:	9900      	ldr	r1, [sp, #0]
 801d38a:	4605      	mov	r5, r0
 801d38c:	4630      	mov	r0, r6
 801d38e:	f7fc fbad 	bl	8019aec <_malloc_r>
 801d392:	b948      	cbnz	r0, 801d3a8 <__smakebuf_r+0x44>
 801d394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d398:	059a      	lsls	r2, r3, #22
 801d39a:	d4ef      	bmi.n	801d37c <__smakebuf_r+0x18>
 801d39c:	f023 0303 	bic.w	r3, r3, #3
 801d3a0:	f043 0302 	orr.w	r3, r3, #2
 801d3a4:	81a3      	strh	r3, [r4, #12]
 801d3a6:	e7e3      	b.n	801d370 <__smakebuf_r+0xc>
 801d3a8:	4b0d      	ldr	r3, [pc, #52]	; (801d3e0 <__smakebuf_r+0x7c>)
 801d3aa:	62b3      	str	r3, [r6, #40]	; 0x28
 801d3ac:	89a3      	ldrh	r3, [r4, #12]
 801d3ae:	6020      	str	r0, [r4, #0]
 801d3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3b4:	81a3      	strh	r3, [r4, #12]
 801d3b6:	9b00      	ldr	r3, [sp, #0]
 801d3b8:	6163      	str	r3, [r4, #20]
 801d3ba:	9b01      	ldr	r3, [sp, #4]
 801d3bc:	6120      	str	r0, [r4, #16]
 801d3be:	b15b      	cbz	r3, 801d3d8 <__smakebuf_r+0x74>
 801d3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d3c4:	4630      	mov	r0, r6
 801d3c6:	f001 fb95 	bl	801eaf4 <_isatty_r>
 801d3ca:	b128      	cbz	r0, 801d3d8 <__smakebuf_r+0x74>
 801d3cc:	89a3      	ldrh	r3, [r4, #12]
 801d3ce:	f023 0303 	bic.w	r3, r3, #3
 801d3d2:	f043 0301 	orr.w	r3, r3, #1
 801d3d6:	81a3      	strh	r3, [r4, #12]
 801d3d8:	89a0      	ldrh	r0, [r4, #12]
 801d3da:	4305      	orrs	r5, r0
 801d3dc:	81a5      	strh	r5, [r4, #12]
 801d3de:	e7cd      	b.n	801d37c <__smakebuf_r+0x18>
 801d3e0:	080197e9 	.word	0x080197e9

0801d3e4 <__ascii_mbtowc>:
 801d3e4:	b082      	sub	sp, #8
 801d3e6:	b901      	cbnz	r1, 801d3ea <__ascii_mbtowc+0x6>
 801d3e8:	a901      	add	r1, sp, #4
 801d3ea:	b142      	cbz	r2, 801d3fe <__ascii_mbtowc+0x1a>
 801d3ec:	b14b      	cbz	r3, 801d402 <__ascii_mbtowc+0x1e>
 801d3ee:	7813      	ldrb	r3, [r2, #0]
 801d3f0:	600b      	str	r3, [r1, #0]
 801d3f2:	7812      	ldrb	r2, [r2, #0]
 801d3f4:	1e10      	subs	r0, r2, #0
 801d3f6:	bf18      	it	ne
 801d3f8:	2001      	movne	r0, #1
 801d3fa:	b002      	add	sp, #8
 801d3fc:	4770      	bx	lr
 801d3fe:	4610      	mov	r0, r2
 801d400:	e7fb      	b.n	801d3fa <__ascii_mbtowc+0x16>
 801d402:	f06f 0001 	mvn.w	r0, #1
 801d406:	e7f8      	b.n	801d3fa <__ascii_mbtowc+0x16>

0801d408 <__malloc_lock>:
 801d408:	4801      	ldr	r0, [pc, #4]	; (801d410 <__malloc_lock+0x8>)
 801d40a:	f7fc bae4 	b.w	80199d6 <__retarget_lock_acquire_recursive>
 801d40e:	bf00      	nop
 801d410:	20008e54 	.word	0x20008e54

0801d414 <__malloc_unlock>:
 801d414:	4801      	ldr	r0, [pc, #4]	; (801d41c <__malloc_unlock+0x8>)
 801d416:	f7fc badf 	b.w	80199d8 <__retarget_lock_release_recursive>
 801d41a:	bf00      	nop
 801d41c:	20008e54 	.word	0x20008e54

0801d420 <_Balloc>:
 801d420:	b570      	push	{r4, r5, r6, lr}
 801d422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d424:	4604      	mov	r4, r0
 801d426:	460d      	mov	r5, r1
 801d428:	b976      	cbnz	r6, 801d448 <_Balloc+0x28>
 801d42a:	2010      	movs	r0, #16
 801d42c:	f7fc fad6 	bl	80199dc <malloc>
 801d430:	4602      	mov	r2, r0
 801d432:	6260      	str	r0, [r4, #36]	; 0x24
 801d434:	b920      	cbnz	r0, 801d440 <_Balloc+0x20>
 801d436:	4b18      	ldr	r3, [pc, #96]	; (801d498 <_Balloc+0x78>)
 801d438:	4818      	ldr	r0, [pc, #96]	; (801d49c <_Balloc+0x7c>)
 801d43a:	2166      	movs	r1, #102	; 0x66
 801d43c:	f7fe fc6e 	bl	801bd1c <__assert_func>
 801d440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d444:	6006      	str	r6, [r0, #0]
 801d446:	60c6      	str	r6, [r0, #12]
 801d448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d44a:	68f3      	ldr	r3, [r6, #12]
 801d44c:	b183      	cbz	r3, 801d470 <_Balloc+0x50>
 801d44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d450:	68db      	ldr	r3, [r3, #12]
 801d452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d456:	b9b8      	cbnz	r0, 801d488 <_Balloc+0x68>
 801d458:	2101      	movs	r1, #1
 801d45a:	fa01 f605 	lsl.w	r6, r1, r5
 801d45e:	1d72      	adds	r2, r6, #5
 801d460:	0092      	lsls	r2, r2, #2
 801d462:	4620      	mov	r0, r4
 801d464:	f000 fc97 	bl	801dd96 <_calloc_r>
 801d468:	b160      	cbz	r0, 801d484 <_Balloc+0x64>
 801d46a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d46e:	e00e      	b.n	801d48e <_Balloc+0x6e>
 801d470:	2221      	movs	r2, #33	; 0x21
 801d472:	2104      	movs	r1, #4
 801d474:	4620      	mov	r0, r4
 801d476:	f000 fc8e 	bl	801dd96 <_calloc_r>
 801d47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d47c:	60f0      	str	r0, [r6, #12]
 801d47e:	68db      	ldr	r3, [r3, #12]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d1e4      	bne.n	801d44e <_Balloc+0x2e>
 801d484:	2000      	movs	r0, #0
 801d486:	bd70      	pop	{r4, r5, r6, pc}
 801d488:	6802      	ldr	r2, [r0, #0]
 801d48a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d48e:	2300      	movs	r3, #0
 801d490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d494:	e7f7      	b.n	801d486 <_Balloc+0x66>
 801d496:	bf00      	nop
 801d498:	08020c19 	.word	0x08020c19
 801d49c:	08020d20 	.word	0x08020d20

0801d4a0 <_Bfree>:
 801d4a0:	b570      	push	{r4, r5, r6, lr}
 801d4a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d4a4:	4605      	mov	r5, r0
 801d4a6:	460c      	mov	r4, r1
 801d4a8:	b976      	cbnz	r6, 801d4c8 <_Bfree+0x28>
 801d4aa:	2010      	movs	r0, #16
 801d4ac:	f7fc fa96 	bl	80199dc <malloc>
 801d4b0:	4602      	mov	r2, r0
 801d4b2:	6268      	str	r0, [r5, #36]	; 0x24
 801d4b4:	b920      	cbnz	r0, 801d4c0 <_Bfree+0x20>
 801d4b6:	4b09      	ldr	r3, [pc, #36]	; (801d4dc <_Bfree+0x3c>)
 801d4b8:	4809      	ldr	r0, [pc, #36]	; (801d4e0 <_Bfree+0x40>)
 801d4ba:	218a      	movs	r1, #138	; 0x8a
 801d4bc:	f7fe fc2e 	bl	801bd1c <__assert_func>
 801d4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d4c4:	6006      	str	r6, [r0, #0]
 801d4c6:	60c6      	str	r6, [r0, #12]
 801d4c8:	b13c      	cbz	r4, 801d4da <_Bfree+0x3a>
 801d4ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d4cc:	6862      	ldr	r2, [r4, #4]
 801d4ce:	68db      	ldr	r3, [r3, #12]
 801d4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d4d4:	6021      	str	r1, [r4, #0]
 801d4d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d4da:	bd70      	pop	{r4, r5, r6, pc}
 801d4dc:	08020c19 	.word	0x08020c19
 801d4e0:	08020d20 	.word	0x08020d20

0801d4e4 <__multadd>:
 801d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4e8:	690e      	ldr	r6, [r1, #16]
 801d4ea:	4607      	mov	r7, r0
 801d4ec:	4698      	mov	r8, r3
 801d4ee:	460c      	mov	r4, r1
 801d4f0:	f101 0014 	add.w	r0, r1, #20
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	6805      	ldr	r5, [r0, #0]
 801d4f8:	b2a9      	uxth	r1, r5
 801d4fa:	fb02 8101 	mla	r1, r2, r1, r8
 801d4fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d502:	0c2d      	lsrs	r5, r5, #16
 801d504:	fb02 c505 	mla	r5, r2, r5, ip
 801d508:	b289      	uxth	r1, r1
 801d50a:	3301      	adds	r3, #1
 801d50c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d510:	429e      	cmp	r6, r3
 801d512:	f840 1b04 	str.w	r1, [r0], #4
 801d516:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d51a:	dcec      	bgt.n	801d4f6 <__multadd+0x12>
 801d51c:	f1b8 0f00 	cmp.w	r8, #0
 801d520:	d022      	beq.n	801d568 <__multadd+0x84>
 801d522:	68a3      	ldr	r3, [r4, #8]
 801d524:	42b3      	cmp	r3, r6
 801d526:	dc19      	bgt.n	801d55c <__multadd+0x78>
 801d528:	6861      	ldr	r1, [r4, #4]
 801d52a:	4638      	mov	r0, r7
 801d52c:	3101      	adds	r1, #1
 801d52e:	f7ff ff77 	bl	801d420 <_Balloc>
 801d532:	4605      	mov	r5, r0
 801d534:	b928      	cbnz	r0, 801d542 <__multadd+0x5e>
 801d536:	4602      	mov	r2, r0
 801d538:	4b0d      	ldr	r3, [pc, #52]	; (801d570 <__multadd+0x8c>)
 801d53a:	480e      	ldr	r0, [pc, #56]	; (801d574 <__multadd+0x90>)
 801d53c:	21b5      	movs	r1, #181	; 0xb5
 801d53e:	f7fe fbed 	bl	801bd1c <__assert_func>
 801d542:	6922      	ldr	r2, [r4, #16]
 801d544:	3202      	adds	r2, #2
 801d546:	f104 010c 	add.w	r1, r4, #12
 801d54a:	0092      	lsls	r2, r2, #2
 801d54c:	300c      	adds	r0, #12
 801d54e:	f7fc fa4d 	bl	80199ec <memcpy>
 801d552:	4621      	mov	r1, r4
 801d554:	4638      	mov	r0, r7
 801d556:	f7ff ffa3 	bl	801d4a0 <_Bfree>
 801d55a:	462c      	mov	r4, r5
 801d55c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d560:	3601      	adds	r6, #1
 801d562:	f8c3 8014 	str.w	r8, [r3, #20]
 801d566:	6126      	str	r6, [r4, #16]
 801d568:	4620      	mov	r0, r4
 801d56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d56e:	bf00      	nop
 801d570:	08020c8f 	.word	0x08020c8f
 801d574:	08020d20 	.word	0x08020d20

0801d578 <__s2b>:
 801d578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d57c:	460c      	mov	r4, r1
 801d57e:	4615      	mov	r5, r2
 801d580:	461f      	mov	r7, r3
 801d582:	2209      	movs	r2, #9
 801d584:	3308      	adds	r3, #8
 801d586:	4606      	mov	r6, r0
 801d588:	fb93 f3f2 	sdiv	r3, r3, r2
 801d58c:	2100      	movs	r1, #0
 801d58e:	2201      	movs	r2, #1
 801d590:	429a      	cmp	r2, r3
 801d592:	db09      	blt.n	801d5a8 <__s2b+0x30>
 801d594:	4630      	mov	r0, r6
 801d596:	f7ff ff43 	bl	801d420 <_Balloc>
 801d59a:	b940      	cbnz	r0, 801d5ae <__s2b+0x36>
 801d59c:	4602      	mov	r2, r0
 801d59e:	4b19      	ldr	r3, [pc, #100]	; (801d604 <__s2b+0x8c>)
 801d5a0:	4819      	ldr	r0, [pc, #100]	; (801d608 <__s2b+0x90>)
 801d5a2:	21ce      	movs	r1, #206	; 0xce
 801d5a4:	f7fe fbba 	bl	801bd1c <__assert_func>
 801d5a8:	0052      	lsls	r2, r2, #1
 801d5aa:	3101      	adds	r1, #1
 801d5ac:	e7f0      	b.n	801d590 <__s2b+0x18>
 801d5ae:	9b08      	ldr	r3, [sp, #32]
 801d5b0:	6143      	str	r3, [r0, #20]
 801d5b2:	2d09      	cmp	r5, #9
 801d5b4:	f04f 0301 	mov.w	r3, #1
 801d5b8:	6103      	str	r3, [r0, #16]
 801d5ba:	dd16      	ble.n	801d5ea <__s2b+0x72>
 801d5bc:	f104 0909 	add.w	r9, r4, #9
 801d5c0:	46c8      	mov	r8, r9
 801d5c2:	442c      	add	r4, r5
 801d5c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d5c8:	4601      	mov	r1, r0
 801d5ca:	3b30      	subs	r3, #48	; 0x30
 801d5cc:	220a      	movs	r2, #10
 801d5ce:	4630      	mov	r0, r6
 801d5d0:	f7ff ff88 	bl	801d4e4 <__multadd>
 801d5d4:	45a0      	cmp	r8, r4
 801d5d6:	d1f5      	bne.n	801d5c4 <__s2b+0x4c>
 801d5d8:	f1a5 0408 	sub.w	r4, r5, #8
 801d5dc:	444c      	add	r4, r9
 801d5de:	1b2d      	subs	r5, r5, r4
 801d5e0:	1963      	adds	r3, r4, r5
 801d5e2:	42bb      	cmp	r3, r7
 801d5e4:	db04      	blt.n	801d5f0 <__s2b+0x78>
 801d5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5ea:	340a      	adds	r4, #10
 801d5ec:	2509      	movs	r5, #9
 801d5ee:	e7f6      	b.n	801d5de <__s2b+0x66>
 801d5f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d5f4:	4601      	mov	r1, r0
 801d5f6:	3b30      	subs	r3, #48	; 0x30
 801d5f8:	220a      	movs	r2, #10
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	f7ff ff72 	bl	801d4e4 <__multadd>
 801d600:	e7ee      	b.n	801d5e0 <__s2b+0x68>
 801d602:	bf00      	nop
 801d604:	08020c8f 	.word	0x08020c8f
 801d608:	08020d20 	.word	0x08020d20

0801d60c <__hi0bits>:
 801d60c:	0c03      	lsrs	r3, r0, #16
 801d60e:	041b      	lsls	r3, r3, #16
 801d610:	b9d3      	cbnz	r3, 801d648 <__hi0bits+0x3c>
 801d612:	0400      	lsls	r0, r0, #16
 801d614:	2310      	movs	r3, #16
 801d616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d61a:	bf04      	itt	eq
 801d61c:	0200      	lsleq	r0, r0, #8
 801d61e:	3308      	addeq	r3, #8
 801d620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d624:	bf04      	itt	eq
 801d626:	0100      	lsleq	r0, r0, #4
 801d628:	3304      	addeq	r3, #4
 801d62a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d62e:	bf04      	itt	eq
 801d630:	0080      	lsleq	r0, r0, #2
 801d632:	3302      	addeq	r3, #2
 801d634:	2800      	cmp	r0, #0
 801d636:	db05      	blt.n	801d644 <__hi0bits+0x38>
 801d638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d63c:	f103 0301 	add.w	r3, r3, #1
 801d640:	bf08      	it	eq
 801d642:	2320      	moveq	r3, #32
 801d644:	4618      	mov	r0, r3
 801d646:	4770      	bx	lr
 801d648:	2300      	movs	r3, #0
 801d64a:	e7e4      	b.n	801d616 <__hi0bits+0xa>

0801d64c <__lo0bits>:
 801d64c:	6803      	ldr	r3, [r0, #0]
 801d64e:	f013 0207 	ands.w	r2, r3, #7
 801d652:	4601      	mov	r1, r0
 801d654:	d00b      	beq.n	801d66e <__lo0bits+0x22>
 801d656:	07da      	lsls	r2, r3, #31
 801d658:	d424      	bmi.n	801d6a4 <__lo0bits+0x58>
 801d65a:	0798      	lsls	r0, r3, #30
 801d65c:	bf49      	itett	mi
 801d65e:	085b      	lsrmi	r3, r3, #1
 801d660:	089b      	lsrpl	r3, r3, #2
 801d662:	2001      	movmi	r0, #1
 801d664:	600b      	strmi	r3, [r1, #0]
 801d666:	bf5c      	itt	pl
 801d668:	600b      	strpl	r3, [r1, #0]
 801d66a:	2002      	movpl	r0, #2
 801d66c:	4770      	bx	lr
 801d66e:	b298      	uxth	r0, r3
 801d670:	b9b0      	cbnz	r0, 801d6a0 <__lo0bits+0x54>
 801d672:	0c1b      	lsrs	r3, r3, #16
 801d674:	2010      	movs	r0, #16
 801d676:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d67a:	bf04      	itt	eq
 801d67c:	0a1b      	lsreq	r3, r3, #8
 801d67e:	3008      	addeq	r0, #8
 801d680:	071a      	lsls	r2, r3, #28
 801d682:	bf04      	itt	eq
 801d684:	091b      	lsreq	r3, r3, #4
 801d686:	3004      	addeq	r0, #4
 801d688:	079a      	lsls	r2, r3, #30
 801d68a:	bf04      	itt	eq
 801d68c:	089b      	lsreq	r3, r3, #2
 801d68e:	3002      	addeq	r0, #2
 801d690:	07da      	lsls	r2, r3, #31
 801d692:	d403      	bmi.n	801d69c <__lo0bits+0x50>
 801d694:	085b      	lsrs	r3, r3, #1
 801d696:	f100 0001 	add.w	r0, r0, #1
 801d69a:	d005      	beq.n	801d6a8 <__lo0bits+0x5c>
 801d69c:	600b      	str	r3, [r1, #0]
 801d69e:	4770      	bx	lr
 801d6a0:	4610      	mov	r0, r2
 801d6a2:	e7e8      	b.n	801d676 <__lo0bits+0x2a>
 801d6a4:	2000      	movs	r0, #0
 801d6a6:	4770      	bx	lr
 801d6a8:	2020      	movs	r0, #32
 801d6aa:	4770      	bx	lr

0801d6ac <__i2b>:
 801d6ac:	b510      	push	{r4, lr}
 801d6ae:	460c      	mov	r4, r1
 801d6b0:	2101      	movs	r1, #1
 801d6b2:	f7ff feb5 	bl	801d420 <_Balloc>
 801d6b6:	4602      	mov	r2, r0
 801d6b8:	b928      	cbnz	r0, 801d6c6 <__i2b+0x1a>
 801d6ba:	4b05      	ldr	r3, [pc, #20]	; (801d6d0 <__i2b+0x24>)
 801d6bc:	4805      	ldr	r0, [pc, #20]	; (801d6d4 <__i2b+0x28>)
 801d6be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d6c2:	f7fe fb2b 	bl	801bd1c <__assert_func>
 801d6c6:	2301      	movs	r3, #1
 801d6c8:	6144      	str	r4, [r0, #20]
 801d6ca:	6103      	str	r3, [r0, #16]
 801d6cc:	bd10      	pop	{r4, pc}
 801d6ce:	bf00      	nop
 801d6d0:	08020c8f 	.word	0x08020c8f
 801d6d4:	08020d20 	.word	0x08020d20

0801d6d8 <__multiply>:
 801d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6dc:	4614      	mov	r4, r2
 801d6de:	690a      	ldr	r2, [r1, #16]
 801d6e0:	6923      	ldr	r3, [r4, #16]
 801d6e2:	429a      	cmp	r2, r3
 801d6e4:	bfb8      	it	lt
 801d6e6:	460b      	movlt	r3, r1
 801d6e8:	460d      	mov	r5, r1
 801d6ea:	bfbc      	itt	lt
 801d6ec:	4625      	movlt	r5, r4
 801d6ee:	461c      	movlt	r4, r3
 801d6f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d6f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d6f8:	68ab      	ldr	r3, [r5, #8]
 801d6fa:	6869      	ldr	r1, [r5, #4]
 801d6fc:	eb0a 0709 	add.w	r7, sl, r9
 801d700:	42bb      	cmp	r3, r7
 801d702:	b085      	sub	sp, #20
 801d704:	bfb8      	it	lt
 801d706:	3101      	addlt	r1, #1
 801d708:	f7ff fe8a 	bl	801d420 <_Balloc>
 801d70c:	b930      	cbnz	r0, 801d71c <__multiply+0x44>
 801d70e:	4602      	mov	r2, r0
 801d710:	4b42      	ldr	r3, [pc, #264]	; (801d81c <__multiply+0x144>)
 801d712:	4843      	ldr	r0, [pc, #268]	; (801d820 <__multiply+0x148>)
 801d714:	f240 115d 	movw	r1, #349	; 0x15d
 801d718:	f7fe fb00 	bl	801bd1c <__assert_func>
 801d71c:	f100 0614 	add.w	r6, r0, #20
 801d720:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d724:	4633      	mov	r3, r6
 801d726:	2200      	movs	r2, #0
 801d728:	4543      	cmp	r3, r8
 801d72a:	d31e      	bcc.n	801d76a <__multiply+0x92>
 801d72c:	f105 0c14 	add.w	ip, r5, #20
 801d730:	f104 0314 	add.w	r3, r4, #20
 801d734:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d738:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d73c:	9202      	str	r2, [sp, #8]
 801d73e:	ebac 0205 	sub.w	r2, ip, r5
 801d742:	3a15      	subs	r2, #21
 801d744:	f022 0203 	bic.w	r2, r2, #3
 801d748:	3204      	adds	r2, #4
 801d74a:	f105 0115 	add.w	r1, r5, #21
 801d74e:	458c      	cmp	ip, r1
 801d750:	bf38      	it	cc
 801d752:	2204      	movcc	r2, #4
 801d754:	9201      	str	r2, [sp, #4]
 801d756:	9a02      	ldr	r2, [sp, #8]
 801d758:	9303      	str	r3, [sp, #12]
 801d75a:	429a      	cmp	r2, r3
 801d75c:	d808      	bhi.n	801d770 <__multiply+0x98>
 801d75e:	2f00      	cmp	r7, #0
 801d760:	dc55      	bgt.n	801d80e <__multiply+0x136>
 801d762:	6107      	str	r7, [r0, #16]
 801d764:	b005      	add	sp, #20
 801d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d76a:	f843 2b04 	str.w	r2, [r3], #4
 801d76e:	e7db      	b.n	801d728 <__multiply+0x50>
 801d770:	f8b3 a000 	ldrh.w	sl, [r3]
 801d774:	f1ba 0f00 	cmp.w	sl, #0
 801d778:	d020      	beq.n	801d7bc <__multiply+0xe4>
 801d77a:	f105 0e14 	add.w	lr, r5, #20
 801d77e:	46b1      	mov	r9, r6
 801d780:	2200      	movs	r2, #0
 801d782:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d786:	f8d9 b000 	ldr.w	fp, [r9]
 801d78a:	b2a1      	uxth	r1, r4
 801d78c:	fa1f fb8b 	uxth.w	fp, fp
 801d790:	fb0a b101 	mla	r1, sl, r1, fp
 801d794:	4411      	add	r1, r2
 801d796:	f8d9 2000 	ldr.w	r2, [r9]
 801d79a:	0c24      	lsrs	r4, r4, #16
 801d79c:	0c12      	lsrs	r2, r2, #16
 801d79e:	fb0a 2404 	mla	r4, sl, r4, r2
 801d7a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d7a6:	b289      	uxth	r1, r1
 801d7a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d7ac:	45f4      	cmp	ip, lr
 801d7ae:	f849 1b04 	str.w	r1, [r9], #4
 801d7b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d7b6:	d8e4      	bhi.n	801d782 <__multiply+0xaa>
 801d7b8:	9901      	ldr	r1, [sp, #4]
 801d7ba:	5072      	str	r2, [r6, r1]
 801d7bc:	9a03      	ldr	r2, [sp, #12]
 801d7be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d7c2:	3304      	adds	r3, #4
 801d7c4:	f1b9 0f00 	cmp.w	r9, #0
 801d7c8:	d01f      	beq.n	801d80a <__multiply+0x132>
 801d7ca:	6834      	ldr	r4, [r6, #0]
 801d7cc:	f105 0114 	add.w	r1, r5, #20
 801d7d0:	46b6      	mov	lr, r6
 801d7d2:	f04f 0a00 	mov.w	sl, #0
 801d7d6:	880a      	ldrh	r2, [r1, #0]
 801d7d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d7dc:	fb09 b202 	mla	r2, r9, r2, fp
 801d7e0:	4492      	add	sl, r2
 801d7e2:	b2a4      	uxth	r4, r4
 801d7e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d7e8:	f84e 4b04 	str.w	r4, [lr], #4
 801d7ec:	f851 4b04 	ldr.w	r4, [r1], #4
 801d7f0:	f8be 2000 	ldrh.w	r2, [lr]
 801d7f4:	0c24      	lsrs	r4, r4, #16
 801d7f6:	fb09 2404 	mla	r4, r9, r4, r2
 801d7fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d7fe:	458c      	cmp	ip, r1
 801d800:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d804:	d8e7      	bhi.n	801d7d6 <__multiply+0xfe>
 801d806:	9a01      	ldr	r2, [sp, #4]
 801d808:	50b4      	str	r4, [r6, r2]
 801d80a:	3604      	adds	r6, #4
 801d80c:	e7a3      	b.n	801d756 <__multiply+0x7e>
 801d80e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d812:	2b00      	cmp	r3, #0
 801d814:	d1a5      	bne.n	801d762 <__multiply+0x8a>
 801d816:	3f01      	subs	r7, #1
 801d818:	e7a1      	b.n	801d75e <__multiply+0x86>
 801d81a:	bf00      	nop
 801d81c:	08020c8f 	.word	0x08020c8f
 801d820:	08020d20 	.word	0x08020d20

0801d824 <__pow5mult>:
 801d824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d828:	4615      	mov	r5, r2
 801d82a:	f012 0203 	ands.w	r2, r2, #3
 801d82e:	4606      	mov	r6, r0
 801d830:	460f      	mov	r7, r1
 801d832:	d007      	beq.n	801d844 <__pow5mult+0x20>
 801d834:	4c25      	ldr	r4, [pc, #148]	; (801d8cc <__pow5mult+0xa8>)
 801d836:	3a01      	subs	r2, #1
 801d838:	2300      	movs	r3, #0
 801d83a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d83e:	f7ff fe51 	bl	801d4e4 <__multadd>
 801d842:	4607      	mov	r7, r0
 801d844:	10ad      	asrs	r5, r5, #2
 801d846:	d03d      	beq.n	801d8c4 <__pow5mult+0xa0>
 801d848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d84a:	b97c      	cbnz	r4, 801d86c <__pow5mult+0x48>
 801d84c:	2010      	movs	r0, #16
 801d84e:	f7fc f8c5 	bl	80199dc <malloc>
 801d852:	4602      	mov	r2, r0
 801d854:	6270      	str	r0, [r6, #36]	; 0x24
 801d856:	b928      	cbnz	r0, 801d864 <__pow5mult+0x40>
 801d858:	4b1d      	ldr	r3, [pc, #116]	; (801d8d0 <__pow5mult+0xac>)
 801d85a:	481e      	ldr	r0, [pc, #120]	; (801d8d4 <__pow5mult+0xb0>)
 801d85c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d860:	f7fe fa5c 	bl	801bd1c <__assert_func>
 801d864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d868:	6004      	str	r4, [r0, #0]
 801d86a:	60c4      	str	r4, [r0, #12]
 801d86c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d874:	b94c      	cbnz	r4, 801d88a <__pow5mult+0x66>
 801d876:	f240 2171 	movw	r1, #625	; 0x271
 801d87a:	4630      	mov	r0, r6
 801d87c:	f7ff ff16 	bl	801d6ac <__i2b>
 801d880:	2300      	movs	r3, #0
 801d882:	f8c8 0008 	str.w	r0, [r8, #8]
 801d886:	4604      	mov	r4, r0
 801d888:	6003      	str	r3, [r0, #0]
 801d88a:	f04f 0900 	mov.w	r9, #0
 801d88e:	07eb      	lsls	r3, r5, #31
 801d890:	d50a      	bpl.n	801d8a8 <__pow5mult+0x84>
 801d892:	4639      	mov	r1, r7
 801d894:	4622      	mov	r2, r4
 801d896:	4630      	mov	r0, r6
 801d898:	f7ff ff1e 	bl	801d6d8 <__multiply>
 801d89c:	4639      	mov	r1, r7
 801d89e:	4680      	mov	r8, r0
 801d8a0:	4630      	mov	r0, r6
 801d8a2:	f7ff fdfd 	bl	801d4a0 <_Bfree>
 801d8a6:	4647      	mov	r7, r8
 801d8a8:	106d      	asrs	r5, r5, #1
 801d8aa:	d00b      	beq.n	801d8c4 <__pow5mult+0xa0>
 801d8ac:	6820      	ldr	r0, [r4, #0]
 801d8ae:	b938      	cbnz	r0, 801d8c0 <__pow5mult+0x9c>
 801d8b0:	4622      	mov	r2, r4
 801d8b2:	4621      	mov	r1, r4
 801d8b4:	4630      	mov	r0, r6
 801d8b6:	f7ff ff0f 	bl	801d6d8 <__multiply>
 801d8ba:	6020      	str	r0, [r4, #0]
 801d8bc:	f8c0 9000 	str.w	r9, [r0]
 801d8c0:	4604      	mov	r4, r0
 801d8c2:	e7e4      	b.n	801d88e <__pow5mult+0x6a>
 801d8c4:	4638      	mov	r0, r7
 801d8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8ca:	bf00      	nop
 801d8cc:	08020e70 	.word	0x08020e70
 801d8d0:	08020c19 	.word	0x08020c19
 801d8d4:	08020d20 	.word	0x08020d20

0801d8d8 <__lshift>:
 801d8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8dc:	460c      	mov	r4, r1
 801d8de:	6849      	ldr	r1, [r1, #4]
 801d8e0:	6923      	ldr	r3, [r4, #16]
 801d8e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d8e6:	68a3      	ldr	r3, [r4, #8]
 801d8e8:	4607      	mov	r7, r0
 801d8ea:	4691      	mov	r9, r2
 801d8ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d8f0:	f108 0601 	add.w	r6, r8, #1
 801d8f4:	42b3      	cmp	r3, r6
 801d8f6:	db0b      	blt.n	801d910 <__lshift+0x38>
 801d8f8:	4638      	mov	r0, r7
 801d8fa:	f7ff fd91 	bl	801d420 <_Balloc>
 801d8fe:	4605      	mov	r5, r0
 801d900:	b948      	cbnz	r0, 801d916 <__lshift+0x3e>
 801d902:	4602      	mov	r2, r0
 801d904:	4b28      	ldr	r3, [pc, #160]	; (801d9a8 <__lshift+0xd0>)
 801d906:	4829      	ldr	r0, [pc, #164]	; (801d9ac <__lshift+0xd4>)
 801d908:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d90c:	f7fe fa06 	bl	801bd1c <__assert_func>
 801d910:	3101      	adds	r1, #1
 801d912:	005b      	lsls	r3, r3, #1
 801d914:	e7ee      	b.n	801d8f4 <__lshift+0x1c>
 801d916:	2300      	movs	r3, #0
 801d918:	f100 0114 	add.w	r1, r0, #20
 801d91c:	f100 0210 	add.w	r2, r0, #16
 801d920:	4618      	mov	r0, r3
 801d922:	4553      	cmp	r3, sl
 801d924:	db33      	blt.n	801d98e <__lshift+0xb6>
 801d926:	6920      	ldr	r0, [r4, #16]
 801d928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d92c:	f104 0314 	add.w	r3, r4, #20
 801d930:	f019 091f 	ands.w	r9, r9, #31
 801d934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d938:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d93c:	d02b      	beq.n	801d996 <__lshift+0xbe>
 801d93e:	f1c9 0e20 	rsb	lr, r9, #32
 801d942:	468a      	mov	sl, r1
 801d944:	2200      	movs	r2, #0
 801d946:	6818      	ldr	r0, [r3, #0]
 801d948:	fa00 f009 	lsl.w	r0, r0, r9
 801d94c:	4302      	orrs	r2, r0
 801d94e:	f84a 2b04 	str.w	r2, [sl], #4
 801d952:	f853 2b04 	ldr.w	r2, [r3], #4
 801d956:	459c      	cmp	ip, r3
 801d958:	fa22 f20e 	lsr.w	r2, r2, lr
 801d95c:	d8f3      	bhi.n	801d946 <__lshift+0x6e>
 801d95e:	ebac 0304 	sub.w	r3, ip, r4
 801d962:	3b15      	subs	r3, #21
 801d964:	f023 0303 	bic.w	r3, r3, #3
 801d968:	3304      	adds	r3, #4
 801d96a:	f104 0015 	add.w	r0, r4, #21
 801d96e:	4584      	cmp	ip, r0
 801d970:	bf38      	it	cc
 801d972:	2304      	movcc	r3, #4
 801d974:	50ca      	str	r2, [r1, r3]
 801d976:	b10a      	cbz	r2, 801d97c <__lshift+0xa4>
 801d978:	f108 0602 	add.w	r6, r8, #2
 801d97c:	3e01      	subs	r6, #1
 801d97e:	4638      	mov	r0, r7
 801d980:	612e      	str	r6, [r5, #16]
 801d982:	4621      	mov	r1, r4
 801d984:	f7ff fd8c 	bl	801d4a0 <_Bfree>
 801d988:	4628      	mov	r0, r5
 801d98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d98e:	f842 0f04 	str.w	r0, [r2, #4]!
 801d992:	3301      	adds	r3, #1
 801d994:	e7c5      	b.n	801d922 <__lshift+0x4a>
 801d996:	3904      	subs	r1, #4
 801d998:	f853 2b04 	ldr.w	r2, [r3], #4
 801d99c:	f841 2f04 	str.w	r2, [r1, #4]!
 801d9a0:	459c      	cmp	ip, r3
 801d9a2:	d8f9      	bhi.n	801d998 <__lshift+0xc0>
 801d9a4:	e7ea      	b.n	801d97c <__lshift+0xa4>
 801d9a6:	bf00      	nop
 801d9a8:	08020c8f 	.word	0x08020c8f
 801d9ac:	08020d20 	.word	0x08020d20

0801d9b0 <__mcmp>:
 801d9b0:	b530      	push	{r4, r5, lr}
 801d9b2:	6902      	ldr	r2, [r0, #16]
 801d9b4:	690c      	ldr	r4, [r1, #16]
 801d9b6:	1b12      	subs	r2, r2, r4
 801d9b8:	d10e      	bne.n	801d9d8 <__mcmp+0x28>
 801d9ba:	f100 0314 	add.w	r3, r0, #20
 801d9be:	3114      	adds	r1, #20
 801d9c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d9c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d9c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d9cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d9d0:	42a5      	cmp	r5, r4
 801d9d2:	d003      	beq.n	801d9dc <__mcmp+0x2c>
 801d9d4:	d305      	bcc.n	801d9e2 <__mcmp+0x32>
 801d9d6:	2201      	movs	r2, #1
 801d9d8:	4610      	mov	r0, r2
 801d9da:	bd30      	pop	{r4, r5, pc}
 801d9dc:	4283      	cmp	r3, r0
 801d9de:	d3f3      	bcc.n	801d9c8 <__mcmp+0x18>
 801d9e0:	e7fa      	b.n	801d9d8 <__mcmp+0x28>
 801d9e2:	f04f 32ff 	mov.w	r2, #4294967295
 801d9e6:	e7f7      	b.n	801d9d8 <__mcmp+0x28>

0801d9e8 <__mdiff>:
 801d9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9ec:	460c      	mov	r4, r1
 801d9ee:	4606      	mov	r6, r0
 801d9f0:	4611      	mov	r1, r2
 801d9f2:	4620      	mov	r0, r4
 801d9f4:	4617      	mov	r7, r2
 801d9f6:	f7ff ffdb 	bl	801d9b0 <__mcmp>
 801d9fa:	1e05      	subs	r5, r0, #0
 801d9fc:	d110      	bne.n	801da20 <__mdiff+0x38>
 801d9fe:	4629      	mov	r1, r5
 801da00:	4630      	mov	r0, r6
 801da02:	f7ff fd0d 	bl	801d420 <_Balloc>
 801da06:	b930      	cbnz	r0, 801da16 <__mdiff+0x2e>
 801da08:	4b39      	ldr	r3, [pc, #228]	; (801daf0 <__mdiff+0x108>)
 801da0a:	4602      	mov	r2, r0
 801da0c:	f240 2132 	movw	r1, #562	; 0x232
 801da10:	4838      	ldr	r0, [pc, #224]	; (801daf4 <__mdiff+0x10c>)
 801da12:	f7fe f983 	bl	801bd1c <__assert_func>
 801da16:	2301      	movs	r3, #1
 801da18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801da1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da20:	bfa4      	itt	ge
 801da22:	463b      	movge	r3, r7
 801da24:	4627      	movge	r7, r4
 801da26:	4630      	mov	r0, r6
 801da28:	6879      	ldr	r1, [r7, #4]
 801da2a:	bfa6      	itte	ge
 801da2c:	461c      	movge	r4, r3
 801da2e:	2500      	movge	r5, #0
 801da30:	2501      	movlt	r5, #1
 801da32:	f7ff fcf5 	bl	801d420 <_Balloc>
 801da36:	b920      	cbnz	r0, 801da42 <__mdiff+0x5a>
 801da38:	4b2d      	ldr	r3, [pc, #180]	; (801daf0 <__mdiff+0x108>)
 801da3a:	4602      	mov	r2, r0
 801da3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801da40:	e7e6      	b.n	801da10 <__mdiff+0x28>
 801da42:	693e      	ldr	r6, [r7, #16]
 801da44:	60c5      	str	r5, [r0, #12]
 801da46:	6925      	ldr	r5, [r4, #16]
 801da48:	f107 0114 	add.w	r1, r7, #20
 801da4c:	f104 0914 	add.w	r9, r4, #20
 801da50:	f100 0e14 	add.w	lr, r0, #20
 801da54:	f107 0210 	add.w	r2, r7, #16
 801da58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801da5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801da60:	46f2      	mov	sl, lr
 801da62:	2700      	movs	r7, #0
 801da64:	f859 3b04 	ldr.w	r3, [r9], #4
 801da68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801da6c:	fa1f f883 	uxth.w	r8, r3
 801da70:	fa17 f78b 	uxtah	r7, r7, fp
 801da74:	0c1b      	lsrs	r3, r3, #16
 801da76:	eba7 0808 	sub.w	r8, r7, r8
 801da7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801da7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801da82:	fa1f f888 	uxth.w	r8, r8
 801da86:	141f      	asrs	r7, r3, #16
 801da88:	454d      	cmp	r5, r9
 801da8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801da8e:	f84a 3b04 	str.w	r3, [sl], #4
 801da92:	d8e7      	bhi.n	801da64 <__mdiff+0x7c>
 801da94:	1b2b      	subs	r3, r5, r4
 801da96:	3b15      	subs	r3, #21
 801da98:	f023 0303 	bic.w	r3, r3, #3
 801da9c:	3304      	adds	r3, #4
 801da9e:	3415      	adds	r4, #21
 801daa0:	42a5      	cmp	r5, r4
 801daa2:	bf38      	it	cc
 801daa4:	2304      	movcc	r3, #4
 801daa6:	4419      	add	r1, r3
 801daa8:	4473      	add	r3, lr
 801daaa:	469e      	mov	lr, r3
 801daac:	460d      	mov	r5, r1
 801daae:	4565      	cmp	r5, ip
 801dab0:	d30e      	bcc.n	801dad0 <__mdiff+0xe8>
 801dab2:	f10c 0203 	add.w	r2, ip, #3
 801dab6:	1a52      	subs	r2, r2, r1
 801dab8:	f022 0203 	bic.w	r2, r2, #3
 801dabc:	3903      	subs	r1, #3
 801dabe:	458c      	cmp	ip, r1
 801dac0:	bf38      	it	cc
 801dac2:	2200      	movcc	r2, #0
 801dac4:	441a      	add	r2, r3
 801dac6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801daca:	b17b      	cbz	r3, 801daec <__mdiff+0x104>
 801dacc:	6106      	str	r6, [r0, #16]
 801dace:	e7a5      	b.n	801da1c <__mdiff+0x34>
 801dad0:	f855 8b04 	ldr.w	r8, [r5], #4
 801dad4:	fa17 f488 	uxtah	r4, r7, r8
 801dad8:	1422      	asrs	r2, r4, #16
 801dada:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801dade:	b2a4      	uxth	r4, r4
 801dae0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801dae4:	f84e 4b04 	str.w	r4, [lr], #4
 801dae8:	1417      	asrs	r7, r2, #16
 801daea:	e7e0      	b.n	801daae <__mdiff+0xc6>
 801daec:	3e01      	subs	r6, #1
 801daee:	e7ea      	b.n	801dac6 <__mdiff+0xde>
 801daf0:	08020c8f 	.word	0x08020c8f
 801daf4:	08020d20 	.word	0x08020d20

0801daf8 <__ulp>:
 801daf8:	b082      	sub	sp, #8
 801dafa:	ed8d 0b00 	vstr	d0, [sp]
 801dafe:	9b01      	ldr	r3, [sp, #4]
 801db00:	4912      	ldr	r1, [pc, #72]	; (801db4c <__ulp+0x54>)
 801db02:	4019      	ands	r1, r3
 801db04:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801db08:	2900      	cmp	r1, #0
 801db0a:	dd05      	ble.n	801db18 <__ulp+0x20>
 801db0c:	2200      	movs	r2, #0
 801db0e:	460b      	mov	r3, r1
 801db10:	ec43 2b10 	vmov	d0, r2, r3
 801db14:	b002      	add	sp, #8
 801db16:	4770      	bx	lr
 801db18:	4249      	negs	r1, r1
 801db1a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801db1e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801db22:	f04f 0200 	mov.w	r2, #0
 801db26:	f04f 0300 	mov.w	r3, #0
 801db2a:	da04      	bge.n	801db36 <__ulp+0x3e>
 801db2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801db30:	fa41 f300 	asr.w	r3, r1, r0
 801db34:	e7ec      	b.n	801db10 <__ulp+0x18>
 801db36:	f1a0 0114 	sub.w	r1, r0, #20
 801db3a:	291e      	cmp	r1, #30
 801db3c:	bfda      	itte	le
 801db3e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801db42:	fa20 f101 	lsrle.w	r1, r0, r1
 801db46:	2101      	movgt	r1, #1
 801db48:	460a      	mov	r2, r1
 801db4a:	e7e1      	b.n	801db10 <__ulp+0x18>
 801db4c:	7ff00000 	.word	0x7ff00000

0801db50 <__b2d>:
 801db50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db52:	6905      	ldr	r5, [r0, #16]
 801db54:	f100 0714 	add.w	r7, r0, #20
 801db58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801db5c:	1f2e      	subs	r6, r5, #4
 801db5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801db62:	4620      	mov	r0, r4
 801db64:	f7ff fd52 	bl	801d60c <__hi0bits>
 801db68:	f1c0 0320 	rsb	r3, r0, #32
 801db6c:	280a      	cmp	r0, #10
 801db6e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801dbec <__b2d+0x9c>
 801db72:	600b      	str	r3, [r1, #0]
 801db74:	dc14      	bgt.n	801dba0 <__b2d+0x50>
 801db76:	f1c0 0e0b 	rsb	lr, r0, #11
 801db7a:	fa24 f10e 	lsr.w	r1, r4, lr
 801db7e:	42b7      	cmp	r7, r6
 801db80:	ea41 030c 	orr.w	r3, r1, ip
 801db84:	bf34      	ite	cc
 801db86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801db8a:	2100      	movcs	r1, #0
 801db8c:	3015      	adds	r0, #21
 801db8e:	fa04 f000 	lsl.w	r0, r4, r0
 801db92:	fa21 f10e 	lsr.w	r1, r1, lr
 801db96:	ea40 0201 	orr.w	r2, r0, r1
 801db9a:	ec43 2b10 	vmov	d0, r2, r3
 801db9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dba0:	42b7      	cmp	r7, r6
 801dba2:	bf3a      	itte	cc
 801dba4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dba8:	f1a5 0608 	subcc.w	r6, r5, #8
 801dbac:	2100      	movcs	r1, #0
 801dbae:	380b      	subs	r0, #11
 801dbb0:	d017      	beq.n	801dbe2 <__b2d+0x92>
 801dbb2:	f1c0 0c20 	rsb	ip, r0, #32
 801dbb6:	fa04 f500 	lsl.w	r5, r4, r0
 801dbba:	42be      	cmp	r6, r7
 801dbbc:	fa21 f40c 	lsr.w	r4, r1, ip
 801dbc0:	ea45 0504 	orr.w	r5, r5, r4
 801dbc4:	bf8c      	ite	hi
 801dbc6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801dbca:	2400      	movls	r4, #0
 801dbcc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801dbd0:	fa01 f000 	lsl.w	r0, r1, r0
 801dbd4:	fa24 f40c 	lsr.w	r4, r4, ip
 801dbd8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dbdc:	ea40 0204 	orr.w	r2, r0, r4
 801dbe0:	e7db      	b.n	801db9a <__b2d+0x4a>
 801dbe2:	ea44 030c 	orr.w	r3, r4, ip
 801dbe6:	460a      	mov	r2, r1
 801dbe8:	e7d7      	b.n	801db9a <__b2d+0x4a>
 801dbea:	bf00      	nop
 801dbec:	3ff00000 	.word	0x3ff00000

0801dbf0 <__d2b>:
 801dbf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dbf4:	4689      	mov	r9, r1
 801dbf6:	2101      	movs	r1, #1
 801dbf8:	ec57 6b10 	vmov	r6, r7, d0
 801dbfc:	4690      	mov	r8, r2
 801dbfe:	f7ff fc0f 	bl	801d420 <_Balloc>
 801dc02:	4604      	mov	r4, r0
 801dc04:	b930      	cbnz	r0, 801dc14 <__d2b+0x24>
 801dc06:	4602      	mov	r2, r0
 801dc08:	4b25      	ldr	r3, [pc, #148]	; (801dca0 <__d2b+0xb0>)
 801dc0a:	4826      	ldr	r0, [pc, #152]	; (801dca4 <__d2b+0xb4>)
 801dc0c:	f240 310a 	movw	r1, #778	; 0x30a
 801dc10:	f7fe f884 	bl	801bd1c <__assert_func>
 801dc14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dc18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dc1c:	bb35      	cbnz	r5, 801dc6c <__d2b+0x7c>
 801dc1e:	2e00      	cmp	r6, #0
 801dc20:	9301      	str	r3, [sp, #4]
 801dc22:	d028      	beq.n	801dc76 <__d2b+0x86>
 801dc24:	4668      	mov	r0, sp
 801dc26:	9600      	str	r6, [sp, #0]
 801dc28:	f7ff fd10 	bl	801d64c <__lo0bits>
 801dc2c:	9900      	ldr	r1, [sp, #0]
 801dc2e:	b300      	cbz	r0, 801dc72 <__d2b+0x82>
 801dc30:	9a01      	ldr	r2, [sp, #4]
 801dc32:	f1c0 0320 	rsb	r3, r0, #32
 801dc36:	fa02 f303 	lsl.w	r3, r2, r3
 801dc3a:	430b      	orrs	r3, r1
 801dc3c:	40c2      	lsrs	r2, r0
 801dc3e:	6163      	str	r3, [r4, #20]
 801dc40:	9201      	str	r2, [sp, #4]
 801dc42:	9b01      	ldr	r3, [sp, #4]
 801dc44:	61a3      	str	r3, [r4, #24]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	bf14      	ite	ne
 801dc4a:	2202      	movne	r2, #2
 801dc4c:	2201      	moveq	r2, #1
 801dc4e:	6122      	str	r2, [r4, #16]
 801dc50:	b1d5      	cbz	r5, 801dc88 <__d2b+0x98>
 801dc52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801dc56:	4405      	add	r5, r0
 801dc58:	f8c9 5000 	str.w	r5, [r9]
 801dc5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dc60:	f8c8 0000 	str.w	r0, [r8]
 801dc64:	4620      	mov	r0, r4
 801dc66:	b003      	add	sp, #12
 801dc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dc70:	e7d5      	b.n	801dc1e <__d2b+0x2e>
 801dc72:	6161      	str	r1, [r4, #20]
 801dc74:	e7e5      	b.n	801dc42 <__d2b+0x52>
 801dc76:	a801      	add	r0, sp, #4
 801dc78:	f7ff fce8 	bl	801d64c <__lo0bits>
 801dc7c:	9b01      	ldr	r3, [sp, #4]
 801dc7e:	6163      	str	r3, [r4, #20]
 801dc80:	2201      	movs	r2, #1
 801dc82:	6122      	str	r2, [r4, #16]
 801dc84:	3020      	adds	r0, #32
 801dc86:	e7e3      	b.n	801dc50 <__d2b+0x60>
 801dc88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dc8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dc90:	f8c9 0000 	str.w	r0, [r9]
 801dc94:	6918      	ldr	r0, [r3, #16]
 801dc96:	f7ff fcb9 	bl	801d60c <__hi0bits>
 801dc9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dc9e:	e7df      	b.n	801dc60 <__d2b+0x70>
 801dca0:	08020c8f 	.word	0x08020c8f
 801dca4:	08020d20 	.word	0x08020d20

0801dca8 <__ratio>:
 801dca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcac:	4688      	mov	r8, r1
 801dcae:	4669      	mov	r1, sp
 801dcb0:	4681      	mov	r9, r0
 801dcb2:	f7ff ff4d 	bl	801db50 <__b2d>
 801dcb6:	a901      	add	r1, sp, #4
 801dcb8:	4640      	mov	r0, r8
 801dcba:	ec55 4b10 	vmov	r4, r5, d0
 801dcbe:	f7ff ff47 	bl	801db50 <__b2d>
 801dcc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dcc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801dcca:	eba3 0c02 	sub.w	ip, r3, r2
 801dcce:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dcd2:	1a9b      	subs	r3, r3, r2
 801dcd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dcd8:	ec51 0b10 	vmov	r0, r1, d0
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	bfd6      	itet	le
 801dce0:	460a      	movle	r2, r1
 801dce2:	462a      	movgt	r2, r5
 801dce4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dce8:	468b      	mov	fp, r1
 801dcea:	462f      	mov	r7, r5
 801dcec:	bfd4      	ite	le
 801dcee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801dcf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801dcf6:	4620      	mov	r0, r4
 801dcf8:	ee10 2a10 	vmov	r2, s0
 801dcfc:	465b      	mov	r3, fp
 801dcfe:	4639      	mov	r1, r7
 801dd00:	f7e2 fdb4 	bl	800086c <__aeabi_ddiv>
 801dd04:	ec41 0b10 	vmov	d0, r0, r1
 801dd08:	b003      	add	sp, #12
 801dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd0e <__copybits>:
 801dd0e:	3901      	subs	r1, #1
 801dd10:	b570      	push	{r4, r5, r6, lr}
 801dd12:	1149      	asrs	r1, r1, #5
 801dd14:	6914      	ldr	r4, [r2, #16]
 801dd16:	3101      	adds	r1, #1
 801dd18:	f102 0314 	add.w	r3, r2, #20
 801dd1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801dd20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801dd24:	1f05      	subs	r5, r0, #4
 801dd26:	42a3      	cmp	r3, r4
 801dd28:	d30c      	bcc.n	801dd44 <__copybits+0x36>
 801dd2a:	1aa3      	subs	r3, r4, r2
 801dd2c:	3b11      	subs	r3, #17
 801dd2e:	f023 0303 	bic.w	r3, r3, #3
 801dd32:	3211      	adds	r2, #17
 801dd34:	42a2      	cmp	r2, r4
 801dd36:	bf88      	it	hi
 801dd38:	2300      	movhi	r3, #0
 801dd3a:	4418      	add	r0, r3
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	4288      	cmp	r0, r1
 801dd40:	d305      	bcc.n	801dd4e <__copybits+0x40>
 801dd42:	bd70      	pop	{r4, r5, r6, pc}
 801dd44:	f853 6b04 	ldr.w	r6, [r3], #4
 801dd48:	f845 6f04 	str.w	r6, [r5, #4]!
 801dd4c:	e7eb      	b.n	801dd26 <__copybits+0x18>
 801dd4e:	f840 3b04 	str.w	r3, [r0], #4
 801dd52:	e7f4      	b.n	801dd3e <__copybits+0x30>

0801dd54 <__any_on>:
 801dd54:	f100 0214 	add.w	r2, r0, #20
 801dd58:	6900      	ldr	r0, [r0, #16]
 801dd5a:	114b      	asrs	r3, r1, #5
 801dd5c:	4298      	cmp	r0, r3
 801dd5e:	b510      	push	{r4, lr}
 801dd60:	db11      	blt.n	801dd86 <__any_on+0x32>
 801dd62:	dd0a      	ble.n	801dd7a <__any_on+0x26>
 801dd64:	f011 011f 	ands.w	r1, r1, #31
 801dd68:	d007      	beq.n	801dd7a <__any_on+0x26>
 801dd6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801dd6e:	fa24 f001 	lsr.w	r0, r4, r1
 801dd72:	fa00 f101 	lsl.w	r1, r0, r1
 801dd76:	428c      	cmp	r4, r1
 801dd78:	d10b      	bne.n	801dd92 <__any_on+0x3e>
 801dd7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dd7e:	4293      	cmp	r3, r2
 801dd80:	d803      	bhi.n	801dd8a <__any_on+0x36>
 801dd82:	2000      	movs	r0, #0
 801dd84:	bd10      	pop	{r4, pc}
 801dd86:	4603      	mov	r3, r0
 801dd88:	e7f7      	b.n	801dd7a <__any_on+0x26>
 801dd8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dd8e:	2900      	cmp	r1, #0
 801dd90:	d0f5      	beq.n	801dd7e <__any_on+0x2a>
 801dd92:	2001      	movs	r0, #1
 801dd94:	e7f6      	b.n	801dd84 <__any_on+0x30>

0801dd96 <_calloc_r>:
 801dd96:	b513      	push	{r0, r1, r4, lr}
 801dd98:	434a      	muls	r2, r1
 801dd9a:	4611      	mov	r1, r2
 801dd9c:	9201      	str	r2, [sp, #4]
 801dd9e:	f7fb fea5 	bl	8019aec <_malloc_r>
 801dda2:	4604      	mov	r4, r0
 801dda4:	b118      	cbz	r0, 801ddae <_calloc_r+0x18>
 801dda6:	9a01      	ldr	r2, [sp, #4]
 801dda8:	2100      	movs	r1, #0
 801ddaa:	f7fb fe47 	bl	8019a3c <memset>
 801ddae:	4620      	mov	r0, r4
 801ddb0:	b002      	add	sp, #8
 801ddb2:	bd10      	pop	{r4, pc}

0801ddb4 <_realloc_r>:
 801ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddb6:	4607      	mov	r7, r0
 801ddb8:	4614      	mov	r4, r2
 801ddba:	460e      	mov	r6, r1
 801ddbc:	b921      	cbnz	r1, 801ddc8 <_realloc_r+0x14>
 801ddbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ddc2:	4611      	mov	r1, r2
 801ddc4:	f7fb be92 	b.w	8019aec <_malloc_r>
 801ddc8:	b922      	cbnz	r2, 801ddd4 <_realloc_r+0x20>
 801ddca:	f7fb fe3f 	bl	8019a4c <_free_r>
 801ddce:	4625      	mov	r5, r4
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddd4:	f000 fe9e 	bl	801eb14 <_malloc_usable_size_r>
 801ddd8:	42a0      	cmp	r0, r4
 801ddda:	d20f      	bcs.n	801ddfc <_realloc_r+0x48>
 801dddc:	4621      	mov	r1, r4
 801ddde:	4638      	mov	r0, r7
 801dde0:	f7fb fe84 	bl	8019aec <_malloc_r>
 801dde4:	4605      	mov	r5, r0
 801dde6:	2800      	cmp	r0, #0
 801dde8:	d0f2      	beq.n	801ddd0 <_realloc_r+0x1c>
 801ddea:	4631      	mov	r1, r6
 801ddec:	4622      	mov	r2, r4
 801ddee:	f7fb fdfd 	bl	80199ec <memcpy>
 801ddf2:	4631      	mov	r1, r6
 801ddf4:	4638      	mov	r0, r7
 801ddf6:	f7fb fe29 	bl	8019a4c <_free_r>
 801ddfa:	e7e9      	b.n	801ddd0 <_realloc_r+0x1c>
 801ddfc:	4635      	mov	r5, r6
 801ddfe:	e7e7      	b.n	801ddd0 <_realloc_r+0x1c>

0801de00 <__ssputs_r>:
 801de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de04:	688e      	ldr	r6, [r1, #8]
 801de06:	429e      	cmp	r6, r3
 801de08:	4682      	mov	sl, r0
 801de0a:	460c      	mov	r4, r1
 801de0c:	4690      	mov	r8, r2
 801de0e:	461f      	mov	r7, r3
 801de10:	d838      	bhi.n	801de84 <__ssputs_r+0x84>
 801de12:	898a      	ldrh	r2, [r1, #12]
 801de14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801de18:	d032      	beq.n	801de80 <__ssputs_r+0x80>
 801de1a:	6825      	ldr	r5, [r4, #0]
 801de1c:	6909      	ldr	r1, [r1, #16]
 801de1e:	eba5 0901 	sub.w	r9, r5, r1
 801de22:	6965      	ldr	r5, [r4, #20]
 801de24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801de2c:	3301      	adds	r3, #1
 801de2e:	444b      	add	r3, r9
 801de30:	106d      	asrs	r5, r5, #1
 801de32:	429d      	cmp	r5, r3
 801de34:	bf38      	it	cc
 801de36:	461d      	movcc	r5, r3
 801de38:	0553      	lsls	r3, r2, #21
 801de3a:	d531      	bpl.n	801dea0 <__ssputs_r+0xa0>
 801de3c:	4629      	mov	r1, r5
 801de3e:	f7fb fe55 	bl	8019aec <_malloc_r>
 801de42:	4606      	mov	r6, r0
 801de44:	b950      	cbnz	r0, 801de5c <__ssputs_r+0x5c>
 801de46:	230c      	movs	r3, #12
 801de48:	f8ca 3000 	str.w	r3, [sl]
 801de4c:	89a3      	ldrh	r3, [r4, #12]
 801de4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801de52:	81a3      	strh	r3, [r4, #12]
 801de54:	f04f 30ff 	mov.w	r0, #4294967295
 801de58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de5c:	6921      	ldr	r1, [r4, #16]
 801de5e:	464a      	mov	r2, r9
 801de60:	f7fb fdc4 	bl	80199ec <memcpy>
 801de64:	89a3      	ldrh	r3, [r4, #12]
 801de66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801de6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de6e:	81a3      	strh	r3, [r4, #12]
 801de70:	6126      	str	r6, [r4, #16]
 801de72:	6165      	str	r5, [r4, #20]
 801de74:	444e      	add	r6, r9
 801de76:	eba5 0509 	sub.w	r5, r5, r9
 801de7a:	6026      	str	r6, [r4, #0]
 801de7c:	60a5      	str	r5, [r4, #8]
 801de7e:	463e      	mov	r6, r7
 801de80:	42be      	cmp	r6, r7
 801de82:	d900      	bls.n	801de86 <__ssputs_r+0x86>
 801de84:	463e      	mov	r6, r7
 801de86:	4632      	mov	r2, r6
 801de88:	6820      	ldr	r0, [r4, #0]
 801de8a:	4641      	mov	r1, r8
 801de8c:	f7fb fdbc 	bl	8019a08 <memmove>
 801de90:	68a3      	ldr	r3, [r4, #8]
 801de92:	6822      	ldr	r2, [r4, #0]
 801de94:	1b9b      	subs	r3, r3, r6
 801de96:	4432      	add	r2, r6
 801de98:	60a3      	str	r3, [r4, #8]
 801de9a:	6022      	str	r2, [r4, #0]
 801de9c:	2000      	movs	r0, #0
 801de9e:	e7db      	b.n	801de58 <__ssputs_r+0x58>
 801dea0:	462a      	mov	r2, r5
 801dea2:	f7ff ff87 	bl	801ddb4 <_realloc_r>
 801dea6:	4606      	mov	r6, r0
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d1e1      	bne.n	801de70 <__ssputs_r+0x70>
 801deac:	6921      	ldr	r1, [r4, #16]
 801deae:	4650      	mov	r0, sl
 801deb0:	f7fb fdcc 	bl	8019a4c <_free_r>
 801deb4:	e7c7      	b.n	801de46 <__ssputs_r+0x46>
	...

0801deb8 <_svfiprintf_r>:
 801deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801debc:	4698      	mov	r8, r3
 801debe:	898b      	ldrh	r3, [r1, #12]
 801dec0:	061b      	lsls	r3, r3, #24
 801dec2:	b09d      	sub	sp, #116	; 0x74
 801dec4:	4607      	mov	r7, r0
 801dec6:	460d      	mov	r5, r1
 801dec8:	4614      	mov	r4, r2
 801deca:	d50e      	bpl.n	801deea <_svfiprintf_r+0x32>
 801decc:	690b      	ldr	r3, [r1, #16]
 801dece:	b963      	cbnz	r3, 801deea <_svfiprintf_r+0x32>
 801ded0:	2140      	movs	r1, #64	; 0x40
 801ded2:	f7fb fe0b 	bl	8019aec <_malloc_r>
 801ded6:	6028      	str	r0, [r5, #0]
 801ded8:	6128      	str	r0, [r5, #16]
 801deda:	b920      	cbnz	r0, 801dee6 <_svfiprintf_r+0x2e>
 801dedc:	230c      	movs	r3, #12
 801dede:	603b      	str	r3, [r7, #0]
 801dee0:	f04f 30ff 	mov.w	r0, #4294967295
 801dee4:	e0d1      	b.n	801e08a <_svfiprintf_r+0x1d2>
 801dee6:	2340      	movs	r3, #64	; 0x40
 801dee8:	616b      	str	r3, [r5, #20]
 801deea:	2300      	movs	r3, #0
 801deec:	9309      	str	r3, [sp, #36]	; 0x24
 801deee:	2320      	movs	r3, #32
 801def0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801def4:	f8cd 800c 	str.w	r8, [sp, #12]
 801def8:	2330      	movs	r3, #48	; 0x30
 801defa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e0a4 <_svfiprintf_r+0x1ec>
 801defe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df02:	f04f 0901 	mov.w	r9, #1
 801df06:	4623      	mov	r3, r4
 801df08:	469a      	mov	sl, r3
 801df0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df0e:	b10a      	cbz	r2, 801df14 <_svfiprintf_r+0x5c>
 801df10:	2a25      	cmp	r2, #37	; 0x25
 801df12:	d1f9      	bne.n	801df08 <_svfiprintf_r+0x50>
 801df14:	ebba 0b04 	subs.w	fp, sl, r4
 801df18:	d00b      	beq.n	801df32 <_svfiprintf_r+0x7a>
 801df1a:	465b      	mov	r3, fp
 801df1c:	4622      	mov	r2, r4
 801df1e:	4629      	mov	r1, r5
 801df20:	4638      	mov	r0, r7
 801df22:	f7ff ff6d 	bl	801de00 <__ssputs_r>
 801df26:	3001      	adds	r0, #1
 801df28:	f000 80aa 	beq.w	801e080 <_svfiprintf_r+0x1c8>
 801df2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df2e:	445a      	add	r2, fp
 801df30:	9209      	str	r2, [sp, #36]	; 0x24
 801df32:	f89a 3000 	ldrb.w	r3, [sl]
 801df36:	2b00      	cmp	r3, #0
 801df38:	f000 80a2 	beq.w	801e080 <_svfiprintf_r+0x1c8>
 801df3c:	2300      	movs	r3, #0
 801df3e:	f04f 32ff 	mov.w	r2, #4294967295
 801df42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df46:	f10a 0a01 	add.w	sl, sl, #1
 801df4a:	9304      	str	r3, [sp, #16]
 801df4c:	9307      	str	r3, [sp, #28]
 801df4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801df52:	931a      	str	r3, [sp, #104]	; 0x68
 801df54:	4654      	mov	r4, sl
 801df56:	2205      	movs	r2, #5
 801df58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df5c:	4851      	ldr	r0, [pc, #324]	; (801e0a4 <_svfiprintf_r+0x1ec>)
 801df5e:	f7e2 f94f 	bl	8000200 <memchr>
 801df62:	9a04      	ldr	r2, [sp, #16]
 801df64:	b9d8      	cbnz	r0, 801df9e <_svfiprintf_r+0xe6>
 801df66:	06d0      	lsls	r0, r2, #27
 801df68:	bf44      	itt	mi
 801df6a:	2320      	movmi	r3, #32
 801df6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df70:	0711      	lsls	r1, r2, #28
 801df72:	bf44      	itt	mi
 801df74:	232b      	movmi	r3, #43	; 0x2b
 801df76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df7a:	f89a 3000 	ldrb.w	r3, [sl]
 801df7e:	2b2a      	cmp	r3, #42	; 0x2a
 801df80:	d015      	beq.n	801dfae <_svfiprintf_r+0xf6>
 801df82:	9a07      	ldr	r2, [sp, #28]
 801df84:	4654      	mov	r4, sl
 801df86:	2000      	movs	r0, #0
 801df88:	f04f 0c0a 	mov.w	ip, #10
 801df8c:	4621      	mov	r1, r4
 801df8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df92:	3b30      	subs	r3, #48	; 0x30
 801df94:	2b09      	cmp	r3, #9
 801df96:	d94e      	bls.n	801e036 <_svfiprintf_r+0x17e>
 801df98:	b1b0      	cbz	r0, 801dfc8 <_svfiprintf_r+0x110>
 801df9a:	9207      	str	r2, [sp, #28]
 801df9c:	e014      	b.n	801dfc8 <_svfiprintf_r+0x110>
 801df9e:	eba0 0308 	sub.w	r3, r0, r8
 801dfa2:	fa09 f303 	lsl.w	r3, r9, r3
 801dfa6:	4313      	orrs	r3, r2
 801dfa8:	9304      	str	r3, [sp, #16]
 801dfaa:	46a2      	mov	sl, r4
 801dfac:	e7d2      	b.n	801df54 <_svfiprintf_r+0x9c>
 801dfae:	9b03      	ldr	r3, [sp, #12]
 801dfb0:	1d19      	adds	r1, r3, #4
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	9103      	str	r1, [sp, #12]
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	bfbb      	ittet	lt
 801dfba:	425b      	neglt	r3, r3
 801dfbc:	f042 0202 	orrlt.w	r2, r2, #2
 801dfc0:	9307      	strge	r3, [sp, #28]
 801dfc2:	9307      	strlt	r3, [sp, #28]
 801dfc4:	bfb8      	it	lt
 801dfc6:	9204      	strlt	r2, [sp, #16]
 801dfc8:	7823      	ldrb	r3, [r4, #0]
 801dfca:	2b2e      	cmp	r3, #46	; 0x2e
 801dfcc:	d10c      	bne.n	801dfe8 <_svfiprintf_r+0x130>
 801dfce:	7863      	ldrb	r3, [r4, #1]
 801dfd0:	2b2a      	cmp	r3, #42	; 0x2a
 801dfd2:	d135      	bne.n	801e040 <_svfiprintf_r+0x188>
 801dfd4:	9b03      	ldr	r3, [sp, #12]
 801dfd6:	1d1a      	adds	r2, r3, #4
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	9203      	str	r2, [sp, #12]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	bfb8      	it	lt
 801dfe0:	f04f 33ff 	movlt.w	r3, #4294967295
 801dfe4:	3402      	adds	r4, #2
 801dfe6:	9305      	str	r3, [sp, #20]
 801dfe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e0b4 <_svfiprintf_r+0x1fc>
 801dfec:	7821      	ldrb	r1, [r4, #0]
 801dfee:	2203      	movs	r2, #3
 801dff0:	4650      	mov	r0, sl
 801dff2:	f7e2 f905 	bl	8000200 <memchr>
 801dff6:	b140      	cbz	r0, 801e00a <_svfiprintf_r+0x152>
 801dff8:	2340      	movs	r3, #64	; 0x40
 801dffa:	eba0 000a 	sub.w	r0, r0, sl
 801dffe:	fa03 f000 	lsl.w	r0, r3, r0
 801e002:	9b04      	ldr	r3, [sp, #16]
 801e004:	4303      	orrs	r3, r0
 801e006:	3401      	adds	r4, #1
 801e008:	9304      	str	r3, [sp, #16]
 801e00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e00e:	4826      	ldr	r0, [pc, #152]	; (801e0a8 <_svfiprintf_r+0x1f0>)
 801e010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e014:	2206      	movs	r2, #6
 801e016:	f7e2 f8f3 	bl	8000200 <memchr>
 801e01a:	2800      	cmp	r0, #0
 801e01c:	d038      	beq.n	801e090 <_svfiprintf_r+0x1d8>
 801e01e:	4b23      	ldr	r3, [pc, #140]	; (801e0ac <_svfiprintf_r+0x1f4>)
 801e020:	bb1b      	cbnz	r3, 801e06a <_svfiprintf_r+0x1b2>
 801e022:	9b03      	ldr	r3, [sp, #12]
 801e024:	3307      	adds	r3, #7
 801e026:	f023 0307 	bic.w	r3, r3, #7
 801e02a:	3308      	adds	r3, #8
 801e02c:	9303      	str	r3, [sp, #12]
 801e02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e030:	4433      	add	r3, r6
 801e032:	9309      	str	r3, [sp, #36]	; 0x24
 801e034:	e767      	b.n	801df06 <_svfiprintf_r+0x4e>
 801e036:	fb0c 3202 	mla	r2, ip, r2, r3
 801e03a:	460c      	mov	r4, r1
 801e03c:	2001      	movs	r0, #1
 801e03e:	e7a5      	b.n	801df8c <_svfiprintf_r+0xd4>
 801e040:	2300      	movs	r3, #0
 801e042:	3401      	adds	r4, #1
 801e044:	9305      	str	r3, [sp, #20]
 801e046:	4619      	mov	r1, r3
 801e048:	f04f 0c0a 	mov.w	ip, #10
 801e04c:	4620      	mov	r0, r4
 801e04e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e052:	3a30      	subs	r2, #48	; 0x30
 801e054:	2a09      	cmp	r2, #9
 801e056:	d903      	bls.n	801e060 <_svfiprintf_r+0x1a8>
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d0c5      	beq.n	801dfe8 <_svfiprintf_r+0x130>
 801e05c:	9105      	str	r1, [sp, #20]
 801e05e:	e7c3      	b.n	801dfe8 <_svfiprintf_r+0x130>
 801e060:	fb0c 2101 	mla	r1, ip, r1, r2
 801e064:	4604      	mov	r4, r0
 801e066:	2301      	movs	r3, #1
 801e068:	e7f0      	b.n	801e04c <_svfiprintf_r+0x194>
 801e06a:	ab03      	add	r3, sp, #12
 801e06c:	9300      	str	r3, [sp, #0]
 801e06e:	462a      	mov	r2, r5
 801e070:	4b0f      	ldr	r3, [pc, #60]	; (801e0b0 <_svfiprintf_r+0x1f8>)
 801e072:	a904      	add	r1, sp, #16
 801e074:	4638      	mov	r0, r7
 801e076:	f7fb fe33 	bl	8019ce0 <_printf_float>
 801e07a:	1c42      	adds	r2, r0, #1
 801e07c:	4606      	mov	r6, r0
 801e07e:	d1d6      	bne.n	801e02e <_svfiprintf_r+0x176>
 801e080:	89ab      	ldrh	r3, [r5, #12]
 801e082:	065b      	lsls	r3, r3, #25
 801e084:	f53f af2c 	bmi.w	801dee0 <_svfiprintf_r+0x28>
 801e088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e08a:	b01d      	add	sp, #116	; 0x74
 801e08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e090:	ab03      	add	r3, sp, #12
 801e092:	9300      	str	r3, [sp, #0]
 801e094:	462a      	mov	r2, r5
 801e096:	4b06      	ldr	r3, [pc, #24]	; (801e0b0 <_svfiprintf_r+0x1f8>)
 801e098:	a904      	add	r1, sp, #16
 801e09a:	4638      	mov	r0, r7
 801e09c:	f7fc f8c4 	bl	801a228 <_printf_i>
 801e0a0:	e7eb      	b.n	801e07a <_svfiprintf_r+0x1c2>
 801e0a2:	bf00      	nop
 801e0a4:	08020e7c 	.word	0x08020e7c
 801e0a8:	08020e86 	.word	0x08020e86
 801e0ac:	08019ce1 	.word	0x08019ce1
 801e0b0:	0801de01 	.word	0x0801de01
 801e0b4:	08020e82 	.word	0x08020e82

0801e0b8 <_sungetc_r>:
 801e0b8:	b538      	push	{r3, r4, r5, lr}
 801e0ba:	1c4b      	adds	r3, r1, #1
 801e0bc:	4614      	mov	r4, r2
 801e0be:	d103      	bne.n	801e0c8 <_sungetc_r+0x10>
 801e0c0:	f04f 35ff 	mov.w	r5, #4294967295
 801e0c4:	4628      	mov	r0, r5
 801e0c6:	bd38      	pop	{r3, r4, r5, pc}
 801e0c8:	8993      	ldrh	r3, [r2, #12]
 801e0ca:	f023 0320 	bic.w	r3, r3, #32
 801e0ce:	8193      	strh	r3, [r2, #12]
 801e0d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e0d2:	6852      	ldr	r2, [r2, #4]
 801e0d4:	b2cd      	uxtb	r5, r1
 801e0d6:	b18b      	cbz	r3, 801e0fc <_sungetc_r+0x44>
 801e0d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e0da:	4293      	cmp	r3, r2
 801e0dc:	dd08      	ble.n	801e0f0 <_sungetc_r+0x38>
 801e0de:	6823      	ldr	r3, [r4, #0]
 801e0e0:	1e5a      	subs	r2, r3, #1
 801e0e2:	6022      	str	r2, [r4, #0]
 801e0e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e0e8:	6863      	ldr	r3, [r4, #4]
 801e0ea:	3301      	adds	r3, #1
 801e0ec:	6063      	str	r3, [r4, #4]
 801e0ee:	e7e9      	b.n	801e0c4 <_sungetc_r+0xc>
 801e0f0:	4621      	mov	r1, r4
 801e0f2:	f000 fca5 	bl	801ea40 <__submore>
 801e0f6:	2800      	cmp	r0, #0
 801e0f8:	d0f1      	beq.n	801e0de <_sungetc_r+0x26>
 801e0fa:	e7e1      	b.n	801e0c0 <_sungetc_r+0x8>
 801e0fc:	6921      	ldr	r1, [r4, #16]
 801e0fe:	6823      	ldr	r3, [r4, #0]
 801e100:	b151      	cbz	r1, 801e118 <_sungetc_r+0x60>
 801e102:	4299      	cmp	r1, r3
 801e104:	d208      	bcs.n	801e118 <_sungetc_r+0x60>
 801e106:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e10a:	42a9      	cmp	r1, r5
 801e10c:	d104      	bne.n	801e118 <_sungetc_r+0x60>
 801e10e:	3b01      	subs	r3, #1
 801e110:	3201      	adds	r2, #1
 801e112:	6023      	str	r3, [r4, #0]
 801e114:	6062      	str	r2, [r4, #4]
 801e116:	e7d5      	b.n	801e0c4 <_sungetc_r+0xc>
 801e118:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e120:	6363      	str	r3, [r4, #52]	; 0x34
 801e122:	2303      	movs	r3, #3
 801e124:	63a3      	str	r3, [r4, #56]	; 0x38
 801e126:	4623      	mov	r3, r4
 801e128:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e12c:	6023      	str	r3, [r4, #0]
 801e12e:	2301      	movs	r3, #1
 801e130:	e7dc      	b.n	801e0ec <_sungetc_r+0x34>

0801e132 <__ssrefill_r>:
 801e132:	b510      	push	{r4, lr}
 801e134:	460c      	mov	r4, r1
 801e136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e138:	b169      	cbz	r1, 801e156 <__ssrefill_r+0x24>
 801e13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e13e:	4299      	cmp	r1, r3
 801e140:	d001      	beq.n	801e146 <__ssrefill_r+0x14>
 801e142:	f7fb fc83 	bl	8019a4c <_free_r>
 801e146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e148:	6063      	str	r3, [r4, #4]
 801e14a:	2000      	movs	r0, #0
 801e14c:	6360      	str	r0, [r4, #52]	; 0x34
 801e14e:	b113      	cbz	r3, 801e156 <__ssrefill_r+0x24>
 801e150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e152:	6023      	str	r3, [r4, #0]
 801e154:	bd10      	pop	{r4, pc}
 801e156:	6923      	ldr	r3, [r4, #16]
 801e158:	6023      	str	r3, [r4, #0]
 801e15a:	2300      	movs	r3, #0
 801e15c:	6063      	str	r3, [r4, #4]
 801e15e:	89a3      	ldrh	r3, [r4, #12]
 801e160:	f043 0320 	orr.w	r3, r3, #32
 801e164:	81a3      	strh	r3, [r4, #12]
 801e166:	f04f 30ff 	mov.w	r0, #4294967295
 801e16a:	e7f3      	b.n	801e154 <__ssrefill_r+0x22>

0801e16c <__ssvfiscanf_r>:
 801e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e170:	460c      	mov	r4, r1
 801e172:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e176:	2100      	movs	r1, #0
 801e178:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e17c:	49b2      	ldr	r1, [pc, #712]	; (801e448 <__ssvfiscanf_r+0x2dc>)
 801e17e:	91a0      	str	r1, [sp, #640]	; 0x280
 801e180:	f10d 0804 	add.w	r8, sp, #4
 801e184:	49b1      	ldr	r1, [pc, #708]	; (801e44c <__ssvfiscanf_r+0x2e0>)
 801e186:	4fb2      	ldr	r7, [pc, #712]	; (801e450 <__ssvfiscanf_r+0x2e4>)
 801e188:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801e454 <__ssvfiscanf_r+0x2e8>
 801e18c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e190:	4606      	mov	r6, r0
 801e192:	91a1      	str	r1, [sp, #644]	; 0x284
 801e194:	9300      	str	r3, [sp, #0]
 801e196:	f892 a000 	ldrb.w	sl, [r2]
 801e19a:	f1ba 0f00 	cmp.w	sl, #0
 801e19e:	f000 8151 	beq.w	801e444 <__ssvfiscanf_r+0x2d8>
 801e1a2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801e1a6:	f013 0308 	ands.w	r3, r3, #8
 801e1aa:	f102 0501 	add.w	r5, r2, #1
 801e1ae:	d019      	beq.n	801e1e4 <__ssvfiscanf_r+0x78>
 801e1b0:	6863      	ldr	r3, [r4, #4]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	dd0f      	ble.n	801e1d6 <__ssvfiscanf_r+0x6a>
 801e1b6:	6823      	ldr	r3, [r4, #0]
 801e1b8:	781a      	ldrb	r2, [r3, #0]
 801e1ba:	5cba      	ldrb	r2, [r7, r2]
 801e1bc:	0712      	lsls	r2, r2, #28
 801e1be:	d401      	bmi.n	801e1c4 <__ssvfiscanf_r+0x58>
 801e1c0:	462a      	mov	r2, r5
 801e1c2:	e7e8      	b.n	801e196 <__ssvfiscanf_r+0x2a>
 801e1c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e1c6:	3201      	adds	r2, #1
 801e1c8:	9245      	str	r2, [sp, #276]	; 0x114
 801e1ca:	6862      	ldr	r2, [r4, #4]
 801e1cc:	3301      	adds	r3, #1
 801e1ce:	3a01      	subs	r2, #1
 801e1d0:	6062      	str	r2, [r4, #4]
 801e1d2:	6023      	str	r3, [r4, #0]
 801e1d4:	e7ec      	b.n	801e1b0 <__ssvfiscanf_r+0x44>
 801e1d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e1d8:	4621      	mov	r1, r4
 801e1da:	4630      	mov	r0, r6
 801e1dc:	4798      	blx	r3
 801e1de:	2800      	cmp	r0, #0
 801e1e0:	d0e9      	beq.n	801e1b6 <__ssvfiscanf_r+0x4a>
 801e1e2:	e7ed      	b.n	801e1c0 <__ssvfiscanf_r+0x54>
 801e1e4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801e1e8:	f040 8083 	bne.w	801e2f2 <__ssvfiscanf_r+0x186>
 801e1ec:	9341      	str	r3, [sp, #260]	; 0x104
 801e1ee:	9343      	str	r3, [sp, #268]	; 0x10c
 801e1f0:	7853      	ldrb	r3, [r2, #1]
 801e1f2:	2b2a      	cmp	r3, #42	; 0x2a
 801e1f4:	bf02      	ittt	eq
 801e1f6:	2310      	moveq	r3, #16
 801e1f8:	1c95      	addeq	r5, r2, #2
 801e1fa:	9341      	streq	r3, [sp, #260]	; 0x104
 801e1fc:	220a      	movs	r2, #10
 801e1fe:	46ab      	mov	fp, r5
 801e200:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801e204:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e208:	2b09      	cmp	r3, #9
 801e20a:	d91d      	bls.n	801e248 <__ssvfiscanf_r+0xdc>
 801e20c:	4891      	ldr	r0, [pc, #580]	; (801e454 <__ssvfiscanf_r+0x2e8>)
 801e20e:	2203      	movs	r2, #3
 801e210:	f7e1 fff6 	bl	8000200 <memchr>
 801e214:	b140      	cbz	r0, 801e228 <__ssvfiscanf_r+0xbc>
 801e216:	2301      	movs	r3, #1
 801e218:	eba0 0009 	sub.w	r0, r0, r9
 801e21c:	fa03 f000 	lsl.w	r0, r3, r0
 801e220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e222:	4318      	orrs	r0, r3
 801e224:	9041      	str	r0, [sp, #260]	; 0x104
 801e226:	465d      	mov	r5, fp
 801e228:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e22c:	2b78      	cmp	r3, #120	; 0x78
 801e22e:	d806      	bhi.n	801e23e <__ssvfiscanf_r+0xd2>
 801e230:	2b57      	cmp	r3, #87	; 0x57
 801e232:	d810      	bhi.n	801e256 <__ssvfiscanf_r+0xea>
 801e234:	2b25      	cmp	r3, #37	; 0x25
 801e236:	d05c      	beq.n	801e2f2 <__ssvfiscanf_r+0x186>
 801e238:	d856      	bhi.n	801e2e8 <__ssvfiscanf_r+0x17c>
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d074      	beq.n	801e328 <__ssvfiscanf_r+0x1bc>
 801e23e:	2303      	movs	r3, #3
 801e240:	9347      	str	r3, [sp, #284]	; 0x11c
 801e242:	230a      	movs	r3, #10
 801e244:	9342      	str	r3, [sp, #264]	; 0x108
 801e246:	e081      	b.n	801e34c <__ssvfiscanf_r+0x1e0>
 801e248:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e24a:	fb02 1303 	mla	r3, r2, r3, r1
 801e24e:	3b30      	subs	r3, #48	; 0x30
 801e250:	9343      	str	r3, [sp, #268]	; 0x10c
 801e252:	465d      	mov	r5, fp
 801e254:	e7d3      	b.n	801e1fe <__ssvfiscanf_r+0x92>
 801e256:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e25a:	2a20      	cmp	r2, #32
 801e25c:	d8ef      	bhi.n	801e23e <__ssvfiscanf_r+0xd2>
 801e25e:	a101      	add	r1, pc, #4	; (adr r1, 801e264 <__ssvfiscanf_r+0xf8>)
 801e260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e264:	0801e337 	.word	0x0801e337
 801e268:	0801e23f 	.word	0x0801e23f
 801e26c:	0801e23f 	.word	0x0801e23f
 801e270:	0801e395 	.word	0x0801e395
 801e274:	0801e23f 	.word	0x0801e23f
 801e278:	0801e23f 	.word	0x0801e23f
 801e27c:	0801e23f 	.word	0x0801e23f
 801e280:	0801e23f 	.word	0x0801e23f
 801e284:	0801e23f 	.word	0x0801e23f
 801e288:	0801e23f 	.word	0x0801e23f
 801e28c:	0801e23f 	.word	0x0801e23f
 801e290:	0801e3ab 	.word	0x0801e3ab
 801e294:	0801e381 	.word	0x0801e381
 801e298:	0801e2ef 	.word	0x0801e2ef
 801e29c:	0801e2ef 	.word	0x0801e2ef
 801e2a0:	0801e2ef 	.word	0x0801e2ef
 801e2a4:	0801e23f 	.word	0x0801e23f
 801e2a8:	0801e385 	.word	0x0801e385
 801e2ac:	0801e23f 	.word	0x0801e23f
 801e2b0:	0801e23f 	.word	0x0801e23f
 801e2b4:	0801e23f 	.word	0x0801e23f
 801e2b8:	0801e23f 	.word	0x0801e23f
 801e2bc:	0801e3bb 	.word	0x0801e3bb
 801e2c0:	0801e38d 	.word	0x0801e38d
 801e2c4:	0801e32f 	.word	0x0801e32f
 801e2c8:	0801e23f 	.word	0x0801e23f
 801e2cc:	0801e23f 	.word	0x0801e23f
 801e2d0:	0801e3b7 	.word	0x0801e3b7
 801e2d4:	0801e23f 	.word	0x0801e23f
 801e2d8:	0801e381 	.word	0x0801e381
 801e2dc:	0801e23f 	.word	0x0801e23f
 801e2e0:	0801e23f 	.word	0x0801e23f
 801e2e4:	0801e337 	.word	0x0801e337
 801e2e8:	3b45      	subs	r3, #69	; 0x45
 801e2ea:	2b02      	cmp	r3, #2
 801e2ec:	d8a7      	bhi.n	801e23e <__ssvfiscanf_r+0xd2>
 801e2ee:	2305      	movs	r3, #5
 801e2f0:	e02b      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e2f2:	6863      	ldr	r3, [r4, #4]
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	dd0d      	ble.n	801e314 <__ssvfiscanf_r+0x1a8>
 801e2f8:	6823      	ldr	r3, [r4, #0]
 801e2fa:	781a      	ldrb	r2, [r3, #0]
 801e2fc:	4552      	cmp	r2, sl
 801e2fe:	f040 80a1 	bne.w	801e444 <__ssvfiscanf_r+0x2d8>
 801e302:	3301      	adds	r3, #1
 801e304:	6862      	ldr	r2, [r4, #4]
 801e306:	6023      	str	r3, [r4, #0]
 801e308:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e30a:	3a01      	subs	r2, #1
 801e30c:	3301      	adds	r3, #1
 801e30e:	6062      	str	r2, [r4, #4]
 801e310:	9345      	str	r3, [sp, #276]	; 0x114
 801e312:	e755      	b.n	801e1c0 <__ssvfiscanf_r+0x54>
 801e314:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e316:	4621      	mov	r1, r4
 801e318:	4630      	mov	r0, r6
 801e31a:	4798      	blx	r3
 801e31c:	2800      	cmp	r0, #0
 801e31e:	d0eb      	beq.n	801e2f8 <__ssvfiscanf_r+0x18c>
 801e320:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e322:	2800      	cmp	r0, #0
 801e324:	f040 8084 	bne.w	801e430 <__ssvfiscanf_r+0x2c4>
 801e328:	f04f 30ff 	mov.w	r0, #4294967295
 801e32c:	e086      	b.n	801e43c <__ssvfiscanf_r+0x2d0>
 801e32e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e330:	f042 0220 	orr.w	r2, r2, #32
 801e334:	9241      	str	r2, [sp, #260]	; 0x104
 801e336:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e33c:	9241      	str	r2, [sp, #260]	; 0x104
 801e33e:	2210      	movs	r2, #16
 801e340:	2b6f      	cmp	r3, #111	; 0x6f
 801e342:	9242      	str	r2, [sp, #264]	; 0x108
 801e344:	bf34      	ite	cc
 801e346:	2303      	movcc	r3, #3
 801e348:	2304      	movcs	r3, #4
 801e34a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e34c:	6863      	ldr	r3, [r4, #4]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	dd41      	ble.n	801e3d6 <__ssvfiscanf_r+0x26a>
 801e352:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e354:	0659      	lsls	r1, r3, #25
 801e356:	d404      	bmi.n	801e362 <__ssvfiscanf_r+0x1f6>
 801e358:	6823      	ldr	r3, [r4, #0]
 801e35a:	781a      	ldrb	r2, [r3, #0]
 801e35c:	5cba      	ldrb	r2, [r7, r2]
 801e35e:	0712      	lsls	r2, r2, #28
 801e360:	d440      	bmi.n	801e3e4 <__ssvfiscanf_r+0x278>
 801e362:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e364:	2b02      	cmp	r3, #2
 801e366:	dc4f      	bgt.n	801e408 <__ssvfiscanf_r+0x29c>
 801e368:	466b      	mov	r3, sp
 801e36a:	4622      	mov	r2, r4
 801e36c:	a941      	add	r1, sp, #260	; 0x104
 801e36e:	4630      	mov	r0, r6
 801e370:	f000 f9ce 	bl	801e710 <_scanf_chars>
 801e374:	2801      	cmp	r0, #1
 801e376:	d065      	beq.n	801e444 <__ssvfiscanf_r+0x2d8>
 801e378:	2802      	cmp	r0, #2
 801e37a:	f47f af21 	bne.w	801e1c0 <__ssvfiscanf_r+0x54>
 801e37e:	e7cf      	b.n	801e320 <__ssvfiscanf_r+0x1b4>
 801e380:	220a      	movs	r2, #10
 801e382:	e7dd      	b.n	801e340 <__ssvfiscanf_r+0x1d4>
 801e384:	2300      	movs	r3, #0
 801e386:	9342      	str	r3, [sp, #264]	; 0x108
 801e388:	2303      	movs	r3, #3
 801e38a:	e7de      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e38c:	2308      	movs	r3, #8
 801e38e:	9342      	str	r3, [sp, #264]	; 0x108
 801e390:	2304      	movs	r3, #4
 801e392:	e7da      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e394:	4629      	mov	r1, r5
 801e396:	4640      	mov	r0, r8
 801e398:	f000 fb18 	bl	801e9cc <__sccl>
 801e39c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3a2:	9341      	str	r3, [sp, #260]	; 0x104
 801e3a4:	4605      	mov	r5, r0
 801e3a6:	2301      	movs	r3, #1
 801e3a8:	e7cf      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e3aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3b0:	9341      	str	r3, [sp, #260]	; 0x104
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	e7c9      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e3b6:	2302      	movs	r3, #2
 801e3b8:	e7c7      	b.n	801e34a <__ssvfiscanf_r+0x1de>
 801e3ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e3bc:	06c3      	lsls	r3, r0, #27
 801e3be:	f53f aeff 	bmi.w	801e1c0 <__ssvfiscanf_r+0x54>
 801e3c2:	9b00      	ldr	r3, [sp, #0]
 801e3c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e3c6:	1d19      	adds	r1, r3, #4
 801e3c8:	9100      	str	r1, [sp, #0]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	07c0      	lsls	r0, r0, #31
 801e3ce:	bf4c      	ite	mi
 801e3d0:	801a      	strhmi	r2, [r3, #0]
 801e3d2:	601a      	strpl	r2, [r3, #0]
 801e3d4:	e6f4      	b.n	801e1c0 <__ssvfiscanf_r+0x54>
 801e3d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e3d8:	4621      	mov	r1, r4
 801e3da:	4630      	mov	r0, r6
 801e3dc:	4798      	blx	r3
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	d0b7      	beq.n	801e352 <__ssvfiscanf_r+0x1e6>
 801e3e2:	e79d      	b.n	801e320 <__ssvfiscanf_r+0x1b4>
 801e3e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e3e6:	3201      	adds	r2, #1
 801e3e8:	9245      	str	r2, [sp, #276]	; 0x114
 801e3ea:	6862      	ldr	r2, [r4, #4]
 801e3ec:	3a01      	subs	r2, #1
 801e3ee:	2a00      	cmp	r2, #0
 801e3f0:	6062      	str	r2, [r4, #4]
 801e3f2:	dd02      	ble.n	801e3fa <__ssvfiscanf_r+0x28e>
 801e3f4:	3301      	adds	r3, #1
 801e3f6:	6023      	str	r3, [r4, #0]
 801e3f8:	e7ae      	b.n	801e358 <__ssvfiscanf_r+0x1ec>
 801e3fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e3fc:	4621      	mov	r1, r4
 801e3fe:	4630      	mov	r0, r6
 801e400:	4798      	blx	r3
 801e402:	2800      	cmp	r0, #0
 801e404:	d0a8      	beq.n	801e358 <__ssvfiscanf_r+0x1ec>
 801e406:	e78b      	b.n	801e320 <__ssvfiscanf_r+0x1b4>
 801e408:	2b04      	cmp	r3, #4
 801e40a:	dc06      	bgt.n	801e41a <__ssvfiscanf_r+0x2ae>
 801e40c:	466b      	mov	r3, sp
 801e40e:	4622      	mov	r2, r4
 801e410:	a941      	add	r1, sp, #260	; 0x104
 801e412:	4630      	mov	r0, r6
 801e414:	f000 f9d4 	bl	801e7c0 <_scanf_i>
 801e418:	e7ac      	b.n	801e374 <__ssvfiscanf_r+0x208>
 801e41a:	4b0f      	ldr	r3, [pc, #60]	; (801e458 <__ssvfiscanf_r+0x2ec>)
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	f43f aecf 	beq.w	801e1c0 <__ssvfiscanf_r+0x54>
 801e422:	466b      	mov	r3, sp
 801e424:	4622      	mov	r2, r4
 801e426:	a941      	add	r1, sp, #260	; 0x104
 801e428:	4630      	mov	r0, r6
 801e42a:	f7fc f823 	bl	801a474 <_scanf_float>
 801e42e:	e7a1      	b.n	801e374 <__ssvfiscanf_r+0x208>
 801e430:	89a3      	ldrh	r3, [r4, #12]
 801e432:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e436:	bf18      	it	ne
 801e438:	f04f 30ff 	movne.w	r0, #4294967295
 801e43c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801e440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e444:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e446:	e7f9      	b.n	801e43c <__ssvfiscanf_r+0x2d0>
 801e448:	0801e0b9 	.word	0x0801e0b9
 801e44c:	0801e133 	.word	0x0801e133
 801e450:	080209e1 	.word	0x080209e1
 801e454:	08020e82 	.word	0x08020e82
 801e458:	0801a475 	.word	0x0801a475

0801e45c <__sfputc_r>:
 801e45c:	6893      	ldr	r3, [r2, #8]
 801e45e:	3b01      	subs	r3, #1
 801e460:	2b00      	cmp	r3, #0
 801e462:	b410      	push	{r4}
 801e464:	6093      	str	r3, [r2, #8]
 801e466:	da08      	bge.n	801e47a <__sfputc_r+0x1e>
 801e468:	6994      	ldr	r4, [r2, #24]
 801e46a:	42a3      	cmp	r3, r4
 801e46c:	db01      	blt.n	801e472 <__sfputc_r+0x16>
 801e46e:	290a      	cmp	r1, #10
 801e470:	d103      	bne.n	801e47a <__sfputc_r+0x1e>
 801e472:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e476:	f7fd bb7f 	b.w	801bb78 <__swbuf_r>
 801e47a:	6813      	ldr	r3, [r2, #0]
 801e47c:	1c58      	adds	r0, r3, #1
 801e47e:	6010      	str	r0, [r2, #0]
 801e480:	7019      	strb	r1, [r3, #0]
 801e482:	4608      	mov	r0, r1
 801e484:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e488:	4770      	bx	lr

0801e48a <__sfputs_r>:
 801e48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e48c:	4606      	mov	r6, r0
 801e48e:	460f      	mov	r7, r1
 801e490:	4614      	mov	r4, r2
 801e492:	18d5      	adds	r5, r2, r3
 801e494:	42ac      	cmp	r4, r5
 801e496:	d101      	bne.n	801e49c <__sfputs_r+0x12>
 801e498:	2000      	movs	r0, #0
 801e49a:	e007      	b.n	801e4ac <__sfputs_r+0x22>
 801e49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4a0:	463a      	mov	r2, r7
 801e4a2:	4630      	mov	r0, r6
 801e4a4:	f7ff ffda 	bl	801e45c <__sfputc_r>
 801e4a8:	1c43      	adds	r3, r0, #1
 801e4aa:	d1f3      	bne.n	801e494 <__sfputs_r+0xa>
 801e4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e4b0 <_vfiprintf_r>:
 801e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b4:	460d      	mov	r5, r1
 801e4b6:	b09d      	sub	sp, #116	; 0x74
 801e4b8:	4614      	mov	r4, r2
 801e4ba:	4698      	mov	r8, r3
 801e4bc:	4606      	mov	r6, r0
 801e4be:	b118      	cbz	r0, 801e4c8 <_vfiprintf_r+0x18>
 801e4c0:	6983      	ldr	r3, [r0, #24]
 801e4c2:	b90b      	cbnz	r3, 801e4c8 <_vfiprintf_r+0x18>
 801e4c4:	f7fb f9c4 	bl	8019850 <__sinit>
 801e4c8:	4b89      	ldr	r3, [pc, #548]	; (801e6f0 <_vfiprintf_r+0x240>)
 801e4ca:	429d      	cmp	r5, r3
 801e4cc:	d11b      	bne.n	801e506 <_vfiprintf_r+0x56>
 801e4ce:	6875      	ldr	r5, [r6, #4]
 801e4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e4d2:	07d9      	lsls	r1, r3, #31
 801e4d4:	d405      	bmi.n	801e4e2 <_vfiprintf_r+0x32>
 801e4d6:	89ab      	ldrh	r3, [r5, #12]
 801e4d8:	059a      	lsls	r2, r3, #22
 801e4da:	d402      	bmi.n	801e4e2 <_vfiprintf_r+0x32>
 801e4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e4de:	f7fb fa7a 	bl	80199d6 <__retarget_lock_acquire_recursive>
 801e4e2:	89ab      	ldrh	r3, [r5, #12]
 801e4e4:	071b      	lsls	r3, r3, #28
 801e4e6:	d501      	bpl.n	801e4ec <_vfiprintf_r+0x3c>
 801e4e8:	692b      	ldr	r3, [r5, #16]
 801e4ea:	b9eb      	cbnz	r3, 801e528 <_vfiprintf_r+0x78>
 801e4ec:	4629      	mov	r1, r5
 801e4ee:	4630      	mov	r0, r6
 801e4f0:	f7fd fba6 	bl	801bc40 <__swsetup_r>
 801e4f4:	b1c0      	cbz	r0, 801e528 <_vfiprintf_r+0x78>
 801e4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e4f8:	07dc      	lsls	r4, r3, #31
 801e4fa:	d50e      	bpl.n	801e51a <_vfiprintf_r+0x6a>
 801e4fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e500:	b01d      	add	sp, #116	; 0x74
 801e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e506:	4b7b      	ldr	r3, [pc, #492]	; (801e6f4 <_vfiprintf_r+0x244>)
 801e508:	429d      	cmp	r5, r3
 801e50a:	d101      	bne.n	801e510 <_vfiprintf_r+0x60>
 801e50c:	68b5      	ldr	r5, [r6, #8]
 801e50e:	e7df      	b.n	801e4d0 <_vfiprintf_r+0x20>
 801e510:	4b79      	ldr	r3, [pc, #484]	; (801e6f8 <_vfiprintf_r+0x248>)
 801e512:	429d      	cmp	r5, r3
 801e514:	bf08      	it	eq
 801e516:	68f5      	ldreq	r5, [r6, #12]
 801e518:	e7da      	b.n	801e4d0 <_vfiprintf_r+0x20>
 801e51a:	89ab      	ldrh	r3, [r5, #12]
 801e51c:	0598      	lsls	r0, r3, #22
 801e51e:	d4ed      	bmi.n	801e4fc <_vfiprintf_r+0x4c>
 801e520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e522:	f7fb fa59 	bl	80199d8 <__retarget_lock_release_recursive>
 801e526:	e7e9      	b.n	801e4fc <_vfiprintf_r+0x4c>
 801e528:	2300      	movs	r3, #0
 801e52a:	9309      	str	r3, [sp, #36]	; 0x24
 801e52c:	2320      	movs	r3, #32
 801e52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e532:	f8cd 800c 	str.w	r8, [sp, #12]
 801e536:	2330      	movs	r3, #48	; 0x30
 801e538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e6fc <_vfiprintf_r+0x24c>
 801e53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e540:	f04f 0901 	mov.w	r9, #1
 801e544:	4623      	mov	r3, r4
 801e546:	469a      	mov	sl, r3
 801e548:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e54c:	b10a      	cbz	r2, 801e552 <_vfiprintf_r+0xa2>
 801e54e:	2a25      	cmp	r2, #37	; 0x25
 801e550:	d1f9      	bne.n	801e546 <_vfiprintf_r+0x96>
 801e552:	ebba 0b04 	subs.w	fp, sl, r4
 801e556:	d00b      	beq.n	801e570 <_vfiprintf_r+0xc0>
 801e558:	465b      	mov	r3, fp
 801e55a:	4622      	mov	r2, r4
 801e55c:	4629      	mov	r1, r5
 801e55e:	4630      	mov	r0, r6
 801e560:	f7ff ff93 	bl	801e48a <__sfputs_r>
 801e564:	3001      	adds	r0, #1
 801e566:	f000 80aa 	beq.w	801e6be <_vfiprintf_r+0x20e>
 801e56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e56c:	445a      	add	r2, fp
 801e56e:	9209      	str	r2, [sp, #36]	; 0x24
 801e570:	f89a 3000 	ldrb.w	r3, [sl]
 801e574:	2b00      	cmp	r3, #0
 801e576:	f000 80a2 	beq.w	801e6be <_vfiprintf_r+0x20e>
 801e57a:	2300      	movs	r3, #0
 801e57c:	f04f 32ff 	mov.w	r2, #4294967295
 801e580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e584:	f10a 0a01 	add.w	sl, sl, #1
 801e588:	9304      	str	r3, [sp, #16]
 801e58a:	9307      	str	r3, [sp, #28]
 801e58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e590:	931a      	str	r3, [sp, #104]	; 0x68
 801e592:	4654      	mov	r4, sl
 801e594:	2205      	movs	r2, #5
 801e596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e59a:	4858      	ldr	r0, [pc, #352]	; (801e6fc <_vfiprintf_r+0x24c>)
 801e59c:	f7e1 fe30 	bl	8000200 <memchr>
 801e5a0:	9a04      	ldr	r2, [sp, #16]
 801e5a2:	b9d8      	cbnz	r0, 801e5dc <_vfiprintf_r+0x12c>
 801e5a4:	06d1      	lsls	r1, r2, #27
 801e5a6:	bf44      	itt	mi
 801e5a8:	2320      	movmi	r3, #32
 801e5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5ae:	0713      	lsls	r3, r2, #28
 801e5b0:	bf44      	itt	mi
 801e5b2:	232b      	movmi	r3, #43	; 0x2b
 801e5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5b8:	f89a 3000 	ldrb.w	r3, [sl]
 801e5bc:	2b2a      	cmp	r3, #42	; 0x2a
 801e5be:	d015      	beq.n	801e5ec <_vfiprintf_r+0x13c>
 801e5c0:	9a07      	ldr	r2, [sp, #28]
 801e5c2:	4654      	mov	r4, sl
 801e5c4:	2000      	movs	r0, #0
 801e5c6:	f04f 0c0a 	mov.w	ip, #10
 801e5ca:	4621      	mov	r1, r4
 801e5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e5d0:	3b30      	subs	r3, #48	; 0x30
 801e5d2:	2b09      	cmp	r3, #9
 801e5d4:	d94e      	bls.n	801e674 <_vfiprintf_r+0x1c4>
 801e5d6:	b1b0      	cbz	r0, 801e606 <_vfiprintf_r+0x156>
 801e5d8:	9207      	str	r2, [sp, #28]
 801e5da:	e014      	b.n	801e606 <_vfiprintf_r+0x156>
 801e5dc:	eba0 0308 	sub.w	r3, r0, r8
 801e5e0:	fa09 f303 	lsl.w	r3, r9, r3
 801e5e4:	4313      	orrs	r3, r2
 801e5e6:	9304      	str	r3, [sp, #16]
 801e5e8:	46a2      	mov	sl, r4
 801e5ea:	e7d2      	b.n	801e592 <_vfiprintf_r+0xe2>
 801e5ec:	9b03      	ldr	r3, [sp, #12]
 801e5ee:	1d19      	adds	r1, r3, #4
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	9103      	str	r1, [sp, #12]
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	bfbb      	ittet	lt
 801e5f8:	425b      	neglt	r3, r3
 801e5fa:	f042 0202 	orrlt.w	r2, r2, #2
 801e5fe:	9307      	strge	r3, [sp, #28]
 801e600:	9307      	strlt	r3, [sp, #28]
 801e602:	bfb8      	it	lt
 801e604:	9204      	strlt	r2, [sp, #16]
 801e606:	7823      	ldrb	r3, [r4, #0]
 801e608:	2b2e      	cmp	r3, #46	; 0x2e
 801e60a:	d10c      	bne.n	801e626 <_vfiprintf_r+0x176>
 801e60c:	7863      	ldrb	r3, [r4, #1]
 801e60e:	2b2a      	cmp	r3, #42	; 0x2a
 801e610:	d135      	bne.n	801e67e <_vfiprintf_r+0x1ce>
 801e612:	9b03      	ldr	r3, [sp, #12]
 801e614:	1d1a      	adds	r2, r3, #4
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	9203      	str	r2, [sp, #12]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	bfb8      	it	lt
 801e61e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e622:	3402      	adds	r4, #2
 801e624:	9305      	str	r3, [sp, #20]
 801e626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e70c <_vfiprintf_r+0x25c>
 801e62a:	7821      	ldrb	r1, [r4, #0]
 801e62c:	2203      	movs	r2, #3
 801e62e:	4650      	mov	r0, sl
 801e630:	f7e1 fde6 	bl	8000200 <memchr>
 801e634:	b140      	cbz	r0, 801e648 <_vfiprintf_r+0x198>
 801e636:	2340      	movs	r3, #64	; 0x40
 801e638:	eba0 000a 	sub.w	r0, r0, sl
 801e63c:	fa03 f000 	lsl.w	r0, r3, r0
 801e640:	9b04      	ldr	r3, [sp, #16]
 801e642:	4303      	orrs	r3, r0
 801e644:	3401      	adds	r4, #1
 801e646:	9304      	str	r3, [sp, #16]
 801e648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e64c:	482c      	ldr	r0, [pc, #176]	; (801e700 <_vfiprintf_r+0x250>)
 801e64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e652:	2206      	movs	r2, #6
 801e654:	f7e1 fdd4 	bl	8000200 <memchr>
 801e658:	2800      	cmp	r0, #0
 801e65a:	d03f      	beq.n	801e6dc <_vfiprintf_r+0x22c>
 801e65c:	4b29      	ldr	r3, [pc, #164]	; (801e704 <_vfiprintf_r+0x254>)
 801e65e:	bb1b      	cbnz	r3, 801e6a8 <_vfiprintf_r+0x1f8>
 801e660:	9b03      	ldr	r3, [sp, #12]
 801e662:	3307      	adds	r3, #7
 801e664:	f023 0307 	bic.w	r3, r3, #7
 801e668:	3308      	adds	r3, #8
 801e66a:	9303      	str	r3, [sp, #12]
 801e66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e66e:	443b      	add	r3, r7
 801e670:	9309      	str	r3, [sp, #36]	; 0x24
 801e672:	e767      	b.n	801e544 <_vfiprintf_r+0x94>
 801e674:	fb0c 3202 	mla	r2, ip, r2, r3
 801e678:	460c      	mov	r4, r1
 801e67a:	2001      	movs	r0, #1
 801e67c:	e7a5      	b.n	801e5ca <_vfiprintf_r+0x11a>
 801e67e:	2300      	movs	r3, #0
 801e680:	3401      	adds	r4, #1
 801e682:	9305      	str	r3, [sp, #20]
 801e684:	4619      	mov	r1, r3
 801e686:	f04f 0c0a 	mov.w	ip, #10
 801e68a:	4620      	mov	r0, r4
 801e68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e690:	3a30      	subs	r2, #48	; 0x30
 801e692:	2a09      	cmp	r2, #9
 801e694:	d903      	bls.n	801e69e <_vfiprintf_r+0x1ee>
 801e696:	2b00      	cmp	r3, #0
 801e698:	d0c5      	beq.n	801e626 <_vfiprintf_r+0x176>
 801e69a:	9105      	str	r1, [sp, #20]
 801e69c:	e7c3      	b.n	801e626 <_vfiprintf_r+0x176>
 801e69e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e6a2:	4604      	mov	r4, r0
 801e6a4:	2301      	movs	r3, #1
 801e6a6:	e7f0      	b.n	801e68a <_vfiprintf_r+0x1da>
 801e6a8:	ab03      	add	r3, sp, #12
 801e6aa:	9300      	str	r3, [sp, #0]
 801e6ac:	462a      	mov	r2, r5
 801e6ae:	4b16      	ldr	r3, [pc, #88]	; (801e708 <_vfiprintf_r+0x258>)
 801e6b0:	a904      	add	r1, sp, #16
 801e6b2:	4630      	mov	r0, r6
 801e6b4:	f7fb fb14 	bl	8019ce0 <_printf_float>
 801e6b8:	4607      	mov	r7, r0
 801e6ba:	1c78      	adds	r0, r7, #1
 801e6bc:	d1d6      	bne.n	801e66c <_vfiprintf_r+0x1bc>
 801e6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6c0:	07d9      	lsls	r1, r3, #31
 801e6c2:	d405      	bmi.n	801e6d0 <_vfiprintf_r+0x220>
 801e6c4:	89ab      	ldrh	r3, [r5, #12]
 801e6c6:	059a      	lsls	r2, r3, #22
 801e6c8:	d402      	bmi.n	801e6d0 <_vfiprintf_r+0x220>
 801e6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6cc:	f7fb f984 	bl	80199d8 <__retarget_lock_release_recursive>
 801e6d0:	89ab      	ldrh	r3, [r5, #12]
 801e6d2:	065b      	lsls	r3, r3, #25
 801e6d4:	f53f af12 	bmi.w	801e4fc <_vfiprintf_r+0x4c>
 801e6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e6da:	e711      	b.n	801e500 <_vfiprintf_r+0x50>
 801e6dc:	ab03      	add	r3, sp, #12
 801e6de:	9300      	str	r3, [sp, #0]
 801e6e0:	462a      	mov	r2, r5
 801e6e2:	4b09      	ldr	r3, [pc, #36]	; (801e708 <_vfiprintf_r+0x258>)
 801e6e4:	a904      	add	r1, sp, #16
 801e6e6:	4630      	mov	r0, r6
 801e6e8:	f7fb fd9e 	bl	801a228 <_printf_i>
 801e6ec:	e7e4      	b.n	801e6b8 <_vfiprintf_r+0x208>
 801e6ee:	bf00      	nop
 801e6f0:	08020b04 	.word	0x08020b04
 801e6f4:	08020b24 	.word	0x08020b24
 801e6f8:	08020ae4 	.word	0x08020ae4
 801e6fc:	08020e7c 	.word	0x08020e7c
 801e700:	08020e86 	.word	0x08020e86
 801e704:	08019ce1 	.word	0x08019ce1
 801e708:	0801e48b 	.word	0x0801e48b
 801e70c:	08020e82 	.word	0x08020e82

0801e710 <_scanf_chars>:
 801e710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e714:	4615      	mov	r5, r2
 801e716:	688a      	ldr	r2, [r1, #8]
 801e718:	4680      	mov	r8, r0
 801e71a:	460c      	mov	r4, r1
 801e71c:	b932      	cbnz	r2, 801e72c <_scanf_chars+0x1c>
 801e71e:	698a      	ldr	r2, [r1, #24]
 801e720:	2a00      	cmp	r2, #0
 801e722:	bf0c      	ite	eq
 801e724:	2201      	moveq	r2, #1
 801e726:	f04f 32ff 	movne.w	r2, #4294967295
 801e72a:	608a      	str	r2, [r1, #8]
 801e72c:	6822      	ldr	r2, [r4, #0]
 801e72e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801e7bc <_scanf_chars+0xac>
 801e732:	06d1      	lsls	r1, r2, #27
 801e734:	bf5f      	itttt	pl
 801e736:	681a      	ldrpl	r2, [r3, #0]
 801e738:	1d11      	addpl	r1, r2, #4
 801e73a:	6019      	strpl	r1, [r3, #0]
 801e73c:	6816      	ldrpl	r6, [r2, #0]
 801e73e:	2700      	movs	r7, #0
 801e740:	69a0      	ldr	r0, [r4, #24]
 801e742:	b188      	cbz	r0, 801e768 <_scanf_chars+0x58>
 801e744:	2801      	cmp	r0, #1
 801e746:	d107      	bne.n	801e758 <_scanf_chars+0x48>
 801e748:	682b      	ldr	r3, [r5, #0]
 801e74a:	781a      	ldrb	r2, [r3, #0]
 801e74c:	6963      	ldr	r3, [r4, #20]
 801e74e:	5c9b      	ldrb	r3, [r3, r2]
 801e750:	b953      	cbnz	r3, 801e768 <_scanf_chars+0x58>
 801e752:	bb27      	cbnz	r7, 801e79e <_scanf_chars+0x8e>
 801e754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e758:	2802      	cmp	r0, #2
 801e75a:	d120      	bne.n	801e79e <_scanf_chars+0x8e>
 801e75c:	682b      	ldr	r3, [r5, #0]
 801e75e:	781b      	ldrb	r3, [r3, #0]
 801e760:	f813 3009 	ldrb.w	r3, [r3, r9]
 801e764:	071b      	lsls	r3, r3, #28
 801e766:	d41a      	bmi.n	801e79e <_scanf_chars+0x8e>
 801e768:	6823      	ldr	r3, [r4, #0]
 801e76a:	06da      	lsls	r2, r3, #27
 801e76c:	bf5e      	ittt	pl
 801e76e:	682b      	ldrpl	r3, [r5, #0]
 801e770:	781b      	ldrbpl	r3, [r3, #0]
 801e772:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e776:	682a      	ldr	r2, [r5, #0]
 801e778:	686b      	ldr	r3, [r5, #4]
 801e77a:	3201      	adds	r2, #1
 801e77c:	602a      	str	r2, [r5, #0]
 801e77e:	68a2      	ldr	r2, [r4, #8]
 801e780:	3b01      	subs	r3, #1
 801e782:	3a01      	subs	r2, #1
 801e784:	606b      	str	r3, [r5, #4]
 801e786:	3701      	adds	r7, #1
 801e788:	60a2      	str	r2, [r4, #8]
 801e78a:	b142      	cbz	r2, 801e79e <_scanf_chars+0x8e>
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	dcd7      	bgt.n	801e740 <_scanf_chars+0x30>
 801e790:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e794:	4629      	mov	r1, r5
 801e796:	4640      	mov	r0, r8
 801e798:	4798      	blx	r3
 801e79a:	2800      	cmp	r0, #0
 801e79c:	d0d0      	beq.n	801e740 <_scanf_chars+0x30>
 801e79e:	6823      	ldr	r3, [r4, #0]
 801e7a0:	f013 0310 	ands.w	r3, r3, #16
 801e7a4:	d105      	bne.n	801e7b2 <_scanf_chars+0xa2>
 801e7a6:	68e2      	ldr	r2, [r4, #12]
 801e7a8:	3201      	adds	r2, #1
 801e7aa:	60e2      	str	r2, [r4, #12]
 801e7ac:	69a2      	ldr	r2, [r4, #24]
 801e7ae:	b102      	cbz	r2, 801e7b2 <_scanf_chars+0xa2>
 801e7b0:	7033      	strb	r3, [r6, #0]
 801e7b2:	6923      	ldr	r3, [r4, #16]
 801e7b4:	441f      	add	r7, r3
 801e7b6:	6127      	str	r7, [r4, #16]
 801e7b8:	2000      	movs	r0, #0
 801e7ba:	e7cb      	b.n	801e754 <_scanf_chars+0x44>
 801e7bc:	080209e1 	.word	0x080209e1

0801e7c0 <_scanf_i>:
 801e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c4:	4698      	mov	r8, r3
 801e7c6:	4b74      	ldr	r3, [pc, #464]	; (801e998 <_scanf_i+0x1d8>)
 801e7c8:	460c      	mov	r4, r1
 801e7ca:	4682      	mov	sl, r0
 801e7cc:	4616      	mov	r6, r2
 801e7ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e7d2:	b087      	sub	sp, #28
 801e7d4:	ab03      	add	r3, sp, #12
 801e7d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e7da:	4b70      	ldr	r3, [pc, #448]	; (801e99c <_scanf_i+0x1dc>)
 801e7dc:	69a1      	ldr	r1, [r4, #24]
 801e7de:	4a70      	ldr	r2, [pc, #448]	; (801e9a0 <_scanf_i+0x1e0>)
 801e7e0:	2903      	cmp	r1, #3
 801e7e2:	bf18      	it	ne
 801e7e4:	461a      	movne	r2, r3
 801e7e6:	68a3      	ldr	r3, [r4, #8]
 801e7e8:	9201      	str	r2, [sp, #4]
 801e7ea:	1e5a      	subs	r2, r3, #1
 801e7ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e7f0:	bf88      	it	hi
 801e7f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e7f6:	4627      	mov	r7, r4
 801e7f8:	bf82      	ittt	hi
 801e7fa:	eb03 0905 	addhi.w	r9, r3, r5
 801e7fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e802:	60a3      	strhi	r3, [r4, #8]
 801e804:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e808:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e80c:	bf98      	it	ls
 801e80e:	f04f 0900 	movls.w	r9, #0
 801e812:	6023      	str	r3, [r4, #0]
 801e814:	463d      	mov	r5, r7
 801e816:	f04f 0b00 	mov.w	fp, #0
 801e81a:	6831      	ldr	r1, [r6, #0]
 801e81c:	ab03      	add	r3, sp, #12
 801e81e:	7809      	ldrb	r1, [r1, #0]
 801e820:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e824:	2202      	movs	r2, #2
 801e826:	f7e1 fceb 	bl	8000200 <memchr>
 801e82a:	b328      	cbz	r0, 801e878 <_scanf_i+0xb8>
 801e82c:	f1bb 0f01 	cmp.w	fp, #1
 801e830:	d159      	bne.n	801e8e6 <_scanf_i+0x126>
 801e832:	6862      	ldr	r2, [r4, #4]
 801e834:	b92a      	cbnz	r2, 801e842 <_scanf_i+0x82>
 801e836:	6822      	ldr	r2, [r4, #0]
 801e838:	2308      	movs	r3, #8
 801e83a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e83e:	6063      	str	r3, [r4, #4]
 801e840:	6022      	str	r2, [r4, #0]
 801e842:	6822      	ldr	r2, [r4, #0]
 801e844:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e848:	6022      	str	r2, [r4, #0]
 801e84a:	68a2      	ldr	r2, [r4, #8]
 801e84c:	1e51      	subs	r1, r2, #1
 801e84e:	60a1      	str	r1, [r4, #8]
 801e850:	b192      	cbz	r2, 801e878 <_scanf_i+0xb8>
 801e852:	6832      	ldr	r2, [r6, #0]
 801e854:	1c51      	adds	r1, r2, #1
 801e856:	6031      	str	r1, [r6, #0]
 801e858:	7812      	ldrb	r2, [r2, #0]
 801e85a:	f805 2b01 	strb.w	r2, [r5], #1
 801e85e:	6872      	ldr	r2, [r6, #4]
 801e860:	3a01      	subs	r2, #1
 801e862:	2a00      	cmp	r2, #0
 801e864:	6072      	str	r2, [r6, #4]
 801e866:	dc07      	bgt.n	801e878 <_scanf_i+0xb8>
 801e868:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801e86c:	4631      	mov	r1, r6
 801e86e:	4650      	mov	r0, sl
 801e870:	4790      	blx	r2
 801e872:	2800      	cmp	r0, #0
 801e874:	f040 8085 	bne.w	801e982 <_scanf_i+0x1c2>
 801e878:	f10b 0b01 	add.w	fp, fp, #1
 801e87c:	f1bb 0f03 	cmp.w	fp, #3
 801e880:	d1cb      	bne.n	801e81a <_scanf_i+0x5a>
 801e882:	6863      	ldr	r3, [r4, #4]
 801e884:	b90b      	cbnz	r3, 801e88a <_scanf_i+0xca>
 801e886:	230a      	movs	r3, #10
 801e888:	6063      	str	r3, [r4, #4]
 801e88a:	6863      	ldr	r3, [r4, #4]
 801e88c:	4945      	ldr	r1, [pc, #276]	; (801e9a4 <_scanf_i+0x1e4>)
 801e88e:	6960      	ldr	r0, [r4, #20]
 801e890:	1ac9      	subs	r1, r1, r3
 801e892:	f000 f89b 	bl	801e9cc <__sccl>
 801e896:	f04f 0b00 	mov.w	fp, #0
 801e89a:	68a3      	ldr	r3, [r4, #8]
 801e89c:	6822      	ldr	r2, [r4, #0]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d03d      	beq.n	801e91e <_scanf_i+0x15e>
 801e8a2:	6831      	ldr	r1, [r6, #0]
 801e8a4:	6960      	ldr	r0, [r4, #20]
 801e8a6:	f891 c000 	ldrb.w	ip, [r1]
 801e8aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e8ae:	2800      	cmp	r0, #0
 801e8b0:	d035      	beq.n	801e91e <_scanf_i+0x15e>
 801e8b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801e8b6:	d124      	bne.n	801e902 <_scanf_i+0x142>
 801e8b8:	0510      	lsls	r0, r2, #20
 801e8ba:	d522      	bpl.n	801e902 <_scanf_i+0x142>
 801e8bc:	f10b 0b01 	add.w	fp, fp, #1
 801e8c0:	f1b9 0f00 	cmp.w	r9, #0
 801e8c4:	d003      	beq.n	801e8ce <_scanf_i+0x10e>
 801e8c6:	3301      	adds	r3, #1
 801e8c8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e8cc:	60a3      	str	r3, [r4, #8]
 801e8ce:	6873      	ldr	r3, [r6, #4]
 801e8d0:	3b01      	subs	r3, #1
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	6073      	str	r3, [r6, #4]
 801e8d6:	dd1b      	ble.n	801e910 <_scanf_i+0x150>
 801e8d8:	6833      	ldr	r3, [r6, #0]
 801e8da:	3301      	adds	r3, #1
 801e8dc:	6033      	str	r3, [r6, #0]
 801e8de:	68a3      	ldr	r3, [r4, #8]
 801e8e0:	3b01      	subs	r3, #1
 801e8e2:	60a3      	str	r3, [r4, #8]
 801e8e4:	e7d9      	b.n	801e89a <_scanf_i+0xda>
 801e8e6:	f1bb 0f02 	cmp.w	fp, #2
 801e8ea:	d1ae      	bne.n	801e84a <_scanf_i+0x8a>
 801e8ec:	6822      	ldr	r2, [r4, #0]
 801e8ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e8f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e8f6:	d1bf      	bne.n	801e878 <_scanf_i+0xb8>
 801e8f8:	2310      	movs	r3, #16
 801e8fa:	6063      	str	r3, [r4, #4]
 801e8fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e900:	e7a2      	b.n	801e848 <_scanf_i+0x88>
 801e902:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e906:	6022      	str	r2, [r4, #0]
 801e908:	780b      	ldrb	r3, [r1, #0]
 801e90a:	f805 3b01 	strb.w	r3, [r5], #1
 801e90e:	e7de      	b.n	801e8ce <_scanf_i+0x10e>
 801e910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e914:	4631      	mov	r1, r6
 801e916:	4650      	mov	r0, sl
 801e918:	4798      	blx	r3
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d0df      	beq.n	801e8de <_scanf_i+0x11e>
 801e91e:	6823      	ldr	r3, [r4, #0]
 801e920:	05d9      	lsls	r1, r3, #23
 801e922:	d50d      	bpl.n	801e940 <_scanf_i+0x180>
 801e924:	42bd      	cmp	r5, r7
 801e926:	d909      	bls.n	801e93c <_scanf_i+0x17c>
 801e928:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e930:	4632      	mov	r2, r6
 801e932:	4650      	mov	r0, sl
 801e934:	4798      	blx	r3
 801e936:	f105 39ff 	add.w	r9, r5, #4294967295
 801e93a:	464d      	mov	r5, r9
 801e93c:	42bd      	cmp	r5, r7
 801e93e:	d028      	beq.n	801e992 <_scanf_i+0x1d2>
 801e940:	6822      	ldr	r2, [r4, #0]
 801e942:	f012 0210 	ands.w	r2, r2, #16
 801e946:	d113      	bne.n	801e970 <_scanf_i+0x1b0>
 801e948:	702a      	strb	r2, [r5, #0]
 801e94a:	6863      	ldr	r3, [r4, #4]
 801e94c:	9e01      	ldr	r6, [sp, #4]
 801e94e:	4639      	mov	r1, r7
 801e950:	4650      	mov	r0, sl
 801e952:	47b0      	blx	r6
 801e954:	f8d8 3000 	ldr.w	r3, [r8]
 801e958:	6821      	ldr	r1, [r4, #0]
 801e95a:	1d1a      	adds	r2, r3, #4
 801e95c:	f8c8 2000 	str.w	r2, [r8]
 801e960:	f011 0f20 	tst.w	r1, #32
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	d00f      	beq.n	801e988 <_scanf_i+0x1c8>
 801e968:	6018      	str	r0, [r3, #0]
 801e96a:	68e3      	ldr	r3, [r4, #12]
 801e96c:	3301      	adds	r3, #1
 801e96e:	60e3      	str	r3, [r4, #12]
 801e970:	1bed      	subs	r5, r5, r7
 801e972:	44ab      	add	fp, r5
 801e974:	6925      	ldr	r5, [r4, #16]
 801e976:	445d      	add	r5, fp
 801e978:	6125      	str	r5, [r4, #16]
 801e97a:	2000      	movs	r0, #0
 801e97c:	b007      	add	sp, #28
 801e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e982:	f04f 0b00 	mov.w	fp, #0
 801e986:	e7ca      	b.n	801e91e <_scanf_i+0x15e>
 801e988:	07ca      	lsls	r2, r1, #31
 801e98a:	bf4c      	ite	mi
 801e98c:	8018      	strhmi	r0, [r3, #0]
 801e98e:	6018      	strpl	r0, [r3, #0]
 801e990:	e7eb      	b.n	801e96a <_scanf_i+0x1aa>
 801e992:	2001      	movs	r0, #1
 801e994:	e7f2      	b.n	801e97c <_scanf_i+0x1bc>
 801e996:	bf00      	nop
 801e998:	080207d4 	.word	0x080207d4
 801e99c:	0801bb01 	.word	0x0801bb01
 801e9a0:	0801b9f1 	.word	0x0801b9f1
 801e9a4:	08020ea6 	.word	0x08020ea6

0801e9a8 <_read_r>:
 801e9a8:	b538      	push	{r3, r4, r5, lr}
 801e9aa:	4d07      	ldr	r5, [pc, #28]	; (801e9c8 <_read_r+0x20>)
 801e9ac:	4604      	mov	r4, r0
 801e9ae:	4608      	mov	r0, r1
 801e9b0:	4611      	mov	r1, r2
 801e9b2:	2200      	movs	r2, #0
 801e9b4:	602a      	str	r2, [r5, #0]
 801e9b6:	461a      	mov	r2, r3
 801e9b8:	f7e4 fc26 	bl	8003208 <_read>
 801e9bc:	1c43      	adds	r3, r0, #1
 801e9be:	d102      	bne.n	801e9c6 <_read_r+0x1e>
 801e9c0:	682b      	ldr	r3, [r5, #0]
 801e9c2:	b103      	cbz	r3, 801e9c6 <_read_r+0x1e>
 801e9c4:	6023      	str	r3, [r4, #0]
 801e9c6:	bd38      	pop	{r3, r4, r5, pc}
 801e9c8:	20008e5c 	.word	0x20008e5c

0801e9cc <__sccl>:
 801e9cc:	b570      	push	{r4, r5, r6, lr}
 801e9ce:	780b      	ldrb	r3, [r1, #0]
 801e9d0:	4604      	mov	r4, r0
 801e9d2:	2b5e      	cmp	r3, #94	; 0x5e
 801e9d4:	bf0b      	itete	eq
 801e9d6:	784b      	ldrbeq	r3, [r1, #1]
 801e9d8:	1c48      	addne	r0, r1, #1
 801e9da:	1c88      	addeq	r0, r1, #2
 801e9dc:	2200      	movne	r2, #0
 801e9de:	bf08      	it	eq
 801e9e0:	2201      	moveq	r2, #1
 801e9e2:	1e61      	subs	r1, r4, #1
 801e9e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e9e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 801e9ec:	42a9      	cmp	r1, r5
 801e9ee:	d1fb      	bne.n	801e9e8 <__sccl+0x1c>
 801e9f0:	b90b      	cbnz	r3, 801e9f6 <__sccl+0x2a>
 801e9f2:	3801      	subs	r0, #1
 801e9f4:	bd70      	pop	{r4, r5, r6, pc}
 801e9f6:	f082 0101 	eor.w	r1, r2, #1
 801e9fa:	54e1      	strb	r1, [r4, r3]
 801e9fc:	1c42      	adds	r2, r0, #1
 801e9fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801ea02:	2d2d      	cmp	r5, #45	; 0x2d
 801ea04:	f102 36ff 	add.w	r6, r2, #4294967295
 801ea08:	4610      	mov	r0, r2
 801ea0a:	d006      	beq.n	801ea1a <__sccl+0x4e>
 801ea0c:	2d5d      	cmp	r5, #93	; 0x5d
 801ea0e:	d0f1      	beq.n	801e9f4 <__sccl+0x28>
 801ea10:	b90d      	cbnz	r5, 801ea16 <__sccl+0x4a>
 801ea12:	4630      	mov	r0, r6
 801ea14:	e7ee      	b.n	801e9f4 <__sccl+0x28>
 801ea16:	462b      	mov	r3, r5
 801ea18:	e7ef      	b.n	801e9fa <__sccl+0x2e>
 801ea1a:	7816      	ldrb	r6, [r2, #0]
 801ea1c:	2e5d      	cmp	r6, #93	; 0x5d
 801ea1e:	d0fa      	beq.n	801ea16 <__sccl+0x4a>
 801ea20:	42b3      	cmp	r3, r6
 801ea22:	dcf8      	bgt.n	801ea16 <__sccl+0x4a>
 801ea24:	4618      	mov	r0, r3
 801ea26:	3001      	adds	r0, #1
 801ea28:	4286      	cmp	r6, r0
 801ea2a:	5421      	strb	r1, [r4, r0]
 801ea2c:	dcfb      	bgt.n	801ea26 <__sccl+0x5a>
 801ea2e:	43d8      	mvns	r0, r3
 801ea30:	4430      	add	r0, r6
 801ea32:	1c5d      	adds	r5, r3, #1
 801ea34:	42b3      	cmp	r3, r6
 801ea36:	bfa8      	it	ge
 801ea38:	2000      	movge	r0, #0
 801ea3a:	182b      	adds	r3, r5, r0
 801ea3c:	3202      	adds	r2, #2
 801ea3e:	e7de      	b.n	801e9fe <__sccl+0x32>

0801ea40 <__submore>:
 801ea40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea44:	460c      	mov	r4, r1
 801ea46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ea48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea4c:	4299      	cmp	r1, r3
 801ea4e:	d11d      	bne.n	801ea8c <__submore+0x4c>
 801ea50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ea54:	f7fb f84a 	bl	8019aec <_malloc_r>
 801ea58:	b918      	cbnz	r0, 801ea62 <__submore+0x22>
 801ea5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ea5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ea66:	63a3      	str	r3, [r4, #56]	; 0x38
 801ea68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ea6c:	6360      	str	r0, [r4, #52]	; 0x34
 801ea6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801ea72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801ea76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801ea7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ea7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801ea82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801ea86:	6020      	str	r0, [r4, #0]
 801ea88:	2000      	movs	r0, #0
 801ea8a:	e7e8      	b.n	801ea5e <__submore+0x1e>
 801ea8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ea8e:	0077      	lsls	r7, r6, #1
 801ea90:	463a      	mov	r2, r7
 801ea92:	f7ff f98f 	bl	801ddb4 <_realloc_r>
 801ea96:	4605      	mov	r5, r0
 801ea98:	2800      	cmp	r0, #0
 801ea9a:	d0de      	beq.n	801ea5a <__submore+0x1a>
 801ea9c:	eb00 0806 	add.w	r8, r0, r6
 801eaa0:	4601      	mov	r1, r0
 801eaa2:	4632      	mov	r2, r6
 801eaa4:	4640      	mov	r0, r8
 801eaa6:	f7fa ffa1 	bl	80199ec <memcpy>
 801eaaa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801eaae:	f8c4 8000 	str.w	r8, [r4]
 801eab2:	e7e9      	b.n	801ea88 <__submore+0x48>

0801eab4 <__ascii_wctomb>:
 801eab4:	b149      	cbz	r1, 801eaca <__ascii_wctomb+0x16>
 801eab6:	2aff      	cmp	r2, #255	; 0xff
 801eab8:	bf85      	ittet	hi
 801eaba:	238a      	movhi	r3, #138	; 0x8a
 801eabc:	6003      	strhi	r3, [r0, #0]
 801eabe:	700a      	strbls	r2, [r1, #0]
 801eac0:	f04f 30ff 	movhi.w	r0, #4294967295
 801eac4:	bf98      	it	ls
 801eac6:	2001      	movls	r0, #1
 801eac8:	4770      	bx	lr
 801eaca:	4608      	mov	r0, r1
 801eacc:	4770      	bx	lr
	...

0801ead0 <_fstat_r>:
 801ead0:	b538      	push	{r3, r4, r5, lr}
 801ead2:	4d07      	ldr	r5, [pc, #28]	; (801eaf0 <_fstat_r+0x20>)
 801ead4:	2300      	movs	r3, #0
 801ead6:	4604      	mov	r4, r0
 801ead8:	4608      	mov	r0, r1
 801eada:	4611      	mov	r1, r2
 801eadc:	602b      	str	r3, [r5, #0]
 801eade:	f7e4 fbd8 	bl	8003292 <_fstat>
 801eae2:	1c43      	adds	r3, r0, #1
 801eae4:	d102      	bne.n	801eaec <_fstat_r+0x1c>
 801eae6:	682b      	ldr	r3, [r5, #0]
 801eae8:	b103      	cbz	r3, 801eaec <_fstat_r+0x1c>
 801eaea:	6023      	str	r3, [r4, #0]
 801eaec:	bd38      	pop	{r3, r4, r5, pc}
 801eaee:	bf00      	nop
 801eaf0:	20008e5c 	.word	0x20008e5c

0801eaf4 <_isatty_r>:
 801eaf4:	b538      	push	{r3, r4, r5, lr}
 801eaf6:	4d06      	ldr	r5, [pc, #24]	; (801eb10 <_isatty_r+0x1c>)
 801eaf8:	2300      	movs	r3, #0
 801eafa:	4604      	mov	r4, r0
 801eafc:	4608      	mov	r0, r1
 801eafe:	602b      	str	r3, [r5, #0]
 801eb00:	f7e4 fbd7 	bl	80032b2 <_isatty>
 801eb04:	1c43      	adds	r3, r0, #1
 801eb06:	d102      	bne.n	801eb0e <_isatty_r+0x1a>
 801eb08:	682b      	ldr	r3, [r5, #0]
 801eb0a:	b103      	cbz	r3, 801eb0e <_isatty_r+0x1a>
 801eb0c:	6023      	str	r3, [r4, #0]
 801eb0e:	bd38      	pop	{r3, r4, r5, pc}
 801eb10:	20008e5c 	.word	0x20008e5c

0801eb14 <_malloc_usable_size_r>:
 801eb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb18:	1f18      	subs	r0, r3, #4
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	bfbc      	itt	lt
 801eb1e:	580b      	ldrlt	r3, [r1, r0]
 801eb20:	18c0      	addlt	r0, r0, r3
 801eb22:	4770      	bx	lr

0801eb24 <_init>:
 801eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb26:	bf00      	nop
 801eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb2a:	bc08      	pop	{r3}
 801eb2c:	469e      	mov	lr, r3
 801eb2e:	4770      	bx	lr

0801eb30 <_fini>:
 801eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb32:	bf00      	nop
 801eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb36:	bc08      	pop	{r3}
 801eb38:	469e      	mov	lr, r3
 801eb3a:	4770      	bx	lr
