
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002448  08016cc8  08016cc8  00026cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019110  08019110  000302ac  2**0
                  CONTENTS
  4 .ARM          00000008  08019110  08019110  00029110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019118  08019118  000302ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019118  08019118  00029118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019120  08019120  00029120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  08019124  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302ac  2**0
                  CONTENTS
 10 .bss          00006214  200002ac  200002ac  000302ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200064c0  200064c0  000302ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006ad42  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009b92  00000000  00000000  0009b01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036d8  00000000  00000000  000a4bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033f0  00000000  00000000  000a8288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037061  00000000  00000000  000ab678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000412bc  00000000  00000000  000e26d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011101e  00000000  00000000  00123995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002349b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010180  00000000  00000000  00234a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00244b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00244c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016cac 	.word	0x08016cac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	08016cac 	.word	0x08016cac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f00c f884 	bl	800d132 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f00c f87d 	bl	800d132 <HAL_UART_Transmit>
	#endif
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005d6c 	.word	0x20005d6c
 8001044:	08016cc8 	.word	0x08016cc8

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f00c f866 	bl	800d132 <HAL_UART_Transmit>
	#endif
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20005d6c 	.word	0x20005d6c

08001074 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <tone_freq+0x84>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e01f      	b.n	80010e4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010a4:	2108      	movs	r1, #8
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <tone_freq+0x88>)
 80010a8:	f00b f864 	bl	800c174 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <tone_freq+0x8c>)
 80010b4:	f007 fbaa 	bl	800880c <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f006 fc9b 	bl	80079f4 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010be:	2108      	movs	r1, #8
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <tone_freq+0x88>)
 80010c2:	f00b f91f 	bl	800c304 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <tone_freq+0x8c>)
 80010ce:	f007 fb9d 	bl	800880c <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d902      	bls.n	80010de <tone_freq+0x6a>
			HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f006 fc8b 	bl	80079f4 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3db      	bcc.n	80010a4 <tone_freq+0x30>
	}
	#endif
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	000f4240 	.word	0x000f4240
 80010fc:	20005ce0 	.word	0x20005ce0
 8001100:	40020400 	.word	0x40020400

08001104 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
 8001108:	f240 4216 	movw	r2, #1046	; 0x416
 800110c:	2102      	movs	r1, #2
 800110e:	204b      	movs	r0, #75	; 0x4b
 8001110:	f7ff ffb0 	bl	8001074 <tone_freq>
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e008      	b.n	8001136 <buzz_startup_success+0x1e>
		buzz_success();
 8001124:	f7ff ffee 	bl	8001104 <buzz_success>
		HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f006 fc62 	bl	80079f4 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d9f3      	bls.n	8001124 <buzz_startup_success+0xc>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <MRT_Init+0x3c>)
 800114e:	f7ff ff7b 	bl	8001048 <print>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MRT_Init+0x40>)
 8001154:	f7ff ff78 	bl	8001048 <print>
	MX_IWDG_Init();
 8001158:	f001 f9c0 	bl	80024dc <MX_IWDG_Init>
	print((char*) "OK\r\n");
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <MRT_Init+0x44>)
 800115e:	f7ff ff73 	bl	8001048 <print>
	#endif

	MRT_Reinitialize_Peripherals();
 8001162:	f000 f8fb 	bl	800135c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001166:	f002 fe23 	bl	8003db0 <MRT_MEMORY_Init>
	MRT_reset_info();
 800116a:	f000 f821 	bl	80011b0 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <MRT_Init+0x48>)
 8001170:	f008 fc30 	bl	80099d4 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001174:	f001 fbda 	bl	800292c <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001178:	f003 ff2a 	bl	8004fd0 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 800117c:	f006 fbec 	bl	8007958 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08016ccc 	.word	0x08016ccc
 8001188:	08016cf0 	.word	0x08016cf0
 800118c:	08016d00 	.word	0x08016d00
 8001190:	20005b64 	.word	0x20005b64

08001194 <MRT_Deinit>:




void MRT_Deinit(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MRT_Deinit+0x18>)
 800119a:	f7ff ff55 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 800119e:	f000 f8dd 	bl	800135c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011a2:	f003 ff51 	bl	8005048 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08016d08 	.word	0x08016d08

080011b0 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b0a9      	sub	sp, #164	; 0xa4
 80011b4:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <MRT_reset_info+0x14c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461e      	mov	r6, r3
 80011bc:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MRT_reset_info+0x150>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	469c      	mov	ip, r3
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <MRT_reset_info+0x154>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <MRT_reset_info+0x158>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <MRT_reset_info+0x15c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MRT_reset_info+0x160>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461d      	mov	r5, r3
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <MRT_reset_info+0x164>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	9503      	str	r5, [sp, #12]
 80011e6:	9402      	str	r4, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	4663      	mov	r3, ip
 80011ee:	4632      	mov	r2, r6
 80011f0:	4949      	ldr	r1, [pc, #292]	; (8001318 <MRT_reset_info+0x168>)
 80011f2:	f011 fd61 	bl	8012cb8 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff24 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <MRT_reset_info+0x154>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d119      	bne.n	800123c <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001208:	4844      	ldr	r0, [pc, #272]	; (800131c <MRT_reset_info+0x16c>)
 800120a:	f7ff ff1d 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <MRT_reset_info+0x154>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <MRT_reset_info+0x154>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <MRT_reset_info+0x170>)
 800121c:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MRT_reset_info+0x154>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MRT_reset_info+0x174>)
 8001224:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 8001226:	2002      	movs	r0, #2
 8001228:	f002 fbf0 	bl	8003a0c <MRT_saveFlagValue>

		  HAL_Delay(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001230:	f006 fbe0 	bl	80079f4 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001234:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001238:	f001 fc18 	bl	8002a6c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MRT_reset_info+0x150>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <MRT_reset_info+0xb6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MRT_reset_info+0x150>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4936      	ldr	r1, [pc, #216]	; (8001328 <MRT_reset_info+0x178>)
 800124e:	4618      	mov	r0, r3
 8001250:	f011 fd32 	bl	8012cb8 <siprintf>
		  print(buf);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fef6 	bl	8001048 <print>

		  print((char*) "Resetting RTC time\r\n");
 800125c:	4833      	ldr	r0, [pc, #204]	; (800132c <MRT_reset_info+0x17c>)
 800125e:	f7ff fef3 	bl	8001048 <print>

		  //Clear RTC time (last recorded)
		  MRT_resetTotalTime();
 8001262:	f002 fc93 	bl	8003b8c <MRT_resetTotalTime>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MRT_reset_info+0x14c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <MRT_reset_info+0xd0>
		  print((char*) "FC restarted\r\n");
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <MRT_reset_info+0x180>)
 8001270:	f7ff feea 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MRT_reset_info+0x14c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 800127a:	2000      	movs	r0, #0
 800127c:	f002 fbc6 	bl	8003a0c <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MRT_reset_info+0x184>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <MRT_reset_info+0xe0>
		  print((char*) "Pre-apogee\r\n");
 8001288:	482b      	ldr	r0, [pc, #172]	; (8001338 <MRT_reset_info+0x188>)
 800128a:	f7ff fedd 	bl	8001048 <print>
 800128e:	e006      	b.n	800129e <MRT_reset_info+0xee>
	  }
	  else if(apogee_flag==1){
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MRT_reset_info+0x184>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <MRT_reset_info+0xee>
		  print((char*) "Post-apogee\r\n");
 8001298:	4828      	ldr	r0, [pc, #160]	; (800133c <MRT_reset_info+0x18c>)
 800129a:	f7ff fed5 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MRT_reset_info+0x190>)
 80012a0:	f7ff fed2 	bl	8001048 <print>
	  if (ejection_stage_flag==PAD){
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MRT_reset_info+0x194>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <MRT_reset_info+0x104>
		  print((char*)"Pad\r\n");
 80012ac:	4826      	ldr	r0, [pc, #152]	; (8001348 <MRT_reset_info+0x198>)
 80012ae:	f7ff fecb 	bl	8001048 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012b2:	e01e      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==BOOST){
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MRT_reset_info+0x194>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d103      	bne.n	80012c4 <MRT_reset_info+0x114>
		  print((char*)"Boost\r\n");
 80012bc:	4823      	ldr	r0, [pc, #140]	; (800134c <MRT_reset_info+0x19c>)
 80012be:	f7ff fec3 	bl	8001048 <print>
}
 80012c2:	e016      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MRT_reset_info+0x194>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d103      	bne.n	80012d4 <MRT_reset_info+0x124>
		  print((char*)"Drogue descent\r\n");
 80012cc:	4820      	ldr	r0, [pc, #128]	; (8001350 <MRT_reset_info+0x1a0>)
 80012ce:	f7ff febb 	bl	8001048 <print>
}
 80012d2:	e00e      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MRT_reset_info+0x194>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d103      	bne.n	80012e4 <MRT_reset_info+0x134>
		  print((char*)"Main descent\r\n");
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <MRT_reset_info+0x1a4>)
 80012de:	f7ff feb3 	bl	8001048 <print>
}
 80012e2:	e006      	b.n	80012f2 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==LANDED){
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MRT_reset_info+0x194>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d102      	bne.n	80012f2 <MRT_reset_info+0x142>
		  print((char*)"Landed\r\n");
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <MRT_reset_info+0x1a8>)
 80012ee:	f7ff feab 	bl	8001048 <print>
}
 80012f2:	bf00      	nop
 80012f4:	378c      	adds	r7, #140	; 0x8c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000370 	.word	0x20000370
 8001300:	20000371 	.word	0x20000371
 8001304:	20000372 	.word	0x20000372
 8001308:	20000375 	.word	0x20000375
 800130c:	20000376 	.word	0x20000376
 8001310:	20000377 	.word	0x20000377
 8001314:	20000378 	.word	0x20000378
 8001318:	08016d2c 	.word	0x08016d2c
 800131c:	08016d70 	.word	0x08016d70
 8001320:	20000318 	.word	0x20000318
 8001324:	20000360 	.word	0x20000360
 8001328:	08016d84 	.word	0x08016d84
 800132c:	08016d94 	.word	0x08016d94
 8001330:	08016dac 	.word	0x08016dac
 8001334:	20000373 	.word	0x20000373
 8001338:	08016dbc 	.word	0x08016dbc
 800133c:	08016dcc 	.word	0x08016dcc
 8001340:	08016ddc 	.word	0x08016ddc
 8001344:	20000374 	.word	0x20000374
 8001348:	08016df0 	.word	0x08016df0
 800134c:	08016df8 	.word	0x08016df8
 8001350:	08016e00 	.word	0x08016e00
 8001354:	08016e14 	.word	0x08016e14
 8001358:	08016e24 	.word	0x08016e24

0800135c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001360:	482f      	ldr	r0, [pc, #188]	; (8001420 <MRT_Reinitialize_Peripherals+0xc4>)
 8001362:	f7ff fe71 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2102      	movs	r1, #2
 800136a:	482e      	ldr	r0, [pc, #184]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 800136c:	f007 fa4e 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 8001376:	f007 fa49 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <MRT_Reinitialize_Peripherals+0xc8>)
 8001380:	f007 fa44 	bl	800880c <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4827      	ldr	r0, [pc, #156]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 800138c:	f007 fa3e 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001396:	4824      	ldr	r0, [pc, #144]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 8001398:	f007 fa38 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a2:	4821      	ldr	r0, [pc, #132]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013a4:	f007 fa32 	bl	800880c <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013ae:	f007 fa2d 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	481c      	ldr	r0, [pc, #112]	; (800142c <MRT_Reinitialize_Peripherals+0xd0>)
 80013ba:	f007 fa27 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <MRT_Reinitialize_Peripherals+0xd0>)
 80013c6:	f007 fa21 	bl	800880c <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013ca:	2200      	movs	r2, #0
 80013cc:	2104      	movs	r1, #4
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <MRT_Reinitialize_Peripherals+0xd4>)
 80013d0:	f007 fa1c 	bl	800880c <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <MRT_Reinitialize_Peripherals+0xd4>)
 80013dc:	f007 fa16 	bl	800880c <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <MRT_Reinitialize_Peripherals+0xcc>)
 80013e8:	f007 fa10 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80013ec:	2200      	movs	r2, #0
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 80013f2:	f007 fa0b 	bl	800880c <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 80013fc:	f007 fa06 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 8001406:	f007 fa01 	bl	800880c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2110      	movs	r1, #16
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <MRT_Reinitialize_Peripherals+0xd8>)
 8001410:	f007 f9fc 	bl	800880c <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <MRT_Reinitialize_Peripherals+0xdc>)
 8001416:	f7ff fe17 	bl	8001048 <print>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	08016e30 	.word	0x08016e30
 8001424:	40020800 	.word	0x40020800
 8001428:	40021800 	.word	0x40021800
 800142c:	40021400 	.word	0x40021400
 8001430:	40021000 	.word	0x40021000
 8001434:	40020c00 	.word	0x40020c00
 8001438:	08016d00 	.word	0x08016d00

0800143c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <MX_ADC1_Init+0x9c>)
 8001452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_ADC1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_ADC1_Init+0x98>)
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <MX_ADC1_Init+0xa0>)
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001488:	2201      	movs	r2, #1
 800148a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_ADC1_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001496:	2201      	movs	r2, #1
 8001498:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_ADC1_Init+0x98>)
 800149c:	f006 face 	bl	8007a3c <HAL_ADC_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f001 f97d 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014aa:	2306      	movs	r3, #6
 80014ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0x98>)
 80014bc:	f006 fca0 	bl	8007e00 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014c6:	f001 f96d 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20005a48 	.word	0x20005a48
 80014d8:	40012000 	.word	0x40012000
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_ADC_MspInit+0x7c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d127      	bne.n	8001552 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_ADC_MspInit+0x80>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_ADC_MspInit+0x80>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153e:	2303      	movs	r3, #3
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_ADC_MspInit+0x84>)
 800154e:	f006 ff99 	bl	8008484 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40012000 	.word	0x40012000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800156c:	f3bf 8f4f 	dsb	sy
}
 8001570:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <__NVIC_SystemReset+0x24>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800157a:	4904      	ldr	r1, [pc, #16]	; (800158c <__NVIC_SystemReset+0x24>)
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_SystemReset+0x28>)
 800157e:	4313      	orrs	r3, r2
 8001580:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001582:	f3bf 8f4f 	dsb	sy
}
 8001586:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <__NVIC_SystemReset+0x20>
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	05fa0004 	.word	0x05fa0004

08001594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001598:	4821      	ldr	r0, [pc, #132]	; (8001620 <MX_FREERTOS_Init+0x8c>)
 800159a:	f7ff fd37 	bl	800100c <println>
	print("\tInitializing the kernel...");
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <MX_FREERTOS_Init+0x90>)
 80015a0:	f7ff fd52 	bl	8001048 <print>
	osKernelInitialize();
 80015a4:	f00c fa3a 	bl	800da1c <osKernelInitialize>
	println("OK");
 80015a8:	481f      	ldr	r0, [pc, #124]	; (8001628 <MX_FREERTOS_Init+0x94>)
 80015aa:	f7ff fd2f 	bl	800100c <println>

	print("\tCreating the threads...");
 80015ae:	481f      	ldr	r0, [pc, #124]	; (800162c <MX_FREERTOS_Init+0x98>)
 80015b0:	f7ff fd4a 	bl	8001048 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <MX_FREERTOS_Init+0x9c>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	481e      	ldr	r0, [pc, #120]	; (8001634 <MX_FREERTOS_Init+0xa0>)
 80015ba:	f00c fa79 	bl	800dab0 <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <MX_FREERTOS_Init+0xa4>)
 80015c2:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <MX_FREERTOS_Init+0xa8>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <MX_FREERTOS_Init+0xac>)
 80015ca:	f00c fa71 	bl	800dab0 <osThreadNew>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_FREERTOS_Init+0xb0>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015d4:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_FREERTOS_Init+0xb4>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <MX_FREERTOS_Init+0xb8>)
 80015da:	f00c fa69 	bl	800dab0 <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_FREERTOS_Init+0xbc>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_FREERTOS_Init+0xc0>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	481b      	ldr	r0, [pc, #108]	; (8001658 <MX_FREERTOS_Init+0xc4>)
 80015ea:	f00c fa61 	bl	800dab0 <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <MX_FREERTOS_Init+0xc8>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <MX_FREERTOS_Init+0xcc>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_FREERTOS_Init+0xd0>)
 80015fa:	f00c fa59 	bl	800dab0 <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <MX_FREERTOS_Init+0xd4>)
 8001602:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <MX_FREERTOS_Init+0xd8>)
 8001606:	2100      	movs	r1, #0
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <MX_FREERTOS_Init+0xdc>)
 800160a:	f00c fa51 	bl	800dab0 <osThreadNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a18      	ldr	r2, [pc, #96]	; (8001674 <MX_FREERTOS_Init+0xe0>)
 8001612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_FREERTOS_Init+0x94>)
 8001616:	f7ff fcf9 	bl	800100c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08016e94 	.word	0x08016e94
 8001624:	08016ea4 	.word	0x08016ea4
 8001628:	08016ec0 	.word	0x08016ec0
 800162c:	08016ec4 	.word	0x08016ec4
 8001630:	08018ac4 	.word	0x08018ac4
 8001634:	08001679 	.word	0x08001679
 8001638:	20005a94 	.word	0x20005a94
 800163c:	08018ae8 	.word	0x08018ae8
 8001640:	08001701 	.word	0x08001701
 8001644:	20005aac 	.word	0x20005aac
 8001648:	08018b0c 	.word	0x08018b0c
 800164c:	08001ad5 	.word	0x08001ad5
 8001650:	20005ab0 	.word	0x20005ab0
 8001654:	08018b30 	.word	0x08018b30
 8001658:	08001bd9 	.word	0x08001bd9
 800165c:	20005ab4 	.word	0x20005ab4
 8001660:	08018b54 	.word	0x08018b54
 8001664:	08001c51 	.word	0x08001c51
 8001668:	20005a90 	.word	0x20005a90
 800166c:	08018b78 	.word	0x08018b78
 8001670:	08001e39 	.word	0x08001e39
 8001674:	20005ab8 	.word	0x20005ab8

08001678 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001680:	f00c faa8 	bl	800dbd4 <osThreadGetId>
 8001684:	4603      	mov	r3, r0
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <StartMemory0+0x68>)
 8001688:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800168a:	2200      	movs	r2, #0
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <StartMemory0+0x6c>)
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <StartMemory0+0x70>)
 8001690:	f009 f9ee 	bl	800aa70 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001694:	2200      	movs	r2, #0
 8001696:	4915      	ldr	r1, [pc, #84]	; (80016ec <StartMemory0+0x74>)
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <StartMemory0+0x70>)
 800169a:	f009 faee 	bl	800ac7a <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <StartMemory0+0x6c>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <StartMemory0+0x78>)
 80016a4:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <StartMemory0+0x6c>)
 80016a8:	785a      	ldrb	r2, [r3, #1]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <StartMemory0+0x7c>)
 80016ac:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <StartMemory0+0x6c>)
 80016b0:	789a      	ldrb	r2, [r3, #2]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <StartMemory0+0x80>)
 80016b4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <StartMemory0+0x70>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <StartMemory0+0x58>
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <StartMemory0+0x80>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <StartMemory0+0x80>)
 80016ce:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <StartMemory0+0x6c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <StartMemory0+0x84>)
 80016d6:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f00c fb17 	bl	800dd0c <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016de:	e7d4      	b.n	800168a <StartMemory0+0x12>
 80016e0:	20005a98 	.word	0x20005a98
 80016e4:	200002d0 	.word	0x200002d0
 80016e8:	20005b70 	.word	0x20005b70
 80016ec:	200002e4 	.word	0x200002e4
 80016f0:	20000375 	.word	0x20000375
 80016f4:	20000376 	.word	0x20000376
 80016f8:	20000377 	.word	0x20000377
 80016fc:	20000378 	.word	0x20000378

08001700 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001708:	f00c fa64 	bl	800dbd4 <osThreadGetId>
 800170c:	4603      	mov	r3, r0
 800170e:	4abd      	ldr	r2, [pc, #756]	; (8001a04 <StartEjection1+0x304>)
 8001710:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 8001712:	4bbd      	ldr	r3, [pc, #756]	; (8001a08 <StartEjection1+0x308>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d901      	bls.n	800171e <StartEjection1+0x1e>
 800171a:	f00c fac4 	bl	800dca6 <osThreadExit>
	if (wu_flag > 0) osThreadExit(); //WHEN WAKING UP
 800171e:	4bbb      	ldr	r3, [pc, #748]	; (8001a0c <StartEjection1+0x30c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <StartEjection1+0x2a>
 8001726:	f00c fabe 	bl	800dca6 <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800172a:	f241 3088 	movw	r0, #5000	; 0x1388
 800172e:	f00c faed 	bl	800dd0c <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
	uint8_t COUNTER_THRESHOLD = 300;
 8001736:	232c      	movs	r3, #44	; 0x2c
 8001738:	733b      	strb	r3, [r7, #12]
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 800173a:	230a      	movs	r3, #10
 800173c:	72fb      	strb	r3, [r7, #11]
	uint8_t prev_alt = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	72bb      	strb	r3, [r7, #10]

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001742:	4bb3      	ldr	r3, [pc, #716]	; (8001a10 <StartEjection1+0x310>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	f001 ff8c 	bl	8003668 <MRT_getAltitude>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	4baf      	ldr	r3, [pc, #700]	; (8001a14 <StartEjection1+0x314>)
 8001756:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 800175a:	4baf      	ldr	r3, [pc, #700]	; (8001a18 <StartEjection1+0x318>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001766:	4bab      	ldr	r3, [pc, #684]	; (8001a14 <StartEjection1+0x314>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d514      	bpl.n	80017a0 <StartEjection1+0xa0>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 8001776:	4ba7      	ldr	r3, [pc, #668]	; (8001a14 <StartEjection1+0x314>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 2a90 	vmov	r2, s15
 8001784:	4ba4      	ldr	r3, [pc, #656]	; (8001a18 <StartEjection1+0x318>)
 8001786:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 8001788:	4ba4      	ldr	r3, [pc, #656]	; (8001a1c <StartEjection1+0x31c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	2364      	movs	r3, #100	; 0x64
 8001790:	fb03 f302 	mul.w	r3, r3, r2
 8001794:	4aa2      	ldr	r2, [pc, #648]	; (8001a20 <StartEjection1+0x320>)
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4ba1      	ldr	r3, [pc, #644]	; (8001a24 <StartEjection1+0x324>)
 800179e:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN) counter++;
 80017a0:	7abb      	ldrb	r3, [r7, #10]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	4b9a      	ldr	r3, [pc, #616]	; (8001a14 <StartEjection1+0x314>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	dc37      	bgt.n	800182a <StartEjection1+0x12a>
 80017ba:	4b96      	ldr	r3, [pc, #600]	; (8001a14 <StartEjection1+0x314>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	7abb      	ldrb	r3, [r7, #10]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ce:	7abb      	ldrb	r3, [r7, #10]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d8:	4b8e      	ldr	r3, [pc, #568]	; (8001a14 <StartEjection1+0x314>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dd0a      	ble.n	8001802 <StartEjection1+0x102>
 80017ec:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <StartEjection1+0x314>)
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	7abb      	ldrb	r3, [r7, #10]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	e009      	b.n	8001816 <StartEjection1+0x116>
 8001802:	7abb      	ldrb	r3, [r7, #10]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180c:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <StartEjection1+0x314>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	ee07 3a10 	vmov	s14, r3
 800181c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d502      	bpl.n	8001830 <StartEjection1+0x130>
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	3301      	adds	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]

	  if (counter == COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	7b3b      	ldrb	r3, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d004      	beq.n	8001842 <StartEjection1+0x142>
 8001838:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <StartEjection1+0x308>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	f240 8135 	bls.w	8001aac <StartEjection1+0x3ac>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001842:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <StartEjection1+0x308>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d827      	bhi.n	800189a <StartEjection1+0x19a>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <StartEjection1+0x314>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 2a90 	vmov	r2, s15
 8001858:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <StartEjection1+0x328>)
 800185a:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <StartEjection1+0x31c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	2364      	movs	r3, #100	; 0x64
 8001864:	fb03 f302 	mul.w	r3, r3, r2
 8001868:	4a6d      	ldr	r2, [pc, #436]	; (8001a20 <StartEjection1+0x320>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4413      	add	r3, r2
 800186e:	461a      	mov	r2, r3
 8001870:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <StartEjection1+0x32c>)
 8001872:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001874:	4b64      	ldr	r3, [pc, #400]	; (8001a08 <StartEjection1+0x308>)
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <StartEjection1+0x330>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001880:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <StartEjection1+0x334>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001886:	486c      	ldr	r0, [pc, #432]	; (8001a38 <StartEjection1+0x338>)
 8001888:	f7ff fbc0 	bl	800100c <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800188c:	e005      	b.n	800189a <StartEjection1+0x19a>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001894:	4869      	ldr	r0, [pc, #420]	; (8001a3c <StartEjection1+0x33c>)
 8001896:	f006 ffb9 	bl	800880c <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4867      	ldr	r0, [pc, #412]	; (8001a3c <StartEjection1+0x33c>)
 80018a0:	f006 ff9c 	bl	80087dc <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f1      	beq.n	800188e <StartEjection1+0x18e>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80018aa:	e005      	b.n	80018b8 <StartEjection1+0x1b8>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	4862      	ldr	r0, [pc, #392]	; (8001a3c <StartEjection1+0x33c>)
 80018b4:	f006 ffaa 	bl	800880c <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80018b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018bc:	485f      	ldr	r0, [pc, #380]	; (8001a3c <StartEjection1+0x33c>)
 80018be:	f006 ff8d 	bl	80087dc <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f1      	beq.n	80018ac <StartEjection1+0x1ac>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80018c8:	e005      	b.n	80018d6 <StartEjection1+0x1d6>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d0:	485a      	ldr	r0, [pc, #360]	; (8001a3c <StartEjection1+0x33c>)
 80018d2:	f006 ff9b 	bl	800880c <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	4858      	ldr	r0, [pc, #352]	; (8001a3c <StartEjection1+0x33c>)
 80018dc:	f006 ff7e 	bl	80087dc <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f1      	bne.n	80018ca <StartEjection1+0x1ca>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <StartEjection1+0x310>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	f001 feba 	bl	8003668 <MRT_getAltitude>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <StartEjection1+0x314>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <StartEjection1+0x314>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001a40 <StartEjection1+0x340>
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d404      	bmi.n	800191c <StartEjection1+0x21c>
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <StartEjection1+0x308>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	f240 80c4 	bls.w	8001aa4 <StartEjection1+0x3a4>

				  if (ejection_stage_flag < MAIN_DESCENT){
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <StartEjection1+0x308>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d824      	bhi.n	800196e <StartEjection1+0x26e>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <StartEjection1+0x314>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192e:	ee17 2a90 	vmov	r2, s15
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <StartEjection1+0x344>)
 8001934:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <StartEjection1+0x31c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	fb03 f302 	mul.w	r3, r3, r2
 8001942:	4a37      	ldr	r2, [pc, #220]	; (8001a20 <StartEjection1+0x320>)
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <StartEjection1+0x348>)
 800194c:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <StartEjection1+0x308>)
 8001950:	2203      	movs	r2, #3
 8001952:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <StartEjection1+0x334>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 800195a:	483c      	ldr	r0, [pc, #240]	; (8001a4c <StartEjection1+0x34c>)
 800195c:	f7ff fb56 	bl	800100c <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001960:	e005      	b.n	800196e <StartEjection1+0x26e>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001968:	4834      	ldr	r0, [pc, #208]	; (8001a3c <StartEjection1+0x33c>)
 800196a:	f006 ff4f 	bl	800880c <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800196e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001972:	4832      	ldr	r0, [pc, #200]	; (8001a3c <StartEjection1+0x33c>)
 8001974:	f006 ff32 	bl	80087dc <HAL_GPIO_ReadPin>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f1      	beq.n	8001962 <StartEjection1+0x262>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 800197e:	e005      	b.n	800198c <StartEjection1+0x28c>
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	482d      	ldr	r0, [pc, #180]	; (8001a3c <StartEjection1+0x33c>)
 8001988:	f006 ff40 	bl	800880c <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 800198c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001990:	482a      	ldr	r0, [pc, #168]	; (8001a3c <StartEjection1+0x33c>)
 8001992:	f006 ff23 	bl	80087dc <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f1      	beq.n	8001980 <StartEjection1+0x280>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800199c:	e005      	b.n	80019aa <StartEjection1+0x2aa>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a4:	4825      	ldr	r0, [pc, #148]	; (8001a3c <StartEjection1+0x33c>)
 80019a6:	f006 ff31 	bl	800880c <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ae:	4823      	ldr	r0, [pc, #140]	; (8001a3c <StartEjection1+0x33c>)
 80019b0:	f006 ff14 	bl	80087dc <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f1      	bne.n	800199e <StartEjection1+0x29e>
				  }

				  uint8_t prev_altitude = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73bb      	strb	r3, [r7, #14]
				  uint8_t cur_altitude = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	727b      	strb	r3, [r7, #9]
				  uint8_t counter = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	737b      	strb	r3, [r7, #13]
				  while(counter < 5){
 80019c6:	e04a      	b.n	8001a5e <StartEjection1+0x35e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <StartEjection1+0x310>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	f001 fe49 	bl	8003668 <MRT_getAltitude>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
 80019da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019de:	edc7 7a00 	vstr	s15, [r7]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	727b      	strb	r3, [r7, #9]
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 80019e6:	7a7a      	ldrb	r2, [r7, #9]
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dc2f      	bgt.n	8001a50 <StartEjection1+0x350>
 80019f0:	7a7a      	ldrb	r2, [r7, #9]
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db2a      	blt.n	8001a50 <StartEjection1+0x350>
						  counter++;
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	3301      	adds	r3, #1
 80019fe:	737b      	strb	r3, [r7, #13]
 8001a00:	e028      	b.n	8001a54 <StartEjection1+0x354>
 8001a02:	bf00      	nop
 8001a04:	20005a98 	.word	0x20005a98
 8001a08:	20000374 	.word	0x20000374
 8001a0c:	20000371 	.word	0x20000371
 8001a10:	200003b8 	.word	0x200003b8
 8001a14:	200002c8 	.word	0x200002c8
 8001a18:	2000033c 	.word	0x2000033c
 8001a1c:	20000376 	.word	0x20000376
 8001a20:	20000377 	.word	0x20000377
 8001a24:	20000340 	.word	0x20000340
 8001a28:	20000344 	.word	0x20000344
 8001a2c:	20000348 	.word	0x20000348
 8001a30:	20000373 	.word	0x20000373
 8001a34:	200002cc 	.word	0x200002cc
 8001a38:	08016ee0 	.word	0x08016ee0
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	44fa0000 	.word	0x44fa0000
 8001a44:	2000034c 	.word	0x2000034c
 8001a48:	20000350 	.word	0x20000350
 8001a4c:	08016ef0 	.word	0x08016ef0
					  }
					  else{
						  counter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	737b      	strb	r3, [r7, #13]
					  }
					  prev_altitude = cur_altitude;
 8001a54:	7a7b      	ldrb	r3, [r7, #9]
 8001a56:	73bb      	strb	r3, [r7, #14]
					  osDelay(100);
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f00c f957 	bl	800dd0c <osDelay>
				  while(counter < 5){
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d9b1      	bls.n	80019c8 <StartEjection1+0x2c8>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <StartEjection1+0x3b4>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6e:	ee17 2a90 	vmov	r2, s15
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <StartEjection1+0x3b8>)
 8001a74:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <StartEjection1+0x3bc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	fb03 f302 	mul.w	r3, r3, r2
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <StartEjection1+0x3c0>)
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <StartEjection1+0x3c4>)
 8001a8c:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <StartEjection1+0x3c8>)
 8001a90:	2204      	movs	r2, #4
 8001a92:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <StartEjection1+0x3cc>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <StartEjection1+0x3d0>)
 8001a9c:	f7ff fab6 	bl	800100c <println>
				  osThreadExit();
 8001aa0:	f00c f901 	bl	800dca6 <osThreadExit>

			  }

			  osDelay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f00c f931 	bl	800dd0c <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001aaa:	e71c      	b.n	80018e6 <StartEjection1+0x1e6>
		  }
	  }

	  osDelay(10);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f00c f92d 	bl	800dd0c <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ab2:	e646      	b.n	8001742 <StartEjection1+0x42>
 8001ab4:	200002c8 	.word	0x200002c8
 8001ab8:	20000354 	.word	0x20000354
 8001abc:	20000376 	.word	0x20000376
 8001ac0:	20000377 	.word	0x20000377
 8001ac4:	20000358 	.word	0x20000358
 8001ac8:	20000374 	.word	0x20000374
 8001acc:	200002cc 	.word	0x200002cc
 8001ad0:	08016efc 	.word	0x08016efc

08001ad4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0c4      	sub	sp, #272	; 0x110
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001ade:	f00c f879 	bl	800dbd4 <osThreadGetId>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a37      	ldr	r2, [pc, #220]	; (8001bc4 <StartTelemetry2+0xf0>)
 8001ae6:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2108      	movs	r1, #8
 8001af8:	4833      	ldr	r0, [pc, #204]	; (8001bc8 <StartTelemetry2+0xf4>)
 8001afa:	f006 fe87 	bl	800880c <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <StartTelemetry2+0xf8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f010 f853 	bl	8011bbc <memset>
		  MRT_formatPropulsion();
 8001b16:	f003 f86b 	bl	8004bf0 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001b1a:	482d      	ldr	r0, [pc, #180]	; (8001bd0 <StartTelemetry2+0xfc>)
 8001b1c:	f7fe fb68 	bl	80001f0 <strlen>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	492a      	ldr	r1, [pc, #168]	; (8001bd0 <StartTelemetry2+0xfc>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f010 f81f 	bl	8011b6c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fef2 	bl	800791c <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001b38:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b3c:	2b0a      	cmp	r3, #10
 8001b3e:	d12b      	bne.n	8001b98 <StartTelemetry2+0xc4>
		  counter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f010 f833 	bl	8011bbc <memset>
		  MRT_formatAvionics();
 8001b56:	f001 fe09 	bl	800376c <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001b5a:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <StartTelemetry2+0x100>)
 8001b5c:	f7fe fb48 	bl	80001f0 <strlen>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <StartTelemetry2+0x100>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00f ffff 	bl	8011b6c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 fed2 	bl	800791c <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <StartTelemetry2+0xf8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <StartTelemetry2+0xba>
 8001b80:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d102      	bne.n	8001b8e <StartTelemetry2+0xba>
			  iridium_counter = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001b8e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001b92:	3301      	adds	r3, #1
 8001b94:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001b98:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <StartTelemetry2+0xf4>)
 8001ba8:	f006 fe30 	bl	800880c <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <StartTelemetry2+0xf8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <StartTelemetry2+0xe8>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f00c f8a9 	bl	800dd0c <osDelay>
 8001bba:	e79b      	b.n	8001af4 <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001bbc:	2014      	movs	r0, #20
 8001bbe:	f00c f8a5 	bl	800dd0c <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001bc2:	e797      	b.n	8001af4 <StartTelemetry2+0x20>
 8001bc4:	20005a98 	.word	0x20005a98
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	20000373 	.word	0x20000373
 8001bd0:	20005efc 	.word	0x20005efc
 8001bd4:	20005df4 	.word	0x20005df4

08001bd8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001be0:	f00b fff8 	bl	800dbd4 <osThreadGetId>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <StartSensors3+0x5c>)
 8001be8:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2102      	movs	r1, #2
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <StartSensors3+0x60>)
 8001bf0:	f006 fe0c 	bl	800880c <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <StartSensors3+0x64>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <StartSensors3+0x68>)
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <StartSensors3+0x6c>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001c06:	f001 fd7d 	bl	8003704 <MRT_getContinuity>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <StartSensors3+0x70>)
 8001c10:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2102      	movs	r1, #2
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <StartSensors3+0x60>)
 8001c18:	f006 fdf8 	bl	800880c <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <StartSensors3+0x74>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f00c f871 	bl	800dd0c <osDelay>
 8001c2a:	e7de      	b.n	8001bea <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001c2c:	2014      	movs	r0, #20
 8001c2e:	f00c f86d 	bl	800dd0c <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001c32:	e7da      	b.n	8001bea <StartSensors3+0x12>
 8001c34:	20005a98 	.word	0x20005a98
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	200003cc 	.word	0x200003cc
 8001c40:	2000038c 	.word	0x2000038c
 8001c44:	200003b8 	.word	0x200003b8
 8001c48:	2000035d 	.word	0x2000035d
 8001c4c:	20000373 	.word	0x20000373

08001c50 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c54:	b0c6      	sub	sp, #280	; 0x118
 8001c56:	af04      	add	r7, sp, #16
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2104      	movs	r1, #4
 8001c60:	485a      	ldr	r0, [pc, #360]	; (8001dcc <StartWatchDog+0x17c>)
 8001c62:	f006 fdd3 	bl	800880c <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001c66:	485a      	ldr	r0, [pc, #360]	; (8001dd0 <StartWatchDog+0x180>)
 8001c68:	f007 feb4 	bl	80099d4 <HAL_IWDG_Refresh>

	 //Save the RTC time
	 MRT_saveTotalTime();
 8001c6c:	f001 ff5a 	bl	8003b24 <MRT_saveTotalTime>

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00f ff9e 	bl	8011bbc <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001c80:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <StartWatchDog+0x184>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461e      	mov	r6, r3
 8001c86:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <StartWatchDog+0x188>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <StartWatchDog+0x18c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461d      	mov	r5, r3
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <StartWatchDog+0x190>)
 8001c94:	681c      	ldr	r4, [r3, #0]
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <StartWatchDog+0x194>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc64 	bl	8000568 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	f107 0008 	add.w	r0, r7, #8
 8001ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cac:	9401      	str	r4, [sp, #4]
 8001cae:	9500      	str	r5, [sp, #0]
 8001cb0:	4643      	mov	r3, r8
 8001cb2:	4632      	mov	r2, r6
 8001cb4:	494c      	ldr	r1, [pc, #304]	; (8001de8 <StartWatchDog+0x198>)
 8001cb6:	f010 ffff 	bl	8012cb8 <siprintf>
	 println((char*) buffer);
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9a4 	bl	800100c <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <StartWatchDog+0x19c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d15d      	bne.n	8001d88 <StartWatchDog+0x138>

		wd_ejection_flag = 0;
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <StartWatchDog+0x19c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <StartWatchDog+0x1a0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <StartWatchDog+0x1a4>)
 8001cda:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <StartWatchDog+0x1a0>)
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <StartWatchDog+0x1a8>)
 8001ce2:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001ce4:	2004      	movs	r0, #4
 8001ce6:	f001 fe91 	bl	8003a0c <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <StartWatchDog+0x1a0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d90e      	bls.n	8001d10 <StartWatchDog+0xc0>
			apogee_flag = 1;
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <StartWatchDog+0x1ac>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <StartWatchDog+0x1ac>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <StartWatchDog+0x1b0>)
 8001d00:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <StartWatchDog+0x1ac>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <StartWatchDog+0x1b4>)
 8001d08:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	f001 fe7e 	bl	8003a0c <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001d10:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <StartWatchDog+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	2009      	movs	r0, #9
 8001d18:	f001 f80e 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <StartWatchDog+0x1bc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	200a      	movs	r0, #10
 8001d24:	f001 f808 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <StartWatchDog+0x1c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	200b      	movs	r0, #11
 8001d30:	f001 f802 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <StartWatchDog+0x1c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	200c      	movs	r0, #12
 8001d3c:	f000 fffc 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <StartWatchDog+0x1c8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	200d      	movs	r0, #13
 8001d48:	f000 fff6 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <StartWatchDog+0x1cc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	200e      	movs	r0, #14
 8001d54:	f000 fff0 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <StartWatchDog+0x1d0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 ffea 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <StartWatchDog+0x1d4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f000 ffe4 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <StartWatchDog+0x1d8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	2011      	movs	r0, #17
 8001d78:	f000 ffde 	bl	8002d38 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <StartWatchDog+0x1dc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2012      	movs	r0, #18
 8001d84:	f000 ffd8 	bl	8002d38 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1){
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <StartWatchDog+0x1e0>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d110      	bne.n	8001db2 <StartWatchDog+0x162>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <StartWatchDog+0x1e4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_apogee = iwdg_flag;
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <StartWatchDog+0x1e4>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <StartWatchDog+0x1b0>)
 8001d9e:	601a      	str	r2, [r3, #0]
		ext_flash_apogee = iwdg_flag;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <StartWatchDog+0x1e4>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <StartWatchDog+0x1b4>)
 8001da6:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f001 fe2f 	bl	8003a0c <MRT_saveFlagValue>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001dae:	f7ff fbdb 	bl	8001568 <__NVIC_SystemReset>
	  }

	  MRT_checkThreadStates();
 8001db2:	f000 f867 	bl	8001e84 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2104      	movs	r1, #4
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <StartWatchDog+0x17c>)
 8001dbc:	f006 fd26 	bl	800880c <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc4:	f00b ffa2 	bl	800dd0c <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001dc8:	e748      	b.n	8001c5c <StartWatchDog+0xc>
 8001dca:	bf00      	nop
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	20005b64 	.word	0x20005b64
 8001dd4:	20000375 	.word	0x20000375
 8001dd8:	20000376 	.word	0x20000376
 8001ddc:	20000377 	.word	0x20000377
 8001de0:	20000378 	.word	0x20000378
 8001de4:	200002c8 	.word	0x200002c8
 8001de8:	08016f14 	.word	0x08016f14
 8001dec:	200002cc 	.word	0x200002cc
 8001df0:	20000374 	.word	0x20000374
 8001df4:	20000320 	.word	0x20000320
 8001df8:	20000362 	.word	0x20000362
 8001dfc:	20000373 	.word	0x20000373
 8001e00:	2000031c 	.word	0x2000031c
 8001e04:	20000361 	.word	0x20000361
 8001e08:	20000334 	.word	0x20000334
 8001e0c:	20000338 	.word	0x20000338
 8001e10:	2000033c 	.word	0x2000033c
 8001e14:	20000340 	.word	0x20000340
 8001e18:	20000344 	.word	0x20000344
 8001e1c:	20000348 	.word	0x20000348
 8001e20:	2000034c 	.word	0x2000034c
 8001e24:	20000350 	.word	0x20000350
 8001e28:	20000354 	.word	0x20000354
 8001e2c:	20000358 	.word	0x20000358
 8001e30:	2000035c 	.word	0x2000035c
 8001e34:	20000372 	.word	0x20000372

08001e38 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001e40:	f00b fec8 	bl	800dbd4 <osThreadGetId>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <StartPropulsion4+0x40>)
 8001e48:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <StartPropulsion4+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <StartPropulsion4+0x22>
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <StartPropulsion4+0x48>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d901      	bls.n	8001e5e <StartPropulsion4+0x26>
		osThreadExit();
 8001e5a:	f00b ff24 	bl	800dca6 <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001e5e:	f002 fe8f 	bl	8004b80 <MRT_pollPropulsion>

	  if (apogee_flag){
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <StartPropulsion4+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <StartPropulsion4+0x36>
		  osThreadExit();
 8001e6a:	f00b ff1c 	bl	800dca6 <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001e6e:	2014      	movs	r0, #20
 8001e70:	f00b ff4c 	bl	800dd0c <osDelay>
	  MRT_pollPropulsion();
 8001e74:	e7f3      	b.n	8001e5e <StartPropulsion4+0x26>
 8001e76:	bf00      	nop
 8001e78:	20005a98 	.word	0x20005a98
 8001e7c:	20000373 	.word	0x20000373
 8001e80:	20000374 	.word	0x20000374

08001e84 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e055      	b.n	8001f3c <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001e90:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <MRT_checkThreadStates+0xc8>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00b fea7 	bl	800dbec <osThreadGetState>
 8001e9e:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <MRT_checkThreadStates+0x2e>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d002      	beq.n	8001eb2 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d128      	bne.n	8001f04 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10a      	bne.n	8001ece <MRT_checkThreadStates+0x4a>
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <MRT_checkThreadStates+0xcc>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d806      	bhi.n	8001ece <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <MRT_checkThreadStates+0xc8>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00b fecb 	bl	800dc64 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d10f      	bne.n	8001ef4 <MRT_checkThreadStates+0x70>
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <MRT_checkThreadStates+0xd0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <MRT_checkThreadStates+0x60>
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MRT_checkThreadStates+0xcc>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d907      	bls.n	8001ef4 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <MRT_checkThreadStates+0xc8>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00b fee0 	bl	800dcb2 <osThreadTerminate>
				  continue;
 8001ef2:	e020      	b.n	8001f36 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MRT_checkThreadStates+0xc8>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00b feb1 	bl	800dc64 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001f02:	e018      	b.n	8001f36 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0a:	d114      	bne.n	8001f36 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d10f      	bne.n	8001f32 <MRT_checkThreadStates+0xae>
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MRT_checkThreadStates+0xd0>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <MRT_checkThreadStates+0x9e>
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MRT_checkThreadStates+0xcc>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d907      	bls.n	8001f32 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <MRT_checkThreadStates+0xc8>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00b fec1 	bl	800dcb2 <osThreadTerminate>
				  continue;
 8001f30:	e001      	b.n	8001f36 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 8001f32:	f7ff fb19 	bl	8001568 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	dda6      	ble.n	8001e90 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20005a98 	.word	0x20005a98
 8001f50:	20000374 	.word	0x20000374
 8001f54:	20000373 	.word	0x20000373

08001f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	4bb5      	ldr	r3, [pc, #724]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4ab4      	ldr	r2, [pc, #720]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4bb2      	ldr	r3, [pc, #712]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	4bae      	ldr	r3, [pc, #696]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4aad      	ldr	r2, [pc, #692]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4bab      	ldr	r3, [pc, #684]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	4ba7      	ldr	r3, [pc, #668]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4aa6      	ldr	r2, [pc, #664]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fb0:	f043 0320 	orr.w	r3, r3, #32
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4ba4      	ldr	r3, [pc, #656]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	4ba0      	ldr	r3, [pc, #640]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b9d      	ldr	r3, [pc, #628]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b99      	ldr	r3, [pc, #612]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a98      	ldr	r2, [pc, #608]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b96      	ldr	r3, [pc, #600]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b92      	ldr	r3, [pc, #584]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a91      	ldr	r2, [pc, #580]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <MX_GPIO_Init+0x2f0>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <MX_GPIO_Init+0x2f0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a8a      	ldr	r2, [pc, #552]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b84      	ldr	r3, [pc, #528]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a83      	ldr	r2, [pc, #524]	; (8002248 <MX_GPIO_Init+0x2f0>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b81      	ldr	r3, [pc, #516]	; (8002248 <MX_GPIO_Init+0x2f0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f248 4184 	movw	r1, #33924	; 0x8484
 8002054:	487d      	ldr	r0, [pc, #500]	; (800224c <MX_GPIO_Init+0x2f4>)
 8002056:	f006 fbd9 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002060:	487b      	ldr	r0, [pc, #492]	; (8002250 <MX_GPIO_Init+0x2f8>)
 8002062:	f006 fbd3 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800206c:	4879      	ldr	r0, [pc, #484]	; (8002254 <MX_GPIO_Init+0x2fc>)
 800206e:	f006 fbcd 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2108      	movs	r1, #8
 8002076:	4878      	ldr	r0, [pc, #480]	; (8002258 <MX_GPIO_Init+0x300>)
 8002078:	f006 fbc8 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800207c:	2200      	movs	r2, #0
 800207e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002082:	4876      	ldr	r0, [pc, #472]	; (800225c <MX_GPIO_Init+0x304>)
 8002084:	f006 fbc2 	bl	800880c <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800208e:	4874      	ldr	r0, [pc, #464]	; (8002260 <MX_GPIO_Init+0x308>)
 8002090:	f006 fbbc 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002094:	2200      	movs	r2, #0
 8002096:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800209a:	4872      	ldr	r0, [pc, #456]	; (8002264 <MX_GPIO_Init+0x30c>)
 800209c:	f006 fbb6 	bl	800880c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80020a0:	f248 4384 	movw	r3, #33924	; 0x8484
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	4864      	ldr	r0, [pc, #400]	; (800224c <MX_GPIO_Init+0x2f4>)
 80020ba:	f006 f9e3 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80020be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	485e      	ldr	r0, [pc, #376]	; (8002250 <MX_GPIO_Init+0x2f8>)
 80020d8:	f006 f9d4 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80020dc:	2301      	movs	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4858      	ldr	r0, [pc, #352]	; (8002254 <MX_GPIO_Init+0x2fc>)
 80020f2:	f006 f9c7 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80020f6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4851      	ldr	r0, [pc, #324]	; (8002254 <MX_GPIO_Init+0x2fc>)
 8002110:	f006 f9b8 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002114:	2308      	movs	r3, #8
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	4619      	mov	r1, r3
 800212a:	484b      	ldr	r0, [pc, #300]	; (8002258 <MX_GPIO_Init+0x300>)
 800212c:	f006 f9aa 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002130:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002142:	4619      	mov	r1, r3
 8002144:	4843      	ldr	r0, [pc, #268]	; (8002254 <MX_GPIO_Init+0x2fc>)
 8002146:	f006 f99d 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800214a:	2302      	movs	r3, #2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	4619      	mov	r1, r3
 800215c:	4840      	ldr	r0, [pc, #256]	; (8002260 <MX_GPIO_Init+0x308>)
 800215e:	f006 f991 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	4836      	ldr	r0, [pc, #216]	; (8002250 <MX_GPIO_Init+0x2f8>)
 8002178:	f006 f984 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800217c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	482e      	ldr	r0, [pc, #184]	; (8002250 <MX_GPIO_Init+0x2f8>)
 8002196:	f006 f975 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800219a:	f242 4319 	movw	r3, #9241	; 0x2419
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	482b      	ldr	r0, [pc, #172]	; (800225c <MX_GPIO_Init+0x304>)
 80021b0:	f006 f968 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021b4:	f645 2326 	movw	r3, #23078	; 0x5a26
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	4823      	ldr	r0, [pc, #140]	; (800225c <MX_GPIO_Init+0x304>)
 80021ce:	f006 f959 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80021d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4819      	ldr	r0, [pc, #100]	; (800224c <MX_GPIO_Init+0x2f4>)
 80021e8:	f006 f94c 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 80021ec:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4816      	ldr	r0, [pc, #88]	; (8002260 <MX_GPIO_Init+0x308>)
 8002206:	f006 f93d 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800220a:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4810      	ldr	r0, [pc, #64]	; (8002264 <MX_GPIO_Init+0x30c>)
 8002224:	f006 f92e 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223a:	4619      	mov	r1, r3
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <MX_GPIO_Init+0x30c>)
 800223e:	f006 f921 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002242:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002246:	e00f      	b.n	8002268 <MX_GPIO_Init+0x310>
 8002248:	40023800 	.word	0x40023800
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020000 	.word	0x40020000
 800225c:	40021800 	.word	0x40021800
 8002260:	40020400 	.word	0x40020400
 8002264:	40020c00 	.word	0x40020c00
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800226a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_GPIO_Init+0x340>)
 800227c:	f006 f902 	bl	8008484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2105      	movs	r1, #5
 8002284:	2006      	movs	r0, #6
 8002286:	f006 f8c5 	bl	8008414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800228a:	2006      	movs	r0, #6
 800228c:	f006 f8de 	bl	800844c <HAL_NVIC_EnableIRQ>

}
 8002290:	bf00      	nop
 8002292:	3738      	adds	r7, #56	; 0x38
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021800 	.word	0x40021800

0800229c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <MX_I2C2_Init+0x74>)
 80022a2:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <MX_I2C2_Init+0x78>)
 80022a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <MX_I2C2_Init+0x74>)
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <MX_I2C2_Init+0x7c>)
 80022aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <MX_I2C2_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <MX_I2C2_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <MX_I2C2_Init+0x74>)
 80022ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_I2C2_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_I2C2_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_I2C2_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_I2C2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_I2C2_Init+0x74>)
 80022da:	f006 fac9 	bl	8008870 <HAL_I2C_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022e4:	f000 fa5e 	bl	80027a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022e8:	2100      	movs	r1, #0
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <MX_I2C2_Init+0x74>)
 80022ec:	f007 fab5 	bl	800985a <HAL_I2CEx_ConfigAnalogFilter>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80022f6:	f000 fa55 	bl	80027a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_I2C2_Init+0x74>)
 80022fe:	f007 fae8 	bl	80098d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002308:	f000 fa4c 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20005b10 	.word	0x20005b10
 8002314:	40005800 	.word	0x40005800
 8002318:	000186a0 	.word	0x000186a0

0800231c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_I2C3_Init+0x74>)
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <MX_I2C3_Init+0x78>)
 8002324:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_I2C3_Init+0x74>)
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <MX_I2C3_Init+0x7c>)
 800232a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_I2C3_Init+0x74>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_I2C3_Init+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_I2C3_Init+0x74>)
 800233a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_I2C3_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_I2C3_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_I2C3_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_I2C3_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <MX_I2C3_Init+0x74>)
 800235a:	f006 fa89 	bl	8008870 <HAL_I2C_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002364:	f000 fa1e 	bl	80027a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002368:	2100      	movs	r1, #0
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <MX_I2C3_Init+0x74>)
 800236c:	f007 fa75 	bl	800985a <HAL_I2CEx_ConfigAnalogFilter>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002376:	f000 fa15 	bl	80027a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800237a:	2100      	movs	r1, #0
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_I2C3_Init+0x74>)
 800237e:	f007 faa8 	bl	80098d2 <HAL_I2CEx_ConfigDigitalFilter>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002388:	f000 fa0c 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20005abc 	.word	0x20005abc
 8002394:	40005c00 	.word	0x40005c00
 8002398:	000186a0 	.word	0x000186a0

0800239c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a42      	ldr	r2, [pc, #264]	; (80024c4 <HAL_I2C_MspInit+0x128>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12d      	bne.n	800241a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e0:	2312      	movs	r3, #18
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023ec:	2304      	movs	r3, #4
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4835      	ldr	r0, [pc, #212]	; (80024cc <HAL_I2C_MspInit+0x130>)
 80023f8:	f006 f844 	bl	8008484 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 8002406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002418:	e050      	b.n	80024bc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	; (80024d0 <HAL_I2C_MspInit+0x134>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d14b      	bne.n	80024bc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6313      	str	r3, [r2, #48]	; 0x30
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6313      	str	r3, [r2, #48]	; 0x30
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800245c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002462:	2312      	movs	r3, #18
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800246e:	2304      	movs	r3, #4
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	4816      	ldr	r0, [pc, #88]	; (80024d4 <HAL_I2C_MspInit+0x138>)
 800247a:	f006 f803 	bl	8008484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002484:	2312      	movs	r3, #18
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002488:	2301      	movs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002490:	2304      	movs	r3, #4
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	480f      	ldr	r0, [pc, #60]	; (80024d8 <HAL_I2C_MspInit+0x13c>)
 800249c:	f005 fff2 	bl	8008484 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80024aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ae:	6413      	str	r3, [r2, #64]	; 0x40
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_I2C_MspInit+0x12c>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40005800 	.word	0x40005800
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40005c00 	.word	0x40005c00
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020000 	.word	0x40020000

080024dc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_IWDG_Init+0x2c>)
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <MX_IWDG_Init+0x30>)
 80024e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_IWDG_Init+0x2c>)
 80024e8:	2204      	movs	r2, #4
 80024ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_IWDG_Init+0x2c>)
 80024ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80024f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_IWDG_Init+0x2c>)
 80024f6:	f007 fa2b 	bl	8009950 <HAL_IWDG_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002500:	f000 f950 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20005b64 	.word	0x20005b64
 800250c:	40003000 	.word	0x40003000

08002510 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002514:	f000 f89c 	bl	8002650 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8002518:	480f      	ldr	r0, [pc, #60]	; (8002558 <main+0x48>)
 800251a:	f7fe fd77 	bl	800100c <println>

	MRT_Init();
 800251e:	f7fe fe13 	bl	8001148 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8002522:	480e      	ldr	r0, [pc, #56]	; (800255c <main+0x4c>)
 8002524:	f7fe fd72 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <main+0x50>)
 800252a:	f007 fa53 	bl	80099d4 <HAL_IWDG_Refresh>
	buzz_startup_success();
 800252e:	f7fe fdf3 	bl	8001118 <buzz_startup_success>

	MRT_waitForLaunch();
 8002532:	f000 f8af 	bl	8002694 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8002536:	f7ff f82d 	bl	8001594 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <main+0x54>)
 800253c:	f7fe fd66 	bl	800100c <println>
	osKernelStart();
 8002540:	f00b fa90 	bl	800da64 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <main+0x58>)
 8002546:	f7fe fd61 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <main+0x50>)
 800254c:	f007 fa42 	bl	80099d4 <HAL_IWDG_Refresh>
	MRT_Deinit();
 8002550:	f7fe fe20 	bl	8001194 <MRT_Deinit>
	while (1){}
 8002554:	e7fe      	b.n	8002554 <main+0x44>
 8002556:	bf00      	nop
 8002558:	08016f3c 	.word	0x08016f3c
 800255c:	08016f50 	.word	0x08016f50
 8002560:	20005b64 	.word	0x20005b64
 8002564:	08016f70 	.word	0x08016f70
 8002568:	08016f90 	.word	0x08016f90

0800256c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b094      	sub	sp, #80	; 0x50
 8002570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	2230      	movs	r2, #48	; 0x30
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f00f fb1e 	bl	8011bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <SystemClock_Config+0xdc>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <SystemClock_Config+0xdc>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <SystemClock_Config+0xdc>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <SystemClock_Config+0xe0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <SystemClock_Config+0xe0>)
 80025b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <SystemClock_Config+0xe0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025c8:	2309      	movs	r3, #9
 80025ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025d2:	2301      	movs	r3, #1
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d6:	2302      	movs	r3, #2
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025e0:	2308      	movs	r3, #8
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80025e4:	23b4      	movs	r3, #180	; 0xb4
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80025ec:	2303      	movs	r3, #3
 80025ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f0:	f107 0320 	add.w	r3, r7, #32
 80025f4:	4618      	mov	r0, r3
 80025f6:	f007 fa8b 	bl	8009b10 <HAL_RCC_OscConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002600:	f000 f8d0 	bl	80027a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002604:	f007 fa34 	bl	8009a70 <HAL_PWREx_EnableOverDrive>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800260e:	f000 f8c9 	bl	80027a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002612:	230f      	movs	r3, #15
 8002614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800261e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	2105      	movs	r1, #5
 8002630:	4618      	mov	r0, r3
 8002632:	f007 fce5 	bl	800a000 <HAL_RCC_ClockConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800263c:	f000 f8b2 	bl	80027a4 <Error_Handler>
  }
}
 8002640:	bf00      	nop
 8002642:	3750      	adds	r7, #80	; 0x50
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000

08002650 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_Init();
 8002654:	f005 f98c 	bl	8007970 <HAL_Init>
	SystemClock_Config();
 8002658:	f7ff ff88 	bl	800256c <SystemClock_Config>

	MX_GPIO_Init();
 800265c:	f7ff fc7c 	bl	8001f58 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002660:	f7fe feec 	bl	800143c <MX_ADC1_Init>
	MX_I2C2_Init();
 8002664:	f7ff fe1a 	bl	800229c <MX_I2C2_Init>
	MX_I2C3_Init();
 8002668:	f7ff fe58 	bl	800231c <MX_I2C3_Init>
	MX_SPI2_Init();
 800266c:	f000 fb82 	bl	8002d74 <MX_SPI2_Init>
	MX_SPI4_Init();
 8002670:	f000 fbb6 	bl	8002de0 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002674:	f000 fbea 	bl	8002e4c <MX_SPI5_Init>
	MX_TIM2_Init();
 8002678:	f000 fdcc 	bl	8003214 <MX_TIM2_Init>
	MX_UART8_Init();
 800267c:	f000 fe98 	bl	80033b0 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002680:	f000 fec0 	bl	8003404 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002684:	f000 fee8 	bl	8003458 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002688:	f000 f892 	bl	80027b0 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800268c:	f00b f8bc 	bl	800d808 <MX_FATFS_Init>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002694:	b580      	push	{r7, lr}
 8002696:	b0c2      	sub	sp, #264	; 0x108
 8002698:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 800269a:	482e      	ldr	r0, [pc, #184]	; (8002754 <MRT_waitForLaunch+0xc0>)
 800269c:	f7fe fcb6 	bl	800100c <println>

	//TODO for testing (saved in wd thread)
	hlps22hh.getPressure();
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <MRT_waitForLaunch+0xc4>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <MRT_waitForLaunch+0xc4>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	f000 ffda 	bl	8003668 <MRT_getAltitude>
 80026b4:	eef0 7a40 	vmov.f32	s15, s0
 80026b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026bc:	ee17 2a90 	vmov	r2, s15
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <MRT_waitForLaunch+0xc8>)
 80026c2:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <MRT_waitForLaunch+0xc8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	2009      	movs	r0, #9
 80026cc:	f000 fb34 	bl	8002d38 <MRT_RTC_setBackupReg>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 80026d0:	23ff      	movs	r3, #255	; 0xff
 80026d2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 80026d6:	bf00      	nop
	}


	//TODO testing time (saved in watchdog thread
	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80026d8:	2200      	movs	r2, #0
 80026da:	4921      	ldr	r1, [pc, #132]	; (8002760 <MRT_waitForLaunch+0xcc>)
 80026dc:	4821      	ldr	r0, [pc, #132]	; (8002764 <MRT_waitForLaunch+0xd0>)
 80026de:	f008 f9c7 	bl	800aa70 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80026e2:	2200      	movs	r2, #0
 80026e4:	4920      	ldr	r1, [pc, #128]	; (8002768 <MRT_waitForLaunch+0xd4>)
 80026e6:	481f      	ldr	r0, [pc, #124]	; (8002764 <MRT_waitForLaunch+0xd0>)
 80026e8:	f008 fac7 	bl	800ac7a <HAL_RTC_GetDate>
	 prev_min = sTime.Minutes;
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MRT_waitForLaunch+0xcc>)
 80026ee:	785a      	ldrb	r2, [r3, #1]
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <MRT_waitForLaunch+0xd8>)
 80026f2:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MRT_waitForLaunch+0xcc>)
 80026f6:	789a      	ldrb	r2, [r3, #2]
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <MRT_waitForLaunch+0xdc>)
 80026fa:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MRT_waitForLaunch+0xd0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <MRT_waitForLaunch+0x82>
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MRT_waitForLaunch+0xdc>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MRT_waitForLaunch+0xdc>)
 8002714:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MRT_waitForLaunch+0xcc>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <MRT_waitForLaunch+0xe0>)
 800271c:	6013      	str	r3, [r2, #0]
	 rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MRT_waitForLaunch+0xd8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	2364      	movs	r3, #100	; 0x64
 8002726:	fb03 f302 	mul.w	r3, r3, r2
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <MRT_waitForLaunch+0xdc>)
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MRT_waitForLaunch+0xe4>)
 8002734:	601a      	str	r2, [r3, #0]
	 MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MRT_waitForLaunch+0xe4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	200a      	movs	r0, #10
 800273e:	f000 fafb 	bl	8002d38 <MRT_RTC_setBackupReg>


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <MRT_waitForLaunch+0xe8>)
 8002744:	f005 f8ea 	bl	800791c <MRT_radio_tx>
}
 8002748:	bf00      	nop
 800274a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	08016fcc 	.word	0x08016fcc
 8002758:	200003b8 	.word	0x200003b8
 800275c:	20000334 	.word	0x20000334
 8002760:	200002d0 	.word	0x200002d0
 8002764:	20005b70 	.word	0x20005b70
 8002768:	200002e4 	.word	0x200002e4
 800276c:	20000376 	.word	0x20000376
 8002770:	20000377 	.word	0x20000377
 8002774:	20000378 	.word	0x20000378
 8002778:	20000338 	.word	0x20000338
 800277c:	08017000 	.word	0x08017000

08002780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002792:	f005 f90f 	bl	80079b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40001000 	.word	0x40001000

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b090      	sub	sp, #64	; 0x40
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2228      	movs	r2, #40	; 0x28
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00f f9f3 	bl	8011bbc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <MX_RTC_Init+0x110>)
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <MX_RTC_Init+0x114>)
 80027da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027dc:	4b38      	ldr	r3, [pc, #224]	; (80028c0 <MX_RTC_Init+0x110>)
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <MX_RTC_Init+0x110>)
 80027e4:	227f      	movs	r2, #127	; 0x7f
 80027e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027e8:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <MX_RTC_Init+0x110>)
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <MX_RTC_Init+0x110>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <MX_RTC_Init+0x110>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <MX_RTC_Init+0x110>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002800:	482f      	ldr	r0, [pc, #188]	; (80028c0 <MX_RTC_Init+0x110>)
 8002802:	f007 ffe7 	bl	800a7d4 <HAL_RTC_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800280c:	f7ff ffca 	bl	80027a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002822:	2300      	movs	r3, #0
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800282a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800282e:	2201      	movs	r2, #1
 8002830:	4619      	mov	r1, r3
 8002832:	4823      	ldr	r0, [pc, #140]	; (80028c0 <MX_RTC_Init+0x110>)
 8002834:	f008 f85f 	bl	800a8f6 <HAL_RTC_SetTime>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800283e:	f7ff ffb1 	bl	80027a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800285a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285e:	2201      	movs	r2, #1
 8002860:	4619      	mov	r1, r3
 8002862:	4817      	ldr	r0, [pc, #92]	; (80028c0 <MX_RTC_Init+0x110>)
 8002864:	f008 f962 	bl	800ab2c <HAL_RTC_SetDate>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800286e:	f7ff ff99 	bl	80027a4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002872:	2300      	movs	r3, #0
 8002874:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002876:	2301      	movs	r3, #1
 8002878:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800287a:	2300      	movs	r3, #0
 800287c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800289c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80028a2:	463b      	mov	r3, r7
 80028a4:	2201      	movs	r2, #1
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_RTC_Init+0x110>)
 80028aa:	f008 fa35 	bl	800ad18 <HAL_RTC_SetAlarm_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80028b4:	f7ff ff76 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028b8:	bf00      	nop
 80028ba:	3740      	adds	r7, #64	; 0x40
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20005b70 	.word	0x20005b70
 80028c4:	40002800 	.word	0x40002800

080028c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	2230      	movs	r2, #48	; 0x30
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f00f f96f 	bl	8011bbc <memset>
  if(rtcHandle->Instance==RTC)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_RTC_MspInit+0x5c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d119      	bne.n	800291c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028e8:	2320      	movs	r3, #32
 80028ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4618      	mov	r0, r3
 80028f8:	f007 fdae 	bl	800a458 <HAL_RCCEx_PeriphCLKConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002902:	f7ff ff4f 	bl	80027a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RTC_MspInit+0x60>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2105      	movs	r1, #5
 8002910:	2029      	movs	r0, #41	; 0x29
 8002912:	f005 fd7f 	bl	8008414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002916:	2029      	movs	r0, #41	; 0x29
 8002918:	f005 fd98 	bl	800844c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800291c:	bf00      	nop
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40002800 	.word	0x40002800
 8002928:	42470e3c 	.word	0x42470e3c

0800292c <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002930:	4816      	ldr	r0, [pc, #88]	; (800298c <MRT_rtc_Init+0x60>)
 8002932:	f7fe fb6b 	bl	800100c <println>

	print("\tSetting RTC to previous time...");
 8002936:	4816      	ldr	r0, [pc, #88]	; (8002990 <MRT_rtc_Init+0x64>)
 8002938:	f7fe fb86 	bl	8001048 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <MRT_rtc_Init+0x68>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <MRT_rtc_Init+0x6c>)
 8002942:	7811      	ldrb	r1, [r2, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <MRT_rtc_Init+0x70>)
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f8c3 	bl	8002ad4 <MRT_set_rtc>
	println("OK");
 800294e:	4814      	ldr	r0, [pc, #80]	; (80029a0 <MRT_rtc_Init+0x74>)
 8002950:	f7fe fb5c 	bl	800100c <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <MRT_rtc_Init+0x78>)
 8002956:	f7fe fb77 	bl	8001048 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 800295a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800295e:	f005 f849 	bl	80079f4 <HAL_Delay>
		if (wu_flag == 0){
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MRT_rtc_Init+0x7c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 800296a:	2200      	movs	r2, #0
 800296c:	211e      	movs	r1, #30
 800296e:	2004      	movs	r0, #4
 8002970:	f000 f8f6 	bl	8002b60 <MRT_set_alarmA>
 8002974:	e004      	b.n	8002980 <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	200e      	movs	r0, #14
 800297c:	f000 f8f0 	bl	8002b60 <MRT_set_alarmA>
		}
		println("OK");
 8002980:	4807      	ldr	r0, [pc, #28]	; (80029a0 <MRT_rtc_Init+0x74>)
 8002982:	f7fe fb43 	bl	800100c <println>
	#endif
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	08017018 	.word	0x08017018
 8002990:	08017028 	.word	0x08017028
 8002994:	20000375 	.word	0x20000375
 8002998:	20000376 	.word	0x20000376
 800299c:	20000377 	.word	0x20000377
 80029a0:	0801704c 	.word	0x0801704c
 80029a4:	08017050 	.word	0x08017050
 80029a8:	20000371 	.word	0x20000371

080029ac <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 80029b0:	482a      	ldr	r0, [pc, #168]	; (8002a5c <MRT_clear_alarms_flags+0xb0>)
 80029b2:	f7fe fb49 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ca      	movs	r2, #202	; 0xca
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2253      	movs	r2, #83	; 0x53
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80029c6:	e008      	b.n	80029da <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80029d8:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ef      	bne.n	80029c8 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <MRT_clear_alarms_flags+0xb8>)
 80029f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029f6:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	22ca      	movs	r2, #202	; 0xca
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2253      	movs	r2, #83	; 0x53
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002a08:	e008      	b.n	8002a1c <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a1a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ef      	bne.n	8002a0a <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	22ff      	movs	r2, #255	; 0xff
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MRT_clear_alarms_flags+0xb8>)
 8002a34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a38:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MRT_clear_alarms_flags+0xbc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <MRT_clear_alarms_flags+0xbc>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <MRT_clear_alarms_flags+0xb4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a56:	60da      	str	r2, [r3, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	08017064 	.word	0x08017064
 8002a60:	20005b70 	.word	0x20005b70
 8002a64:	40013c00 	.word	0x40013c00
 8002a68:	40007000 	.word	0x40007000

08002a6c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <MRT_StandByMode+0x58>)
 8002a76:	f7fe fae7 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a7e:	f006 ffb9 	bl	80099f4 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002a82:	f7ff ff93 	bl	80029ac <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002a86:	4810      	ldr	r0, [pc, #64]	; (8002ac8 <MRT_StandByMode+0x5c>)
 8002a88:	f7fe fac0 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	490e      	ldr	r1, [pc, #56]	; (8002acc <MRT_StandByMode+0x60>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f010 f90f 	bl	8012cb8 <siprintf>
	println(msg);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fab4 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <MRT_StandByMode+0x64>)
 8002aaa:	f008 fb4d 	bl	800b148 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002ab4:	f7ff fe76 	bl	80027a4 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002ab8:	f006 ffc2 	bl	8009a40 <HAL_PWR_EnterSTANDBYMode>
}
 8002abc:	bf00      	nop
 8002abe:	3730      	adds	r7, #48	; 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0801707c 	.word	0x0801707c
 8002ac8:	08017098 	.word	0x08017098
 8002acc:	080170a8 	.word	0x080170a8
 8002ad0:	20005b70 	.word	0x20005b70

08002ad4 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	71bb      	strb	r3, [r7, #6]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <MRT_set_rtc+0x80>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002aee:	79bb      	ldrb	r3, [r7, #6]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <MRT_set_rtc+0x80>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <MRT_set_rtc+0x80>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4812      	ldr	r0, [pc, #72]	; (8002b58 <MRT_set_rtc+0x84>)
 8002b10:	f007 fef1 	bl	800a8f6 <HAL_RTC_SetTime>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002b1a:	f7ff fe43 	bl	80027a4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MRT_set_rtc+0x88>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <MRT_set_rtc+0x88>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MRT_set_rtc+0x88>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MRT_set_rtc+0x88>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b36:	2201      	movs	r2, #1
 8002b38:	4908      	ldr	r1, [pc, #32]	; (8002b5c <MRT_set_rtc+0x88>)
 8002b3a:	4807      	ldr	r0, [pc, #28]	; (8002b58 <MRT_set_rtc+0x84>)
 8002b3c:	f007 fff6 	bl	800ab2c <HAL_RTC_SetDate>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002b46:	f7ff fe2d 	bl	80027a4 <Error_Handler>
	  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000004c 	.word	0x2000004c
 8002b58:	20005b70 	.word	0x20005b70
 8002b5c:	200002e4 	.word	0x200002e4

08002b60 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	71bb      	strb	r3, [r7, #6]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <MRT_set_alarmA+0x80>)
 8002b76:	5cd2      	ldrb	r2, [r2, r3]
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b7a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002b7c:	79bb      	ldrb	r3, [r7, #6]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <MRT_set_alarmA+0x80>)
 8002b80:	5cd2      	ldrb	r2, [r2, r3]
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b84:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002b86:	797b      	ldrb	r3, [r7, #5]
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <MRT_set_alarmA+0x80>)
 8002b8a:	5cd2      	ldrb	r2, [r2, r3]
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b8e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4907      	ldr	r1, [pc, #28]	; (8002be4 <MRT_set_alarmA+0x84>)
 8002bc8:	4807      	ldr	r0, [pc, #28]	; (8002be8 <MRT_set_alarmA+0x88>)
 8002bca:	f008 f8a5 	bl	800ad18 <HAL_RTC_SetAlarm_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002bd4:	f7ff fde6 	bl	80027a4 <Error_Handler>
	  }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000004c 	.word	0x2000004c
 8002be4:	200002e8 	.word	0x200002e8
 8002be8:	20005b70 	.word	0x20005b70

08002bec <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	b0a7      	sub	sp, #156	; 0x9c
 8002bf0:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	677b      	str	r3, [r7, #116]	; 0x74
 8002bf6:	e00d      	b.n	8002c14 <MRT_RTC_backup_regs_Init+0x28>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4921      	ldr	r1, [pc, #132]	; (8002c84 <MRT_RTC_backup_regs_Init+0x98>)
 8002bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c00:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002c04:	4610      	mov	r0, r2
 8002c06:	f000 f879 	bl	8002cfc <MRT_RTC_getBackupReg>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c10:	3301      	adds	r3, #1
 8002c12:	677b      	str	r3, [r7, #116]	; 0x74
 8002c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	ddee      	ble.n	8002bf8 <MRT_RTC_backup_regs_Init+0xc>
	}

	//TODO TESTING
	char buffer[100];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MRT_RTC_backup_regs_Init+0x9c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MRT_RTC_backup_regs_Init+0xa0>)
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MRT_RTC_backup_regs_Init+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <MRT_RTC_backup_regs_Init+0xa8>)
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	491a      	ldr	r1, [pc, #104]	; (8002c98 <MRT_RTC_backup_regs_Init+0xac>)
 8002c30:	6809      	ldr	r1, [r1, #0]
 8002c32:	481a      	ldr	r0, [pc, #104]	; (8002c9c <MRT_RTC_backup_regs_Init+0xb0>)
 8002c34:	6800      	ldr	r0, [r0, #0]
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4c19      	ldr	r4, [pc, #100]	; (8002ca0 <MRT_RTC_backup_regs_Init+0xb4>)
 8002c3a:	6824      	ldr	r4, [r4, #0]
 8002c3c:	4d19      	ldr	r5, [pc, #100]	; (8002ca4 <MRT_RTC_backup_regs_Init+0xb8>)
 8002c3e:	682d      	ldr	r5, [r5, #0]
 8002c40:	4e19      	ldr	r6, [pc, #100]	; (8002ca8 <MRT_RTC_backup_regs_Init+0xbc>)
 8002c42:	6836      	ldr	r6, [r6, #0]
 8002c44:	4819      	ldr	r0, [pc, #100]	; (8002cac <MRT_RTC_backup_regs_Init+0xc0>)
 8002c46:	6800      	ldr	r0, [r0, #0]
 8002c48:	f107 0c10 	add.w	ip, r7, #16
 8002c4c:	9007      	str	r0, [sp, #28]
 8002c4e:	9606      	str	r6, [sp, #24]
 8002c50:	9505      	str	r5, [sp, #20]
 8002c52:	9404      	str	r4, [sp, #16]
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	9003      	str	r0, [sp, #12]
 8002c58:	9102      	str	r1, [sp, #8]
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4913      	ldr	r1, [pc, #76]	; (8002cb0 <MRT_RTC_backup_regs_Init+0xc4>)
 8002c64:	4660      	mov	r0, ip
 8002c66:	f010 f827 	bl	8012cb8 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f9ea 	bl	8001048 <print>

	HAL_Delay(2000);
 8002c74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c78:	f004 febc 	bl	80079f4 <HAL_Delay>
}
 8002c7c:	bf00      	nop
 8002c7e:	377c      	adds	r7, #124	; 0x7c
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000334 	.word	0x20000334
 8002c8c:	20000338 	.word	0x20000338
 8002c90:	2000033c 	.word	0x2000033c
 8002c94:	20000340 	.word	0x20000340
 8002c98:	20000344 	.word	0x20000344
 8002c9c:	20000348 	.word	0x20000348
 8002ca0:	2000034c 	.word	0x2000034c
 8002ca4:	20000350 	.word	0x20000350
 8002ca8:	20000354 	.word	0x20000354
 8002cac:	20000358 	.word	0x20000358
 8002cb0:	080170c8 	.word	0x080170c8

08002cb4 <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <MRT_RTC_clearBackupRegs+0x44>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	22ca      	movs	r2, #202	; 0xca
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <MRT_RTC_clearBackupRegs+0x44>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2253      	movs	r2, #83	; 0x53
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71fb      	strb	r3, [r7, #7]
 8002cce:	e008      	b.n	8002ce2 <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4808      	ldr	r0, [pc, #32]	; (8002cf8 <MRT_RTC_clearBackupRegs+0x44>)
 8002cd8:	f008 fb4e 	bl	800b378 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	71fb      	strb	r3, [r7, #7]
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b13      	cmp	r3, #19
 8002ce6:	d9f3      	bls.n	8002cd0 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <MRT_RTC_clearBackupRegs+0x44>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20005b70 	.word	0x20005b70

08002cfc <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <MRT_RTC_getBackupReg+0x38>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	22ca      	movs	r2, #202	; 0xca
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MRT_RTC_getBackupReg+0x38>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2253      	movs	r2, #83	; 0x53
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <MRT_RTC_getBackupReg+0x38>)
 8002d1c:	f008 fb46 	bl	800b3ac <HAL_RTCEx_BKUPRead>
 8002d20:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <MRT_RTC_getBackupReg+0x38>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20005b70 	.word	0x20005b70

08002d38 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MRT_RTC_setBackupReg+0x38>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	22ca      	movs	r2, #202	; 0xca
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <MRT_RTC_setBackupReg+0x38>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2253      	movs	r2, #83	; 0x53
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MRT_RTC_setBackupReg+0x38>)
 8002d5c:	f008 fb0c 	bl	800b378 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <MRT_RTC_setBackupReg+0x38>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20005b70 	.word	0x20005b70

08002d74 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <MX_SPI2_Init+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002dc0:	220a      	movs	r2, #10
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MX_SPI2_Init+0x64>)
 8002dc6:	f008 fb13 	bl	800b3f0 <HAL_SPI_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002dd0:	f7ff fce8 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20005b90 	.word	0x20005b90
 8002ddc:	40003800 	.word	0x40003800

08002de0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <MX_SPI4_Init+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002df0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e2c:	220a      	movs	r2, #10
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002e30:	4804      	ldr	r0, [pc, #16]	; (8002e44 <MX_SPI4_Init+0x64>)
 8002e32:	f008 fadd 	bl	800b3f0 <HAL_SPI_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002e3c:	f7ff fcb2 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20005c40 	.word	0x20005c40
 8002e48:	40013400 	.word	0x40013400

08002e4c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <MX_SPI5_Init+0x68>)
 8002e54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e98:	220a      	movs	r2, #10
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <MX_SPI5_Init+0x64>)
 8002e9e:	f008 faa7 	bl	800b3f0 <HAL_SPI_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002ea8:	f7ff fc7c 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20005be8 	.word	0x20005be8
 8002eb4:	40015000 	.word	0x40015000

08002eb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	; 0x38
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	; (8003008 <HAL_SPI_MspInit+0x150>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12d      	bne.n	8002f36 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a4a      	ldr	r2, [pc, #296]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b48      	ldr	r3, [pc, #288]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	623b      	str	r3, [r7, #32]
 8002ef4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f24:	2305      	movs	r3, #5
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4838      	ldr	r0, [pc, #224]	; (8003010 <HAL_SPI_MspInit+0x158>)
 8002f30:	f005 faa8 	bl	8008484 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002f34:	e064      	b.n	8003000 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_SPI_MspInit+0x15c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d12d      	bne.n	8002f9c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	4a30      	ldr	r2, [pc, #192]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002f78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	4820      	ldr	r0, [pc, #128]	; (8003018 <HAL_SPI_MspInit+0x160>)
 8002f96:	f005 fa75 	bl	8008484 <HAL_GPIO_Init>
}
 8002f9a:	e031      	b.n	8003000 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_SPI_MspInit+0x164>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12c      	bne.n	8003000 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fcc:	f043 0320 	orr.w	r3, r3, #32
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_SPI_MspInit+0x154>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fde:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002ff0:	2305      	movs	r3, #5
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4809      	ldr	r0, [pc, #36]	; (8003020 <HAL_SPI_MspInit+0x168>)
 8002ffc:	f005 fa42 	bl	8008484 <HAL_GPIO_Init>
}
 8003000:	bf00      	nop
 8003002:	3738      	adds	r7, #56	; 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40003800 	.word	0x40003800
 800300c:	40023800 	.word	0x40023800
 8003010:	40020400 	.word	0x40020400
 8003014:	40013400 	.word	0x40013400
 8003018:	40021000 	.word	0x40021000
 800301c:	40015000 	.word	0x40015000
 8003020:	40021400 	.word	0x40021400

08003024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_MspInit+0x54>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_MspInit+0x54>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_MspInit+0x54>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_MspInit+0x54>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_MspInit+0x54>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_MspInit+0x54>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	210f      	movs	r1, #15
 8003066:	f06f 0001 	mvn.w	r0, #1
 800306a:	f005 f9d3 	bl	8008414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800308c:	2200      	movs	r2, #0
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	2036      	movs	r0, #54	; 0x36
 8003092:	f005 f9bf 	bl	8008414 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003096:	2036      	movs	r0, #54	; 0x36
 8003098:	f005 f9d8 	bl	800844c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_InitTick+0xa4>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_InitTick+0xa4>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_InitTick+0xa4>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b8:	f107 0210 	add.w	r2, r7, #16
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f007 f996 	bl	800a3f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030c8:	f007 f96c 	bl	800a3a4 <HAL_RCC_GetPCLK1Freq>
 80030cc:	4603      	mov	r3, r0
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	4a13      	ldr	r2, [pc, #76]	; (8003124 <HAL_InitTick+0xa8>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9b      	lsrs	r3, r3, #18
 80030dc:	3b01      	subs	r3, #1
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_InitTick+0xac>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_InitTick+0xb0>)
 80030e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_InitTick+0xac>)
 80030e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030ee:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <HAL_InitTick+0xac>)
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <HAL_InitTick+0xac>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_InitTick+0xac>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003100:	4809      	ldr	r0, [pc, #36]	; (8003128 <HAL_InitTick+0xac>)
 8003102:	f008 ff1d 	bl	800bf40 <HAL_TIM_Base_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800310c:	4806      	ldr	r0, [pc, #24]	; (8003128 <HAL_InitTick+0xac>)
 800310e:	f008 ff67 	bl	800bfe0 <HAL_TIM_Base_Start_IT>
 8003112:	4603      	mov	r3, r0
 8003114:	e000      	b.n	8003118 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	3730      	adds	r7, #48	; 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	431bde83 	.word	0x431bde83
 8003128:	20005c98 	.word	0x20005c98
 800312c:	40001000 	.word	0x40001000

08003130 <__NVIC_SystemReset>:
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003134:	f3bf 8f4f 	dsb	sy
}
 8003138:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <__NVIC_SystemReset+0x24>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003142:	4904      	ldr	r1, [pc, #16]	; (8003154 <__NVIC_SystemReset+0x24>)
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_SystemReset+0x28>)
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800314a:	f3bf 8f4f 	dsb	sy
}
 800314e:	bf00      	nop
    __NOP();
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <__NVIC_SystemReset+0x20>
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	05fa0004 	.word	0x05fa0004

0800315c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <NMI_Handler+0x4>

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800318c:	2001      	movs	r0, #1
 800318e:	f005 fb57 	bl	8008840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <RTC_Alarm_IRQHandler+0x10>)
 800319e:	f007 fef3 	bl	800af88 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20005b70 	.word	0x20005b70

080031ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <TIM6_DAC_IRQHandler+0x10>)
 80031b2:	f009 f917 	bl	800c3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20005c98 	.word	0x20005c98

080031c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80031d0:	f000 f804 	bl	80031dc <MRT_resetFromStart>
	}
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 80031e0:	f000 fbfa 	bl	80039d8 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 80031e4:	f7ff fd66 	bl	8002cb4 <MRT_RTC_clearBackupRegs>

	//Shutdown Iridium
	//TODO should have deninit for every system?
	MRT_Iridium_Deinit();
 80031e8:	f003 fe60 	bl	8006eac <MRT_Iridium_Deinit>

	//Reset function
	NVIC_SystemReset();
 80031ec:	f7ff ffa0 	bl	8003130 <__NVIC_SystemReset>

080031f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <SystemInit+0x20>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <SystemInit+0x20>)
 80031fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
 8003240:	615a      	str	r2, [r3, #20]
 8003242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <MX_TIM2_Init+0xe8>)
 8003246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800324a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <MX_TIM2_Init+0xe8>)
 800324e:	2259      	movs	r2, #89	; 0x59
 8003250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <MX_TIM2_Init+0xe8>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <MX_TIM2_Init+0xe8>)
 800325a:	f240 128f 	movw	r2, #399	; 0x18f
 800325e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <MX_TIM2_Init+0xe8>)
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <MX_TIM2_Init+0xe8>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800326c:	4823      	ldr	r0, [pc, #140]	; (80032fc <MX_TIM2_Init+0xe8>)
 800326e:	f008 fe67 	bl	800bf40 <HAL_TIM_Base_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003278:	f7ff fa94 	bl	80027a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800327c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003286:	4619      	mov	r1, r3
 8003288:	481c      	ldr	r0, [pc, #112]	; (80032fc <MX_TIM2_Init+0xe8>)
 800328a:	f009 fa75 	bl	800c778 <HAL_TIM_ConfigClockSource>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003294:	f7ff fa86 	bl	80027a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003298:	4818      	ldr	r0, [pc, #96]	; (80032fc <MX_TIM2_Init+0xe8>)
 800329a:	f008 ff11 	bl	800c0c0 <HAL_TIM_PWM_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032a4:	f7ff fa7e 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032a8:	2320      	movs	r3, #32
 80032aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	4619      	mov	r1, r3
 80032b6:	4811      	ldr	r0, [pc, #68]	; (80032fc <MX_TIM2_Init+0xe8>)
 80032b8:	f009 fe5e 	bl	800cf78 <HAL_TIMEx_MasterConfigSynchronization>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032c2:	f7ff fa6f 	bl	80027a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c6:	2360      	movs	r3, #96	; 0x60
 80032c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80032ca:	2364      	movs	r3, #100	; 0x64
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2208      	movs	r2, #8
 80032da:	4619      	mov	r1, r3
 80032dc:	4807      	ldr	r0, [pc, #28]	; (80032fc <MX_TIM2_Init+0xe8>)
 80032de:	f009 f989 	bl	800c5f4 <HAL_TIM_PWM_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032e8:	f7ff fa5c 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032ec:	4803      	ldr	r0, [pc, #12]	; (80032fc <MX_TIM2_Init+0xe8>)
 80032ee:	f000 f827 	bl	8003340 <HAL_TIM_MspPostInit>

}
 80032f2:	bf00      	nop
 80032f4:	3738      	adds	r7, #56	; 0x38
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20005ce0 	.word	0x20005ce0

08003300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d10d      	bne.n	800332e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_TIM_Base_MspInit+0x3c>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_TIM_Base_MspInit+0x3c>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_TIM_Base_MspInit+0x3c>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800

08003340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003360:	d11d      	bne.n	800339e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_TIM_MspPostInit+0x68>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <HAL_TIM_MspPostInit+0x68>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_TIM_MspPostInit+0x68>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800337e:	2304      	movs	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800338e:	2301      	movs	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	4619      	mov	r1, r3
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <HAL_TIM_MspPostInit+0x6c>)
 800339a:	f005 f873 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020000 	.word	0x40020000

080033b0 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_UART8_Init+0x4c>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_UART8_Init+0x50>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_UART8_Init+0x4c>)
 80033bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_UART8_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_UART8_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_UART8_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_UART8_Init+0x4c>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_UART8_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_UART8_Init+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_UART8_Init+0x4c>)
 80033e8:	f009 fe56 	bl	800d098 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80033f2:	f7ff f9d7 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20005d6c 	.word	0x20005d6c
 8003400:	40007c00 	.word	0x40007c00

08003404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <MX_USART3_UART_Init+0x50>)
 800340c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003410:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800343a:	4805      	ldr	r0, [pc, #20]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800343c:	f009 fe2c 	bl	800d098 <HAL_UART_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003446:	f7ff f9ad 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20005d28 	.word	0x20005d28
 8003454:	40004800 	.word	0x40004800

08003458 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_USART6_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003468:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003490:	f009 fe02 	bl	800d098 <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f7ff f983 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20005db0 	.word	0x20005db0
 80034a8:	40011400 	.word	0x40011400

080034ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	; 0x38
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <HAL_UART_MspInit+0x14c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12c      	bne.n	8003528 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a49      	ldr	r2, [pc, #292]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a42      	ldr	r2, [pc, #264]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034f4:	f043 0310 	orr.w	r3, r3, #16
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_UART_MspInit+0x150>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003506:	2303      	movs	r3, #3
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003516:	2308      	movs	r3, #8
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	4619      	mov	r1, r3
 8003520:	4837      	ldr	r0, [pc, #220]	; (8003600 <HAL_UART_MspInit+0x154>)
 8003522:	f004 ffaf 	bl	8008484 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003526:	e063      	b.n	80035f0 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_UART_MspInit+0x158>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12d      	bne.n	800358e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_UART_MspInit+0x150>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_UART_MspInit+0x150>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_UART_MspInit+0x150>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_UART_MspInit+0x150>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_UART_MspInit+0x150>)
 8003558:	f043 0308 	orr.w	r3, r3, #8
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_UART_MspInit+0x150>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800356a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800357c:	2307      	movs	r3, #7
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	4820      	ldr	r0, [pc, #128]	; (8003608 <HAL_UART_MspInit+0x15c>)
 8003588:	f004 ff7c 	bl	8008484 <HAL_GPIO_Init>
}
 800358c:	e030      	b.n	80035f0 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_UART_MspInit+0x160>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d12b      	bne.n	80035f0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_UART_MspInit+0x150>)
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_UART_MspInit+0x150>)
 80035a2:	f043 0320 	orr.w	r3, r3, #32
 80035a6:	6453      	str	r3, [r2, #68]	; 0x44
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_UART_MspInit+0x150>)
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_UART_MspInit+0x150>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <HAL_UART_MspInit+0x150>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6313      	str	r3, [r2, #48]	; 0x30
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_UART_MspInit+0x150>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035e0:	2308      	movs	r3, #8
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e8:	4619      	mov	r1, r3
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <HAL_UART_MspInit+0x164>)
 80035ec:	f004 ff4a 	bl	8008484 <HAL_GPIO_Init>
}
 80035f0:	bf00      	nop
 80035f2:	3738      	adds	r7, #56	; 0x38
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40007c00 	.word	0x40007c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	40021000 	.word	0x40021000
 8003604:	40004800 	.word	0x40004800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40011400 	.word	0x40011400
 8003610:	40020800 	.word	0x40020800

08003614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800364c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800361a:	e003      	b.n	8003624 <LoopCopyDataInit>

0800361c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800361e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003622:	3104      	adds	r1, #4

08003624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800362a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800362c:	d3f6      	bcc.n	800361c <CopyDataInit>
  ldr  r2, =_sbss
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003630:	e002      	b.n	8003638 <LoopFillZerobss>

08003632 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003634:	f842 3b04 	str.w	r3, [r2], #4

08003638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800363a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800363c:	d3f9      	bcc.n	8003632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800363e:	f7ff fdd7 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003642:	f00e fa63 	bl	8011b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003646:	f7fe ff63 	bl	8002510 <main>
  bx  lr    
 800364a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800364c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003650:	08019124 	.word	0x08019124
  ldr  r0, =_sdata
 8003654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003658:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 800365c:	200002ac 	.word	0x200002ac
  ldr  r3, = _ebss
 8003660:	200064c0 	.word	0x200064c0

08003664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC_IRQHandler>
	...

08003668 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003672:	edd7 7a01 	vldr	s15, [r7, #4]
 8003676:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80036f8 <MRT_getAltitude+0x90>
 800367a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800367e:	ee16 0a90 	vmov	r0, s13
 8003682:	f7fc ff71 	bl	8000568 <__aeabi_f2d>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80036e8 <MRT_getAltitude+0x80>
 800368e:	ec43 2b10 	vmov	d0, r2, r3
 8003692:	f00d f981 	bl	8010998 <pow>
 8003696:	ec51 0b10 	vmov	r0, r1, d0
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <MRT_getAltitude+0x94>)
 80036a0:	f7fc fe02 	bl	80002a8 <__aeabi_dsub>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	a310      	add	r3, pc, #64	; (adr r3, 80036f0 <MRT_getAltitude+0x88>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ffb1 	bl	8000618 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <MRT_getAltitude+0x98>)
 80036c4:	f7fc fdf2 	bl	80002ac <__adddf3>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fd fa9a 	bl	8000c08 <__aeabi_d2f>
 80036d4:	4603      	mov	r3, r0
 80036d6:	ee07 3a90 	vmov	s15, r3
}
 80036da:	eeb0 0a67 	vmov.f32	s0, s15
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	f3af 8000 	nop.w
 80036e8:	b4202506 	.word	0xb4202506
 80036ec:	3fc85a8b 	.word	0x3fc85a8b
 80036f0:	76276276 	.word	0x76276276
 80036f4:	c0e481c2 	.word	0xc0e481c2
 80036f8:	447d8000 	.word	0x447d8000
 80036fc:	3ff00000 	.word	0x3ff00000
 8003700:	40590000 	.word	0x40590000

08003704 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 800370a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800370e:	4815      	ldr	r0, [pc, #84]	; (8003764 <MRT_getContinuity+0x60>)
 8003710:	f005 f864 	bl	80087dc <HAL_GPIO_ReadPin>
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800371c:	4811      	ldr	r0, [pc, #68]	; (8003764 <MRT_getContinuity+0x60>)
 800371e:	f005 f85d 	bl	80087dc <HAL_GPIO_ReadPin>
 8003722:	4603      	mov	r3, r0
 8003724:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003726:	2101      	movs	r1, #1
 8003728:	480e      	ldr	r0, [pc, #56]	; (8003764 <MRT_getContinuity+0x60>)
 800372a:	f005 f857 	bl	80087dc <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003736:	480c      	ldr	r0, [pc, #48]	; (8003768 <MRT_getContinuity+0x64>)
 8003738:	f005 f850 	bl	80087dc <HAL_GPIO_ReadPin>
 800373c:	4603      	mov	r3, r0
 800373e:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	005a      	lsls	r2, r3, #1
 8003744:	79bb      	ldrb	r3, [r7, #6]
 8003746:	4413      	add	r3, r2
 8003748:	005a      	lsls	r2, r3, #1
 800374a:	797b      	ldrb	r3, [r7, #5]
 800374c:	4413      	add	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	793b      	ldrb	r3, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	70fb      	strb	r3, [r7, #3]
	return continuity;
 800375a:	78fb      	ldrb	r3, [r7, #3]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021800 	.word	0x40021800
 8003768:	40021400 	.word	0x40021400

0800376c <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	b0a3      	sub	sp, #140	; 0x8c
 8003772:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003774:	22c8      	movs	r2, #200	; 0xc8
 8003776:	2100      	movs	r1, #0
 8003778:	483c      	ldr	r0, [pc, #240]	; (800386c <MRT_formatAvionics+0x100>)
 800377a:	f00e fa1f 	bl	8011bbc <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800377e:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <MRT_formatAvionics+0x104>)
 8003780:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fef0 	bl	8000568 <__aeabi_f2d>
 8003788:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800378c:	4b38      	ldr	r3, [pc, #224]	; (8003870 <MRT_formatAvionics+0x104>)
 800378e:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fee9 	bl	8000568 <__aeabi_f2d>
 8003796:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <MRT_formatAvionics+0x104>)
 800379c:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fee2 	bl	8000568 <__aeabi_f2d>
 80037a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <MRT_formatAvionics+0x104>)
 80037aa:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fedb 	bl	8000568 <__aeabi_f2d>
 80037b2:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <MRT_formatAvionics+0x104>)
 80037b8:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fed4 	bl	8000568 <__aeabi_f2d>
 80037c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <MRT_formatAvionics+0x104>)
 80037c6:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fecd 	bl	8000568 <__aeabi_f2d>
 80037ce:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <MRT_formatAvionics+0x108>)
 80037d4:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fec6 	bl	8000568 <__aeabi_f2d>
 80037dc:	4682      	mov	sl, r0
 80037de:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <MRT_formatAvionics+0x10c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc febf 	bl	8000568 <__aeabi_f2d>
 80037ea:	4680      	mov	r8, r0
 80037ec:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <MRT_formatAvionics+0x10c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc feb8 	bl	8000568 <__aeabi_f2d>
 80037f8:	4604      	mov	r4, r0
 80037fa:	460d      	mov	r5, r1
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <MRT_formatAvionics+0x110>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461e      	mov	r6, r3
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <MRT_formatAvionics+0x114>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <MRT_formatAvionics+0x118>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <MRT_formatAvionics+0x11c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <MRT_formatAvionics+0x120>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	9314      	str	r3, [sp, #80]	; 0x50
 8003818:	9113      	str	r1, [sp, #76]	; 0x4c
 800381a:	9212      	str	r2, [sp, #72]	; 0x48
 800381c:	9011      	str	r0, [sp, #68]	; 0x44
 800381e:	9610      	str	r6, [sp, #64]	; 0x40
 8003820:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003824:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003828:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800382c:	ed97 7b00 	vldr	d7, [r7]
 8003830:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003834:	ed97 7b02 	vldr	d7, [r7, #8]
 8003838:	ed8d 7b06 	vstr	d7, [sp, #24]
 800383c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003840:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003844:	ed97 7b06 	vldr	d7, [r7, #24]
 8003848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800384c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003850:	ed8d 7b00 	vstr	d7, [sp]
 8003854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003858:	490d      	ldr	r1, [pc, #52]	; (8003890 <MRT_formatAvionics+0x124>)
 800385a:	4804      	ldr	r0, [pc, #16]	; (800386c <MRT_formatAvionics+0x100>)
 800385c:	f00f fa2c 	bl	8012cb8 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003860:	bf00      	nop
 8003862:	3734      	adds	r7, #52	; 0x34
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800386a:	bf00      	nop
 800386c:	20005df4 	.word	0x20005df4
 8003870:	2000038c 	.word	0x2000038c
 8003874:	200003b8 	.word	0x200003b8
 8003878:	200003cc 	.word	0x200003cc
 800387c:	20000376 	.word	0x20000376
 8003880:	20000377 	.word	0x20000377
 8003884:	20000378 	.word	0x20000378
 8003888:	2000035d 	.word	0x2000035d
 800388c:	20000374 	.word	0x20000374
 8003890:	0801714c 	.word	0x0801714c

08003894 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e007      	b.n	80038b0 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <MRT_external_flash_Init+0x5c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3301      	adds	r3, #1
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	ddf4      	ble.n	80038a0 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 80038b6:	f000 fc83 	bl	80041c0 <W25qxx_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 80038c6:	f7fe ff6d 	bl	80027a4 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80038ca:	2305      	movs	r3, #5
 80038cc:	2200      	movs	r2, #0
 80038ce:	2101      	movs	r1, #1
 80038d0:	4808      	ldr	r0, [pc, #32]	; (80038f4 <MRT_external_flash_Init+0x60>)
 80038d2:	f001 f84f 	bl	8004974 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80038d6:	2304      	movs	r3, #4
 80038d8:	2200      	movs	r2, #0
 80038da:	2102      	movs	r1, #2
 80038dc:	4806      	ldr	r0, [pc, #24]	; (80038f8 <MRT_external_flash_Init+0x64>)
 80038de:	f001 f849 	bl	8004974 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 80038e2:	f000 f843 	bl	800396c <MRT_updateExternalFlashValues>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20005ebc 	.word	0x20005ebc
 80038f4:	20005ec8 	.word	0x20005ec8
 80038f8:	20005ec4 	.word	0x20005ec4

080038fc <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e00c      	b.n	8003922 <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <MRT_updateExternalFlashBuffers+0x60>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	7819      	ldrb	r1, [r3, #0]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <MRT_updateExternalFlashBuffers+0x64>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	460a      	mov	r2, r1
 800391a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b04      	cmp	r3, #4
 8003926:	ddef      	ble.n	8003908 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	e00c      	b.n	8003948 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <MRT_updateExternalFlashBuffers+0x68>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	7819      	ldrb	r1, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <MRT_updateExternalFlashBuffers+0x6c>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	460a      	mov	r2, r1
 8003940:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b03      	cmp	r3, #3
 800394c:	ddef      	ble.n	800392e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	2000008c 	.word	0x2000008c
 8003960:	20005ec8 	.word	0x20005ec8
 8003964:	200000a0 	.word	0x200000a0
 8003968:	20005ec4 	.word	0x20005ec4

0800396c <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	e00b      	b.n	8003990 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <MRT_updateExternalFlashValues+0x5c>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	4912      	ldr	r1, [pc, #72]	; (80039cc <MRT_updateExternalFlashValues+0x60>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	440a      	add	r2, r1
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3301      	adds	r3, #1
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b04      	cmp	r3, #4
 8003994:	ddf0      	ble.n	8003978 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	e00b      	b.n	80039b4 <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <MRT_updateExternalFlashValues+0x64>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	490b      	ldr	r1, [pc, #44]	; (80039d4 <MRT_updateExternalFlashValues+0x68>)
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	440a      	add	r2, r1
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	ddf0      	ble.n	800399c <MRT_updateExternalFlashValues+0x30>
	}
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	2000008c 	.word	0x2000008c
 80039cc:	20005ec8 	.word	0x20005ec8
 80039d0:	200000a0 	.word	0x200000a0
 80039d4:	20005ec4 	.word	0x20005ec4

080039d8 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 80039dc:	2001      	movs	r0, #1
 80039de:	f000 fd41 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80039e2:	2305      	movs	r3, #5
 80039e4:	2200      	movs	r2, #0
 80039e6:	2101      	movs	r1, #1
 80039e8:	4806      	ldr	r0, [pc, #24]	; (8003a04 <MRT_clearExternalFlash+0x2c>)
 80039ea:	f000 fe85 	bl	80046f8 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 80039ee:	2002      	movs	r0, #2
 80039f0:	f000 fd38 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80039f4:	2304      	movs	r3, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	2102      	movs	r1, #2
 80039fa:	4803      	ldr	r0, [pc, #12]	; (8003a08 <MRT_clearExternalFlash+0x30>)
 80039fc:	f000 fe7c 	bl	80046f8 <W25qxx_WriteSector>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20005ebc 	.word	0x20005ebc
 8003a08:	2000036c 	.word	0x2000036c

08003a0c <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003a16:	f7ff ff71 	bl	80038fc <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f000 fd22 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a20:	2305      	movs	r3, #5
 8003a22:	2200      	movs	r2, #0
 8003a24:	2101      	movs	r1, #1
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <MRT_saveFlagValue+0x3c>)
 8003a28:	f000 fe66 	bl	80046f8 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <MRT_saveFlagValue+0x40>)
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f97c 	bl	8002d38 <MRT_RTC_setBackupReg>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20005ec8 	.word	0x20005ec8
 8003a4c:	20000000 	.word	0x20000000

08003a50 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
		ret = false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d207      	bcs.n	8003aa2 <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	491c      	ldr	r1, [pc, #112]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003ab0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d028      	beq.n	8003b0c <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4912      	ldr	r1, [pc, #72]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003ad4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad8:	4282      	cmp	r2, r0
 8003ada:	bf38      	it	cc
 8003adc:	4602      	movcc	r2, r0
 8003ade:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <MRT_checkFlagsValues+0xcc>)
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bf38      	it	cc
 8003afa:	4619      	movcc	r1, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <MRT_checkFlagsValues+0xd0>)
 8003b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b04:	b2ca      	uxtb	r2, r1
 8003b06:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	2000008c 	.word	0x2000008c

08003b24 <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8003b28:	f000 f890 	bl	8003c4c <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003b2c:	f7ff fee6 	bl	80038fc <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003b30:	2002      	movs	r0, #2
 8003b32:	f000 fc97 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b36:	2304      	movs	r3, #4
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	480e      	ldr	r0, [pc, #56]	; (8003b78 <MRT_saveTotalTime+0x54>)
 8003b3e:	f000 fddb 	bl	80046f8 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <MRT_saveTotalTime+0x58>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	2005      	movs	r0, #5
 8003b4a:	f7ff f8f5 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MRT_saveTotalTime+0x5c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	2006      	movs	r0, #6
 8003b56:	f7ff f8ef 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <MRT_saveTotalTime+0x60>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	2007      	movs	r0, #7
 8003b62:	f7ff f8e9 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <MRT_saveTotalTime+0x64>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	2008      	movs	r0, #8
 8003b6e:	f7ff f8e3 	bl	8002d38 <MRT_RTC_setBackupReg>
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20005ec4 	.word	0x20005ec4
 8003b7c:	20000324 	.word	0x20000324
 8003b80:	20000328 	.word	0x20000328
 8003b84:	2000032c 	.word	0x2000032c
 8003b88:	20000330 	.word	0x20000330

08003b8c <MRT_resetTotalTime>:


void MRT_resetTotalTime(void){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0

	//Clear RTC time (last recorded) in external flash
	W25qxx_EraseSector(RTC_SECTOR);
 8003b92:	2002      	movs	r0, #2
 8003b94:	f000 fc66 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b98:	2304      	movs	r3, #4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4817      	ldr	r0, [pc, #92]	; (8003bfc <MRT_resetTotalTime+0x70>)
 8003ba0:	f000 fdaa 	bl	80046f8 <W25qxx_WriteSector>

	//Clear RTC time in backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, 0);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2005      	movs	r0, #5
 8003ba8:	f7ff f8c6 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, 0);
 8003bac:	2100      	movs	r1, #0
 8003bae:	2006      	movs	r0, #6
 8003bb0:	f7ff f8c2 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, 0);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2007      	movs	r0, #7
 8003bb8:	f7ff f8be 	bl	8002d38 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, 0);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2008      	movs	r0, #8
 8003bc0:	f7ff f8ba 	bl	8002d38 <MRT_RTC_setBackupReg>

	//Update variables (to 0)
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	e00f      	b.n	8003bea <MRT_resetTotalTime+0x5e>
	  *ext_flash_time[i] = 0x0;
 8003bca:	4a0d      	ldr	r2, [pc, #52]	; (8003c00 <MRT_resetTotalTime+0x74>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
	  *rtc_bckp_regs[i + NB_OF_FLAGS] = 0x0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3305      	adds	r3, #5
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <MRT_resetTotalTime+0x78>)
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3301      	adds	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	ddec      	ble.n	8003bca <MRT_resetTotalTime+0x3e>
	}
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000036c 	.word	0x2000036c
 8003c00:	200000a0 	.word	0x200000a0
 8003c04:	20000000 	.word	0x20000000

08003c08 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8003c12:	f7ff fe73 	bl	80038fc <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003c16:	2002      	movs	r0, #2
 8003c18:	f000 fc24 	bl	8004464 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2102      	movs	r1, #2
 8003c22:	4808      	ldr	r0, [pc, #32]	; (8003c44 <MRT_saveTimeValue+0x3c>)
 8003c24:	f000 fd68 	bl	80046f8 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <MRT_saveTimeValue+0x40>)
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f87e 	bl	8002d38 <MRT_RTC_setBackupReg>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20005ec4 	.word	0x20005ec4
 8003c48:	20000000 	.word	0x20000000

08003c4c <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <MRT_updateTimeValues+0x54>)
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <MRT_updateTimeValues+0x58>)
 8003c56:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <MRT_updateTimeValues+0x5c>)
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <MRT_updateTimeValues+0x60>)
 8003c5e:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <MRT_updateTimeValues+0x64>)
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <MRT_updateTimeValues+0x68>)
 8003c66:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003c68:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <MRT_updateTimeValues+0x6c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <MRT_updateTimeValues+0x70>)
 8003c6e:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <MRT_updateTimeValues+0x54>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <MRT_updateTimeValues+0x74>)
 8003c78:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <MRT_updateTimeValues+0x5c>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <MRT_updateTimeValues+0x78>)
 8003c82:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <MRT_updateTimeValues+0x64>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MRT_updateTimeValues+0x7c>)
 8003c8c:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <MRT_updateTimeValues+0x6c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <MRT_updateTimeValues+0x80>)
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	20000375 	.word	0x20000375
 8003ca4:	20000363 	.word	0x20000363
 8003ca8:	20000376 	.word	0x20000376
 8003cac:	20000364 	.word	0x20000364
 8003cb0:	20000377 	.word	0x20000377
 8003cb4:	20000365 	.word	0x20000365
 8003cb8:	20000378 	.word	0x20000378
 8003cbc:	20000368 	.word	0x20000368
 8003cc0:	20000324 	.word	0x20000324
 8003cc4:	20000328 	.word	0x20000328
 8003cc8:	2000032c 	.word	0x2000032c
 8003ccc:	20000330 	.word	0x20000330

08003cd0 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4a31      	ldr	r2, [pc, #196]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d207      	bcs.n	8003d00 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
		ret = false;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	3b05      	subs	r3, #5
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d208      	bcs.n	8003d26 <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	3b05      	subs	r3, #5
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	79fa      	ldrb	r2, [r7, #7]
 8003d32:	3a05      	subs	r2, #5
 8003d34:	491d      	ldr	r1, [pc, #116]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02b      	beq.n	8003d98 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	3b05      	subs	r3, #5
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4913      	ldr	r1, [pc, #76]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003d5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d60:	4282      	cmp	r2, r0
 8003d62:	bf38      	it	cc
 8003d64:	4602      	movcc	r2, r0
 8003d66:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	3b05      	subs	r3, #5
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <MRT_checkTimeValues+0xd8>)
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4299      	cmp	r1, r3
 8003d82:	bf38      	it	cc
 8003d84:	4619      	movcc	r1, r3
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <MRT_checkTimeValues+0xdc>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	b2ca      	uxtb	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000
 8003dac:	200000a0 	.word	0x200000a0

08003db0 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8003db4:	f7ff fd6e 	bl	8003894 <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8003db8:	f7fe ff18 	bl	8002bec <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8003dbc:	f000 f802 	bl	8003dc4 <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8003dc8:	f000 f8ca 	bl	8003f60 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8003dcc:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <MRT_stateRestoration+0x150>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d111      	bne.n	8003df8 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8003dd4:	4b50      	ldr	r3, [pc, #320]	; (8003f18 <MRT_stateRestoration+0x154>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	4b4e      	ldr	r3, [pc, #312]	; (8003f18 <MRT_stateRestoration+0x154>)
 8003dde:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 8003de0:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <MRT_stateRestoration+0x158>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <MRT_stateRestoration+0x158>)
 8003de8:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8003dea:	2102      	movs	r1, #2
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7ff fe2f 	bl	8003a50 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 8003df2:	2001      	movs	r0, #1
 8003df4:	f7ff fe0a 	bl	8003a0c <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 8003df8:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <MRT_stateRestoration+0x158>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <MRT_stateRestoration+0x150>)
 8003e00:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 8003e02:	2101      	movs	r1, #1
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7ff fe23 	bl	8003a50 <MRT_checkFlagsValues>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <MRT_stateRestoration+0x52>
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7ff fdfb 	bl	8003a0c <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 8003e16:	4b42      	ldr	r3, [pc, #264]	; (8003f20 <MRT_stateRestoration+0x15c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <MRT_stateRestoration+0x160>)
 8003e1e:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 8003e20:	2101      	movs	r1, #1
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7ff fe14 	bl	8003a50 <MRT_checkFlagsValues>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <MRT_stateRestoration+0x70>
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7ff fdec 	bl	8003a0c <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8003e34:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <MRT_stateRestoration+0x158>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <MRT_stateRestoration+0x150>)
 8003e3c:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f7ff fe05 	bl	8003a50 <MRT_checkFlagsValues>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <MRT_stateRestoration+0x8e>
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f7ff fddd 	bl	8003a0c <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8003e52:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <MRT_stateRestoration+0x164>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <MRT_stateRestoration+0x168>)
 8003e5a:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f7ff fdf6 	bl	8003a50 <MRT_checkFlagsValues>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <MRT_stateRestoration+0xac>
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f7ff fdce 	bl	8003a0c <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <MRT_stateRestoration+0x16c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <MRT_stateRestoration+0x170>)
 8003e78:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	2004      	movs	r0, #4
 8003e7e:	f7ff fde7 	bl	8003a50 <MRT_checkFlagsValues>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <MRT_stateRestoration+0xca>
 8003e88:	2004      	movs	r0, #4
 8003e8a:	f7ff fdbf 	bl	8003a0c <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <MRT_stateRestoration+0x174>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <MRT_stateRestoration+0x178>)
 8003e96:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 8003e98:	2117      	movs	r1, #23
 8003e9a:	2005      	movs	r0, #5
 8003e9c:	f7ff ff18 	bl	8003cd0 <MRT_checkTimeValues>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <MRT_stateRestoration+0xe8>
 8003ea6:	2005      	movs	r0, #5
 8003ea8:	f7ff feae 	bl	8003c08 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <MRT_stateRestoration+0x17c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <MRT_stateRestoration+0x180>)
 8003eb4:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 8003eb6:	213b      	movs	r1, #59	; 0x3b
 8003eb8:	2006      	movs	r0, #6
 8003eba:	f7ff ff09 	bl	8003cd0 <MRT_checkTimeValues>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <MRT_stateRestoration+0x106>
 8003ec4:	2006      	movs	r0, #6
 8003ec6:	f7ff fe9f 	bl	8003c08 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8003eca:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <MRT_stateRestoration+0x184>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <MRT_stateRestoration+0x188>)
 8003ed2:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 8003ed4:	213b      	movs	r1, #59	; 0x3b
 8003ed6:	2007      	movs	r0, #7
 8003ed8:	f7ff fefa 	bl	8003cd0 <MRT_checkTimeValues>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <MRT_stateRestoration+0x124>
 8003ee2:	2007      	movs	r0, #7
 8003ee4:	f7ff fe90 	bl	8003c08 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <MRT_stateRestoration+0x18c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <MRT_stateRestoration+0x190>)
 8003ef0:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 8003ef2:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003ef6:	2008      	movs	r0, #8
 8003ef8:	f7ff feea 	bl	8003cd0 <MRT_checkTimeValues>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <MRT_stateRestoration+0x144>
 8003f02:	2008      	movs	r0, #8
 8003f04:	f7ff fe80 	bl	8003c08 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <MRT_stateRestoration+0x194>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <MRT_stateRestoration+0x198>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000371 	.word	0x20000371
 8003f18:	2000035f 	.word	0x2000035f
 8003f1c:	20000314 	.word	0x20000314
 8003f20:	20000310 	.word	0x20000310
 8003f24:	20000370 	.word	0x20000370
 8003f28:	20000318 	.word	0x20000318
 8003f2c:	20000372 	.word	0x20000372
 8003f30:	2000031c 	.word	0x2000031c
 8003f34:	20000373 	.word	0x20000373
 8003f38:	20000320 	.word	0x20000320
 8003f3c:	20000374 	.word	0x20000374
 8003f40:	20000324 	.word	0x20000324
 8003f44:	20000375 	.word	0x20000375
 8003f48:	20000328 	.word	0x20000328
 8003f4c:	20000376 	.word	0x20000376
 8003f50:	2000032c 	.word	0x2000032c
 8003f54:	20000377 	.word	0x20000377
 8003f58:	20000330 	.word	0x20000330
 8003f5c:	20000378 	.word	0x20000378

08003f60 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <MRT_checkWakeUp+0x40>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d112      	bne.n	8003f96 <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MRT_checkWakeUp+0x44>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <MRT_checkWakeUp+0x40>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <MRT_checkWakeUp+0x40>)
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 8003f82:	4809      	ldr	r0, [pc, #36]	; (8003fa8 <MRT_checkWakeUp+0x48>)
 8003f84:	f7fd f842 	bl	800100c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003f88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f8c:	f005 fd44 	bl	8009a18 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003f90:	4806      	ldr	r0, [pc, #24]	; (8003fac <MRT_checkWakeUp+0x4c>)
 8003f92:	f007 f999 	bl	800b2c8 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8003f96:	f7fe fd09 	bl	80029ac <MRT_clear_alarms_flags>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	20000371 	.word	0x20000371
 8003fa8:	080171a4 	.word	0x080171a4
 8003fac:	20005b70 	.word	0x20005b70

08003fb0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003fba:	f107 020f 	add.w	r2, r7, #15
 8003fbe:	1df9      	adds	r1, r7, #7
 8003fc0:	2364      	movs	r3, #100	; 0x64
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4804      	ldr	r0, [pc, #16]	; (8003fd8 <W25qxx_Spi+0x28>)
 8003fc8:	f007 fce8 	bl	800b99c <HAL_SPI_TransmitReceive>
	return ret;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20005be8 	.word	0x20005be8

08003fdc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4813      	ldr	r0, [pc, #76]	; (8004044 <W25qxx_ReadID+0x68>)
 8003ff8:	f004 fc08 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003ffc:	209f      	movs	r0, #159	; 0x9f
 8003ffe:	f7ff ffd7 	bl	8003fb0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004002:	20a5      	movs	r0, #165	; 0xa5
 8004004:	f7ff ffd4 	bl	8003fb0 <W25qxx_Spi>
 8004008:	4603      	mov	r3, r0
 800400a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800400c:	20a5      	movs	r0, #165	; 0xa5
 800400e:	f7ff ffcf 	bl	8003fb0 <W25qxx_Spi>
 8004012:	4603      	mov	r3, r0
 8004014:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004016:	20a5      	movs	r0, #165	; 0xa5
 8004018:	f7ff ffca 	bl	8003fb0 <W25qxx_Spi>
 800401c:	4603      	mov	r3, r0
 800401e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004020:	2201      	movs	r2, #1
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	4807      	ldr	r0, [pc, #28]	; (8004044 <W25qxx_ReadID+0x68>)
 8004026:	f004 fbf1 	bl	800880c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	041a      	lsls	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	4313      	orrs	r3, r2
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
	return Temp;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40020c00 	.word	0x40020c00

08004048 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	4816      	ldr	r0, [pc, #88]	; (80040ac <W25qxx_ReadUniqID+0x64>)
 8004054:	f004 fbda 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004058:	204b      	movs	r0, #75	; 0x4b
 800405a:	f7ff ffa9 	bl	8003fb0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	71fb      	strb	r3, [r7, #7]
 8004062:	e005      	b.n	8004070 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004064:	20a5      	movs	r0, #165	; 0xa5
 8004066:	f7ff ffa3 	bl	8003fb0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	3301      	adds	r3, #1
 800406e:	71fb      	strb	r3, [r7, #7]
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d9f6      	bls.n	8004064 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004076:	2300      	movs	r3, #0
 8004078:	71bb      	strb	r3, [r7, #6]
 800407a:	e00b      	b.n	8004094 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800407c:	79bc      	ldrb	r4, [r7, #6]
 800407e:	20a5      	movs	r0, #165	; 0xa5
 8004080:	f7ff ff96 	bl	8003fb0 <W25qxx_Spi>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <W25qxx_ReadUniqID+0x68>)
 800408a:	4423      	add	r3, r4
 800408c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800408e:	79bb      	ldrb	r3, [r7, #6]
 8004090:	3301      	adds	r3, #1
 8004092:	71bb      	strb	r3, [r7, #6]
 8004094:	79bb      	ldrb	r3, [r7, #6]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d9f0      	bls.n	800407c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800409a:	2201      	movs	r2, #1
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	4803      	ldr	r0, [pc, #12]	; (80040ac <W25qxx_ReadUniqID+0x64>)
 80040a0:	f004 fbb4 	bl	800880c <HAL_GPIO_WritePin>
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}
 80040ac:	40020c00 	.word	0x40020c00
 80040b0:	20005ed0 	.word	0x20005ed0

080040b4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	4807      	ldr	r0, [pc, #28]	; (80040dc <W25qxx_WriteEnable+0x28>)
 80040be:	f004 fba5 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80040c2:	2006      	movs	r0, #6
 80040c4:	f7ff ff74 	bl	8003fb0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80040c8:	2201      	movs	r2, #1
 80040ca:	2140      	movs	r1, #64	; 0x40
 80040cc:	4803      	ldr	r0, [pc, #12]	; (80040dc <W25qxx_WriteEnable+0x28>)
 80040ce:	f004 fb9d 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80040d2:	2001      	movs	r0, #1
 80040d4:	f009 fe1a 	bl	800dd0c <osDelay>
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40020c00 	.word	0x40020c00

080040e0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040ee:	2200      	movs	r2, #0
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	481c      	ldr	r0, [pc, #112]	; (8004164 <W25qxx_ReadStatusRegister+0x84>)
 80040f4:	f004 fb8a 	bl	800880c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10c      	bne.n	8004118 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80040fe:	2005      	movs	r0, #5
 8004100:	f7ff ff56 	bl	8003fb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004104:	20a5      	movs	r0, #165	; 0xa5
 8004106:	f7ff ff53 	bl	8003fb0 <W25qxx_Spi>
 800410a:	4603      	mov	r3, r0
 800410c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <W25qxx_ReadStatusRegister+0x88>)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004116:	e01b      	b.n	8004150 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d10c      	bne.n	8004138 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800411e:	2035      	movs	r0, #53	; 0x35
 8004120:	f7ff ff46 	bl	8003fb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004124:	20a5      	movs	r0, #165	; 0xa5
 8004126:	f7ff ff43 	bl	8003fb0 <W25qxx_Spi>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <W25qxx_ReadStatusRegister+0x88>)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004136:	e00b      	b.n	8004150 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004138:	2015      	movs	r0, #21
 800413a:	f7ff ff39 	bl	8003fb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800413e:	20a5      	movs	r0, #165	; 0xa5
 8004140:	f7ff ff36 	bl	8003fb0 <W25qxx_Spi>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <W25qxx_ReadStatusRegister+0x88>)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004150:	2201      	movs	r2, #1
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	4803      	ldr	r0, [pc, #12]	; (8004164 <W25qxx_ReadStatusRegister+0x84>)
 8004156:	f004 fb59 	bl	800880c <HAL_GPIO_WritePin>
	return status;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40020c00 	.word	0x40020c00
 8004168:	20005ed0 	.word	0x20005ed0

0800416c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004170:	2001      	movs	r0, #1
 8004172:	f009 fdcb 	bl	800dd0c <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004176:	2200      	movs	r2, #0
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	480f      	ldr	r0, [pc, #60]	; (80041b8 <W25qxx_WaitForWriteEnd+0x4c>)
 800417c:	f004 fb46 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004180:	2005      	movs	r0, #5
 8004182:	f7ff ff15 	bl	8003fb0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004186:	20a5      	movs	r0, #165	; 0xa5
 8004188:	f7ff ff12 	bl	8003fb0 <W25qxx_Spi>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <W25qxx_WaitForWriteEnd+0x50>)
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004196:	2001      	movs	r0, #1
 8004198:	f009 fdb8 	bl	800dd0c <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <W25qxx_WaitForWriteEnd+0x50>)
 800419e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ed      	bne.n	8004186 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041aa:	2201      	movs	r2, #1
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	4802      	ldr	r0, [pc, #8]	; (80041b8 <W25qxx_WaitForWriteEnd+0x4c>)
 80041b0:	f004 fb2c 	bl	800880c <HAL_GPIO_WritePin>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	20005ed0 	.word	0x20005ed0

080041c0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80041c6:	4b90      	ldr	r3, [pc, #576]	; (8004408 <W25qxx_Init+0x248>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80041ce:	e002      	b.n	80041d6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f009 fd9b 	bl	800dd0c <osDelay>
	while (HAL_GetTick() < 100)
 80041d6:	f003 fc01 	bl	80079dc <HAL_GetTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b63      	cmp	r3, #99	; 0x63
 80041de:	d9f7      	bls.n	80041d0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041e0:	2201      	movs	r2, #1
 80041e2:	2140      	movs	r1, #64	; 0x40
 80041e4:	4889      	ldr	r0, [pc, #548]	; (800440c <W25qxx_Init+0x24c>)
 80041e6:	f004 fb11 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80041ea:	2064      	movs	r0, #100	; 0x64
 80041ec:	f009 fd8e 	bl	800dd0c <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80041f0:	4887      	ldr	r0, [pc, #540]	; (8004410 <W25qxx_Init+0x250>)
 80041f2:	f00e fc95 	bl	8012b20 <puts>
#endif
	id = W25qxx_ReadID();
 80041f6:	f7ff fef1 	bl	8003fdc <W25qxx_ReadID>
 80041fa:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4885      	ldr	r0, [pc, #532]	; (8004414 <W25qxx_Init+0x254>)
 8004200:	f00e fc08 	bl	8012a14 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3b11      	subs	r3, #17
 800420a:	2b0f      	cmp	r3, #15
 800420c:	f200 808b 	bhi.w	8004326 <W25qxx_Init+0x166>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <W25qxx_Init+0x58>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004313 	.word	0x08004313
 800421c:	080042ff 	.word	0x080042ff
 8004220:	080042eb 	.word	0x080042eb
 8004224:	080042d7 	.word	0x080042d7
 8004228:	080042c3 	.word	0x080042c3
 800422c:	080042af 	.word	0x080042af
 8004230:	0800429b 	.word	0x0800429b
 8004234:	08004285 	.word	0x08004285
 8004238:	0800426f 	.word	0x0800426f
 800423c:	08004327 	.word	0x08004327
 8004240:	08004327 	.word	0x08004327
 8004244:	08004327 	.word	0x08004327
 8004248:	08004327 	.word	0x08004327
 800424c:	08004327 	.word	0x08004327
 8004250:	08004327 	.word	0x08004327
 8004254:	08004259 	.word	0x08004259
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <W25qxx_Init+0x248>)
 800425a:	220a      	movs	r2, #10
 800425c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <W25qxx_Init+0x248>)
 8004260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004264:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004266:	486c      	ldr	r0, [pc, #432]	; (8004418 <W25qxx_Init+0x258>)
 8004268:	f00e fc5a 	bl	8012b20 <puts>
#endif
		break;
 800426c:	e064      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800426e:	4b66      	ldr	r3, [pc, #408]	; (8004408 <W25qxx_Init+0x248>)
 8004270:	2209      	movs	r2, #9
 8004272:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004274:	4b64      	ldr	r3, [pc, #400]	; (8004408 <W25qxx_Init+0x248>)
 8004276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800427a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 800427c:	4867      	ldr	r0, [pc, #412]	; (800441c <W25qxx_Init+0x25c>)
 800427e:	f00e fc4f 	bl	8012b20 <puts>
#endif
		break;
 8004282:	e059      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004284:	4b60      	ldr	r3, [pc, #384]	; (8004408 <W25qxx_Init+0x248>)
 8004286:	2208      	movs	r2, #8
 8004288:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <W25qxx_Init+0x248>)
 800428c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004290:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004292:	4863      	ldr	r0, [pc, #396]	; (8004420 <W25qxx_Init+0x260>)
 8004294:	f00e fc44 	bl	8012b20 <puts>
#endif
		break;
 8004298:	e04e      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800429a:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <W25qxx_Init+0x248>)
 800429c:	2207      	movs	r2, #7
 800429e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <W25qxx_Init+0x248>)
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80042a6:	485f      	ldr	r0, [pc, #380]	; (8004424 <W25qxx_Init+0x264>)
 80042a8:	f00e fc3a 	bl	8012b20 <puts>
#endif
		break;
 80042ac:	e044      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <W25qxx_Init+0x248>)
 80042b0:	2206      	movs	r2, #6
 80042b2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80042b4:	4b54      	ldr	r3, [pc, #336]	; (8004408 <W25qxx_Init+0x248>)
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80042ba:	485b      	ldr	r0, [pc, #364]	; (8004428 <W25qxx_Init+0x268>)
 80042bc:	f00e fc30 	bl	8012b20 <puts>
#endif
		break;
 80042c0:	e03a      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80042c2:	4b51      	ldr	r3, [pc, #324]	; (8004408 <W25qxx_Init+0x248>)
 80042c4:	2205      	movs	r2, #5
 80042c6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <W25qxx_Init+0x248>)
 80042ca:	2220      	movs	r2, #32
 80042cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80042ce:	4857      	ldr	r0, [pc, #348]	; (800442c <W25qxx_Init+0x26c>)
 80042d0:	f00e fc26 	bl	8012b20 <puts>
#endif
		break;
 80042d4:	e030      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <W25qxx_Init+0x248>)
 80042d8:	2204      	movs	r2, #4
 80042da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80042dc:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <W25qxx_Init+0x248>)
 80042de:	2210      	movs	r2, #16
 80042e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80042e2:	4853      	ldr	r0, [pc, #332]	; (8004430 <W25qxx_Init+0x270>)
 80042e4:	f00e fc1c 	bl	8012b20 <puts>
#endif
		break;
 80042e8:	e026      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <W25qxx_Init+0x248>)
 80042ec:	2203      	movs	r2, #3
 80042ee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80042f0:	4b45      	ldr	r3, [pc, #276]	; (8004408 <W25qxx_Init+0x248>)
 80042f2:	2208      	movs	r2, #8
 80042f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80042f6:	484f      	ldr	r0, [pc, #316]	; (8004434 <W25qxx_Init+0x274>)
 80042f8:	f00e fc12 	bl	8012b20 <puts>
#endif
		break;
 80042fc:	e01c      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80042fe:	4b42      	ldr	r3, [pc, #264]	; (8004408 <W25qxx_Init+0x248>)
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004304:	4b40      	ldr	r3, [pc, #256]	; (8004408 <W25qxx_Init+0x248>)
 8004306:	2204      	movs	r2, #4
 8004308:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800430a:	484b      	ldr	r0, [pc, #300]	; (8004438 <W25qxx_Init+0x278>)
 800430c:	f00e fc08 	bl	8012b20 <puts>
#endif
		break;
 8004310:	e012      	b.n	8004338 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <W25qxx_Init+0x248>)
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <W25qxx_Init+0x248>)
 800431a:	2202      	movs	r2, #2
 800431c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800431e:	4847      	ldr	r0, [pc, #284]	; (800443c <W25qxx_Init+0x27c>)
 8004320:	f00e fbfe 	bl	8012b20 <puts>
#endif
		break;
 8004324:	e008      	b.n	8004338 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004326:	4846      	ldr	r0, [pc, #280]	; (8004440 <W25qxx_Init+0x280>)
 8004328:	f00e fbfa 	bl	8012b20 <puts>
#endif
		w25qxx.Lock = 0;
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <W25qxx_Init+0x248>)
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004334:	2300      	movs	r3, #0
 8004336:	e063      	b.n	8004400 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <W25qxx_Init+0x248>)
 800433a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004340:	4b31      	ldr	r3, [pc, #196]	; (8004408 <W25qxx_Init+0x248>)
 8004342:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004346:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <W25qxx_Init+0x248>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <W25qxx_Init+0x248>)
 8004350:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <W25qxx_Init+0x248>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4a2c      	ldr	r2, [pc, #176]	; (8004408 <W25qxx_Init+0x248>)
 8004358:	6912      	ldr	r2, [r2, #16]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <W25qxx_Init+0x248>)
 8004360:	8952      	ldrh	r2, [r2, #10]
 8004362:	fbb3 f3f2 	udiv	r3, r3, r2
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <W25qxx_Init+0x248>)
 8004368:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <W25qxx_Init+0x248>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4a25      	ldr	r2, [pc, #148]	; (8004408 <W25qxx_Init+0x248>)
 8004372:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <W25qxx_Init+0x248>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <W25qxx_Init+0x248>)
 800437a:	6912      	ldr	r2, [r2, #16]
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	0a9b      	lsrs	r3, r3, #10
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <W25qxx_Init+0x248>)
 8004384:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004386:	f7ff fe5f 	bl	8004048 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800438a:	2001      	movs	r0, #1
 800438c:	f7ff fea8 	bl	80040e0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004390:	2002      	movs	r0, #2
 8004392:	f7ff fea5 	bl	80040e0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004396:	2003      	movs	r0, #3
 8004398:	f7ff fea2 	bl	80040e0 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <W25qxx_Init+0x248>)
 800439e:	895b      	ldrh	r3, [r3, #10]
 80043a0:	4619      	mov	r1, r3
 80043a2:	4828      	ldr	r0, [pc, #160]	; (8004444 <W25qxx_Init+0x284>)
 80043a4:	f00e fb36 	bl	8012a14 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <W25qxx_Init+0x248>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4619      	mov	r1, r3
 80043ae:	4826      	ldr	r0, [pc, #152]	; (8004448 <W25qxx_Init+0x288>)
 80043b0:	f00e fb30 	bl	8012a14 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <W25qxx_Init+0x248>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4824      	ldr	r0, [pc, #144]	; (800444c <W25qxx_Init+0x28c>)
 80043bc:	f00e fb2a 	bl	8012a14 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <W25qxx_Init+0x248>)
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4619      	mov	r1, r3
 80043c6:	4822      	ldr	r0, [pc, #136]	; (8004450 <W25qxx_Init+0x290>)
 80043c8:	f00e fb24 	bl	8012a14 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <W25qxx_Init+0x248>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4619      	mov	r1, r3
 80043d2:	4820      	ldr	r0, [pc, #128]	; (8004454 <W25qxx_Init+0x294>)
 80043d4:	f00e fb1e 	bl	8012a14 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <W25qxx_Init+0x248>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	4619      	mov	r1, r3
 80043de:	481e      	ldr	r0, [pc, #120]	; (8004458 <W25qxx_Init+0x298>)
 80043e0:	f00e fb18 	bl	8012a14 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <W25qxx_Init+0x248>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4619      	mov	r1, r3
 80043ea:	481c      	ldr	r0, [pc, #112]	; (800445c <W25qxx_Init+0x29c>)
 80043ec:	f00e fb12 	bl	8012a14 <iprintf>
	printf("w25qxx Init Done\r\n");
 80043f0:	481b      	ldr	r0, [pc, #108]	; (8004460 <W25qxx_Init+0x2a0>)
 80043f2:	f00e fb95 	bl	8012b20 <puts>
#endif
	w25qxx.Lock = 0;
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <W25qxx_Init+0x248>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80043fe:	2301      	movs	r3, #1
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20005ed0 	.word	0x20005ed0
 800440c:	40020c00 	.word	0x40020c00
 8004410:	080171c0 	.word	0x080171c0
 8004414:	080171d8 	.word	0x080171d8
 8004418:	080171ec 	.word	0x080171ec
 800441c:	08017204 	.word	0x08017204
 8004420:	0801721c 	.word	0x0801721c
 8004424:	08017234 	.word	0x08017234
 8004428:	0801724c 	.word	0x0801724c
 800442c:	08017264 	.word	0x08017264
 8004430:	0801727c 	.word	0x0801727c
 8004434:	08017294 	.word	0x08017294
 8004438:	080172ac 	.word	0x080172ac
 800443c:	080172c4 	.word	0x080172c4
 8004440:	080172dc 	.word	0x080172dc
 8004444:	080172f0 	.word	0x080172f0
 8004448:	08017310 	.word	0x08017310
 800444c:	08017328 	.word	0x08017328
 8004450:	08017348 	.word	0x08017348
 8004454:	08017364 	.word	0x08017364
 8004458:	08017384 	.word	0x08017384
 800445c:	080173a0 	.word	0x080173a0
 8004460:	080173c0 	.word	0x080173c0

08004464 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800446c:	e002      	b.n	8004474 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f009 fc4c 	bl	800dd0c <osDelay>
	while (w25qxx.Lock == 1)
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <W25qxx_EraseSector+0xc8>)
 8004476:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800447a:	2b01      	cmp	r3, #1
 800447c:	d0f7      	beq.n	800446e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800447e:	4b2b      	ldr	r3, [pc, #172]	; (800452c <W25qxx_EraseSector+0xc8>)
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004486:	f003 faa9 	bl	80079dc <HAL_GetTick>
 800448a:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4828      	ldr	r0, [pc, #160]	; (8004530 <W25qxx_EraseSector+0xcc>)
 8004490:	f00e fac0 	bl	8012a14 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004494:	f7ff fe6a 	bl	800416c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004498:	4b24      	ldr	r3, [pc, #144]	; (800452c <W25qxx_EraseSector+0xc8>)
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80044a4:	f7ff fe06 	bl	80040b4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	4821      	ldr	r0, [pc, #132]	; (8004534 <W25qxx_EraseSector+0xd0>)
 80044ae:	f004 f9ad 	bl	800880c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <W25qxx_EraseSector+0xc8>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d909      	bls.n	80044ce <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80044ba:	2021      	movs	r0, #33	; 0x21
 80044bc:	f7ff fd78 	bl	8003fb0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0e1b      	lsrs	r3, r3, #24
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fd72 	bl	8003fb0 <W25qxx_Spi>
 80044cc:	e002      	b.n	80044d4 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80044ce:	2020      	movs	r0, #32
 80044d0:	f7ff fd6e 	bl	8003fb0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fd68 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fd62 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fd5d 	bl	8003fb0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044f6:	2201      	movs	r2, #1
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	480e      	ldr	r0, [pc, #56]	; (8004534 <W25qxx_EraseSector+0xd0>)
 80044fc:	f004 f986 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004500:	f7ff fe34 	bl	800416c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004504:	f003 fa6a 	bl	80079dc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	4619      	mov	r1, r3
 8004510:	4809      	ldr	r0, [pc, #36]	; (8004538 <W25qxx_EraseSector+0xd4>)
 8004512:	f00e fa7f 	bl	8012a14 <iprintf>
#endif
	W25qxx_Delay(1);
 8004516:	2001      	movs	r0, #1
 8004518:	f009 fbf8 	bl	800dd0c <osDelay>
	w25qxx.Lock = 0;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <W25qxx_EraseSector+0xc8>)
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20005ed0 	.word	0x20005ed0
 8004530:	08017418 	.word	0x08017418
 8004534:	40020c00 	.word	0x40020c00
 8004538:	0801743c 	.word	0x0801743c

0800453c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <W25qxx_SectorToPage+0x28>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <W25qxx_SectorToPage+0x28>)
 8004550:	8952      	ldrh	r2, [r2, #10]
 8004552:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20005ed0 	.word	0x20005ed0

08004568 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004576:	e002      	b.n	800457e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004578:	2001      	movs	r0, #1
 800457a:	f009 fbc7 	bl	800dd0c <osDelay>
	while (w25qxx.Lock == 1)
 800457e:	4b57      	ldr	r3, [pc, #348]	; (80046dc <W25qxx_WritePage+0x174>)
 8004580:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004584:	2b01      	cmp	r3, #1
 8004586:	d0f7      	beq.n	8004578 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004588:	4b54      	ldr	r3, [pc, #336]	; (80046dc <W25qxx_WritePage+0x174>)
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	4a51      	ldr	r2, [pc, #324]	; (80046dc <W25qxx_WritePage+0x174>)
 8004598:	8952      	ldrh	r2, [r2, #10]
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <W25qxx_WritePage+0x3c>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <W25qxx_WritePage+0x174>)
 80045a6:	895b      	ldrh	r3, [r3, #10]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4413      	add	r3, r2
 80045b6:	4a49      	ldr	r2, [pc, #292]	; (80046dc <W25qxx_WritePage+0x174>)
 80045b8:	8952      	ldrh	r2, [r2, #10]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d905      	bls.n	80045ca <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045be:	4b47      	ldr	r3, [pc, #284]	; (80046dc <W25qxx_WritePage+0x174>)
 80045c0:	895b      	ldrh	r3, [r3, #10]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4843      	ldr	r0, [pc, #268]	; (80046e0 <W25qxx_WritePage+0x178>)
 80045d2:	f00e fa1f 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 80045d6:	2064      	movs	r0, #100	; 0x64
 80045d8:	f009 fb98 	bl	800dd0c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80045dc:	f003 f9fe 	bl	80079dc <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80045e2:	f7ff fdc3 	bl	800416c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80045e6:	f7ff fd65 	bl	80040b4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	483d      	ldr	r0, [pc, #244]	; (80046e4 <W25qxx_WritePage+0x17c>)
 80045f0:	f004 f90c 	bl	800880c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <W25qxx_WritePage+0x174>)
 80045f6:	895b      	ldrh	r3, [r3, #10]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	fb03 f302 	mul.w	r3, r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4413      	add	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004606:	4b35      	ldr	r3, [pc, #212]	; (80046dc <W25qxx_WritePage+0x174>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d909      	bls.n	8004622 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800460e:	2012      	movs	r0, #18
 8004610:	f7ff fcce 	bl	8003fb0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fcc8 	bl	8003fb0 <W25qxx_Spi>
 8004620:	e002      	b.n	8004628 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004622:	2002      	movs	r0, #2
 8004624:	f7ff fcc4 	bl	8003fb0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fcbe 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	b2db      	uxtb	r3, r3
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fcb8 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fcb3 	bl	8003fb0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	2364      	movs	r3, #100	; 0x64
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	4825      	ldr	r0, [pc, #148]	; (80046e8 <W25qxx_WritePage+0x180>)
 8004654:	f006 ff55 	bl	800b502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004658:	2201      	movs	r2, #1
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	4821      	ldr	r0, [pc, #132]	; (80046e4 <W25qxx_WritePage+0x17c>)
 800465e:	f004 f8d5 	bl	800880c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004662:	f7ff fd83 	bl	800416c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004666:	f003 f9b9 	bl	80079dc <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e018      	b.n	80046aa <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <W25qxx_WritePage+0x12c>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d905      	bls.n	8004694 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004688:	4818      	ldr	r0, [pc, #96]	; (80046ec <W25qxx_WritePage+0x184>)
 800468a:	f00e fa49 	bl	8012b20 <puts>
			W25qxx_Delay(10);
 800468e:	200a      	movs	r0, #10
 8004690:	f009 fb3c 	bl	800dd0c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	4814      	ldr	r0, [pc, #80]	; (80046f0 <W25qxx_WritePage+0x188>)
 80046a0:	f00e f9b8 	bl	8012a14 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3301      	adds	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3e2      	bcc.n	8004678 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80046b2:	480e      	ldr	r0, [pc, #56]	; (80046ec <W25qxx_WritePage+0x184>)
 80046b4:	f00e fa34 	bl	8012b20 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80046b8:	6939      	ldr	r1, [r7, #16]
 80046ba:	480e      	ldr	r0, [pc, #56]	; (80046f4 <W25qxx_WritePage+0x18c>)
 80046bc:	f00e f9aa 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	f009 fb23 	bl	800dd0c <osDelay>
#endif
	W25qxx_Delay(1);
 80046c6:	2001      	movs	r0, #1
 80046c8:	f009 fb20 	bl	800dd0c <osDelay>
	w25qxx.Lock = 0;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <W25qxx_WritePage+0x174>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80046d4:	bf00      	nop
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20005ed0 	.word	0x20005ed0
 80046e0:	080176a0 	.word	0x080176a0
 80046e4:	40020c00 	.word	0x40020c00
 80046e8:	20005be8 	.word	0x20005be8
 80046ec:	080176dc 	.word	0x080176dc
 80046f0:	080176e0 	.word	0x080176e0
 80046f4:	080176e8 	.word	0x080176e8

080046f8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d802      	bhi.n	8004716 <W25qxx_WriteSector+0x1e>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004716:	4b32      	ldr	r3, [pc, #200]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4830      	ldr	r0, [pc, #192]	; (80047e4 <W25qxx_WriteSector+0xec>)
 8004724:	f00e f976 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 8004728:	2064      	movs	r0, #100	; 0x64
 800472a:	f009 faef 	bl	800dd0c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800472e:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d306      	bcc.n	8004746 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004738:	482b      	ldr	r0, [pc, #172]	; (80047e8 <W25qxx_WriteSector+0xf0>)
 800473a:	f00e f9f1 	bl	8012b20 <puts>
		W25qxx_Delay(100);
 800473e:	2064      	movs	r0, #100	; 0x64
 8004740:	f009 fae4 	bl	800dd0c <osDelay>
#endif
		return;
 8004744:	e048      	b.n	80047d8 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	441a      	add	r2, r3
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	429a      	cmp	r2, r3
 8004752:	d905      	bls.n	8004760 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e001      	b.n	8004764 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f7ff fee9 	bl	800453c <W25qxx_SectorToPage>
 800476a:	4602      	mov	r2, r0
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 800476e:	895b      	ldrh	r3, [r3, #10]
 8004770:	4619      	mov	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	fbb3 f3f1 	udiv	r3, r3, r1
 8004778:	4413      	add	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800477c:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 800477e:	895b      	ldrh	r3, [r3, #10]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	fbb3 f1f2 	udiv	r1, r3, r2
 8004788:	fb02 f201 	mul.w	r2, r2, r1
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	69f9      	ldr	r1, [r7, #28]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff fee6 	bl	8004568 <W25qxx_WritePage>
		StartPage++;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 80047a4:	895b      	ldrh	r3, [r3, #10]
 80047a6:	461a      	mov	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1a9a      	subs	r2, r3, r2
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	4413      	add	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <W25qxx_WriteSector+0xe8>)
 80047b4:	895b      	ldrh	r3, [r3, #10]
 80047b6:	461a      	mov	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dce1      	bgt.n	8004790 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80047cc:	4807      	ldr	r0, [pc, #28]	; (80047ec <W25qxx_WriteSector+0xf4>)
 80047ce:	f00e f9a7 	bl	8012b20 <puts>
	W25qxx_Delay(100);
 80047d2:	2064      	movs	r0, #100	; 0x64
 80047d4:	f009 fa9a 	bl	800dd0c <osDelay>
#endif
}
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20005ed0 	.word	0x20005ed0
 80047e4:	0801770c 	.word	0x0801770c
 80047e8:	0801774c 	.word	0x0801774c
 80047ec:	0801776c 	.word	0x0801776c

080047f0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80047fe:	e002      	b.n	8004806 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004800:	2001      	movs	r0, #1
 8004802:	f009 fa83 	bl	800dd0c <osDelay>
	while (w25qxx.Lock == 1)
 8004806:	4b54      	ldr	r3, [pc, #336]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004808:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800480c:	2b01      	cmp	r3, #1
 800480e:	d0f7      	beq.n	8004800 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004810:	4b51      	ldr	r3, [pc, #324]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004818:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <W25qxx_ReadPage+0x168>)
 800481a:	895b      	ldrh	r3, [r3, #10]
 800481c:	461a      	mov	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4293      	cmp	r3, r2
 8004822:	d802      	bhi.n	800482a <W25qxx_ReadPage+0x3a>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800482a:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <W25qxx_ReadPage+0x168>)
 800482c:	895b      	ldrh	r3, [r3, #10]
 800482e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	4a48      	ldr	r2, [pc, #288]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004838:	8952      	ldrh	r2, [r2, #10]
 800483a:	4293      	cmp	r3, r2
 800483c:	d905      	bls.n	800484a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800483e:	4b46      	ldr	r3, [pc, #280]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004840:	895b      	ldrh	r3, [r3, #10]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	4842      	ldr	r0, [pc, #264]	; (800495c <W25qxx_ReadPage+0x16c>)
 8004852:	f00e f8df 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 8004856:	2064      	movs	r0, #100	; 0x64
 8004858:	f009 fa58 	bl	800dd0c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 800485c:	f003 f8be 	bl	80079dc <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004864:	895b      	ldrh	r3, [r3, #10]
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	fb03 f302 	mul.w	r3, r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	4839      	ldr	r0, [pc, #228]	; (8004960 <W25qxx_ReadPage+0x170>)
 800487a:	f003 ffc7 	bl	800880c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b08      	cmp	r3, #8
 8004884:	d909      	bls.n	800489a <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004886:	200c      	movs	r0, #12
 8004888:	f7ff fb92 	bl	8003fb0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	0e1b      	lsrs	r3, r3, #24
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fb8c 	bl	8003fb0 <W25qxx_Spi>
 8004898:	e002      	b.n	80048a0 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800489a:	200b      	movs	r0, #11
 800489c:	f7ff fb88 	bl	8003fb0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fb82 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fb7c 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fb77 	bl	8003fb0 <W25qxx_Spi>
	W25qxx_Spi(0);
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7ff fb74 	bl	8003fb0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	4824      	ldr	r0, [pc, #144]	; (8004964 <W25qxx_ReadPage+0x174>)
 80048d2:	f006 ff52 	bl	800b77a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80048d6:	2201      	movs	r2, #1
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	4821      	ldr	r0, [pc, #132]	; (8004960 <W25qxx_ReadPage+0x170>)
 80048dc:	f003 ff96 	bl	800880c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80048e0:	f003 f87c 	bl	80079dc <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e018      	b.n	8004924 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <W25qxx_ReadPage+0x11e>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d905      	bls.n	800490e <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004902:	4819      	ldr	r0, [pc, #100]	; (8004968 <W25qxx_ReadPage+0x178>)
 8004904:	f00e f90c 	bl	8012b20 <puts>
			W25qxx_Delay(10);
 8004908:	200a      	movs	r0, #10
 800490a:	f009 f9ff 	bl	800dd0c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	4814      	ldr	r0, [pc, #80]	; (800496c <W25qxx_ReadPage+0x17c>)
 800491a:	f00e f87b 	bl	8012a14 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	3301      	adds	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d3e2      	bcc.n	80048f2 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 800492c:	480e      	ldr	r0, [pc, #56]	; (8004968 <W25qxx_ReadPage+0x178>)
 800492e:	f00e f8f7 	bl	8012b20 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004932:	6939      	ldr	r1, [r7, #16]
 8004934:	480e      	ldr	r0, [pc, #56]	; (8004970 <W25qxx_ReadPage+0x180>)
 8004936:	f00e f86d 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 800493a:	2064      	movs	r0, #100	; 0x64
 800493c:	f009 f9e6 	bl	800dd0c <osDelay>
#endif
	W25qxx_Delay(1);
 8004940:	2001      	movs	r0, #1
 8004942:	f009 f9e3 	bl	800dd0c <osDelay>
	w25qxx.Lock = 0;
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <W25qxx_ReadPage+0x168>)
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20005ed0 	.word	0x20005ed0
 800495c:	080178b8 	.word	0x080178b8
 8004960:	40020c00 	.word	0x40020c00
 8004964:	20005be8 	.word	0x20005be8
 8004968:	080176dc 	.word	0x080176dc
 800496c:	080176e0 	.word	0x080176e0
 8004970:	080178f4 	.word	0x080178f4

08004974 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d802      	bhi.n	8004992 <W25qxx_ReadSector+0x1e>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004992:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4830      	ldr	r0, [pc, #192]	; (8004a60 <W25qxx_ReadSector+0xec>)
 80049a0:	f00e f838 	bl	8012a14 <iprintf>
	W25qxx_Delay(100);
 80049a4:	2064      	movs	r0, #100	; 0x64
 80049a6:	f009 f9b1 	bl	800dd0c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80049aa:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d306      	bcc.n	80049c2 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80049b4:	482b      	ldr	r0, [pc, #172]	; (8004a64 <W25qxx_ReadSector+0xf0>)
 80049b6:	f00e f8b3 	bl	8012b20 <puts>
		W25qxx_Delay(100);
 80049ba:	2064      	movs	r0, #100	; 0x64
 80049bc:	f009 f9a6 	bl	800dd0c <osDelay>
#endif
		return;
 80049c0:	e048      	b.n	8004a54 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	441a      	add	r2, r3
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d905      	bls.n	80049dc <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e001      	b.n	80049e0 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f7ff fdab 	bl	800453c <W25qxx_SectorToPage>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 80049ea:	895b      	ldrh	r3, [r3, #10]
 80049ec:	4619      	mov	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 80049fa:	895b      	ldrh	r3, [r3, #10]
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a04:	fb02 f201 	mul.w	r2, r2, r1
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	69f9      	ldr	r1, [r7, #28]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff feec 	bl	80047f0 <W25qxx_ReadPage>
		StartPage++;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 8004a20:	895b      	ldrh	r3, [r3, #10]
 8004a22:	461a      	mov	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1a9a      	subs	r2, r3, r2
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <W25qxx_ReadSector+0xe8>)
 8004a30:	895b      	ldrh	r3, [r3, #10]
 8004a32:	461a      	mov	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dce1      	bgt.n	8004a0c <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004a48:	4807      	ldr	r0, [pc, #28]	; (8004a68 <W25qxx_ReadSector+0xf4>)
 8004a4a:	f00e f869 	bl	8012b20 <puts>
	W25qxx_Delay(100);
 8004a4e:	2064      	movs	r0, #100	; 0x64
 8004a50:	f009 f95c 	bl	800dd0c <osDelay>
#endif
}
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20005ed0 	.word	0x20005ed0
 8004a60:	08017918 	.word	0x08017918
 8004a64:	08017958 	.word	0x08017958
 8004a68:	08017978 	.word	0x08017978

08004a6c <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a7c:	483b      	ldr	r0, [pc, #236]	; (8004b6c <Max31855_Read_Temp+0x100>)
 8004a7e:	f003 fec5 	bl	800880c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a86:	2204      	movs	r2, #4
 8004a88:	4939      	ldr	r1, [pc, #228]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004a8a:	483a      	ldr	r0, [pc, #232]	; (8004b74 <Max31855_Read_Temp+0x108>)
 8004a8c:	f006 fe75 	bl	800b77a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a96:	4835      	ldr	r0, [pc, #212]	; (8004b6c <Max31855_Read_Temp+0x100>)
 8004a98:	f003 feb8 	bl	800880c <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004a9c:	4b34      	ldr	r3, [pc, #208]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b33      	ldr	r3, [pc, #204]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <Max31855_Read_Temp+0x10c>)
 8004ac8:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8004aca:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <Max31855_Read_Temp+0x110>)
 8004ad6:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8004ae4:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004ae6:	78db      	ldrb	r3, [r3, #3]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	425b      	negs	r3, r3
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	e033      	b.n	8004b60 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <Max31855_Read_Temp+0x110>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d11d      	bne.n	8004b3c <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004b08:	7852      	ldrb	r2, [r2, #1]
 8004b0a:	0892      	lsrs	r2, r2, #2
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b18:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004b20:	f083 031f 	eor.w	r3, r3, #31
 8004b24:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	425b      	negs	r3, r3
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b32:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b3a:	e011      	b.n	8004b60 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <Max31855_Read_Temp+0x104>)
 8004b44:	7852      	ldrb	r2, [r2, #1]
 8004b46:	0892      	lsrs	r2, r2, #2
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b58:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004b60:	eeb0 0a67 	vmov.f32	s0, s15
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	20005ef8 	.word	0x20005ef8
 8004b74:	20005c40 	.word	0x20005c40
 8004b78:	2000037c 	.word	0x2000037c
 8004b7c:	20000380 	.word	0x20000380

08004b80 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8004b84:	f000 f806 	bl	8004b94 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8004b88:	f000 f812 	bl	8004bb0 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8004b8c:	f000 f820 	bl	8004bd0 <MRT_getValveStatus>
}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8004b98:	f7ff ff68 	bl	8004a6c <Max31855_Read_Temp>
 8004b9c:	eef0 7a40 	vmov.f32	s15, s0
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <MRT_getThermoTemp+0x18>)
 8004ba2:	edc3 7a00 	vstr	s15, [r3]
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20005f30 	.word	0x20005f30

08004bb0 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8004bb4:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <MRT_getTransducerVoltage+0x18>)
 8004bb6:	f000 f85f 	bl	8004c78 <MRT_prop_poll_pressure_transducer>
 8004bba:	eef0 7a40 	vmov.f32	s15, s0
 8004bbe:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <MRT_getTransducerVoltage+0x1c>)
 8004bc0:	edc3 7a00 	vstr	s15, [r3]
}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20005a48 	.word	0x20005a48
 8004bcc:	20005f34 	.word	0x20005f34

08004bd0 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4804      	ldr	r0, [pc, #16]	; (8004be8 <MRT_getValveStatus+0x18>)
 8004bd8:	f003 fe00 	bl	80087dc <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <MRT_getValveStatus+0x1c>)
 8004be2:	701a      	strb	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40020400 	.word	0x40020400
 8004bec:	20005f2e 	.word	0x20005f2e

08004bf0 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8004bf6:	2232      	movs	r2, #50	; 0x32
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4816      	ldr	r0, [pc, #88]	; (8004c54 <MRT_formatPropulsion+0x64>)
 8004bfc:	f00c ffde 	bl	8011bbc <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8004c00:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <MRT_formatPropulsion+0x68>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fcaf 	bl	8000568 <__aeabi_f2d>
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <MRT_formatPropulsion+0x6c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fb fca8 	bl	8000568 <__aeabi_f2d>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4910      	ldr	r1, [pc, #64]	; (8004c60 <MRT_formatPropulsion+0x70>)
 8004c1e:	7809      	ldrb	r1, [r1, #0]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4910      	ldr	r1, [pc, #64]	; (8004c64 <MRT_formatPropulsion+0x74>)
 8004c24:	7809      	ldrb	r1, [r1, #0]
 8004c26:	460e      	mov	r6, r1
 8004c28:	490f      	ldr	r1, [pc, #60]	; (8004c68 <MRT_formatPropulsion+0x78>)
 8004c2a:	7809      	ldrb	r1, [r1, #0]
 8004c2c:	6079      	str	r1, [r7, #4]
 8004c2e:	490f      	ldr	r1, [pc, #60]	; (8004c6c <MRT_formatPropulsion+0x7c>)
 8004c30:	6809      	ldr	r1, [r1, #0]
 8004c32:	9105      	str	r1, [sp, #20]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	9104      	str	r1, [sp, #16]
 8004c38:	9603      	str	r6, [sp, #12]
 8004c3a:	9002      	str	r0, [sp, #8]
 8004c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004c40:	4622      	mov	r2, r4
 8004c42:	462b      	mov	r3, r5
 8004c44:	490a      	ldr	r1, [pc, #40]	; (8004c70 <MRT_formatPropulsion+0x80>)
 8004c46:	4803      	ldr	r0, [pc, #12]	; (8004c54 <MRT_formatPropulsion+0x64>)
 8004c48:	f00e f836 	bl	8012cb8 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c54:	20005efc 	.word	0x20005efc
 8004c58:	20005f34 	.word	0x20005f34
 8004c5c:	20005f30 	.word	0x20005f30
 8004c60:	20005f2e 	.word	0x20005f2e
 8004c64:	20000376 	.word	0x20000376
 8004c68:	20000377 	.word	0x20000377
 8004c6c:	20000378 	.word	0x20000378
 8004c70:	08017a0c 	.word	0x08017a0c
 8004c74:	00000000 	.word	0x00000000

08004c78 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f002 ff1f 	bl	8007ac4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8004c86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f003 f81f 	bl	8007cce <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f003 f8a7 	bl	8007de4 <HAL_ADC_GetValue>
 8004c96:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f002 ffe5 	bl	8007c68 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7fb fc40 	bl	8000524 <__aeabi_ui2d>
 8004ca4:	a312      	add	r3, pc, #72	; (adr r3, 8004cf0 <MRT_prop_poll_pressure_transducer+0x78>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f7fb fddf 	bl	800086c <__aeabi_ddiv>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ffa7 	bl	8000c08 <__aeabi_d2f>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fc53 	bl	8000568 <__aeabi_f2d>
 8004cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8004cf8 <MRT_prop_poll_pressure_transducer+0x80>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fca6 	bl	8000618 <__aeabi_dmul>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f7fb ff98 	bl	8000c08 <__aeabi_d2f>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60bb      	str	r3, [r7, #8]

	return voltage;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	ee07 3a90 	vmov	s15, r3
}
 8004ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	f3af 8000 	nop.w
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	40affe00 	.word	0x40affe00
 8004cf8:	66666666 	.word	0x66666666
 8004cfc:	400a6666 	.word	0x400a6666

08004d00 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8004d00:	b598      	push	{r3, r4, r7, lr}
 8004d02:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <MRT_LSM6DSR_Constructor+0x28>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8004d0c:	203c      	movs	r0, #60	; 0x3c
 8004d0e:	f00b fe15 	bl	801093c <_Znwj>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461c      	mov	r4, r3
 8004d16:	226a      	movs	r2, #106	; 0x6a
 8004d18:	4904      	ldr	r1, [pc, #16]	; (8004d2c <MRT_LSM6DSR_Constructor+0x2c>)
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f99c 	bl	8005058 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8004d20:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <MRT_LSM6DSR_Constructor+0x28>)
 8004d22:	601c      	str	r4, [r3, #0]
	}
}
 8004d24:	bf00      	nop
 8004d26:	bd98      	pop	{r3, r4, r7, pc}
 8004d28:	20000384 	.word	0x20000384
 8004d2c:	20005abc 	.word	0x20005abc

08004d30 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <MRT_LSM6DSR_Destructor+0x1c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <MRT_LSM6DSR_Destructor+0x1c>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	}
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000384 	.word	0x20000384

08004d50 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <MRT_LSM6DSR_getAcceleration+0x34>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fa28 	bl	80051b0 <_ZN7LSM6DSR15getAccelerationEv>
 8004d60:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004d68:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4a06      	ldr	r2, [pc, #24]	; (8004d88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004d70:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004d78:	6093      	str	r3, [r2, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000384 	.word	0x20000384
 8004d88:	2000038c 	.word	0x2000038c

08004d8c <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <MRT_LSM6DSR_getAngularRate+0x34>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa88 	bl	80052ac <_ZN7LSM6DSR14getAngularRateEv>
 8004d9c:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004da4:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004dac:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004db4:	6153      	str	r3, [r2, #20]
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000384 	.word	0x20000384
 8004dc4:	2000038c 	.word	0x2000038c

08004dc8 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fa35 	bl	8005240 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8004dd6:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	4a02      	ldr	r2, [pc, #8]	; (8004de8 <MRT_LSM6DSR_getTemperature+0x20>)
 8004dde:	6193      	str	r3, [r2, #24]
}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000384 	.word	0x20000384
 8004de8:	2000038c 	.word	0x2000038c

08004dec <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8004df0:	f7ff ffae 	bl	8004d50 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8004df4:	f7ff ffca 	bl	8004d8c <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8004df8:	f7ff ffe6 	bl	8004dc8 <MRT_LSM6DSR_getTemperature>
}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8004e00:	b598      	push	{r3, r4, r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <MRT_LPS22HH_Constructor+0x28>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8004e0c:	2020      	movs	r0, #32
 8004e0e:	f00b fd95 	bl	801093c <_Znwj>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461c      	mov	r4, r3
 8004e16:	22b3      	movs	r2, #179	; 0xb3
 8004e18:	4904      	ldr	r1, [pc, #16]	; (8004e2c <MRT_LPS22HH_Constructor+0x2c>)
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 faca 	bl	80053b4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <MRT_LPS22HH_Constructor+0x28>)
 8004e22:	601c      	str	r4, [r3, #0]
	}
}
 8004e24:	bf00      	nop
 8004e26:	bd98      	pop	{r3, r4, r7, pc}
 8004e28:	20000388 	.word	0x20000388
 8004e2c:	20005abc 	.word	0x20005abc

08004e30 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <MRT_LPS22HH_Destructor+0x1c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <MRT_LPS22HH_Destructor+0x1c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	}
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000388 	.word	0x20000388

08004e50 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <MRT_LPS22HH_getPressure+0x1c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fb33 	bl	80054c4 <_ZN7LPS22HH11getPressureEv>
 8004e5e:	eef0 7a40 	vmov.f32	s15, s0
 8004e62:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <MRT_LPS22HH_getPressure+0x20>)
 8004e64:	edc3 7a00 	vstr	s15, [r3]
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000388 	.word	0x20000388
 8004e70:	200003b8 	.word	0x200003b8

08004e74 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <MRT_LPS22HH_getTemperature+0x1c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fb55 	bl	800552c <_ZN7LPS22HH14getTemperatureEv>
 8004e82:	eef0 7a40 	vmov.f32	s15, s0
 8004e86:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <MRT_LPS22HH_getTemperature+0x20>)
 8004e88:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000388 	.word	0x20000388
 8004e94:	200003b8 	.word	0x200003b8

08004e98 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8004e9c:	f7ff ffd8 	bl	8004e50 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8004ea0:	f7ff ffe8 	bl	8004e74 <MRT_LPS22HH_getTemperature>
}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8004eac:	4a03      	ldr	r2, [pc, #12]	; (8004ebc <MRT_GPS_pollAll+0x14>)
 8004eae:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <MRT_GPS_pollAll+0x18>)
 8004eb0:	4804      	ldr	r0, [pc, #16]	; (8004ec4 <MRT_GPS_pollAll+0x1c>)
 8004eb2:	f000 fbab 	bl	800560c <GPS_Poll>
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200003d4 	.word	0x200003d4
 8004ec0:	200003d0 	.word	0x200003d0
 8004ec4:	200003cc 	.word	0x200003cc

08004ec8 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8004ed0:	f7ff ff16 	bl	8004d00 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <MRT_LSM6DSR_Init+0x68>)
 8004ed8:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <MRT_LSM6DSR_Init+0x6c>)
 8004ede:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <MRT_LSM6DSR_Init+0x70>)
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <MRT_LSM6DSR_Init+0x74>)
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8004f24:	bf00      	nop
}
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	08004d51 	.word	0x08004d51
 8004f34:	08004d8d 	.word	0x08004d8d
 8004f38:	08004dc9 	.word	0x08004dc9
 8004f3c:	08004ded 	.word	0x08004ded

08004f40 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8004f48:	f7ff ff5a 	bl	8004e00 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <MRT_LPS22HH_Init+0x38>)
 8004f50:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <MRT_LPS22HH_Init+0x3c>)
 8004f56:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <MRT_LPS22HH_Init+0x40>)
 8004f5c:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8004f6e:	bf00      	nop
}
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08004e51 	.word	0x08004e51
 8004f7c:	08004e75 	.word	0x08004e75
 8004f80:	08004e99 	.word	0x08004e99

08004f84 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <MRT_GPS_Init+0x3c>)
 8004f90:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8004f92:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <MRT_GPS_Init+0x40>)
 8004f94:	490c      	ldr	r1, [pc, #48]	; (8004fc8 <MRT_GPS_Init+0x44>)
 8004f96:	480d      	ldr	r0, [pc, #52]	; (8004fcc <MRT_GPS_Init+0x48>)
 8004f98:	f000 fd98 	bl	8005acc <GPS_Init>
	gps_handler.latitude = 0;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8004fb4:	bf00      	nop
}
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08004ea9 	.word	0x08004ea9
 8004fc4:	08001075 	.word	0x08001075
 8004fc8:	08001049 	.word	0x08001049
 8004fcc:	20005db0 	.word	0x20005db0

08004fd0 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 8004fd6:	4818      	ldr	r0, [pc, #96]	; (8005038 <MRT_i2c_sensors_Init+0x68>)
 8004fd8:	f004 fcfc 	bl	80099d4 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 8004fdc:	4c17      	ldr	r4, [pc, #92]	; (800503c <MRT_i2c_sensors_Init+0x6c>)
 8004fde:	463b      	mov	r3, r7
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ff71 	bl	8004ec8 <MRT_LSM6DSR_Init>
 8004fe6:	4625      	mov	r5, r4
 8004fe8:	463c      	mov	r4, r7
 8004fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ff6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 8004ffa:	480f      	ldr	r0, [pc, #60]	; (8005038 <MRT_i2c_sensors_Init+0x68>)
 8004ffc:	f004 fcea 	bl	80099d4 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 8005000:	4c0f      	ldr	r4, [pc, #60]	; (8005040 <MRT_i2c_sensors_Init+0x70>)
 8005002:	463b      	mov	r3, r7
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff9b 	bl	8004f40 <MRT_LPS22HH_Init>
 800500a:	4625      	mov	r5, r4
 800500c:	463c      	mov	r4, r7
 800500e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 8005016:	4808      	ldr	r0, [pc, #32]	; (8005038 <MRT_i2c_sensors_Init+0x68>)
 8005018:	f004 fcdc 	bl	80099d4 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 800501c:	4c09      	ldr	r4, [pc, #36]	; (8005044 <MRT_i2c_sensors_Init+0x74>)
 800501e:	463b      	mov	r3, r7
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ffaf 	bl	8004f84 <MRT_GPS_Init>
 8005026:	463b      	mov	r3, r7
 8005028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800502a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 800502e:	bf00      	nop
 8005030:	3730      	adds	r7, #48	; 0x30
 8005032:	46bd      	mov	sp, r7
 8005034:	bdb0      	pop	{r4, r5, r7, pc}
 8005036:	bf00      	nop
 8005038:	20005b64 	.word	0x20005b64
 800503c:	2000038c 	.word	0x2000038c
 8005040:	200003b8 	.word	0x200003b8
 8005044:	200003cc 	.word	0x200003cc

08005048 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 800504c:	f7ff fe70 	bl	8004d30 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005050:	f7ff feee 	bl	8004e30 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8005066:	4848      	ldr	r0, [pc, #288]	; (8005188 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8005068:	f7fb ffd0 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a47      	ldr	r2, [pc, #284]	; (800518c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005070:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a46      	ldr	r2, [pc, #280]	; (8005190 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8005076:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 800507e:	2064      	movs	r0, #100	; 0x64
 8005080:	f002 fcb8 	bl	80079f4 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f103 021c 	add.w	r2, r3, #28
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3338      	adds	r3, #56	; 0x38
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f001 faf1 	bl	8006678 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8005096:	483f      	ldr	r0, [pc, #252]	; (8005194 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005098:	f7fb ffd6 	bl	8001048 <print>
	if (whoamI != address){
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050a2:	79fa      	ldrb	r2, [r7, #7]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d018      	beq.n	80050da <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 80050a8:	483b      	ldr	r0, [pc, #236]	; (8005198 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 80050aa:	f7fb ffaf 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 80050ae:	483b      	ldr	r0, [pc, #236]	; (800519c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 80050b0:	f7fb ffca 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ba:	461a      	mov	r2, r3
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	4937      	ldr	r1, [pc, #220]	; (80051a0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00d fdf8 	bl	8012cb8 <siprintf>
	  print(buffer);
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb ffbb 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80050d2:	4834      	ldr	r0, [pc, #208]	; (80051a4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 80050d4:	f7fb ff9a 	bl	800100c <println>
	  while(1);
 80050d8:	e7fe      	b.n	80050d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 80050da:	4833      	ldr	r0, [pc, #204]	; (80051a8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80050dc:	f7fb ff96 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80050e0:	4832      	ldr	r0, [pc, #200]	; (80051ac <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 80050e2:	f7fb ffb1 	bl	8001048 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	331c      	adds	r3, #28
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fad4 	bl	800669a <lsm6dsr_reset_set>
	HAL_Delay(500);
 80050f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050f6:	f002 fc7d 	bl	80079f4 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f103 021c 	add.w	r2, r3, #28
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3339      	adds	r3, #57	; 0x39
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f001 faed 	bl	80066e6 <lsm6dsr_reset_get>
	} while (rst);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005112:	2b00      	cmp	r3, #0
 8005114:	d000      	beq.n	8005118 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8005116:	e7f0      	b.n	80050fa <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8005118:	4823      	ldr	r0, [pc, #140]	; (80051a8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 800511a:	f7fb ff77 	bl	800100c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	331c      	adds	r3, #28
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fb55 	bl	80067d4 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	331c      	adds	r3, #28
 800512e:	2101      	movs	r1, #1
 8005130:	4618      	mov	r0, r3
 8005132:	f001 f951 	bl	80063d8 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	331c      	adds	r3, #28
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f000 ff2d 	bl	8005f9c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	331c      	adds	r3, #28
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f849 	bl	80061e0 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	331c      	adds	r3, #28
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fefb 	bl	8005f50 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	331c      	adds	r3, #28
 800515e:	210c      	movs	r1, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f001 f817 	bl	8006194 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	331c      	adds	r3, #28
 800516a:	2104      	movs	r1, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f001 faf9 	bl	8006764 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	331c      	adds	r3, #28
 8005176:	2101      	movs	r1, #1
 8005178:	4618      	mov	r0, r3
 800517a:	f001 facd 	bl	8006718 <lsm6dsr_xl_filter_lp2_set>
}
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08017a34 	.word	0x08017a34
 800518c:	0800533f 	.word	0x0800533f
 8005190:	08005379 	.word	0x08005379
 8005194:	08017a44 	.word	0x08017a44
 8005198:	08017a5c 	.word	0x08017a5c
 800519c:	08017a64 	.word	0x08017a64
 80051a0:	08017a78 	.word	0x08017a78
 80051a4:	08017a80 	.word	0x08017a80
 80051a8:	08017a98 	.word	0x08017a98
 80051ac:	08017a9c 	.word	0x08017a9c

080051b0 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f103 021c 	add.w	r2, r3, #28
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3328      	adds	r3, #40	; 0x28
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f001 f92d 	bl	8006424 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d030      	beq.n	8005236 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	332a      	adds	r3, #42	; 0x2a
 80051d8:	2206      	movs	r2, #6
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f00c fced 	bl	8011bbc <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f103 021c 	add.w	r2, r3, #28
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	332a      	adds	r3, #42	; 0x2a
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f001 f9d1 	bl	8006596 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fe5c 	bl	8005eb8 <lsm6dsr_from_fs2g_to_mg>
 8005200:	eef0 7a40 	vmov.f32	s15, s0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fe51 	bl	8005eb8 <lsm6dsr_from_fs2g_to_mg>
 8005216:	eef0 7a40 	vmov.f32	s15, s0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe46 	bl	8005eb8 <lsm6dsr_from_fs2g_to_mg>
 800522c:	eef0 7a40 	vmov.f32	s15, s0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8005236:	687b      	ldr	r3, [r7, #4]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 021c 	add.w	r2, r3, #28
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3328      	adds	r3, #40	; 0x28
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f001 f917 	bl	8006488 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01a      	beq.n	800529a <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3336      	adds	r3, #54	; 0x36
 8005268:	2202      	movs	r2, #2
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f00c fca5 	bl	8011bbc <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 021c 	add.w	r2, r3, #28
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3336      	adds	r3, #54	; 0x36
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f001 f91b 	bl	80064ba <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fe44 	bl	8005f18 <lsm6dsr_from_lsb_to_celsius>
 8005290:	eef0 7a40 	vmov.f32	s15, s0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	ee07 3a90 	vmov	s15, r3
}
 80052a2:	eeb0 0a67 	vmov.f32	s0, s15
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f103 021c 	add.w	r2, r3, #28
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3328      	adds	r3, #40	; 0x28
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f001 f8c8 	bl	8006456 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d030      	beq.n	8005332 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3330      	adds	r3, #48	; 0x30
 80052d4:	2206      	movs	r2, #6
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f00c fc6f 	bl	8011bbc <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f103 021c 	add.w	r2, r3, #28
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3330      	adds	r3, #48	; 0x30
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f001 f908 	bl	8006500 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fdf6 	bl	8005ee8 <lsm6dsr_from_fs2000dps_to_mdps>
 80052fc:	eef0 7a40 	vmov.f32	s15, s0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fdeb 	bl	8005ee8 <lsm6dsr_from_fs2000dps_to_mdps>
 8005312:	eef0 7a40 	vmov.f32	s15, s0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fde0 	bl	8005ee8 <lsm6dsr_from_fs2000dps_to_mdps>
 8005328:	eef0 7a40 	vmov.f32	s15, s0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	330c      	adds	r3, #12
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af04      	add	r7, sp, #16
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	461a      	mov	r2, r3
 800534a:	460b      	mov	r3, r1
 800534c:	72fb      	strb	r3, [r7, #11]
 800534e:	4613      	mov	r3, r2
 8005350:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	b29a      	uxth	r2, r3
 8005356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800535a:	9302      	str	r3, [sp, #8]
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2301      	movs	r3, #1
 8005366:	21d5      	movs	r1, #213	; 0xd5
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f003 fbc5 	bl	8008af8 <HAL_I2C_Mem_Write>
  return 0;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af04      	add	r7, sp, #16
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	460b      	mov	r3, r1
 8005386:	72fb      	strb	r3, [r7, #11]
 8005388:	4613      	mov	r3, r2
 800538a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	b29a      	uxth	r2, r3
 8005390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005394:	9302      	str	r3, [sp, #8]
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	2301      	movs	r3, #1
 80053a0:	21d5      	movs	r1, #213	; 0xd5
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f003 fca2 	bl	8008cec <HAL_I2C_Mem_Read>
  return 0;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 80053c2:	4836      	ldr	r0, [pc, #216]	; (800549c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 80053c4:	f7fb fe22 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 80053cc:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a34      	ldr	r2, [pc, #208]	; (80054a4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 80053d2:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 80053da:	2064      	movs	r0, #100	; 0x64
 80053dc:	f002 fb0a 	bl	80079f4 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f103 0208 	add.w	r2, r3, #8
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	331e      	adds	r3, #30
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fce0 	bl	8005db8 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80053f8:	482b      	ldr	r0, [pc, #172]	; (80054a8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80053fa:	f7fb fe25 	bl	8001048 <print>
	if ( whoamI != address ){
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	7f9b      	ldrb	r3, [r3, #30]
 8005402:	79fa      	ldrb	r2, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d017      	beq.n	8005438 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8005408:	4828      	ldr	r0, [pc, #160]	; (80054ac <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 800540a:	f7fb fdff 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 800540e:	4828      	ldr	r0, [pc, #160]	; (80054b0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005410:	f7fb fe1a 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	7f9b      	ldrb	r3, [r3, #30]
 8005418:	461a      	mov	r2, r3
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	4925      	ldr	r1, [pc, #148]	; (80054b4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005420:	4618      	mov	r0, r3
 8005422:	f00d fc49 	bl	8012cb8 <siprintf>
	  print(buffer);
 8005426:	f107 0314 	add.w	r3, r7, #20
 800542a:	4618      	mov	r0, r3
 800542c:	f7fb fe0c 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8005430:	4821      	ldr	r0, [pc, #132]	; (80054b8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 8005432:	f7fb fdeb 	bl	800100c <println>
	  while(1);
 8005436:	e7fe      	b.n	8005436 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8005438:	4820      	ldr	r0, [pc, #128]	; (80054bc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 800543a:	f7fb fde7 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 800543e:	4820      	ldr	r0, [pc, #128]	; (80054c0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8005440:	f7fb fe02 	bl	8001048 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3308      	adds	r3, #8
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fcc5 	bl	8005dda <lps22hh_reset_set>
	HAL_Delay(500);
 8005450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005454:	f002 face 	bl	80079f4 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f103 0208 	add.w	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	331f      	adds	r3, #31
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fcde 	bl	8005e26 <lps22hh_reset_get>
	} while (rst);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	7fdb      	ldrb	r3, [r3, #31]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d000      	beq.n	8005474 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8005472:	e7f1      	b.n	8005458 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 8005474:	4811      	ldr	r0, [pc, #68]	; (80054bc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8005476:	f7fb fdc9 	bl	800100c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3308      	adds	r3, #8
 800547e:	2101      	movs	r1, #1
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fba7 	bl	8005bd4 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3308      	adds	r3, #8
 800548a:	2115      	movs	r1, #21
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fbc7 	bl	8005c20 <lps22hh_data_rate_set>
}
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	08017ac0 	.word	0x08017ac0
 80054a0:	08005597 	.word	0x08005597
 80054a4:	080055d1 	.word	0x080055d1
 80054a8:	08017a44 	.word	0x08017a44
 80054ac:	08017a5c 	.word	0x08017a5c
 80054b0:	08017a64 	.word	0x08017a64
 80054b4:	08017a78 	.word	0x08017a78
 80054b8:	08017a80 	.word	0x08017a80
 80054bc:	08017a98 	.word	0x08017a98
 80054c0:	08017a9c 	.word	0x08017a9c

080054c4 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 0208 	add.w	r2, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3314      	adds	r3, #20
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 fbef 	bl	8005cbc <lps22hh_press_flag_data_ready_get>

	if (reg) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	7d1b      	ldrb	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d019      	beq.n	800551a <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3318      	adds	r3, #24
 80054ea:	2204      	movs	r2, #4
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f00c fb64 	bl	8011bbc <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 0208 	add.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3318      	adds	r3, #24
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f000 fc0d 	bl	8005d20 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb30 	bl	8005b70 <lps22hh_from_lsb_to_hpa>
 8005510:	eef0 7a40 	vmov.f32	s15, s0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	ee07 3a90 	vmov	s15, r3
}
 8005522:	eeb0 0a67 	vmov.f32	s0, s15
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f103 0208 	add.w	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3314      	adds	r3, #20
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f000 fbd4 	bl	8005cee <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	7d1b      	ldrb	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01a      	beq.n	8005584 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	331c      	adds	r3, #28
 8005552:	2202      	movs	r2, #2
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f00c fb30 	bl	8011bbc <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f103 0208 	add.w	r2, r3, #8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	331c      	adds	r3, #28
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f000 fc02 	bl	8005d72 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fb13 	bl	8005ba0 <lps22hh_from_lsb_to_celsius>
 800557a:	eef0 7a40 	vmov.f32	s15, s0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	ee07 3a90 	vmov	s15, r3
}
 800558c:	eeb0 0a67 	vmov.f32	s0, s15
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005596:	b580      	push	{r7, lr}
 8005598:	b088      	sub	sp, #32
 800559a:	af04      	add	r7, sp, #16
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	461a      	mov	r2, r3
 80055a2:	460b      	mov	r3, r1
 80055a4:	72fb      	strb	r3, [r7, #11]
 80055a6:	4613      	mov	r3, r2
 80055a8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055b2:	9302      	str	r3, [sp, #8]
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	2301      	movs	r3, #1
 80055be:	21b9      	movs	r1, #185	; 0xb9
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f003 fa99 	bl	8008af8 <HAL_I2C_Mem_Write>
  return 0;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af04      	add	r7, sp, #16
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	461a      	mov	r2, r3
 80055dc:	460b      	mov	r3, r1
 80055de:	72fb      	strb	r3, [r7, #11]
 80055e0:	4613      	mov	r3, r2
 80055e2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80055e4:	7afb      	ldrb	r3, [r7, #11]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2301      	movs	r3, #1
 80055f8:	21b9      	movs	r1, #185	; 0xb9
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f003 fb76 	bl	8008cec <HAL_I2C_Mem_Read>
  return 0;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	; 0x30
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005618:	2364      	movs	r3, #100	; 0x64
 800561a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8005624:	e073      	b.n	800570e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8005626:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <GPS_Poll+0x118>)
 8005628:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800562a:	2364      	movs	r3, #100	; 0x64
 800562c:	2201      	movs	r2, #1
 800562e:	493e      	ldr	r1, [pc, #248]	; (8005728 <GPS_Poll+0x11c>)
 8005630:	f007 fe11 	bl	800d256 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8005634:	4b3c      	ldr	r3, [pc, #240]	; (8005728 <GPS_Poll+0x11c>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b0a      	cmp	r3, #10
 800563a:	d00f      	beq.n	800565c <GPS_Poll+0x50>
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <GPS_Poll+0x120>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b63      	cmp	r3, #99	; 0x63
 8005642:	d80b      	bhi.n	800565c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <GPS_Poll+0x120>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	b2d1      	uxtb	r1, r2
 800564c:	4a37      	ldr	r2, [pc, #220]	; (800572c <GPS_Poll+0x120>)
 800564e:	7011      	strb	r1, [r2, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b35      	ldr	r3, [pc, #212]	; (8005728 <GPS_Poll+0x11c>)
 8005654:	7819      	ldrb	r1, [r3, #0]
 8005656:	4b36      	ldr	r3, [pc, #216]	; (8005730 <GPS_Poll+0x124>)
 8005658:	5499      	strb	r1, [r3, r2]
 800565a:	e021      	b.n	80056a0 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800565c:	4834      	ldr	r0, [pc, #208]	; (8005730 <GPS_Poll+0x124>)
 800565e:	f000 f869 	bl	8005734 <GPS_validate>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8005668:	4831      	ldr	r0, [pc, #196]	; (8005730 <GPS_Poll+0x124>)
 800566a:	f000 f8c5 	bl	80057f8 <GPS_parse>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <GPS_Poll+0x118>)
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800567c:	4b29      	ldr	r3, [pc, #164]	; (8005724 <GPS_Poll+0x118>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <GPS_Poll+0x118>)
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]
					done = 1;
 800568c:	2301      	movs	r3, #1
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8005690:	4b26      	ldr	r3, [pc, #152]	; (800572c <GPS_Poll+0x120>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8005696:	2264      	movs	r2, #100	; 0x64
 8005698:	2100      	movs	r1, #0
 800569a:	4825      	ldr	r0, [pc, #148]	; (8005730 <GPS_Poll+0x124>)
 800569c:	f00c fa8e 	bl	8011bbc <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 80056a0:	2300      	movs	r3, #0
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <GPS_Poll+0x118>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <GPS_Poll+0x118>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <GPS_Poll+0x118>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <GPS_Poll+0x118>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <GPS_Poll+0x118>)
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <GPS_Poll+0x118>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <GPS_Poll+0x118>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <GPS_Poll+0x118>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8005708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800570a:	3301      	adds	r3, #1
 800570c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800570e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005712:	429a      	cmp	r2, r3
 8005714:	d202      	bcs.n	800571c <GPS_Poll+0x110>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d084      	beq.n	8005626 <GPS_Poll+0x1a>
	}
}
 800571c:	bf00      	nop
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20005f38 	.word	0x20005f38
 8005728:	200003dc 	.word	0x200003dc
 800572c:	200003dd 	.word	0x200003dd
 8005730:	20005f9c 	.word	0x20005f9c

08005734 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b24      	cmp	r3, #36	; 0x24
 800574e:	d103      	bne.n	8005758 <GPS_validate+0x24>
        i++;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005756:	e00c      	b.n	8005772 <GPS_validate+0x3e>
        return 0;
 8005758:	2300      	movs	r3, #0
 800575a:	e047      	b.n	80057ec <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4053      	eors	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        i++;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <GPS_validate+0x5c>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b2a      	cmp	r3, #42	; 0x2a
 8005788:	d002      	beq.n	8005790 <GPS_validate+0x5c>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b4a      	cmp	r3, #74	; 0x4a
 800578e:	dde5      	ble.n	800575c <GPS_validate+0x28>
    }

    if(i >= 75){
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b4a      	cmp	r3, #74	; 0x4a
 8005794:	dd01      	ble.n	800579a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8005796:	2300      	movs	r3, #0
 8005798:	e028      	b.n	80057ec <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b2a      	cmp	r3, #42	; 0x2a
 80057a4:	d119      	bne.n	80057da <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	3301      	adds	r3, #1
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3302      	adds	r3, #2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	490a      	ldr	r1, [pc, #40]	; (80057f4 <GPS_validate+0xc0>)
 80057ca:	4618      	mov	r0, r3
 80057cc:	f00d fa74 	bl	8012cb8 <siprintf>
    return((checkcalcstr[0] == check[0])
 80057d0:	7a3a      	ldrb	r2, [r7, #8]
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d108      	bne.n	80057ea <GPS_validate+0xb6>
 80057d8:	e001      	b.n	80057de <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80057da:	2300      	movs	r3, #0
 80057dc:	e006      	b.n	80057ec <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80057de:	7a7a      	ldrb	r2, [r7, #9]
 80057e0:	7b7b      	ldrb	r3, [r7, #13]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d101      	bne.n	80057ea <GPS_validate+0xb6>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <GPS_validate+0xb8>
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	08017ad0 	.word	0x08017ad0

080057f8 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af08      	add	r7, sp, #32
 80057fe:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8005800:	2206      	movs	r2, #6
 8005802:	496d      	ldr	r1, [pc, #436]	; (80059b8 <GPS_parse+0x1c0>)
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f00d fae8 	bl	8012dda <strncmp>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d139      	bne.n	8005884 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8005810:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <GPS_parse+0x1c4>)
 8005812:	9307      	str	r3, [sp, #28]
 8005814:	4b6a      	ldr	r3, [pc, #424]	; (80059c0 <GPS_parse+0x1c8>)
 8005816:	9306      	str	r3, [sp, #24]
 8005818:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <GPS_parse+0x1cc>)
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <GPS_parse+0x1d0>)
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <GPS_parse+0x1d4>)
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <GPS_parse+0x1d8>)
 8005826:	9302      	str	r3, [sp, #8]
 8005828:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <GPS_parse+0x1dc>)
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <GPS_parse+0x1e0>)
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <GPS_parse+0x1e4>)
 8005832:	4a6b      	ldr	r2, [pc, #428]	; (80059e0 <GPS_parse+0x1e8>)
 8005834:	496b      	ldr	r1, [pc, #428]	; (80059e4 <GPS_parse+0x1ec>)
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f00d fa5e 	bl	8012cf8 <siscanf>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f340 80b5 	ble.w	80059ae <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <GPS_parse+0x1f0>)
 8005846:	edd3 7a04 	vldr	s15, [r3, #16]
 800584a:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <GPS_parse+0x1f0>)
 800584c:	7e1b      	ldrb	r3, [r3, #24]
 800584e:	4618      	mov	r0, r3
 8005850:	eeb0 0a67 	vmov.f32	s0, s15
 8005854:	f000 f8ec 	bl	8005a30 <GPS_nmea_to_dec>
 8005858:	eef0 7a40 	vmov.f32	s15, s0
 800585c:	4b62      	ldr	r3, [pc, #392]	; (80059e8 <GPS_parse+0x1f0>)
 800585e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005862:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <GPS_parse+0x1f0>)
 8005864:	edd3 7a03 	vldr	s15, [r3, #12]
 8005868:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <GPS_parse+0x1f0>)
 800586a:	7e5b      	ldrb	r3, [r3, #25]
 800586c:	4618      	mov	r0, r3
 800586e:	eeb0 0a67 	vmov.f32	s0, s15
 8005872:	f000 f8dd 	bl	8005a30 <GPS_nmea_to_dec>
 8005876:	eef0 7a40 	vmov.f32	s15, s0
 800587a:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <GPS_parse+0x1f0>)
 800587c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005880:	2301      	movs	r3, #1
 8005882:	e095      	b.n	80059b0 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8005884:	2206      	movs	r2, #6
 8005886:	4959      	ldr	r1, [pc, #356]	; (80059ec <GPS_parse+0x1f4>)
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f00d faa6 	bl	8012dda <strncmp>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d134      	bne.n	80058fe <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8005894:	4b56      	ldr	r3, [pc, #344]	; (80059f0 <GPS_parse+0x1f8>)
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <GPS_parse+0x1fc>)
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <GPS_parse+0x200>)
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <GPS_parse+0x1d8>)
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <GPS_parse+0x1dc>)
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <GPS_parse+0x1e0>)
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	4b4b      	ldr	r3, [pc, #300]	; (80059dc <GPS_parse+0x1e4>)
 80058ae:	4a4c      	ldr	r2, [pc, #304]	; (80059e0 <GPS_parse+0x1e8>)
 80058b0:	4952      	ldr	r1, [pc, #328]	; (80059fc <GPS_parse+0x204>)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f00d fa20 	bl	8012cf8 <siscanf>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dd77      	ble.n	80059ae <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <GPS_parse+0x1f0>)
 80058c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <GPS_parse+0x1f0>)
 80058c6:	7e1b      	ldrb	r3, [r3, #24]
 80058c8:	4618      	mov	r0, r3
 80058ca:	eeb0 0a67 	vmov.f32	s0, s15
 80058ce:	f000 f8af 	bl	8005a30 <GPS_nmea_to_dec>
 80058d2:	eef0 7a40 	vmov.f32	s15, s0
 80058d6:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <GPS_parse+0x1f0>)
 80058d8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <GPS_parse+0x1f0>)
 80058de:	edd3 7a03 	vldr	s15, [r3, #12]
 80058e2:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <GPS_parse+0x1f0>)
 80058e4:	7e5b      	ldrb	r3, [r3, #25]
 80058e6:	4618      	mov	r0, r3
 80058e8:	eeb0 0a67 	vmov.f32	s0, s15
 80058ec:	f000 f8a0 	bl	8005a30 <GPS_nmea_to_dec>
 80058f0:	eef0 7a40 	vmov.f32	s15, s0
 80058f4:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <GPS_parse+0x1f0>)
 80058f6:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e058      	b.n	80059b0 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80058fe:	2206      	movs	r2, #6
 8005900:	493f      	ldr	r1, [pc, #252]	; (8005a00 <GPS_parse+0x208>)
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f00d fa69 	bl	8012dda <strncmp>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d130      	bne.n	8005970 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800590e:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <GPS_parse+0x20c>)
 8005910:	9303      	str	r3, [sp, #12]
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <GPS_parse+0x1e8>)
 8005914:	9302      	str	r3, [sp, #8]
 8005916:	4b2e      	ldr	r3, [pc, #184]	; (80059d0 <GPS_parse+0x1d8>)
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <GPS_parse+0x1dc>)
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <GPS_parse+0x1e0>)
 8005920:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <GPS_parse+0x1e4>)
 8005922:	4939      	ldr	r1, [pc, #228]	; (8005a08 <GPS_parse+0x210>)
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f00d f9e7 	bl	8012cf8 <siscanf>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	dd3e      	ble.n	80059ae <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005930:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <GPS_parse+0x1f0>)
 8005932:	edd3 7a04 	vldr	s15, [r3, #16]
 8005936:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <GPS_parse+0x1f0>)
 8005938:	7e1b      	ldrb	r3, [r3, #24]
 800593a:	4618      	mov	r0, r3
 800593c:	eeb0 0a67 	vmov.f32	s0, s15
 8005940:	f000 f876 	bl	8005a30 <GPS_nmea_to_dec>
 8005944:	eef0 7a40 	vmov.f32	s15, s0
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <GPS_parse+0x1f0>)
 800594a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800594e:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <GPS_parse+0x1f0>)
 8005950:	edd3 7a03 	vldr	s15, [r3, #12]
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <GPS_parse+0x1f0>)
 8005956:	7e5b      	ldrb	r3, [r3, #25]
 8005958:	4618      	mov	r0, r3
 800595a:	eeb0 0a67 	vmov.f32	s0, s15
 800595e:	f000 f867 	bl	8005a30 <GPS_nmea_to_dec>
 8005962:	eef0 7a40 	vmov.f32	s15, s0
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <GPS_parse+0x1f0>)
 8005968:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800596c:	2301      	movs	r3, #1
 800596e:	e01f      	b.n	80059b0 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8005970:	2206      	movs	r2, #6
 8005972:	4926      	ldr	r1, [pc, #152]	; (8005a0c <GPS_parse+0x214>)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f00d fa30 	bl	8012dda <strncmp>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d116      	bne.n	80059ae <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005980:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <GPS_parse+0x218>)
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	4b23      	ldr	r3, [pc, #140]	; (8005a14 <GPS_parse+0x21c>)
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <GPS_parse+0x220>)
 800598a:	9303      	str	r3, [sp, #12]
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <GPS_parse+0x200>)
 800598e:	9302      	str	r3, [sp, #8]
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <GPS_parse+0x224>)
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <GPS_parse+0x228>)
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <GPS_parse+0x22c>)
 800599a:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <GPS_parse+0x230>)
 800599c:	4923      	ldr	r1, [pc, #140]	; (8005a2c <GPS_parse+0x234>)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f00d f9aa 	bl	8012cf8 <siscanf>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dd01      	ble.n	80059ae <GPS_parse+0x1b6>
            return 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <GPS_parse+0x1b8>
    }
    return 0;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08017ad8 	.word	0x08017ad8
 80059bc:	20005f64 	.word	0x20005f64
 80059c0:	20005f60 	.word	0x20005f60
 80059c4:	20005f5c 	.word	0x20005f5c
 80059c8:	20005f58 	.word	0x20005f58
 80059cc:	20005f54 	.word	0x20005f54
 80059d0:	20005f51 	.word	0x20005f51
 80059d4:	20005f44 	.word	0x20005f44
 80059d8:	20005f50 	.word	0x20005f50
 80059dc:	20005f48 	.word	0x20005f48
 80059e0:	20005f4c 	.word	0x20005f4c
 80059e4:	08017ae0 	.word	0x08017ae0
 80059e8:	20005f38 	.word	0x20005f38
 80059ec:	08017b08 	.word	0x08017b08
 80059f0:	20005f70 	.word	0x20005f70
 80059f4:	20005f6c 	.word	0x20005f6c
 80059f8:	20005f68 	.word	0x20005f68
 80059fc:	08017b10 	.word	0x08017b10
 8005a00:	08017b30 	.word	0x08017b30
 8005a04:	20005f74 	.word	0x20005f74
 8005a08:	08017b38 	.word	0x08017b38
 8005a0c:	08017b54 	.word	0x08017b54
 8005a10:	20005f8c 	.word	0x20005f8c
 8005a14:	20005f88 	.word	0x20005f88
 8005a18:	20005f85 	.word	0x20005f85
 8005a1c:	20005f84 	.word	0x20005f84
 8005a20:	20005f80 	.word	0x20005f80
 8005a24:	20005f7c 	.word	0x20005f7c
 8005a28:	20005f78 	.word	0x20005f78
 8005a2c:	08017b5c 	.word	0x08017b5c

08005a30 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8005a3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a42:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005ac4 <GPS_nmea_to_dec+0x94>
 8005a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a4e:	ee17 3a90 	vmov	r3, s15
 8005a52:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2264      	movs	r2, #100	; 0x64
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a64:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8005a70:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a74:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005ac8 <GPS_nmea_to_dec+0x98>
 8005a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a7c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a92:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	2b53      	cmp	r3, #83	; 0x53
 8005a9a:	d002      	beq.n	8005aa2 <GPS_nmea_to_dec+0x72>
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b57      	cmp	r3, #87	; 0x57
 8005aa0:	d105      	bne.n	8005aae <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8005aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aa6:	eef1 7a67 	vneg.f32	s15, s15
 8005aaa:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	ee07 3a90 	vmov	s15, r3
}
 8005ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	42c80000 	.word	0x42c80000
 8005ac8:	42700000 	.word	0x42700000

08005acc <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <GPS_Init+0x38>)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <GPS_Init+0x38>)
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	4809      	ldr	r0, [pc, #36]	; (8005b08 <GPS_Init+0x3c>)
 8005ae4:	4798      	blx	r3
	GPS.uart = data_uart;
 8005ae6:	4a07      	ldr	r2, [pc, #28]	; (8005b04 <GPS_Init+0x38>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <GPS_Init+0x38>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <GPS_Init+0x38>)
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	4805      	ldr	r0, [pc, #20]	; (8005b0c <GPS_Init+0x40>)
 8005af8:	4798      	blx	r3
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20005f38 	.word	0x20005f38
 8005b08:	08017b7c 	.word	0x08017b7c
 8005b0c:	08017b8c 	.word	0x08017b8c

08005b10 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	72fb      	strb	r3, [r7, #11]
 8005b20:	4613      	mov	r3, r2
 8005b22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685c      	ldr	r4, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6898      	ldr	r0, [r3, #8]
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	7af9      	ldrb	r1, [r7, #11]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	47a0      	blx	r4
 8005b34:	6178      	str	r0, [r7, #20]

  return ret;
 8005b36:	697b      	ldr	r3, [r7, #20]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd90      	pop	{r4, r7, pc}

08005b40 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	72fb      	strb	r3, [r7, #11]
 8005b50:	4613      	mov	r3, r2
 8005b52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681c      	ldr	r4, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6898      	ldr	r0, [r3, #8]
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	7af9      	ldrb	r1, [r7, #11]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	47a0      	blx	r4
 8005b64:	6178      	str	r0, [r7, #20]

  return ret;
 8005b66:	697b      	ldr	r3, [r7, #20]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b82:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005b9c <lps22hh_from_lsb_to_hpa+0x2c>
 8005b86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	49800000 	.word	0x49800000

08005ba0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005bd0 <lps22hh_from_lsb_to_celsius+0x30>
 8005bba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bbe:	eef0 7a66 	vmov.f32	s15, s13
}
 8005bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	42c80000 	.word	0x42c80000

08005bd4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005be0:	f107 0208 	add.w	r2, r7, #8
 8005be4:	2301      	movs	r3, #1
 8005be6:	2110      	movs	r1, #16
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff91 	bl	8005b10 <lps22hh_read_reg>
 8005bee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10f      	bne.n	8005c16 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	7a3b      	ldrb	r3, [r7, #8]
 8005c00:	f362 0341 	bfi	r3, r2, #1, #1
 8005c04:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c06:	f107 0208 	add.w	r2, r7, #8
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ff96 	bl	8005b40 <lps22hh_write_reg>
 8005c14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c2c:	f107 0210 	add.w	r2, r7, #16
 8005c30:	2301      	movs	r3, #1
 8005c32:	2110      	movs	r1, #16
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ff6b 	bl	8005b10 <lps22hh_read_reg>
 8005c3a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c42:	f107 020c 	add.w	r2, r7, #12
 8005c46:	2301      	movs	r3, #1
 8005c48:	2111      	movs	r1, #17
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ff60 	bl	8005b10 <lps22hh_read_reg>
 8005c50:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	7c3b      	ldrb	r3, [r7, #16]
 8005c62:	f362 1306 	bfi	r3, r2, #4, #3
 8005c66:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c68:	f107 0210 	add.w	r2, r7, #16
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	2110      	movs	r1, #16
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff65 	bl	8005b40 <lps22hh_write_reg>
 8005c76:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d119      	bne.n	8005cb2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	7b3b      	ldrb	r3, [r7, #12]
 8005c8a:	f362 0341 	bfi	r3, r2, #1, #1
 8005c8e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	08db      	lsrs	r3, r3, #3
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	7b3b      	ldrb	r3, [r7, #12]
 8005c9c:	f362 0300 	bfi	r3, r2, #0, #1
 8005ca0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005ca2:	f107 020c 	add.w	r2, r7, #12
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	2111      	movs	r1, #17
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff ff48 	bl	8005b40 <lps22hh_write_reg>
 8005cb0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005cb2:	697b      	ldr	r3, [r7, #20]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005cc6:	f107 0208 	add.w	r2, r7, #8
 8005cca:	2301      	movs	r3, #1
 8005ccc:	2127      	movs	r1, #39	; 0x27
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff1e 	bl	8005b10 <lps22hh_read_reg>
 8005cd4:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8005cd6:	7a3b      	ldrb	r3, [r7, #8]
 8005cd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	701a      	strb	r2, [r3, #0]

  return ret;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005cf8:	f107 0208 	add.w	r2, r7, #8
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	2127      	movs	r1, #39	; 0x27
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff05 	bl	8005b10 <lps22hh_read_reg>
 8005d06:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005d08:	7a3b      	ldrb	r3, [r7, #8]
 8005d0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005d2a:	f107 0208 	add.w	r2, r7, #8
 8005d2e:	2303      	movs	r3, #3
 8005d30:	2128      	movs	r1, #40	; 0x28
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff feec 	bl	8005b10 <lps22hh_read_reg>
 8005d38:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005d3a:	7abb      	ldrb	r3, [r7, #10]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	7a7a      	ldrb	r2, [r7, #9]
 8005d4a:	441a      	add	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	7a3a      	ldrb	r2, [r7, #8]
 8005d58:	441a      	add	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	601a      	str	r2, [r3, #0]

  return ret;
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005d7c:	f107 0208 	add.w	r2, r7, #8
 8005d80:	2302      	movs	r3, #2
 8005d82:	212b      	movs	r1, #43	; 0x2b
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff fec3 	bl	8005b10 <lps22hh_read_reg>
 8005d8a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005d8c:	7a7b      	ldrb	r3, [r7, #9]
 8005d8e:	b21a      	sxth	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	7a3b      	ldrb	r3, [r7, #8]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	b21a      	sxth	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	801a      	strh	r2, [r3, #0]

  return ret;
 8005dae:	68fb      	ldr	r3, [r7, #12]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	210f      	movs	r1, #15
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fea1 	bl	8005b10 <lps22hh_read_reg>
 8005dce:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005de6:	f107 0208 	add.w	r2, r7, #8
 8005dea:	2301      	movs	r3, #1
 8005dec:	2111      	movs	r1, #17
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fe8e 	bl	8005b10 <lps22hh_read_reg>
 8005df4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	7a3b      	ldrb	r3, [r7, #8]
 8005e06:	f362 0382 	bfi	r3, r2, #2, #1
 8005e0a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e0c:	f107 0208 	add.w	r2, r7, #8
 8005e10:	2301      	movs	r3, #1
 8005e12:	2111      	movs	r1, #17
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fe93 	bl	8005b40 <lps22hh_write_reg>
 8005e1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e30:	f107 0208 	add.w	r2, r7, #8
 8005e34:	2301      	movs	r3, #1
 8005e36:	2111      	movs	r1, #17
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fe69 	bl	8005b10 <lps22hh_read_reg>
 8005e3e:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005e40:	7a3b      	ldrb	r3, [r7, #8]
 8005e42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	701a      	strb	r2, [r3, #0]

  return ret;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	460b      	mov	r3, r1
 8005e66:	72fb      	strb	r3, [r7, #11]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685c      	ldr	r4, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6898      	ldr	r0, [r3, #8]
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	7af9      	ldrb	r1, [r7, #11]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	47a0      	blx	r4
 8005e7c:	6178      	str	r0, [r7, #20]

  return ret;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd90      	pop	{r4, r7, pc}

08005e88 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	461a      	mov	r2, r3
 8005e94:	460b      	mov	r3, r1
 8005e96:	72fb      	strb	r3, [r7, #11]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681c      	ldr	r4, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6898      	ldr	r0, [r3, #8]
 8005ea4:	893b      	ldrh	r3, [r7, #8]
 8005ea6:	7af9      	ldrb	r1, [r7, #11]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	47a0      	blx	r4
 8005eac:	6178      	str	r0, [r7, #20]

  return ret;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd90      	pop	{r4, r7, pc}

08005eb8 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ece:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ee4 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	3d79db23 	.word	0x3d79db23

08005ee8 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005f14 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005f02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005f06:	eeb0 0a67 	vmov.f32	s0, s15
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	428c0000 	.word	0x428c0000

08005f18 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f2e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f4c <lsm6dsr_from_lsb_to_celsius+0x34>
 8005f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f36:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	43800000 	.word	0x43800000

08005f50 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005f5c:	f107 0208 	add.w	r2, r7, #8
 8005f60:	2301      	movs	r3, #1
 8005f62:	2110      	movs	r1, #16
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff ff77 	bl	8005e58 <lsm6dsr_read_reg>
 8005f6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10f      	bne.n	8005f92 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	7a3b      	ldrb	r3, [r7, #8]
 8005f7c:	f362 0383 	bfi	r3, r2, #2, #2
 8005f80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005f82:	f107 0208 	add.w	r2, r7, #8
 8005f86:	2301      	movs	r3, #1
 8005f88:	2110      	movs	r1, #16
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff7c 	bl	8005e88 <lsm6dsr_write_reg>
 8005f90:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005fac:	f107 030c 	add.w	r3, r7, #12
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fc54 	bl	8006860 <lsm6dsr_fsm_enable_get>
 8005fb8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 80c4 	bne.w	800614a <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005fc2:	7b3b      	ldrb	r3, [r7, #12]
 8005fc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005fca:	7b3b      	ldrb	r3, [r7, #12]
 8005fcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fd0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005fd6:	7b3b      	ldrb	r3, [r7, #12]
 8005fd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005fe2:	7b3b      	ldrb	r3, [r7, #12]
 8005fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fee:	7b3b      	ldrb	r3, [r7, #12]
 8005ff0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ffa:	7b3b      	ldrb	r3, [r7, #12]
 8005ffc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006002:	4313      	orrs	r3, r2
 8006004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006006:	7b3b      	ldrb	r3, [r7, #12]
 8006008:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800600c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800600e:	4313      	orrs	r3, r2
 8006010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006012:	7b3b      	ldrb	r3, [r7, #12]
 8006014:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800601a:	4313      	orrs	r3, r2
 800601c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800601e:	7b7b      	ldrb	r3, [r7, #13]
 8006020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006026:	4313      	orrs	r3, r2
 8006028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800602a:	7b7b      	ldrb	r3, [r7, #13]
 800602c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006032:	4313      	orrs	r3, r2
 8006034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006036:	7b7b      	ldrb	r3, [r7, #13]
 8006038:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800603c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800603e:	4313      	orrs	r3, r2
 8006040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006042:	7b7b      	ldrb	r3, [r7, #13]
 8006044:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800604a:	4313      	orrs	r3, r2
 800604c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006056:	4313      	orrs	r3, r2
 8006058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800605a:	7b7b      	ldrb	r3, [r7, #13]
 800605c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006062:	4313      	orrs	r3, r2
 8006064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006066:	7b7b      	ldrb	r3, [r7, #13]
 8006068:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800606c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800606e:	4313      	orrs	r3, r2
 8006070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006072:	7b7b      	ldrb	r3, [r7, #13]
 8006074:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800607a:	4313      	orrs	r3, r2
 800607c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800607e:	2b01      	cmp	r3, #1
 8006080:	d163      	bne.n	800614a <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006082:	f107 030b 	add.w	r3, r7, #11
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fc15 	bl	80068b8 <lsm6dsr_fsm_data_rate_get>
 800608e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d159      	bne.n	800614a <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d853      	bhi.n	8006144 <lsm6dsr_xl_data_rate_set+0x1a8>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <lsm6dsr_xl_data_rate_set+0x108>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060c7 	.word	0x080060c7
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	0800610f 	.word	0x0800610f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060be:	e045      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	75fb      	strb	r3, [r7, #23]
            break;
 80060c4:	e042      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80060cc:	2302      	movs	r3, #2
 80060ce:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060d0:	e03c      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d102      	bne.n	80060de <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80060d8:	2302      	movs	r3, #2
 80060da:	75fb      	strb	r3, [r7, #23]
            break;
 80060dc:	e036      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	75fb      	strb	r3, [r7, #23]
            break;
 80060e2:	e033      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80060ee:	e02d      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d102      	bne.n	80060fc <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80060f6:	2303      	movs	r3, #3
 80060f8:	75fb      	strb	r3, [r7, #23]
            break;
 80060fa:	e027      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d102      	bne.n	8006108 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006102:	2303      	movs	r3, #3
 8006104:	75fb      	strb	r3, [r7, #23]
            break;
 8006106:	e021      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	75fb      	strb	r3, [r7, #23]
            break;
 800610c:	e01e      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006114:	2304      	movs	r3, #4
 8006116:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006118:	e018      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d102      	bne.n	8006126 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006120:	2304      	movs	r3, #4
 8006122:	75fb      	strb	r3, [r7, #23]
            break;
 8006124:	e012      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d102      	bne.n	8006132 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800612c:	2304      	movs	r3, #4
 800612e:	75fb      	strb	r3, [r7, #23]
            break;
 8006130:	e00c      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	2b03      	cmp	r3, #3
 8006136:	d102      	bne.n	800613e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006138:	2304      	movs	r3, #4
 800613a:	75fb      	strb	r3, [r7, #23]
            break;
 800613c:	e006      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	75fb      	strb	r3, [r7, #23]
            break;
 8006142:	e003      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	75fb      	strb	r3, [r7, #23]
            break;
 8006148:	e000      	b.n	800614c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800614a:	bf00      	nop
    }
  }

  if (ret == 0)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006152:	f107 0208 	add.w	r2, r7, #8
 8006156:	2301      	movs	r3, #1
 8006158:	2110      	movs	r1, #16
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fe7c 	bl	8005e58 <lsm6dsr_read_reg>
 8006160:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	b2da      	uxtb	r2, r3
 8006170:	7a3b      	ldrb	r3, [r7, #8]
 8006172:	f362 1307 	bfi	r3, r2, #4, #4
 8006176:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006178:	f107 0208 	add.w	r2, r7, #8
 800617c:	2301      	movs	r3, #1
 800617e:	2110      	movs	r1, #16
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fe81 	bl	8005e88 <lsm6dsr_write_reg>
 8006186:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006188:	693b      	ldr	r3, [r7, #16]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80061a0:	f107 0208 	add.w	r2, r7, #8
 80061a4:	2301      	movs	r3, #1
 80061a6:	2111      	movs	r1, #17
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fe55 	bl	8005e58 <lsm6dsr_read_reg>
 80061ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	7a3b      	ldrb	r3, [r7, #8]
 80061c0:	f362 0303 	bfi	r3, r2, #0, #4
 80061c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80061c6:	f107 0208 	add.w	r2, r7, #8
 80061ca:	2301      	movs	r3, #1
 80061cc:	2111      	movs	r1, #17
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fe5a 	bl	8005e88 <lsm6dsr_write_reg>
 80061d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80061f0:	f107 030c 	add.w	r3, r7, #12
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb32 	bl	8006860 <lsm6dsr_fsm_enable_get>
 80061fc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 80c4 	bne.w	800638e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006206:	7b3b      	ldrb	r3, [r7, #12]
 8006208:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800620e:	7b3b      	ldrb	r3, [r7, #12]
 8006210:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006214:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006216:	4313      	orrs	r3, r2
 8006218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800621a:	7b3b      	ldrb	r3, [r7, #12]
 800621c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006222:	4313      	orrs	r3, r2
 8006224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006226:	7b3b      	ldrb	r3, [r7, #12]
 8006228:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800622c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800622e:	4313      	orrs	r3, r2
 8006230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006232:	7b3b      	ldrb	r3, [r7, #12]
 8006234:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800623a:	4313      	orrs	r3, r2
 800623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800623e:	7b3b      	ldrb	r3, [r7, #12]
 8006240:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006246:	4313      	orrs	r3, r2
 8006248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800624a:	7b3b      	ldrb	r3, [r7, #12]
 800624c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006252:	4313      	orrs	r3, r2
 8006254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006256:	7b3b      	ldrb	r3, [r7, #12]
 8006258:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800625c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800625e:	4313      	orrs	r3, r2
 8006260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006262:	7b7b      	ldrb	r3, [r7, #13]
 8006264:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800626a:	4313      	orrs	r3, r2
 800626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006276:	4313      	orrs	r3, r2
 8006278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006282:	4313      	orrs	r3, r2
 8006284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800628c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800628e:	4313      	orrs	r3, r2
 8006290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006292:	7b7b      	ldrb	r3, [r7, #13]
 8006294:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800629a:	4313      	orrs	r3, r2
 800629c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80062a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80062aa:	7b7b      	ldrb	r3, [r7, #13]
 80062ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80062b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80062b6:	7b7b      	ldrb	r3, [r7, #13]
 80062b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80062be:	4313      	orrs	r3, r2
 80062c0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d163      	bne.n	800638e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80062c6:	f107 030b 	add.w	r3, r7, #11
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 faf3 	bl	80068b8 <lsm6dsr_fsm_data_rate_get>
 80062d2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d159      	bne.n	800638e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d853      	bhi.n	8006388 <lsm6dsr_gy_data_rate_set+0x1a8>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <lsm6dsr_gy_data_rate_set+0x108>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	0800630b 	.word	0x0800630b
 80062f0:	08006329 	.word	0x08006329
 80062f4:	08006353 	.word	0x08006353
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80062fe:	2301      	movs	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006302:	e045      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	75fb      	strb	r3, [r7, #23]
            break;
 8006308:	e042      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006310:	2302      	movs	r3, #2
 8006312:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006314:	e03c      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800631c:	2302      	movs	r3, #2
 800631e:	75fb      	strb	r3, [r7, #23]
            break;
 8006320:	e036      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	75fb      	strb	r3, [r7, #23]
            break;
 8006326:	e033      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006332:	e02d      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d102      	bne.n	8006340 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800633a:	2303      	movs	r3, #3
 800633c:	75fb      	strb	r3, [r7, #23]
            break;
 800633e:	e027      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d102      	bne.n	800634c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006346:	2303      	movs	r3, #3
 8006348:	75fb      	strb	r3, [r7, #23]
            break;
 800634a:	e021      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	75fb      	strb	r3, [r7, #23]
            break;
 8006350:	e01e      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006358:	2304      	movs	r3, #4
 800635a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800635c:	e018      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006364:	2304      	movs	r3, #4
 8006366:	75fb      	strb	r3, [r7, #23]
            break;
 8006368:	e012      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d102      	bne.n	8006376 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006370:	2304      	movs	r3, #4
 8006372:	75fb      	strb	r3, [r7, #23]
            break;
 8006374:	e00c      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d102      	bne.n	8006382 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800637c:	2304      	movs	r3, #4
 800637e:	75fb      	strb	r3, [r7, #23]
            break;
 8006380:	e006      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	75fb      	strb	r3, [r7, #23]
            break;
 8006386:	e003      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	75fb      	strb	r3, [r7, #23]
            break;
 800638c:	e000      	b.n	8006390 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800638e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006396:	f107 0208 	add.w	r2, r7, #8
 800639a:	2301      	movs	r3, #1
 800639c:	2111      	movs	r1, #17
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fd5a 	bl	8005e58 <lsm6dsr_read_reg>
 80063a4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10f      	bne.n	80063cc <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	7a3b      	ldrb	r3, [r7, #8]
 80063b6:	f362 1307 	bfi	r3, r2, #4, #4
 80063ba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80063bc:	f107 0208 	add.w	r2, r7, #8
 80063c0:	2301      	movs	r3, #1
 80063c2:	2111      	movs	r1, #17
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fd5f 	bl	8005e88 <lsm6dsr_write_reg>
 80063ca:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80063cc:	693b      	ldr	r3, [r7, #16]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop

080063d8 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80063e4:	f107 0208 	add.w	r2, r7, #8
 80063e8:	2301      	movs	r3, #1
 80063ea:	2112      	movs	r1, #18
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fd33 	bl	8005e58 <lsm6dsr_read_reg>
 80063f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7a3b      	ldrb	r3, [r7, #8]
 8006404:	f362 1386 	bfi	r3, r2, #6, #1
 8006408:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800640a:	f107 0208 	add.w	r2, r7, #8
 800640e:	2301      	movs	r3, #1
 8006410:	2112      	movs	r1, #18
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd38 	bl	8005e88 <lsm6dsr_write_reg>
 8006418:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800641a:	68fb      	ldr	r3, [r7, #12]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800642e:	f107 0208 	add.w	r2, r7, #8
 8006432:	2301      	movs	r3, #1
 8006434:	211e      	movs	r1, #30
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fd0e 	bl	8005e58 <lsm6dsr_read_reg>
 800643c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800643e:	7a3b      	ldrb	r3, [r7, #8]
 8006440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	701a      	strb	r2, [r3, #0]

  return ret;
 800644c:	68fb      	ldr	r3, [r7, #12]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006460:	f107 0208 	add.w	r2, r7, #8
 8006464:	2301      	movs	r3, #1
 8006466:	211e      	movs	r1, #30
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fcf5 	bl	8005e58 <lsm6dsr_read_reg>
 800646e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006470:	7a3b      	ldrb	r3, [r7, #8]
 8006472:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	701a      	strb	r2, [r3, #0]

  return ret;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006492:	f107 0208 	add.w	r2, r7, #8
 8006496:	2301      	movs	r3, #1
 8006498:	211e      	movs	r1, #30
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fcdc 	bl	8005e58 <lsm6dsr_read_reg>
 80064a0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80064a2:	7a3b      	ldrb	r3, [r7, #8]
 80064a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	701a      	strb	r2, [r3, #0]

  return ret;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80064c4:	f107 0208 	add.w	r2, r7, #8
 80064c8:	2302      	movs	r3, #2
 80064ca:	2120      	movs	r1, #32
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff fcc3 	bl	8005e58 <lsm6dsr_read_reg>
 80064d2:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80064d4:	7a7b      	ldrb	r3, [r7, #9]
 80064d6:	b21a      	sxth	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	7a3b      	ldrb	r3, [r7, #8]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b21a      	sxth	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80064f6:	68fb      	ldr	r3, [r7, #12]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800650a:	f107 020c 	add.w	r2, r7, #12
 800650e:	2306      	movs	r3, #6
 8006510:	2122      	movs	r1, #34	; 0x22
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fca0 	bl	8005e58 <lsm6dsr_read_reg>
 8006518:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800651a:	7b7b      	ldrb	r3, [r7, #13]
 800651c:	b21a      	sxth	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006528:	b29b      	uxth	r3, r3
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	b29a      	uxth	r2, r3
 800652e:	7b3b      	ldrb	r3, [r7, #12]
 8006530:	b29b      	uxth	r3, r3
 8006532:	4413      	add	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	b21a      	sxth	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	3302      	adds	r3, #2
 8006542:	b212      	sxth	r2, r2
 8006544:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	3302      	adds	r3, #2
 800654a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654e:	b29b      	uxth	r3, r3
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	b29a      	uxth	r2, r3
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	b29b      	uxth	r3, r3
 8006558:	4413      	add	r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	3302      	adds	r3, #2
 8006560:	b212      	sxth	r2, r2
 8006562:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006564:	7c7a      	ldrb	r2, [r7, #17]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	3304      	adds	r3, #4
 800656a:	b212      	sxth	r2, r2
 800656c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	3304      	adds	r3, #4
 8006572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006576:	b29b      	uxth	r3, r3
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	b29a      	uxth	r2, r3
 800657c:	7c3b      	ldrb	r3, [r7, #16]
 800657e:	b29b      	uxth	r3, r3
 8006580:	4413      	add	r3, r2
 8006582:	b29a      	uxth	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	3304      	adds	r3, #4
 8006588:	b212      	sxth	r2, r2
 800658a:	801a      	strh	r2, [r3, #0]

  return ret;
 800658c:	697b      	ldr	r3, [r7, #20]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80065a0:	f107 020c 	add.w	r2, r7, #12
 80065a4:	2306      	movs	r3, #6
 80065a6:	2128      	movs	r1, #40	; 0x28
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fc55 	bl	8005e58 <lsm6dsr_read_reg>
 80065ae:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80065b0:	7b7b      	ldrb	r3, [r7, #13]
 80065b2:	b21a      	sxth	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	7b3b      	ldrb	r3, [r7, #12]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	b21a      	sxth	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80065d2:	7bfa      	ldrb	r2, [r7, #15]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	3302      	adds	r3, #2
 80065d8:	b212      	sxth	r2, r2
 80065da:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	3302      	adds	r3, #2
 80065e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	3302      	adds	r3, #2
 80065f6:	b212      	sxth	r2, r2
 80065f8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80065fa:	7c7a      	ldrb	r2, [r7, #17]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3304      	adds	r3, #4
 8006600:	b212      	sxth	r2, r2
 8006602:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	3304      	adds	r3, #4
 8006608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660c:	b29b      	uxth	r3, r3
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b29a      	uxth	r2, r3
 8006612:	7c3b      	ldrb	r3, [r7, #16]
 8006614:	b29b      	uxth	r3, r3
 8006616:	4413      	add	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	3304      	adds	r3, #4
 800661e:	b212      	sxth	r2, r2
 8006620:	801a      	strh	r2, [r3, #0]

  return ret;
 8006622:	697b      	ldr	r3, [r7, #20]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006638:	f107 0208 	add.w	r2, r7, #8
 800663c:	2301      	movs	r3, #1
 800663e:	2101      	movs	r1, #1
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff fc09 	bl	8005e58 <lsm6dsr_read_reg>
 8006646:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	b2da      	uxtb	r2, r3
 8006656:	7a3b      	ldrb	r3, [r7, #8]
 8006658:	f362 1387 	bfi	r3, r2, #6, #2
 800665c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800665e:	f107 0208 	add.w	r2, r7, #8
 8006662:	2301      	movs	r3, #1
 8006664:	2101      	movs	r1, #1
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fc0e 	bl	8005e88 <lsm6dsr_write_reg>
 800666c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800666e:	68fb      	ldr	r3, [r7, #12]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8006682:	2301      	movs	r3, #1
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	210f      	movs	r1, #15
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fbe5 	bl	8005e58 <lsm6dsr_read_reg>
 800668e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066a6:	f107 0208 	add.w	r2, r7, #8
 80066aa:	2301      	movs	r3, #1
 80066ac:	2112      	movs	r1, #18
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fbd2 	bl	8005e58 <lsm6dsr_read_reg>
 80066b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10f      	bne.n	80066dc <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	7a3b      	ldrb	r3, [r7, #8]
 80066c6:	f362 0300 	bfi	r3, r2, #0, #1
 80066ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066cc:	f107 0208 	add.w	r2, r7, #8
 80066d0:	2301      	movs	r3, #1
 80066d2:	2112      	movs	r1, #18
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fbd7 	bl	8005e88 <lsm6dsr_write_reg>
 80066da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066dc:	68fb      	ldr	r3, [r7, #12]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80066f0:	f107 0208 	add.w	r2, r7, #8
 80066f4:	2301      	movs	r3, #1
 80066f6:	2112      	movs	r1, #18
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fbad 	bl	8005e58 <lsm6dsr_read_reg>
 80066fe:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006700:	7a3b      	ldrb	r3, [r7, #8]
 8006702:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	701a      	strb	r2, [r3, #0]

  return ret;
 800670e:	68fb      	ldr	r3, [r7, #12]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006724:	f107 0208 	add.w	r2, r7, #8
 8006728:	2301      	movs	r3, #1
 800672a:	2110      	movs	r1, #16
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fb93 	bl	8005e58 <lsm6dsr_read_reg>
 8006732:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10f      	bne.n	800675a <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	7a3b      	ldrb	r3, [r7, #8]
 8006744:	f362 0341 	bfi	r3, r2, #1, #1
 8006748:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800674a:	f107 0208 	add.w	r2, r7, #8
 800674e:	2301      	movs	r3, #1
 8006750:	2110      	movs	r1, #16
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fb98 	bl	8005e88 <lsm6dsr_write_reg>
 8006758:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8006770:	f107 0208 	add.w	r2, r7, #8
 8006774:	2301      	movs	r3, #1
 8006776:	2117      	movs	r1, #23
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fb6d 	bl	8005e58 <lsm6dsr_read_reg>
 800677e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d121      	bne.n	80067ca <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	7a3b      	ldrb	r3, [r7, #8]
 8006792:	f362 0382 	bfi	r3, r2, #2, #1
 8006796:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	7a3b      	ldrb	r3, [r7, #8]
 80067a4:	f362 1304 	bfi	r3, r2, #4, #1
 80067a8:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	7a3b      	ldrb	r3, [r7, #8]
 80067b4:	f362 1347 	bfi	r3, r2, #5, #3
 80067b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 80067ba:	f107 0208 	add.w	r2, r7, #8
 80067be:	2301      	movs	r3, #1
 80067c0:	2117      	movs	r1, #23
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fb60 	bl	8005e88 <lsm6dsr_write_reg>
 80067c8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80067ca:	68fb      	ldr	r3, [r7, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80067e0:	f107 0210 	add.w	r2, r7, #16
 80067e4:	2301      	movs	r3, #1
 80067e6:	2118      	movs	r1, #24
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fb35 	bl	8005e58 <lsm6dsr_read_reg>
 80067ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d111      	bne.n	800681a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	7c3b      	ldrb	r3, [r7, #16]
 8006804:	f362 0341 	bfi	r3, r2, #1, #1
 8006808:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800680a:	f107 0210 	add.w	r2, r7, #16
 800680e:	2301      	movs	r3, #1
 8006810:	2118      	movs	r1, #24
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fb38 	bl	8005e88 <lsm6dsr_write_reg>
 8006818:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006820:	f107 020c 	add.w	r2, r7, #12
 8006824:	2301      	movs	r3, #1
 8006826:	2162      	movs	r1, #98	; 0x62
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fb15 	bl	8005e58 <lsm6dsr_read_reg>
 800682e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	b2da      	uxtb	r2, r3
 800683e:	7b3b      	ldrb	r3, [r7, #12]
 8006840:	f362 03c4 	bfi	r3, r2, #3, #2
 8006844:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006846:	f107 020c 	add.w	r2, r7, #12
 800684a:	2301      	movs	r3, #1
 800684c:	2162      	movs	r1, #98	; 0x62
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fb1a 	bl	8005e88 <lsm6dsr_write_reg>
 8006854:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006856:	697b      	ldr	r3, [r7, #20]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800686a:	2102      	movs	r1, #2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fedd 	bl	800662c <lsm6dsr_mem_bank_set>
 8006872:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800687a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800687c:	2301      	movs	r3, #1
 800687e:	2146      	movs	r1, #70	; 0x46
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fae9 	bl	8005e58 <lsm6dsr_read_reg>
 8006886:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8006892:	2301      	movs	r3, #1
 8006894:	2147      	movs	r1, #71	; 0x47
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fade 	bl	8005e58 <lsm6dsr_read_reg>
 800689c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80068a4:	2100      	movs	r1, #0
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fec0 	bl	800662c <lsm6dsr_mem_bank_set>
 80068ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80068c2:	2102      	movs	r1, #2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff feb1 	bl	800662c <lsm6dsr_mem_bank_set>
 80068ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d107      	bne.n	80068e2 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80068d2:	f107 0208 	add.w	r2, r7, #8
 80068d6:	2301      	movs	r3, #1
 80068d8:	215f      	movs	r1, #95	; 0x5f
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fabc 	bl	8005e58 <lsm6dsr_read_reg>
 80068e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d104      	bne.n	80068f2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80068e8:	2100      	movs	r1, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fe9e 	bl	800662c <lsm6dsr_mem_bank_set>
 80068f0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80068f2:	7a3b      	ldrb	r3, [r7, #8]
 80068f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d81a      	bhi.n	8006934 <lsm6dsr_fsm_data_rate_get+0x7c>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006915 	.word	0x08006915
 8006908:	0800691d 	.word	0x0800691d
 800690c:	08006925 	.word	0x08006925
 8006910:	0800692d 	.word	0x0800692d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
      break;
 800691a:	e00f      	b.n	800693c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
      break;
 8006922:	e00b      	b.n	800693c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2202      	movs	r2, #2
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	e007      	b.n	800693c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2203      	movs	r2, #3
 8006930:	701a      	strb	r2, [r3, #0]
      break;
 8006932:	e003      	b.n	800693c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
      break;
 800693a:	bf00      	nop
  }

  return ret;
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop

08006948 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	4611      	mov	r1, r2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8006996:	2309      	movs	r3, #9
 8006998:	e025      	b.n	80069e6 <_ZN10IridiumSBD5sleepEv+0x62>

   if (this->useSerial && (this->sleepPin == -1))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7c5b      	ldrb	r3, [r3, #17]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <_ZN10IridiumSBD5sleepEv+0x2c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d101      	bne.n	80069b0 <_ZN10IridiumSBD5sleepEv+0x2c>
      return ISBD_NO_SLEEP_PIN;
 80069ac:	230b      	movs	r3, #11
 80069ae:	e01a      	b.n	80069e6 <_ZN10IridiumSBD5sleepEv+0x62>

   this->reentrant = true;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSleep();
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f8d3 	bl	8006b64 <_ZN10IridiumSBD13internalSleepEv>
 80069be:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   if (ret == ISBD_SUCCESS)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <_ZN10IridiumSBD5sleepEv+0x60>
   {
      if (this->useSerial)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7c5b      	ldrb	r3, [r3, #17]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <_ZN10IridiumSBD5sleepEv+0x58>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f976 	bl	8006cc8 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f8d2 	bl	8006b88 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7c5b      	ldrb	r3, [r3, #17]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006a04:	4918      	ldr	r1, [pc, #96]	; (8006a68 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f96c 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006a0c:	e028      	b.n	8006a60 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f986 	bl	8006d20 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006a30:	e00f      	b.n	8006a52 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006a38:	b25a      	sxtb	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	43db      	mvns	r3, r3
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	4013      	ands	r3, r2
 8006a48:	b25b      	sxtb	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f999 	bl	8006d92 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08017c04 	.word	0x08017c04

08006a6c <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c5b      	ldrb	r3, [r3, #17]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006a80:	4918      	ldr	r1, [pc, #96]	; (8006ae4 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f92e 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006a88:	e028      	b.n	8006adc <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f948 	bl	8006d20 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006aac:	e00f      	b.n	8006ace <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006ab4:	b25a      	sxtb	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	b25b      	sxtb	r3, r3
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f95b 	bl	8006d92 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	08017c9c 	.word	0x08017c9c

08006ae8 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7c5b      	ldrb	r3, [r3, #17]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006afc:	4918      	ldr	r1, [pc, #96]	; (8006b60 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8f0 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006b04:	e028      	b.n	8006b58 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f90a 	bl	8006d20 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006b28:	e00f      	b.n	8006b4a <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006b30:	b25a      	sxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	4013      	ands	r3, r2
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f91d 	bl	8006d92 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	08017ce4 	.word	0x08017ce4

08006b64 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8006b76:	230a      	movs	r3, #10
 8006b78:	e000      	b.n	8006b7c <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f083 0301 	eor.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7c5b      	ldrb	r3, [r3, #17]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d010      	beq.n	8006bcc <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d04a      	beq.n	8006c4a <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f84c 	bl	8006c5c <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d017      	beq.n	8006c02 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8006bd2:	4920      	ldr	r1, [pc, #128]	; (8006c54 <_ZN10IridiumSBD5powerEb+0xcc>)
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f885 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c5b      	ldrb	r3, [r3, #17]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f847 	bl	8006c78 <_ZN10IridiumSBD11setSleepPinEh>
 8006bea:	e003      	b.n	8006bf4 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ff7a 	bl	8006ae8 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8006bf4:	f000 fef2 	bl	80079dc <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006c00:	e024      	b.n	8006c4c <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8006c02:	f000 feeb 	bl	80079dc <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006c18:	d205      	bcs.n	8006c26 <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fee7 	bl	80079f4 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8006c26:	490c      	ldr	r1, [pc, #48]	; (8006c58 <_ZN10IridiumSBD5powerEb+0xd0>)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f85b 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7c5b      	ldrb	r3, [r3, #17]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8006c36:	2100      	movs	r1, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f81d 	bl	8006c78 <_ZN10IridiumSBD11setSleepPinEh>
 8006c3e:	e005      	b.n	8006c4c <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff50 	bl	8006ae8 <_ZN10IridiumSBD10enable9603Eb>
 8006c48:	e000      	b.n	8006c4c <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8006c4a:	bf00      	nop
      }
   }
}
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08018174 	.word	0x08018174
 8006c58:	0801818c 	.word	0x0801818c

08006c5c <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8006c64:	4903      	ldr	r1, [pc, #12]	; (8006c74 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f83c 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	080181a4 	.word	0x080181a4

08006c78 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8006c84:	2201      	movs	r2, #1
 8006c86:	2108      	movs	r1, #8
 8006c88:	480b      	ldr	r0, [pc, #44]	; (8006cb8 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8006c8a:	f001 fdbf 	bl	800880c <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8006c8e:	490b      	ldr	r1, [pc, #44]	; (8006cbc <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f827 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d104      	bne.n	8006ca6 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8006c9c:	4908      	ldr	r1, [pc, #32]	; (8006cc0 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f820 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8006ca4:	e003      	b.n	8006cae <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8006ca6:	4907      	ldr	r1, [pc, #28]	; (8006cc4 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f81b 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40020800 	.word	0x40020800
 8006cbc:	080181d0 	.word	0x080181d0
 8006cc0:	080181ec 	.word	0x080181ec
 8006cc4:	080181f4 	.word	0x080181f4

08006cc8 <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8006cd0:	4903      	ldr	r1, [pc, #12]	; (8006ce0 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f806 	bl	8006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	0801821c 	.word	0x0801821c

08006ce4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	60fa      	str	r2, [r7, #12]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fe30 	bl	800696c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8006d0c:	e7f1      	b.n	8006cf2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8006d0e:	bf00      	nop

   //TODO
   this->print((char*) str);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6838      	ldr	r0, [r7, #0]
 8006d16:	4798      	blx	r3
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7c1b      	ldrb	r3, [r3, #16]
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 f9a8 	bl	8007088 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2110      	movs	r1, #16
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fe02 	bl	8006948 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f9e7 	bl	800711c <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68d8      	ldr	r0, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7c1b      	ldrb	r3, [r3, #16]
 8006d56:	2201      	movs	r2, #1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f000 f982 	bl	8007062 <_ZN7TwoWire11requestFromEhh>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	4603      	mov	r3, r0
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7c1b      	ldrb	r3, [r3, #16]
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f000 f96d 	bl	8007088 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2110      	movs	r1, #16
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fdc7 	bl	8006948 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	78f9      	ldrb	r1, [r7, #3]
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f9a3 	bl	800711c <_ZN7TwoWire15endTransmissionEv>
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	; 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

	this->print((char*) "Iridium 9603N Deinit\r\n");
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4820      	ldr	r0, [pc, #128]	; (8006e70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x90>)
 8006dee:	4798      	blx	r3

	// Power down the modem
	this->print((char*) "\tPutting the 9603N to sleep...");
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	481f      	ldr	r0, [pc, #124]	; (8006e74 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x94>)
 8006df6:	4798      	blx	r3
	int err = this->sleep();
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fdc3 	bl	8006984 <_ZN10IridiumSBD5sleepEv>
 8006dfe:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x44>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8006e06:	f107 0308 	add.w	r3, r7, #8
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0c:	491a      	ldr	r1, [pc, #104]	; (8006e78 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x98>)
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f00b ff52 	bl	8012cb8 <siprintf>
		this->print((char*) str);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f107 0208 	add.w	r2, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
		return false;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e020      	b.n	8006e66 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x86>
	}
	this->print((char*) "OK\r\n");
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4814      	ldr	r0, [pc, #80]	; (8006e7c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8006e2a:	4798      	blx	r3

	// Disable 9603N power
	this->print((char*) "\tDisabling 9603N power...");
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4813      	ldr	r0, [pc, #76]	; (8006e80 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa0>)
 8006e32:	4798      	blx	r3
	this->enable9603Npower(false);
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fe18 	bl	8006a6c <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	480e      	ldr	r0, [pc, #56]	; (8006e7c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8006e42:	4798      	blx	r3

	// Disable the supercapacitor charger
	this->print((char*) "\tDisabling the supercapacitor charger...");
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	480e      	ldr	r0, [pc, #56]	; (8006e84 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa4>)
 8006e4a:	4798      	blx	r3
	this->enableSuperCapCharger(false);
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fdce 	bl	80069f0 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4808      	ldr	r0, [pc, #32]	; (8006e7c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 8006e5a:	4798      	blx	r3

	this->print((char*) "\tIridium successfully shutdown\r\n");
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4809      	ldr	r0, [pc, #36]	; (8006e88 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa8>)
 8006e62:	4798      	blx	r3
	return true;
 8006e64:	2301      	movs	r3, #1
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	08018450 	.word	0x08018450
 8006e74:	08018468 	.word	0x08018468
 8006e78:	08018488 	.word	0x08018488
 8006e7c:	08017bd4 	.word	0x08017bd4
 8006e80:	080184a4 	.word	0x080184a4
 8006e84:	080184c0 	.word	0x080184c0
 8006e88:	080184ec 	.word	0x080184ec

08006e8c <MRT_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Iridium_Destructor(){
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <MRT_Iridium_Destructor+0x1c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <MRT_Iridium_Destructor+0x12>
		E_T = NULL;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <MRT_Iridium_Destructor+0x1c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
	}
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	200003e0 	.word	0x200003e0

08006eac <MRT_Iridium_Deinit>:
	iridium_handler.getTime = &MRT_Iridium_getTime;
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
	return iridium_handler;
}

bool MRT_Iridium_Deinit(void){
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <MRT_Iridium_Deinit+0x2c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff ff92 	bl	8006de0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	bf14      	ite	ne
 8006ec2:	2301      	movne	r3, #1
 8006ec4:	2300      	moveq	r3, #0
 8006ec6:	71fb      	strb	r3, [r7, #7]
	MRT_Iridium_Destructor();
 8006ec8:	f7ff ffe0 	bl	8006e8c <MRT_Iridium_Destructor>
	return b;
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200003e0 	.word	0x200003e0

08006edc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bf14      	ite	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	2300      	moveq	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00e      	beq.n	8006f1e <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	4790      	blx	r2
 8006f14:	4602      	mov	r2, r0
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	4413      	add	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006f1c:	e7e6      	b.n	8006eec <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8006f1e:	697b      	ldr	r3, [r7, #20]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	4a06      	ldr	r2, [pc, #24]	; (8006f4c <_ZN5PrintC1Ev+0x24>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	605a      	str	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	08018bbc 	.word	0x08018bbc

08006f50 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff ffe4 	bl	8006f28 <_ZN5PrintC1Ev>
 8006f60:	4a05      	ldr	r2, [pc, #20]	; (8006f78 <_ZN6StreamC1Ev+0x28>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f6c:	609a      	str	r2, [r3, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	08018bec 	.word	0x08018bec

08006f7c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ffe1 	bl	8006f50 <_ZN6StreamC1Ev>
 8006f8e:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3390      	adds	r3, #144	; 0x90
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f00a fe0a 	bl	8011bbc <memset>
  rxBufferIndex = 0;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08018bcc 	.word	0x08018bcc

08006fec <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	70fb      	strb	r3, [r7, #3]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70bb      	strb	r3, [r7, #2]
 8007002:	4613      	mov	r3, r2
 8007004:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fc24 	bl	8007854 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 800700c:	78bb      	ldrb	r3, [r7, #2]
 800700e:	2b20      	cmp	r3, #32
 8007010:	d901      	bls.n	8007016 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8007012:	2320      	movs	r3, #32
 8007014:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	b2d9      	uxtb	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8007022:	78b8      	ldrb	r0, [r7, #2]
 8007024:	787b      	ldrb	r3, [r7, #1]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4603      	mov	r3, r0
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9cf 	bl	80073ce <_ZN7TwoWire15i2c_master_readEhPchh>
 8007030:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	da02      	bge.n	800703e <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
 800703c:	e001      	b.n	8007042 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fbcc 	bl	80077f0 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
 800706e:	4613      	mov	r3, r2
 8007070:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8007072:	78ba      	ldrb	r2, [r7, #2]
 8007074:	78f9      	ldrb	r1, [r7, #3]
 8007076:	2301      	movs	r3, #1
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ffb7 	bl	8006fec <_ZN7TwoWire11requestFromEhhh>
 800707e:	4603      	mov	r3, r0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fbc2 	bl	8007854 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7c1b      	ldrb	r3, [r3, #16]
 80070d4:	0059      	lsls	r1, r3, #1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f103 0211 	add.w	r2, r3, #17
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070e2:	4618      	mov	r0, r3
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	4603      	mov	r3, r0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa00 	bl	80074f0 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fb6f 	bl	80077f0 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8007124:	2101      	movs	r1, #1
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff ffc9 	bl	80070be <_ZN7TwoWire15endTransmissionEh>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01d      	beq.n	8007188 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007152:	2b1f      	cmp	r3, #31
 8007154:	d901      	bls.n	800715a <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8007156:	2300      	movs	r3, #0
 8007158:	e028      	b.n	80071ac <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007160:	4619      	mov	r1, r3
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	440b      	add	r3, r1
 8007168:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007170:	3301      	adds	r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007186:	e010      	b.n	80071aa <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb63 	bl	8007854 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800718e:	1cfb      	adds	r3, r7, #3
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa95 	bl	80076c4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fb28 	bl	80077f0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	333c      	adds	r3, #60	; 0x3c
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 ffc7 	bl	8009138 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80071aa:	2301      	movs	r3, #1
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d013      	beq.n	80071f2 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d21e      	bcs.n	8007214 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	440a      	add	r2, r1
 80071e2:	7812      	ldrb	r2, [r2, #0]
 80071e4:	4611      	mov	r1, r2
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3301      	adds	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e7ed      	b.n	80071ce <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fb2e 	bl	8007854 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fa60 	bl	80076c4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 faf3 	bl	80077f0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	333c      	adds	r3, #60	; 0x3c
 800720e:	4618      	mov	r0, r3
 8007210:	f001 ff92 	bl	8009138 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8007214:	687b      	ldr	r3, [r7, #4]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	1ad3      	subs	r3, r2, r3
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  int value = -1;
 800724e:	f04f 33ff 	mov.w	r3, #4294967295
 8007252:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	429a      	cmp	r2, r3
 8007266:	bf34      	ite	cc
 8007268:	2301      	movcc	r3, #1
 800726a:	2300      	movcs	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d012      	beq.n	8007298 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007284:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3301      	adds	r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  int value = -1;
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bf34      	ite	cc
 80072c8:	2301      	movcc	r3, #1
 80072ca:	2300      	movcs	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80072e6:	68fb      	ldr	r3, [r7, #12]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800731e:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8007320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007324:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	bf0c      	ite	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	2300      	movne	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	60fa      	str	r2, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf0c      	ite	eq
 8007348:	2301      	moveq	r3, #1
 800734a:	2300      	movne	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0e9      	beq.n	8007326 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8007352:	2301      	movs	r3, #1
 8007354:	e021      	b.n	800739a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8007362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007366:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1e5a      	subs	r2, r3, #1
 8007384:	60fa      	str	r2, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0e9      	beq.n	8007368 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b2:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

    return 0;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b08a      	sub	sp, #40	; 0x28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	461a      	mov	r2, r3
 80073da:	460b      	mov	r3, r1
 80073dc:	72fb      	strb	r3, [r7, #11]
 80073de:	4613      	mov	r3, r2
 80073e0:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ff8d 	bl	8007308 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80073ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b01      	cmp	r3, #1
 8007400:	bf14      	ite	ne
 8007402:	2301      	movne	r3, #1
 8007404:	2300      	moveq	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	3b01      	subs	r3, #1
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1ed      	bne.n	80073f4 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e064      	b.n	80074e8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800742c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b02      	cmp	r3, #2
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	3b01      	subs	r3, #1
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ed      	bne.n	8007432 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	e045      	b.n	80074e8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8007472:	2300      	movs	r3, #0
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	7abb      	ldrb	r3, [r7, #10]
 8007478:	3b01      	subs	r3, #1
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	429a      	cmp	r2, r3
 800747e:	da17      	bge.n	80074b0 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	2200      	movs	r2, #0
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f8a4 	bl	80075d6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800748e:	61b8      	str	r0, [r7, #24]
        if(ret)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	e025      	b.n	80074e8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800749c:	6979      	ldr	r1, [r7, #20]
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	b2ca      	uxtb	r2, r1
 80074a6:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	3301      	adds	r3, #1
 80074ac:	623b      	str	r3, [r7, #32]
 80074ae:	e7e2      	b.n	8007476 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 80074b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff ff74 	bl	80073a6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80074be:	f107 0314 	add.w	r3, r7, #20
 80074c2:	2201      	movs	r2, #1
 80074c4:	4619      	mov	r1, r3
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f885 	bl	80075d6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 80074cc:	61b8      	str	r0, [r7, #24]
    if(ret)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	e006      	b.n	80074e8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	b2ca      	uxtb	r2, r1
 80074e4:	701a      	strb	r2, [r3, #0]

    return length;
 80074e6:	7abb      	ldrb	r3, [r7, #10]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff feff 	bl	8007308 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800750a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800750e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b01      	cmp	r3, #1
 800751c:	bf14      	ite	ne
 800751e:	2301      	movne	r3, #1
 8007520:	2300      	moveq	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d007      	beq.n	8007538 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3b01      	subs	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ed      	bne.n	8007510 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8007534:	2304      	movs	r3, #4
 8007536:	e04a      	b.n	80075ce <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8007544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007548:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b02      	cmp	r3, #2
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3b01      	subs	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1ed      	bne.n	800754a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800756e:	2302      	movs	r3, #2
 8007570:	e02d      	b.n	80075ce <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	da15      	bge.n	80075c0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f85a 	bl	8007658 <_ZN7TwoWire21i2c_master_byte_writeEi>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e00a      	b.n	80075ce <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e7e5      	b.n	800758c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff feed 	bl	80073a6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b087      	sub	sp, #28
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	e005      	b.n	8007608 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8007608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800760c:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	617a      	str	r2, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0e9      	beq.n	800760e <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800763a:	f04f 33ff 	mov.w	r3, #4294967295
 800763e:	e005      	b.n	800764c <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	461a      	mov	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	601a      	str	r2, [r3, #0]

    return 0;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8007672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007676:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d008      	beq.n	8007698 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007690:	2b04      	cmp	r3, #4
 8007692:	d001      	beq.n	8007698 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1e5a      	subs	r2, r3, #1
 80076a2:	60fa      	str	r2, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf0c      	ite	eq
 80076a8:	2301      	moveq	r3, #1
 80076aa:	2300      	movne	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0e2      	beq.n	8007678 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 80076b6:	2301      	movs	r3, #1
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d8:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dd41      	ble.n	8007764 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80076e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076e4:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	bf14      	ite	ne
 80076f4:	2301      	movne	r3, #1
 80076f6:	2300      	moveq	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3b01      	subs	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1ed      	bne.n	80076e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	e068      	b.n	80077e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	60ba      	str	r2, [r7, #8]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	611a      	str	r2, [r3, #16]
        length--;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3b01      	subs	r3, #1
 8007722:	607b      	str	r3, [r7, #4]
        size++;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	3301      	adds	r3, #1
 8007728:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d104      	bne.n	8007742 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8007742:	2300      	movs	r3, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0c8      	beq.n	80076da <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	60ba      	str	r2, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	611a      	str	r2, [r3, #16]
            length--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3b01      	subs	r3, #1
 800775a:	607b      	str	r3, [r7, #4]
            size++;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	3301      	adds	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8007762:	e7ba      	b.n	80076da <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8007764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007768:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007778:	bf14      	ite	ne
 800777a:	2301      	movne	r3, #1
 800777c:	2300      	moveq	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3b01      	subs	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ec      	bne.n	800776a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	e025      	b.n	80077e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800779e:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80077a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077a4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1ed      	bne.n	80077a6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e008      	b.n	80077e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80077e0:	69bb      	ldr	r3, [r7, #24]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3724      	adds	r7, #36	; 0x24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	4a12      	ldr	r2, [pc, #72]	; (8007848 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d106      	bne.n	8007810 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8007802:	2049      	movs	r0, #73	; 0x49
 8007804:	f000 fe22 	bl	800844c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8007808:	2048      	movs	r0, #72	; 0x48
 800780a:	f000 fe1f 	bl	800844c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800780e:	e016      	b.n	800783e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d106      	bne.n	8007828 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800781a:	2022      	movs	r0, #34	; 0x22
 800781c:	f000 fe16 	bl	800844c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007820:	2021      	movs	r0, #33	; 0x21
 8007822:	f000 fe13 	bl	800844c <HAL_NVIC_EnableIRQ>
}
 8007826:	e00a      	b.n	800783e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782c:	4a08      	ldr	r2, [pc, #32]	; (8007850 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d105      	bne.n	800783e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007832:	2020      	movs	r0, #32
 8007834:	f000 fe0a 	bl	800844c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007838:	201f      	movs	r0, #31
 800783a:	f000 fe07 	bl	800844c <HAL_NVIC_EnableIRQ>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40005c00 	.word	0x40005c00
 800784c:	40005800 	.word	0x40005800
 8007850:	40005400 	.word	0x40005400

08007854 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007860:	4a12      	ldr	r2, [pc, #72]	; (80078ac <_ZN7TwoWire16disableInterruptEv+0x58>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d106      	bne.n	8007874 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8007866:	2049      	movs	r0, #73	; 0x49
 8007868:	f000 fdfe 	bl	8008468 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800786c:	2048      	movs	r0, #72	; 0x48
 800786e:	f000 fdfb 	bl	8008468 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007872:	e016      	b.n	80078a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	4a0d      	ldr	r2, [pc, #52]	; (80078b0 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d106      	bne.n	800788c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800787e:	2022      	movs	r0, #34	; 0x22
 8007880:	f000 fdf2 	bl	8008468 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007884:	2021      	movs	r0, #33	; 0x21
 8007886:	f000 fdef 	bl	8008468 <HAL_NVIC_DisableIRQ>
}
 800788a:	e00a      	b.n	80078a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d105      	bne.n	80078a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8007896:	2020      	movs	r0, #32
 8007898:	f000 fde6 	bl	8008468 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800789c:	201f      	movs	r0, #31
 800789e:	f000 fde3 	bl	8008468 <HAL_NVIC_DisableIRQ>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40005c00 	.word	0x40005c00
 80078b0:	40005800 	.word	0x40005800
 80078b4:	40005400 	.word	0x40005400

080078b8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d110      	bne.n	80078ea <_Z41__static_initialization_and_destruction_0ii+0x32>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d10b      	bne.n	80078ea <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80078d2:	4908      	ldr	r1, [pc, #32]	; (80078f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80078d4:	4808      	ldr	r0, [pc, #32]	; (80078f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80078d6:	f7ff fb51 	bl	8006f7c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80078da:	4908      	ldr	r1, [pc, #32]	; (80078fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80078dc:	4808      	ldr	r0, [pc, #32]	; (8007900 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80078de:	f7ff fb4d 	bl	8006f7c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80078e2:	4908      	ldr	r1, [pc, #32]	; (8007904 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80078e4:	4808      	ldr	r0, [pc, #32]	; (8007908 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80078e6:	f7ff fb49 	bl	8006f7c <_ZN7TwoWireC1EP11I2C_TypeDef>
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40005400 	.word	0x40005400
 80078f8:	200003e4 	.word	0x200003e4
 80078fc:	40005800 	.word	0x40005800
 8007900:	2000049c 	.word	0x2000049c
 8007904:	40005c00 	.word	0x40005c00
 8007908:	20000554 	.word	0x20000554

0800790c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
 8007910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007914:	2001      	movs	r0, #1
 8007916:	f7ff ffcf 	bl	80078b8 <_Z41__static_initialization_and_destruction_0ii>
 800791a:	bd80      	pop	{r7, pc}

0800791c <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <MRT_radio_tx+0x1c>)
 8007926:	f7f9 fb8f 	bl	8001048 <print>
	println(buffer);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7f9 fb6e 	bl	800100c <println>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	08018a50 	.word	0x08018a50

0800793c <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8007940:	4803      	ldr	r0, [pc, #12]	; (8007950 <MRT_radio_Init+0x14>)
 8007942:	f7f9 fb63 	bl	800100c <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 8007946:	4803      	ldr	r0, [pc, #12]	; (8007954 <MRT_radio_Init+0x18>)
 8007948:	f7f9 fb60 	bl	800100c <println>
	#endif
}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08018a74 	.word	0x08018a74
 8007954:	08018a84 	.word	0x08018a84

08007958 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 800795c:	f7ff ffee 	bl	800793c <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 8007960:	4802      	ldr	r0, [pc, #8]	; (800796c <MRT_TELEMETRY_Init+0x14>)
 8007962:	f002 f837 	bl	80099d4 <HAL_IWDG_Refresh>
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20005b64 	.word	0x20005b64

08007970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <HAL_Init+0x40>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a0d      	ldr	r2, [pc, #52]	; (80079b0 <HAL_Init+0x40>)
 800797a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800797e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_Init+0x40>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a0a      	ldr	r2, [pc, #40]	; (80079b0 <HAL_Init+0x40>)
 8007986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800798a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800798c:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <HAL_Init+0x40>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a07      	ldr	r2, [pc, #28]	; (80079b0 <HAL_Init+0x40>)
 8007992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007998:	2003      	movs	r0, #3
 800799a:	f000 fd30 	bl	80083fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800799e:	2000      	movs	r0, #0
 80079a0:	f7fb fb6c 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079a4:	f7fb fb3e 	bl	8003024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40023c00 	.word	0x40023c00

080079b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <HAL_IncTick+0x20>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <HAL_IncTick+0x24>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4413      	add	r3, r2
 80079c4:	4a04      	ldr	r2, [pc, #16]	; (80079d8 <HAL_IncTick+0x24>)
 80079c6:	6013      	str	r3, [r2, #0]
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	200000b4 	.word	0x200000b4
 80079d8:	20006000 	.word	0x20006000

080079dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
  return uwTick;
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <HAL_GetTick+0x14>)
 80079e2:	681b      	ldr	r3, [r3, #0]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20006000 	.word	0x20006000

080079f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079fc:	f7ff ffee 	bl	80079dc <HAL_GetTick>
 8007a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d005      	beq.n	8007a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_Delay+0x44>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a1a:	bf00      	nop
 8007a1c:	f7ff ffde 	bl	80079dc <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d8f7      	bhi.n	8007a1c <HAL_Delay+0x28>
  {
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200000b4 	.word	0x200000b4

08007a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e033      	b.n	8007aba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7f9 fd40 	bl	80014e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d118      	bne.n	8007aac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a82:	f023 0302 	bic.w	r3, r3, #2
 8007a86:	f043 0202 	orr.w	r2, r3, #2
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fae8 	bl	8008064 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8007aaa:	e001      	b.n	8007ab0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_ADC_Start+0x1a>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e0b2      	b.n	8007c44 <HAL_ADC_Start+0x180>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d018      	beq.n	8007b26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007b04:	4b52      	ldr	r3, [pc, #328]	; (8007c50 <HAL_ADC_Start+0x18c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a52      	ldr	r2, [pc, #328]	; (8007c54 <HAL_ADC_Start+0x190>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	0c9a      	lsrs	r2, r3, #18
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007b18:	e002      	b.n	8007b20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1f9      	bne.n	8007b1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d17a      	bne.n	8007c2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b3c:	f023 0301 	bic.w	r3, r3, #1
 8007b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	d106      	bne.n	8007b82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b78:	f023 0206 	bic.w	r2, r3, #6
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	645a      	str	r2, [r3, #68]	; 0x44
 8007b80:	e002      	b.n	8007b88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b90:	4b31      	ldr	r3, [pc, #196]	; (8007c58 <HAL_ADC_Start+0x194>)
 8007b92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d12a      	bne.n	8007c00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2b      	ldr	r2, [pc, #172]	; (8007c5c <HAL_ADC_Start+0x198>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d015      	beq.n	8007be0 <HAL_ADC_Start+0x11c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a29      	ldr	r2, [pc, #164]	; (8007c60 <HAL_ADC_Start+0x19c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d105      	bne.n	8007bca <HAL_ADC_Start+0x106>
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <HAL_ADC_Start+0x194>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <HAL_ADC_Start+0x1a0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d136      	bne.n	8007c42 <HAL_ADC_Start+0x17e>
 8007bd4:	4b20      	ldr	r3, [pc, #128]	; (8007c58 <HAL_ADC_Start+0x194>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d130      	bne.n	8007c42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d129      	bne.n	8007c42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007bfc:	609a      	str	r2, [r3, #8]
 8007bfe:	e020      	b.n	8007c42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <HAL_ADC_Start+0x198>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d11b      	bne.n	8007c42 <HAL_ADC_Start+0x17e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d114      	bne.n	8007c42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c26:	609a      	str	r2, [r3, #8]
 8007c28:	e00b      	b.n	8007c42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f043 0210 	orr.w	r2, r3, #16
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	f043 0201 	orr.w	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000088 	.word	0x20000088
 8007c54:	431bde83 	.word	0x431bde83
 8007c58:	40012300 	.word	0x40012300
 8007c5c:	40012000 	.word	0x40012000
 8007c60:	40012100 	.word	0x40012100
 8007c64:	40012200 	.word	0x40012200

08007c68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_ADC_Stop+0x16>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e021      	b.n	8007cc2 <HAL_ADC_Stop+0x5a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	f043 0201 	orr.w	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cea:	d113      	bne.n	8007d14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfa:	d10b      	bne.n	8007d14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e063      	b.n	8007ddc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007d14:	f7ff fe62 	bl	80079dc <HAL_GetTick>
 8007d18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007d1a:	e021      	b.n	8007d60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d01d      	beq.n	8007d60 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_ADC_PollForConversion+0x6c>
 8007d2a:	f7ff fe57 	bl	80079dc <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d212      	bcs.n	8007d60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d00b      	beq.n	8007d60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	f043 0204 	orr.w	r2, r3, #4
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e03d      	b.n	8007ddc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d1d6      	bne.n	8007d1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f06f 0212 	mvn.w	r2, #18
 8007d76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d123      	bne.n	8007dda <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11f      	bne.n	8007dda <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d111      	bne.n	8007dda <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	f043 0201 	orr.w	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_ADC_ConfigChannel+0x1c>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e113      	b.n	8008044 <HAL_ADC_ConfigChannel+0x244>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d925      	bls.n	8007e78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68d9      	ldr	r1, [r3, #12]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	3b1e      	subs	r3, #30
 8007e42:	2207      	movs	r2, #7
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	43da      	mvns	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	400a      	ands	r2, r1
 8007e50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68d9      	ldr	r1, [r3, #12]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4618      	mov	r0, r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	4403      	add	r3, r0
 8007e6a:	3b1e      	subs	r3, #30
 8007e6c:	409a      	lsls	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	e022      	b.n	8007ebe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6919      	ldr	r1, [r3, #16]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	4613      	mov	r3, r2
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4413      	add	r3, r2
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	43da      	mvns	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	400a      	ands	r2, r1
 8007e9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4618      	mov	r0, r3
 8007eae:	4603      	mov	r3, r0
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	4403      	add	r3, r0
 8007eb4:	409a      	lsls	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d824      	bhi.n	8007f10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3b05      	subs	r3, #5
 8007ed8:	221f      	movs	r2, #31
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	43da      	mvns	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	400a      	ands	r2, r1
 8007ee6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	3b05      	subs	r3, #5
 8007f02:	fa00 f203 	lsl.w	r2, r0, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8007f0e:	e04c      	b.n	8007faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b0c      	cmp	r3, #12
 8007f16:	d824      	bhi.n	8007f62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	3b23      	subs	r3, #35	; 0x23
 8007f2a:	221f      	movs	r2, #31
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	43da      	mvns	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	400a      	ands	r2, r1
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	4618      	mov	r0, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	3b23      	subs	r3, #35	; 0x23
 8007f54:	fa00 f203 	lsl.w	r2, r0, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f60:	e023      	b.n	8007faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	3b41      	subs	r3, #65	; 0x41
 8007f74:	221f      	movs	r2, #31
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43da      	mvns	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	400a      	ands	r2, r1
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4618      	mov	r0, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3b41      	subs	r3, #65	; 0x41
 8007f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007faa:	4b29      	ldr	r3, [pc, #164]	; (8008050 <HAL_ADC_ConfigChannel+0x250>)
 8007fac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a28      	ldr	r2, [pc, #160]	; (8008054 <HAL_ADC_ConfigChannel+0x254>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d10f      	bne.n	8007fd8 <HAL_ADC_ConfigChannel+0x1d8>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b12      	cmp	r3, #18
 8007fbe:	d10b      	bne.n	8007fd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_ADC_ConfigChannel+0x254>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d12b      	bne.n	800803a <HAL_ADC_ConfigChannel+0x23a>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1c      	ldr	r2, [pc, #112]	; (8008058 <HAL_ADC_ConfigChannel+0x258>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <HAL_ADC_ConfigChannel+0x1f4>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b11      	cmp	r3, #17
 8007ff2:	d122      	bne.n	800803a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a11      	ldr	r2, [pc, #68]	; (8008058 <HAL_ADC_ConfigChannel+0x258>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d111      	bne.n	800803a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008016:	4b11      	ldr	r3, [pc, #68]	; (800805c <HAL_ADC_ConfigChannel+0x25c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a11      	ldr	r2, [pc, #68]	; (8008060 <HAL_ADC_ConfigChannel+0x260>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	0c9a      	lsrs	r2, r3, #18
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800802c:	e002      	b.n	8008034 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3b01      	subs	r3, #1
 8008032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1f9      	bne.n	800802e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	40012300 	.word	0x40012300
 8008054:	40012000 	.word	0x40012000
 8008058:	10000012 	.word	0x10000012
 800805c:	20000088 	.word	0x20000088
 8008060:	431bde83 	.word	0x431bde83

08008064 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800806c:	4b79      	ldr	r3, [pc, #484]	; (8008254 <ADC_Init+0x1f0>)
 800806e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	431a      	orrs	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6859      	ldr	r1, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	021a      	lsls	r2, r3, #8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80080bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	4a58      	ldr	r2, [pc, #352]	; (8008258 <ADC_Init+0x1f4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d022      	beq.n	8008142 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800810a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6899      	ldr	r1, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800812c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6899      	ldr	r1, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	e00f      	b.n	8008162 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008160:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0202 	bic.w	r2, r2, #2
 8008170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6899      	ldr	r1, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7e1b      	ldrb	r3, [r3, #24]
 800817c:	005a      	lsls	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01b      	beq.n	80081c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800819e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80081ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	3b01      	subs	r3, #1
 80081bc:	035a      	lsls	r2, r3, #13
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	e007      	b.n	80081d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80081e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	051a      	lsls	r2, r3, #20
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800820c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6899      	ldr	r1, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800821a:	025a      	lsls	r2, r3, #9
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6899      	ldr	r1, [r3, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	029a      	lsls	r2, r3, #10
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	609a      	str	r2, [r3, #8]
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40012300 	.word	0x40012300
 8008258:	0f000001 	.word	0x0f000001

0800825c <__NVIC_SetPriorityGrouping>:
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008278:	4013      	ands	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	60d3      	str	r3, [r2, #12]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000ed00 	.word	0xe000ed00

080082a4 <__NVIC_GetPriorityGrouping>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <__NVIC_GetPriorityGrouping+0x18>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	f003 0307 	and.w	r3, r3, #7
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <__NVIC_EnableIRQ>:
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	db0b      	blt.n	80082ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	f003 021f 	and.w	r2, r3, #31
 80082d8:	4907      	ldr	r1, [pc, #28]	; (80082f8 <__NVIC_EnableIRQ+0x38>)
 80082da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	2001      	movs	r0, #1
 80082e2:	fa00 f202 	lsl.w	r2, r0, r2
 80082e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	e000e100 	.word	0xe000e100

080082fc <__NVIC_DisableIRQ>:
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830a:	2b00      	cmp	r3, #0
 800830c:	db12      	blt.n	8008334 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	f003 021f 	and.w	r2, r3, #31
 8008314:	490a      	ldr	r1, [pc, #40]	; (8008340 <__NVIC_DisableIRQ+0x44>)
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	2001      	movs	r0, #1
 800831e:	fa00 f202 	lsl.w	r2, r0, r2
 8008322:	3320      	adds	r3, #32
 8008324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008328:	f3bf 8f4f 	dsb	sy
}
 800832c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800832e:	f3bf 8f6f 	isb	sy
}
 8008332:	bf00      	nop
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	e000e100 	.word	0xe000e100

08008344 <__NVIC_SetPriority>:
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008354:	2b00      	cmp	r3, #0
 8008356:	db0a      	blt.n	800836e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b2da      	uxtb	r2, r3
 800835c:	490c      	ldr	r1, [pc, #48]	; (8008390 <__NVIC_SetPriority+0x4c>)
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	0112      	lsls	r2, r2, #4
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	440b      	add	r3, r1
 8008368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800836c:	e00a      	b.n	8008384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	4908      	ldr	r1, [pc, #32]	; (8008394 <__NVIC_SetPriority+0x50>)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	3b04      	subs	r3, #4
 800837c:	0112      	lsls	r2, r2, #4
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	440b      	add	r3, r1
 8008382:	761a      	strb	r2, [r3, #24]
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	e000e100 	.word	0xe000e100
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <NVIC_EncodePriority>:
{
 8008398:	b480      	push	{r7}
 800839a:	b089      	sub	sp, #36	; 0x24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	bf28      	it	cs
 80083b6:	2304      	movcs	r3, #4
 80083b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	3304      	adds	r3, #4
 80083be:	2b06      	cmp	r3, #6
 80083c0:	d902      	bls.n	80083c8 <NVIC_EncodePriority+0x30>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3b03      	subs	r3, #3
 80083c6:	e000      	b.n	80083ca <NVIC_EncodePriority+0x32>
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43da      	mvns	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	401a      	ands	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083e0:	f04f 31ff 	mov.w	r1, #4294967295
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ea:	43d9      	mvns	r1, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083f0:	4313      	orrs	r3, r2
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff ff28 	bl	800825c <__NVIC_SetPriorityGrouping>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008426:	f7ff ff3d 	bl	80082a4 <__NVIC_GetPriorityGrouping>
 800842a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	6978      	ldr	r0, [r7, #20]
 8008432:	f7ff ffb1 	bl	8008398 <NVIC_EncodePriority>
 8008436:	4602      	mov	r2, r0
 8008438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff ff80 	bl	8008344 <__NVIC_SetPriority>
}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff ff30 	bl	80082c0 <__NVIC_EnableIRQ>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff ff40 	bl	80082fc <__NVIC_DisableIRQ>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	; 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008496:	2300      	movs	r3, #0
 8008498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800849a:	2300      	movs	r3, #0
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	e177      	b.n	8008790 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084a0:	2201      	movs	r2, #1
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4013      	ands	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	f040 8166 	bne.w	800878a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d005      	beq.n	80084d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d130      	bne.n	8008538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	2203      	movs	r2, #3
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	43db      	mvns	r3, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4013      	ands	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800850c:	2201      	movs	r2, #1
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	43db      	mvns	r3, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4013      	ands	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	f003 0201 	and.w	r2, r3, #1
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	2b03      	cmp	r3, #3
 8008542:	d017      	beq.n	8008574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	2203      	movs	r2, #3
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	43db      	mvns	r3, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4013      	ands	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	4313      	orrs	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d123      	bne.n	80085c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	08da      	lsrs	r2, r3, #3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3208      	adds	r2, #8
 8008588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	220f      	movs	r2, #15
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	43db      	mvns	r3, r3
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	4013      	ands	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	08da      	lsrs	r2, r3, #3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3208      	adds	r2, #8
 80085c2:	69b9      	ldr	r1, [r7, #24]
 80085c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	2203      	movs	r2, #3
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	43db      	mvns	r3, r3
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	4013      	ands	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 0203 	and.w	r2, r3, #3
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80c0 	beq.w	800878a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	4b66      	ldr	r3, [pc, #408]	; (80087a8 <HAL_GPIO_Init+0x324>)
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	4a65      	ldr	r2, [pc, #404]	; (80087a8 <HAL_GPIO_Init+0x324>)
 8008614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008618:	6453      	str	r3, [r2, #68]	; 0x44
 800861a:	4b63      	ldr	r3, [pc, #396]	; (80087a8 <HAL_GPIO_Init+0x324>)
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008626:	4a61      	ldr	r2, [pc, #388]	; (80087ac <HAL_GPIO_Init+0x328>)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	3302      	adds	r3, #2
 800862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	220f      	movs	r2, #15
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_GPIO_Init+0x32c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d037      	beq.n	80086c2 <HAL_GPIO_Init+0x23e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a57      	ldr	r2, [pc, #348]	; (80087b4 <HAL_GPIO_Init+0x330>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d031      	beq.n	80086be <HAL_GPIO_Init+0x23a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a56      	ldr	r2, [pc, #344]	; (80087b8 <HAL_GPIO_Init+0x334>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d02b      	beq.n	80086ba <HAL_GPIO_Init+0x236>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a55      	ldr	r2, [pc, #340]	; (80087bc <HAL_GPIO_Init+0x338>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d025      	beq.n	80086b6 <HAL_GPIO_Init+0x232>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a54      	ldr	r2, [pc, #336]	; (80087c0 <HAL_GPIO_Init+0x33c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <HAL_GPIO_Init+0x22e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a53      	ldr	r2, [pc, #332]	; (80087c4 <HAL_GPIO_Init+0x340>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d019      	beq.n	80086ae <HAL_GPIO_Init+0x22a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a52      	ldr	r2, [pc, #328]	; (80087c8 <HAL_GPIO_Init+0x344>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <HAL_GPIO_Init+0x226>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a51      	ldr	r2, [pc, #324]	; (80087cc <HAL_GPIO_Init+0x348>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00d      	beq.n	80086a6 <HAL_GPIO_Init+0x222>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a50      	ldr	r2, [pc, #320]	; (80087d0 <HAL_GPIO_Init+0x34c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <HAL_GPIO_Init+0x21e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4f      	ldr	r2, [pc, #316]	; (80087d4 <HAL_GPIO_Init+0x350>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d101      	bne.n	800869e <HAL_GPIO_Init+0x21a>
 800869a:	2309      	movs	r3, #9
 800869c:	e012      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 800869e:	230a      	movs	r3, #10
 80086a0:	e010      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a2:	2308      	movs	r3, #8
 80086a4:	e00e      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a6:	2307      	movs	r3, #7
 80086a8:	e00c      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e00a      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e008      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e006      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e004      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e002      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086c2:	2300      	movs	r3, #0
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f002 0203 	and.w	r2, r2, #3
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	4093      	lsls	r3, r2
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086d4:	4935      	ldr	r1, [pc, #212]	; (80087ac <HAL_GPIO_Init+0x328>)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086e2:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <HAL_GPIO_Init+0x354>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008706:	4a34      	ldr	r2, [pc, #208]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800870c:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <HAL_GPIO_Init+0x354>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008730:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008736:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800875a:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <HAL_GPIO_Init+0x354>)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008760:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008784:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	f67f ae84 	bls.w	80084a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	; 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40021c00 	.word	0x40021c00
 80087d0:	40022000 	.word	0x40022000
 80087d4:	40022400 	.word	0x40022400
 80087d8:	40013c00 	.word	0x40013c00

080087dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	887b      	ldrh	r3, [r7, #2]
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e001      	b.n	80087fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	807b      	strh	r3, [r7, #2]
 8008818:	4613      	mov	r3, r2
 800881a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800881c:	787b      	ldrb	r3, [r7, #1]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008822:	887a      	ldrh	r2, [r7, #2]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008828:	e003      	b.n	8008832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800882a:	887b      	ldrh	r3, [r7, #2]
 800882c:	041a      	lsls	r2, r3, #16
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800884a:	4b08      	ldr	r3, [pc, #32]	; (800886c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	4013      	ands	r3, r2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d006      	beq.n	8008864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008856:	4a05      	ldr	r2, [pc, #20]	; (800886c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	4618      	mov	r0, r3
 8008860:	f7fa fcae 	bl	80031c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40013c00 	.word	0x40013c00

08008870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e12b      	b.n	8008ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f9 fd80 	bl	800239c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2224      	movs	r2, #36	; 0x24
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0201 	bic.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088d4:	f001 fd66 	bl	800a3a4 <HAL_RCC_GetPCLK1Freq>
 80088d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	4a81      	ldr	r2, [pc, #516]	; (8008ae4 <HAL_I2C_Init+0x274>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d807      	bhi.n	80088f4 <HAL_I2C_Init+0x84>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a80      	ldr	r2, [pc, #512]	; (8008ae8 <HAL_I2C_Init+0x278>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	bf94      	ite	ls
 80088ec:	2301      	movls	r3, #1
 80088ee:	2300      	movhi	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	e006      	b.n	8008902 <HAL_I2C_Init+0x92>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a7d      	ldr	r2, [pc, #500]	; (8008aec <HAL_I2C_Init+0x27c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	bf94      	ite	ls
 80088fc:	2301      	movls	r3, #1
 80088fe:	2300      	movhi	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e0e7      	b.n	8008ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a78      	ldr	r2, [pc, #480]	; (8008af0 <HAL_I2C_Init+0x280>)
 800890e:	fba2 2303 	umull	r2, r3, r2, r3
 8008912:	0c9b      	lsrs	r3, r3, #18
 8008914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a6a      	ldr	r2, [pc, #424]	; (8008ae4 <HAL_I2C_Init+0x274>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d802      	bhi.n	8008944 <HAL_I2C_Init+0xd4>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3301      	adds	r3, #1
 8008942:	e009      	b.n	8008958 <HAL_I2C_Init+0xe8>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	4a69      	ldr	r2, [pc, #420]	; (8008af4 <HAL_I2C_Init+0x284>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	3301      	adds	r3, #1
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	430b      	orrs	r3, r1
 800895e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800896a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	495c      	ldr	r1, [pc, #368]	; (8008ae4 <HAL_I2C_Init+0x274>)
 8008974:	428b      	cmp	r3, r1
 8008976:	d819      	bhi.n	80089ac <HAL_I2C_Init+0x13c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	1e59      	subs	r1, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	fbb1 f3f3 	udiv	r3, r1, r3
 8008986:	1c59      	adds	r1, r3, #1
 8008988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800898c:	400b      	ands	r3, r1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <HAL_I2C_Init+0x138>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1e59      	subs	r1, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	fbb1 f3f3 	udiv	r3, r1, r3
 80089a0:	3301      	adds	r3, #1
 80089a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089a6:	e051      	b.n	8008a4c <HAL_I2C_Init+0x1dc>
 80089a8:	2304      	movs	r3, #4
 80089aa:	e04f      	b.n	8008a4c <HAL_I2C_Init+0x1dc>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <HAL_I2C_Init+0x168>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1e58      	subs	r0, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6859      	ldr	r1, [r3, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	440b      	add	r3, r1
 80089c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80089c6:	3301      	adds	r3, #1
 80089c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bf0c      	ite	eq
 80089d0:	2301      	moveq	r3, #1
 80089d2:	2300      	movne	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e012      	b.n	80089fe <HAL_I2C_Init+0x18e>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	1e58      	subs	r0, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6859      	ldr	r1, [r3, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	0099      	lsls	r1, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_I2C_Init+0x196>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e022      	b.n	8008a4c <HAL_I2C_Init+0x1dc>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10e      	bne.n	8008a2c <HAL_I2C_Init+0x1bc>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1e58      	subs	r0, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6859      	ldr	r1, [r3, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	440b      	add	r3, r1
 8008a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a20:	3301      	adds	r3, #1
 8008a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2a:	e00f      	b.n	8008a4c <HAL_I2C_Init+0x1dc>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	1e58      	subs	r0, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6859      	ldr	r1, [r3, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	0099      	lsls	r1, r3, #2
 8008a3c:	440b      	add	r3, r1
 8008a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a42:	3301      	adds	r3, #1
 8008a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	6809      	ldr	r1, [r1, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69da      	ldr	r2, [r3, #28]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6911      	ldr	r1, [r2, #16]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	68d2      	ldr	r2, [r2, #12]
 8008a86:	4311      	orrs	r1, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	000186a0 	.word	0x000186a0
 8008ae8:	001e847f 	.word	0x001e847f
 8008aec:	003d08ff 	.word	0x003d08ff
 8008af0:	431bde83 	.word	0x431bde83
 8008af4:	10624dd3 	.word	0x10624dd3

08008af8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	461a      	mov	r2, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	817b      	strh	r3, [r7, #10]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	813b      	strh	r3, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b12:	f7fe ff63 	bl	80079dc <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	f040 80d9 	bne.w	8008cd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	2319      	movs	r3, #25
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	496d      	ldr	r1, [pc, #436]	; (8008ce4 <HAL_I2C_Mem_Write+0x1ec>)
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fcb5 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e0cc      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <HAL_I2C_Mem_Write+0x56>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e0c5      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d007      	beq.n	8008b74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2221      	movs	r2, #33	; 0x21
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2240      	movs	r2, #64	; 0x40
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a4d      	ldr	r2, [pc, #308]	; (8008ce8 <HAL_I2C_Mem_Write+0x1f0>)
 8008bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bb6:	88f8      	ldrh	r0, [r7, #6]
 8008bb8:	893a      	ldrh	r2, [r7, #8]
 8008bba:	8979      	ldrh	r1, [r7, #10]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 faec 	bl	80091a4 <I2C_RequestMemoryWrite>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d052      	beq.n	8008c78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e081      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fd36 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00d      	beq.n	8008c02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d107      	bne.n	8008bfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e06b      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d11b      	bne.n	8008c78 <HAL_I2C_Mem_Write+0x180>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d017      	beq.n	8008c78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1aa      	bne.n	8008bd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fd22 	bl	80096ce <I2C_WaitOnBTFFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00d      	beq.n	8008cac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d107      	bne.n	8008ca8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e016      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e000      	b.n	8008cda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008cd8:	2302      	movs	r3, #2
  }
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	00100002 	.word	0x00100002
 8008ce8:	ffff0000 	.word	0xffff0000

08008cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	; 0x30
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	817b      	strh	r3, [r7, #10]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	813b      	strh	r3, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d06:	f7fe fe69 	bl	80079dc <HAL_GetTick>
 8008d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	f040 8208 	bne.w	800912a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2319      	movs	r3, #25
 8008d20:	2201      	movs	r2, #1
 8008d22:	497b      	ldr	r1, [pc, #492]	; (8008f10 <HAL_I2C_Mem_Read+0x224>)
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fbbb 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008d30:	2302      	movs	r3, #2
 8008d32:	e1fb      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_I2C_Mem_Read+0x56>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e1f4      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d007      	beq.n	8008d68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2222      	movs	r2, #34	; 0x22
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2240      	movs	r2, #64	; 0x40
 8008d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4a5b      	ldr	r2, [pc, #364]	; (8008f14 <HAL_I2C_Mem_Read+0x228>)
 8008da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008daa:	88f8      	ldrh	r0, [r7, #6]
 8008dac:	893a      	ldrh	r2, [r7, #8]
 8008dae:	8979      	ldrh	r1, [r7, #10]
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4603      	mov	r3, r0
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fa88 	bl	80092d0 <I2C_RequestMemoryRead>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e1b0      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d113      	bne.n	8008dfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	623b      	str	r3, [r7, #32]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	623b      	str	r3, [r7, #32]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	623b      	str	r3, [r7, #32]
 8008de6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e184      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d11b      	bne.n	8008e3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e164      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d11b      	bne.n	8008e7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e62:	2300      	movs	r3, #0
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	e144      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e90:	e138      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	f200 80f1 	bhi.w	800907e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d123      	bne.n	8008eec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fc51 	bl	8009750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e139      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008eea:	e10b      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d14e      	bne.n	8008f92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	2200      	movs	r2, #0
 8008efc:	4906      	ldr	r1, [pc, #24]	; (8008f18 <HAL_I2C_Mem_Read+0x22c>)
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 face 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e10e      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
 8008f0e:	bf00      	nop
 8008f10:	00100002 	.word	0x00100002
 8008f14:	ffff0000 	.word	0xffff0000
 8008f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	3b01      	subs	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f90:	e0b8      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4966      	ldr	r1, [pc, #408]	; (8009134 <HAL_I2C_Mem_Read+0x448>)
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fa7f 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0bf      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691a      	ldr	r2, [r3, #16]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	494f      	ldr	r1, [pc, #316]	; (8009134 <HAL_I2C_Mem_Read+0x448>)
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fa51 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e091      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800907c:	e042      	b.n	8009104 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800907e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fb64 	bl	8009750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e04c      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	f003 0304 	and.w	r3, r3, #4
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d118      	bne.n	8009104 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	b2d2      	uxtb	r2, r2
 80090de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f aec2 	bne.w	8008e92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e000      	b.n	800912c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800912a:	2302      	movs	r3, #2
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3728      	adds	r7, #40	; 0x28
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	00010004 	.word	0x00010004

08009138 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b20      	cmp	r3, #32
 800914a:	d124      	bne.n	8009196 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2228      	movs	r2, #40	; 0x28
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b01      	cmp	r3, #1
 8009160:	d007      	beq.n	8009172 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f042 0201 	orr.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009180:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009190:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009196:	2302      	movs	r3, #2
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	817b      	strh	r3, [r7, #10]
 80091b6:	460b      	mov	r3, r1
 80091b8:	813b      	strh	r3, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f960 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f4:	d103      	bne.n	80091fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e05f      	b.n	80092c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009202:	897b      	ldrh	r3, [r7, #10]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	6a3a      	ldr	r2, [r7, #32]
 8009216:	492d      	ldr	r1, [pc, #180]	; (80092cc <I2C_RequestMemoryWrite+0x128>)
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f998 	bl	800954e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e04c      	b.n	80092c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800923e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009240:	6a39      	ldr	r1, [r7, #32]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fa02 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	2b04      	cmp	r3, #4
 8009254:	d107      	bne.n	8009266 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e02b      	b.n	80092c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d105      	bne.n	800927c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009270:	893b      	ldrh	r3, [r7, #8]
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	611a      	str	r2, [r3, #16]
 800927a:	e021      	b.n	80092c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800927c:	893b      	ldrh	r3, [r7, #8]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b29b      	uxth	r3, r3
 8009282:	b2da      	uxtb	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800928a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928c:	6a39      	ldr	r1, [r7, #32]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f9dc 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d107      	bne.n	80092b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e005      	b.n	80092c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092b6:	893b      	ldrh	r3, [r7, #8]
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	00010002 	.word	0x00010002

080092d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	461a      	mov	r2, r3
 80092de:	4603      	mov	r3, r0
 80092e0:	817b      	strh	r3, [r7, #10]
 80092e2:	460b      	mov	r3, r1
 80092e4:	813b      	strh	r3, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	2200      	movs	r2, #0
 8009312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 f8c2 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00d      	beq.n	800933e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009330:	d103      	bne.n	800933a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e0aa      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800933e:	897b      	ldrh	r3, [r7, #10]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800934c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	6a3a      	ldr	r2, [r7, #32]
 8009352:	4952      	ldr	r1, [pc, #328]	; (800949c <I2C_RequestMemoryRead+0x1cc>)
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f8fa 	bl	800954e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e097      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800937a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937c:	6a39      	ldr	r1, [r7, #32]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f964 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00d      	beq.n	80093a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	2b04      	cmp	r3, #4
 8009390:	d107      	bne.n	80093a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e076      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d105      	bne.n	80093b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093ac:	893b      	ldrh	r3, [r7, #8]
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	611a      	str	r2, [r3, #16]
 80093b6:	e021      	b.n	80093fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093b8:	893b      	ldrh	r3, [r7, #8]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b29b      	uxth	r3, r3
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c8:	6a39      	ldr	r1, [r7, #32]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f93e 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d107      	bne.n	80093ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e050      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093f2:	893b      	ldrh	r3, [r7, #8]
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fe:	6a39      	ldr	r1, [r7, #32]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 f923 	bl	800964c <I2C_WaitOnTXEFlagUntilTimeout>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00d      	beq.n	8009428 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	2b04      	cmp	r3, #4
 8009412:	d107      	bne.n	8009424 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009422:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e035      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009436:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	2200      	movs	r2, #0
 8009440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f82b 	bl	80094a0 <I2C_WaitOnFlagUntilTimeout>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00d      	beq.n	800946c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945e:	d103      	bne.n	8009468 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e013      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800946c:	897b      	ldrh	r3, [r7, #10]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f043 0301 	orr.w	r3, r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	6a3a      	ldr	r2, [r7, #32]
 8009480:	4906      	ldr	r1, [pc, #24]	; (800949c <I2C_RequestMemoryRead+0x1cc>)
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f863 	bl	800954e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e000      	b.n	8009494 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	00010002 	.word	0x00010002

080094a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094b0:	e025      	b.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b8:	d021      	beq.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ba:	f7fe fa8f 	bl	80079dc <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d302      	bcc.n	80094d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d116      	bne.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	f043 0220 	orr.w	r2, r3, #32
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e023      	b.n	8009546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	0c1b      	lsrs	r3, r3, #16
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b01      	cmp	r3, #1
 8009506:	d10d      	bne.n	8009524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	43da      	mvns	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	e00c      	b.n	800953e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	43da      	mvns	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4013      	ands	r3, r2
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	461a      	mov	r2, r3
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	429a      	cmp	r2, r3
 8009542:	d0b6      	beq.n	80094b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800955c:	e051      	b.n	8009602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956c:	d123      	bne.n	80095b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800957c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2220      	movs	r2, #32
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f043 0204 	orr.w	r2, r3, #4
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e046      	b.n	8009644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095bc:	d021      	beq.n	8009602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095be:	f7fe fa0d 	bl	80079dc <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d302      	bcc.n	80095d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d116      	bne.n	8009602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2220      	movs	r2, #32
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f043 0220 	orr.w	r2, r3, #32
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e020      	b.n	8009644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d10c      	bne.n	8009626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	43da      	mvns	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4013      	ands	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	bf14      	ite	ne
 800961e:	2301      	movne	r3, #1
 8009620:	2300      	moveq	r3, #0
 8009622:	b2db      	uxtb	r3, r3
 8009624:	e00b      	b.n	800963e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	43da      	mvns	r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4013      	ands	r3, r2
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	bf14      	ite	ne
 8009638:	2301      	movne	r3, #1
 800963a:	2300      	moveq	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d18d      	bne.n	800955e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009658:	e02d      	b.n	80096b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 f8ce 	bl	80097fc <I2C_IsAcknowledgeFailed>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e02d      	b.n	80096c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d021      	beq.n	80096b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009672:	f7fe f9b3 	bl	80079dc <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d302      	bcc.n	8009688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d116      	bne.n	80096b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f043 0220 	orr.w	r2, r3, #32
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e007      	b.n	80096c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c0:	2b80      	cmp	r3, #128	; 0x80
 80096c2:	d1ca      	bne.n	800965a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096da:	e02d      	b.n	8009738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f88d 	bl	80097fc <I2C_IsAcknowledgeFailed>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e02d      	b.n	8009748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d021      	beq.n	8009738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f4:	f7fe f972 	bl	80079dc <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d116      	bne.n	8009738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2220      	movs	r2, #32
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	f043 0220 	orr.w	r2, r3, #32
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e007      	b.n	8009748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b04      	cmp	r3, #4
 8009744:	d1ca      	bne.n	80096dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800975c:	e042      	b.n	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b10      	cmp	r3, #16
 800976a:	d119      	bne.n	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f06f 0210 	mvn.w	r2, #16
 8009774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2220      	movs	r2, #32
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e029      	b.n	80097f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097a0:	f7fe f91c 	bl	80079dc <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d116      	bne.n	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	f043 0220 	orr.w	r2, r3, #32
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e007      	b.n	80097f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d1b5      	bne.n	800975e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009812:	d11b      	bne.n	800984c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800981c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	f043 0204 	orr.w	r2, r3, #4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e000      	b.n	800984e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b20      	cmp	r3, #32
 800986e:	d129      	bne.n	80098c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2224      	movs	r2, #36	; 0x24
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0201 	bic.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0210 	bic.w	r2, r2, #16
 8009896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0201 	orr.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	e000      	b.n	80098c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80098c4:	2302      	movs	r3, #2
  }
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d12a      	bne.n	8009942 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2224      	movs	r2, #36	; 0x24
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800990c:	89fb      	ldrh	r3, [r7, #14]
 800990e:	f023 030f 	bic.w	r3, r3, #15
 8009912:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	b29a      	uxth	r2, r3
 8009918:	89fb      	ldrh	r3, [r7, #14]
 800991a:	4313      	orrs	r3, r2
 800991c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	89fa      	ldrh	r2, [r7, #14]
 8009924:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0201 	orr.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2220      	movs	r2, #32
 800993a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e000      	b.n	8009944 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009942:	2302      	movs	r3, #2
  }
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e034      	b.n	80099cc <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800996a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f245 5255 	movw	r2, #21845	; 0x5555
 8009974:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6852      	ldr	r2, [r2, #4]
 800997e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	6892      	ldr	r2, [r2, #8]
 8009988:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800998a:	f7fe f827 	bl	80079dc <HAL_GetTick>
 800998e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009990:	e00f      	b.n	80099b2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009992:	f7fe f823 	bl	80079dc <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b31      	cmp	r3, #49	; 0x31
 800999e:	d908      	bls.n	80099b2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e00c      	b.n	80099cc <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e8      	bne.n	8009992 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80099c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80099e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <HAL_PWR_EnableWakeUpPin+0x20>)
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	604b      	str	r3, [r1, #4]
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40007000 	.word	0x40007000

08009a18 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <HAL_PWR_DisableWakeUpPin+0x24>)
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	43db      	mvns	r3, r3
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <HAL_PWR_DisableWakeUpPin+0x24>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	604b      	str	r3, [r1, #4]
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40007000 	.word	0x40007000

08009a40 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009a44:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a07      	ldr	r2, [pc, #28]	; (8009a68 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009a4a:	f043 0302 	orr.w	r3, r3, #2
 8009a4e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	4a05      	ldr	r2, [pc, #20]	; (8009a6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009a56:	f043 0304 	orr.w	r3, r3, #4
 8009a5a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009a5c:	bf30      	wfi
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	40007000 	.word	0x40007000
 8009a6c:	e000ed00 	.word	0xe000ed00

08009a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	603b      	str	r3, [r7, #0]
 8009a7e:	4b20      	ldr	r3, [pc, #128]	; (8009b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a88:	6413      	str	r3, [r2, #64]	; 0x40
 8009a8a:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009a96:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <HAL_PWREx_EnableOverDrive+0x94>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a9c:	f7fd ff9e 	bl	80079dc <HAL_GetTick>
 8009aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009aa2:	e009      	b.n	8009ab8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009aa4:	f7fd ff9a 	bl	80079dc <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ab2:	d901      	bls.n	8009ab8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e01f      	b.n	8009af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009ab8:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac4:	d1ee      	bne.n	8009aa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009ac6:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009acc:	f7fd ff86 	bl	80079dc <HAL_GetTick>
 8009ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ad2:	e009      	b.n	8009ae8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ad4:	f7fd ff82 	bl	80079dc <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ae2:	d901      	bls.n	8009ae8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e007      	b.n	8009af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ae8:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af4:	d1ee      	bne.n	8009ad4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	40023800 	.word	0x40023800
 8009b04:	420e0040 	.word	0x420e0040
 8009b08:	40007000 	.word	0x40007000
 8009b0c:	420e0044 	.word	0x420e0044

08009b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e264      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d075      	beq.n	8009c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b2e:	4ba3      	ldr	r3, [pc, #652]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 030c 	and.w	r3, r3, #12
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d00c      	beq.n	8009b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b3a:	4ba0      	ldr	r3, [pc, #640]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d112      	bne.n	8009b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b46:	4b9d      	ldr	r3, [pc, #628]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b52:	d10b      	bne.n	8009b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b54:	4b99      	ldr	r3, [pc, #612]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d05b      	beq.n	8009c18 <HAL_RCC_OscConfig+0x108>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d157      	bne.n	8009c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e23f      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d106      	bne.n	8009b84 <HAL_RCC_OscConfig+0x74>
 8009b76:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a90      	ldr	r2, [pc, #576]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	e01d      	b.n	8009bc0 <HAL_RCC_OscConfig+0xb0>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x98>
 8009b8e:	4b8b      	ldr	r3, [pc, #556]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a8a      	ldr	r2, [pc, #552]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	4b88      	ldr	r3, [pc, #544]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a87      	ldr	r2, [pc, #540]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	e00b      	b.n	8009bc0 <HAL_RCC_OscConfig+0xb0>
 8009ba8:	4b84      	ldr	r3, [pc, #528]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a83      	ldr	r2, [pc, #524]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	4b81      	ldr	r3, [pc, #516]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a80      	ldr	r2, [pc, #512]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d013      	beq.n	8009bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc8:	f7fd ff08 	bl	80079dc <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bd0:	f7fd ff04 	bl	80079dc <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b64      	cmp	r3, #100	; 0x64
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e204      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009be2:	4b76      	ldr	r3, [pc, #472]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <HAL_RCC_OscConfig+0xc0>
 8009bee:	e014      	b.n	8009c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf0:	f7fd fef4 	bl	80079dc <HAL_GetTick>
 8009bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bf6:	e008      	b.n	8009c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bf8:	f7fd fef0 	bl	80079dc <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b64      	cmp	r3, #100	; 0x64
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e1f0      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c0a:	4b6c      	ldr	r3, [pc, #432]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f0      	bne.n	8009bf8 <HAL_RCC_OscConfig+0xe8>
 8009c16:	e000      	b.n	8009c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d063      	beq.n	8009cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c26:	4b65      	ldr	r3, [pc, #404]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 030c 	and.w	r3, r3, #12
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c32:	4b62      	ldr	r3, [pc, #392]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c3a:	2b08      	cmp	r3, #8
 8009c3c:	d11c      	bne.n	8009c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c3e:	4b5f      	ldr	r3, [pc, #380]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d116      	bne.n	8009c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c4a:	4b5c      	ldr	r3, [pc, #368]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <HAL_RCC_OscConfig+0x152>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d001      	beq.n	8009c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e1c4      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c62:	4b56      	ldr	r3, [pc, #344]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4952      	ldr	r1, [pc, #328]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c76:	e03a      	b.n	8009cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d020      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c80:	4b4f      	ldr	r3, [pc, #316]	; (8009dc0 <HAL_RCC_OscConfig+0x2b0>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c86:	f7fd fea9 	bl	80079dc <HAL_GetTick>
 8009c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c8c:	e008      	b.n	8009ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c8e:	f7fd fea5 	bl	80079dc <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e1a5      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ca0:	4b46      	ldr	r3, [pc, #280]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0f0      	beq.n	8009c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cac:	4b43      	ldr	r3, [pc, #268]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	4940      	ldr	r1, [pc, #256]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	600b      	str	r3, [r1, #0]
 8009cc0:	e015      	b.n	8009cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cc2:	4b3f      	ldr	r3, [pc, #252]	; (8009dc0 <HAL_RCC_OscConfig+0x2b0>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc8:	f7fd fe88 	bl	80079dc <HAL_GetTick>
 8009ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cd0:	f7fd fe84 	bl	80079dc <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e184      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ce2:	4b36      	ldr	r3, [pc, #216]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f0      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d030      	beq.n	8009d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d016      	beq.n	8009d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d02:	4b30      	ldr	r3, [pc, #192]	; (8009dc4 <HAL_RCC_OscConfig+0x2b4>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d08:	f7fd fe68 	bl	80079dc <HAL_GetTick>
 8009d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d10:	f7fd fe64 	bl	80079dc <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e164      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d22:	4b26      	ldr	r3, [pc, #152]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0f0      	beq.n	8009d10 <HAL_RCC_OscConfig+0x200>
 8009d2e:	e015      	b.n	8009d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d30:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <HAL_RCC_OscConfig+0x2b4>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d36:	f7fd fe51 	bl	80079dc <HAL_GetTick>
 8009d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d3e:	f7fd fe4d 	bl	80079dc <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e14d      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d50:	4b1a      	ldr	r3, [pc, #104]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f0      	bne.n	8009d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 80a0 	beq.w	8009eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10f      	bne.n	8009d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60bb      	str	r3, [r7, #8]
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	4a0e      	ldr	r2, [pc, #56]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6413      	str	r3, [r2, #64]	; 0x40
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <HAL_RCC_OscConfig+0x2ac>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d96:	2301      	movs	r3, #1
 8009d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <HAL_RCC_OscConfig+0x2b8>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d121      	bne.n	8009dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009da6:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <HAL_RCC_OscConfig+0x2b8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a07      	ldr	r2, [pc, #28]	; (8009dc8 <HAL_RCC_OscConfig+0x2b8>)
 8009dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009db2:	f7fd fe13 	bl	80079dc <HAL_GetTick>
 8009db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009db8:	e011      	b.n	8009dde <HAL_RCC_OscConfig+0x2ce>
 8009dba:	bf00      	nop
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	42470000 	.word	0x42470000
 8009dc4:	42470e80 	.word	0x42470e80
 8009dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dcc:	f7fd fe06 	bl	80079dc <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e106      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dde:	4b85      	ldr	r3, [pc, #532]	; (8009ff4 <HAL_RCC_OscConfig+0x4e4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d106      	bne.n	8009e00 <HAL_RCC_OscConfig+0x2f0>
 8009df2:	4b81      	ldr	r3, [pc, #516]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df6:	4a80      	ldr	r2, [pc, #512]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009df8:	f043 0301 	orr.w	r3, r3, #1
 8009dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dfe:	e01c      	b.n	8009e3a <HAL_RCC_OscConfig+0x32a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d10c      	bne.n	8009e22 <HAL_RCC_OscConfig+0x312>
 8009e08:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0c:	4a7a      	ldr	r2, [pc, #488]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e0e:	f043 0304 	orr.w	r3, r3, #4
 8009e12:	6713      	str	r3, [r2, #112]	; 0x70
 8009e14:	4b78      	ldr	r3, [pc, #480]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e18:	4a77      	ldr	r2, [pc, #476]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e20:	e00b      	b.n	8009e3a <HAL_RCC_OscConfig+0x32a>
 8009e22:	4b75      	ldr	r3, [pc, #468]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	4a74      	ldr	r2, [pc, #464]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e28:	f023 0301 	bic.w	r3, r3, #1
 8009e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e2e:	4b72      	ldr	r3, [pc, #456]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	4a71      	ldr	r2, [pc, #452]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e34:	f023 0304 	bic.w	r3, r3, #4
 8009e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d015      	beq.n	8009e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e42:	f7fd fdcb 	bl	80079dc <HAL_GetTick>
 8009e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e48:	e00a      	b.n	8009e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e4a:	f7fd fdc7 	bl	80079dc <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e0c5      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e60:	4b65      	ldr	r3, [pc, #404]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0ee      	beq.n	8009e4a <HAL_RCC_OscConfig+0x33a>
 8009e6c:	e014      	b.n	8009e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e6e:	f7fd fdb5 	bl	80079dc <HAL_GetTick>
 8009e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e74:	e00a      	b.n	8009e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e76:	f7fd fdb1 	bl	80079dc <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e0af      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e8c:	4b5a      	ldr	r3, [pc, #360]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1ee      	bne.n	8009e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d105      	bne.n	8009eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e9e:	4b56      	ldr	r3, [pc, #344]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	4a55      	ldr	r2, [pc, #340]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 809b 	beq.w	8009fea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009eb4:	4b50      	ldr	r3, [pc, #320]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f003 030c 	and.w	r3, r3, #12
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d05c      	beq.n	8009f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d141      	bne.n	8009f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ec8:	4b4c      	ldr	r3, [pc, #304]	; (8009ffc <HAL_RCC_OscConfig+0x4ec>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ece:	f7fd fd85 	bl	80079dc <HAL_GetTick>
 8009ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed6:	f7fd fd81 	bl	80079dc <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e081      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ee8:	4b43      	ldr	r3, [pc, #268]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	431a      	orrs	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	019b      	lsls	r3, r3, #6
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	041b      	lsls	r3, r3, #16
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	061b      	lsls	r3, r3, #24
 8009f18:	4937      	ldr	r1, [pc, #220]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f1e:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <HAL_RCC_OscConfig+0x4ec>)
 8009f20:	2201      	movs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f24:	f7fd fd5a 	bl	80079dc <HAL_GetTick>
 8009f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f2c:	f7fd fd56 	bl	80079dc <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e056      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f3e:	4b2e      	ldr	r3, [pc, #184]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0f0      	beq.n	8009f2c <HAL_RCC_OscConfig+0x41c>
 8009f4a:	e04e      	b.n	8009fea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f4c:	4b2b      	ldr	r3, [pc, #172]	; (8009ffc <HAL_RCC_OscConfig+0x4ec>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f52:	f7fd fd43 	bl	80079dc <HAL_GetTick>
 8009f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f5a:	f7fd fd3f 	bl	80079dc <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e03f      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f6c:	4b22      	ldr	r3, [pc, #136]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1f0      	bne.n	8009f5a <HAL_RCC_OscConfig+0x44a>
 8009f78:	e037      	b.n	8009fea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e032      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f86:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <HAL_RCC_OscConfig+0x4e8>)
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d028      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d121      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d11a      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d111      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	085b      	lsrs	r3, r3, #1
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d107      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d001      	beq.n	8009fea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40007000 	.word	0x40007000
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	42470060 	.word	0x42470060

0800a000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e0cc      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a014:	4b68      	ldr	r3, [pc, #416]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d90c      	bls.n	800a03c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a022:	4b65      	ldr	r3, [pc, #404]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a02a:	4b63      	ldr	r3, [pc, #396]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 030f 	and.w	r3, r3, #15
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d001      	beq.n	800a03c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e0b8      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d020      	beq.n	800a08a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a054:	4b59      	ldr	r3, [pc, #356]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	4a58      	ldr	r2, [pc, #352]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a05a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a05e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a06c:	4b53      	ldr	r3, [pc, #332]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	4a52      	ldr	r2, [pc, #328]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a078:	4b50      	ldr	r3, [pc, #320]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	494d      	ldr	r1, [pc, #308]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a086:	4313      	orrs	r3, r2
 800a088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d044      	beq.n	800a120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d107      	bne.n	800a0ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a09e:	4b47      	ldr	r3, [pc, #284]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d119      	bne.n	800a0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e07f      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d003      	beq.n	800a0be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d107      	bne.n	800a0ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0be:	4b3f      	ldr	r3, [pc, #252]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e06f      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0ce:	4b3b      	ldr	r3, [pc, #236]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e067      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0de:	4b37      	ldr	r3, [pc, #220]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f023 0203 	bic.w	r2, r3, #3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4934      	ldr	r1, [pc, #208]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0f0:	f7fd fc74 	bl	80079dc <HAL_GetTick>
 800a0f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0f6:	e00a      	b.n	800a10e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0f8:	f7fd fc70 	bl	80079dc <HAL_GetTick>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	f241 3288 	movw	r2, #5000	; 0x1388
 800a106:	4293      	cmp	r3, r2
 800a108:	d901      	bls.n	800a10e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e04f      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a10e:	4b2b      	ldr	r3, [pc, #172]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f003 020c 	and.w	r2, r3, #12
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d1eb      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a120:	4b25      	ldr	r3, [pc, #148]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 030f 	and.w	r3, r3, #15
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d20c      	bcs.n	800a148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a12e:	4b22      	ldr	r3, [pc, #136]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a136:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d001      	beq.n	800a148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e032      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d008      	beq.n	800a166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a154:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4916      	ldr	r1, [pc, #88]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a162:	4313      	orrs	r3, r2
 800a164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d009      	beq.n	800a186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a172:	4b12      	ldr	r3, [pc, #72]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	490e      	ldr	r1, [pc, #56]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a182:	4313      	orrs	r3, r2
 800a184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a186:	f000 f821 	bl	800a1cc <HAL_RCC_GetSysClockFreq>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <HAL_RCC_ClockConfig+0x1bc>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	091b      	lsrs	r3, r3, #4
 800a192:	f003 030f 	and.w	r3, r3, #15
 800a196:	490a      	ldr	r1, [pc, #40]	; (800a1c0 <HAL_RCC_ClockConfig+0x1c0>)
 800a198:	5ccb      	ldrb	r3, [r1, r3]
 800a19a:	fa22 f303 	lsr.w	r3, r2, r3
 800a19e:	4a09      	ldr	r2, [pc, #36]	; (800a1c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a1a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f8 ff68 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40023c00 	.word	0x40023c00
 800a1bc:	40023800 	.word	0x40023800
 800a1c0:	08018b9c 	.word	0x08018b9c
 800a1c4:	20000088 	.word	0x20000088
 800a1c8:	200000b0 	.word	0x200000b0

0800a1cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	607b      	str	r3, [r7, #4]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1e4:	4b67      	ldr	r3, [pc, #412]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f003 030c 	and.w	r3, r3, #12
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d00d      	beq.n	800a20c <HAL_RCC_GetSysClockFreq+0x40>
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	f200 80bd 	bhi.w	800a370 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_RCC_GetSysClockFreq+0x34>
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d003      	beq.n	800a206 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1fe:	e0b7      	b.n	800a370 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a200:	4b61      	ldr	r3, [pc, #388]	; (800a388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a202:	60bb      	str	r3, [r7, #8]
       break;
 800a204:	e0b7      	b.n	800a376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a206:	4b60      	ldr	r3, [pc, #384]	; (800a388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a208:	60bb      	str	r3, [r7, #8]
      break;
 800a20a:	e0b4      	b.n	800a376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a20c:	4b5d      	ldr	r3, [pc, #372]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a216:	4b5b      	ldr	r3, [pc, #364]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d04d      	beq.n	800a2be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a222:	4b58      	ldr	r3, [pc, #352]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	461a      	mov	r2, r3
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a232:	f04f 0100 	mov.w	r1, #0
 800a236:	ea02 0800 	and.w	r8, r2, r0
 800a23a:	ea03 0901 	and.w	r9, r3, r1
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	014b      	lsls	r3, r1, #5
 800a24c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a250:	0142      	lsls	r2, r0, #5
 800a252:	4610      	mov	r0, r2
 800a254:	4619      	mov	r1, r3
 800a256:	ebb0 0008 	subs.w	r0, r0, r8
 800a25a:	eb61 0109 	sbc.w	r1, r1, r9
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	018b      	lsls	r3, r1, #6
 800a268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a26c:	0182      	lsls	r2, r0, #6
 800a26e:	1a12      	subs	r2, r2, r0
 800a270:	eb63 0301 	sbc.w	r3, r3, r1
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f04f 0100 	mov.w	r1, #0
 800a27c:	00d9      	lsls	r1, r3, #3
 800a27e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a282:	00d0      	lsls	r0, r2, #3
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	eb12 0208 	adds.w	r2, r2, r8
 800a28c:	eb43 0309 	adc.w	r3, r3, r9
 800a290:	f04f 0000 	mov.w	r0, #0
 800a294:	f04f 0100 	mov.w	r1, #0
 800a298:	0299      	lsls	r1, r3, #10
 800a29a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a29e:	0290      	lsls	r0, r2, #10
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	f7f6 fcfa 	bl	8000ca8 <__aeabi_uldivmod>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e04a      	b.n	800a354 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2be:	4b31      	ldr	r3, [pc, #196]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	099b      	lsrs	r3, r3, #6
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f04f 0300 	mov.w	r3, #0
 800a2ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a2ce:	f04f 0100 	mov.w	r1, #0
 800a2d2:	ea02 0400 	and.w	r4, r2, r0
 800a2d6:	ea03 0501 	and.w	r5, r3, r1
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	014b      	lsls	r3, r1, #5
 800a2e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a2ec:	0142      	lsls	r2, r0, #5
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	1b00      	subs	r0, r0, r4
 800a2f4:	eb61 0105 	sbc.w	r1, r1, r5
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	018b      	lsls	r3, r1, #6
 800a302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a306:	0182      	lsls	r2, r0, #6
 800a308:	1a12      	subs	r2, r2, r0
 800a30a:	eb63 0301 	sbc.w	r3, r3, r1
 800a30e:	f04f 0000 	mov.w	r0, #0
 800a312:	f04f 0100 	mov.w	r1, #0
 800a316:	00d9      	lsls	r1, r3, #3
 800a318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a31c:	00d0      	lsls	r0, r2, #3
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	1912      	adds	r2, r2, r4
 800a324:	eb45 0303 	adc.w	r3, r5, r3
 800a328:	f04f 0000 	mov.w	r0, #0
 800a32c:	f04f 0100 	mov.w	r1, #0
 800a330:	0299      	lsls	r1, r3, #10
 800a332:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a336:	0290      	lsls	r0, r2, #10
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4610      	mov	r0, r2
 800a33e:	4619      	mov	r1, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	461a      	mov	r2, r3
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	f7f6 fcae 	bl	8000ca8 <__aeabi_uldivmod>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4613      	mov	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a354:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	0c1b      	lsrs	r3, r3, #16
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	3301      	adds	r3, #1
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36c:	60bb      	str	r3, [r7, #8]
      break;
 800a36e:	e002      	b.n	800a376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a370:	4b05      	ldr	r3, [pc, #20]	; (800a388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a372:	60bb      	str	r3, [r7, #8]
      break;
 800a374:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a376:	68bb      	ldr	r3, [r7, #8]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a382:	bf00      	nop
 800a384:	40023800 	.word	0x40023800
 800a388:	00f42400 	.word	0x00f42400

0800a38c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a390:	4b03      	ldr	r3, [pc, #12]	; (800a3a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a392:	681b      	ldr	r3, [r3, #0]
}
 800a394:	4618      	mov	r0, r3
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20000088 	.word	0x20000088

0800a3a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a3a8:	f7ff fff0 	bl	800a38c <HAL_RCC_GetHCLKFreq>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	0a9b      	lsrs	r3, r3, #10
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	4903      	ldr	r1, [pc, #12]	; (800a3c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3ba:	5ccb      	ldrb	r3, [r1, r3]
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	08018bac 	.word	0x08018bac

0800a3cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a3d0:	f7ff ffdc 	bl	800a38c <HAL_RCC_GetHCLKFreq>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	0b5b      	lsrs	r3, r3, #13
 800a3dc:	f003 0307 	and.w	r3, r3, #7
 800a3e0:	4903      	ldr	r1, [pc, #12]	; (800a3f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3e2:	5ccb      	ldrb	r3, [r1, r3]
 800a3e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	08018bac 	.word	0x08018bac

0800a3f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	220f      	movs	r2, #15
 800a402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a404:	4b12      	ldr	r3, [pc, #72]	; (800a450 <HAL_RCC_GetClockConfig+0x5c>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 0203 	and.w	r2, r3, #3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <HAL_RCC_GetClockConfig+0x5c>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a41c:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <HAL_RCC_GetClockConfig+0x5c>)
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <HAL_RCC_GetClockConfig+0x5c>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	08db      	lsrs	r3, r3, #3
 800a42e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a436:	4b07      	ldr	r3, [pc, #28]	; (800a454 <HAL_RCC_GetClockConfig+0x60>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 020f 	and.w	r2, r3, #15
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	601a      	str	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40023800 	.word	0x40023800
 800a454:	40023c00 	.word	0x40023c00

0800a458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d105      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d075      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a48c:	4bad      	ldr	r3, [pc, #692]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a492:	f7fd faa3 	bl	80079dc <HAL_GetTick>
 800a496:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a498:	e008      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a49a:	f7fd fa9f 	bl	80079dc <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e18b      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4ac:	4ba6      	ldr	r3, [pc, #664]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1f0      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d009      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	019a      	lsls	r2, r3, #6
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	071b      	lsls	r3, r3, #28
 800a4d0:	499d      	ldr	r1, [pc, #628]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01f      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4e4:	4b98      	ldr	r3, [pc, #608]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ea:	0f1b      	lsrs	r3, r3, #28
 800a4ec:	f003 0307 	and.w	r3, r3, #7
 800a4f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	019a      	lsls	r2, r3, #6
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	431a      	orrs	r2, r3
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	071b      	lsls	r3, r3, #28
 800a504:	4990      	ldr	r1, [pc, #576]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a506:	4313      	orrs	r3, r2
 800a508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a50c:	4b8e      	ldr	r3, [pc, #568]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a512:	f023 021f 	bic.w	r2, r3, #31
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	498a      	ldr	r1, [pc, #552]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00d      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	019a      	lsls	r2, r3, #6
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	061b      	lsls	r3, r3, #24
 800a53c:	431a      	orrs	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	071b      	lsls	r3, r3, #28
 800a544:	4980      	ldr	r1, [pc, #512]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a54c:	4b7d      	ldr	r3, [pc, #500]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a54e:	2201      	movs	r2, #1
 800a550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a552:	f7fd fa43 	bl	80079dc <HAL_GetTick>
 800a556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a558:	e008      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a55a:	f7fd fa3f 	bl	80079dc <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d901      	bls.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e12b      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a56c:	4b76      	ldr	r3, [pc, #472]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0f0      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d079      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a590:	4b6e      	ldr	r3, [pc, #440]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a596:	f7fd fa21 	bl	80079dc <HAL_GetTick>
 800a59a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a59e:	f7fd fa1d 	bl	80079dc <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e109      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a5b0:	4b65      	ldr	r3, [pc, #404]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5bc:	d0ef      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0304 	and.w	r3, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d020      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a5ca:	4b5f      	ldr	r3, [pc, #380]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d0:	0f1b      	lsrs	r3, r3, #28
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	019a      	lsls	r2, r3, #6
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	061b      	lsls	r3, r3, #24
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	4957      	ldr	r1, [pc, #348]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a5f2:	4b55      	ldr	r3, [pc, #340]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	3b01      	subs	r3, #1
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	4950      	ldr	r1, [pc, #320]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a606:	4313      	orrs	r3, r2
 800a608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d01e      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a618:	4b4b      	ldr	r3, [pc, #300]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61e:	0e1b      	lsrs	r3, r3, #24
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	019a      	lsls	r2, r3, #6
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	061b      	lsls	r3, r3, #24
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	071b      	lsls	r3, r3, #28
 800a638:	4943      	ldr	r1, [pc, #268]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a63a:	4313      	orrs	r3, r2
 800a63c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a640:	4b41      	ldr	r3, [pc, #260]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	493e      	ldr	r1, [pc, #248]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a650:	4313      	orrs	r3, r2
 800a652:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a656:	4b3d      	ldr	r3, [pc, #244]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a658:	2201      	movs	r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a65c:	f7fd f9be 	bl	80079dc <HAL_GetTick>
 800a660:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a662:	e008      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a664:	f7fd f9ba 	bl	80079dc <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d901      	bls.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e0a6      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a676:	4b34      	ldr	r3, [pc, #208]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a682:	d1ef      	bne.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 808d 	beq.w	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	4a2b      	ldr	r2, [pc, #172]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a69c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6a0:	6413      	str	r3, [r2, #64]	; 0x40
 800a6a2:	4b29      	ldr	r3, [pc, #164]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a6ae:	4b28      	ldr	r3, [pc, #160]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a27      	ldr	r2, [pc, #156]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6ba:	f7fd f98f 	bl	80079dc <HAL_GetTick>
 800a6be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a6c0:	e008      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a6c2:	f7fd f98b 	bl	80079dc <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d901      	bls.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e077      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a6d4:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0f0      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a6e0:	4b19      	ldr	r3, [pc, #100]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d039      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d032      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6fe:	4b12      	ldr	r3, [pc, #72]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a706:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a708:	4b12      	ldr	r3, [pc, #72]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a70e:	4b11      	ldr	r3, [pc, #68]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a714:	4a0c      	ldr	r2, [pc, #48]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b01      	cmp	r3, #1
 800a724:	d11e      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a726:	f7fd f959 	bl	80079dc <HAL_GetTick>
 800a72a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a72c:	e014      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a72e:	f7fd f955 	bl	80079dc <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	f241 3288 	movw	r2, #5000	; 0x1388
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d90b      	bls.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e03f      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a744:	42470068 	.word	0x42470068
 800a748:	40023800 	.word	0x40023800
 800a74c:	42470070 	.word	0x42470070
 800a750:	40007000 	.word	0x40007000
 800a754:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a758:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0e4      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a770:	d10d      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a772:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a786:	4911      	ldr	r1, [pc, #68]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	608b      	str	r3, [r1, #8]
 800a78c:	e005      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a78e:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	4a0e      	ldr	r2, [pc, #56]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a794:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a798:	6093      	str	r3, [r2, #8]
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a79c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a6:	4909      	ldr	r1, [pc, #36]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0310 	and.w	r3, r3, #16
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a7be:	4b04      	ldr	r3, [pc, #16]	; (800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a7c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40023800 	.word	0x40023800
 800a7d0:	424711e0 	.word	0x424711e0

0800a7d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e083      	b.n	800a8ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7f5b      	ldrb	r3, [r3, #29]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d105      	bne.n	800a7fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7f8 f866 	bl	80028c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	22ca      	movs	r2, #202	; 0xca
 800a808:	625a      	str	r2, [r3, #36]	; 0x24
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2253      	movs	r2, #83	; 0x53
 800a810:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fc30 	bl	800b078 <RTC_EnterInitMode>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d008      	beq.n	800a830 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	22ff      	movs	r2, #255	; 0xff
 800a824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e05e      	b.n	800a8ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a842:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6899      	ldr	r1, [r3, #8]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	431a      	orrs	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	430a      	orrs	r2, r1
 800a860:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	68d2      	ldr	r2, [r2, #12]
 800a86a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6919      	ldr	r1, [r3, #16]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	041a      	lsls	r2, r3, #16
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a88e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10e      	bne.n	800a8bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fbc2 	bl	800b028 <HAL_RTC_WaitForSynchro>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d008      	beq.n	800a8bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	22ff      	movs	r2, #255	; 0xff
 800a8b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e018      	b.n	800a8ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	22ff      	movs	r2, #255	; 0xff
 800a8e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
  }
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a8f6:	b590      	push	{r4, r7, lr}
 800a8f8:	b087      	sub	sp, #28
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	7f1b      	ldrb	r3, [r3, #28]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_RTC_SetTime+0x1c>
 800a90e:	2302      	movs	r3, #2
 800a910:	e0aa      	b.n	800aa68 <HAL_RTC_SetTime+0x172>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2201      	movs	r2, #1
 800a916:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2202      	movs	r2, #2
 800a91c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d126      	bne.n	800a972 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fbc7 	bl	800b0d0 <RTC_ByteToBcd2>
 800a942:	4603      	mov	r3, r0
 800a944:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	785b      	ldrb	r3, [r3, #1]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fbc0 	bl	800b0d0 <RTC_ByteToBcd2>
 800a950:	4603      	mov	r3, r0
 800a952:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a954:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	789b      	ldrb	r3, [r3, #2]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 fbb8 	bl	800b0d0 <RTC_ByteToBcd2>
 800a960:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a962:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	78db      	ldrb	r3, [r3, #3]
 800a96a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e018      	b.n	800a9a4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2200      	movs	r2, #0
 800a984:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a992:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a998:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	78db      	ldrb	r3, [r3, #3]
 800a99e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	22ca      	movs	r2, #202	; 0xca
 800a9aa:	625a      	str	r2, [r3, #36]	; 0x24
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2253      	movs	r2, #83	; 0x53
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fb5f 	bl	800b078 <RTC_EnterInitMode>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	22ff      	movs	r2, #255	; 0xff
 800a9c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2204      	movs	r2, #4
 800a9cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e047      	b.n	800aa68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a9e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a9e6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9f6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6899      	ldr	r1, [r3, #8]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0320 	and.w	r3, r3, #32
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d111      	bne.n	800aa52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fafa 	bl	800b028 <HAL_RTC_WaitForSynchro>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00b      	beq.n	800aa52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	22ff      	movs	r2, #255	; 0xff
 800aa40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2204      	movs	r2, #4
 800aa46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e00a      	b.n	800aa68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	22ff      	movs	r2, #255	; 0xff
 800aa58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800aa66:	2300      	movs	r3, #0
  }
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	371c      	adds	r7, #28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd90      	pop	{r4, r7, pc}

0800aa70 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aaa2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aaa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	0c1b      	lsrs	r3, r3, #16
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11a      	bne.n	800ab22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fb0b 	bl	800b10c <RTC_Bcd2ToByte>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	785b      	ldrb	r3, [r3, #1]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fb02 	bl	800b10c <RTC_Bcd2ToByte>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	789b      	ldrb	r3, [r3, #2]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 faf9 	bl	800b10c <RTC_Bcd2ToByte>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ab2c:	b590      	push	{r4, r7, lr}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	7f1b      	ldrb	r3, [r3, #28]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d101      	bne.n	800ab48 <HAL_RTC_SetDate+0x1c>
 800ab44:	2302      	movs	r3, #2
 800ab46:	e094      	b.n	800ac72 <HAL_RTC_SetDate+0x146>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2202      	movs	r2, #2
 800ab52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10e      	bne.n	800ab78 <HAL_RTC_SetDate+0x4c>
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	f003 0310 	and.w	r3, r3, #16
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d008      	beq.n	800ab78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	785b      	ldrb	r3, [r3, #1]
 800ab6a:	f023 0310 	bic.w	r3, r3, #16
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	330a      	adds	r3, #10
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d11c      	bne.n	800abb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	78db      	ldrb	r3, [r3, #3]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 faa4 	bl	800b0d0 <RTC_ByteToBcd2>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	785b      	ldrb	r3, [r3, #1]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 fa9d 	bl	800b0d0 <RTC_ByteToBcd2>
 800ab96:	4603      	mov	r3, r0
 800ab98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ab9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	789b      	ldrb	r3, [r3, #2]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fa95 	bl	800b0d0 <RTC_ByteToBcd2>
 800aba6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800aba8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]
 800abb6:	e00e      	b.n	800abd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	78db      	ldrb	r3, [r3, #3]
 800abbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	785b      	ldrb	r3, [r3, #1]
 800abc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800abc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800abca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800abd2:	4313      	orrs	r3, r2
 800abd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	22ca      	movs	r2, #202	; 0xca
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2253      	movs	r2, #83	; 0x53
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fa46 	bl	800b078 <RTC_EnterInitMode>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00b      	beq.n	800ac0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	22ff      	movs	r2, #255	; 0xff
 800abf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2204      	movs	r2, #4
 800abfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e033      	b.n	800ac72 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d111      	bne.n	800ac5c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f000 f9f5 	bl	800b028 <HAL_RTC_WaitForSynchro>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	22ff      	movs	r2, #255	; 0xff
 800ac4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2204      	movs	r2, #4
 800ac50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e00a      	b.n	800ac72 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ac70:	2300      	movs	r3, #0
  }
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd90      	pop	{r4, r7, pc}

0800ac7a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b086      	sub	sp, #24
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	0c1b      	lsrs	r3, r3, #16
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	0a1b      	lsrs	r3, r3, #8
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	0b5b      	lsrs	r3, r3, #13
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	b2da      	uxtb	r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11a      	bne.n	800ad0e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	78db      	ldrb	r3, [r3, #3]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fa15 	bl	800b10c <RTC_Bcd2ToByte>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fa0c 	bl	800b10c <RTC_Bcd2ToByte>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	789b      	ldrb	r3, [r3, #2]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fa03 	bl	800b10c <RTC_Bcd2ToByte>
 800ad06:	4603      	mov	r3, r0
 800ad08:	461a      	mov	r2, r3
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ad18:	b590      	push	{r4, r7, lr}
 800ad1a:	b089      	sub	sp, #36	; 0x24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800ad2c:	4b93      	ldr	r3, [pc, #588]	; (800af7c <HAL_RTC_SetAlarm_IT+0x264>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a93      	ldr	r2, [pc, #588]	; (800af80 <HAL_RTC_SetAlarm_IT+0x268>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	0adb      	lsrs	r3, r3, #11
 800ad38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	7f1b      	ldrb	r3, [r3, #28]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <HAL_RTC_SetAlarm_IT+0x36>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e111      	b.n	800af72 <HAL_RTC_SetAlarm_IT+0x25a>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2202      	movs	r2, #2
 800ad58:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d137      	bne.n	800add0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d102      	bne.n	800ad74 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2200      	movs	r2, #0
 800ad72:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 f9a9 	bl	800b0d0 <RTC_ByteToBcd2>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f9a2 	bl	800b0d0 <RTC_ByteToBcd2>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad90:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	789b      	ldrb	r3, [r3, #2]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f99a 	bl	800b0d0 <RTC_ByteToBcd2>
 800ad9c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	78db      	ldrb	r3, [r3, #3]
 800ada6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ada8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f98c 	bl	800b0d0 <RTC_ByteToBcd2>
 800adb8:	4603      	mov	r3, r0
 800adba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800adbc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800adc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800adca:	4313      	orrs	r3, r2
 800adcc:	61fb      	str	r3, [r7, #28]
 800adce:	e023      	b.n	800ae18 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2200      	movs	r2, #0
 800ade2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800adf0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800adf6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	78db      	ldrb	r3, [r3, #3]
 800adfc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800adfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ae08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ae0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ae14:	4313      	orrs	r3, r2
 800ae16:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	22ca      	movs	r2, #202	; 0xca
 800ae2a:	625a      	str	r2, [r3, #36]	; 0x24
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2253      	movs	r2, #83	; 0x53
 800ae32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3c:	d141      	bne.n	800aec2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae4c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800ae5e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	1e5a      	subs	r2, r3, #1
 800ae64:	617a      	str	r2, [r7, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10b      	bne.n	800ae82 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	22ff      	movs	r2, #255	; 0xff
 800ae70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2203      	movs	r2, #3
 800ae76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e077      	b.n	800af72 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0e7      	beq.n	800ae60 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	69fa      	ldr	r2, [r7, #28]
 800ae96:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	69ba      	ldr	r2, [r7, #24]
 800ae9e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aeae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689a      	ldr	r2, [r3, #8]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	e040      	b.n	800af44 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	689a      	ldr	r2, [r3, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aed0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f462 7220 	orn	r2, r2, #640	; 0x280
 800aee2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	1e5a      	subs	r2, r3, #1
 800aee8:	617a      	str	r2, [r7, #20]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10b      	bne.n	800af06 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	22ff      	movs	r2, #255	; 0xff
 800aef4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2203      	movs	r2, #3
 800aefa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e035      	b.n	800af72 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d0e7      	beq.n	800aee4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69fa      	ldr	r2, [r7, #28]
 800af1a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af32:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af42:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a0e      	ldr	r2, [pc, #56]	; (800af84 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af4e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800af50:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	4a0b      	ldr	r2, [pc, #44]	; (800af84 <HAL_RTC_SetAlarm_IT+0x26c>)
 800af56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af5a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	22ff      	movs	r2, #255	; 0xff
 800af62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3724      	adds	r7, #36	; 0x24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd90      	pop	{r4, r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000088 	.word	0x20000088
 800af80:	10624dd3 	.word	0x10624dd3
 800af84:	40013c00 	.word	0x40013c00

0800af88 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d012      	beq.n	800afc4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00b      	beq.n	800afc4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f831 	bl	800b014 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800afc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d012      	beq.n	800aff8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f9fb 	bl	800b3dc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	b2da      	uxtb	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800aff6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800aff8:	4b05      	ldr	r3, [pc, #20]	; (800b010 <HAL_RTC_AlarmIRQHandler+0x88>)
 800affa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800affe:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	775a      	strb	r2, [r3, #29]
}
 800b006:	bf00      	nop
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	40013c00 	.word	0x40013c00

0800b014 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b042:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b044:	f7fc fcca 	bl	80079dc <HAL_GetTick>
 800b048:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b04a:	e009      	b.n	800b060 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b04c:	f7fc fcc6 	bl	80079dc <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b05a:	d901      	bls.n	800b060 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e007      	b.n	800b070 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0ee      	beq.n	800b04c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d119      	bne.n	800b0c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f04f 32ff 	mov.w	r2, #4294967295
 800b09a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b09c:	f7fc fc9e 	bl	80079dc <HAL_GetTick>
 800b0a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b0a2:	e009      	b.n	800b0b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b0a4:	f7fc fc9a 	bl	80079dc <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0b2:	d901      	bls.n	800b0b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e007      	b.n	800b0c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0ee      	beq.n	800b0a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800b0de:	e005      	b.n	800b0ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	3b0a      	subs	r3, #10
 800b0ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	2b09      	cmp	r3, #9
 800b0f0:	d8f6      	bhi.n	800b0e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	b2db      	uxtb	r3, r3
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	091b      	lsrs	r3, r3, #4
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	461a      	mov	r2, r3
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	b2da      	uxtb	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	4413      	add	r3, r2
 800b13a:	b2db      	uxtb	r3, r3
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	7f1b      	ldrb	r3, [r3, #28]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800b15c:	2302      	movs	r3, #2
 800b15e:	e0a6      	b.n	800b2ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2202      	movs	r2, #2
 800b16a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	22ca      	movs	r2, #202	; 0xca
 800b172:	625a      	str	r2, [r3, #36]	; 0x24
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2253      	movs	r2, #83	; 0x53
 800b17a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b186:	2b00      	cmp	r3, #0
 800b188:	d022      	beq.n	800b1d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b18a:	4b4c      	ldr	r3, [pc, #304]	; (800b2bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a4c      	ldr	r2, [pc, #304]	; (800b2c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b190:	fba2 2303 	umull	r2, r3, r2, r3
 800b194:	0adb      	lsrs	r3, r3, #11
 800b196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b19a:	fb02 f303 	mul.w	r3, r2, r3
 800b19e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	1e5a      	subs	r2, r3, #1
 800b1a4:	617a      	str	r2, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10b      	bne.n	800b1c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	22ff      	movs	r2, #255	; 0xff
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2203      	movs	r2, #3
 800b1b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e075      	b.n	800b2ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e7      	bne.n	800b1a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1de:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b1e0:	4b36      	ldr	r3, [pc, #216]	; (800b2bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a36      	ldr	r2, [pc, #216]	; (800b2c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ea:	0adb      	lsrs	r3, r3, #11
 800b1ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1f0:	fb02 f303 	mul.w	r3, r2, r3
 800b1f4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	1e5a      	subs	r2, r3, #1
 800b1fa:	617a      	str	r2, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	22ff      	movs	r2, #255	; 0xff
 800b206:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2203      	movs	r2, #3
 800b20c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e04a      	b.n	800b2ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	f003 0304 	and.w	r3, r3, #4
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0e7      	beq.n	800b1f6 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689a      	ldr	r2, [r3, #8]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0207 	bic.w	r2, r2, #7
 800b23c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6899      	ldr	r1, [r3, #8]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b24e:	4b1d      	ldr	r3, [pc, #116]	; (800b2c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1c      	ldr	r2, [pc, #112]	; (800b2c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b258:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800b25a:	4b1a      	ldr	r3, [pc, #104]	; (800b2c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	4a19      	ldr	r2, [pc, #100]	; (800b2c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b264:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b276:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b286:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689a      	ldr	r2, [r3, #8]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b296:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	22ff      	movs	r2, #255	; 0xff
 800b29e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000088 	.word	0x20000088
 800b2c0:	10624dd3 	.word	0x10624dd3
 800b2c4:	40013c00 	.word	0x40013c00

0800b2c8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7f1b      	ldrb	r3, [r3, #28]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e047      	b.n	800b370 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	22ca      	movs	r2, #202	; 0xca
 800b2f2:	625a      	str	r2, [r3, #36]	; 0x24
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2253      	movs	r2, #83	; 0x53
 800b2fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689a      	ldr	r2, [r3, #8]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b31a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b31c:	f7fc fb5e 	bl	80079dc <HAL_GetTick>
 800b320:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b322:	e013      	b.n	800b34c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b324:	f7fc fb5a 	bl	80079dc <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b332:	d90b      	bls.n	800b34c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	22ff      	movs	r2, #255	; 0xff
 800b33a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2203      	movs	r2, #3
 800b340:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e011      	b.n	800b370 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f003 0304 	and.w	r3, r3, #4
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0e4      	beq.n	800b324 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	22ff      	movs	r2, #255	; 0xff
 800b360:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b378:	b480      	push	{r7}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3350      	adds	r3, #80	; 0x50
 800b38e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	4413      	add	r3, r2
 800b398:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	601a      	str	r2, [r3, #0]
}
 800b3a0:	bf00      	nop
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3350      	adds	r3, #80	; 0x50
 800b3c0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e07b      	b.n	800b4fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d108      	bne.n	800b41c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b412:	d009      	beq.n	800b428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	61da      	str	r2, [r3, #28]
 800b41a:	e005      	b.n	800b428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7f7 fd38 	bl	8002eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b45e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b470:	431a      	orrs	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	431a      	orrs	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b498:	431a      	orrs	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ac:	ea42 0103 	orr.w	r1, r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	0c1b      	lsrs	r3, r3, #16
 800b4c6:	f003 0104 	and.w	r1, r3, #4
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	f003 0210 	and.w	r2, r3, #16
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	69da      	ldr	r2, [r3, #28]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b088      	sub	sp, #32
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	603b      	str	r3, [r7, #0]
 800b50e:	4613      	mov	r3, r2
 800b510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d101      	bne.n	800b524 <HAL_SPI_Transmit+0x22>
 800b520:	2302      	movs	r3, #2
 800b522:	e126      	b.n	800b772 <HAL_SPI_Transmit+0x270>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b52c:	f7fc fa56 	bl	80079dc <HAL_GetTick>
 800b530:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b532:	88fb      	ldrh	r3, [r7, #6]
 800b534:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d002      	beq.n	800b548 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b542:	2302      	movs	r3, #2
 800b544:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b546:	e10b      	b.n	800b760 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <HAL_SPI_Transmit+0x52>
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b558:	e102      	b.n	800b760 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2203      	movs	r2, #3
 800b55e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	88fa      	ldrh	r2, [r7, #6]
 800b572:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	88fa      	ldrh	r2, [r7, #6]
 800b578:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a0:	d10f      	bne.n	800b5c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5cc:	2b40      	cmp	r3, #64	; 0x40
 800b5ce:	d007      	beq.n	800b5e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5e8:	d14b      	bne.n	800b682 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_SPI_Transmit+0xf6>
 800b5f2:	8afb      	ldrh	r3, [r7, #22]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d13e      	bne.n	800b676 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fc:	881a      	ldrh	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b608:	1c9a      	adds	r2, r3, #2
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b612:	b29b      	uxth	r3, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b61c:	e02b      	b.n	800b676 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d112      	bne.n	800b652 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b630:	881a      	ldrh	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63c:	1c9a      	adds	r2, r3, #2
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b646:	b29b      	uxth	r3, r3
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b650:	e011      	b.n	800b676 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b652:	f7fc f9c3 	bl	80079dc <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d803      	bhi.n	800b66a <HAL_SPI_Transmit+0x168>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d102      	bne.n	800b670 <HAL_SPI_Transmit+0x16e>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b674:	e074      	b.n	800b760 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1ce      	bne.n	800b61e <HAL_SPI_Transmit+0x11c>
 800b680:	e04c      	b.n	800b71c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <HAL_SPI_Transmit+0x18e>
 800b68a:	8afb      	ldrh	r3, [r7, #22]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d140      	bne.n	800b712 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b6b6:	e02c      	b.n	800b712 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d113      	bne.n	800b6ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	7812      	ldrb	r2, [r2, #0]
 800b6d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6ec:	e011      	b.n	800b712 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ee:	f7fc f975 	bl	80079dc <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d803      	bhi.n	800b706 <HAL_SPI_Transmit+0x204>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d102      	bne.n	800b70c <HAL_SPI_Transmit+0x20a>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b710:	e026      	b.n	800b760 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1cd      	bne.n	800b6b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 fbcb 	bl	800bebc <SPI_EndRxTxTransaction>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2220      	movs	r2, #32
 800b730:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	613b      	str	r3, [r7, #16]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	613b      	str	r3, [r7, #16]
 800b74e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	77fb      	strb	r3, [r7, #31]
 800b75c:	e000      	b.n	800b760 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b75e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b770:	7ffb      	ldrb	r3, [r7, #31]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b088      	sub	sp, #32
 800b77e:	af02      	add	r7, sp, #8
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	603b      	str	r3, [r7, #0]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b796:	d112      	bne.n	800b7be <HAL_SPI_Receive+0x44>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10e      	bne.n	800b7be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2204      	movs	r2, #4
 800b7a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b7a8:	88fa      	ldrh	r2, [r7, #6]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 f8f1 	bl	800b99c <HAL_SPI_TransmitReceive>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	e0ea      	b.n	800b994 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_SPI_Receive+0x52>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e0e3      	b.n	800b994 <HAL_SPI_Receive+0x21a>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b7d4:	f7fc f902 	bl	80079dc <HAL_GetTick>
 800b7d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d002      	beq.n	800b7ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b7ea:	e0ca      	b.n	800b982 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <HAL_SPI_Receive+0x7e>
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b7fc:	e0c1      	b.n	800b982 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2204      	movs	r2, #4
 800b802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	88fa      	ldrh	r2, [r7, #6]
 800b816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	88fa      	ldrh	r2, [r7, #6]
 800b81c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b844:	d10f      	bne.n	800b866 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b864:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d007      	beq.n	800b884 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b882:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d162      	bne.n	800b952 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b88c:	e02e      	b.n	800b8ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d115      	bne.n	800b8c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f103 020c 	add.w	r2, r3, #12
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	7812      	ldrb	r2, [r2, #0]
 800b8aa:	b2d2      	uxtb	r2, r2
 800b8ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8c6:	e011      	b.n	800b8ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8c8:	f7fc f888 	bl	80079dc <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d803      	bhi.n	800b8e0 <HAL_SPI_Receive+0x166>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8de:	d102      	bne.n	800b8e6 <HAL_SPI_Receive+0x16c>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d102      	bne.n	800b8ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b8ea:	e04a      	b.n	800b982 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1cb      	bne.n	800b88e <HAL_SPI_Receive+0x114>
 800b8f6:	e031      	b.n	800b95c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b01      	cmp	r3, #1
 800b904:	d113      	bne.n	800b92e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68da      	ldr	r2, [r3, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b910:	b292      	uxth	r2, r2
 800b912:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	1c9a      	adds	r2, r3, #2
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b92c:	e011      	b.n	800b952 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b92e:	f7fc f855 	bl	80079dc <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d803      	bhi.n	800b946 <HAL_SPI_Receive+0x1cc>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b944:	d102      	bne.n	800b94c <HAL_SPI_Receive+0x1d2>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b950:	e017      	b.n	800b982 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b956:	b29b      	uxth	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1cd      	bne.n	800b8f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 fa45 	bl	800bdf0 <SPI_EndRxTransaction>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2220      	movs	r2, #32
 800b970:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	75fb      	strb	r3, [r7, #23]
 800b97e:	e000      	b.n	800b982 <HAL_SPI_Receive+0x208>
  }

error :
 800b980:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	; 0x30
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_SPI_TransmitReceive+0x26>
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e18a      	b.n	800bcd8 <HAL_SPI_TransmitReceive+0x33c>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9ca:	f7fc f807 	bl	80079dc <HAL_GetTick>
 800b9ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b9e0:	887b      	ldrh	r3, [r7, #2]
 800b9e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b9e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d00f      	beq.n	800ba0c <HAL_SPI_TransmitReceive+0x70>
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9f2:	d107      	bne.n	800ba04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d103      	bne.n	800ba04 <HAL_SPI_TransmitReceive+0x68>
 800b9fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba00:	2b04      	cmp	r3, #4
 800ba02:	d003      	beq.n	800ba0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ba04:	2302      	movs	r3, #2
 800ba06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba0a:	e15b      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <HAL_SPI_TransmitReceive+0x82>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_SPI_TransmitReceive+0x82>
 800ba18:	887b      	ldrh	r3, [r7, #2]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d103      	bne.n	800ba26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ba24:	e14e      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	d003      	beq.n	800ba3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2205      	movs	r2, #5
 800ba36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	887a      	ldrh	r2, [r7, #2]
 800ba4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	887a      	ldrh	r2, [r7, #2]
 800ba50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	887a      	ldrh	r2, [r7, #2]
 800ba5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	887a      	ldrh	r2, [r7, #2]
 800ba62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7a:	2b40      	cmp	r3, #64	; 0x40
 800ba7c:	d007      	beq.n	800ba8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba96:	d178      	bne.n	800bb8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_SPI_TransmitReceive+0x10a>
 800baa0:	8b7b      	ldrh	r3, [r7, #26]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d166      	bne.n	800bb74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	881a      	ldrh	r2, [r3, #0]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	1c9a      	adds	r2, r3, #2
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baca:	e053      	b.n	800bb74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d11b      	bne.n	800bb12 <HAL_SPI_TransmitReceive+0x176>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bade:	b29b      	uxth	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d016      	beq.n	800bb12 <HAL_SPI_TransmitReceive+0x176>
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d113      	bne.n	800bb12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	881a      	ldrh	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafa:	1c9a      	adds	r2, r3, #2
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d119      	bne.n	800bb54 <HAL_SPI_TransmitReceive+0x1b8>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d014      	beq.n	800bb54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb34:	b292      	uxth	r2, r2
 800bb36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	1c9a      	adds	r2, r3, #2
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb50:	2301      	movs	r3, #1
 800bb52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bb54:	f7fb ff42 	bl	80079dc <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d807      	bhi.n	800bb74 <HAL_SPI_TransmitReceive+0x1d8>
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6a:	d003      	beq.n	800bb74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb72:	e0a7      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1a6      	bne.n	800bacc <HAL_SPI_TransmitReceive+0x130>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1a1      	bne.n	800bacc <HAL_SPI_TransmitReceive+0x130>
 800bb88:	e07c      	b.n	800bc84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <HAL_SPI_TransmitReceive+0x1fc>
 800bb92:	8b7b      	ldrh	r3, [r7, #26]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d16b      	bne.n	800bc70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	330c      	adds	r3, #12
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbbe:	e057      	b.n	800bc70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d11c      	bne.n	800bc08 <HAL_SPI_TransmitReceive+0x26c>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <HAL_SPI_TransmitReceive+0x26c>
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d114      	bne.n	800bc08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	330c      	adds	r3, #12
 800bbe8:	7812      	ldrb	r2, [r2, #0]
 800bbea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d119      	bne.n	800bc4a <HAL_SPI_TransmitReceive+0x2ae>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d014      	beq.n	800bc4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc46:	2301      	movs	r3, #1
 800bc48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bc4a:	f7fb fec7 	bl	80079dc <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d803      	bhi.n	800bc62 <HAL_SPI_TransmitReceive+0x2c6>
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d102      	bne.n	800bc68 <HAL_SPI_TransmitReceive+0x2cc>
 800bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bc6e:	e029      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1a2      	bne.n	800bbc0 <HAL_SPI_TransmitReceive+0x224>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d19d      	bne.n	800bbc0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f917 	bl	800bebc <SPI_EndRxTxTransaction>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d006      	beq.n	800bca2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bca0:	e010      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	617b      	str	r3, [r7, #20]
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	e000      	b.n	800bcc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bcc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bcd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3730      	adds	r7, #48	; 0x30
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bcf0:	f7fb fe74 	bl	80079dc <HAL_GetTick>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	1a9b      	subs	r3, r3, r2
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd00:	f7fb fe6c 	bl	80079dc <HAL_GetTick>
 800bd04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd06:	4b39      	ldr	r3, [pc, #228]	; (800bdec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	015b      	lsls	r3, r3, #5
 800bd0c:	0d1b      	lsrs	r3, r3, #20
 800bd0e:	69fa      	ldr	r2, [r7, #28]
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd16:	e054      	b.n	800bdc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1e:	d050      	beq.n	800bdc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd20:	f7fb fe5c 	bl	80079dc <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d902      	bls.n	800bd36 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d13d      	bne.n	800bdb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd4e:	d111      	bne.n	800bd74 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd58:	d004      	beq.n	800bd64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd62:	d107      	bne.n	800bd74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd7c:	d10f      	bne.n	800bd9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e017      	b.n	800bde2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	bf0c      	ite	eq
 800bdd2:	2301      	moveq	r3, #1
 800bdd4:	2300      	movne	r3, #0
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	461a      	mov	r2, r3
 800bdda:	79fb      	ldrb	r3, [r7, #7]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d19b      	bne.n	800bd18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3720      	adds	r7, #32
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20000088 	.word	0x20000088

0800bdf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be04:	d111      	bne.n	800be2a <SPI_EndRxTransaction+0x3a>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be0e:	d004      	beq.n	800be1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be18:	d107      	bne.n	800be2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be32:	d12a      	bne.n	800be8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be3c:	d012      	beq.n	800be64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2200      	movs	r2, #0
 800be46:	2180      	movs	r1, #128	; 0x80
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7ff ff49 	bl	800bce0 <SPI_WaitFlagStateUntilTimeout>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d02d      	beq.n	800beb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be58:	f043 0220 	orr.w	r2, r3, #32
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e026      	b.n	800beb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2200      	movs	r2, #0
 800be6c:	2101      	movs	r1, #1
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7ff ff36 	bl	800bce0 <SPI_WaitFlagStateUntilTimeout>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d01a      	beq.n	800beb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7e:	f043 0220 	orr.w	r2, r3, #32
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e013      	b.n	800beb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2200      	movs	r2, #0
 800be92:	2101      	movs	r1, #1
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7ff ff23 	bl	800bce0 <SPI_WaitFlagStateUntilTimeout>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d007      	beq.n	800beb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea4:	f043 0220 	orr.w	r2, r3, #32
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e000      	b.n	800beb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bec8:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <SPI_EndRxTxTransaction+0x7c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a1b      	ldr	r2, [pc, #108]	; (800bf3c <SPI_EndRxTxTransaction+0x80>)
 800bece:	fba2 2303 	umull	r2, r3, r2, r3
 800bed2:	0d5b      	lsrs	r3, r3, #21
 800bed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bed8:	fb02 f303 	mul.w	r3, r2, r3
 800bedc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bee6:	d112      	bne.n	800bf0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2200      	movs	r2, #0
 800bef0:	2180      	movs	r1, #128	; 0x80
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff fef4 	bl	800bce0 <SPI_WaitFlagStateUntilTimeout>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d016      	beq.n	800bf2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	f043 0220 	orr.w	r2, r3, #32
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e00f      	b.n	800bf2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00a      	beq.n	800bf2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf24:	2b80      	cmp	r3, #128	; 0x80
 800bf26:	d0f2      	beq.n	800bf0e <SPI_EndRxTxTransaction+0x52>
 800bf28:	e000      	b.n	800bf2c <SPI_EndRxTxTransaction+0x70>
        break;
 800bf2a:	bf00      	nop
  }

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000088 	.word	0x20000088
 800bf3c:	165e9f81 	.word	0x165e9f81

0800bf40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e041      	b.n	800bfd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d106      	bne.n	800bf6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7f7 f9ca 	bl	8003300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f000 fcea 	bl	800c958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d001      	beq.n	800bff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e04e      	b.n	800c096 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2202      	movs	r2, #2
 800bffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f042 0201 	orr.w	r2, r2, #1
 800c00e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a23      	ldr	r2, [pc, #140]	; (800c0a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d022      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c022:	d01d      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a1f      	ldr	r2, [pc, #124]	; (800c0a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d018      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1e      	ldr	r2, [pc, #120]	; (800c0ac <HAL_TIM_Base_Start_IT+0xcc>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d013      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a1c      	ldr	r2, [pc, #112]	; (800c0b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d00e      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a1b      	ldr	r2, [pc, #108]	; (800c0b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d009      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a19      	ldr	r2, [pc, #100]	; (800c0b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d004      	beq.n	800c060 <HAL_TIM_Base_Start_IT+0x80>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a18      	ldr	r2, [pc, #96]	; (800c0bc <HAL_TIM_Base_Start_IT+0xdc>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d111      	bne.n	800c084 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b06      	cmp	r3, #6
 800c070:	d010      	beq.n	800c094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0201 	orr.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c082:	e007      	b.n	800c094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	40010000 	.word	0x40010000
 800c0a8:	40000400 	.word	0x40000400
 800c0ac:	40000800 	.word	0x40000800
 800c0b0:	40000c00 	.word	0x40000c00
 800c0b4:	40010400 	.word	0x40010400
 800c0b8:	40014000 	.word	0x40014000
 800c0bc:	40001800 	.word	0x40001800

0800c0c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e041      	b.n	800c156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f839 	bl	800c15e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f000 fc2a 	bl	800c958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
	...

0800c174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d109      	bne.n	800c198 <HAL_TIM_PWM_Start+0x24>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	bf14      	ite	ne
 800c190:	2301      	movne	r3, #1
 800c192:	2300      	moveq	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	e022      	b.n	800c1de <HAL_TIM_PWM_Start+0x6a>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	d109      	bne.n	800c1b2 <HAL_TIM_PWM_Start+0x3e>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	bf14      	ite	ne
 800c1aa:	2301      	movne	r3, #1
 800c1ac:	2300      	moveq	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	e015      	b.n	800c1de <HAL_TIM_PWM_Start+0x6a>
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b08      	cmp	r3, #8
 800c1b6:	d109      	bne.n	800c1cc <HAL_TIM_PWM_Start+0x58>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	bf14      	ite	ne
 800c1c4:	2301      	movne	r3, #1
 800c1c6:	2300      	moveq	r3, #0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	e008      	b.n	800c1de <HAL_TIM_PWM_Start+0x6a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	bf14      	ite	ne
 800c1d8:	2301      	movne	r3, #1
 800c1da:	2300      	moveq	r3, #0
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e07c      	b.n	800c2e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d104      	bne.n	800c1f6 <HAL_TIM_PWM_Start+0x82>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1f4:	e013      	b.n	800c21e <HAL_TIM_PWM_Start+0xaa>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d104      	bne.n	800c206 <HAL_TIM_PWM_Start+0x92>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2202      	movs	r2, #2
 800c200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c204:	e00b      	b.n	800c21e <HAL_TIM_PWM_Start+0xaa>
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b08      	cmp	r3, #8
 800c20a:	d104      	bne.n	800c216 <HAL_TIM_PWM_Start+0xa2>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c214:	e003      	b.n	800c21e <HAL_TIM_PWM_Start+0xaa>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2201      	movs	r2, #1
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fe80 	bl	800cf2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a2d      	ldr	r2, [pc, #180]	; (800c2e8 <HAL_TIM_PWM_Start+0x174>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d004      	beq.n	800c240 <HAL_TIM_PWM_Start+0xcc>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a2c      	ldr	r2, [pc, #176]	; (800c2ec <HAL_TIM_PWM_Start+0x178>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d101      	bne.n	800c244 <HAL_TIM_PWM_Start+0xd0>
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <HAL_TIM_PWM_Start+0xd2>
 800c244:	2300      	movs	r3, #0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d007      	beq.n	800c25a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a22      	ldr	r2, [pc, #136]	; (800c2e8 <HAL_TIM_PWM_Start+0x174>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d022      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26c:	d01d      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a1f      	ldr	r2, [pc, #124]	; (800c2f0 <HAL_TIM_PWM_Start+0x17c>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d018      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a1d      	ldr	r2, [pc, #116]	; (800c2f4 <HAL_TIM_PWM_Start+0x180>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d013      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a1c      	ldr	r2, [pc, #112]	; (800c2f8 <HAL_TIM_PWM_Start+0x184>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d00e      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a16      	ldr	r2, [pc, #88]	; (800c2ec <HAL_TIM_PWM_Start+0x178>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d009      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a18      	ldr	r2, [pc, #96]	; (800c2fc <HAL_TIM_PWM_Start+0x188>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d004      	beq.n	800c2aa <HAL_TIM_PWM_Start+0x136>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a16      	ldr	r2, [pc, #88]	; (800c300 <HAL_TIM_PWM_Start+0x18c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d111      	bne.n	800c2ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f003 0307 	and.w	r3, r3, #7
 800c2b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b06      	cmp	r3, #6
 800c2ba:	d010      	beq.n	800c2de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f042 0201 	orr.w	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2cc:	e007      	b.n	800c2de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f042 0201 	orr.w	r2, r2, #1
 800c2dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	40010000 	.word	0x40010000
 800c2ec:	40010400 	.word	0x40010400
 800c2f0:	40000400 	.word	0x40000400
 800c2f4:	40000800 	.word	0x40000800
 800c2f8:	40000c00 	.word	0x40000c00
 800c2fc:	40014000 	.word	0x40014000
 800c300:	40001800 	.word	0x40001800

0800c304 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fe08 	bl	800cf2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a2e      	ldr	r2, [pc, #184]	; (800c3dc <HAL_TIM_PWM_Stop+0xd8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d004      	beq.n	800c330 <HAL_TIM_PWM_Stop+0x2c>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a2d      	ldr	r2, [pc, #180]	; (800c3e0 <HAL_TIM_PWM_Stop+0xdc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d101      	bne.n	800c334 <HAL_TIM_PWM_Stop+0x30>
 800c330:	2301      	movs	r3, #1
 800c332:	e000      	b.n	800c336 <HAL_TIM_PWM_Stop+0x32>
 800c334:	2300      	movs	r3, #0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d017      	beq.n	800c36a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6a1a      	ldr	r2, [r3, #32]
 800c340:	f241 1311 	movw	r3, #4369	; 0x1111
 800c344:	4013      	ands	r3, r2
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10f      	bne.n	800c36a <HAL_TIM_PWM_Stop+0x66>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6a1a      	ldr	r2, [r3, #32]
 800c350:	f240 4344 	movw	r3, #1092	; 0x444
 800c354:	4013      	ands	r3, r2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d107      	bne.n	800c36a <HAL_TIM_PWM_Stop+0x66>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6a1a      	ldr	r2, [r3, #32]
 800c370:	f241 1311 	movw	r3, #4369	; 0x1111
 800c374:	4013      	ands	r3, r2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10f      	bne.n	800c39a <HAL_TIM_PWM_Stop+0x96>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6a1a      	ldr	r2, [r3, #32]
 800c380:	f240 4344 	movw	r3, #1092	; 0x444
 800c384:	4013      	ands	r3, r2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d107      	bne.n	800c39a <HAL_TIM_PWM_Stop+0x96>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0201 	bic.w	r2, r2, #1
 800c398:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d104      	bne.n	800c3aa <HAL_TIM_PWM_Stop+0xa6>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3a8:	e013      	b.n	800c3d2 <HAL_TIM_PWM_Stop+0xce>
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d104      	bne.n	800c3ba <HAL_TIM_PWM_Stop+0xb6>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3b8:	e00b      	b.n	800c3d2 <HAL_TIM_PWM_Stop+0xce>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b08      	cmp	r3, #8
 800c3be:	d104      	bne.n	800c3ca <HAL_TIM_PWM_Stop+0xc6>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3c8:	e003      	b.n	800c3d2 <HAL_TIM_PWM_Stop+0xce>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400

0800c3e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d122      	bne.n	800c440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b02      	cmp	r3, #2
 800c406:	d11b      	bne.n	800c440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0202 	mvn.w	r2, #2
 800c410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa77 	bl	800c91a <HAL_TIM_IC_CaptureCallback>
 800c42c:	e005      	b.n	800c43a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa69 	bl	800c906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fa7a 	bl	800c92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	d122      	bne.n	800c494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d11b      	bne.n	800c494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f06f 0204 	mvn.w	r2, #4
 800c464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2202      	movs	r2, #2
 800c46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fa4d 	bl	800c91a <HAL_TIM_IC_CaptureCallback>
 800c480:	e005      	b.n	800c48e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa3f 	bl	800c906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fa50 	bl	800c92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0308 	and.w	r3, r3, #8
 800c49e:	2b08      	cmp	r3, #8
 800c4a0:	d122      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d11b      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0208 	mvn.w	r2, #8
 800c4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2204      	movs	r2, #4
 800c4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f003 0303 	and.w	r3, r3, #3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa23 	bl	800c91a <HAL_TIM_IC_CaptureCallback>
 800c4d4:	e005      	b.n	800c4e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa15 	bl	800c906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa26 	bl	800c92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b10      	cmp	r3, #16
 800c4f4:	d122      	bne.n	800c53c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b10      	cmp	r3, #16
 800c502:	d11b      	bne.n	800c53c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f06f 0210 	mvn.w	r2, #16
 800c50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2208      	movs	r2, #8
 800c512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f9f9 	bl	800c91a <HAL_TIM_IC_CaptureCallback>
 800c528:	e005      	b.n	800c536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f9eb 	bl	800c906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f9fc 	bl	800c92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b01      	cmp	r3, #1
 800c548:	d10e      	bne.n	800c568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b01      	cmp	r3, #1
 800c556:	d107      	bne.n	800c568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f06f 0201 	mvn.w	r2, #1
 800c560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7f6 f90c 	bl	8002780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d10e      	bne.n	800c594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c580:	2b80      	cmp	r3, #128	; 0x80
 800c582:	d107      	bne.n	800c594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fd78 	bl	800d084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59e:	2b40      	cmp	r3, #64	; 0x40
 800c5a0:	d10e      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ac:	2b40      	cmp	r3, #64	; 0x40
 800c5ae:	d107      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9c1 	bl	800c942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b20      	cmp	r3, #32
 800c5cc:	d10e      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0320 	and.w	r3, r3, #32
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0220 	mvn.w	r2, #32
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fd42 	bl	800d070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c60e:	2302      	movs	r3, #2
 800c610:	e0ae      	b.n	800c770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b0c      	cmp	r3, #12
 800c61e:	f200 809f 	bhi.w	800c760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c622:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c65d 	.word	0x0800c65d
 800c62c:	0800c761 	.word	0x0800c761
 800c630:	0800c761 	.word	0x0800c761
 800c634:	0800c761 	.word	0x0800c761
 800c638:	0800c69d 	.word	0x0800c69d
 800c63c:	0800c761 	.word	0x0800c761
 800c640:	0800c761 	.word	0x0800c761
 800c644:	0800c761 	.word	0x0800c761
 800c648:	0800c6df 	.word	0x0800c6df
 800c64c:	0800c761 	.word	0x0800c761
 800c650:	0800c761 	.word	0x0800c761
 800c654:	0800c761 	.word	0x0800c761
 800c658:	0800c71f 	.word	0x0800c71f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	4618      	mov	r0, r3
 800c664:	f000 fa18 	bl	800ca98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	699a      	ldr	r2, [r3, #24]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f042 0208 	orr.w	r2, r2, #8
 800c676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	699a      	ldr	r2, [r3, #24]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0204 	bic.w	r2, r2, #4
 800c686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	6999      	ldr	r1, [r3, #24]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	691a      	ldr	r2, [r3, #16]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	619a      	str	r2, [r3, #24]
      break;
 800c69a:	e064      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68b9      	ldr	r1, [r7, #8]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fa68 	bl	800cb78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	699a      	ldr	r2, [r3, #24]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	699a      	ldr	r2, [r3, #24]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6999      	ldr	r1, [r3, #24]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	021a      	lsls	r2, r3, #8
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	619a      	str	r2, [r3, #24]
      break;
 800c6dc:	e043      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68b9      	ldr	r1, [r7, #8]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 fabd 	bl	800cc64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	69da      	ldr	r2, [r3, #28]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f042 0208 	orr.w	r2, r2, #8
 800c6f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	69da      	ldr	r2, [r3, #28]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 0204 	bic.w	r2, r2, #4
 800c708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	69d9      	ldr	r1, [r3, #28]
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	430a      	orrs	r2, r1
 800c71a:	61da      	str	r2, [r3, #28]
      break;
 800c71c:	e023      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fb11 	bl	800cd4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	69da      	ldr	r2, [r3, #28]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69da      	ldr	r2, [r3, #28]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	69d9      	ldr	r1, [r3, #28]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	021a      	lsls	r2, r3, #8
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	430a      	orrs	r2, r1
 800c75c:	61da      	str	r2, [r3, #28]
      break;
 800c75e:	e002      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	75fb      	strb	r3, [r7, #23]
      break;
 800c764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d101      	bne.n	800c794 <HAL_TIM_ConfigClockSource+0x1c>
 800c790:	2302      	movs	r3, #2
 800c792:	e0b4      	b.n	800c8fe <HAL_TIM_ConfigClockSource+0x186>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7cc:	d03e      	beq.n	800c84c <HAL_TIM_ConfigClockSource+0xd4>
 800c7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7d2:	f200 8087 	bhi.w	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7da:	f000 8086 	beq.w	800c8ea <HAL_TIM_ConfigClockSource+0x172>
 800c7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7e2:	d87f      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7e4:	2b70      	cmp	r3, #112	; 0x70
 800c7e6:	d01a      	beq.n	800c81e <HAL_TIM_ConfigClockSource+0xa6>
 800c7e8:	2b70      	cmp	r3, #112	; 0x70
 800c7ea:	d87b      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7ec:	2b60      	cmp	r3, #96	; 0x60
 800c7ee:	d050      	beq.n	800c892 <HAL_TIM_ConfigClockSource+0x11a>
 800c7f0:	2b60      	cmp	r3, #96	; 0x60
 800c7f2:	d877      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7f4:	2b50      	cmp	r3, #80	; 0x50
 800c7f6:	d03c      	beq.n	800c872 <HAL_TIM_ConfigClockSource+0xfa>
 800c7f8:	2b50      	cmp	r3, #80	; 0x50
 800c7fa:	d873      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c7fc:	2b40      	cmp	r3, #64	; 0x40
 800c7fe:	d058      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x13a>
 800c800:	2b40      	cmp	r3, #64	; 0x40
 800c802:	d86f      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c804:	2b30      	cmp	r3, #48	; 0x30
 800c806:	d064      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x15a>
 800c808:	2b30      	cmp	r3, #48	; 0x30
 800c80a:	d86b      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c80c:	2b20      	cmp	r3, #32
 800c80e:	d060      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x15a>
 800c810:	2b20      	cmp	r3, #32
 800c812:	d867      	bhi.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
 800c814:	2b00      	cmp	r3, #0
 800c816:	d05c      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x15a>
 800c818:	2b10      	cmp	r3, #16
 800c81a:	d05a      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x15a>
 800c81c:	e062      	b.n	800c8e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	6899      	ldr	r1, [r3, #8]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f000 fb5d 	bl	800ceec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	609a      	str	r2, [r3, #8]
      break;
 800c84a:	e04f      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6818      	ldr	r0, [r3, #0]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	6899      	ldr	r1, [r3, #8]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	f000 fb46 	bl	800ceec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689a      	ldr	r2, [r3, #8]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c86e:	609a      	str	r2, [r3, #8]
      break;
 800c870:	e03c      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	6859      	ldr	r1, [r3, #4]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	461a      	mov	r2, r3
 800c880:	f000 faba 	bl	800cdf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2150      	movs	r1, #80	; 0x50
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 fb13 	bl	800ceb6 <TIM_ITRx_SetConfig>
      break;
 800c890:	e02c      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6859      	ldr	r1, [r3, #4]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f000 fad9 	bl	800ce56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2160      	movs	r1, #96	; 0x60
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 fb03 	bl	800ceb6 <TIM_ITRx_SetConfig>
      break;
 800c8b0:	e01c      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	6859      	ldr	r1, [r3, #4]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f000 fa9a 	bl	800cdf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2140      	movs	r1, #64	; 0x40
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 faf3 	bl	800ceb6 <TIM_ITRx_SetConfig>
      break;
 800c8d0:	e00c      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4610      	mov	r0, r2
 800c8de:	f000 faea 	bl	800ceb6 <TIM_ITRx_SetConfig>
      break;
 800c8e2:	e003      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e8:	e000      	b.n	800c8ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c8ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c90e:	bf00      	nop
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c922:	bf00      	nop
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c92e:	b480      	push	{r7}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c942:	b480      	push	{r7}
 800c944:	b083      	sub	sp, #12
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c94a:	bf00      	nop
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
	...

0800c958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a40      	ldr	r2, [pc, #256]	; (800ca6c <TIM_Base_SetConfig+0x114>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d013      	beq.n	800c998 <TIM_Base_SetConfig+0x40>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c976:	d00f      	beq.n	800c998 <TIM_Base_SetConfig+0x40>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a3d      	ldr	r2, [pc, #244]	; (800ca70 <TIM_Base_SetConfig+0x118>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d00b      	beq.n	800c998 <TIM_Base_SetConfig+0x40>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a3c      	ldr	r2, [pc, #240]	; (800ca74 <TIM_Base_SetConfig+0x11c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d007      	beq.n	800c998 <TIM_Base_SetConfig+0x40>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a3b      	ldr	r2, [pc, #236]	; (800ca78 <TIM_Base_SetConfig+0x120>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d003      	beq.n	800c998 <TIM_Base_SetConfig+0x40>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a3a      	ldr	r2, [pc, #232]	; (800ca7c <TIM_Base_SetConfig+0x124>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d108      	bne.n	800c9aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c99e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a2f      	ldr	r2, [pc, #188]	; (800ca6c <TIM_Base_SetConfig+0x114>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d02b      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9b8:	d027      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a2c      	ldr	r2, [pc, #176]	; (800ca70 <TIM_Base_SetConfig+0x118>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d023      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <TIM_Base_SetConfig+0x11c>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d01f      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ca78 <TIM_Base_SetConfig+0x120>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d01b      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a29      	ldr	r2, [pc, #164]	; (800ca7c <TIM_Base_SetConfig+0x124>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d017      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a28      	ldr	r2, [pc, #160]	; (800ca80 <TIM_Base_SetConfig+0x128>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d013      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a27      	ldr	r2, [pc, #156]	; (800ca84 <TIM_Base_SetConfig+0x12c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d00f      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a26      	ldr	r2, [pc, #152]	; (800ca88 <TIM_Base_SetConfig+0x130>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d00b      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a25      	ldr	r2, [pc, #148]	; (800ca8c <TIM_Base_SetConfig+0x134>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d007      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a24      	ldr	r2, [pc, #144]	; (800ca90 <TIM_Base_SetConfig+0x138>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d003      	beq.n	800ca0a <TIM_Base_SetConfig+0xb2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a23      	ldr	r2, [pc, #140]	; (800ca94 <TIM_Base_SetConfig+0x13c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d108      	bne.n	800ca1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a0a      	ldr	r2, [pc, #40]	; (800ca6c <TIM_Base_SetConfig+0x114>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d003      	beq.n	800ca50 <TIM_Base_SetConfig+0xf8>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a0c      	ldr	r2, [pc, #48]	; (800ca7c <TIM_Base_SetConfig+0x124>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d103      	bne.n	800ca58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	691a      	ldr	r2, [r3, #16]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	615a      	str	r2, [r3, #20]
}
 800ca5e:	bf00      	nop
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	40010000 	.word	0x40010000
 800ca70:	40000400 	.word	0x40000400
 800ca74:	40000800 	.word	0x40000800
 800ca78:	40000c00 	.word	0x40000c00
 800ca7c:	40010400 	.word	0x40010400
 800ca80:	40014000 	.word	0x40014000
 800ca84:	40014400 	.word	0x40014400
 800ca88:	40014800 	.word	0x40014800
 800ca8c:	40001800 	.word	0x40001800
 800ca90:	40001c00 	.word	0x40001c00
 800ca94:	40002000 	.word	0x40002000

0800ca98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	f023 0201 	bic.w	r2, r3, #1
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f023 0303 	bic.w	r3, r3, #3
 800cace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f023 0302 	bic.w	r3, r3, #2
 800cae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	4313      	orrs	r3, r2
 800caea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a20      	ldr	r2, [pc, #128]	; (800cb70 <TIM_OC1_SetConfig+0xd8>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d003      	beq.n	800cafc <TIM_OC1_SetConfig+0x64>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a1f      	ldr	r2, [pc, #124]	; (800cb74 <TIM_OC1_SetConfig+0xdc>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d10c      	bne.n	800cb16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f023 0308 	bic.w	r3, r3, #8
 800cb02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f023 0304 	bic.w	r3, r3, #4
 800cb14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a15      	ldr	r2, [pc, #84]	; (800cb70 <TIM_OC1_SetConfig+0xd8>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d003      	beq.n	800cb26 <TIM_OC1_SetConfig+0x8e>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a14      	ldr	r2, [pc, #80]	; (800cb74 <TIM_OC1_SetConfig+0xdc>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d111      	bne.n	800cb4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	697a      	ldr	r2, [r7, #20]
 800cb62:	621a      	str	r2, [r3, #32]
}
 800cb64:	bf00      	nop
 800cb66:	371c      	adds	r7, #28
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	40010000 	.word	0x40010000
 800cb74:	40010400 	.word	0x40010400

0800cb78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	f023 0210 	bic.w	r2, r3, #16
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	021b      	lsls	r3, r3, #8
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	f023 0320 	bic.w	r3, r3, #32
 800cbc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	697a      	ldr	r2, [r7, #20]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a22      	ldr	r2, [pc, #136]	; (800cc5c <TIM_OC2_SetConfig+0xe4>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d003      	beq.n	800cbe0 <TIM_OC2_SetConfig+0x68>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a21      	ldr	r2, [pc, #132]	; (800cc60 <TIM_OC2_SetConfig+0xe8>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d10d      	bne.n	800cbfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	011b      	lsls	r3, r3, #4
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a17      	ldr	r2, [pc, #92]	; (800cc5c <TIM_OC2_SetConfig+0xe4>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d003      	beq.n	800cc0c <TIM_OC2_SetConfig+0x94>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a16      	ldr	r2, [pc, #88]	; (800cc60 <TIM_OC2_SetConfig+0xe8>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d113      	bne.n	800cc34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	693a      	ldr	r2, [r7, #16]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	621a      	str	r2, [r3, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	40010000 	.word	0x40010000
 800cc60:	40010400 	.word	0x40010400

0800cc64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	021b      	lsls	r3, r3, #8
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a21      	ldr	r2, [pc, #132]	; (800cd44 <TIM_OC3_SetConfig+0xe0>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d003      	beq.n	800ccca <TIM_OC3_SetConfig+0x66>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a20      	ldr	r2, [pc, #128]	; (800cd48 <TIM_OC3_SetConfig+0xe4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d10d      	bne.n	800cce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	021b      	lsls	r3, r3, #8
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a16      	ldr	r2, [pc, #88]	; (800cd44 <TIM_OC3_SetConfig+0xe0>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d003      	beq.n	800ccf6 <TIM_OC3_SetConfig+0x92>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a15      	ldr	r2, [pc, #84]	; (800cd48 <TIM_OC3_SetConfig+0xe4>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d113      	bne.n	800cd1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	695b      	ldr	r3, [r3, #20]
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	621a      	str	r2, [r3, #32]
}
 800cd38:	bf00      	nop
 800cd3a:	371c      	adds	r7, #28
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	40010000 	.word	0x40010000
 800cd48:	40010400 	.word	0x40010400

0800cd4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	021b      	lsls	r3, r3, #8
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	031b      	lsls	r3, r3, #12
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a12      	ldr	r2, [pc, #72]	; (800cdf0 <TIM_OC4_SetConfig+0xa4>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d003      	beq.n	800cdb4 <TIM_OC4_SetConfig+0x68>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4a11      	ldr	r2, [pc, #68]	; (800cdf4 <TIM_OC4_SetConfig+0xa8>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d109      	bne.n	800cdc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	019b      	lsls	r3, r3, #6
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	621a      	str	r2, [r3, #32]
}
 800cde2:	bf00      	nop
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	40010000 	.word	0x40010000
 800cdf4:	40010400 	.word	0x40010400

0800cdf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b087      	sub	sp, #28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	f023 0201 	bic.w	r2, r3, #1
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f023 030a 	bic.w	r3, r3, #10
 800ce34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	621a      	str	r2, [r3, #32]
}
 800ce4a:	bf00      	nop
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce56:	b480      	push	{r7}
 800ce58:	b087      	sub	sp, #28
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	f023 0210 	bic.w	r2, r3, #16
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	031b      	lsls	r3, r3, #12
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	011b      	lsls	r3, r3, #4
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	621a      	str	r2, [r3, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	371c      	adds	r7, #28
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	f043 0307 	orr.w	r3, r3, #7
 800ced8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	609a      	str	r2, [r3, #8]
}
 800cee0:	bf00      	nop
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	021a      	lsls	r2, r3, #8
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	609a      	str	r2, [r3, #8]
}
 800cf20:	bf00      	nop
 800cf22:	371c      	adds	r7, #28
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	2201      	movs	r2, #1
 800cf40:	fa02 f303 	lsl.w	r3, r2, r3
 800cf44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6a1a      	ldr	r2, [r3, #32]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	43db      	mvns	r3, r3
 800cf4e:	401a      	ands	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6a1a      	ldr	r2, [r3, #32]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	f003 031f 	and.w	r3, r3, #31
 800cf5e:	6879      	ldr	r1, [r7, #4]
 800cf60:	fa01 f303 	lsl.w	r3, r1, r3
 800cf64:	431a      	orrs	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	621a      	str	r2, [r3, #32]
}
 800cf6a:	bf00      	nop
 800cf6c:	371c      	adds	r7, #28
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
	...

0800cf78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d101      	bne.n	800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	e05a      	b.n	800d046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a21      	ldr	r2, [pc, #132]	; (800d054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d022      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfdc:	d01d      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a1d      	ldr	r2, [pc, #116]	; (800d058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d018      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a1b      	ldr	r2, [pc, #108]	; (800d05c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d013      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a1a      	ldr	r2, [pc, #104]	; (800d060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d00e      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a18      	ldr	r2, [pc, #96]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d009      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a17      	ldr	r2, [pc, #92]	; (800d068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d004      	beq.n	800d01a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a15      	ldr	r2, [pc, #84]	; (800d06c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d10c      	bne.n	800d034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	4313      	orrs	r3, r2
 800d02a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	40010000 	.word	0x40010000
 800d058:	40000400 	.word	0x40000400
 800d05c:	40000800 	.word	0x40000800
 800d060:	40000c00 	.word	0x40000c00
 800d064:	40010400 	.word	0x40010400
 800d068:	40014000 	.word	0x40014000
 800d06c:	40001800 	.word	0x40001800

0800d070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e03f      	b.n	800d12a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d106      	bne.n	800d0c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7f6 f9f4 	bl	80034ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2224      	movs	r2, #36	; 0x24
 800d0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f9cb 	bl	800d478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	691a      	ldr	r2, [r3, #16]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695a      	ldr	r2, [r3, #20]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	68da      	ldr	r2, [r3, #12]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2220      	movs	r2, #32
 800d11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b08a      	sub	sp, #40	; 0x28
 800d136:	af02      	add	r7, sp, #8
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	603b      	str	r3, [r7, #0]
 800d13e:	4613      	mov	r3, r2
 800d140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b20      	cmp	r3, #32
 800d150:	d17c      	bne.n	800d24c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <HAL_UART_Transmit+0x2c>
 800d158:	88fb      	ldrh	r3, [r7, #6]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e075      	b.n	800d24e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d101      	bne.n	800d170 <HAL_UART_Transmit+0x3e>
 800d16c:	2302      	movs	r3, #2
 800d16e:	e06e      	b.n	800d24e <HAL_UART_Transmit+0x11c>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2221      	movs	r2, #33	; 0x21
 800d182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d186:	f7fa fc29 	bl	80079dc <HAL_GetTick>
 800d18a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	88fa      	ldrh	r2, [r7, #6]
 800d190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	88fa      	ldrh	r2, [r7, #6]
 800d196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1a0:	d108      	bne.n	800d1b4 <HAL_UART_Transmit+0x82>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d104      	bne.n	800d1b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	61bb      	str	r3, [r7, #24]
 800d1b2:	e003      	b.n	800d1bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d1c4:	e02a      	b.n	800d21c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2180      	movs	r1, #128	; 0x80
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 f8e2 	bl	800d39a <UART_WaitOnFlagUntilTimeout>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e036      	b.n	800d24e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	3302      	adds	r3, #2
 800d1fa:	61bb      	str	r3, [r7, #24]
 800d1fc:	e007      	b.n	800d20e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	781a      	ldrb	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	3301      	adds	r3, #1
 800d20c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d212:	b29b      	uxth	r3, r3
 800d214:	3b01      	subs	r3, #1
 800d216:	b29a      	uxth	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d220:	b29b      	uxth	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1cf      	bne.n	800d1c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	2200      	movs	r2, #0
 800d22e:	2140      	movs	r1, #64	; 0x40
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f000 f8b2 	bl	800d39a <UART_WaitOnFlagUntilTimeout>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e006      	b.n	800d24e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2220      	movs	r2, #32
 800d244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	e000      	b.n	800d24e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d24c:	2302      	movs	r3, #2
  }
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3720      	adds	r7, #32
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b08a      	sub	sp, #40	; 0x28
 800d25a:	af02      	add	r7, sp, #8
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	603b      	str	r3, [r7, #0]
 800d262:	4613      	mov	r3, r2
 800d264:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d266:	2300      	movs	r3, #0
 800d268:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b20      	cmp	r3, #32
 800d274:	f040 808c 	bne.w	800d390 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <HAL_UART_Receive+0x2e>
 800d27e:	88fb      	ldrh	r3, [r7, #6]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e084      	b.n	800d392 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <HAL_UART_Receive+0x40>
 800d292:	2302      	movs	r3, #2
 800d294:	e07d      	b.n	800d392 <HAL_UART_Receive+0x13c>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2222      	movs	r2, #34	; 0x22
 800d2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2b2:	f7fa fb93 	bl	80079dc <HAL_GetTick>
 800d2b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	88fa      	ldrh	r2, [r7, #6]
 800d2bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	88fa      	ldrh	r2, [r7, #6]
 800d2c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2cc:	d108      	bne.n	800d2e0 <HAL_UART_Receive+0x8a>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	e003      	b.n	800d2e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d2f0:	e043      	b.n	800d37a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	2120      	movs	r1, #32
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 f84c 	bl	800d39a <UART_WaitOnFlagUntilTimeout>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e042      	b.n	800d392 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10c      	bne.n	800d32c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31e:	b29a      	uxth	r2, r3
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	3302      	adds	r3, #2
 800d328:	61bb      	str	r3, [r7, #24]
 800d32a:	e01f      	b.n	800d36c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d334:	d007      	beq.n	800d346 <HAL_UART_Receive+0xf0>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10a      	bne.n	800d354 <HAL_UART_Receive+0xfe>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	701a      	strb	r2, [r3, #0]
 800d352:	e008      	b.n	800d366 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d360:	b2da      	uxtb	r2, r3
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	3301      	adds	r3, #1
 800d36a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d370:	b29b      	uxth	r3, r3
 800d372:	3b01      	subs	r3, #1
 800d374:	b29a      	uxth	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d37e:	b29b      	uxth	r3, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1b6      	bne.n	800d2f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2220      	movs	r2, #32
 800d388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e000      	b.n	800d392 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d390:	2302      	movs	r3, #2
  }
}
 800d392:	4618      	mov	r0, r3
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b090      	sub	sp, #64	; 0x40
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	60f8      	str	r0, [r7, #12]
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	603b      	str	r3, [r7, #0]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3aa:	e050      	b.n	800d44e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b2:	d04c      	beq.n	800d44e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d007      	beq.n	800d3ca <UART_WaitOnFlagUntilTimeout+0x30>
 800d3ba:	f7fa fb0f 	bl	80079dc <HAL_GetTick>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d241      	bcs.n	800d44e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	330c      	adds	r3, #12
 800d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	e853 3f00 	ldrex	r3, [r3]
 800d3d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	330c      	adds	r3, #12
 800d3e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3ea:	637a      	str	r2, [r7, #52]	; 0x34
 800d3ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3f2:	e841 2300 	strex	r3, r2, [r1]
 800d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1e5      	bne.n	800d3ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3314      	adds	r3, #20
 800d404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	e853 3f00 	ldrex	r3, [r3]
 800d40c:	613b      	str	r3, [r7, #16]
   return(result);
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f023 0301 	bic.w	r3, r3, #1
 800d414:	63bb      	str	r3, [r7, #56]	; 0x38
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3314      	adds	r3, #20
 800d41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d41e:	623a      	str	r2, [r7, #32]
 800d420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d422:	69f9      	ldr	r1, [r7, #28]
 800d424:	6a3a      	ldr	r2, [r7, #32]
 800d426:	e841 2300 	strex	r3, r2, [r1]
 800d42a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1e5      	bne.n	800d3fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d44a:	2303      	movs	r3, #3
 800d44c:	e00f      	b.n	800d46e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	4013      	ands	r3, r2
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	bf0c      	ite	eq
 800d45e:	2301      	moveq	r3, #1
 800d460:	2300      	movne	r3, #0
 800d462:	b2db      	uxtb	r3, r3
 800d464:	461a      	mov	r2, r3
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d09f      	beq.n	800d3ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3740      	adds	r7, #64	; 0x40
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	b09f      	sub	sp, #124	; 0x7c
 800d47e:	af00      	add	r7, sp, #0
 800d480:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d48e:	68d9      	ldr	r1, [r3, #12]
 800d490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	ea40 0301 	orr.w	r3, r0, r1
 800d498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49c:	689a      	ldr	r2, [r3, #8]
 800d49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	431a      	orrs	r2, r3
 800d4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d4bc:	f021 010c 	bic.w	r1, r1, #12
 800d4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4c6:	430b      	orrs	r3, r1
 800d4c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d6:	6999      	ldr	r1, [r3, #24]
 800d4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	ea40 0301 	orr.w	r3, r0, r1
 800d4e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	4bc5      	ldr	r3, [pc, #788]	; (800d7fc <UART_SetConfig+0x384>)
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d004      	beq.n	800d4f6 <UART_SetConfig+0x7e>
 800d4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	4bc3      	ldr	r3, [pc, #780]	; (800d800 <UART_SetConfig+0x388>)
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d103      	bne.n	800d4fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4f6:	f7fc ff69 	bl	800a3cc <HAL_RCC_GetPCLK2Freq>
 800d4fa:	6778      	str	r0, [r7, #116]	; 0x74
 800d4fc:	e002      	b.n	800d504 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d4fe:	f7fc ff51 	bl	800a3a4 <HAL_RCC_GetPCLK1Freq>
 800d502:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d50c:	f040 80b6 	bne.w	800d67c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d512:	461c      	mov	r4, r3
 800d514:	f04f 0500 	mov.w	r5, #0
 800d518:	4622      	mov	r2, r4
 800d51a:	462b      	mov	r3, r5
 800d51c:	1891      	adds	r1, r2, r2
 800d51e:	6439      	str	r1, [r7, #64]	; 0x40
 800d520:	415b      	adcs	r3, r3
 800d522:	647b      	str	r3, [r7, #68]	; 0x44
 800d524:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d528:	1912      	adds	r2, r2, r4
 800d52a:	eb45 0303 	adc.w	r3, r5, r3
 800d52e:	f04f 0000 	mov.w	r0, #0
 800d532:	f04f 0100 	mov.w	r1, #0
 800d536:	00d9      	lsls	r1, r3, #3
 800d538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d53c:	00d0      	lsls	r0, r2, #3
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	1911      	adds	r1, r2, r4
 800d544:	6639      	str	r1, [r7, #96]	; 0x60
 800d546:	416b      	adcs	r3, r5
 800d548:	667b      	str	r3, [r7, #100]	; 0x64
 800d54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	461a      	mov	r2, r3
 800d550:	f04f 0300 	mov.w	r3, #0
 800d554:	1891      	adds	r1, r2, r2
 800d556:	63b9      	str	r1, [r7, #56]	; 0x38
 800d558:	415b      	adcs	r3, r3
 800d55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d55c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d560:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d564:	f7f3 fba0 	bl	8000ca8 <__aeabi_uldivmod>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4ba5      	ldr	r3, [pc, #660]	; (800d804 <UART_SetConfig+0x38c>)
 800d56e:	fba3 2302 	umull	r2, r3, r3, r2
 800d572:	095b      	lsrs	r3, r3, #5
 800d574:	011e      	lsls	r6, r3, #4
 800d576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d578:	461c      	mov	r4, r3
 800d57a:	f04f 0500 	mov.w	r5, #0
 800d57e:	4622      	mov	r2, r4
 800d580:	462b      	mov	r3, r5
 800d582:	1891      	adds	r1, r2, r2
 800d584:	6339      	str	r1, [r7, #48]	; 0x30
 800d586:	415b      	adcs	r3, r3
 800d588:	637b      	str	r3, [r7, #52]	; 0x34
 800d58a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d58e:	1912      	adds	r2, r2, r4
 800d590:	eb45 0303 	adc.w	r3, r5, r3
 800d594:	f04f 0000 	mov.w	r0, #0
 800d598:	f04f 0100 	mov.w	r1, #0
 800d59c:	00d9      	lsls	r1, r3, #3
 800d59e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d5a2:	00d0      	lsls	r0, r2, #3
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	1911      	adds	r1, r2, r4
 800d5aa:	65b9      	str	r1, [r7, #88]	; 0x58
 800d5ac:	416b      	adcs	r3, r5
 800d5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f04f 0300 	mov.w	r3, #0
 800d5ba:	1891      	adds	r1, r2, r2
 800d5bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800d5be:	415b      	adcs	r3, r3
 800d5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d5ca:	f7f3 fb6d 	bl	8000ca8 <__aeabi_uldivmod>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4b8c      	ldr	r3, [pc, #560]	; (800d804 <UART_SetConfig+0x38c>)
 800d5d4:	fba3 1302 	umull	r1, r3, r3, r2
 800d5d8:	095b      	lsrs	r3, r3, #5
 800d5da:	2164      	movs	r1, #100	; 0x64
 800d5dc:	fb01 f303 	mul.w	r3, r1, r3
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	3332      	adds	r3, #50	; 0x32
 800d5e6:	4a87      	ldr	r2, [pc, #540]	; (800d804 <UART_SetConfig+0x38c>)
 800d5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ec:	095b      	lsrs	r3, r3, #5
 800d5ee:	005b      	lsls	r3, r3, #1
 800d5f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d5f4:	441e      	add	r6, r3
 800d5f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f04f 0100 	mov.w	r1, #0
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	1894      	adds	r4, r2, r2
 800d604:	623c      	str	r4, [r7, #32]
 800d606:	415b      	adcs	r3, r3
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
 800d60a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d60e:	1812      	adds	r2, r2, r0
 800d610:	eb41 0303 	adc.w	r3, r1, r3
 800d614:	f04f 0400 	mov.w	r4, #0
 800d618:	f04f 0500 	mov.w	r5, #0
 800d61c:	00dd      	lsls	r5, r3, #3
 800d61e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d622:	00d4      	lsls	r4, r2, #3
 800d624:	4622      	mov	r2, r4
 800d626:	462b      	mov	r3, r5
 800d628:	1814      	adds	r4, r2, r0
 800d62a:	653c      	str	r4, [r7, #80]	; 0x50
 800d62c:	414b      	adcs	r3, r1
 800d62e:	657b      	str	r3, [r7, #84]	; 0x54
 800d630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	461a      	mov	r2, r3
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	1891      	adds	r1, r2, r2
 800d63c:	61b9      	str	r1, [r7, #24]
 800d63e:	415b      	adcs	r3, r3
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d646:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d64a:	f7f3 fb2d 	bl	8000ca8 <__aeabi_uldivmod>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4b6c      	ldr	r3, [pc, #432]	; (800d804 <UART_SetConfig+0x38c>)
 800d654:	fba3 1302 	umull	r1, r3, r3, r2
 800d658:	095b      	lsrs	r3, r3, #5
 800d65a:	2164      	movs	r1, #100	; 0x64
 800d65c:	fb01 f303 	mul.w	r3, r1, r3
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	3332      	adds	r3, #50	; 0x32
 800d666:	4a67      	ldr	r2, [pc, #412]	; (800d804 <UART_SetConfig+0x38c>)
 800d668:	fba2 2303 	umull	r2, r3, r2, r3
 800d66c:	095b      	lsrs	r3, r3, #5
 800d66e:	f003 0207 	and.w	r2, r3, #7
 800d672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4432      	add	r2, r6
 800d678:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d67a:	e0b9      	b.n	800d7f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d67c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d67e:	461c      	mov	r4, r3
 800d680:	f04f 0500 	mov.w	r5, #0
 800d684:	4622      	mov	r2, r4
 800d686:	462b      	mov	r3, r5
 800d688:	1891      	adds	r1, r2, r2
 800d68a:	6139      	str	r1, [r7, #16]
 800d68c:	415b      	adcs	r3, r3
 800d68e:	617b      	str	r3, [r7, #20]
 800d690:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d694:	1912      	adds	r2, r2, r4
 800d696:	eb45 0303 	adc.w	r3, r5, r3
 800d69a:	f04f 0000 	mov.w	r0, #0
 800d69e:	f04f 0100 	mov.w	r1, #0
 800d6a2:	00d9      	lsls	r1, r3, #3
 800d6a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d6a8:	00d0      	lsls	r0, r2, #3
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	eb12 0804 	adds.w	r8, r2, r4
 800d6b2:	eb43 0905 	adc.w	r9, r3, r5
 800d6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f04f 0100 	mov.w	r1, #0
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	f04f 0300 	mov.w	r3, #0
 800d6c8:	008b      	lsls	r3, r1, #2
 800d6ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6ce:	0082      	lsls	r2, r0, #2
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	f7f3 fae8 	bl	8000ca8 <__aeabi_uldivmod>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4b49      	ldr	r3, [pc, #292]	; (800d804 <UART_SetConfig+0x38c>)
 800d6de:	fba3 2302 	umull	r2, r3, r3, r2
 800d6e2:	095b      	lsrs	r3, r3, #5
 800d6e4:	011e      	lsls	r6, r3, #4
 800d6e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f04f 0100 	mov.w	r1, #0
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	1894      	adds	r4, r2, r2
 800d6f4:	60bc      	str	r4, [r7, #8]
 800d6f6:	415b      	adcs	r3, r3
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6fe:	1812      	adds	r2, r2, r0
 800d700:	eb41 0303 	adc.w	r3, r1, r3
 800d704:	f04f 0400 	mov.w	r4, #0
 800d708:	f04f 0500 	mov.w	r5, #0
 800d70c:	00dd      	lsls	r5, r3, #3
 800d70e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d712:	00d4      	lsls	r4, r2, #3
 800d714:	4622      	mov	r2, r4
 800d716:	462b      	mov	r3, r5
 800d718:	1814      	adds	r4, r2, r0
 800d71a:	64bc      	str	r4, [r7, #72]	; 0x48
 800d71c:	414b      	adcs	r3, r1
 800d71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	f04f 0100 	mov.w	r1, #0
 800d72a:	f04f 0200 	mov.w	r2, #0
 800d72e:	f04f 0300 	mov.w	r3, #0
 800d732:	008b      	lsls	r3, r1, #2
 800d734:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d738:	0082      	lsls	r2, r0, #2
 800d73a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d73e:	f7f3 fab3 	bl	8000ca8 <__aeabi_uldivmod>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4b2f      	ldr	r3, [pc, #188]	; (800d804 <UART_SetConfig+0x38c>)
 800d748:	fba3 1302 	umull	r1, r3, r3, r2
 800d74c:	095b      	lsrs	r3, r3, #5
 800d74e:	2164      	movs	r1, #100	; 0x64
 800d750:	fb01 f303 	mul.w	r3, r1, r3
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	3332      	adds	r3, #50	; 0x32
 800d75a:	4a2a      	ldr	r2, [pc, #168]	; (800d804 <UART_SetConfig+0x38c>)
 800d75c:	fba2 2303 	umull	r2, r3, r2, r3
 800d760:	095b      	lsrs	r3, r3, #5
 800d762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d766:	441e      	add	r6, r3
 800d768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d76a:	4618      	mov	r0, r3
 800d76c:	f04f 0100 	mov.w	r1, #0
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	1894      	adds	r4, r2, r2
 800d776:	603c      	str	r4, [r7, #0]
 800d778:	415b      	adcs	r3, r3
 800d77a:	607b      	str	r3, [r7, #4]
 800d77c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d780:	1812      	adds	r2, r2, r0
 800d782:	eb41 0303 	adc.w	r3, r1, r3
 800d786:	f04f 0400 	mov.w	r4, #0
 800d78a:	f04f 0500 	mov.w	r5, #0
 800d78e:	00dd      	lsls	r5, r3, #3
 800d790:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d794:	00d4      	lsls	r4, r2, #3
 800d796:	4622      	mov	r2, r4
 800d798:	462b      	mov	r3, r5
 800d79a:	eb12 0a00 	adds.w	sl, r2, r0
 800d79e:	eb43 0b01 	adc.w	fp, r3, r1
 800d7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f04f 0100 	mov.w	r1, #0
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	f04f 0300 	mov.w	r3, #0
 800d7b4:	008b      	lsls	r3, r1, #2
 800d7b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d7ba:	0082      	lsls	r2, r0, #2
 800d7bc:	4650      	mov	r0, sl
 800d7be:	4659      	mov	r1, fp
 800d7c0:	f7f3 fa72 	bl	8000ca8 <__aeabi_uldivmod>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4b0e      	ldr	r3, [pc, #56]	; (800d804 <UART_SetConfig+0x38c>)
 800d7ca:	fba3 1302 	umull	r1, r3, r3, r2
 800d7ce:	095b      	lsrs	r3, r3, #5
 800d7d0:	2164      	movs	r1, #100	; 0x64
 800d7d2:	fb01 f303 	mul.w	r3, r1, r3
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	011b      	lsls	r3, r3, #4
 800d7da:	3332      	adds	r3, #50	; 0x32
 800d7dc:	4a09      	ldr	r2, [pc, #36]	; (800d804 <UART_SetConfig+0x38c>)
 800d7de:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e2:	095b      	lsrs	r3, r3, #5
 800d7e4:	f003 020f 	and.w	r2, r3, #15
 800d7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4432      	add	r2, r6
 800d7ee:	609a      	str	r2, [r3, #8]
}
 800d7f0:	bf00      	nop
 800d7f2:	377c      	adds	r7, #124	; 0x7c
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fa:	bf00      	nop
 800d7fc:	40011000 	.word	0x40011000
 800d800:	40011400 	.word	0x40011400
 800d804:	51eb851f 	.word	0x51eb851f

0800d808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d80c:	4904      	ldr	r1, [pc, #16]	; (800d820 <MX_FATFS_Init+0x18>)
 800d80e:	4805      	ldr	r0, [pc, #20]	; (800d824 <MX_FATFS_Init+0x1c>)
 800d810:	f000 f8b0 	bl	800d974 <FATFS_LinkDriver>
 800d814:	4603      	mov	r3, r0
 800d816:	461a      	mov	r2, r3
 800d818:	4b03      	ldr	r3, [pc, #12]	; (800d828 <MX_FATFS_Init+0x20>)
 800d81a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d81c:	bf00      	nop
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20006004 	.word	0x20006004
 800d824:	200000b8 	.word	0x200000b8
 800d828:	20006008 	.word	0x20006008

0800d82c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800d836:	4b06      	ldr	r3, [pc, #24]	; (800d850 <USER_initialize+0x24>)
 800d838:	2201      	movs	r2, #1
 800d83a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d83c:	4b04      	ldr	r3, [pc, #16]	; (800d850 <USER_initialize+0x24>)
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	200000b5 	.word	0x200000b5

0800d854 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	4603      	mov	r3, r0
 800d85c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800d85e:	4b06      	ldr	r3, [pc, #24]	; (800d878 <USER_status+0x24>)
 800d860:	2201      	movs	r2, #1
 800d862:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d864:	4b04      	ldr	r3, [pc, #16]	; (800d878 <USER_status+0x24>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	200000b5 	.word	0x200000b5

0800d87c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	607a      	str	r2, [r7, #4]
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	4603      	mov	r3, r0
 800d88a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800d88c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b085      	sub	sp, #20
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800d8aa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	603a      	str	r2, [r7, #0]
 800d8c2:	71fb      	strb	r3, [r7, #7]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
    return res;
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8f2:	4b1f      	ldr	r3, [pc, #124]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d8f4:	7a5b      	ldrb	r3, [r3, #9]
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d131      	bne.n	800d960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8fc:	4b1c      	ldr	r3, [pc, #112]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d8fe:	7a5b      	ldrb	r3, [r3, #9]
 800d900:	b2db      	uxtb	r3, r3
 800d902:	461a      	mov	r2, r3
 800d904:	4b1a      	ldr	r3, [pc, #104]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d906:	2100      	movs	r1, #0
 800d908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d90a:	4b19      	ldr	r3, [pc, #100]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d90c:	7a5b      	ldrb	r3, [r3, #9]
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	4a17      	ldr	r2, [pc, #92]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d91a:	4b15      	ldr	r3, [pc, #84]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d91c:	7a5b      	ldrb	r3, [r3, #9]
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	461a      	mov	r2, r3
 800d922:	4b13      	ldr	r3, [pc, #76]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d924:	4413      	add	r3, r2
 800d926:	79fa      	ldrb	r2, [r7, #7]
 800d928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d92a:	4b11      	ldr	r3, [pc, #68]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d92c:	7a5b      	ldrb	r3, [r3, #9]
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	b2d1      	uxtb	r1, r2
 800d934:	4a0e      	ldr	r2, [pc, #56]	; (800d970 <FATFS_LinkDriverEx+0x94>)
 800d936:	7251      	strb	r1, [r2, #9]
 800d938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d93a:	7dbb      	ldrb	r3, [r7, #22]
 800d93c:	3330      	adds	r3, #48	; 0x30
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	3301      	adds	r3, #1
 800d948:	223a      	movs	r2, #58	; 0x3a
 800d94a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	3302      	adds	r3, #2
 800d950:	222f      	movs	r2, #47	; 0x2f
 800d952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	3303      	adds	r3, #3
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d960:	7dfb      	ldrb	r3, [r7, #23]
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	2000060c 	.word	0x2000060c

0800d974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d97e:	2200      	movs	r2, #0
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7ff ffaa 	bl	800d8dc <FATFS_LinkDriverEx>
 800d988:	4603      	mov	r3, r0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <__NVIC_SetPriority>:
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	6039      	str	r1, [r7, #0]
 800d99e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d9a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	db0a      	blt.n	800d9be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	490c      	ldr	r1, [pc, #48]	; (800d9e0 <__NVIC_SetPriority+0x4c>)
 800d9ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9b2:	0112      	lsls	r2, r2, #4
 800d9b4:	b2d2      	uxtb	r2, r2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d9bc:	e00a      	b.n	800d9d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	4908      	ldr	r1, [pc, #32]	; (800d9e4 <__NVIC_SetPriority+0x50>)
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	f003 030f 	and.w	r3, r3, #15
 800d9ca:	3b04      	subs	r3, #4
 800d9cc:	0112      	lsls	r2, r2, #4
 800d9ce:	b2d2      	uxtb	r2, r2
 800d9d0:	440b      	add	r3, r1
 800d9d2:	761a      	strb	r2, [r3, #24]
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	e000e100 	.word	0xe000e100
 800d9e4:	e000ed00 	.word	0xe000ed00

0800d9e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d9ec:	4b05      	ldr	r3, [pc, #20]	; (800da04 <SysTick_Handler+0x1c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d9f0:	f001 ff3c 	bl	800f86c <xTaskGetSchedulerState>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d001      	beq.n	800d9fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d9fa:	f002 fd25 	bl	8010448 <xPortSysTickHandler>
  }
}
 800d9fe:	bf00      	nop
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	e000e010 	.word	0xe000e010

0800da08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800da0c:	2100      	movs	r1, #0
 800da0e:	f06f 0004 	mvn.w	r0, #4
 800da12:	f7ff ffbf 	bl	800d994 <__NVIC_SetPriority>
#endif
}
 800da16:	bf00      	nop
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da22:	f3ef 8305 	mrs	r3, IPSR
 800da26:	603b      	str	r3, [r7, #0]
  return(result);
 800da28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da2e:	f06f 0305 	mvn.w	r3, #5
 800da32:	607b      	str	r3, [r7, #4]
 800da34:	e00c      	b.n	800da50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da36:	4b0a      	ldr	r3, [pc, #40]	; (800da60 <osKernelInitialize+0x44>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da3e:	4b08      	ldr	r3, [pc, #32]	; (800da60 <osKernelInitialize+0x44>)
 800da40:	2201      	movs	r2, #1
 800da42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da44:	2300      	movs	r3, #0
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	e002      	b.n	800da50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da4a:	f04f 33ff 	mov.w	r3, #4294967295
 800da4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da50:	687b      	ldr	r3, [r7, #4]
}
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	20000618 	.word	0x20000618

0800da64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da6a:	f3ef 8305 	mrs	r3, IPSR
 800da6e:	603b      	str	r3, [r7, #0]
  return(result);
 800da70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <osKernelStart+0x1a>
    stat = osErrorISR;
 800da76:	f06f 0305 	mvn.w	r3, #5
 800da7a:	607b      	str	r3, [r7, #4]
 800da7c:	e010      	b.n	800daa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da7e:	4b0b      	ldr	r3, [pc, #44]	; (800daac <osKernelStart+0x48>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d109      	bne.n	800da9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da86:	f7ff ffbf 	bl	800da08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da8a:	4b08      	ldr	r3, [pc, #32]	; (800daac <osKernelStart+0x48>)
 800da8c:	2202      	movs	r2, #2
 800da8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da90:	f001 fa80 	bl	800ef94 <vTaskStartScheduler>
      stat = osOK;
 800da94:	2300      	movs	r3, #0
 800da96:	607b      	str	r3, [r7, #4]
 800da98:	e002      	b.n	800daa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da9a:	f04f 33ff 	mov.w	r3, #4294967295
 800da9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800daa0:	687b      	ldr	r3, [r7, #4]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	20000618 	.word	0x20000618

0800dab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08e      	sub	sp, #56	; 0x38
 800dab4:	af04      	add	r7, sp, #16
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dabc:	2300      	movs	r3, #0
 800dabe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac0:	f3ef 8305 	mrs	r3, IPSR
 800dac4:	617b      	str	r3, [r7, #20]
  return(result);
 800dac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d17e      	bne.n	800dbca <osThreadNew+0x11a>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d07b      	beq.n	800dbca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dad2:	2380      	movs	r3, #128	; 0x80
 800dad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dad6:	2318      	movs	r3, #24
 800dad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dada:	2300      	movs	r3, #0
 800dadc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dade:	f04f 33ff 	mov.w	r3, #4294967295
 800dae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d045      	beq.n	800db76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d002      	beq.n	800daf8 <osThreadNew+0x48>
        name = attr->name;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d008      	beq.n	800db1e <osThreadNew+0x6e>
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b38      	cmp	r3, #56	; 0x38
 800db10:	d805      	bhi.n	800db1e <osThreadNew+0x6e>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <osThreadNew+0x72>
        return (NULL);
 800db1e:	2300      	movs	r3, #0
 800db20:	e054      	b.n	800dbcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	089b      	lsrs	r3, r3, #2
 800db30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00e      	beq.n	800db58 <osThreadNew+0xa8>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	2bbb      	cmp	r3, #187	; 0xbb
 800db40:	d90a      	bls.n	800db58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <osThreadNew+0xa8>
        mem = 1;
 800db52:	2301      	movs	r3, #1
 800db54:	61bb      	str	r3, [r7, #24]
 800db56:	e010      	b.n	800db7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10c      	bne.n	800db7a <osThreadNew+0xca>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d108      	bne.n	800db7a <osThreadNew+0xca>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d104      	bne.n	800db7a <osThreadNew+0xca>
          mem = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	61bb      	str	r3, [r7, #24]
 800db74:	e001      	b.n	800db7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d110      	bne.n	800dba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db88:	9202      	str	r2, [sp, #8]
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	6a3a      	ldr	r2, [r7, #32]
 800db94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 fea8 	bl	800e8ec <xTaskCreateStatic>
 800db9c:	4603      	mov	r3, r0
 800db9e:	613b      	str	r3, [r7, #16]
 800dba0:	e013      	b.n	800dbca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d110      	bne.n	800dbca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	f107 0310 	add.w	r3, r7, #16
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f000 fef3 	bl	800e9a6 <xTaskCreate>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d001      	beq.n	800dbca <osThreadNew+0x11a>
            hTask = NULL;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbca:	693b      	ldr	r3, [r7, #16]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3728      	adds	r7, #40	; 0x28
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800dbda:	f001 fe37 	bl	800f84c <xTaskGetCurrentTaskHandle>
 800dbde:	6078      	str	r0, [r7, #4]

  return (id);
 800dbe0:	687b      	ldr	r3, [r7, #4]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf8:	f3ef 8305 	mrs	r3, IPSR
 800dbfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <osThreadGetState+0x1e>
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d103      	bne.n	800dc12 <osThreadGetState+0x26>
    state = osThreadError;
 800dc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	e022      	b.n	800dc58 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800dc12:	6938      	ldr	r0, [r7, #16]
 800dc14:	f001 f8c8 	bl	800eda8 <eTaskGetState>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	d818      	bhi.n	800dc50 <osThreadGetState+0x64>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <osThreadGetState+0x38>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc39 	.word	0x0800dc39
 800dc28:	0800dc3f 	.word	0x0800dc3f
 800dc2c:	0800dc45 	.word	0x0800dc45
 800dc30:	0800dc45 	.word	0x0800dc45
 800dc34:	0800dc4b 	.word	0x0800dc4b
      case eRunning:   state = osThreadRunning;    break;
 800dc38:	2302      	movs	r3, #2
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	e00c      	b.n	800dc58 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	e009      	b.n	800dc58 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800dc44:	2303      	movs	r3, #3
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	e006      	b.n	800dc58 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800dc4a:	2304      	movs	r3, #4
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	e003      	b.n	800dc58 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800dc50:	f04f 33ff 	mov.w	r3, #4294967295
 800dc54:	617b      	str	r3, [r7, #20]
 800dc56:	bf00      	nop
    }
  }

  return (state);
 800dc58:	697b      	ldr	r3, [r7, #20]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop

0800dc64 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc70:	f3ef 8305 	mrs	r3, IPSR
 800dc74:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <osThreadResume+0x20>
    stat = osErrorISR;
 800dc7c:	f06f 0305 	mvn.w	r3, #5
 800dc80:	617b      	str	r3, [r7, #20]
 800dc82:	e00b      	b.n	800dc9c <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d103      	bne.n	800dc92 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800dc8a:	f06f 0303 	mvn.w	r3, #3
 800dc8e:	617b      	str	r3, [r7, #20]
 800dc90:	e004      	b.n	800dc9c <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800dc96:	6938      	ldr	r0, [r7, #16]
 800dc98:	f001 f91e 	bl	800eed8 <vTaskResume>
  }

  return (stat);
 800dc9c:	697b      	ldr	r3, [r7, #20]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800dca6:	b580      	push	{r7, lr}
 800dca8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f000 ffd6 	bl	800ec5c <vTaskDelete>
#endif
  for (;;);
 800dcb0:	e7fe      	b.n	800dcb0 <osThreadExit+0xa>

0800dcb2 <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b086      	sub	sp, #24
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcbe:	f3ef 8305 	mrs	r3, IPSR
 800dcc2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800dcca:	f06f 0305 	mvn.w	r3, #5
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	e017      	b.n	800dd02 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d103      	bne.n	800dce0 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800dcd8:	f06f 0303 	mvn.w	r3, #3
 800dcdc:	617b      	str	r3, [r7, #20]
 800dcde:	e010      	b.n	800dd02 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800dce0:	6938      	ldr	r0, [r7, #16]
 800dce2:	f001 f861 	bl	800eda8 <eTaskGetState>
 800dce6:	4603      	mov	r3, r0
 800dce8:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800dcea:	7bfb      	ldrb	r3, [r7, #15]
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d005      	beq.n	800dcfc <osThreadTerminate+0x4a>
      stat = osOK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800dcf4:	6938      	ldr	r0, [r7, #16]
 800dcf6:	f000 ffb1 	bl	800ec5c <vTaskDelete>
 800dcfa:	e002      	b.n	800dd02 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800dcfc:	f06f 0302 	mvn.w	r3, #2
 800dd00:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800dd02:	697b      	ldr	r3, [r7, #20]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd14:	f3ef 8305 	mrs	r3, IPSR
 800dd18:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d003      	beq.n	800dd28 <osDelay+0x1c>
    stat = osErrorISR;
 800dd20:	f06f 0305 	mvn.w	r3, #5
 800dd24:	60fb      	str	r3, [r7, #12]
 800dd26:	e007      	b.n	800dd38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 f804 	bl	800ed40 <vTaskDelay>
    }
  }

  return (stat);
 800dd38:	68fb      	ldr	r3, [r7, #12]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	4a07      	ldr	r2, [pc, #28]	; (800dd70 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4a06      	ldr	r2, [pc, #24]	; (800dd74 <vApplicationGetIdleTaskMemory+0x30>)
 800dd5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2280      	movs	r2, #128	; 0x80
 800dd60:	601a      	str	r2, [r3, #0]
}
 800dd62:	bf00      	nop
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	2000061c 	.word	0x2000061c
 800dd74:	200006d8 	.word	0x200006d8

0800dd78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4a07      	ldr	r2, [pc, #28]	; (800dda4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	4a06      	ldr	r2, [pc, #24]	; (800dda8 <vApplicationGetTimerTaskMemory+0x30>)
 800dd8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd96:	601a      	str	r2, [r3, #0]
}
 800dd98:	bf00      	nop
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	200008d8 	.word	0x200008d8
 800dda8:	20000994 	.word	0x20000994

0800ddac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f103 0208 	add.w	r2, r3, #8
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f103 0208 	add.w	r2, r3, #8
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f103 0208 	add.w	r2, r3, #8
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddfa:	bf00      	nop
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de06:	b480      	push	{r7}
 800de08:	b085      	sub	sp, #20
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689a      	ldr	r2, [r3, #8]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	601a      	str	r2, [r3, #0]
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de4e:	b480      	push	{r7}
 800de50:	b085      	sub	sp, #20
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de64:	d103      	bne.n	800de6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	60fb      	str	r3, [r7, #12]
 800de6c:	e00c      	b.n	800de88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3308      	adds	r3, #8
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e002      	b.n	800de7c <vListInsert+0x2e>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	429a      	cmp	r2, r3
 800de86:	d2f6      	bcs.n	800de76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685a      	ldr	r2, [r3, #4]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	6892      	ldr	r2, [r2, #8]
 800ded6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	6852      	ldr	r2, [r2, #4]
 800dee0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d103      	bne.n	800def4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	689a      	ldr	r2, [r3, #8]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	1e5a      	subs	r2, r3, #1
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800df3e:	f002 f9f1 	bl	8010324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df4a:	68f9      	ldr	r1, [r7, #12]
 800df4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df4e:	fb01 f303 	mul.w	r3, r1, r3
 800df52:	441a      	add	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6e:	3b01      	subs	r3, #1
 800df70:	68f9      	ldr	r1, [r7, #12]
 800df72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df74:	fb01 f303 	mul.w	r3, r1, r3
 800df78:	441a      	add	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	22ff      	movs	r2, #255	; 0xff
 800df82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	22ff      	movs	r2, #255	; 0xff
 800df8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d114      	bne.n	800dfbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d01a      	beq.n	800dfd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	3310      	adds	r3, #16
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f001 fa91 	bl	800f4c8 <xTaskRemoveFromEventList>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d012      	beq.n	800dfd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dfac:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <xQueueGenericReset+0xcc>)
 800dfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	e009      	b.n	800dfd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3310      	adds	r3, #16
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fef2 	bl	800ddac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	3324      	adds	r3, #36	; 0x24
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff feed 	bl	800ddac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dfd2:	f002 f9d7 	bl	8010384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dfd6:	2301      	movs	r3, #1
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08e      	sub	sp, #56	; 0x38
 800dfe8:	af02      	add	r7, sp, #8
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10a      	bne.n	800e02a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <xQueueGenericCreateStatic+0x52>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <xQueueGenericCreateStatic+0x56>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <xQueueGenericCreateStatic+0x58>
 800e03a:	2300      	movs	r3, #0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	623b      	str	r3, [r7, #32]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <xQueueGenericCreateStatic+0x7e>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <xQueueGenericCreateStatic+0x82>
 800e062:	2301      	movs	r3, #1
 800e064:	e000      	b.n	800e068 <xQueueGenericCreateStatic+0x84>
 800e066:	2300      	movs	r3, #0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10a      	bne.n	800e082 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	61fb      	str	r3, [r7, #28]
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e082:	2350      	movs	r3, #80	; 0x50
 800e084:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2b50      	cmp	r3, #80	; 0x50
 800e08a:	d00a      	beq.n	800e0a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	61bb      	str	r3, [r7, #24]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00d      	beq.n	800e0ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 f805 	bl	800e0d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3730      	adds	r7, #48	; 0x30
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	e002      	b.n	800e0f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e102:	2101      	movs	r1, #1
 800e104:	69b8      	ldr	r0, [r7, #24]
 800e106:	f7ff ff05 	bl	800df14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	78fa      	ldrb	r2, [r7, #3]
 800e10e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e112:	bf00      	nop
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b08e      	sub	sp, #56	; 0x38
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e12a:	2300      	movs	r3, #0
 800e12c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <xQueueGenericSend+0x32>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <xQueueGenericSend+0x40>
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <xQueueGenericSend+0x44>
 800e15c:	2301      	movs	r3, #1
 800e15e:	e000      	b.n	800e162 <xQueueGenericSend+0x46>
 800e160:	2300      	movs	r3, #0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10a      	bne.n	800e17c <xQueueGenericSend+0x60>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e178:	bf00      	nop
 800e17a:	e7fe      	b.n	800e17a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d103      	bne.n	800e18a <xQueueGenericSend+0x6e>
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e186:	2b01      	cmp	r3, #1
 800e188:	d101      	bne.n	800e18e <xQueueGenericSend+0x72>
 800e18a:	2301      	movs	r3, #1
 800e18c:	e000      	b.n	800e190 <xQueueGenericSend+0x74>
 800e18e:	2300      	movs	r3, #0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10a      	bne.n	800e1aa <xQueueGenericSend+0x8e>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	623b      	str	r3, [r7, #32]
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1aa:	f001 fb5f 	bl	800f86c <xTaskGetSchedulerState>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d102      	bne.n	800e1ba <xQueueGenericSend+0x9e>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <xQueueGenericSend+0xa2>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e000      	b.n	800e1c0 <xQueueGenericSend+0xa4>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <xQueueGenericSend+0xbe>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	61fb      	str	r3, [r7, #28]
}
 800e1d6:	bf00      	nop
 800e1d8:	e7fe      	b.n	800e1d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e1da:	f002 f8a3 	bl	8010324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d302      	bcc.n	800e1f0 <xQueueGenericSend+0xd4>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d129      	bne.n	800e244 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1f0:	683a      	ldr	r2, [r7, #0]
 800e1f2:	68b9      	ldr	r1, [r7, #8]
 800e1f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1f6:	f000 fa0b 	bl	800e610 <prvCopyDataToQueue>
 800e1fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d010      	beq.n	800e226 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	3324      	adds	r3, #36	; 0x24
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 f95d 	bl	800f4c8 <xTaskRemoveFromEventList>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d013      	beq.n	800e23c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e214:	4b3f      	ldr	r3, [pc, #252]	; (800e314 <xQueueGenericSend+0x1f8>)
 800e216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21a:	601a      	str	r2, [r3, #0]
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	e00a      	b.n	800e23c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d007      	beq.n	800e23c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e22c:	4b39      	ldr	r3, [pc, #228]	; (800e314 <xQueueGenericSend+0x1f8>)
 800e22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e23c:	f002 f8a2 	bl	8010384 <vPortExitCritical>
				return pdPASS;
 800e240:	2301      	movs	r3, #1
 800e242:	e063      	b.n	800e30c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d103      	bne.n	800e252 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e24a:	f002 f89b 	bl	8010384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	e05c      	b.n	800e30c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	2b00      	cmp	r3, #0
 800e256:	d106      	bne.n	800e266 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e258:	f107 0314 	add.w	r3, r7, #20
 800e25c:	4618      	mov	r0, r3
 800e25e:	f001 f997 	bl	800f590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e262:	2301      	movs	r3, #1
 800e264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e266:	f002 f88d 	bl	8010384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e26a:	f000 ff03 	bl	800f074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e26e:	f002 f859 	bl	8010324 <vPortEnterCritical>
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e278:	b25b      	sxtb	r3, r3
 800e27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27e:	d103      	bne.n	800e288 <xQueueGenericSend+0x16c>
 800e280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e282:	2200      	movs	r2, #0
 800e284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e28e:	b25b      	sxtb	r3, r3
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e294:	d103      	bne.n	800e29e <xQueueGenericSend+0x182>
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e29e:	f002 f871 	bl	8010384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2a2:	1d3a      	adds	r2, r7, #4
 800e2a4:	f107 0314 	add.w	r3, r7, #20
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f001 f986 	bl	800f5bc <xTaskCheckForTimeOut>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d124      	bne.n	800e300 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2b8:	f000 faa2 	bl	800e800 <prvIsQueueFull>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d018      	beq.n	800e2f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c4:	3310      	adds	r3, #16
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f001 f8ac 	bl	800f428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2d2:	f000 fa2d 	bl	800e730 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e2d6:	f000 fedb 	bl	800f090 <xTaskResumeAll>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f47f af7c 	bne.w	800e1da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e2e2:	4b0c      	ldr	r3, [pc, #48]	; (800e314 <xQueueGenericSend+0x1f8>)
 800e2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	e772      	b.n	800e1da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2f6:	f000 fa1b 	bl	800e730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2fa:	f000 fec9 	bl	800f090 <xTaskResumeAll>
 800e2fe:	e76c      	b.n	800e1da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e302:	f000 fa15 	bl	800e730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e306:	f000 fec3 	bl	800f090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e30a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3738      	adds	r7, #56	; 0x38
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	e000ed04 	.word	0xe000ed04

0800e318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b090      	sub	sp, #64	; 0x40
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10a      	bne.n	800e346 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d103      	bne.n	800e354 <xQueueGenericSendFromISR+0x3c>
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <xQueueGenericSendFromISR+0x40>
 800e354:	2301      	movs	r3, #1
 800e356:	e000      	b.n	800e35a <xQueueGenericSendFromISR+0x42>
 800e358:	2300      	movs	r3, #0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10a      	bne.n	800e374 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e370:	bf00      	nop
 800e372:	e7fe      	b.n	800e372 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	2b02      	cmp	r3, #2
 800e378:	d103      	bne.n	800e382 <xQueueGenericSendFromISR+0x6a>
 800e37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d101      	bne.n	800e386 <xQueueGenericSendFromISR+0x6e>
 800e382:	2301      	movs	r3, #1
 800e384:	e000      	b.n	800e388 <xQueueGenericSendFromISR+0x70>
 800e386:	2300      	movs	r3, #0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	623b      	str	r3, [r7, #32]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3a2:	f002 f8a1 	bl	80104e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e3a6:	f3ef 8211 	mrs	r2, BASEPRI
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	61fa      	str	r2, [r7, #28]
 800e3bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e3be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d302      	bcc.n	800e3d4 <xQueueGenericSendFromISR+0xbc>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d12f      	bne.n	800e434 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3e4:	683a      	ldr	r2, [r7, #0]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3ea:	f000 f911 	bl	800e610 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e3ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f6:	d112      	bne.n	800e41e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d016      	beq.n	800e42e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	3324      	adds	r3, #36	; 0x24
 800e404:	4618      	mov	r0, r3
 800e406:	f001 f85f 	bl	800f4c8 <xTaskRemoveFromEventList>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00e      	beq.n	800e42e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00b      	beq.n	800e42e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	e007      	b.n	800e42e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e41e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e422:	3301      	adds	r3, #1
 800e424:	b2db      	uxtb	r3, r3
 800e426:	b25a      	sxtb	r2, r3
 800e428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e42e:	2301      	movs	r3, #1
 800e430:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e432:	e001      	b.n	800e438 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e434:	2300      	movs	r3, #0
 800e436:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e442:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e446:	4618      	mov	r0, r3
 800e448:	3740      	adds	r7, #64	; 0x40
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08c      	sub	sp, #48	; 0x30
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e45c:	2300      	movs	r3, #0
 800e45e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10a      	bne.n	800e480 <xQueueReceive+0x30>
	__asm volatile
 800e46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	623b      	str	r3, [r7, #32]
}
 800e47c:	bf00      	nop
 800e47e:	e7fe      	b.n	800e47e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d103      	bne.n	800e48e <xQueueReceive+0x3e>
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <xQueueReceive+0x42>
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <xQueueReceive+0x44>
 800e492:	2300      	movs	r3, #0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <xQueueReceive+0x5e>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	61fb      	str	r3, [r7, #28]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4ae:	f001 f9dd 	bl	800f86c <xTaskGetSchedulerState>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <xQueueReceive+0x6e>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <xQueueReceive+0x72>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <xQueueReceive+0x74>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10a      	bne.n	800e4de <xQueueReceive+0x8e>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	61bb      	str	r3, [r7, #24]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4de:	f001 ff21 	bl	8010324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d01f      	beq.n	800e52e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4ee:	68b9      	ldr	r1, [r7, #8]
 800e4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f2:	f000 f8f7 	bl	800e6e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	1e5a      	subs	r2, r3, #1
 800e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00f      	beq.n	800e526 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	3310      	adds	r3, #16
 800e50a:	4618      	mov	r0, r3
 800e50c:	f000 ffdc 	bl	800f4c8 <xTaskRemoveFromEventList>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d007      	beq.n	800e526 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e516:	4b3d      	ldr	r3, [pc, #244]	; (800e60c <xQueueReceive+0x1bc>)
 800e518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e526:	f001 ff2d 	bl	8010384 <vPortExitCritical>
				return pdPASS;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e069      	b.n	800e602 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d103      	bne.n	800e53c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e534:	f001 ff26 	bl	8010384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e538:	2300      	movs	r3, #0
 800e53a:	e062      	b.n	800e602 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e542:	f107 0310 	add.w	r3, r7, #16
 800e546:	4618      	mov	r0, r3
 800e548:	f001 f822 	bl	800f590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e54c:	2301      	movs	r3, #1
 800e54e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e550:	f001 ff18 	bl	8010384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e554:	f000 fd8e 	bl	800f074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e558:	f001 fee4 	bl	8010324 <vPortEnterCritical>
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e562:	b25b      	sxtb	r3, r3
 800e564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e568:	d103      	bne.n	800e572 <xQueueReceive+0x122>
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e578:	b25b      	sxtb	r3, r3
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57e:	d103      	bne.n	800e588 <xQueueReceive+0x138>
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e588:	f001 fefc 	bl	8010384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e58c:	1d3a      	adds	r2, r7, #4
 800e58e:	f107 0310 	add.w	r3, r7, #16
 800e592:	4611      	mov	r1, r2
 800e594:	4618      	mov	r0, r3
 800e596:	f001 f811 	bl	800f5bc <xTaskCheckForTimeOut>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d123      	bne.n	800e5e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5a2:	f000 f917 	bl	800e7d4 <prvIsQueueEmpty>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d017      	beq.n	800e5dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ae:	3324      	adds	r3, #36	; 0x24
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f000 ff37 	bl	800f428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5bc:	f000 f8b8 	bl	800e730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5c0:	f000 fd66 	bl	800f090 <xTaskResumeAll>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d189      	bne.n	800e4de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e5ca:	4b10      	ldr	r3, [pc, #64]	; (800e60c <xQueueReceive+0x1bc>)
 800e5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	e780      	b.n	800e4de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5de:	f000 f8a7 	bl	800e730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5e2:	f000 fd55 	bl	800f090 <xTaskResumeAll>
 800e5e6:	e77a      	b.n	800e4de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e5e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ea:	f000 f8a1 	bl	800e730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ee:	f000 fd4f 	bl	800f090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f4:	f000 f8ee 	bl	800e7d4 <prvIsQueueEmpty>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f43f af6f 	beq.w	800e4de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e600:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e602:	4618      	mov	r0, r3
 800e604:	3730      	adds	r7, #48	; 0x30
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	e000ed04 	.word	0xe000ed04

0800e610 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e624:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10d      	bne.n	800e64a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d14d      	bne.n	800e6d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f001 f934 	bl	800f8a8 <xTaskPriorityDisinherit>
 800e640:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	609a      	str	r2, [r3, #8]
 800e648:	e043      	b.n	800e6d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d119      	bne.n	800e684 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6858      	ldr	r0, [r3, #4]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e658:	461a      	mov	r2, r3
 800e65a:	68b9      	ldr	r1, [r7, #8]
 800e65c:	f003 fa86 	bl	8011b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	685a      	ldr	r2, [r3, #4]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e668:	441a      	add	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	429a      	cmp	r2, r3
 800e678:	d32b      	bcc.n	800e6d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	605a      	str	r2, [r3, #4]
 800e682:	e026      	b.n	800e6d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	68d8      	ldr	r0, [r3, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68c:	461a      	mov	r2, r3
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	f003 fa6c 	bl	8011b6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	425b      	negs	r3, r3
 800e69e:	441a      	add	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	68da      	ldr	r2, [r3, #12]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d207      	bcs.n	800e6c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	689a      	ldr	r2, [r3, #8]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b8:	425b      	negs	r3, r3
 800e6ba:	441a      	add	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d105      	bne.n	800e6d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e6da:	697b      	ldr	r3, [r7, #20]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d018      	beq.n	800e728 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68da      	ldr	r2, [r3, #12]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fe:	441a      	add	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d303      	bcc.n	800e718 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	68d9      	ldr	r1, [r3, #12]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e720:	461a      	mov	r2, r3
 800e722:	6838      	ldr	r0, [r7, #0]
 800e724:	f003 fa22 	bl	8011b6c <memcpy>
	}
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e738:	f001 fdf4 	bl	8010324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e742:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e744:	e011      	b.n	800e76a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d012      	beq.n	800e774 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3324      	adds	r3, #36	; 0x24
 800e752:	4618      	mov	r0, r3
 800e754:	f000 feb8 	bl	800f4c8 <xTaskRemoveFromEventList>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e75e:	f000 ff8f 	bl	800f680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	3b01      	subs	r3, #1
 800e766:	b2db      	uxtb	r3, r3
 800e768:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	dce9      	bgt.n	800e746 <prvUnlockQueue+0x16>
 800e772:	e000      	b.n	800e776 <prvUnlockQueue+0x46>
					break;
 800e774:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	22ff      	movs	r2, #255	; 0xff
 800e77a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e77e:	f001 fe01 	bl	8010384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e782:	f001 fdcf 	bl	8010324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e78c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e78e:	e011      	b.n	800e7b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d012      	beq.n	800e7be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	3310      	adds	r3, #16
 800e79c:	4618      	mov	r0, r3
 800e79e:	f000 fe93 	bl	800f4c8 <xTaskRemoveFromEventList>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e7a8:	f000 ff6a 	bl	800f680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dce9      	bgt.n	800e790 <prvUnlockQueue+0x60>
 800e7bc:	e000      	b.n	800e7c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e7be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	22ff      	movs	r2, #255	; 0xff
 800e7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e7c8:	f001 fddc 	bl	8010384 <vPortExitCritical>
}
 800e7cc:	bf00      	nop
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7dc:	f001 fda2 	bl	8010324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d102      	bne.n	800e7ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	e001      	b.n	800e7f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7f2:	f001 fdc7 	bl	8010384 <vPortExitCritical>

	return xReturn;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e808:	f001 fd8c 	bl	8010324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e814:	429a      	cmp	r2, r3
 800e816:	d102      	bne.n	800e81e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e818:	2301      	movs	r3, #1
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	e001      	b.n	800e822 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e81e:	2300      	movs	r3, #0
 800e820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e822:	f001 fdaf 	bl	8010384 <vPortExitCritical>

	return xReturn;
 800e826:	68fb      	ldr	r3, [r7, #12]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e83a:	2300      	movs	r3, #0
 800e83c:	60fb      	str	r3, [r7, #12]
 800e83e:	e014      	b.n	800e86a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e840:	4a0f      	ldr	r2, [pc, #60]	; (800e880 <vQueueAddToRegistry+0x50>)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10b      	bne.n	800e864 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e84c:	490c      	ldr	r1, [pc, #48]	; (800e880 <vQueueAddToRegistry+0x50>)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	683a      	ldr	r2, [r7, #0]
 800e852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e856:	4a0a      	ldr	r2, [pc, #40]	; (800e880 <vQueueAddToRegistry+0x50>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	4413      	add	r3, r2
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e862:	e006      	b.n	800e872 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	3301      	adds	r3, #1
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b07      	cmp	r3, #7
 800e86e:	d9e7      	bls.n	800e840 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	20006470 	.word	0x20006470

0800e884 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e894:	f001 fd46 	bl	8010324 <vPortEnterCritical>
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e89e:	b25b      	sxtb	r3, r3
 800e8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a4:	d103      	bne.n	800e8ae <vQueueWaitForMessageRestricted+0x2a>
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8b4:	b25b      	sxtb	r3, r3
 800e8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ba:	d103      	bne.n	800e8c4 <vQueueWaitForMessageRestricted+0x40>
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8c4:	f001 fd5e 	bl	8010384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	3324      	adds	r3, #36	; 0x24
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	68b9      	ldr	r1, [r7, #8]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f000 fdc9 	bl	800f470 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e8de:	6978      	ldr	r0, [r7, #20]
 800e8e0:	f7ff ff26 	bl	800e730 <prvUnlockQueue>
	}
 800e8e4:	bf00      	nop
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08e      	sub	sp, #56	; 0x38
 800e8f0:	af04      	add	r7, sp, #16
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10a      	bne.n	800e916 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	623b      	str	r3, [r7, #32]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10a      	bne.n	800e932 <xTaskCreateStatic+0x46>
	__asm volatile
 800e91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e920:	f383 8811 	msr	BASEPRI, r3
 800e924:	f3bf 8f6f 	isb	sy
 800e928:	f3bf 8f4f 	dsb	sy
 800e92c:	61fb      	str	r3, [r7, #28]
}
 800e92e:	bf00      	nop
 800e930:	e7fe      	b.n	800e930 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e932:	23bc      	movs	r3, #188	; 0xbc
 800e934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	2bbc      	cmp	r3, #188	; 0xbc
 800e93a:	d00a      	beq.n	800e952 <xTaskCreateStatic+0x66>
	__asm volatile
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	61bb      	str	r3, [r7, #24]
}
 800e94e:	bf00      	nop
 800e950:	e7fe      	b.n	800e950 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	2b00      	cmp	r3, #0
 800e958:	d01e      	beq.n	800e998 <xTaskCreateStatic+0xac>
 800e95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d01b      	beq.n	800e998 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	2202      	movs	r2, #2
 800e96e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e972:	2300      	movs	r3, #0
 800e974:	9303      	str	r3, [sp, #12]
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	9302      	str	r3, [sp, #8]
 800e97a:	f107 0314 	add.w	r3, r7, #20
 800e97e:	9301      	str	r3, [sp, #4]
 800e980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	68b9      	ldr	r1, [r7, #8]
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f000 f850 	bl	800ea30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e992:	f000 f8f3 	bl	800eb7c <prvAddNewTaskToReadyList>
 800e996:	e001      	b.n	800e99c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e998:	2300      	movs	r3, #0
 800e99a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e99c:	697b      	ldr	r3, [r7, #20]
	}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3728      	adds	r7, #40	; 0x28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b08c      	sub	sp, #48	; 0x30
 800e9aa:	af04      	add	r7, sp, #16
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	603b      	str	r3, [r7, #0]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e9b6:	88fb      	ldrh	r3, [r7, #6]
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f001 fdd4 	bl	8010568 <pvPortMalloc>
 800e9c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00e      	beq.n	800e9e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e9c8:	20bc      	movs	r0, #188	; 0xbc
 800e9ca:	f001 fdcd 	bl	8010568 <pvPortMalloc>
 800e9ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	697a      	ldr	r2, [r7, #20]
 800e9da:	631a      	str	r2, [r3, #48]	; 0x30
 800e9dc:	e005      	b.n	800e9ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e9de:	6978      	ldr	r0, [r7, #20]
 800e9e0:	f001 fe8e 	bl	8010700 <vPortFree>
 800e9e4:	e001      	b.n	800e9ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d017      	beq.n	800ea20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e9f8:	88fa      	ldrh	r2, [r7, #6]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	9303      	str	r3, [sp, #12]
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	9302      	str	r3, [sp, #8]
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	9301      	str	r3, [sp, #4]
 800ea06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 f80e 	bl	800ea30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea14:	69f8      	ldr	r0, [r7, #28]
 800ea16:	f000 f8b1 	bl	800eb7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	61bb      	str	r3, [r7, #24]
 800ea1e:	e002      	b.n	800ea26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea20:	f04f 33ff 	mov.w	r3, #4294967295
 800ea24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea26:	69bb      	ldr	r3, [r7, #24]
	}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3720      	adds	r7, #32
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b088      	sub	sp, #32
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	461a      	mov	r2, r3
 800ea48:	21a5      	movs	r1, #165	; 0xa5
 800ea4a:	f003 f8b7 	bl	8011bbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	f023 0307 	bic.w	r3, r3, #7
 800ea66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	f003 0307 	and.w	r3, r3, #7
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ea72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	617b      	str	r3, [r7, #20]
}
 800ea84:	bf00      	nop
 800ea86:	e7fe      	b.n	800ea86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d01f      	beq.n	800eace <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]
 800ea92:	e012      	b.n	800eaba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	4413      	add	r3, r2
 800ea9a:	7819      	ldrb	r1, [r3, #0]
 800ea9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	3334      	adds	r3, #52	; 0x34
 800eaa4:	460a      	mov	r2, r1
 800eaa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	4413      	add	r3, r2
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d006      	beq.n	800eac2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	3301      	adds	r3, #1
 800eab8:	61fb      	str	r3, [r7, #28]
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b0f      	cmp	r3, #15
 800eabe:	d9e9      	bls.n	800ea94 <prvInitialiseNewTask+0x64>
 800eac0:	e000      	b.n	800eac4 <prvInitialiseNewTask+0x94>
			{
				break;
 800eac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eacc:	e003      	b.n	800ead6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	2b37      	cmp	r3, #55	; 0x37
 800eada:	d901      	bls.n	800eae0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eadc:	2337      	movs	r3, #55	; 0x37
 800eade:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eae4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	2200      	movs	r2, #0
 800eaf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff f978 	bl	800ddec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	3318      	adds	r3, #24
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff f973 	bl	800ddec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	3354      	adds	r3, #84	; 0x54
 800eb30:	2260      	movs	r2, #96	; 0x60
 800eb32:	2100      	movs	r1, #0
 800eb34:	4618      	mov	r0, r3
 800eb36:	f003 f841 	bl	8011bbc <memset>
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3c:	4a0c      	ldr	r2, [pc, #48]	; (800eb70 <prvInitialiseNewTask+0x140>)
 800eb3e:	659a      	str	r2, [r3, #88]	; 0x58
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	4a0c      	ldr	r2, [pc, #48]	; (800eb74 <prvInitialiseNewTask+0x144>)
 800eb44:	65da      	str	r2, [r3, #92]	; 0x5c
 800eb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb48:	4a0b      	ldr	r2, [pc, #44]	; (800eb78 <prvInitialiseNewTask+0x148>)
 800eb4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	68f9      	ldr	r1, [r7, #12]
 800eb50:	69b8      	ldr	r0, [r7, #24]
 800eb52:	f001 fab9 	bl	80100c8 <pxPortInitialiseStack>
 800eb56:	4602      	mov	r2, r0
 800eb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d002      	beq.n	800eb68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb68:	bf00      	nop
 800eb6a:	3720      	adds	r7, #32
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	08018d6c 	.word	0x08018d6c
 800eb74:	08018d8c 	.word	0x08018d8c
 800eb78:	08018d4c 	.word	0x08018d4c

0800eb7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb84:	f001 fbce 	bl	8010324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb88:	4b2d      	ldr	r3, [pc, #180]	; (800ec40 <prvAddNewTaskToReadyList+0xc4>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	4a2c      	ldr	r2, [pc, #176]	; (800ec40 <prvAddNewTaskToReadyList+0xc4>)
 800eb90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb92:	4b2c      	ldr	r3, [pc, #176]	; (800ec44 <prvAddNewTaskToReadyList+0xc8>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d109      	bne.n	800ebae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb9a:	4a2a      	ldr	r2, [pc, #168]	; (800ec44 <prvAddNewTaskToReadyList+0xc8>)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eba0:	4b27      	ldr	r3, [pc, #156]	; (800ec40 <prvAddNewTaskToReadyList+0xc4>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d110      	bne.n	800ebca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eba8:	f000 fd8e 	bl	800f6c8 <prvInitialiseTaskLists>
 800ebac:	e00d      	b.n	800ebca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ebae:	4b26      	ldr	r3, [pc, #152]	; (800ec48 <prvAddNewTaskToReadyList+0xcc>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d109      	bne.n	800ebca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebb6:	4b23      	ldr	r3, [pc, #140]	; (800ec44 <prvAddNewTaskToReadyList+0xc8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d802      	bhi.n	800ebca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ebc4:	4a1f      	ldr	r2, [pc, #124]	; (800ec44 <prvAddNewTaskToReadyList+0xc8>)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ebca:	4b20      	ldr	r3, [pc, #128]	; (800ec4c <prvAddNewTaskToReadyList+0xd0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	4a1e      	ldr	r2, [pc, #120]	; (800ec4c <prvAddNewTaskToReadyList+0xd0>)
 800ebd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ebd4:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <prvAddNewTaskToReadyList+0xd0>)
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe0:	4b1b      	ldr	r3, [pc, #108]	; (800ec50 <prvAddNewTaskToReadyList+0xd4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d903      	bls.n	800ebf0 <prvAddNewTaskToReadyList+0x74>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebec:	4a18      	ldr	r2, [pc, #96]	; (800ec50 <prvAddNewTaskToReadyList+0xd4>)
 800ebee:	6013      	str	r3, [r2, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	4413      	add	r3, r2
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	4a15      	ldr	r2, [pc, #84]	; (800ec54 <prvAddNewTaskToReadyList+0xd8>)
 800ebfe:	441a      	add	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3304      	adds	r3, #4
 800ec04:	4619      	mov	r1, r3
 800ec06:	4610      	mov	r0, r2
 800ec08:	f7ff f8fd 	bl	800de06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec0c:	f001 fbba 	bl	8010384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec10:	4b0d      	ldr	r3, [pc, #52]	; (800ec48 <prvAddNewTaskToReadyList+0xcc>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00e      	beq.n	800ec36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec18:	4b0a      	ldr	r3, [pc, #40]	; (800ec44 <prvAddNewTaskToReadyList+0xc8>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d207      	bcs.n	800ec36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec26:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <prvAddNewTaskToReadyList+0xdc>)
 800ec28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20001268 	.word	0x20001268
 800ec44:	20000d94 	.word	0x20000d94
 800ec48:	20001274 	.word	0x20001274
 800ec4c:	20001284 	.word	0x20001284
 800ec50:	20001270 	.word	0x20001270
 800ec54:	20000d98 	.word	0x20000d98
 800ec58:	e000ed04 	.word	0xe000ed04

0800ec5c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ec64:	f001 fb5e 	bl	8010324 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d102      	bne.n	800ec74 <vTaskDelete+0x18>
 800ec6e:	4b2c      	ldr	r3, [pc, #176]	; (800ed20 <vTaskDelete+0xc4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	e000      	b.n	800ec76 <vTaskDelete+0x1a>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff f91f 	bl	800dec0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d004      	beq.n	800ec94 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3318      	adds	r3, #24
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff f916 	bl	800dec0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ec94:	4b23      	ldr	r3, [pc, #140]	; (800ed24 <vTaskDelete+0xc8>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	4a22      	ldr	r2, [pc, #136]	; (800ed24 <vTaskDelete+0xc8>)
 800ec9c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ec9e:	4b20      	ldr	r3, [pc, #128]	; (800ed20 <vTaskDelete+0xc4>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d10b      	bne.n	800ecc0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4619      	mov	r1, r3
 800ecae:	481e      	ldr	r0, [pc, #120]	; (800ed28 <vTaskDelete+0xcc>)
 800ecb0:	f7ff f8a9 	bl	800de06 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ecb4:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <vTaskDelete+0xd0>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	4a1c      	ldr	r2, [pc, #112]	; (800ed2c <vTaskDelete+0xd0>)
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	e009      	b.n	800ecd4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ecc0:	4b1b      	ldr	r3, [pc, #108]	; (800ed30 <vTaskDelete+0xd4>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	4a1a      	ldr	r2, [pc, #104]	; (800ed30 <vTaskDelete+0xd4>)
 800ecc8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f000 fd6a 	bl	800f7a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ecd0:	f000 fd9c 	bl	800f80c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ecd4:	f001 fb56 	bl	8010384 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ecd8:	4b16      	ldr	r3, [pc, #88]	; (800ed34 <vTaskDelete+0xd8>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01b      	beq.n	800ed18 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ece0:	4b0f      	ldr	r3, [pc, #60]	; (800ed20 <vTaskDelete+0xc4>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d116      	bne.n	800ed18 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ecea:	4b13      	ldr	r3, [pc, #76]	; (800ed38 <vTaskDelete+0xdc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00a      	beq.n	800ed08 <vTaskDelete+0xac>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	60bb      	str	r3, [r7, #8]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ed08:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <vTaskDelete+0xe0>)
 800ed0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20000d94 	.word	0x20000d94
 800ed24:	20001284 	.word	0x20001284
 800ed28:	2000123c 	.word	0x2000123c
 800ed2c:	20001250 	.word	0x20001250
 800ed30:	20001268 	.word	0x20001268
 800ed34:	20001274 	.word	0x20001274
 800ed38:	20001290 	.word	0x20001290
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d017      	beq.n	800ed82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed52:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <vTaskDelay+0x60>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00a      	beq.n	800ed70 <vTaskDelay+0x30>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	60bb      	str	r3, [r7, #8]
}
 800ed6c:	bf00      	nop
 800ed6e:	e7fe      	b.n	800ed6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed70:	f000 f980 	bl	800f074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed74:	2100      	movs	r1, #0
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fe04 	bl	800f984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed7c:	f000 f988 	bl	800f090 <xTaskResumeAll>
 800ed80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d107      	bne.n	800ed98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed88:	4b06      	ldr	r3, [pc, #24]	; (800eda4 <vTaskDelay+0x64>)
 800ed8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20001290 	.word	0x20001290
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <eTaskGetState+0x28>
	__asm volatile
 800edba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	60bb      	str	r3, [r7, #8]
}
 800edcc:	bf00      	nop
 800edce:	e7fe      	b.n	800edce <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800edd0:	4b23      	ldr	r3, [pc, #140]	; (800ee60 <eTaskGetState+0xb8>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	69ba      	ldr	r2, [r7, #24]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d102      	bne.n	800ede0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800edda:	2300      	movs	r3, #0
 800eddc:	77fb      	strb	r3, [r7, #31]
 800edde:	e03a      	b.n	800ee56 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800ede0:	f001 faa0 	bl	8010324 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800edea:	4b1e      	ldr	r3, [pc, #120]	; (800ee64 <eTaskGetState+0xbc>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800edf0:	4b1d      	ldr	r3, [pc, #116]	; (800ee68 <eTaskGetState+0xc0>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800edf6:	f001 fac5 	bl	8010384 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d003      	beq.n	800ee0a <eTaskGetState+0x62>
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d102      	bne.n	800ee10 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	77fb      	strb	r3, [r7, #31]
 800ee0e:	e022      	b.n	800ee56 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	4a16      	ldr	r2, [pc, #88]	; (800ee6c <eTaskGetState+0xc4>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d112      	bne.n	800ee3e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10b      	bne.n	800ee38 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d102      	bne.n	800ee32 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	77fb      	strb	r3, [r7, #31]
 800ee30:	e011      	b.n	800ee56 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800ee32:	2303      	movs	r3, #3
 800ee34:	77fb      	strb	r3, [r7, #31]
 800ee36:	e00e      	b.n	800ee56 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ee38:	2302      	movs	r3, #2
 800ee3a:	77fb      	strb	r3, [r7, #31]
 800ee3c:	e00b      	b.n	800ee56 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	4a0b      	ldr	r2, [pc, #44]	; (800ee70 <eTaskGetState+0xc8>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d002      	beq.n	800ee4c <eTaskGetState+0xa4>
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d102      	bne.n	800ee52 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ee4c:	2304      	movs	r3, #4
 800ee4e:	77fb      	strb	r3, [r7, #31]
 800ee50:	e001      	b.n	800ee56 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ee52:	2301      	movs	r3, #1
 800ee54:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ee56:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3720      	adds	r7, #32
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20000d94 	.word	0x20000d94
 800ee64:	20001220 	.word	0x20001220
 800ee68:	20001224 	.word	0x20001224
 800ee6c:	20001254 	.word	0x20001254
 800ee70:	2000123c 	.word	0x2000123c

0800ee74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ee74:	b480      	push	{r7}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10a      	bne.n	800eea0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	60fb      	str	r3, [r7, #12]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	4a0a      	ldr	r2, [pc, #40]	; (800eed0 <prvTaskIsTaskSuspended+0x5c>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d10a      	bne.n	800eec0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeae:	4a09      	ldr	r2, [pc, #36]	; (800eed4 <prvTaskIsTaskSuspended+0x60>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d005      	beq.n	800eec0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eec0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800eec2:	4618      	mov	r0, r3
 800eec4:	371c      	adds	r7, #28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	20001254 	.word	0x20001254
 800eed4:	20001228 	.word	0x20001228

0800eed8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d10a      	bne.n	800ef00 <vTaskResume+0x28>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	60bb      	str	r3, [r7, #8]
}
 800eefc:	bf00      	nop
 800eefe:	e7fe      	b.n	800eefe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ef00:	4b20      	ldr	r3, [pc, #128]	; (800ef84 <vTaskResume+0xac>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d038      	beq.n	800ef7c <vTaskResume+0xa4>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d035      	beq.n	800ef7c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ef10:	f001 fa08 	bl	8010324 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff ffad 	bl	800ee74 <prvTaskIsTaskSuspended>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d02b      	beq.n	800ef78 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	3304      	adds	r3, #4
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe ffcb 	bl	800dec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef2e:	4b16      	ldr	r3, [pc, #88]	; (800ef88 <vTaskResume+0xb0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d903      	bls.n	800ef3e <vTaskResume+0x66>
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3a:	4a13      	ldr	r2, [pc, #76]	; (800ef88 <vTaskResume+0xb0>)
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef42:	4613      	mov	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4a10      	ldr	r2, [pc, #64]	; (800ef8c <vTaskResume+0xb4>)
 800ef4c:	441a      	add	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3304      	adds	r3, #4
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7fe ff56 	bl	800de06 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5e:	4b09      	ldr	r3, [pc, #36]	; (800ef84 <vTaskResume+0xac>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d307      	bcc.n	800ef78 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ef68:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <vTaskResume+0xb8>)
 800ef6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ef78:	f001 fa04 	bl	8010384 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef7c:	bf00      	nop
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	20000d94 	.word	0x20000d94
 800ef88:	20001270 	.word	0x20001270
 800ef8c:	20000d98 	.word	0x20000d98
 800ef90:	e000ed04 	.word	0xe000ed04

0800ef94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08a      	sub	sp, #40	; 0x28
 800ef98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800efa2:	463a      	mov	r2, r7
 800efa4:	1d39      	adds	r1, r7, #4
 800efa6:	f107 0308 	add.w	r3, r7, #8
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fe feca 	bl	800dd44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	9202      	str	r2, [sp, #8]
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	2300      	movs	r3, #0
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	2300      	movs	r3, #0
 800efc0:	460a      	mov	r2, r1
 800efc2:	4924      	ldr	r1, [pc, #144]	; (800f054 <vTaskStartScheduler+0xc0>)
 800efc4:	4824      	ldr	r0, [pc, #144]	; (800f058 <vTaskStartScheduler+0xc4>)
 800efc6:	f7ff fc91 	bl	800e8ec <xTaskCreateStatic>
 800efca:	4603      	mov	r3, r0
 800efcc:	4a23      	ldr	r2, [pc, #140]	; (800f05c <vTaskStartScheduler+0xc8>)
 800efce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800efd0:	4b22      	ldr	r3, [pc, #136]	; (800f05c <vTaskStartScheduler+0xc8>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800efd8:	2301      	movs	r3, #1
 800efda:	617b      	str	r3, [r7, #20]
 800efdc:	e001      	b.n	800efe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800efde:	2300      	movs	r3, #0
 800efe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d102      	bne.n	800efee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800efe8:	f000 fd20 	bl	800fa2c <xTimerCreateTimerTask>
 800efec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d11b      	bne.n	800f02c <vTaskStartScheduler+0x98>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	613b      	str	r3, [r7, #16]
}
 800f006:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <vTaskStartScheduler+0xcc>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3354      	adds	r3, #84	; 0x54
 800f00e:	4a15      	ldr	r2, [pc, #84]	; (800f064 <vTaskStartScheduler+0xd0>)
 800f010:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <vTaskStartScheduler+0xd4>)
 800f014:	f04f 32ff 	mov.w	r2, #4294967295
 800f018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f01a:	4b14      	ldr	r3, [pc, #80]	; (800f06c <vTaskStartScheduler+0xd8>)
 800f01c:	2201      	movs	r2, #1
 800f01e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f020:	4b13      	ldr	r3, [pc, #76]	; (800f070 <vTaskStartScheduler+0xdc>)
 800f022:	2200      	movs	r2, #0
 800f024:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f026:	f001 f8db 	bl	80101e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f02a:	e00e      	b.n	800f04a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f032:	d10a      	bne.n	800f04a <vTaskStartScheduler+0xb6>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	60fb      	str	r3, [r7, #12]
}
 800f046:	bf00      	nop
 800f048:	e7fe      	b.n	800f048 <vTaskStartScheduler+0xb4>
}
 800f04a:	bf00      	nop
 800f04c:	3718      	adds	r7, #24
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	08018aa0 	.word	0x08018aa0
 800f058:	0800f699 	.word	0x0800f699
 800f05c:	2000128c 	.word	0x2000128c
 800f060:	20000d94 	.word	0x20000d94
 800f064:	200000d8 	.word	0x200000d8
 800f068:	20001288 	.word	0x20001288
 800f06c:	20001274 	.word	0x20001274
 800f070:	2000126c 	.word	0x2000126c

0800f074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f074:	b480      	push	{r7}
 800f076:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f078:	4b04      	ldr	r3, [pc, #16]	; (800f08c <vTaskSuspendAll+0x18>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	3301      	adds	r3, #1
 800f07e:	4a03      	ldr	r2, [pc, #12]	; (800f08c <vTaskSuspendAll+0x18>)
 800f080:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f082:	bf00      	nop
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	20001290 	.word	0x20001290

0800f090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f096:	2300      	movs	r3, #0
 800f098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f09a:	2300      	movs	r3, #0
 800f09c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f09e:	4b42      	ldr	r3, [pc, #264]	; (800f1a8 <xTaskResumeAll+0x118>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10a      	bne.n	800f0bc <xTaskResumeAll+0x2c>
	__asm volatile
 800f0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	603b      	str	r3, [r7, #0]
}
 800f0b8:	bf00      	nop
 800f0ba:	e7fe      	b.n	800f0ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f0bc:	f001 f932 	bl	8010324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f0c0:	4b39      	ldr	r3, [pc, #228]	; (800f1a8 <xTaskResumeAll+0x118>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	4a38      	ldr	r2, [pc, #224]	; (800f1a8 <xTaskResumeAll+0x118>)
 800f0c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0ca:	4b37      	ldr	r3, [pc, #220]	; (800f1a8 <xTaskResumeAll+0x118>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d162      	bne.n	800f198 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f0d2:	4b36      	ldr	r3, [pc, #216]	; (800f1ac <xTaskResumeAll+0x11c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d05e      	beq.n	800f198 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0da:	e02f      	b.n	800f13c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0dc:	4b34      	ldr	r3, [pc, #208]	; (800f1b0 <xTaskResumeAll+0x120>)
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	3318      	adds	r3, #24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe fee9 	bl	800dec0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fe fee4 	bl	800dec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fc:	4b2d      	ldr	r3, [pc, #180]	; (800f1b4 <xTaskResumeAll+0x124>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d903      	bls.n	800f10c <xTaskResumeAll+0x7c>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	4a2a      	ldr	r2, [pc, #168]	; (800f1b4 <xTaskResumeAll+0x124>)
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f110:	4613      	mov	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4a27      	ldr	r2, [pc, #156]	; (800f1b8 <xTaskResumeAll+0x128>)
 800f11a:	441a      	add	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	3304      	adds	r3, #4
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	f7fe fe6f 	bl	800de06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12c:	4b23      	ldr	r3, [pc, #140]	; (800f1bc <xTaskResumeAll+0x12c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f132:	429a      	cmp	r2, r3
 800f134:	d302      	bcc.n	800f13c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f136:	4b22      	ldr	r3, [pc, #136]	; (800f1c0 <xTaskResumeAll+0x130>)
 800f138:	2201      	movs	r2, #1
 800f13a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f13c:	4b1c      	ldr	r3, [pc, #112]	; (800f1b0 <xTaskResumeAll+0x120>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1cb      	bne.n	800f0dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f14a:	f000 fb5f 	bl	800f80c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f14e:	4b1d      	ldr	r3, [pc, #116]	; (800f1c4 <xTaskResumeAll+0x134>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d010      	beq.n	800f17c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f15a:	f000 f847 	bl	800f1ec <xTaskIncrementTick>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f164:	4b16      	ldr	r3, [pc, #88]	; (800f1c0 <xTaskResumeAll+0x130>)
 800f166:	2201      	movs	r2, #1
 800f168:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1f1      	bne.n	800f15a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f176:	4b13      	ldr	r3, [pc, #76]	; (800f1c4 <xTaskResumeAll+0x134>)
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f17c:	4b10      	ldr	r3, [pc, #64]	; (800f1c0 <xTaskResumeAll+0x130>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d009      	beq.n	800f198 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f184:	2301      	movs	r3, #1
 800f186:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f188:	4b0f      	ldr	r3, [pc, #60]	; (800f1c8 <xTaskResumeAll+0x138>)
 800f18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f18e:	601a      	str	r2, [r3, #0]
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f198:	f001 f8f4 	bl	8010384 <vPortExitCritical>

	return xAlreadyYielded;
 800f19c:	68bb      	ldr	r3, [r7, #8]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20001290 	.word	0x20001290
 800f1ac:	20001268 	.word	0x20001268
 800f1b0:	20001228 	.word	0x20001228
 800f1b4:	20001270 	.word	0x20001270
 800f1b8:	20000d98 	.word	0x20000d98
 800f1bc:	20000d94 	.word	0x20000d94
 800f1c0:	2000127c 	.word	0x2000127c
 800f1c4:	20001278 	.word	0x20001278
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f1d2:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <xTaskGetTickCount+0x1c>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f1d8:	687b      	ldr	r3, [r7, #4]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	370c      	adds	r7, #12
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	2000126c 	.word	0x2000126c

0800f1ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1f6:	4b4f      	ldr	r3, [pc, #316]	; (800f334 <xTaskIncrementTick+0x148>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f040 808f 	bne.w	800f31e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f200:	4b4d      	ldr	r3, [pc, #308]	; (800f338 <xTaskIncrementTick+0x14c>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3301      	adds	r3, #1
 800f206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f208:	4a4b      	ldr	r2, [pc, #300]	; (800f338 <xTaskIncrementTick+0x14c>)
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d120      	bne.n	800f256 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f214:	4b49      	ldr	r3, [pc, #292]	; (800f33c <xTaskIncrementTick+0x150>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00a      	beq.n	800f234 <xTaskIncrementTick+0x48>
	__asm volatile
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	603b      	str	r3, [r7, #0]
}
 800f230:	bf00      	nop
 800f232:	e7fe      	b.n	800f232 <xTaskIncrementTick+0x46>
 800f234:	4b41      	ldr	r3, [pc, #260]	; (800f33c <xTaskIncrementTick+0x150>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	60fb      	str	r3, [r7, #12]
 800f23a:	4b41      	ldr	r3, [pc, #260]	; (800f340 <xTaskIncrementTick+0x154>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a3f      	ldr	r2, [pc, #252]	; (800f33c <xTaskIncrementTick+0x150>)
 800f240:	6013      	str	r3, [r2, #0]
 800f242:	4a3f      	ldr	r2, [pc, #252]	; (800f340 <xTaskIncrementTick+0x154>)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	4b3e      	ldr	r3, [pc, #248]	; (800f344 <xTaskIncrementTick+0x158>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	4a3d      	ldr	r2, [pc, #244]	; (800f344 <xTaskIncrementTick+0x158>)
 800f250:	6013      	str	r3, [r2, #0]
 800f252:	f000 fadb 	bl	800f80c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f256:	4b3c      	ldr	r3, [pc, #240]	; (800f348 <xTaskIncrementTick+0x15c>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	693a      	ldr	r2, [r7, #16]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d349      	bcc.n	800f2f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f260:	4b36      	ldr	r3, [pc, #216]	; (800f33c <xTaskIncrementTick+0x150>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d104      	bne.n	800f274 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f26a:	4b37      	ldr	r3, [pc, #220]	; (800f348 <xTaskIncrementTick+0x15c>)
 800f26c:	f04f 32ff 	mov.w	r2, #4294967295
 800f270:	601a      	str	r2, [r3, #0]
					break;
 800f272:	e03f      	b.n	800f2f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f274:	4b31      	ldr	r3, [pc, #196]	; (800f33c <xTaskIncrementTick+0x150>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f284:	693a      	ldr	r2, [r7, #16]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d203      	bcs.n	800f294 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f28c:	4a2e      	ldr	r2, [pc, #184]	; (800f348 <xTaskIncrementTick+0x15c>)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f292:	e02f      	b.n	800f2f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	3304      	adds	r3, #4
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fe fe11 	bl	800dec0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d004      	beq.n	800f2b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	3318      	adds	r3, #24
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fe08 	bl	800dec0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b4:	4b25      	ldr	r3, [pc, #148]	; (800f34c <xTaskIncrementTick+0x160>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d903      	bls.n	800f2c4 <xTaskIncrementTick+0xd8>
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c0:	4a22      	ldr	r2, [pc, #136]	; (800f34c <xTaskIncrementTick+0x160>)
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4a1f      	ldr	r2, [pc, #124]	; (800f350 <xTaskIncrementTick+0x164>)
 800f2d2:	441a      	add	r2, r3
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fe fd93 	bl	800de06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e4:	4b1b      	ldr	r3, [pc, #108]	; (800f354 <xTaskIncrementTick+0x168>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d3b8      	bcc.n	800f260 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2f2:	e7b5      	b.n	800f260 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2f4:	4b17      	ldr	r3, [pc, #92]	; (800f354 <xTaskIncrementTick+0x168>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2fa:	4915      	ldr	r1, [pc, #84]	; (800f350 <xTaskIncrementTick+0x164>)
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	4413      	add	r3, r2
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	440b      	add	r3, r1
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d901      	bls.n	800f310 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f30c:	2301      	movs	r3, #1
 800f30e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f310:	4b11      	ldr	r3, [pc, #68]	; (800f358 <xTaskIncrementTick+0x16c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d007      	beq.n	800f328 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f318:	2301      	movs	r3, #1
 800f31a:	617b      	str	r3, [r7, #20]
 800f31c:	e004      	b.n	800f328 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f31e:	4b0f      	ldr	r3, [pc, #60]	; (800f35c <xTaskIncrementTick+0x170>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3301      	adds	r3, #1
 800f324:	4a0d      	ldr	r2, [pc, #52]	; (800f35c <xTaskIncrementTick+0x170>)
 800f326:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f328:	697b      	ldr	r3, [r7, #20]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20001290 	.word	0x20001290
 800f338:	2000126c 	.word	0x2000126c
 800f33c:	20001220 	.word	0x20001220
 800f340:	20001224 	.word	0x20001224
 800f344:	20001280 	.word	0x20001280
 800f348:	20001288 	.word	0x20001288
 800f34c:	20001270 	.word	0x20001270
 800f350:	20000d98 	.word	0x20000d98
 800f354:	20000d94 	.word	0x20000d94
 800f358:	2000127c 	.word	0x2000127c
 800f35c:	20001278 	.word	0x20001278

0800f360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f366:	4b2a      	ldr	r3, [pc, #168]	; (800f410 <vTaskSwitchContext+0xb0>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d003      	beq.n	800f376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f36e:	4b29      	ldr	r3, [pc, #164]	; (800f414 <vTaskSwitchContext+0xb4>)
 800f370:	2201      	movs	r2, #1
 800f372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f374:	e046      	b.n	800f404 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f376:	4b27      	ldr	r3, [pc, #156]	; (800f414 <vTaskSwitchContext+0xb4>)
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f37c:	4b26      	ldr	r3, [pc, #152]	; (800f418 <vTaskSwitchContext+0xb8>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	e010      	b.n	800f3a6 <vTaskSwitchContext+0x46>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10a      	bne.n	800f3a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800f38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	607b      	str	r3, [r7, #4]
}
 800f39c:	bf00      	nop
 800f39e:	e7fe      	b.n	800f39e <vTaskSwitchContext+0x3e>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	60fb      	str	r3, [r7, #12]
 800f3a6:	491d      	ldr	r1, [pc, #116]	; (800f41c <vTaskSwitchContext+0xbc>)
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	4413      	add	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	440b      	add	r3, r1
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d0e4      	beq.n	800f384 <vTaskSwitchContext+0x24>
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4413      	add	r3, r2
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	4a15      	ldr	r2, [pc, #84]	; (800f41c <vTaskSwitchContext+0xbc>)
 800f3c6:	4413      	add	r3, r2
 800f3c8:	60bb      	str	r3, [r7, #8]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	605a      	str	r2, [r3, #4]
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	685a      	ldr	r2, [r3, #4]
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	3308      	adds	r3, #8
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d104      	bne.n	800f3ea <vTaskSwitchContext+0x8a>
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	605a      	str	r2, [r3, #4]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	4a0b      	ldr	r2, [pc, #44]	; (800f420 <vTaskSwitchContext+0xc0>)
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	4a08      	ldr	r2, [pc, #32]	; (800f418 <vTaskSwitchContext+0xb8>)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f3fa:	4b09      	ldr	r3, [pc, #36]	; (800f420 <vTaskSwitchContext+0xc0>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	3354      	adds	r3, #84	; 0x54
 800f400:	4a08      	ldr	r2, [pc, #32]	; (800f424 <vTaskSwitchContext+0xc4>)
 800f402:	6013      	str	r3, [r2, #0]
}
 800f404:	bf00      	nop
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	20001290 	.word	0x20001290
 800f414:	2000127c 	.word	0x2000127c
 800f418:	20001270 	.word	0x20001270
 800f41c:	20000d98 	.word	0x20000d98
 800f420:	20000d94 	.word	0x20000d94
 800f424:	200000d8 	.word	0x200000d8

0800f428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10a      	bne.n	800f44e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	60fb      	str	r3, [r7, #12]
}
 800f44a:	bf00      	nop
 800f44c:	e7fe      	b.n	800f44c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f44e:	4b07      	ldr	r3, [pc, #28]	; (800f46c <vTaskPlaceOnEventList+0x44>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3318      	adds	r3, #24
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fe fcf9 	bl	800de4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f45c:	2101      	movs	r1, #1
 800f45e:	6838      	ldr	r0, [r7, #0]
 800f460:	f000 fa90 	bl	800f984 <prvAddCurrentTaskToDelayedList>
}
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20000d94 	.word	0x20000d94

0800f470 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10a      	bne.n	800f498 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	617b      	str	r3, [r7, #20]
}
 800f494:	bf00      	nop
 800f496:	e7fe      	b.n	800f496 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f498:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	3318      	adds	r3, #24
 800f49e:	4619      	mov	r1, r3
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7fe fcb0 	bl	800de06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f4b2:	6879      	ldr	r1, [r7, #4]
 800f4b4:	68b8      	ldr	r0, [r7, #8]
 800f4b6:	f000 fa65 	bl	800f984 <prvAddCurrentTaskToDelayedList>
	}
 800f4ba:	bf00      	nop
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20000d94 	.word	0x20000d94

0800f4c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10a      	bne.n	800f4f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	60fb      	str	r3, [r7, #12]
}
 800f4f0:	bf00      	nop
 800f4f2:	e7fe      	b.n	800f4f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	3318      	adds	r3, #24
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fe fce1 	bl	800dec0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4fe:	4b1e      	ldr	r3, [pc, #120]	; (800f578 <xTaskRemoveFromEventList+0xb0>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d11d      	bne.n	800f542 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	3304      	adds	r3, #4
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fe fcd8 	bl	800dec0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4b19      	ldr	r3, [pc, #100]	; (800f57c <xTaskRemoveFromEventList+0xb4>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d903      	bls.n	800f524 <xTaskRemoveFromEventList+0x5c>
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f520:	4a16      	ldr	r2, [pc, #88]	; (800f57c <xTaskRemoveFromEventList+0xb4>)
 800f522:	6013      	str	r3, [r2, #0]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f528:	4613      	mov	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4413      	add	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4a13      	ldr	r2, [pc, #76]	; (800f580 <xTaskRemoveFromEventList+0xb8>)
 800f532:	441a      	add	r2, r3
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	3304      	adds	r3, #4
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7fe fc63 	bl	800de06 <vListInsertEnd>
 800f540:	e005      	b.n	800f54e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	3318      	adds	r3, #24
 800f546:	4619      	mov	r1, r3
 800f548:	480e      	ldr	r0, [pc, #56]	; (800f584 <xTaskRemoveFromEventList+0xbc>)
 800f54a:	f7fe fc5c 	bl	800de06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f552:	4b0d      	ldr	r3, [pc, #52]	; (800f588 <xTaskRemoveFromEventList+0xc0>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f558:	429a      	cmp	r2, r3
 800f55a:	d905      	bls.n	800f568 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f55c:	2301      	movs	r3, #1
 800f55e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f560:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <xTaskRemoveFromEventList+0xc4>)
 800f562:	2201      	movs	r2, #1
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	e001      	b.n	800f56c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f568:	2300      	movs	r3, #0
 800f56a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f56c:	697b      	ldr	r3, [r7, #20]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	20001290 	.word	0x20001290
 800f57c:	20001270 	.word	0x20001270
 800f580:	20000d98 	.word	0x20000d98
 800f584:	20001228 	.word	0x20001228
 800f588:	20000d94 	.word	0x20000d94
 800f58c:	2000127c 	.word	0x2000127c

0800f590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f598:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <vTaskInternalSetTimeOutState+0x24>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5a0:	4b05      	ldr	r3, [pc, #20]	; (800f5b8 <vTaskInternalSetTimeOutState+0x28>)
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	605a      	str	r2, [r3, #4]
}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	20001280 	.word	0x20001280
 800f5b8:	2000126c 	.word	0x2000126c

0800f5bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b088      	sub	sp, #32
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d10a      	bne.n	800f5e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	613b      	str	r3, [r7, #16]
}
 800f5de:	bf00      	nop
 800f5e0:	e7fe      	b.n	800f5e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10a      	bne.n	800f5fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ec:	f383 8811 	msr	BASEPRI, r3
 800f5f0:	f3bf 8f6f 	isb	sy
 800f5f4:	f3bf 8f4f 	dsb	sy
 800f5f8:	60fb      	str	r3, [r7, #12]
}
 800f5fa:	bf00      	nop
 800f5fc:	e7fe      	b.n	800f5fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f5fe:	f000 fe91 	bl	8010324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f602:	4b1d      	ldr	r3, [pc, #116]	; (800f678 <xTaskCheckForTimeOut+0xbc>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f61a:	d102      	bne.n	800f622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f61c:	2300      	movs	r3, #0
 800f61e:	61fb      	str	r3, [r7, #28]
 800f620:	e023      	b.n	800f66a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	4b15      	ldr	r3, [pc, #84]	; (800f67c <xTaskCheckForTimeOut+0xc0>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d007      	beq.n	800f63e <xTaskCheckForTimeOut+0x82>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	69ba      	ldr	r2, [r7, #24]
 800f634:	429a      	cmp	r2, r3
 800f636:	d302      	bcc.n	800f63e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	61fb      	str	r3, [r7, #28]
 800f63c:	e015      	b.n	800f66a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	429a      	cmp	r2, r3
 800f646:	d20b      	bcs.n	800f660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	1ad2      	subs	r2, r2, r3
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ff9b 	bl	800f590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f65a:	2300      	movs	r3, #0
 800f65c:	61fb      	str	r3, [r7, #28]
 800f65e:	e004      	b.n	800f66a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f666:	2301      	movs	r3, #1
 800f668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f66a:	f000 fe8b 	bl	8010384 <vPortExitCritical>

	return xReturn;
 800f66e:	69fb      	ldr	r3, [r7, #28]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	2000126c 	.word	0x2000126c
 800f67c:	20001280 	.word	0x20001280

0800f680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f680:	b480      	push	{r7}
 800f682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f684:	4b03      	ldr	r3, [pc, #12]	; (800f694 <vTaskMissedYield+0x14>)
 800f686:	2201      	movs	r2, #1
 800f688:	601a      	str	r2, [r3, #0]
}
 800f68a:	bf00      	nop
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	2000127c 	.word	0x2000127c

0800f698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6a0:	f000 f852 	bl	800f748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6a4:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <prvIdleTask+0x28>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d9f9      	bls.n	800f6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6ac:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <prvIdleTask+0x2c>)
 800f6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6b2:	601a      	str	r2, [r3, #0]
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6bc:	e7f0      	b.n	800f6a0 <prvIdleTask+0x8>
 800f6be:	bf00      	nop
 800f6c0:	20000d98 	.word	0x20000d98
 800f6c4:	e000ed04 	.word	0xe000ed04

0800f6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	607b      	str	r3, [r7, #4]
 800f6d2:	e00c      	b.n	800f6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4a12      	ldr	r2, [pc, #72]	; (800f728 <prvInitialiseTaskLists+0x60>)
 800f6e0:	4413      	add	r3, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fb62 	bl	800ddac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b37      	cmp	r3, #55	; 0x37
 800f6f2:	d9ef      	bls.n	800f6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6f4:	480d      	ldr	r0, [pc, #52]	; (800f72c <prvInitialiseTaskLists+0x64>)
 800f6f6:	f7fe fb59 	bl	800ddac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6fa:	480d      	ldr	r0, [pc, #52]	; (800f730 <prvInitialiseTaskLists+0x68>)
 800f6fc:	f7fe fb56 	bl	800ddac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f700:	480c      	ldr	r0, [pc, #48]	; (800f734 <prvInitialiseTaskLists+0x6c>)
 800f702:	f7fe fb53 	bl	800ddac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f706:	480c      	ldr	r0, [pc, #48]	; (800f738 <prvInitialiseTaskLists+0x70>)
 800f708:	f7fe fb50 	bl	800ddac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f70c:	480b      	ldr	r0, [pc, #44]	; (800f73c <prvInitialiseTaskLists+0x74>)
 800f70e:	f7fe fb4d 	bl	800ddac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f712:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <prvInitialiseTaskLists+0x78>)
 800f714:	4a05      	ldr	r2, [pc, #20]	; (800f72c <prvInitialiseTaskLists+0x64>)
 800f716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <prvInitialiseTaskLists+0x7c>)
 800f71a:	4a05      	ldr	r2, [pc, #20]	; (800f730 <prvInitialiseTaskLists+0x68>)
 800f71c:	601a      	str	r2, [r3, #0]
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20000d98 	.word	0x20000d98
 800f72c:	200011f8 	.word	0x200011f8
 800f730:	2000120c 	.word	0x2000120c
 800f734:	20001228 	.word	0x20001228
 800f738:	2000123c 	.word	0x2000123c
 800f73c:	20001254 	.word	0x20001254
 800f740:	20001220 	.word	0x20001220
 800f744:	20001224 	.word	0x20001224

0800f748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f74e:	e019      	b.n	800f784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f750:	f000 fde8 	bl	8010324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f754:	4b10      	ldr	r3, [pc, #64]	; (800f798 <prvCheckTasksWaitingTermination+0x50>)
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3304      	adds	r3, #4
 800f760:	4618      	mov	r0, r3
 800f762:	f7fe fbad 	bl	800dec0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f766:	4b0d      	ldr	r3, [pc, #52]	; (800f79c <prvCheckTasksWaitingTermination+0x54>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	4a0b      	ldr	r2, [pc, #44]	; (800f79c <prvCheckTasksWaitingTermination+0x54>)
 800f76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f770:	4b0b      	ldr	r3, [pc, #44]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3b01      	subs	r3, #1
 800f776:	4a0a      	ldr	r2, [pc, #40]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f77a:	f000 fe03 	bl	8010384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 f810 	bl	800f7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f784:	4b06      	ldr	r3, [pc, #24]	; (800f7a0 <prvCheckTasksWaitingTermination+0x58>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1e1      	bne.n	800f750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f78c:	bf00      	nop
 800f78e:	bf00      	nop
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	2000123c 	.word	0x2000123c
 800f79c:	20001268 	.word	0x20001268
 800f7a0:	20001250 	.word	0x20001250

0800f7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	3354      	adds	r3, #84	; 0x54
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f003 f9cb 	bl	8012b4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 ff9b 	bl	8010700 <vPortFree>
				vPortFree( pxTCB );
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 ff98 	bl	8010700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7d0:	e018      	b.n	800f804 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d103      	bne.n	800f7e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 ff8f 	bl	8010700 <vPortFree>
	}
 800f7e2:	e00f      	b.n	800f804 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f7ea:	2b02      	cmp	r3, #2
 800f7ec:	d00a      	beq.n	800f804 <prvDeleteTCB+0x60>
	__asm volatile
 800f7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	60fb      	str	r3, [r7, #12]
}
 800f800:	bf00      	nop
 800f802:	e7fe      	b.n	800f802 <prvDeleteTCB+0x5e>
	}
 800f804:	bf00      	nop
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f812:	4b0c      	ldr	r3, [pc, #48]	; (800f844 <prvResetNextTaskUnblockTime+0x38>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d104      	bne.n	800f826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f81c:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <prvResetNextTaskUnblockTime+0x3c>)
 800f81e:	f04f 32ff 	mov.w	r2, #4294967295
 800f822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f824:	e008      	b.n	800f838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f826:	4b07      	ldr	r3, [pc, #28]	; (800f844 <prvResetNextTaskUnblockTime+0x38>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	4a04      	ldr	r2, [pc, #16]	; (800f848 <prvResetNextTaskUnblockTime+0x3c>)
 800f836:	6013      	str	r3, [r2, #0]
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	20001220 	.word	0x20001220
 800f848:	20001288 	.word	0x20001288

0800f84c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f852:	4b05      	ldr	r3, [pc, #20]	; (800f868 <xTaskGetCurrentTaskHandle+0x1c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f858:	687b      	ldr	r3, [r7, #4]
	}
 800f85a:	4618      	mov	r0, r3
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	20000d94 	.word	0x20000d94

0800f86c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f872:	4b0b      	ldr	r3, [pc, #44]	; (800f8a0 <xTaskGetSchedulerState+0x34>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d102      	bne.n	800f880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f87a:	2301      	movs	r3, #1
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	e008      	b.n	800f892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f880:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <xTaskGetSchedulerState+0x38>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d102      	bne.n	800f88e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f888:	2302      	movs	r3, #2
 800f88a:	607b      	str	r3, [r7, #4]
 800f88c:	e001      	b.n	800f892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f88e:	2300      	movs	r3, #0
 800f890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f892:	687b      	ldr	r3, [r7, #4]
	}
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	20001274 	.word	0x20001274
 800f8a4:	20001290 	.word	0x20001290

0800f8a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b086      	sub	sp, #24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d056      	beq.n	800f96c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8be:	4b2e      	ldr	r3, [pc, #184]	; (800f978 <xTaskPriorityDisinherit+0xd0>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d00a      	beq.n	800f8de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8cc:	f383 8811 	msr	BASEPRI, r3
 800f8d0:	f3bf 8f6f 	isb	sy
 800f8d4:	f3bf 8f4f 	dsb	sy
 800f8d8:	60fb      	str	r3, [r7, #12]
}
 800f8da:	bf00      	nop
 800f8dc:	e7fe      	b.n	800f8dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10a      	bne.n	800f8fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	60bb      	str	r3, [r7, #8]
}
 800f8f8:	bf00      	nop
 800f8fa:	e7fe      	b.n	800f8fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f900:	1e5a      	subs	r2, r3, #1
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f90e:	429a      	cmp	r2, r3
 800f910:	d02c      	beq.n	800f96c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f916:	2b00      	cmp	r3, #0
 800f918:	d128      	bne.n	800f96c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	3304      	adds	r3, #4
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe face 	bl	800dec0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93c:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <xTaskPriorityDisinherit+0xd4>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	429a      	cmp	r2, r3
 800f942:	d903      	bls.n	800f94c <xTaskPriorityDisinherit+0xa4>
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f948:	4a0c      	ldr	r2, [pc, #48]	; (800f97c <xTaskPriorityDisinherit+0xd4>)
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f950:	4613      	mov	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	4413      	add	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4a09      	ldr	r2, [pc, #36]	; (800f980 <xTaskPriorityDisinherit+0xd8>)
 800f95a:	441a      	add	r2, r3
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	3304      	adds	r3, #4
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fe fa4f 	bl	800de06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f968:	2301      	movs	r3, #1
 800f96a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f96c:	697b      	ldr	r3, [r7, #20]
	}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	20000d94 	.word	0x20000d94
 800f97c:	20001270 	.word	0x20001270
 800f980:	20000d98 	.word	0x20000d98

0800f984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f98e:	4b21      	ldr	r3, [pc, #132]	; (800fa14 <prvAddCurrentTaskToDelayedList+0x90>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f994:	4b20      	ldr	r3, [pc, #128]	; (800fa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3304      	adds	r3, #4
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fe fa90 	bl	800dec0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a6:	d10a      	bne.n	800f9be <prvAddCurrentTaskToDelayedList+0x3a>
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d007      	beq.n	800f9be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ae:	4b1a      	ldr	r3, [pc, #104]	; (800fa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4819      	ldr	r0, [pc, #100]	; (800fa1c <prvAddCurrentTaskToDelayedList+0x98>)
 800f9b8:	f7fe fa25 	bl	800de06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9bc:	e026      	b.n	800fa0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9c6:	4b14      	ldr	r3, [pc, #80]	; (800fa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d209      	bcs.n	800f9ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9d6:	4b12      	ldr	r3, [pc, #72]	; (800fa20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	4b0f      	ldr	r3, [pc, #60]	; (800fa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3304      	adds	r3, #4
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7fe fa33 	bl	800de4e <vListInsert>
}
 800f9e8:	e010      	b.n	800fa0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ea:	4b0e      	ldr	r3, [pc, #56]	; (800fa24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	4b0a      	ldr	r3, [pc, #40]	; (800fa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	f7fe fa29 	bl	800de4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f9fc:	4b0a      	ldr	r3, [pc, #40]	; (800fa28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d202      	bcs.n	800fa0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa06:	4a08      	ldr	r2, [pc, #32]	; (800fa28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6013      	str	r3, [r2, #0]
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	2000126c 	.word	0x2000126c
 800fa18:	20000d94 	.word	0x20000d94
 800fa1c:	20001254 	.word	0x20001254
 800fa20:	20001224 	.word	0x20001224
 800fa24:	20001220 	.word	0x20001220
 800fa28:	20001288 	.word	0x20001288

0800fa2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08a      	sub	sp, #40	; 0x28
 800fa30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fa36:	f000 fb07 	bl	8010048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fa3a:	4b1c      	ldr	r3, [pc, #112]	; (800faac <xTimerCreateTimerTask+0x80>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d021      	beq.n	800fa86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fa42:	2300      	movs	r3, #0
 800fa44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa4a:	1d3a      	adds	r2, r7, #4
 800fa4c:	f107 0108 	add.w	r1, r7, #8
 800fa50:	f107 030c 	add.w	r3, r7, #12
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe f98f 	bl	800dd78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	9202      	str	r2, [sp, #8]
 800fa62:	9301      	str	r3, [sp, #4]
 800fa64:	2302      	movs	r3, #2
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	2300      	movs	r3, #0
 800fa6a:	460a      	mov	r2, r1
 800fa6c:	4910      	ldr	r1, [pc, #64]	; (800fab0 <xTimerCreateTimerTask+0x84>)
 800fa6e:	4811      	ldr	r0, [pc, #68]	; (800fab4 <xTimerCreateTimerTask+0x88>)
 800fa70:	f7fe ff3c 	bl	800e8ec <xTaskCreateStatic>
 800fa74:	4603      	mov	r3, r0
 800fa76:	4a10      	ldr	r2, [pc, #64]	; (800fab8 <xTimerCreateTimerTask+0x8c>)
 800fa78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa7a:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <xTimerCreateTimerTask+0x8c>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa82:	2301      	movs	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	613b      	str	r3, [r7, #16]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800faa2:	697b      	ldr	r3, [r7, #20]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	200012c4 	.word	0x200012c4
 800fab0:	08018aa8 	.word	0x08018aa8
 800fab4:	0800fbf1 	.word	0x0800fbf1
 800fab8:	200012c8 	.word	0x200012c8

0800fabc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	; 0x28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800faca:	2300      	movs	r3, #0
 800facc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10a      	bne.n	800faea <xTimerGenericCommand+0x2e>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	623b      	str	r3, [r7, #32]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800faea:	4b1a      	ldr	r3, [pc, #104]	; (800fb54 <xTimerGenericCommand+0x98>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d02a      	beq.n	800fb48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b05      	cmp	r3, #5
 800fb02:	dc18      	bgt.n	800fb36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb04:	f7ff feb2 	bl	800f86c <xTaskGetSchedulerState>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d109      	bne.n	800fb22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb0e:	4b11      	ldr	r3, [pc, #68]	; (800fb54 <xTimerGenericCommand+0x98>)
 800fb10:	6818      	ldr	r0, [r3, #0]
 800fb12:	f107 0110 	add.w	r1, r7, #16
 800fb16:	2300      	movs	r3, #0
 800fb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb1a:	f7fe faff 	bl	800e11c <xQueueGenericSend>
 800fb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800fb20:	e012      	b.n	800fb48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb22:	4b0c      	ldr	r3, [pc, #48]	; (800fb54 <xTimerGenericCommand+0x98>)
 800fb24:	6818      	ldr	r0, [r3, #0]
 800fb26:	f107 0110 	add.w	r1, r7, #16
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f7fe faf5 	bl	800e11c <xQueueGenericSend>
 800fb32:	6278      	str	r0, [r7, #36]	; 0x24
 800fb34:	e008      	b.n	800fb48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb36:	4b07      	ldr	r3, [pc, #28]	; (800fb54 <xTimerGenericCommand+0x98>)
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	f107 0110 	add.w	r1, r7, #16
 800fb3e:	2300      	movs	r3, #0
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	f7fe fbe9 	bl	800e318 <xQueueGenericSendFromISR>
 800fb46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3728      	adds	r7, #40	; 0x28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	200012c4 	.word	0x200012c4

0800fb58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af02      	add	r7, sp, #8
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb62:	4b22      	ldr	r3, [pc, #136]	; (800fbec <prvProcessExpiredTimer+0x94>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	3304      	adds	r3, #4
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fe f9a5 	bl	800dec0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb7c:	f003 0304 	and.w	r3, r3, #4
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d022      	beq.n	800fbca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	699a      	ldr	r2, [r3, #24]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	18d1      	adds	r1, r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	6978      	ldr	r0, [r7, #20]
 800fb92:	f000 f8d1 	bl	800fd38 <prvInsertTimerInActiveList>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d01f      	beq.n	800fbdc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2300      	movs	r3, #0
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	2100      	movs	r1, #0
 800fba6:	6978      	ldr	r0, [r7, #20]
 800fba8:	f7ff ff88 	bl	800fabc <xTimerGenericCommand>
 800fbac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d113      	bne.n	800fbdc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	60fb      	str	r3, [r7, #12]
}
 800fbc6:	bf00      	nop
 800fbc8:	e7fe      	b.n	800fbc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbd0:	f023 0301 	bic.w	r3, r3, #1
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	6a1b      	ldr	r3, [r3, #32]
 800fbe0:	6978      	ldr	r0, [r7, #20]
 800fbe2:	4798      	blx	r3
}
 800fbe4:	bf00      	nop
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	200012bc 	.word	0x200012bc

0800fbf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbf8:	f107 0308 	add.w	r3, r7, #8
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 f857 	bl	800fcb0 <prvGetNextExpireTime>
 800fc02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	4619      	mov	r1, r3
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f000 f803 	bl	800fc14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc0e:	f000 f8d5 	bl	800fdbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc12:	e7f1      	b.n	800fbf8 <prvTimerTask+0x8>

0800fc14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc1e:	f7ff fa29 	bl	800f074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc22:	f107 0308 	add.w	r3, r7, #8
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f866 	bl	800fcf8 <prvSampleTimeNow>
 800fc2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d130      	bne.n	800fc96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10a      	bne.n	800fc50 <prvProcessTimerOrBlockTask+0x3c>
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d806      	bhi.n	800fc50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc42:	f7ff fa25 	bl	800f090 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc46:	68f9      	ldr	r1, [r7, #12]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff ff85 	bl	800fb58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc4e:	e024      	b.n	800fc9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d008      	beq.n	800fc68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc56:	4b13      	ldr	r3, [pc, #76]	; (800fca4 <prvProcessTimerOrBlockTask+0x90>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <prvProcessTimerOrBlockTask+0x50>
 800fc60:	2301      	movs	r3, #1
 800fc62:	e000      	b.n	800fc66 <prvProcessTimerOrBlockTask+0x52>
 800fc64:	2300      	movs	r3, #0
 800fc66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc68:	4b0f      	ldr	r3, [pc, #60]	; (800fca8 <prvProcessTimerOrBlockTask+0x94>)
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	4619      	mov	r1, r3
 800fc76:	f7fe fe05 	bl	800e884 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc7a:	f7ff fa09 	bl	800f090 <xTaskResumeAll>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10a      	bne.n	800fc9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc84:	4b09      	ldr	r3, [pc, #36]	; (800fcac <prvProcessTimerOrBlockTask+0x98>)
 800fc86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc8a:	601a      	str	r2, [r3, #0]
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	f3bf 8f6f 	isb	sy
}
 800fc94:	e001      	b.n	800fc9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc96:	f7ff f9fb 	bl	800f090 <xTaskResumeAll>
}
 800fc9a:	bf00      	nop
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	200012c0 	.word	0x200012c0
 800fca8:	200012c4 	.word	0x200012c4
 800fcac:	e000ed04 	.word	0xe000ed04

0800fcb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fcb8:	4b0e      	ldr	r3, [pc, #56]	; (800fcf4 <prvGetNextExpireTime+0x44>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d101      	bne.n	800fcc6 <prvGetNextExpireTime+0x16>
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	e000      	b.n	800fcc8 <prvGetNextExpireTime+0x18>
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d105      	bne.n	800fce0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcd4:	4b07      	ldr	r3, [pc, #28]	; (800fcf4 <prvGetNextExpireTime+0x44>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	e001      	b.n	800fce4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fce0:	2300      	movs	r3, #0
 800fce2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fce4:	68fb      	ldr	r3, [r7, #12]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3714      	adds	r7, #20
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	200012bc 	.word	0x200012bc

0800fcf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd00:	f7ff fa64 	bl	800f1cc <xTaskGetTickCount>
 800fd04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd06:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <prvSampleTimeNow+0x3c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68fa      	ldr	r2, [r7, #12]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d205      	bcs.n	800fd1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd10:	f000 f936 	bl	800ff80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	e002      	b.n	800fd22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd22:	4a04      	ldr	r2, [pc, #16]	; (800fd34 <prvSampleTimeNow+0x3c>)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd28:	68fb      	ldr	r3, [r7, #12]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	200012cc 	.word	0x200012cc

0800fd38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
 800fd44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd46:	2300      	movs	r3, #0
 800fd48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d812      	bhi.n	800fd84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	1ad2      	subs	r2, r2, r3
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d302      	bcc.n	800fd72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	617b      	str	r3, [r7, #20]
 800fd70:	e01b      	b.n	800fdaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd72:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <prvInsertTimerInActiveList+0x7c>)
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	f7fe f866 	bl	800de4e <vListInsert>
 800fd82:	e012      	b.n	800fdaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d206      	bcs.n	800fd9a <prvInsertTimerInActiveList+0x62>
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d302      	bcc.n	800fd9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd94:	2301      	movs	r3, #1
 800fd96:	617b      	str	r3, [r7, #20]
 800fd98:	e007      	b.n	800fdaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd9a:	4b07      	ldr	r3, [pc, #28]	; (800fdb8 <prvInsertTimerInActiveList+0x80>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3304      	adds	r3, #4
 800fda2:	4619      	mov	r1, r3
 800fda4:	4610      	mov	r0, r2
 800fda6:	f7fe f852 	bl	800de4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fdaa:	697b      	ldr	r3, [r7, #20]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3718      	adds	r7, #24
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	200012c0 	.word	0x200012c0
 800fdb8:	200012bc 	.word	0x200012bc

0800fdbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b08e      	sub	sp, #56	; 0x38
 800fdc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdc2:	e0ca      	b.n	800ff5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	da18      	bge.n	800fdfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fdca:	1d3b      	adds	r3, r7, #4
 800fdcc:	3304      	adds	r3, #4
 800fdce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10a      	bne.n	800fdec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	61fb      	str	r3, [r7, #28]
}
 800fde8:	bf00      	nop
 800fdea:	e7fe      	b.n	800fdea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdf2:	6850      	ldr	r0, [r2, #4]
 800fdf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdf6:	6892      	ldr	r2, [r2, #8]
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f2c0 80aa 	blt.w	800ff58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0a:	695b      	ldr	r3, [r3, #20]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d004      	beq.n	800fe1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe12:	3304      	adds	r3, #4
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fe f853 	bl	800dec0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe1a:	463b      	mov	r3, r7
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff ff6b 	bl	800fcf8 <prvSampleTimeNow>
 800fe22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b09      	cmp	r3, #9
 800fe28:	f200 8097 	bhi.w	800ff5a <prvProcessReceivedCommands+0x19e>
 800fe2c:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <prvProcessReceivedCommands+0x78>)
 800fe2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe32:	bf00      	nop
 800fe34:	0800fe5d 	.word	0x0800fe5d
 800fe38:	0800fe5d 	.word	0x0800fe5d
 800fe3c:	0800fe5d 	.word	0x0800fe5d
 800fe40:	0800fed1 	.word	0x0800fed1
 800fe44:	0800fee5 	.word	0x0800fee5
 800fe48:	0800ff2f 	.word	0x0800ff2f
 800fe4c:	0800fe5d 	.word	0x0800fe5d
 800fe50:	0800fe5d 	.word	0x0800fe5d
 800fe54:	0800fed1 	.word	0x0800fed1
 800fe58:	0800fee5 	.word	0x0800fee5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe62:	f043 0301 	orr.w	r3, r3, #1
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	18d1      	adds	r1, r2, r3
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe7c:	f7ff ff5c 	bl	800fd38 <prvInsertTimerInActiveList>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d069      	beq.n	800ff5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe94:	f003 0304 	and.w	r3, r3, #4
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d05e      	beq.n	800ff5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	441a      	add	r2, r3
 800fea4:	2300      	movs	r3, #0
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	2300      	movs	r3, #0
 800feaa:	2100      	movs	r1, #0
 800feac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feae:	f7ff fe05 	bl	800fabc <xTimerGenericCommand>
 800feb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d14f      	bne.n	800ff5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	61bb      	str	r3, [r7, #24]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fed6:	f023 0301 	bic.w	r3, r3, #1
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fee2:	e03a      	b.n	800ff5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feea:	f043 0301 	orr.w	r3, r3, #1
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	f383 8811 	msr	BASEPRI, r3
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	617b      	str	r3, [r7, #20]
}
 800ff16:	bf00      	nop
 800ff18:	e7fe      	b.n	800ff18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1c:	699a      	ldr	r2, [r3, #24]
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff20:	18d1      	adds	r1, r2, r3
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff28:	f7ff ff06 	bl	800fd38 <prvInsertTimerInActiveList>
					break;
 800ff2c:	e015      	b.n	800ff5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff34:	f003 0302 	and.w	r3, r3, #2
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d103      	bne.n	800ff44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ff3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff3e:	f000 fbdf 	bl	8010700 <vPortFree>
 800ff42:	e00a      	b.n	800ff5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff4a:	f023 0301 	bic.w	r3, r3, #1
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff56:	e000      	b.n	800ff5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff5a:	4b08      	ldr	r3, [pc, #32]	; (800ff7c <prvProcessReceivedCommands+0x1c0>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	1d39      	adds	r1, r7, #4
 800ff60:	2200      	movs	r2, #0
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fe fa74 	bl	800e450 <xQueueReceive>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f47f af2a 	bne.w	800fdc4 <prvProcessReceivedCommands+0x8>
	}
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	3730      	adds	r7, #48	; 0x30
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	200012c4 	.word	0x200012c4

0800ff80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b088      	sub	sp, #32
 800ff84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff86:	e048      	b.n	801001a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff88:	4b2d      	ldr	r3, [pc, #180]	; (8010040 <prvSwitchTimerLists+0xc0>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff92:	4b2b      	ldr	r3, [pc, #172]	; (8010040 <prvSwitchTimerLists+0xc0>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fd ff8d 	bl	800dec0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffb4:	f003 0304 	and.w	r3, r3, #4
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d02e      	beq.n	801001a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	693a      	ldr	r2, [r7, #16]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d90e      	bls.n	800ffec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffda:	4b19      	ldr	r3, [pc, #100]	; (8010040 <prvSwitchTimerLists+0xc0>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	f7fd ff32 	bl	800de4e <vListInsert>
 800ffea:	e016      	b.n	801001a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffec:	2300      	movs	r3, #0
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	2300      	movs	r3, #0
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	2100      	movs	r1, #0
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f7ff fd60 	bl	800fabc <xTimerGenericCommand>
 800fffc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d10a      	bne.n	801001a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	603b      	str	r3, [r7, #0]
}
 8010016:	bf00      	nop
 8010018:	e7fe      	b.n	8010018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801001a:	4b09      	ldr	r3, [pc, #36]	; (8010040 <prvSwitchTimerLists+0xc0>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1b1      	bne.n	800ff88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010024:	4b06      	ldr	r3, [pc, #24]	; (8010040 <prvSwitchTimerLists+0xc0>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801002a:	4b06      	ldr	r3, [pc, #24]	; (8010044 <prvSwitchTimerLists+0xc4>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a04      	ldr	r2, [pc, #16]	; (8010040 <prvSwitchTimerLists+0xc0>)
 8010030:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010032:	4a04      	ldr	r2, [pc, #16]	; (8010044 <prvSwitchTimerLists+0xc4>)
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	6013      	str	r3, [r2, #0]
}
 8010038:	bf00      	nop
 801003a:	3718      	adds	r7, #24
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	200012bc 	.word	0x200012bc
 8010044:	200012c0 	.word	0x200012c0

08010048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801004e:	f000 f969 	bl	8010324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010052:	4b15      	ldr	r3, [pc, #84]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d120      	bne.n	801009c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801005a:	4814      	ldr	r0, [pc, #80]	; (80100ac <prvCheckForValidListAndQueue+0x64>)
 801005c:	f7fd fea6 	bl	800ddac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010060:	4813      	ldr	r0, [pc, #76]	; (80100b0 <prvCheckForValidListAndQueue+0x68>)
 8010062:	f7fd fea3 	bl	800ddac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010066:	4b13      	ldr	r3, [pc, #76]	; (80100b4 <prvCheckForValidListAndQueue+0x6c>)
 8010068:	4a10      	ldr	r2, [pc, #64]	; (80100ac <prvCheckForValidListAndQueue+0x64>)
 801006a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801006c:	4b12      	ldr	r3, [pc, #72]	; (80100b8 <prvCheckForValidListAndQueue+0x70>)
 801006e:	4a10      	ldr	r2, [pc, #64]	; (80100b0 <prvCheckForValidListAndQueue+0x68>)
 8010070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010072:	2300      	movs	r3, #0
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	4b11      	ldr	r3, [pc, #68]	; (80100bc <prvCheckForValidListAndQueue+0x74>)
 8010078:	4a11      	ldr	r2, [pc, #68]	; (80100c0 <prvCheckForValidListAndQueue+0x78>)
 801007a:	2110      	movs	r1, #16
 801007c:	200a      	movs	r0, #10
 801007e:	f7fd ffb1 	bl	800dfe4 <xQueueGenericCreateStatic>
 8010082:	4603      	mov	r3, r0
 8010084:	4a08      	ldr	r2, [pc, #32]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010088:	4b07      	ldr	r3, [pc, #28]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d005      	beq.n	801009c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010090:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <prvCheckForValidListAndQueue+0x60>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	490b      	ldr	r1, [pc, #44]	; (80100c4 <prvCheckForValidListAndQueue+0x7c>)
 8010096:	4618      	mov	r0, r3
 8010098:	f7fe fbca 	bl	800e830 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801009c:	f000 f972 	bl	8010384 <vPortExitCritical>
}
 80100a0:	bf00      	nop
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	200012c4 	.word	0x200012c4
 80100ac:	20001294 	.word	0x20001294
 80100b0:	200012a8 	.word	0x200012a8
 80100b4:	200012bc 	.word	0x200012bc
 80100b8:	200012c0 	.word	0x200012c0
 80100bc:	20001370 	.word	0x20001370
 80100c0:	200012d0 	.word	0x200012d0
 80100c4:	08018ab0 	.word	0x08018ab0

080100c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	3b04      	subs	r3, #4
 80100d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80100e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	3b04      	subs	r3, #4
 80100e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	f023 0201 	bic.w	r2, r3, #1
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3b04      	subs	r3, #4
 80100f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80100f8:	4a0c      	ldr	r2, [pc, #48]	; (801012c <pxPortInitialiseStack+0x64>)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3b14      	subs	r3, #20
 8010102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3b04      	subs	r3, #4
 801010e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f06f 0202 	mvn.w	r2, #2
 8010116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3b20      	subs	r3, #32
 801011c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801011e:	68fb      	ldr	r3, [r7, #12]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	08010131 	.word	0x08010131

08010130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801013a:	4b12      	ldr	r3, [pc, #72]	; (8010184 <prvTaskExitError+0x54>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010142:	d00a      	beq.n	801015a <prvTaskExitError+0x2a>
	__asm volatile
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	60fb      	str	r3, [r7, #12]
}
 8010156:	bf00      	nop
 8010158:	e7fe      	b.n	8010158 <prvTaskExitError+0x28>
	__asm volatile
 801015a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801015e:	f383 8811 	msr	BASEPRI, r3
 8010162:	f3bf 8f6f 	isb	sy
 8010166:	f3bf 8f4f 	dsb	sy
 801016a:	60bb      	str	r3, [r7, #8]
}
 801016c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801016e:	bf00      	nop
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d0fc      	beq.n	8010170 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010176:	bf00      	nop
 8010178:	bf00      	nop
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	200000cc 	.word	0x200000cc
	...

08010190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010190:	4b07      	ldr	r3, [pc, #28]	; (80101b0 <pxCurrentTCBConst2>)
 8010192:	6819      	ldr	r1, [r3, #0]
 8010194:	6808      	ldr	r0, [r1, #0]
 8010196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019a:	f380 8809 	msr	PSP, r0
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f04f 0000 	mov.w	r0, #0
 80101a6:	f380 8811 	msr	BASEPRI, r0
 80101aa:	4770      	bx	lr
 80101ac:	f3af 8000 	nop.w

080101b0 <pxCurrentTCBConst2>:
 80101b0:	20000d94 	.word	0x20000d94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop

080101b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101b8:	4808      	ldr	r0, [pc, #32]	; (80101dc <prvPortStartFirstTask+0x24>)
 80101ba:	6800      	ldr	r0, [r0, #0]
 80101bc:	6800      	ldr	r0, [r0, #0]
 80101be:	f380 8808 	msr	MSP, r0
 80101c2:	f04f 0000 	mov.w	r0, #0
 80101c6:	f380 8814 	msr	CONTROL, r0
 80101ca:	b662      	cpsie	i
 80101cc:	b661      	cpsie	f
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	df00      	svc	0
 80101d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80101da:	bf00      	nop
 80101dc:	e000ed08 	.word	0xe000ed08

080101e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80101e6:	4b46      	ldr	r3, [pc, #280]	; (8010300 <xPortStartScheduler+0x120>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a46      	ldr	r2, [pc, #280]	; (8010304 <xPortStartScheduler+0x124>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d10a      	bne.n	8010206 <xPortStartScheduler+0x26>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	613b      	str	r3, [r7, #16]
}
 8010202:	bf00      	nop
 8010204:	e7fe      	b.n	8010204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010206:	4b3e      	ldr	r3, [pc, #248]	; (8010300 <xPortStartScheduler+0x120>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a3f      	ldr	r2, [pc, #252]	; (8010308 <xPortStartScheduler+0x128>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d10a      	bne.n	8010226 <xPortStartScheduler+0x46>
	__asm volatile
 8010210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	60fb      	str	r3, [r7, #12]
}
 8010222:	bf00      	nop
 8010224:	e7fe      	b.n	8010224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010226:	4b39      	ldr	r3, [pc, #228]	; (801030c <xPortStartScheduler+0x12c>)
 8010228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	b2db      	uxtb	r3, r3
 8010230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	22ff      	movs	r2, #255	; 0xff
 8010236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	b2db      	uxtb	r3, r3
 801023e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	b2db      	uxtb	r3, r3
 8010244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010248:	b2da      	uxtb	r2, r3
 801024a:	4b31      	ldr	r3, [pc, #196]	; (8010310 <xPortStartScheduler+0x130>)
 801024c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801024e:	4b31      	ldr	r3, [pc, #196]	; (8010314 <xPortStartScheduler+0x134>)
 8010250:	2207      	movs	r2, #7
 8010252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010254:	e009      	b.n	801026a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010256:	4b2f      	ldr	r3, [pc, #188]	; (8010314 <xPortStartScheduler+0x134>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3b01      	subs	r3, #1
 801025c:	4a2d      	ldr	r2, [pc, #180]	; (8010314 <xPortStartScheduler+0x134>)
 801025e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	b2db      	uxtb	r3, r3
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	b2db      	uxtb	r3, r3
 8010268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	b2db      	uxtb	r3, r3
 801026e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010272:	2b80      	cmp	r3, #128	; 0x80
 8010274:	d0ef      	beq.n	8010256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010276:	4b27      	ldr	r3, [pc, #156]	; (8010314 <xPortStartScheduler+0x134>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f1c3 0307 	rsb	r3, r3, #7
 801027e:	2b04      	cmp	r3, #4
 8010280:	d00a      	beq.n	8010298 <xPortStartScheduler+0xb8>
	__asm volatile
 8010282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010286:	f383 8811 	msr	BASEPRI, r3
 801028a:	f3bf 8f6f 	isb	sy
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	60bb      	str	r3, [r7, #8]
}
 8010294:	bf00      	nop
 8010296:	e7fe      	b.n	8010296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010298:	4b1e      	ldr	r3, [pc, #120]	; (8010314 <xPortStartScheduler+0x134>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	021b      	lsls	r3, r3, #8
 801029e:	4a1d      	ldr	r2, [pc, #116]	; (8010314 <xPortStartScheduler+0x134>)
 80102a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80102a2:	4b1c      	ldr	r3, [pc, #112]	; (8010314 <xPortStartScheduler+0x134>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80102aa:	4a1a      	ldr	r2, [pc, #104]	; (8010314 <xPortStartScheduler+0x134>)
 80102ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102b6:	4b18      	ldr	r3, [pc, #96]	; (8010318 <xPortStartScheduler+0x138>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a17      	ldr	r2, [pc, #92]	; (8010318 <xPortStartScheduler+0x138>)
 80102bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102c2:	4b15      	ldr	r3, [pc, #84]	; (8010318 <xPortStartScheduler+0x138>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a14      	ldr	r2, [pc, #80]	; (8010318 <xPortStartScheduler+0x138>)
 80102c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102ce:	f000 f8dd 	bl	801048c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102d2:	4b12      	ldr	r3, [pc, #72]	; (801031c <xPortStartScheduler+0x13c>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102d8:	f000 f8fc 	bl	80104d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <xPortStartScheduler+0x140>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a0f      	ldr	r2, [pc, #60]	; (8010320 <xPortStartScheduler+0x140>)
 80102e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102e8:	f7ff ff66 	bl	80101b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102ec:	f7ff f838 	bl	800f360 <vTaskSwitchContext>
	prvTaskExitError();
 80102f0:	f7ff ff1e 	bl	8010130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	e000ed00 	.word	0xe000ed00
 8010304:	410fc271 	.word	0x410fc271
 8010308:	410fc270 	.word	0x410fc270
 801030c:	e000e400 	.word	0xe000e400
 8010310:	200013c0 	.word	0x200013c0
 8010314:	200013c4 	.word	0x200013c4
 8010318:	e000ed20 	.word	0xe000ed20
 801031c:	200000cc 	.word	0x200000cc
 8010320:	e000ef34 	.word	0xe000ef34

08010324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
	__asm volatile
 801032a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032e:	f383 8811 	msr	BASEPRI, r3
 8010332:	f3bf 8f6f 	isb	sy
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	607b      	str	r3, [r7, #4]
}
 801033c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801033e:	4b0f      	ldr	r3, [pc, #60]	; (801037c <vPortEnterCritical+0x58>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3301      	adds	r3, #1
 8010344:	4a0d      	ldr	r2, [pc, #52]	; (801037c <vPortEnterCritical+0x58>)
 8010346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010348:	4b0c      	ldr	r3, [pc, #48]	; (801037c <vPortEnterCritical+0x58>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d10f      	bne.n	8010370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010350:	4b0b      	ldr	r3, [pc, #44]	; (8010380 <vPortEnterCritical+0x5c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00a      	beq.n	8010370 <vPortEnterCritical+0x4c>
	__asm volatile
 801035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035e:	f383 8811 	msr	BASEPRI, r3
 8010362:	f3bf 8f6f 	isb	sy
 8010366:	f3bf 8f4f 	dsb	sy
 801036a:	603b      	str	r3, [r7, #0]
}
 801036c:	bf00      	nop
 801036e:	e7fe      	b.n	801036e <vPortEnterCritical+0x4a>
	}
}
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	200000cc 	.word	0x200000cc
 8010380:	e000ed04 	.word	0xe000ed04

08010384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801038a:	4b12      	ldr	r3, [pc, #72]	; (80103d4 <vPortExitCritical+0x50>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d10a      	bne.n	80103a8 <vPortExitCritical+0x24>
	__asm volatile
 8010392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010396:	f383 8811 	msr	BASEPRI, r3
 801039a:	f3bf 8f6f 	isb	sy
 801039e:	f3bf 8f4f 	dsb	sy
 80103a2:	607b      	str	r3, [r7, #4]
}
 80103a4:	bf00      	nop
 80103a6:	e7fe      	b.n	80103a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80103a8:	4b0a      	ldr	r3, [pc, #40]	; (80103d4 <vPortExitCritical+0x50>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	3b01      	subs	r3, #1
 80103ae:	4a09      	ldr	r2, [pc, #36]	; (80103d4 <vPortExitCritical+0x50>)
 80103b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80103b2:	4b08      	ldr	r3, [pc, #32]	; (80103d4 <vPortExitCritical+0x50>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d105      	bne.n	80103c6 <vPortExitCritical+0x42>
 80103ba:	2300      	movs	r3, #0
 80103bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	f383 8811 	msr	BASEPRI, r3
}
 80103c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80103c6:	bf00      	nop
 80103c8:	370c      	adds	r7, #12
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	200000cc 	.word	0x200000cc
	...

080103e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103e0:	f3ef 8009 	mrs	r0, PSP
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	4b15      	ldr	r3, [pc, #84]	; (8010440 <pxCurrentTCBConst>)
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	f01e 0f10 	tst.w	lr, #16
 80103f0:	bf08      	it	eq
 80103f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	6010      	str	r0, [r2, #0]
 80103fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010404:	f380 8811 	msr	BASEPRI, r0
 8010408:	f3bf 8f4f 	dsb	sy
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f7fe ffa6 	bl	800f360 <vTaskSwitchContext>
 8010414:	f04f 0000 	mov.w	r0, #0
 8010418:	f380 8811 	msr	BASEPRI, r0
 801041c:	bc09      	pop	{r0, r3}
 801041e:	6819      	ldr	r1, [r3, #0]
 8010420:	6808      	ldr	r0, [r1, #0]
 8010422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010426:	f01e 0f10 	tst.w	lr, #16
 801042a:	bf08      	it	eq
 801042c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010430:	f380 8809 	msr	PSP, r0
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	f3af 8000 	nop.w

08010440 <pxCurrentTCBConst>:
 8010440:	20000d94 	.word	0x20000d94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010444:	bf00      	nop
 8010446:	bf00      	nop

08010448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
	__asm volatile
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	f383 8811 	msr	BASEPRI, r3
 8010456:	f3bf 8f6f 	isb	sy
 801045a:	f3bf 8f4f 	dsb	sy
 801045e:	607b      	str	r3, [r7, #4]
}
 8010460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010462:	f7fe fec3 	bl	800f1ec <xTaskIncrementTick>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d003      	beq.n	8010474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801046c:	4b06      	ldr	r3, [pc, #24]	; (8010488 <xPortSysTickHandler+0x40>)
 801046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	2300      	movs	r3, #0
 8010476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f383 8811 	msr	BASEPRI, r3
}
 801047e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	e000ed04 	.word	0xe000ed04

0801048c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801048c:	b480      	push	{r7}
 801048e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010490:	4b0b      	ldr	r3, [pc, #44]	; (80104c0 <vPortSetupTimerInterrupt+0x34>)
 8010492:	2200      	movs	r2, #0
 8010494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010496:	4b0b      	ldr	r3, [pc, #44]	; (80104c4 <vPortSetupTimerInterrupt+0x38>)
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801049c:	4b0a      	ldr	r3, [pc, #40]	; (80104c8 <vPortSetupTimerInterrupt+0x3c>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4a0a      	ldr	r2, [pc, #40]	; (80104cc <vPortSetupTimerInterrupt+0x40>)
 80104a2:	fba2 2303 	umull	r2, r3, r2, r3
 80104a6:	099b      	lsrs	r3, r3, #6
 80104a8:	4a09      	ldr	r2, [pc, #36]	; (80104d0 <vPortSetupTimerInterrupt+0x44>)
 80104aa:	3b01      	subs	r3, #1
 80104ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80104ae:	4b04      	ldr	r3, [pc, #16]	; (80104c0 <vPortSetupTimerInterrupt+0x34>)
 80104b0:	2207      	movs	r2, #7
 80104b2:	601a      	str	r2, [r3, #0]
}
 80104b4:	bf00      	nop
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	e000e010 	.word	0xe000e010
 80104c4:	e000e018 	.word	0xe000e018
 80104c8:	20000088 	.word	0x20000088
 80104cc:	10624dd3 	.word	0x10624dd3
 80104d0:	e000e014 	.word	0xe000e014

080104d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104e4 <vPortEnableVFP+0x10>
 80104d8:	6801      	ldr	r1, [r0, #0]
 80104da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104de:	6001      	str	r1, [r0, #0]
 80104e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104e2:	bf00      	nop
 80104e4:	e000ed88 	.word	0xe000ed88

080104e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104ee:	f3ef 8305 	mrs	r3, IPSR
 80104f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2b0f      	cmp	r3, #15
 80104f8:	d914      	bls.n	8010524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104fa:	4a17      	ldr	r2, [pc, #92]	; (8010558 <vPortValidateInterruptPriority+0x70>)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	4413      	add	r3, r2
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010504:	4b15      	ldr	r3, [pc, #84]	; (801055c <vPortValidateInterruptPriority+0x74>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	7afa      	ldrb	r2, [r7, #11]
 801050a:	429a      	cmp	r2, r3
 801050c:	d20a      	bcs.n	8010524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	607b      	str	r3, [r7, #4]
}
 8010520:	bf00      	nop
 8010522:	e7fe      	b.n	8010522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010524:	4b0e      	ldr	r3, [pc, #56]	; (8010560 <vPortValidateInterruptPriority+0x78>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801052c:	4b0d      	ldr	r3, [pc, #52]	; (8010564 <vPortValidateInterruptPriority+0x7c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d90a      	bls.n	801054a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010538:	f383 8811 	msr	BASEPRI, r3
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	603b      	str	r3, [r7, #0]
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <vPortValidateInterruptPriority+0x60>
	}
 801054a:	bf00      	nop
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	e000e3f0 	.word	0xe000e3f0
 801055c:	200013c0 	.word	0x200013c0
 8010560:	e000ed0c 	.word	0xe000ed0c
 8010564:	200013c4 	.word	0x200013c4

08010568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08a      	sub	sp, #40	; 0x28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010570:	2300      	movs	r3, #0
 8010572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010574:	f7fe fd7e 	bl	800f074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010578:	4b5b      	ldr	r3, [pc, #364]	; (80106e8 <pvPortMalloc+0x180>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d101      	bne.n	8010584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010580:	f000 f920 	bl	80107c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010584:	4b59      	ldr	r3, [pc, #356]	; (80106ec <pvPortMalloc+0x184>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4013      	ands	r3, r2
 801058c:	2b00      	cmp	r3, #0
 801058e:	f040 8093 	bne.w	80106b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d01d      	beq.n	80105d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010598:	2208      	movs	r2, #8
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4413      	add	r3, r2
 801059e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f003 0307 	and.w	r3, r3, #7
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d014      	beq.n	80105d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f023 0307 	bic.w	r3, r3, #7
 80105b0:	3308      	adds	r3, #8
 80105b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f003 0307 	and.w	r3, r3, #7
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d00a      	beq.n	80105d4 <pvPortMalloc+0x6c>
	__asm volatile
 80105be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c2:	f383 8811 	msr	BASEPRI, r3
 80105c6:	f3bf 8f6f 	isb	sy
 80105ca:	f3bf 8f4f 	dsb	sy
 80105ce:	617b      	str	r3, [r7, #20]
}
 80105d0:	bf00      	nop
 80105d2:	e7fe      	b.n	80105d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d06e      	beq.n	80106b8 <pvPortMalloc+0x150>
 80105da:	4b45      	ldr	r3, [pc, #276]	; (80106f0 <pvPortMalloc+0x188>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d869      	bhi.n	80106b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105e4:	4b43      	ldr	r3, [pc, #268]	; (80106f4 <pvPortMalloc+0x18c>)
 80105e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105e8:	4b42      	ldr	r3, [pc, #264]	; (80106f4 <pvPortMalloc+0x18c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ee:	e004      	b.n	80105fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	429a      	cmp	r2, r3
 8010602:	d903      	bls.n	801060c <pvPortMalloc+0xa4>
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1f1      	bne.n	80105f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801060c:	4b36      	ldr	r3, [pc, #216]	; (80106e8 <pvPortMalloc+0x180>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010612:	429a      	cmp	r2, r3
 8010614:	d050      	beq.n	80106b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2208      	movs	r2, #8
 801061c:	4413      	add	r3, r2
 801061e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	1ad2      	subs	r2, r2, r3
 8010630:	2308      	movs	r3, #8
 8010632:	005b      	lsls	r3, r3, #1
 8010634:	429a      	cmp	r2, r3
 8010636:	d91f      	bls.n	8010678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4413      	add	r3, r2
 801063e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	f003 0307 	and.w	r3, r3, #7
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00a      	beq.n	8010660 <pvPortMalloc+0xf8>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	613b      	str	r3, [r7, #16]
}
 801065c:	bf00      	nop
 801065e:	e7fe      	b.n	801065e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010662:	685a      	ldr	r2, [r3, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	1ad2      	subs	r2, r2, r3
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010672:	69b8      	ldr	r0, [r7, #24]
 8010674:	f000 f908 	bl	8010888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010678:	4b1d      	ldr	r3, [pc, #116]	; (80106f0 <pvPortMalloc+0x188>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	4a1b      	ldr	r2, [pc, #108]	; (80106f0 <pvPortMalloc+0x188>)
 8010684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010686:	4b1a      	ldr	r3, [pc, #104]	; (80106f0 <pvPortMalloc+0x188>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	4b1b      	ldr	r3, [pc, #108]	; (80106f8 <pvPortMalloc+0x190>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	429a      	cmp	r2, r3
 8010690:	d203      	bcs.n	801069a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010692:	4b17      	ldr	r3, [pc, #92]	; (80106f0 <pvPortMalloc+0x188>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a18      	ldr	r2, [pc, #96]	; (80106f8 <pvPortMalloc+0x190>)
 8010698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069c:	685a      	ldr	r2, [r3, #4]
 801069e:	4b13      	ldr	r3, [pc, #76]	; (80106ec <pvPortMalloc+0x184>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	431a      	orrs	r2, r3
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80106ae:	4b13      	ldr	r3, [pc, #76]	; (80106fc <pvPortMalloc+0x194>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	3301      	adds	r3, #1
 80106b4:	4a11      	ldr	r2, [pc, #68]	; (80106fc <pvPortMalloc+0x194>)
 80106b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80106b8:	f7fe fcea 	bl	800f090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	f003 0307 	and.w	r3, r3, #7
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00a      	beq.n	80106dc <pvPortMalloc+0x174>
	__asm volatile
 80106c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	60fb      	str	r3, [r7, #12]
}
 80106d8:	bf00      	nop
 80106da:	e7fe      	b.n	80106da <pvPortMalloc+0x172>
	return pvReturn;
 80106dc:	69fb      	ldr	r3, [r7, #28]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3728      	adds	r7, #40	; 0x28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	20005a20 	.word	0x20005a20
 80106ec:	20005a34 	.word	0x20005a34
 80106f0:	20005a24 	.word	0x20005a24
 80106f4:	20005a18 	.word	0x20005a18
 80106f8:	20005a28 	.word	0x20005a28
 80106fc:	20005a2c 	.word	0x20005a2c

08010700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d04d      	beq.n	80107ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010712:	2308      	movs	r3, #8
 8010714:	425b      	negs	r3, r3
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	4413      	add	r3, r2
 801071a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	685a      	ldr	r2, [r3, #4]
 8010724:	4b24      	ldr	r3, [pc, #144]	; (80107b8 <vPortFree+0xb8>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	4013      	ands	r3, r2
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10a      	bne.n	8010744 <vPortFree+0x44>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	60fb      	str	r3, [r7, #12]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00a      	beq.n	8010762 <vPortFree+0x62>
	__asm volatile
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	60bb      	str	r3, [r7, #8]
}
 801075e:	bf00      	nop
 8010760:	e7fe      	b.n	8010760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	685a      	ldr	r2, [r3, #4]
 8010766:	4b14      	ldr	r3, [pc, #80]	; (80107b8 <vPortFree+0xb8>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4013      	ands	r3, r2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d01e      	beq.n	80107ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d11a      	bne.n	80107ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	4b0e      	ldr	r3, [pc, #56]	; (80107b8 <vPortFree+0xb8>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	43db      	mvns	r3, r3
 8010782:	401a      	ands	r2, r3
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010788:	f7fe fc74 	bl	800f074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <vPortFree+0xbc>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4413      	add	r3, r2
 8010796:	4a09      	ldr	r2, [pc, #36]	; (80107bc <vPortFree+0xbc>)
 8010798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801079a:	6938      	ldr	r0, [r7, #16]
 801079c:	f000 f874 	bl	8010888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80107a0:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <vPortFree+0xc0>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3301      	adds	r3, #1
 80107a6:	4a06      	ldr	r2, [pc, #24]	; (80107c0 <vPortFree+0xc0>)
 80107a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80107aa:	f7fe fc71 	bl	800f090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80107ae:	bf00      	nop
 80107b0:	3718      	adds	r7, #24
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	20005a34 	.word	0x20005a34
 80107bc:	20005a24 	.word	0x20005a24
 80107c0:	20005a30 	.word	0x20005a30

080107c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107ca:	f244 6350 	movw	r3, #18000	; 0x4650
 80107ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80107d0:	4b27      	ldr	r3, [pc, #156]	; (8010870 <prvHeapInit+0xac>)
 80107d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f003 0307 	and.w	r3, r3, #7
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00c      	beq.n	80107f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	3307      	adds	r3, #7
 80107e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f023 0307 	bic.w	r3, r3, #7
 80107ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	4a1f      	ldr	r2, [pc, #124]	; (8010870 <prvHeapInit+0xac>)
 80107f4:	4413      	add	r3, r2
 80107f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107fc:	4a1d      	ldr	r2, [pc, #116]	; (8010874 <prvHeapInit+0xb0>)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010802:	4b1c      	ldr	r3, [pc, #112]	; (8010874 <prvHeapInit+0xb0>)
 8010804:	2200      	movs	r2, #0
 8010806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	4413      	add	r3, r2
 801080e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010810:	2208      	movs	r2, #8
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	1a9b      	subs	r3, r3, r2
 8010816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f023 0307 	bic.w	r3, r3, #7
 801081e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	4a15      	ldr	r2, [pc, #84]	; (8010878 <prvHeapInit+0xb4>)
 8010824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010826:	4b14      	ldr	r3, [pc, #80]	; (8010878 <prvHeapInit+0xb4>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2200      	movs	r2, #0
 801082c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801082e:	4b12      	ldr	r3, [pc, #72]	; (8010878 <prvHeapInit+0xb4>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2200      	movs	r2, #0
 8010834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	1ad2      	subs	r2, r2, r3
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010844:	4b0c      	ldr	r3, [pc, #48]	; (8010878 <prvHeapInit+0xb4>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	4a0a      	ldr	r2, [pc, #40]	; (801087c <prvHeapInit+0xb8>)
 8010852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	4a09      	ldr	r2, [pc, #36]	; (8010880 <prvHeapInit+0xbc>)
 801085a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <prvHeapInit+0xc0>)
 801085e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010862:	601a      	str	r2, [r3, #0]
}
 8010864:	bf00      	nop
 8010866:	3714      	adds	r7, #20
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr
 8010870:	200013c8 	.word	0x200013c8
 8010874:	20005a18 	.word	0x20005a18
 8010878:	20005a20 	.word	0x20005a20
 801087c:	20005a28 	.word	0x20005a28
 8010880:	20005a24 	.word	0x20005a24
 8010884:	20005a34 	.word	0x20005a34

08010888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010890:	4b28      	ldr	r3, [pc, #160]	; (8010934 <prvInsertBlockIntoFreeList+0xac>)
 8010892:	60fb      	str	r3, [r7, #12]
 8010894:	e002      	b.n	801089c <prvInsertBlockIntoFreeList+0x14>
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	60fb      	str	r3, [r7, #12]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d8f7      	bhi.n	8010896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	68ba      	ldr	r2, [r7, #8]
 80108b0:	4413      	add	r3, r2
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d108      	bne.n	80108ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	685a      	ldr	r2, [r3, #4]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	441a      	add	r2, r3
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	68ba      	ldr	r2, [r7, #8]
 80108d4:	441a      	add	r2, r3
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d118      	bne.n	8010910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4b15      	ldr	r3, [pc, #84]	; (8010938 <prvInsertBlockIntoFreeList+0xb0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d00d      	beq.n	8010906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685a      	ldr	r2, [r3, #4]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	441a      	add	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	601a      	str	r2, [r3, #0]
 8010904:	e008      	b.n	8010918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010906:	4b0c      	ldr	r3, [pc, #48]	; (8010938 <prvInsertBlockIntoFreeList+0xb0>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	e003      	b.n	8010918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	429a      	cmp	r2, r3
 801091e:	d002      	beq.n	8010926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010926:	bf00      	nop
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20005a18 	.word	0x20005a18
 8010938:	20005a20 	.word	0x20005a20

0801093c <_Znwj>:
 801093c:	2801      	cmp	r0, #1
 801093e:	bf38      	it	cc
 8010940:	2001      	movcc	r0, #1
 8010942:	b510      	push	{r4, lr}
 8010944:	4604      	mov	r4, r0
 8010946:	4620      	mov	r0, r4
 8010948:	f001 f908 	bl	8011b5c <malloc>
 801094c:	b930      	cbnz	r0, 801095c <_Znwj+0x20>
 801094e:	f000 f81b 	bl	8010988 <_ZSt15get_new_handlerv>
 8010952:	b908      	cbnz	r0, 8010958 <_Znwj+0x1c>
 8010954:	f000 ffd6 	bl	8011904 <abort>
 8010958:	4780      	blx	r0
 801095a:	e7f4      	b.n	8010946 <_Znwj+0xa>
 801095c:	bd10      	pop	{r4, pc}

0801095e <__cxa_pure_virtual>:
 801095e:	b508      	push	{r3, lr}
 8010960:	f000 f80c 	bl	801097c <_ZSt9terminatev>

08010964 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010964:	b508      	push	{r3, lr}
 8010966:	4780      	blx	r0
 8010968:	f000 ffcc 	bl	8011904 <abort>

0801096c <_ZSt13get_terminatev>:
 801096c:	4b02      	ldr	r3, [pc, #8]	; (8010978 <_ZSt13get_terminatev+0xc>)
 801096e:	6818      	ldr	r0, [r3, #0]
 8010970:	f3bf 8f5b 	dmb	ish
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	200000d0 	.word	0x200000d0

0801097c <_ZSt9terminatev>:
 801097c:	b508      	push	{r3, lr}
 801097e:	f7ff fff5 	bl	801096c <_ZSt13get_terminatev>
 8010982:	f7ff ffef 	bl	8010964 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010988 <_ZSt15get_new_handlerv>:
 8010988:	4b02      	ldr	r3, [pc, #8]	; (8010994 <_ZSt15get_new_handlerv+0xc>)
 801098a:	6818      	ldr	r0, [r3, #0]
 801098c:	f3bf 8f5b 	dmb	ish
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	20005a38 	.word	0x20005a38

08010998 <pow>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	ec59 8b10 	vmov	r8, r9, d0
 80109a0:	ec57 6b11 	vmov	r6, r7, d1
 80109a4:	f000 f8a8 	bl	8010af8 <__ieee754_pow>
 80109a8:	4b4e      	ldr	r3, [pc, #312]	; (8010ae4 <pow+0x14c>)
 80109aa:	f993 3000 	ldrsb.w	r3, [r3]
 80109ae:	3301      	adds	r3, #1
 80109b0:	ec55 4b10 	vmov	r4, r5, d0
 80109b4:	d015      	beq.n	80109e2 <pow+0x4a>
 80109b6:	4632      	mov	r2, r6
 80109b8:	463b      	mov	r3, r7
 80109ba:	4630      	mov	r0, r6
 80109bc:	4639      	mov	r1, r7
 80109be:	f7f0 f8c5 	bl	8000b4c <__aeabi_dcmpun>
 80109c2:	b970      	cbnz	r0, 80109e2 <pow+0x4a>
 80109c4:	4642      	mov	r2, r8
 80109c6:	464b      	mov	r3, r9
 80109c8:	4640      	mov	r0, r8
 80109ca:	4649      	mov	r1, r9
 80109cc:	f7f0 f8be 	bl	8000b4c <__aeabi_dcmpun>
 80109d0:	2200      	movs	r2, #0
 80109d2:	2300      	movs	r3, #0
 80109d4:	b148      	cbz	r0, 80109ea <pow+0x52>
 80109d6:	4630      	mov	r0, r6
 80109d8:	4639      	mov	r1, r7
 80109da:	f7f0 f885 	bl	8000ae8 <__aeabi_dcmpeq>
 80109de:	2800      	cmp	r0, #0
 80109e0:	d17d      	bne.n	8010ade <pow+0x146>
 80109e2:	ec45 4b10 	vmov	d0, r4, r5
 80109e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ea:	4640      	mov	r0, r8
 80109ec:	4649      	mov	r1, r9
 80109ee:	f7f0 f87b 	bl	8000ae8 <__aeabi_dcmpeq>
 80109f2:	b1e0      	cbz	r0, 8010a2e <pow+0x96>
 80109f4:	2200      	movs	r2, #0
 80109f6:	2300      	movs	r3, #0
 80109f8:	4630      	mov	r0, r6
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7f0 f874 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d16c      	bne.n	8010ade <pow+0x146>
 8010a04:	ec47 6b10 	vmov	d0, r6, r7
 8010a08:	f000 fe55 	bl	80116b6 <finite>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d0e8      	beq.n	80109e2 <pow+0x4a>
 8010a10:	2200      	movs	r2, #0
 8010a12:	2300      	movs	r3, #0
 8010a14:	4630      	mov	r0, r6
 8010a16:	4639      	mov	r1, r7
 8010a18:	f7f0 f870 	bl	8000afc <__aeabi_dcmplt>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d0e0      	beq.n	80109e2 <pow+0x4a>
 8010a20:	f000 ff78 	bl	8011914 <__errno>
 8010a24:	2321      	movs	r3, #33	; 0x21
 8010a26:	6003      	str	r3, [r0, #0]
 8010a28:	2400      	movs	r4, #0
 8010a2a:	4d2f      	ldr	r5, [pc, #188]	; (8010ae8 <pow+0x150>)
 8010a2c:	e7d9      	b.n	80109e2 <pow+0x4a>
 8010a2e:	ec45 4b10 	vmov	d0, r4, r5
 8010a32:	f000 fe40 	bl	80116b6 <finite>
 8010a36:	bbb8      	cbnz	r0, 8010aa8 <pow+0x110>
 8010a38:	ec49 8b10 	vmov	d0, r8, r9
 8010a3c:	f000 fe3b 	bl	80116b6 <finite>
 8010a40:	b390      	cbz	r0, 8010aa8 <pow+0x110>
 8010a42:	ec47 6b10 	vmov	d0, r6, r7
 8010a46:	f000 fe36 	bl	80116b6 <finite>
 8010a4a:	b368      	cbz	r0, 8010aa8 <pow+0x110>
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	462b      	mov	r3, r5
 8010a50:	4620      	mov	r0, r4
 8010a52:	4629      	mov	r1, r5
 8010a54:	f7f0 f87a 	bl	8000b4c <__aeabi_dcmpun>
 8010a58:	b160      	cbz	r0, 8010a74 <pow+0xdc>
 8010a5a:	f000 ff5b 	bl	8011914 <__errno>
 8010a5e:	2321      	movs	r3, #33	; 0x21
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	2200      	movs	r2, #0
 8010a64:	2300      	movs	r3, #0
 8010a66:	4610      	mov	r0, r2
 8010a68:	4619      	mov	r1, r3
 8010a6a:	f7ef feff 	bl	800086c <__aeabi_ddiv>
 8010a6e:	4604      	mov	r4, r0
 8010a70:	460d      	mov	r5, r1
 8010a72:	e7b6      	b.n	80109e2 <pow+0x4a>
 8010a74:	f000 ff4e 	bl	8011914 <__errno>
 8010a78:	2322      	movs	r3, #34	; 0x22
 8010a7a:	6003      	str	r3, [r0, #0]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2300      	movs	r3, #0
 8010a80:	4640      	mov	r0, r8
 8010a82:	4649      	mov	r1, r9
 8010a84:	f7f0 f83a 	bl	8000afc <__aeabi_dcmplt>
 8010a88:	2400      	movs	r4, #0
 8010a8a:	b158      	cbz	r0, 8010aa4 <pow+0x10c>
 8010a8c:	ec47 6b10 	vmov	d0, r6, r7
 8010a90:	f000 fe26 	bl	80116e0 <rint>
 8010a94:	4632      	mov	r2, r6
 8010a96:	ec51 0b10 	vmov	r0, r1, d0
 8010a9a:	463b      	mov	r3, r7
 8010a9c:	f7f0 f824 	bl	8000ae8 <__aeabi_dcmpeq>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d0c2      	beq.n	8010a2a <pow+0x92>
 8010aa4:	4d11      	ldr	r5, [pc, #68]	; (8010aec <pow+0x154>)
 8010aa6:	e79c      	b.n	80109e2 <pow+0x4a>
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	2300      	movs	r3, #0
 8010aac:	4620      	mov	r0, r4
 8010aae:	4629      	mov	r1, r5
 8010ab0:	f7f0 f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d094      	beq.n	80109e2 <pow+0x4a>
 8010ab8:	ec49 8b10 	vmov	d0, r8, r9
 8010abc:	f000 fdfb 	bl	80116b6 <finite>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d08e      	beq.n	80109e2 <pow+0x4a>
 8010ac4:	ec47 6b10 	vmov	d0, r6, r7
 8010ac8:	f000 fdf5 	bl	80116b6 <finite>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d088      	beq.n	80109e2 <pow+0x4a>
 8010ad0:	f000 ff20 	bl	8011914 <__errno>
 8010ad4:	2322      	movs	r3, #34	; 0x22
 8010ad6:	6003      	str	r3, [r0, #0]
 8010ad8:	2400      	movs	r4, #0
 8010ada:	2500      	movs	r5, #0
 8010adc:	e781      	b.n	80109e2 <pow+0x4a>
 8010ade:	4d04      	ldr	r5, [pc, #16]	; (8010af0 <pow+0x158>)
 8010ae0:	2400      	movs	r4, #0
 8010ae2:	e77e      	b.n	80109e2 <pow+0x4a>
 8010ae4:	200000d4 	.word	0x200000d4
 8010ae8:	fff00000 	.word	0xfff00000
 8010aec:	7ff00000 	.word	0x7ff00000
 8010af0:	3ff00000 	.word	0x3ff00000
 8010af4:	00000000 	.word	0x00000000

08010af8 <__ieee754_pow>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	ed2d 8b06 	vpush	{d8-d10}
 8010b00:	b08d      	sub	sp, #52	; 0x34
 8010b02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010b06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010b0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010b0e:	ea56 0100 	orrs.w	r1, r6, r0
 8010b12:	ec53 2b10 	vmov	r2, r3, d0
 8010b16:	f000 84d1 	beq.w	80114bc <__ieee754_pow+0x9c4>
 8010b1a:	497f      	ldr	r1, [pc, #508]	; (8010d18 <__ieee754_pow+0x220>)
 8010b1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010b20:	428c      	cmp	r4, r1
 8010b22:	ee10 8a10 	vmov	r8, s0
 8010b26:	4699      	mov	r9, r3
 8010b28:	dc09      	bgt.n	8010b3e <__ieee754_pow+0x46>
 8010b2a:	d103      	bne.n	8010b34 <__ieee754_pow+0x3c>
 8010b2c:	b97a      	cbnz	r2, 8010b4e <__ieee754_pow+0x56>
 8010b2e:	42a6      	cmp	r6, r4
 8010b30:	dd02      	ble.n	8010b38 <__ieee754_pow+0x40>
 8010b32:	e00c      	b.n	8010b4e <__ieee754_pow+0x56>
 8010b34:	428e      	cmp	r6, r1
 8010b36:	dc02      	bgt.n	8010b3e <__ieee754_pow+0x46>
 8010b38:	428e      	cmp	r6, r1
 8010b3a:	d110      	bne.n	8010b5e <__ieee754_pow+0x66>
 8010b3c:	b178      	cbz	r0, 8010b5e <__ieee754_pow+0x66>
 8010b3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b46:	ea54 0308 	orrs.w	r3, r4, r8
 8010b4a:	f000 84b7 	beq.w	80114bc <__ieee754_pow+0x9c4>
 8010b4e:	4873      	ldr	r0, [pc, #460]	; (8010d1c <__ieee754_pow+0x224>)
 8010b50:	b00d      	add	sp, #52	; 0x34
 8010b52:	ecbd 8b06 	vpop	{d8-d10}
 8010b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5a:	f000 bdb9 	b.w	80116d0 <nan>
 8010b5e:	f1b9 0f00 	cmp.w	r9, #0
 8010b62:	da36      	bge.n	8010bd2 <__ieee754_pow+0xda>
 8010b64:	496e      	ldr	r1, [pc, #440]	; (8010d20 <__ieee754_pow+0x228>)
 8010b66:	428e      	cmp	r6, r1
 8010b68:	dc51      	bgt.n	8010c0e <__ieee754_pow+0x116>
 8010b6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010b6e:	428e      	cmp	r6, r1
 8010b70:	f340 84af 	ble.w	80114d2 <__ieee754_pow+0x9da>
 8010b74:	1531      	asrs	r1, r6, #20
 8010b76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010b7a:	2914      	cmp	r1, #20
 8010b7c:	dd0f      	ble.n	8010b9e <__ieee754_pow+0xa6>
 8010b7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010b82:	fa20 fc01 	lsr.w	ip, r0, r1
 8010b86:	fa0c f101 	lsl.w	r1, ip, r1
 8010b8a:	4281      	cmp	r1, r0
 8010b8c:	f040 84a1 	bne.w	80114d2 <__ieee754_pow+0x9da>
 8010b90:	f00c 0c01 	and.w	ip, ip, #1
 8010b94:	f1cc 0102 	rsb	r1, ip, #2
 8010b98:	9100      	str	r1, [sp, #0]
 8010b9a:	b180      	cbz	r0, 8010bbe <__ieee754_pow+0xc6>
 8010b9c:	e059      	b.n	8010c52 <__ieee754_pow+0x15a>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d155      	bne.n	8010c4e <__ieee754_pow+0x156>
 8010ba2:	f1c1 0114 	rsb	r1, r1, #20
 8010ba6:	fa46 fc01 	asr.w	ip, r6, r1
 8010baa:	fa0c f101 	lsl.w	r1, ip, r1
 8010bae:	42b1      	cmp	r1, r6
 8010bb0:	f040 848c 	bne.w	80114cc <__ieee754_pow+0x9d4>
 8010bb4:	f00c 0c01 	and.w	ip, ip, #1
 8010bb8:	f1cc 0102 	rsb	r1, ip, #2
 8010bbc:	9100      	str	r1, [sp, #0]
 8010bbe:	4959      	ldr	r1, [pc, #356]	; (8010d24 <__ieee754_pow+0x22c>)
 8010bc0:	428e      	cmp	r6, r1
 8010bc2:	d12d      	bne.n	8010c20 <__ieee754_pow+0x128>
 8010bc4:	2f00      	cmp	r7, #0
 8010bc6:	da79      	bge.n	8010cbc <__ieee754_pow+0x1c4>
 8010bc8:	4956      	ldr	r1, [pc, #344]	; (8010d24 <__ieee754_pow+0x22c>)
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f7ef fe4e 	bl	800086c <__aeabi_ddiv>
 8010bd0:	e016      	b.n	8010c00 <__ieee754_pow+0x108>
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	9100      	str	r1, [sp, #0]
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d13b      	bne.n	8010c52 <__ieee754_pow+0x15a>
 8010bda:	494f      	ldr	r1, [pc, #316]	; (8010d18 <__ieee754_pow+0x220>)
 8010bdc:	428e      	cmp	r6, r1
 8010bde:	d1ee      	bne.n	8010bbe <__ieee754_pow+0xc6>
 8010be0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010be4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010be8:	ea53 0308 	orrs.w	r3, r3, r8
 8010bec:	f000 8466 	beq.w	80114bc <__ieee754_pow+0x9c4>
 8010bf0:	4b4d      	ldr	r3, [pc, #308]	; (8010d28 <__ieee754_pow+0x230>)
 8010bf2:	429c      	cmp	r4, r3
 8010bf4:	dd0d      	ble.n	8010c12 <__ieee754_pow+0x11a>
 8010bf6:	2f00      	cmp	r7, #0
 8010bf8:	f280 8464 	bge.w	80114c4 <__ieee754_pow+0x9cc>
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	2100      	movs	r1, #0
 8010c00:	ec41 0b10 	vmov	d0, r0, r1
 8010c04:	b00d      	add	sp, #52	; 0x34
 8010c06:	ecbd 8b06 	vpop	{d8-d10}
 8010c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0e:	2102      	movs	r1, #2
 8010c10:	e7e0      	b.n	8010bd4 <__ieee754_pow+0xdc>
 8010c12:	2f00      	cmp	r7, #0
 8010c14:	daf2      	bge.n	8010bfc <__ieee754_pow+0x104>
 8010c16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010c1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010c1e:	e7ef      	b.n	8010c00 <__ieee754_pow+0x108>
 8010c20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010c24:	d104      	bne.n	8010c30 <__ieee754_pow+0x138>
 8010c26:	4610      	mov	r0, r2
 8010c28:	4619      	mov	r1, r3
 8010c2a:	f7ef fcf5 	bl	8000618 <__aeabi_dmul>
 8010c2e:	e7e7      	b.n	8010c00 <__ieee754_pow+0x108>
 8010c30:	493e      	ldr	r1, [pc, #248]	; (8010d2c <__ieee754_pow+0x234>)
 8010c32:	428f      	cmp	r7, r1
 8010c34:	d10d      	bne.n	8010c52 <__ieee754_pow+0x15a>
 8010c36:	f1b9 0f00 	cmp.w	r9, #0
 8010c3a:	db0a      	blt.n	8010c52 <__ieee754_pow+0x15a>
 8010c3c:	ec43 2b10 	vmov	d0, r2, r3
 8010c40:	b00d      	add	sp, #52	; 0x34
 8010c42:	ecbd 8b06 	vpop	{d8-d10}
 8010c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4a:	f000 bc77 	b.w	801153c <__ieee754_sqrt>
 8010c4e:	2100      	movs	r1, #0
 8010c50:	9100      	str	r1, [sp, #0]
 8010c52:	ec43 2b10 	vmov	d0, r2, r3
 8010c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c5a:	f000 fd23 	bl	80116a4 <fabs>
 8010c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c62:	ec51 0b10 	vmov	r0, r1, d0
 8010c66:	f1b8 0f00 	cmp.w	r8, #0
 8010c6a:	d12a      	bne.n	8010cc2 <__ieee754_pow+0x1ca>
 8010c6c:	b12c      	cbz	r4, 8010c7a <__ieee754_pow+0x182>
 8010c6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010d24 <__ieee754_pow+0x22c>
 8010c72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010c76:	45e6      	cmp	lr, ip
 8010c78:	d123      	bne.n	8010cc2 <__ieee754_pow+0x1ca>
 8010c7a:	2f00      	cmp	r7, #0
 8010c7c:	da05      	bge.n	8010c8a <__ieee754_pow+0x192>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	2000      	movs	r0, #0
 8010c84:	4927      	ldr	r1, [pc, #156]	; (8010d24 <__ieee754_pow+0x22c>)
 8010c86:	f7ef fdf1 	bl	800086c <__aeabi_ddiv>
 8010c8a:	f1b9 0f00 	cmp.w	r9, #0
 8010c8e:	dab7      	bge.n	8010c00 <__ieee754_pow+0x108>
 8010c90:	9b00      	ldr	r3, [sp, #0]
 8010c92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c9a:	4323      	orrs	r3, r4
 8010c9c:	d108      	bne.n	8010cb0 <__ieee754_pow+0x1b8>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	f7ef faff 	bl	80002a8 <__aeabi_dsub>
 8010caa:	4602      	mov	r2, r0
 8010cac:	460b      	mov	r3, r1
 8010cae:	e78d      	b.n	8010bcc <__ieee754_pow+0xd4>
 8010cb0:	9b00      	ldr	r3, [sp, #0]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d1a4      	bne.n	8010c00 <__ieee754_pow+0x108>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	e79e      	b.n	8010c00 <__ieee754_pow+0x108>
 8010cc2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010cc6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010cca:	950a      	str	r5, [sp, #40]	; 0x28
 8010ccc:	9d00      	ldr	r5, [sp, #0]
 8010cce:	46ac      	mov	ip, r5
 8010cd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010cd2:	ea5c 0505 	orrs.w	r5, ip, r5
 8010cd6:	d0e4      	beq.n	8010ca2 <__ieee754_pow+0x1aa>
 8010cd8:	4b15      	ldr	r3, [pc, #84]	; (8010d30 <__ieee754_pow+0x238>)
 8010cda:	429e      	cmp	r6, r3
 8010cdc:	f340 80fc 	ble.w	8010ed8 <__ieee754_pow+0x3e0>
 8010ce0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010ce4:	429e      	cmp	r6, r3
 8010ce6:	4b10      	ldr	r3, [pc, #64]	; (8010d28 <__ieee754_pow+0x230>)
 8010ce8:	dd07      	ble.n	8010cfa <__ieee754_pow+0x202>
 8010cea:	429c      	cmp	r4, r3
 8010cec:	dc0a      	bgt.n	8010d04 <__ieee754_pow+0x20c>
 8010cee:	2f00      	cmp	r7, #0
 8010cf0:	da84      	bge.n	8010bfc <__ieee754_pow+0x104>
 8010cf2:	a307      	add	r3, pc, #28	; (adr r3, 8010d10 <__ieee754_pow+0x218>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	e795      	b.n	8010c26 <__ieee754_pow+0x12e>
 8010cfa:	429c      	cmp	r4, r3
 8010cfc:	dbf7      	blt.n	8010cee <__ieee754_pow+0x1f6>
 8010cfe:	4b09      	ldr	r3, [pc, #36]	; (8010d24 <__ieee754_pow+0x22c>)
 8010d00:	429c      	cmp	r4, r3
 8010d02:	dd17      	ble.n	8010d34 <__ieee754_pow+0x23c>
 8010d04:	2f00      	cmp	r7, #0
 8010d06:	dcf4      	bgt.n	8010cf2 <__ieee754_pow+0x1fa>
 8010d08:	e778      	b.n	8010bfc <__ieee754_pow+0x104>
 8010d0a:	bf00      	nop
 8010d0c:	f3af 8000 	nop.w
 8010d10:	8800759c 	.word	0x8800759c
 8010d14:	7e37e43c 	.word	0x7e37e43c
 8010d18:	7ff00000 	.word	0x7ff00000
 8010d1c:	08018e73 	.word	0x08018e73
 8010d20:	433fffff 	.word	0x433fffff
 8010d24:	3ff00000 	.word	0x3ff00000
 8010d28:	3fefffff 	.word	0x3fefffff
 8010d2c:	3fe00000 	.word	0x3fe00000
 8010d30:	41e00000 	.word	0x41e00000
 8010d34:	4b64      	ldr	r3, [pc, #400]	; (8010ec8 <__ieee754_pow+0x3d0>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	f7ef fab6 	bl	80002a8 <__aeabi_dsub>
 8010d3c:	a356      	add	r3, pc, #344	; (adr r3, 8010e98 <__ieee754_pow+0x3a0>)
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	4604      	mov	r4, r0
 8010d44:	460d      	mov	r5, r1
 8010d46:	f7ef fc67 	bl	8000618 <__aeabi_dmul>
 8010d4a:	a355      	add	r3, pc, #340	; (adr r3, 8010ea0 <__ieee754_pow+0x3a8>)
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	4606      	mov	r6, r0
 8010d52:	460f      	mov	r7, r1
 8010d54:	4620      	mov	r0, r4
 8010d56:	4629      	mov	r1, r5
 8010d58:	f7ef fc5e 	bl	8000618 <__aeabi_dmul>
 8010d5c:	4b5b      	ldr	r3, [pc, #364]	; (8010ecc <__ieee754_pow+0x3d4>)
 8010d5e:	4682      	mov	sl, r0
 8010d60:	468b      	mov	fp, r1
 8010d62:	2200      	movs	r2, #0
 8010d64:	4620      	mov	r0, r4
 8010d66:	4629      	mov	r1, r5
 8010d68:	f7ef fc56 	bl	8000618 <__aeabi_dmul>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	a14d      	add	r1, pc, #308	; (adr r1, 8010ea8 <__ieee754_pow+0x3b0>)
 8010d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d76:	f7ef fa97 	bl	80002a8 <__aeabi_dsub>
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	462b      	mov	r3, r5
 8010d7e:	f7ef fc4b 	bl	8000618 <__aeabi_dmul>
 8010d82:	4602      	mov	r2, r0
 8010d84:	460b      	mov	r3, r1
 8010d86:	2000      	movs	r0, #0
 8010d88:	4951      	ldr	r1, [pc, #324]	; (8010ed0 <__ieee754_pow+0x3d8>)
 8010d8a:	f7ef fa8d 	bl	80002a8 <__aeabi_dsub>
 8010d8e:	4622      	mov	r2, r4
 8010d90:	4680      	mov	r8, r0
 8010d92:	4689      	mov	r9, r1
 8010d94:	462b      	mov	r3, r5
 8010d96:	4620      	mov	r0, r4
 8010d98:	4629      	mov	r1, r5
 8010d9a:	f7ef fc3d 	bl	8000618 <__aeabi_dmul>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	4640      	mov	r0, r8
 8010da4:	4649      	mov	r1, r9
 8010da6:	f7ef fc37 	bl	8000618 <__aeabi_dmul>
 8010daa:	a341      	add	r3, pc, #260	; (adr r3, 8010eb0 <__ieee754_pow+0x3b8>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fc32 	bl	8000618 <__aeabi_dmul>
 8010db4:	4602      	mov	r2, r0
 8010db6:	460b      	mov	r3, r1
 8010db8:	4650      	mov	r0, sl
 8010dba:	4659      	mov	r1, fp
 8010dbc:	f7ef fa74 	bl	80002a8 <__aeabi_dsub>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	4689      	mov	r9, r1
 8010dc8:	4630      	mov	r0, r6
 8010dca:	4639      	mov	r1, r7
 8010dcc:	f7ef fa6e 	bl	80002ac <__adddf3>
 8010dd0:	2400      	movs	r4, #0
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	463b      	mov	r3, r7
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	460d      	mov	r5, r1
 8010dda:	f7ef fa65 	bl	80002a8 <__aeabi_dsub>
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	4640      	mov	r0, r8
 8010de4:	4649      	mov	r1, r9
 8010de6:	f7ef fa5f 	bl	80002a8 <__aeabi_dsub>
 8010dea:	9b00      	ldr	r3, [sp, #0]
 8010dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dee:	3b01      	subs	r3, #1
 8010df0:	4313      	orrs	r3, r2
 8010df2:	4682      	mov	sl, r0
 8010df4:	468b      	mov	fp, r1
 8010df6:	f040 81f1 	bne.w	80111dc <__ieee754_pow+0x6e4>
 8010dfa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010eb8 <__ieee754_pow+0x3c0>
 8010dfe:	eeb0 8a47 	vmov.f32	s16, s14
 8010e02:	eef0 8a67 	vmov.f32	s17, s15
 8010e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e0a:	2600      	movs	r6, #0
 8010e0c:	4632      	mov	r2, r6
 8010e0e:	463b      	mov	r3, r7
 8010e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e14:	f7ef fa48 	bl	80002a8 <__aeabi_dsub>
 8010e18:	4622      	mov	r2, r4
 8010e1a:	462b      	mov	r3, r5
 8010e1c:	f7ef fbfc 	bl	8000618 <__aeabi_dmul>
 8010e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e24:	4680      	mov	r8, r0
 8010e26:	4689      	mov	r9, r1
 8010e28:	4650      	mov	r0, sl
 8010e2a:	4659      	mov	r1, fp
 8010e2c:	f7ef fbf4 	bl	8000618 <__aeabi_dmul>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4640      	mov	r0, r8
 8010e36:	4649      	mov	r1, r9
 8010e38:	f7ef fa38 	bl	80002ac <__adddf3>
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	463b      	mov	r3, r7
 8010e40:	4680      	mov	r8, r0
 8010e42:	4689      	mov	r9, r1
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fbe6 	bl	8000618 <__aeabi_dmul>
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460d      	mov	r5, r1
 8010e52:	4602      	mov	r2, r0
 8010e54:	4649      	mov	r1, r9
 8010e56:	4640      	mov	r0, r8
 8010e58:	f7ef fa28 	bl	80002ac <__adddf3>
 8010e5c:	4b1d      	ldr	r3, [pc, #116]	; (8010ed4 <__ieee754_pow+0x3dc>)
 8010e5e:	4299      	cmp	r1, r3
 8010e60:	ec45 4b19 	vmov	d9, r4, r5
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	468b      	mov	fp, r1
 8010e6a:	f340 82fe 	ble.w	801146a <__ieee754_pow+0x972>
 8010e6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010e72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010e76:	4303      	orrs	r3, r0
 8010e78:	f000 81f0 	beq.w	801125c <__ieee754_pow+0x764>
 8010e7c:	a310      	add	r3, pc, #64	; (adr r3, 8010ec0 <__ieee754_pow+0x3c8>)
 8010e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e82:	ec51 0b18 	vmov	r0, r1, d8
 8010e86:	f7ef fbc7 	bl	8000618 <__aeabi_dmul>
 8010e8a:	a30d      	add	r3, pc, #52	; (adr r3, 8010ec0 <__ieee754_pow+0x3c8>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	e6cb      	b.n	8010c2a <__ieee754_pow+0x132>
 8010e92:	bf00      	nop
 8010e94:	f3af 8000 	nop.w
 8010e98:	60000000 	.word	0x60000000
 8010e9c:	3ff71547 	.word	0x3ff71547
 8010ea0:	f85ddf44 	.word	0xf85ddf44
 8010ea4:	3e54ae0b 	.word	0x3e54ae0b
 8010ea8:	55555555 	.word	0x55555555
 8010eac:	3fd55555 	.word	0x3fd55555
 8010eb0:	652b82fe 	.word	0x652b82fe
 8010eb4:	3ff71547 	.word	0x3ff71547
 8010eb8:	00000000 	.word	0x00000000
 8010ebc:	bff00000 	.word	0xbff00000
 8010ec0:	8800759c 	.word	0x8800759c
 8010ec4:	7e37e43c 	.word	0x7e37e43c
 8010ec8:	3ff00000 	.word	0x3ff00000
 8010ecc:	3fd00000 	.word	0x3fd00000
 8010ed0:	3fe00000 	.word	0x3fe00000
 8010ed4:	408fffff 	.word	0x408fffff
 8010ed8:	4bd7      	ldr	r3, [pc, #860]	; (8011238 <__ieee754_pow+0x740>)
 8010eda:	ea03 0309 	and.w	r3, r3, r9
 8010ede:	2200      	movs	r2, #0
 8010ee0:	b92b      	cbnz	r3, 8010eee <__ieee754_pow+0x3f6>
 8010ee2:	4bd6      	ldr	r3, [pc, #856]	; (801123c <__ieee754_pow+0x744>)
 8010ee4:	f7ef fb98 	bl	8000618 <__aeabi_dmul>
 8010ee8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010eec:	460c      	mov	r4, r1
 8010eee:	1523      	asrs	r3, r4, #20
 8010ef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ef4:	4413      	add	r3, r2
 8010ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ef8:	4bd1      	ldr	r3, [pc, #836]	; (8011240 <__ieee754_pow+0x748>)
 8010efa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010efe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010f02:	429c      	cmp	r4, r3
 8010f04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010f08:	dd08      	ble.n	8010f1c <__ieee754_pow+0x424>
 8010f0a:	4bce      	ldr	r3, [pc, #824]	; (8011244 <__ieee754_pow+0x74c>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	f340 8163 	ble.w	80111d8 <__ieee754_pow+0x6e0>
 8010f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f14:	3301      	adds	r3, #1
 8010f16:	9309      	str	r3, [sp, #36]	; 0x24
 8010f18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010f1c:	2400      	movs	r4, #0
 8010f1e:	00e3      	lsls	r3, r4, #3
 8010f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f22:	4bc9      	ldr	r3, [pc, #804]	; (8011248 <__ieee754_pow+0x750>)
 8010f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f28:	ed93 7b00 	vldr	d7, [r3]
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	ec53 2b17 	vmov	r2, r3, d7
 8010f32:	eeb0 8a47 	vmov.f32	s16, s14
 8010f36:	eef0 8a67 	vmov.f32	s17, s15
 8010f3a:	4682      	mov	sl, r0
 8010f3c:	f7ef f9b4 	bl	80002a8 <__aeabi_dsub>
 8010f40:	4652      	mov	r2, sl
 8010f42:	4606      	mov	r6, r0
 8010f44:	460f      	mov	r7, r1
 8010f46:	462b      	mov	r3, r5
 8010f48:	ec51 0b18 	vmov	r0, r1, d8
 8010f4c:	f7ef f9ae 	bl	80002ac <__adddf3>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	2000      	movs	r0, #0
 8010f56:	49bd      	ldr	r1, [pc, #756]	; (801124c <__ieee754_pow+0x754>)
 8010f58:	f7ef fc88 	bl	800086c <__aeabi_ddiv>
 8010f5c:	ec41 0b19 	vmov	d9, r0, r1
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	4630      	mov	r0, r6
 8010f66:	4639      	mov	r1, r7
 8010f68:	f7ef fb56 	bl	8000618 <__aeabi_dmul>
 8010f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f78:	2300      	movs	r3, #0
 8010f7a:	9304      	str	r3, [sp, #16]
 8010f7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010f80:	46ab      	mov	fp, r5
 8010f82:	106d      	asrs	r5, r5, #1
 8010f84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010f88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010f8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010f90:	2200      	movs	r2, #0
 8010f92:	4640      	mov	r0, r8
 8010f94:	4649      	mov	r1, r9
 8010f96:	4614      	mov	r4, r2
 8010f98:	461d      	mov	r5, r3
 8010f9a:	f7ef fb3d 	bl	8000618 <__aeabi_dmul>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef f97f 	bl	80002a8 <__aeabi_dsub>
 8010faa:	ec53 2b18 	vmov	r2, r3, d8
 8010fae:	4606      	mov	r6, r0
 8010fb0:	460f      	mov	r7, r1
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	f7ef f977 	bl	80002a8 <__aeabi_dsub>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4650      	mov	r0, sl
 8010fc0:	4659      	mov	r1, fp
 8010fc2:	f7ef f971 	bl	80002a8 <__aeabi_dsub>
 8010fc6:	4642      	mov	r2, r8
 8010fc8:	464b      	mov	r3, r9
 8010fca:	f7ef fb25 	bl	8000618 <__aeabi_dmul>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	4639      	mov	r1, r7
 8010fd6:	f7ef f967 	bl	80002a8 <__aeabi_dsub>
 8010fda:	ec53 2b19 	vmov	r2, r3, d9
 8010fde:	f7ef fb1b 	bl	8000618 <__aeabi_dmul>
 8010fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010fe6:	ec41 0b18 	vmov	d8, r0, r1
 8010fea:	4610      	mov	r0, r2
 8010fec:	4619      	mov	r1, r3
 8010fee:	f7ef fb13 	bl	8000618 <__aeabi_dmul>
 8010ff2:	a37d      	add	r3, pc, #500	; (adr r3, 80111e8 <__ieee754_pow+0x6f0>)
 8010ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	460d      	mov	r5, r1
 8010ffc:	f7ef fb0c 	bl	8000618 <__aeabi_dmul>
 8011000:	a37b      	add	r3, pc, #492	; (adr r3, 80111f0 <__ieee754_pow+0x6f8>)
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	f7ef f951 	bl	80002ac <__adddf3>
 801100a:	4622      	mov	r2, r4
 801100c:	462b      	mov	r3, r5
 801100e:	f7ef fb03 	bl	8000618 <__aeabi_dmul>
 8011012:	a379      	add	r3, pc, #484	; (adr r3, 80111f8 <__ieee754_pow+0x700>)
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f7ef f948 	bl	80002ac <__adddf3>
 801101c:	4622      	mov	r2, r4
 801101e:	462b      	mov	r3, r5
 8011020:	f7ef fafa 	bl	8000618 <__aeabi_dmul>
 8011024:	a376      	add	r3, pc, #472	; (adr r3, 8011200 <__ieee754_pow+0x708>)
 8011026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102a:	f7ef f93f 	bl	80002ac <__adddf3>
 801102e:	4622      	mov	r2, r4
 8011030:	462b      	mov	r3, r5
 8011032:	f7ef faf1 	bl	8000618 <__aeabi_dmul>
 8011036:	a374      	add	r3, pc, #464	; (adr r3, 8011208 <__ieee754_pow+0x710>)
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	f7ef f936 	bl	80002ac <__adddf3>
 8011040:	4622      	mov	r2, r4
 8011042:	462b      	mov	r3, r5
 8011044:	f7ef fae8 	bl	8000618 <__aeabi_dmul>
 8011048:	a371      	add	r3, pc, #452	; (adr r3, 8011210 <__ieee754_pow+0x718>)
 801104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104e:	f7ef f92d 	bl	80002ac <__adddf3>
 8011052:	4622      	mov	r2, r4
 8011054:	4606      	mov	r6, r0
 8011056:	460f      	mov	r7, r1
 8011058:	462b      	mov	r3, r5
 801105a:	4620      	mov	r0, r4
 801105c:	4629      	mov	r1, r5
 801105e:	f7ef fadb 	bl	8000618 <__aeabi_dmul>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	4630      	mov	r0, r6
 8011068:	4639      	mov	r1, r7
 801106a:	f7ef fad5 	bl	8000618 <__aeabi_dmul>
 801106e:	4642      	mov	r2, r8
 8011070:	4604      	mov	r4, r0
 8011072:	460d      	mov	r5, r1
 8011074:	464b      	mov	r3, r9
 8011076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801107a:	f7ef f917 	bl	80002ac <__adddf3>
 801107e:	ec53 2b18 	vmov	r2, r3, d8
 8011082:	f7ef fac9 	bl	8000618 <__aeabi_dmul>
 8011086:	4622      	mov	r2, r4
 8011088:	462b      	mov	r3, r5
 801108a:	f7ef f90f 	bl	80002ac <__adddf3>
 801108e:	4642      	mov	r2, r8
 8011090:	4682      	mov	sl, r0
 8011092:	468b      	mov	fp, r1
 8011094:	464b      	mov	r3, r9
 8011096:	4640      	mov	r0, r8
 8011098:	4649      	mov	r1, r9
 801109a:	f7ef fabd 	bl	8000618 <__aeabi_dmul>
 801109e:	4b6c      	ldr	r3, [pc, #432]	; (8011250 <__ieee754_pow+0x758>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	4606      	mov	r6, r0
 80110a4:	460f      	mov	r7, r1
 80110a6:	f7ef f901 	bl	80002ac <__adddf3>
 80110aa:	4652      	mov	r2, sl
 80110ac:	465b      	mov	r3, fp
 80110ae:	f7ef f8fd 	bl	80002ac <__adddf3>
 80110b2:	9c04      	ldr	r4, [sp, #16]
 80110b4:	460d      	mov	r5, r1
 80110b6:	4622      	mov	r2, r4
 80110b8:	460b      	mov	r3, r1
 80110ba:	4640      	mov	r0, r8
 80110bc:	4649      	mov	r1, r9
 80110be:	f7ef faab 	bl	8000618 <__aeabi_dmul>
 80110c2:	4b63      	ldr	r3, [pc, #396]	; (8011250 <__ieee754_pow+0x758>)
 80110c4:	4680      	mov	r8, r0
 80110c6:	4689      	mov	r9, r1
 80110c8:	2200      	movs	r2, #0
 80110ca:	4620      	mov	r0, r4
 80110cc:	4629      	mov	r1, r5
 80110ce:	f7ef f8eb 	bl	80002a8 <__aeabi_dsub>
 80110d2:	4632      	mov	r2, r6
 80110d4:	463b      	mov	r3, r7
 80110d6:	f7ef f8e7 	bl	80002a8 <__aeabi_dsub>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	4650      	mov	r0, sl
 80110e0:	4659      	mov	r1, fp
 80110e2:	f7ef f8e1 	bl	80002a8 <__aeabi_dsub>
 80110e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110ea:	f7ef fa95 	bl	8000618 <__aeabi_dmul>
 80110ee:	4622      	mov	r2, r4
 80110f0:	4606      	mov	r6, r0
 80110f2:	460f      	mov	r7, r1
 80110f4:	462b      	mov	r3, r5
 80110f6:	ec51 0b18 	vmov	r0, r1, d8
 80110fa:	f7ef fa8d 	bl	8000618 <__aeabi_dmul>
 80110fe:	4602      	mov	r2, r0
 8011100:	460b      	mov	r3, r1
 8011102:	4630      	mov	r0, r6
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef f8d1 	bl	80002ac <__adddf3>
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4640      	mov	r0, r8
 8011114:	4649      	mov	r1, r9
 8011116:	f7ef f8c9 	bl	80002ac <__adddf3>
 801111a:	9c04      	ldr	r4, [sp, #16]
 801111c:	a33e      	add	r3, pc, #248	; (adr r3, 8011218 <__ieee754_pow+0x720>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	4620      	mov	r0, r4
 8011124:	460d      	mov	r5, r1
 8011126:	f7ef fa77 	bl	8000618 <__aeabi_dmul>
 801112a:	4642      	mov	r2, r8
 801112c:	ec41 0b18 	vmov	d8, r0, r1
 8011130:	464b      	mov	r3, r9
 8011132:	4620      	mov	r0, r4
 8011134:	4629      	mov	r1, r5
 8011136:	f7ef f8b7 	bl	80002a8 <__aeabi_dsub>
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	4630      	mov	r0, r6
 8011140:	4639      	mov	r1, r7
 8011142:	f7ef f8b1 	bl	80002a8 <__aeabi_dsub>
 8011146:	a336      	add	r3, pc, #216	; (adr r3, 8011220 <__ieee754_pow+0x728>)
 8011148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114c:	f7ef fa64 	bl	8000618 <__aeabi_dmul>
 8011150:	a335      	add	r3, pc, #212	; (adr r3, 8011228 <__ieee754_pow+0x730>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	4606      	mov	r6, r0
 8011158:	460f      	mov	r7, r1
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	f7ef fa5b 	bl	8000618 <__aeabi_dmul>
 8011162:	4602      	mov	r2, r0
 8011164:	460b      	mov	r3, r1
 8011166:	4630      	mov	r0, r6
 8011168:	4639      	mov	r1, r7
 801116a:	f7ef f89f 	bl	80002ac <__adddf3>
 801116e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011170:	4b38      	ldr	r3, [pc, #224]	; (8011254 <__ieee754_pow+0x75c>)
 8011172:	4413      	add	r3, r2
 8011174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011178:	f7ef f898 	bl	80002ac <__adddf3>
 801117c:	4682      	mov	sl, r0
 801117e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011180:	468b      	mov	fp, r1
 8011182:	f7ef f9df 	bl	8000544 <__aeabi_i2d>
 8011186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011188:	4b33      	ldr	r3, [pc, #204]	; (8011258 <__ieee754_pow+0x760>)
 801118a:	4413      	add	r3, r2
 801118c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011190:	4606      	mov	r6, r0
 8011192:	460f      	mov	r7, r1
 8011194:	4652      	mov	r2, sl
 8011196:	465b      	mov	r3, fp
 8011198:	ec51 0b18 	vmov	r0, r1, d8
 801119c:	f7ef f886 	bl	80002ac <__adddf3>
 80111a0:	4642      	mov	r2, r8
 80111a2:	464b      	mov	r3, r9
 80111a4:	f7ef f882 	bl	80002ac <__adddf3>
 80111a8:	4632      	mov	r2, r6
 80111aa:	463b      	mov	r3, r7
 80111ac:	f7ef f87e 	bl	80002ac <__adddf3>
 80111b0:	9c04      	ldr	r4, [sp, #16]
 80111b2:	4632      	mov	r2, r6
 80111b4:	463b      	mov	r3, r7
 80111b6:	4620      	mov	r0, r4
 80111b8:	460d      	mov	r5, r1
 80111ba:	f7ef f875 	bl	80002a8 <__aeabi_dsub>
 80111be:	4642      	mov	r2, r8
 80111c0:	464b      	mov	r3, r9
 80111c2:	f7ef f871 	bl	80002a8 <__aeabi_dsub>
 80111c6:	ec53 2b18 	vmov	r2, r3, d8
 80111ca:	f7ef f86d 	bl	80002a8 <__aeabi_dsub>
 80111ce:	4602      	mov	r2, r0
 80111d0:	460b      	mov	r3, r1
 80111d2:	4650      	mov	r0, sl
 80111d4:	4659      	mov	r1, fp
 80111d6:	e606      	b.n	8010de6 <__ieee754_pow+0x2ee>
 80111d8:	2401      	movs	r4, #1
 80111da:	e6a0      	b.n	8010f1e <__ieee754_pow+0x426>
 80111dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011230 <__ieee754_pow+0x738>
 80111e0:	e60d      	b.n	8010dfe <__ieee754_pow+0x306>
 80111e2:	bf00      	nop
 80111e4:	f3af 8000 	nop.w
 80111e8:	4a454eef 	.word	0x4a454eef
 80111ec:	3fca7e28 	.word	0x3fca7e28
 80111f0:	93c9db65 	.word	0x93c9db65
 80111f4:	3fcd864a 	.word	0x3fcd864a
 80111f8:	a91d4101 	.word	0xa91d4101
 80111fc:	3fd17460 	.word	0x3fd17460
 8011200:	518f264d 	.word	0x518f264d
 8011204:	3fd55555 	.word	0x3fd55555
 8011208:	db6fabff 	.word	0xdb6fabff
 801120c:	3fdb6db6 	.word	0x3fdb6db6
 8011210:	33333303 	.word	0x33333303
 8011214:	3fe33333 	.word	0x3fe33333
 8011218:	e0000000 	.word	0xe0000000
 801121c:	3feec709 	.word	0x3feec709
 8011220:	dc3a03fd 	.word	0xdc3a03fd
 8011224:	3feec709 	.word	0x3feec709
 8011228:	145b01f5 	.word	0x145b01f5
 801122c:	be3e2fe0 	.word	0xbe3e2fe0
 8011230:	00000000 	.word	0x00000000
 8011234:	3ff00000 	.word	0x3ff00000
 8011238:	7ff00000 	.word	0x7ff00000
 801123c:	43400000 	.word	0x43400000
 8011240:	0003988e 	.word	0x0003988e
 8011244:	000bb679 	.word	0x000bb679
 8011248:	08018c08 	.word	0x08018c08
 801124c:	3ff00000 	.word	0x3ff00000
 8011250:	40080000 	.word	0x40080000
 8011254:	08018c28 	.word	0x08018c28
 8011258:	08018c18 	.word	0x08018c18
 801125c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011534 <__ieee754_pow+0xa3c>)
 801125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011262:	4640      	mov	r0, r8
 8011264:	4649      	mov	r1, r9
 8011266:	f7ef f821 	bl	80002ac <__adddf3>
 801126a:	4622      	mov	r2, r4
 801126c:	ec41 0b1a 	vmov	d10, r0, r1
 8011270:	462b      	mov	r3, r5
 8011272:	4630      	mov	r0, r6
 8011274:	4639      	mov	r1, r7
 8011276:	f7ef f817 	bl	80002a8 <__aeabi_dsub>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	ec51 0b1a 	vmov	r0, r1, d10
 8011282:	f7ef fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8011286:	2800      	cmp	r0, #0
 8011288:	f47f adf8 	bne.w	8010e7c <__ieee754_pow+0x384>
 801128c:	4aa4      	ldr	r2, [pc, #656]	; (8011520 <__ieee754_pow+0xa28>)
 801128e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011292:	4293      	cmp	r3, r2
 8011294:	f340 810b 	ble.w	80114ae <__ieee754_pow+0x9b6>
 8011298:	151b      	asrs	r3, r3, #20
 801129a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801129e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80112a2:	fa4a f303 	asr.w	r3, sl, r3
 80112a6:	445b      	add	r3, fp
 80112a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80112ac:	4e9d      	ldr	r6, [pc, #628]	; (8011524 <__ieee754_pow+0xa2c>)
 80112ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80112b2:	4116      	asrs	r6, r2
 80112b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80112b8:	2000      	movs	r0, #0
 80112ba:	ea23 0106 	bic.w	r1, r3, r6
 80112be:	f1c2 0214 	rsb	r2, r2, #20
 80112c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80112c6:	fa4a fa02 	asr.w	sl, sl, r2
 80112ca:	f1bb 0f00 	cmp.w	fp, #0
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4620      	mov	r0, r4
 80112d4:	4629      	mov	r1, r5
 80112d6:	bfb8      	it	lt
 80112d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80112dc:	f7ee ffe4 	bl	80002a8 <__aeabi_dsub>
 80112e0:	ec41 0b19 	vmov	d9, r0, r1
 80112e4:	4642      	mov	r2, r8
 80112e6:	464b      	mov	r3, r9
 80112e8:	ec51 0b19 	vmov	r0, r1, d9
 80112ec:	f7ee ffde 	bl	80002ac <__adddf3>
 80112f0:	2400      	movs	r4, #0
 80112f2:	a379      	add	r3, pc, #484	; (adr r3, 80114d8 <__ieee754_pow+0x9e0>)
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	4620      	mov	r0, r4
 80112fa:	460d      	mov	r5, r1
 80112fc:	f7ef f98c 	bl	8000618 <__aeabi_dmul>
 8011300:	ec53 2b19 	vmov	r2, r3, d9
 8011304:	4606      	mov	r6, r0
 8011306:	460f      	mov	r7, r1
 8011308:	4620      	mov	r0, r4
 801130a:	4629      	mov	r1, r5
 801130c:	f7ee ffcc 	bl	80002a8 <__aeabi_dsub>
 8011310:	4602      	mov	r2, r0
 8011312:	460b      	mov	r3, r1
 8011314:	4640      	mov	r0, r8
 8011316:	4649      	mov	r1, r9
 8011318:	f7ee ffc6 	bl	80002a8 <__aeabi_dsub>
 801131c:	a370      	add	r3, pc, #448	; (adr r3, 80114e0 <__ieee754_pow+0x9e8>)
 801131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011322:	f7ef f979 	bl	8000618 <__aeabi_dmul>
 8011326:	a370      	add	r3, pc, #448	; (adr r3, 80114e8 <__ieee754_pow+0x9f0>)
 8011328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132c:	4680      	mov	r8, r0
 801132e:	4689      	mov	r9, r1
 8011330:	4620      	mov	r0, r4
 8011332:	4629      	mov	r1, r5
 8011334:	f7ef f970 	bl	8000618 <__aeabi_dmul>
 8011338:	4602      	mov	r2, r0
 801133a:	460b      	mov	r3, r1
 801133c:	4640      	mov	r0, r8
 801133e:	4649      	mov	r1, r9
 8011340:	f7ee ffb4 	bl	80002ac <__adddf3>
 8011344:	4604      	mov	r4, r0
 8011346:	460d      	mov	r5, r1
 8011348:	4602      	mov	r2, r0
 801134a:	460b      	mov	r3, r1
 801134c:	4630      	mov	r0, r6
 801134e:	4639      	mov	r1, r7
 8011350:	f7ee ffac 	bl	80002ac <__adddf3>
 8011354:	4632      	mov	r2, r6
 8011356:	463b      	mov	r3, r7
 8011358:	4680      	mov	r8, r0
 801135a:	4689      	mov	r9, r1
 801135c:	f7ee ffa4 	bl	80002a8 <__aeabi_dsub>
 8011360:	4602      	mov	r2, r0
 8011362:	460b      	mov	r3, r1
 8011364:	4620      	mov	r0, r4
 8011366:	4629      	mov	r1, r5
 8011368:	f7ee ff9e 	bl	80002a8 <__aeabi_dsub>
 801136c:	4642      	mov	r2, r8
 801136e:	4606      	mov	r6, r0
 8011370:	460f      	mov	r7, r1
 8011372:	464b      	mov	r3, r9
 8011374:	4640      	mov	r0, r8
 8011376:	4649      	mov	r1, r9
 8011378:	f7ef f94e 	bl	8000618 <__aeabi_dmul>
 801137c:	a35c      	add	r3, pc, #368	; (adr r3, 80114f0 <__ieee754_pow+0x9f8>)
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	4604      	mov	r4, r0
 8011384:	460d      	mov	r5, r1
 8011386:	f7ef f947 	bl	8000618 <__aeabi_dmul>
 801138a:	a35b      	add	r3, pc, #364	; (adr r3, 80114f8 <__ieee754_pow+0xa00>)
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	f7ee ff8a 	bl	80002a8 <__aeabi_dsub>
 8011394:	4622      	mov	r2, r4
 8011396:	462b      	mov	r3, r5
 8011398:	f7ef f93e 	bl	8000618 <__aeabi_dmul>
 801139c:	a358      	add	r3, pc, #352	; (adr r3, 8011500 <__ieee754_pow+0xa08>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	f7ee ff83 	bl	80002ac <__adddf3>
 80113a6:	4622      	mov	r2, r4
 80113a8:	462b      	mov	r3, r5
 80113aa:	f7ef f935 	bl	8000618 <__aeabi_dmul>
 80113ae:	a356      	add	r3, pc, #344	; (adr r3, 8011508 <__ieee754_pow+0xa10>)
 80113b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b4:	f7ee ff78 	bl	80002a8 <__aeabi_dsub>
 80113b8:	4622      	mov	r2, r4
 80113ba:	462b      	mov	r3, r5
 80113bc:	f7ef f92c 	bl	8000618 <__aeabi_dmul>
 80113c0:	a353      	add	r3, pc, #332	; (adr r3, 8011510 <__ieee754_pow+0xa18>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	f7ee ff71 	bl	80002ac <__adddf3>
 80113ca:	4622      	mov	r2, r4
 80113cc:	462b      	mov	r3, r5
 80113ce:	f7ef f923 	bl	8000618 <__aeabi_dmul>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4640      	mov	r0, r8
 80113d8:	4649      	mov	r1, r9
 80113da:	f7ee ff65 	bl	80002a8 <__aeabi_dsub>
 80113de:	4604      	mov	r4, r0
 80113e0:	460d      	mov	r5, r1
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4640      	mov	r0, r8
 80113e8:	4649      	mov	r1, r9
 80113ea:	f7ef f915 	bl	8000618 <__aeabi_dmul>
 80113ee:	2200      	movs	r2, #0
 80113f0:	ec41 0b19 	vmov	d9, r0, r1
 80113f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113f8:	4620      	mov	r0, r4
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7ee ff54 	bl	80002a8 <__aeabi_dsub>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	ec51 0b19 	vmov	r0, r1, d9
 8011408:	f7ef fa30 	bl	800086c <__aeabi_ddiv>
 801140c:	4632      	mov	r2, r6
 801140e:	4604      	mov	r4, r0
 8011410:	460d      	mov	r5, r1
 8011412:	463b      	mov	r3, r7
 8011414:	4640      	mov	r0, r8
 8011416:	4649      	mov	r1, r9
 8011418:	f7ef f8fe 	bl	8000618 <__aeabi_dmul>
 801141c:	4632      	mov	r2, r6
 801141e:	463b      	mov	r3, r7
 8011420:	f7ee ff44 	bl	80002ac <__adddf3>
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	4620      	mov	r0, r4
 801142a:	4629      	mov	r1, r5
 801142c:	f7ee ff3c 	bl	80002a8 <__aeabi_dsub>
 8011430:	4642      	mov	r2, r8
 8011432:	464b      	mov	r3, r9
 8011434:	f7ee ff38 	bl	80002a8 <__aeabi_dsub>
 8011438:	460b      	mov	r3, r1
 801143a:	4602      	mov	r2, r0
 801143c:	493a      	ldr	r1, [pc, #232]	; (8011528 <__ieee754_pow+0xa30>)
 801143e:	2000      	movs	r0, #0
 8011440:	f7ee ff32 	bl	80002a8 <__aeabi_dsub>
 8011444:	e9cd 0100 	strd	r0, r1, [sp]
 8011448:	9b01      	ldr	r3, [sp, #4]
 801144a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801144e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011452:	da2f      	bge.n	80114b4 <__ieee754_pow+0x9bc>
 8011454:	4650      	mov	r0, sl
 8011456:	ed9d 0b00 	vldr	d0, [sp]
 801145a:	f000 f9cd 	bl	80117f8 <scalbn>
 801145e:	ec51 0b10 	vmov	r0, r1, d0
 8011462:	ec53 2b18 	vmov	r2, r3, d8
 8011466:	f7ff bbe0 	b.w	8010c2a <__ieee754_pow+0x132>
 801146a:	4b30      	ldr	r3, [pc, #192]	; (801152c <__ieee754_pow+0xa34>)
 801146c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011470:	429e      	cmp	r6, r3
 8011472:	f77f af0b 	ble.w	801128c <__ieee754_pow+0x794>
 8011476:	4b2e      	ldr	r3, [pc, #184]	; (8011530 <__ieee754_pow+0xa38>)
 8011478:	440b      	add	r3, r1
 801147a:	4303      	orrs	r3, r0
 801147c:	d00b      	beq.n	8011496 <__ieee754_pow+0x99e>
 801147e:	a326      	add	r3, pc, #152	; (adr r3, 8011518 <__ieee754_pow+0xa20>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	ec51 0b18 	vmov	r0, r1, d8
 8011488:	f7ef f8c6 	bl	8000618 <__aeabi_dmul>
 801148c:	a322      	add	r3, pc, #136	; (adr r3, 8011518 <__ieee754_pow+0xa20>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	f7ff bbca 	b.w	8010c2a <__ieee754_pow+0x132>
 8011496:	4622      	mov	r2, r4
 8011498:	462b      	mov	r3, r5
 801149a:	f7ee ff05 	bl	80002a8 <__aeabi_dsub>
 801149e:	4642      	mov	r2, r8
 80114a0:	464b      	mov	r3, r9
 80114a2:	f7ef fb3f 	bl	8000b24 <__aeabi_dcmpge>
 80114a6:	2800      	cmp	r0, #0
 80114a8:	f43f aef0 	beq.w	801128c <__ieee754_pow+0x794>
 80114ac:	e7e7      	b.n	801147e <__ieee754_pow+0x986>
 80114ae:	f04f 0a00 	mov.w	sl, #0
 80114b2:	e717      	b.n	80112e4 <__ieee754_pow+0x7ec>
 80114b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114b8:	4619      	mov	r1, r3
 80114ba:	e7d2      	b.n	8011462 <__ieee754_pow+0x96a>
 80114bc:	491a      	ldr	r1, [pc, #104]	; (8011528 <__ieee754_pow+0xa30>)
 80114be:	2000      	movs	r0, #0
 80114c0:	f7ff bb9e 	b.w	8010c00 <__ieee754_pow+0x108>
 80114c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114c8:	f7ff bb9a 	b.w	8010c00 <__ieee754_pow+0x108>
 80114cc:	9000      	str	r0, [sp, #0]
 80114ce:	f7ff bb76 	b.w	8010bbe <__ieee754_pow+0xc6>
 80114d2:	2100      	movs	r1, #0
 80114d4:	f7ff bb60 	b.w	8010b98 <__ieee754_pow+0xa0>
 80114d8:	00000000 	.word	0x00000000
 80114dc:	3fe62e43 	.word	0x3fe62e43
 80114e0:	fefa39ef 	.word	0xfefa39ef
 80114e4:	3fe62e42 	.word	0x3fe62e42
 80114e8:	0ca86c39 	.word	0x0ca86c39
 80114ec:	be205c61 	.word	0xbe205c61
 80114f0:	72bea4d0 	.word	0x72bea4d0
 80114f4:	3e663769 	.word	0x3e663769
 80114f8:	c5d26bf1 	.word	0xc5d26bf1
 80114fc:	3ebbbd41 	.word	0x3ebbbd41
 8011500:	af25de2c 	.word	0xaf25de2c
 8011504:	3f11566a 	.word	0x3f11566a
 8011508:	16bebd93 	.word	0x16bebd93
 801150c:	3f66c16c 	.word	0x3f66c16c
 8011510:	5555553e 	.word	0x5555553e
 8011514:	3fc55555 	.word	0x3fc55555
 8011518:	c2f8f359 	.word	0xc2f8f359
 801151c:	01a56e1f 	.word	0x01a56e1f
 8011520:	3fe00000 	.word	0x3fe00000
 8011524:	000fffff 	.word	0x000fffff
 8011528:	3ff00000 	.word	0x3ff00000
 801152c:	4090cbff 	.word	0x4090cbff
 8011530:	3f6f3400 	.word	0x3f6f3400
 8011534:	652b82fe 	.word	0x652b82fe
 8011538:	3c971547 	.word	0x3c971547

0801153c <__ieee754_sqrt>:
 801153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011540:	ec55 4b10 	vmov	r4, r5, d0
 8011544:	4e56      	ldr	r6, [pc, #344]	; (80116a0 <__ieee754_sqrt+0x164>)
 8011546:	43ae      	bics	r6, r5
 8011548:	ee10 0a10 	vmov	r0, s0
 801154c:	ee10 3a10 	vmov	r3, s0
 8011550:	4629      	mov	r1, r5
 8011552:	462a      	mov	r2, r5
 8011554:	d110      	bne.n	8011578 <__ieee754_sqrt+0x3c>
 8011556:	ee10 2a10 	vmov	r2, s0
 801155a:	462b      	mov	r3, r5
 801155c:	f7ef f85c 	bl	8000618 <__aeabi_dmul>
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	4620      	mov	r0, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f7ee fea0 	bl	80002ac <__adddf3>
 801156c:	4604      	mov	r4, r0
 801156e:	460d      	mov	r5, r1
 8011570:	ec45 4b10 	vmov	d0, r4, r5
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011578:	2d00      	cmp	r5, #0
 801157a:	dc10      	bgt.n	801159e <__ieee754_sqrt+0x62>
 801157c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011580:	4330      	orrs	r0, r6
 8011582:	d0f5      	beq.n	8011570 <__ieee754_sqrt+0x34>
 8011584:	b15d      	cbz	r5, 801159e <__ieee754_sqrt+0x62>
 8011586:	ee10 2a10 	vmov	r2, s0
 801158a:	462b      	mov	r3, r5
 801158c:	ee10 0a10 	vmov	r0, s0
 8011590:	f7ee fe8a 	bl	80002a8 <__aeabi_dsub>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	f7ef f968 	bl	800086c <__aeabi_ddiv>
 801159c:	e7e6      	b.n	801156c <__ieee754_sqrt+0x30>
 801159e:	1509      	asrs	r1, r1, #20
 80115a0:	d076      	beq.n	8011690 <__ieee754_sqrt+0x154>
 80115a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80115a6:	07ce      	lsls	r6, r1, #31
 80115a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80115ac:	bf5e      	ittt	pl
 80115ae:	0fda      	lsrpl	r2, r3, #31
 80115b0:	005b      	lslpl	r3, r3, #1
 80115b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80115b6:	0fda      	lsrs	r2, r3, #31
 80115b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80115bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80115c0:	2000      	movs	r0, #0
 80115c2:	106d      	asrs	r5, r5, #1
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	f04f 0e16 	mov.w	lr, #22
 80115ca:	4684      	mov	ip, r0
 80115cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115d0:	eb0c 0401 	add.w	r4, ip, r1
 80115d4:	4294      	cmp	r4, r2
 80115d6:	bfde      	ittt	le
 80115d8:	1b12      	suble	r2, r2, r4
 80115da:	eb04 0c01 	addle.w	ip, r4, r1
 80115de:	1840      	addle	r0, r0, r1
 80115e0:	0052      	lsls	r2, r2, #1
 80115e2:	f1be 0e01 	subs.w	lr, lr, #1
 80115e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80115ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80115ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80115f2:	d1ed      	bne.n	80115d0 <__ieee754_sqrt+0x94>
 80115f4:	4671      	mov	r1, lr
 80115f6:	2720      	movs	r7, #32
 80115f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80115fc:	4562      	cmp	r2, ip
 80115fe:	eb04 060e 	add.w	r6, r4, lr
 8011602:	dc02      	bgt.n	801160a <__ieee754_sqrt+0xce>
 8011604:	d113      	bne.n	801162e <__ieee754_sqrt+0xf2>
 8011606:	429e      	cmp	r6, r3
 8011608:	d811      	bhi.n	801162e <__ieee754_sqrt+0xf2>
 801160a:	2e00      	cmp	r6, #0
 801160c:	eb06 0e04 	add.w	lr, r6, r4
 8011610:	da43      	bge.n	801169a <__ieee754_sqrt+0x15e>
 8011612:	f1be 0f00 	cmp.w	lr, #0
 8011616:	db40      	blt.n	801169a <__ieee754_sqrt+0x15e>
 8011618:	f10c 0801 	add.w	r8, ip, #1
 801161c:	eba2 020c 	sub.w	r2, r2, ip
 8011620:	429e      	cmp	r6, r3
 8011622:	bf88      	it	hi
 8011624:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011628:	1b9b      	subs	r3, r3, r6
 801162a:	4421      	add	r1, r4
 801162c:	46c4      	mov	ip, r8
 801162e:	0052      	lsls	r2, r2, #1
 8011630:	3f01      	subs	r7, #1
 8011632:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011636:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801163a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801163e:	d1dd      	bne.n	80115fc <__ieee754_sqrt+0xc0>
 8011640:	4313      	orrs	r3, r2
 8011642:	d006      	beq.n	8011652 <__ieee754_sqrt+0x116>
 8011644:	1c4c      	adds	r4, r1, #1
 8011646:	bf13      	iteet	ne
 8011648:	3101      	addne	r1, #1
 801164a:	3001      	addeq	r0, #1
 801164c:	4639      	moveq	r1, r7
 801164e:	f021 0101 	bicne.w	r1, r1, #1
 8011652:	1043      	asrs	r3, r0, #1
 8011654:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011658:	0849      	lsrs	r1, r1, #1
 801165a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801165e:	07c2      	lsls	r2, r0, #31
 8011660:	bf48      	it	mi
 8011662:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011666:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801166a:	460c      	mov	r4, r1
 801166c:	463d      	mov	r5, r7
 801166e:	e77f      	b.n	8011570 <__ieee754_sqrt+0x34>
 8011670:	0ada      	lsrs	r2, r3, #11
 8011672:	3815      	subs	r0, #21
 8011674:	055b      	lsls	r3, r3, #21
 8011676:	2a00      	cmp	r2, #0
 8011678:	d0fa      	beq.n	8011670 <__ieee754_sqrt+0x134>
 801167a:	02d7      	lsls	r7, r2, #11
 801167c:	d50a      	bpl.n	8011694 <__ieee754_sqrt+0x158>
 801167e:	f1c1 0420 	rsb	r4, r1, #32
 8011682:	fa23 f404 	lsr.w	r4, r3, r4
 8011686:	1e4d      	subs	r5, r1, #1
 8011688:	408b      	lsls	r3, r1
 801168a:	4322      	orrs	r2, r4
 801168c:	1b41      	subs	r1, r0, r5
 801168e:	e788      	b.n	80115a2 <__ieee754_sqrt+0x66>
 8011690:	4608      	mov	r0, r1
 8011692:	e7f0      	b.n	8011676 <__ieee754_sqrt+0x13a>
 8011694:	0052      	lsls	r2, r2, #1
 8011696:	3101      	adds	r1, #1
 8011698:	e7ef      	b.n	801167a <__ieee754_sqrt+0x13e>
 801169a:	46e0      	mov	r8, ip
 801169c:	e7be      	b.n	801161c <__ieee754_sqrt+0xe0>
 801169e:	bf00      	nop
 80116a0:	7ff00000 	.word	0x7ff00000

080116a4 <fabs>:
 80116a4:	ec51 0b10 	vmov	r0, r1, d0
 80116a8:	ee10 2a10 	vmov	r2, s0
 80116ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116b0:	ec43 2b10 	vmov	d0, r2, r3
 80116b4:	4770      	bx	lr

080116b6 <finite>:
 80116b6:	b082      	sub	sp, #8
 80116b8:	ed8d 0b00 	vstr	d0, [sp]
 80116bc:	9801      	ldr	r0, [sp, #4]
 80116be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80116c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80116c6:	0fc0      	lsrs	r0, r0, #31
 80116c8:	b002      	add	sp, #8
 80116ca:	4770      	bx	lr
 80116cc:	0000      	movs	r0, r0
	...

080116d0 <nan>:
 80116d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80116d8 <nan+0x8>
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop
 80116d8:	00000000 	.word	0x00000000
 80116dc:	7ff80000 	.word	0x7ff80000

080116e0 <rint>:
 80116e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116e2:	ec51 0b10 	vmov	r0, r1, d0
 80116e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80116ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80116ee:	2e13      	cmp	r6, #19
 80116f0:	ee10 4a10 	vmov	r4, s0
 80116f4:	460b      	mov	r3, r1
 80116f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80116fa:	dc58      	bgt.n	80117ae <rint+0xce>
 80116fc:	2e00      	cmp	r6, #0
 80116fe:	da2b      	bge.n	8011758 <rint+0x78>
 8011700:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011704:	4302      	orrs	r2, r0
 8011706:	d023      	beq.n	8011750 <rint+0x70>
 8011708:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801170c:	4302      	orrs	r2, r0
 801170e:	4254      	negs	r4, r2
 8011710:	4314      	orrs	r4, r2
 8011712:	0c4b      	lsrs	r3, r1, #17
 8011714:	0b24      	lsrs	r4, r4, #12
 8011716:	045b      	lsls	r3, r3, #17
 8011718:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801171c:	ea44 0103 	orr.w	r1, r4, r3
 8011720:	4b32      	ldr	r3, [pc, #200]	; (80117ec <rint+0x10c>)
 8011722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011726:	e9d3 6700 	ldrd	r6, r7, [r3]
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	4630      	mov	r0, r6
 8011730:	4639      	mov	r1, r7
 8011732:	f7ee fdbb 	bl	80002ac <__adddf3>
 8011736:	e9cd 0100 	strd	r0, r1, [sp]
 801173a:	463b      	mov	r3, r7
 801173c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011740:	4632      	mov	r2, r6
 8011742:	f7ee fdb1 	bl	80002a8 <__aeabi_dsub>
 8011746:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801174a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801174e:	4639      	mov	r1, r7
 8011750:	ec41 0b10 	vmov	d0, r0, r1
 8011754:	b003      	add	sp, #12
 8011756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011758:	4a25      	ldr	r2, [pc, #148]	; (80117f0 <rint+0x110>)
 801175a:	4132      	asrs	r2, r6
 801175c:	ea01 0702 	and.w	r7, r1, r2
 8011760:	4307      	orrs	r7, r0
 8011762:	d0f5      	beq.n	8011750 <rint+0x70>
 8011764:	0851      	lsrs	r1, r2, #1
 8011766:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801176a:	4314      	orrs	r4, r2
 801176c:	d00c      	beq.n	8011788 <rint+0xa8>
 801176e:	ea23 0201 	bic.w	r2, r3, r1
 8011772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011776:	2e13      	cmp	r6, #19
 8011778:	fa43 f606 	asr.w	r6, r3, r6
 801177c:	bf0c      	ite	eq
 801177e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011782:	2400      	movne	r4, #0
 8011784:	ea42 0306 	orr.w	r3, r2, r6
 8011788:	4918      	ldr	r1, [pc, #96]	; (80117ec <rint+0x10c>)
 801178a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801178e:	4622      	mov	r2, r4
 8011790:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011794:	4620      	mov	r0, r4
 8011796:	4629      	mov	r1, r5
 8011798:	f7ee fd88 	bl	80002ac <__adddf3>
 801179c:	e9cd 0100 	strd	r0, r1, [sp]
 80117a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117a4:	4622      	mov	r2, r4
 80117a6:	462b      	mov	r3, r5
 80117a8:	f7ee fd7e 	bl	80002a8 <__aeabi_dsub>
 80117ac:	e7d0      	b.n	8011750 <rint+0x70>
 80117ae:	2e33      	cmp	r6, #51	; 0x33
 80117b0:	dd07      	ble.n	80117c2 <rint+0xe2>
 80117b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80117b6:	d1cb      	bne.n	8011750 <rint+0x70>
 80117b8:	ee10 2a10 	vmov	r2, s0
 80117bc:	f7ee fd76 	bl	80002ac <__adddf3>
 80117c0:	e7c6      	b.n	8011750 <rint+0x70>
 80117c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80117c6:	f04f 36ff 	mov.w	r6, #4294967295
 80117ca:	40d6      	lsrs	r6, r2
 80117cc:	4230      	tst	r0, r6
 80117ce:	d0bf      	beq.n	8011750 <rint+0x70>
 80117d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80117d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80117d8:	bf1f      	itttt	ne
 80117da:	ea24 0101 	bicne.w	r1, r4, r1
 80117de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80117e2:	fa44 f202 	asrne.w	r2, r4, r2
 80117e6:	ea41 0402 	orrne.w	r4, r1, r2
 80117ea:	e7cd      	b.n	8011788 <rint+0xa8>
 80117ec:	08018c38 	.word	0x08018c38
 80117f0:	000fffff 	.word	0x000fffff
 80117f4:	00000000 	.word	0x00000000

080117f8 <scalbn>:
 80117f8:	b570      	push	{r4, r5, r6, lr}
 80117fa:	ec55 4b10 	vmov	r4, r5, d0
 80117fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011802:	4606      	mov	r6, r0
 8011804:	462b      	mov	r3, r5
 8011806:	b99a      	cbnz	r2, 8011830 <scalbn+0x38>
 8011808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801180c:	4323      	orrs	r3, r4
 801180e:	d036      	beq.n	801187e <scalbn+0x86>
 8011810:	4b39      	ldr	r3, [pc, #228]	; (80118f8 <scalbn+0x100>)
 8011812:	4629      	mov	r1, r5
 8011814:	ee10 0a10 	vmov	r0, s0
 8011818:	2200      	movs	r2, #0
 801181a:	f7ee fefd 	bl	8000618 <__aeabi_dmul>
 801181e:	4b37      	ldr	r3, [pc, #220]	; (80118fc <scalbn+0x104>)
 8011820:	429e      	cmp	r6, r3
 8011822:	4604      	mov	r4, r0
 8011824:	460d      	mov	r5, r1
 8011826:	da10      	bge.n	801184a <scalbn+0x52>
 8011828:	a32b      	add	r3, pc, #172	; (adr r3, 80118d8 <scalbn+0xe0>)
 801182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182e:	e03a      	b.n	80118a6 <scalbn+0xae>
 8011830:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011834:	428a      	cmp	r2, r1
 8011836:	d10c      	bne.n	8011852 <scalbn+0x5a>
 8011838:	ee10 2a10 	vmov	r2, s0
 801183c:	4620      	mov	r0, r4
 801183e:	4629      	mov	r1, r5
 8011840:	f7ee fd34 	bl	80002ac <__adddf3>
 8011844:	4604      	mov	r4, r0
 8011846:	460d      	mov	r5, r1
 8011848:	e019      	b.n	801187e <scalbn+0x86>
 801184a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801184e:	460b      	mov	r3, r1
 8011850:	3a36      	subs	r2, #54	; 0x36
 8011852:	4432      	add	r2, r6
 8011854:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011858:	428a      	cmp	r2, r1
 801185a:	dd08      	ble.n	801186e <scalbn+0x76>
 801185c:	2d00      	cmp	r5, #0
 801185e:	a120      	add	r1, pc, #128	; (adr r1, 80118e0 <scalbn+0xe8>)
 8011860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011864:	da1c      	bge.n	80118a0 <scalbn+0xa8>
 8011866:	a120      	add	r1, pc, #128	; (adr r1, 80118e8 <scalbn+0xf0>)
 8011868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801186c:	e018      	b.n	80118a0 <scalbn+0xa8>
 801186e:	2a00      	cmp	r2, #0
 8011870:	dd08      	ble.n	8011884 <scalbn+0x8c>
 8011872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801187a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801187e:	ec45 4b10 	vmov	d0, r4, r5
 8011882:	bd70      	pop	{r4, r5, r6, pc}
 8011884:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011888:	da19      	bge.n	80118be <scalbn+0xc6>
 801188a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801188e:	429e      	cmp	r6, r3
 8011890:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011894:	dd0a      	ble.n	80118ac <scalbn+0xb4>
 8011896:	a112      	add	r1, pc, #72	; (adr r1, 80118e0 <scalbn+0xe8>)
 8011898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1e2      	bne.n	8011866 <scalbn+0x6e>
 80118a0:	a30f      	add	r3, pc, #60	; (adr r3, 80118e0 <scalbn+0xe8>)
 80118a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a6:	f7ee feb7 	bl	8000618 <__aeabi_dmul>
 80118aa:	e7cb      	b.n	8011844 <scalbn+0x4c>
 80118ac:	a10a      	add	r1, pc, #40	; (adr r1, 80118d8 <scalbn+0xe0>)
 80118ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d0b8      	beq.n	8011828 <scalbn+0x30>
 80118b6:	a10e      	add	r1, pc, #56	; (adr r1, 80118f0 <scalbn+0xf8>)
 80118b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118bc:	e7b4      	b.n	8011828 <scalbn+0x30>
 80118be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118c2:	3236      	adds	r2, #54	; 0x36
 80118c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80118c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80118cc:	4620      	mov	r0, r4
 80118ce:	4b0c      	ldr	r3, [pc, #48]	; (8011900 <scalbn+0x108>)
 80118d0:	2200      	movs	r2, #0
 80118d2:	e7e8      	b.n	80118a6 <scalbn+0xae>
 80118d4:	f3af 8000 	nop.w
 80118d8:	c2f8f359 	.word	0xc2f8f359
 80118dc:	01a56e1f 	.word	0x01a56e1f
 80118e0:	8800759c 	.word	0x8800759c
 80118e4:	7e37e43c 	.word	0x7e37e43c
 80118e8:	8800759c 	.word	0x8800759c
 80118ec:	fe37e43c 	.word	0xfe37e43c
 80118f0:	c2f8f359 	.word	0xc2f8f359
 80118f4:	81a56e1f 	.word	0x81a56e1f
 80118f8:	43500000 	.word	0x43500000
 80118fc:	ffff3cb0 	.word	0xffff3cb0
 8011900:	3c900000 	.word	0x3c900000

08011904 <abort>:
 8011904:	b508      	push	{r3, lr}
 8011906:	2006      	movs	r0, #6
 8011908:	f001 f9ba 	bl	8012c80 <raise>
 801190c:	2001      	movs	r0, #1
 801190e:	f005 f9cb 	bl	8016ca8 <_exit>
	...

08011914 <__errno>:
 8011914:	4b01      	ldr	r3, [pc, #4]	; (801191c <__errno+0x8>)
 8011916:	6818      	ldr	r0, [r3, #0]
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	200000d8 	.word	0x200000d8

08011920 <std>:
 8011920:	2300      	movs	r3, #0
 8011922:	b510      	push	{r4, lr}
 8011924:	4604      	mov	r4, r0
 8011926:	e9c0 3300 	strd	r3, r3, [r0]
 801192a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801192e:	6083      	str	r3, [r0, #8]
 8011930:	8181      	strh	r1, [r0, #12]
 8011932:	6643      	str	r3, [r0, #100]	; 0x64
 8011934:	81c2      	strh	r2, [r0, #14]
 8011936:	6183      	str	r3, [r0, #24]
 8011938:	4619      	mov	r1, r3
 801193a:	2208      	movs	r2, #8
 801193c:	305c      	adds	r0, #92	; 0x5c
 801193e:	f000 f93d 	bl	8011bbc <memset>
 8011942:	4b05      	ldr	r3, [pc, #20]	; (8011958 <std+0x38>)
 8011944:	6263      	str	r3, [r4, #36]	; 0x24
 8011946:	4b05      	ldr	r3, [pc, #20]	; (801195c <std+0x3c>)
 8011948:	62a3      	str	r3, [r4, #40]	; 0x28
 801194a:	4b05      	ldr	r3, [pc, #20]	; (8011960 <std+0x40>)
 801194c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <std+0x44>)
 8011950:	6224      	str	r4, [r4, #32]
 8011952:	6323      	str	r3, [r4, #48]	; 0x30
 8011954:	bd10      	pop	{r4, pc}
 8011956:	bf00      	nop
 8011958:	08012d51 	.word	0x08012d51
 801195c:	08012d77 	.word	0x08012d77
 8011960:	08012daf 	.word	0x08012daf
 8011964:	08012dd3 	.word	0x08012dd3

08011968 <_cleanup_r>:
 8011968:	4901      	ldr	r1, [pc, #4]	; (8011970 <_cleanup_r+0x8>)
 801196a:	f000 b8af 	b.w	8011acc <_fwalk_reent>
 801196e:	bf00      	nop
 8011970:	08014c5d 	.word	0x08014c5d

08011974 <__sfmoreglue>:
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	1e4a      	subs	r2, r1, #1
 8011978:	2568      	movs	r5, #104	; 0x68
 801197a:	4355      	muls	r5, r2
 801197c:	460e      	mov	r6, r1
 801197e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011982:	f000 f973 	bl	8011c6c <_malloc_r>
 8011986:	4604      	mov	r4, r0
 8011988:	b140      	cbz	r0, 801199c <__sfmoreglue+0x28>
 801198a:	2100      	movs	r1, #0
 801198c:	e9c0 1600 	strd	r1, r6, [r0]
 8011990:	300c      	adds	r0, #12
 8011992:	60a0      	str	r0, [r4, #8]
 8011994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011998:	f000 f910 	bl	8011bbc <memset>
 801199c:	4620      	mov	r0, r4
 801199e:	bd70      	pop	{r4, r5, r6, pc}

080119a0 <__sfp_lock_acquire>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__sfp_lock_acquire+0x8>)
 80119a2:	f000 b8d8 	b.w	8011b56 <__retarget_lock_acquire_recursive>
 80119a6:	bf00      	nop
 80119a8:	200064b8 	.word	0x200064b8

080119ac <__sfp_lock_release>:
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__sfp_lock_release+0x8>)
 80119ae:	f000 b8d3 	b.w	8011b58 <__retarget_lock_release_recursive>
 80119b2:	bf00      	nop
 80119b4:	200064b8 	.word	0x200064b8

080119b8 <__sinit_lock_acquire>:
 80119b8:	4801      	ldr	r0, [pc, #4]	; (80119c0 <__sinit_lock_acquire+0x8>)
 80119ba:	f000 b8cc 	b.w	8011b56 <__retarget_lock_acquire_recursive>
 80119be:	bf00      	nop
 80119c0:	200064b3 	.word	0x200064b3

080119c4 <__sinit_lock_release>:
 80119c4:	4801      	ldr	r0, [pc, #4]	; (80119cc <__sinit_lock_release+0x8>)
 80119c6:	f000 b8c7 	b.w	8011b58 <__retarget_lock_release_recursive>
 80119ca:	bf00      	nop
 80119cc:	200064b3 	.word	0x200064b3

080119d0 <__sinit>:
 80119d0:	b510      	push	{r4, lr}
 80119d2:	4604      	mov	r4, r0
 80119d4:	f7ff fff0 	bl	80119b8 <__sinit_lock_acquire>
 80119d8:	69a3      	ldr	r3, [r4, #24]
 80119da:	b11b      	cbz	r3, 80119e4 <__sinit+0x14>
 80119dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e0:	f7ff bff0 	b.w	80119c4 <__sinit_lock_release>
 80119e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119e8:	6523      	str	r3, [r4, #80]	; 0x50
 80119ea:	4b13      	ldr	r3, [pc, #76]	; (8011a38 <__sinit+0x68>)
 80119ec:	4a13      	ldr	r2, [pc, #76]	; (8011a3c <__sinit+0x6c>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80119f2:	42a3      	cmp	r3, r4
 80119f4:	bf04      	itt	eq
 80119f6:	2301      	moveq	r3, #1
 80119f8:	61a3      	streq	r3, [r4, #24]
 80119fa:	4620      	mov	r0, r4
 80119fc:	f000 f820 	bl	8011a40 <__sfp>
 8011a00:	6060      	str	r0, [r4, #4]
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 f81c 	bl	8011a40 <__sfp>
 8011a08:	60a0      	str	r0, [r4, #8]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f000 f818 	bl	8011a40 <__sfp>
 8011a10:	2200      	movs	r2, #0
 8011a12:	60e0      	str	r0, [r4, #12]
 8011a14:	2104      	movs	r1, #4
 8011a16:	6860      	ldr	r0, [r4, #4]
 8011a18:	f7ff ff82 	bl	8011920 <std>
 8011a1c:	68a0      	ldr	r0, [r4, #8]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	2109      	movs	r1, #9
 8011a22:	f7ff ff7d 	bl	8011920 <std>
 8011a26:	68e0      	ldr	r0, [r4, #12]
 8011a28:	2202      	movs	r2, #2
 8011a2a:	2112      	movs	r1, #18
 8011a2c:	f7ff ff78 	bl	8011920 <std>
 8011a30:	2301      	movs	r3, #1
 8011a32:	61a3      	str	r3, [r4, #24]
 8011a34:	e7d2      	b.n	80119dc <__sinit+0xc>
 8011a36:	bf00      	nop
 8011a38:	08018dac 	.word	0x08018dac
 8011a3c:	08011969 	.word	0x08011969

08011a40 <__sfp>:
 8011a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a42:	4607      	mov	r7, r0
 8011a44:	f7ff ffac 	bl	80119a0 <__sfp_lock_acquire>
 8011a48:	4b1e      	ldr	r3, [pc, #120]	; (8011ac4 <__sfp+0x84>)
 8011a4a:	681e      	ldr	r6, [r3, #0]
 8011a4c:	69b3      	ldr	r3, [r6, #24]
 8011a4e:	b913      	cbnz	r3, 8011a56 <__sfp+0x16>
 8011a50:	4630      	mov	r0, r6
 8011a52:	f7ff ffbd 	bl	80119d0 <__sinit>
 8011a56:	3648      	adds	r6, #72	; 0x48
 8011a58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	d503      	bpl.n	8011a68 <__sfp+0x28>
 8011a60:	6833      	ldr	r3, [r6, #0]
 8011a62:	b30b      	cbz	r3, 8011aa8 <__sfp+0x68>
 8011a64:	6836      	ldr	r6, [r6, #0]
 8011a66:	e7f7      	b.n	8011a58 <__sfp+0x18>
 8011a68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a6c:	b9d5      	cbnz	r5, 8011aa4 <__sfp+0x64>
 8011a6e:	4b16      	ldr	r3, [pc, #88]	; (8011ac8 <__sfp+0x88>)
 8011a70:	60e3      	str	r3, [r4, #12]
 8011a72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a76:	6665      	str	r5, [r4, #100]	; 0x64
 8011a78:	f000 f86c 	bl	8011b54 <__retarget_lock_init_recursive>
 8011a7c:	f7ff ff96 	bl	80119ac <__sfp_lock_release>
 8011a80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a88:	6025      	str	r5, [r4, #0]
 8011a8a:	61a5      	str	r5, [r4, #24]
 8011a8c:	2208      	movs	r2, #8
 8011a8e:	4629      	mov	r1, r5
 8011a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a94:	f000 f892 	bl	8011bbc <memset>
 8011a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa4:	3468      	adds	r4, #104	; 0x68
 8011aa6:	e7d9      	b.n	8011a5c <__sfp+0x1c>
 8011aa8:	2104      	movs	r1, #4
 8011aaa:	4638      	mov	r0, r7
 8011aac:	f7ff ff62 	bl	8011974 <__sfmoreglue>
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	6030      	str	r0, [r6, #0]
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d1d5      	bne.n	8011a64 <__sfp+0x24>
 8011ab8:	f7ff ff78 	bl	80119ac <__sfp_lock_release>
 8011abc:	230c      	movs	r3, #12
 8011abe:	603b      	str	r3, [r7, #0]
 8011ac0:	e7ee      	b.n	8011aa0 <__sfp+0x60>
 8011ac2:	bf00      	nop
 8011ac4:	08018dac 	.word	0x08018dac
 8011ac8:	ffff0001 	.word	0xffff0001

08011acc <_fwalk_reent>:
 8011acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	4688      	mov	r8, r1
 8011ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ad8:	2700      	movs	r7, #0
 8011ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ade:	f1b9 0901 	subs.w	r9, r9, #1
 8011ae2:	d505      	bpl.n	8011af0 <_fwalk_reent+0x24>
 8011ae4:	6824      	ldr	r4, [r4, #0]
 8011ae6:	2c00      	cmp	r4, #0
 8011ae8:	d1f7      	bne.n	8011ada <_fwalk_reent+0xe>
 8011aea:	4638      	mov	r0, r7
 8011aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af0:	89ab      	ldrh	r3, [r5, #12]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d907      	bls.n	8011b06 <_fwalk_reent+0x3a>
 8011af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011afa:	3301      	adds	r3, #1
 8011afc:	d003      	beq.n	8011b06 <_fwalk_reent+0x3a>
 8011afe:	4629      	mov	r1, r5
 8011b00:	4630      	mov	r0, r6
 8011b02:	47c0      	blx	r8
 8011b04:	4307      	orrs	r7, r0
 8011b06:	3568      	adds	r5, #104	; 0x68
 8011b08:	e7e9      	b.n	8011ade <_fwalk_reent+0x12>
	...

08011b0c <__libc_init_array>:
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	4d0d      	ldr	r5, [pc, #52]	; (8011b44 <__libc_init_array+0x38>)
 8011b10:	4c0d      	ldr	r4, [pc, #52]	; (8011b48 <__libc_init_array+0x3c>)
 8011b12:	1b64      	subs	r4, r4, r5
 8011b14:	10a4      	asrs	r4, r4, #2
 8011b16:	2600      	movs	r6, #0
 8011b18:	42a6      	cmp	r6, r4
 8011b1a:	d109      	bne.n	8011b30 <__libc_init_array+0x24>
 8011b1c:	4d0b      	ldr	r5, [pc, #44]	; (8011b4c <__libc_init_array+0x40>)
 8011b1e:	4c0c      	ldr	r4, [pc, #48]	; (8011b50 <__libc_init_array+0x44>)
 8011b20:	f005 f8c4 	bl	8016cac <_init>
 8011b24:	1b64      	subs	r4, r4, r5
 8011b26:	10a4      	asrs	r4, r4, #2
 8011b28:	2600      	movs	r6, #0
 8011b2a:	42a6      	cmp	r6, r4
 8011b2c:	d105      	bne.n	8011b3a <__libc_init_array+0x2e>
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}
 8011b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b34:	4798      	blx	r3
 8011b36:	3601      	adds	r6, #1
 8011b38:	e7ee      	b.n	8011b18 <__libc_init_array+0xc>
 8011b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b3e:	4798      	blx	r3
 8011b40:	3601      	adds	r6, #1
 8011b42:	e7f2      	b.n	8011b2a <__libc_init_array+0x1e>
 8011b44:	08019118 	.word	0x08019118
 8011b48:	08019118 	.word	0x08019118
 8011b4c:	08019118 	.word	0x08019118
 8011b50:	08019120 	.word	0x08019120

08011b54 <__retarget_lock_init_recursive>:
 8011b54:	4770      	bx	lr

08011b56 <__retarget_lock_acquire_recursive>:
 8011b56:	4770      	bx	lr

08011b58 <__retarget_lock_release_recursive>:
 8011b58:	4770      	bx	lr
	...

08011b5c <malloc>:
 8011b5c:	4b02      	ldr	r3, [pc, #8]	; (8011b68 <malloc+0xc>)
 8011b5e:	4601      	mov	r1, r0
 8011b60:	6818      	ldr	r0, [r3, #0]
 8011b62:	f000 b883 	b.w	8011c6c <_malloc_r>
 8011b66:	bf00      	nop
 8011b68:	200000d8 	.word	0x200000d8

08011b6c <memcpy>:
 8011b6c:	440a      	add	r2, r1
 8011b6e:	4291      	cmp	r1, r2
 8011b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b74:	d100      	bne.n	8011b78 <memcpy+0xc>
 8011b76:	4770      	bx	lr
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b82:	4291      	cmp	r1, r2
 8011b84:	d1f9      	bne.n	8011b7a <memcpy+0xe>
 8011b86:	bd10      	pop	{r4, pc}

08011b88 <memmove>:
 8011b88:	4288      	cmp	r0, r1
 8011b8a:	b510      	push	{r4, lr}
 8011b8c:	eb01 0402 	add.w	r4, r1, r2
 8011b90:	d902      	bls.n	8011b98 <memmove+0x10>
 8011b92:	4284      	cmp	r4, r0
 8011b94:	4623      	mov	r3, r4
 8011b96:	d807      	bhi.n	8011ba8 <memmove+0x20>
 8011b98:	1e43      	subs	r3, r0, #1
 8011b9a:	42a1      	cmp	r1, r4
 8011b9c:	d008      	beq.n	8011bb0 <memmove+0x28>
 8011b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ba6:	e7f8      	b.n	8011b9a <memmove+0x12>
 8011ba8:	4402      	add	r2, r0
 8011baa:	4601      	mov	r1, r0
 8011bac:	428a      	cmp	r2, r1
 8011bae:	d100      	bne.n	8011bb2 <memmove+0x2a>
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bba:	e7f7      	b.n	8011bac <memmove+0x24>

08011bbc <memset>:
 8011bbc:	4402      	add	r2, r0
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d100      	bne.n	8011bc6 <memset+0xa>
 8011bc4:	4770      	bx	lr
 8011bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8011bca:	e7f9      	b.n	8011bc0 <memset+0x4>

08011bcc <_free_r>:
 8011bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bce:	2900      	cmp	r1, #0
 8011bd0:	d048      	beq.n	8011c64 <_free_r+0x98>
 8011bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bd6:	9001      	str	r0, [sp, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f1a1 0404 	sub.w	r4, r1, #4
 8011bde:	bfb8      	it	lt
 8011be0:	18e4      	addlt	r4, r4, r3
 8011be2:	f003 fc85 	bl	80154f0 <__malloc_lock>
 8011be6:	4a20      	ldr	r2, [pc, #128]	; (8011c68 <_free_r+0x9c>)
 8011be8:	9801      	ldr	r0, [sp, #4]
 8011bea:	6813      	ldr	r3, [r2, #0]
 8011bec:	4615      	mov	r5, r2
 8011bee:	b933      	cbnz	r3, 8011bfe <_free_r+0x32>
 8011bf0:	6063      	str	r3, [r4, #4]
 8011bf2:	6014      	str	r4, [r2, #0]
 8011bf4:	b003      	add	sp, #12
 8011bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bfa:	f003 bc7f 	b.w	80154fc <__malloc_unlock>
 8011bfe:	42a3      	cmp	r3, r4
 8011c00:	d90b      	bls.n	8011c1a <_free_r+0x4e>
 8011c02:	6821      	ldr	r1, [r4, #0]
 8011c04:	1862      	adds	r2, r4, r1
 8011c06:	4293      	cmp	r3, r2
 8011c08:	bf04      	itt	eq
 8011c0a:	681a      	ldreq	r2, [r3, #0]
 8011c0c:	685b      	ldreq	r3, [r3, #4]
 8011c0e:	6063      	str	r3, [r4, #4]
 8011c10:	bf04      	itt	eq
 8011c12:	1852      	addeq	r2, r2, r1
 8011c14:	6022      	streq	r2, [r4, #0]
 8011c16:	602c      	str	r4, [r5, #0]
 8011c18:	e7ec      	b.n	8011bf4 <_free_r+0x28>
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	b10b      	cbz	r3, 8011c24 <_free_r+0x58>
 8011c20:	42a3      	cmp	r3, r4
 8011c22:	d9fa      	bls.n	8011c1a <_free_r+0x4e>
 8011c24:	6811      	ldr	r1, [r2, #0]
 8011c26:	1855      	adds	r5, r2, r1
 8011c28:	42a5      	cmp	r5, r4
 8011c2a:	d10b      	bne.n	8011c44 <_free_r+0x78>
 8011c2c:	6824      	ldr	r4, [r4, #0]
 8011c2e:	4421      	add	r1, r4
 8011c30:	1854      	adds	r4, r2, r1
 8011c32:	42a3      	cmp	r3, r4
 8011c34:	6011      	str	r1, [r2, #0]
 8011c36:	d1dd      	bne.n	8011bf4 <_free_r+0x28>
 8011c38:	681c      	ldr	r4, [r3, #0]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	6053      	str	r3, [r2, #4]
 8011c3e:	4421      	add	r1, r4
 8011c40:	6011      	str	r1, [r2, #0]
 8011c42:	e7d7      	b.n	8011bf4 <_free_r+0x28>
 8011c44:	d902      	bls.n	8011c4c <_free_r+0x80>
 8011c46:	230c      	movs	r3, #12
 8011c48:	6003      	str	r3, [r0, #0]
 8011c4a:	e7d3      	b.n	8011bf4 <_free_r+0x28>
 8011c4c:	6825      	ldr	r5, [r4, #0]
 8011c4e:	1961      	adds	r1, r4, r5
 8011c50:	428b      	cmp	r3, r1
 8011c52:	bf04      	itt	eq
 8011c54:	6819      	ldreq	r1, [r3, #0]
 8011c56:	685b      	ldreq	r3, [r3, #4]
 8011c58:	6063      	str	r3, [r4, #4]
 8011c5a:	bf04      	itt	eq
 8011c5c:	1949      	addeq	r1, r1, r5
 8011c5e:	6021      	streq	r1, [r4, #0]
 8011c60:	6054      	str	r4, [r2, #4]
 8011c62:	e7c7      	b.n	8011bf4 <_free_r+0x28>
 8011c64:	b003      	add	sp, #12
 8011c66:	bd30      	pop	{r4, r5, pc}
 8011c68:	20005a3c 	.word	0x20005a3c

08011c6c <_malloc_r>:
 8011c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6e:	1ccd      	adds	r5, r1, #3
 8011c70:	f025 0503 	bic.w	r5, r5, #3
 8011c74:	3508      	adds	r5, #8
 8011c76:	2d0c      	cmp	r5, #12
 8011c78:	bf38      	it	cc
 8011c7a:	250c      	movcc	r5, #12
 8011c7c:	2d00      	cmp	r5, #0
 8011c7e:	4606      	mov	r6, r0
 8011c80:	db01      	blt.n	8011c86 <_malloc_r+0x1a>
 8011c82:	42a9      	cmp	r1, r5
 8011c84:	d903      	bls.n	8011c8e <_malloc_r+0x22>
 8011c86:	230c      	movs	r3, #12
 8011c88:	6033      	str	r3, [r6, #0]
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c8e:	f003 fc2f 	bl	80154f0 <__malloc_lock>
 8011c92:	4921      	ldr	r1, [pc, #132]	; (8011d18 <_malloc_r+0xac>)
 8011c94:	680a      	ldr	r2, [r1, #0]
 8011c96:	4614      	mov	r4, r2
 8011c98:	b99c      	cbnz	r4, 8011cc2 <_malloc_r+0x56>
 8011c9a:	4f20      	ldr	r7, [pc, #128]	; (8011d1c <_malloc_r+0xb0>)
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	b923      	cbnz	r3, 8011caa <_malloc_r+0x3e>
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f000 ffae 	bl	8012c04 <_sbrk_r>
 8011ca8:	6038      	str	r0, [r7, #0]
 8011caa:	4629      	mov	r1, r5
 8011cac:	4630      	mov	r0, r6
 8011cae:	f000 ffa9 	bl	8012c04 <_sbrk_r>
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	d123      	bne.n	8011cfe <_malloc_r+0x92>
 8011cb6:	230c      	movs	r3, #12
 8011cb8:	6033      	str	r3, [r6, #0]
 8011cba:	4630      	mov	r0, r6
 8011cbc:	f003 fc1e 	bl	80154fc <__malloc_unlock>
 8011cc0:	e7e3      	b.n	8011c8a <_malloc_r+0x1e>
 8011cc2:	6823      	ldr	r3, [r4, #0]
 8011cc4:	1b5b      	subs	r3, r3, r5
 8011cc6:	d417      	bmi.n	8011cf8 <_malloc_r+0x8c>
 8011cc8:	2b0b      	cmp	r3, #11
 8011cca:	d903      	bls.n	8011cd4 <_malloc_r+0x68>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	441c      	add	r4, r3
 8011cd0:	6025      	str	r5, [r4, #0]
 8011cd2:	e004      	b.n	8011cde <_malloc_r+0x72>
 8011cd4:	6863      	ldr	r3, [r4, #4]
 8011cd6:	42a2      	cmp	r2, r4
 8011cd8:	bf0c      	ite	eq
 8011cda:	600b      	streq	r3, [r1, #0]
 8011cdc:	6053      	strne	r3, [r2, #4]
 8011cde:	4630      	mov	r0, r6
 8011ce0:	f003 fc0c 	bl	80154fc <__malloc_unlock>
 8011ce4:	f104 000b 	add.w	r0, r4, #11
 8011ce8:	1d23      	adds	r3, r4, #4
 8011cea:	f020 0007 	bic.w	r0, r0, #7
 8011cee:	1ac2      	subs	r2, r0, r3
 8011cf0:	d0cc      	beq.n	8011c8c <_malloc_r+0x20>
 8011cf2:	1a1b      	subs	r3, r3, r0
 8011cf4:	50a3      	str	r3, [r4, r2]
 8011cf6:	e7c9      	b.n	8011c8c <_malloc_r+0x20>
 8011cf8:	4622      	mov	r2, r4
 8011cfa:	6864      	ldr	r4, [r4, #4]
 8011cfc:	e7cc      	b.n	8011c98 <_malloc_r+0x2c>
 8011cfe:	1cc4      	adds	r4, r0, #3
 8011d00:	f024 0403 	bic.w	r4, r4, #3
 8011d04:	42a0      	cmp	r0, r4
 8011d06:	d0e3      	beq.n	8011cd0 <_malloc_r+0x64>
 8011d08:	1a21      	subs	r1, r4, r0
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f000 ff7a 	bl	8012c04 <_sbrk_r>
 8011d10:	3001      	adds	r0, #1
 8011d12:	d1dd      	bne.n	8011cd0 <_malloc_r+0x64>
 8011d14:	e7cf      	b.n	8011cb6 <_malloc_r+0x4a>
 8011d16:	bf00      	nop
 8011d18:	20005a3c 	.word	0x20005a3c
 8011d1c:	20005a40 	.word	0x20005a40

08011d20 <__cvt>:
 8011d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d24:	ec55 4b10 	vmov	r4, r5, d0
 8011d28:	2d00      	cmp	r5, #0
 8011d2a:	460e      	mov	r6, r1
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	462b      	mov	r3, r5
 8011d30:	bfbb      	ittet	lt
 8011d32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011d36:	461d      	movlt	r5, r3
 8011d38:	2300      	movge	r3, #0
 8011d3a:	232d      	movlt	r3, #45	; 0x2d
 8011d3c:	700b      	strb	r3, [r1, #0]
 8011d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011d44:	4691      	mov	r9, r2
 8011d46:	f023 0820 	bic.w	r8, r3, #32
 8011d4a:	bfbc      	itt	lt
 8011d4c:	4622      	movlt	r2, r4
 8011d4e:	4614      	movlt	r4, r2
 8011d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011d54:	d005      	beq.n	8011d62 <__cvt+0x42>
 8011d56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011d5a:	d100      	bne.n	8011d5e <__cvt+0x3e>
 8011d5c:	3601      	adds	r6, #1
 8011d5e:	2102      	movs	r1, #2
 8011d60:	e000      	b.n	8011d64 <__cvt+0x44>
 8011d62:	2103      	movs	r1, #3
 8011d64:	ab03      	add	r3, sp, #12
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	ab02      	add	r3, sp, #8
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	ec45 4b10 	vmov	d0, r4, r5
 8011d70:	4653      	mov	r3, sl
 8011d72:	4632      	mov	r2, r6
 8011d74:	f002 f900 	bl	8013f78 <_dtoa_r>
 8011d78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011d7c:	4607      	mov	r7, r0
 8011d7e:	d102      	bne.n	8011d86 <__cvt+0x66>
 8011d80:	f019 0f01 	tst.w	r9, #1
 8011d84:	d022      	beq.n	8011dcc <__cvt+0xac>
 8011d86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011d8a:	eb07 0906 	add.w	r9, r7, r6
 8011d8e:	d110      	bne.n	8011db2 <__cvt+0x92>
 8011d90:	783b      	ldrb	r3, [r7, #0]
 8011d92:	2b30      	cmp	r3, #48	; 0x30
 8011d94:	d10a      	bne.n	8011dac <__cvt+0x8c>
 8011d96:	2200      	movs	r2, #0
 8011d98:	2300      	movs	r3, #0
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	f7ee fea3 	bl	8000ae8 <__aeabi_dcmpeq>
 8011da2:	b918      	cbnz	r0, 8011dac <__cvt+0x8c>
 8011da4:	f1c6 0601 	rsb	r6, r6, #1
 8011da8:	f8ca 6000 	str.w	r6, [sl]
 8011dac:	f8da 3000 	ldr.w	r3, [sl]
 8011db0:	4499      	add	r9, r3
 8011db2:	2200      	movs	r2, #0
 8011db4:	2300      	movs	r3, #0
 8011db6:	4620      	mov	r0, r4
 8011db8:	4629      	mov	r1, r5
 8011dba:	f7ee fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 8011dbe:	b108      	cbz	r0, 8011dc4 <__cvt+0xa4>
 8011dc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8011dc4:	2230      	movs	r2, #48	; 0x30
 8011dc6:	9b03      	ldr	r3, [sp, #12]
 8011dc8:	454b      	cmp	r3, r9
 8011dca:	d307      	bcc.n	8011ddc <__cvt+0xbc>
 8011dcc:	9b03      	ldr	r3, [sp, #12]
 8011dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dd0:	1bdb      	subs	r3, r3, r7
 8011dd2:	4638      	mov	r0, r7
 8011dd4:	6013      	str	r3, [r2, #0]
 8011dd6:	b004      	add	sp, #16
 8011dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ddc:	1c59      	adds	r1, r3, #1
 8011dde:	9103      	str	r1, [sp, #12]
 8011de0:	701a      	strb	r2, [r3, #0]
 8011de2:	e7f0      	b.n	8011dc6 <__cvt+0xa6>

08011de4 <__exponent>:
 8011de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011de6:	4603      	mov	r3, r0
 8011de8:	2900      	cmp	r1, #0
 8011dea:	bfb8      	it	lt
 8011dec:	4249      	neglt	r1, r1
 8011dee:	f803 2b02 	strb.w	r2, [r3], #2
 8011df2:	bfb4      	ite	lt
 8011df4:	222d      	movlt	r2, #45	; 0x2d
 8011df6:	222b      	movge	r2, #43	; 0x2b
 8011df8:	2909      	cmp	r1, #9
 8011dfa:	7042      	strb	r2, [r0, #1]
 8011dfc:	dd2a      	ble.n	8011e54 <__exponent+0x70>
 8011dfe:	f10d 0407 	add.w	r4, sp, #7
 8011e02:	46a4      	mov	ip, r4
 8011e04:	270a      	movs	r7, #10
 8011e06:	46a6      	mov	lr, r4
 8011e08:	460a      	mov	r2, r1
 8011e0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011e0e:	fb07 1516 	mls	r5, r7, r6, r1
 8011e12:	3530      	adds	r5, #48	; 0x30
 8011e14:	2a63      	cmp	r2, #99	; 0x63
 8011e16:	f104 34ff 	add.w	r4, r4, #4294967295
 8011e1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011e1e:	4631      	mov	r1, r6
 8011e20:	dcf1      	bgt.n	8011e06 <__exponent+0x22>
 8011e22:	3130      	adds	r1, #48	; 0x30
 8011e24:	f1ae 0502 	sub.w	r5, lr, #2
 8011e28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011e2c:	1c44      	adds	r4, r0, #1
 8011e2e:	4629      	mov	r1, r5
 8011e30:	4561      	cmp	r1, ip
 8011e32:	d30a      	bcc.n	8011e4a <__exponent+0x66>
 8011e34:	f10d 0209 	add.w	r2, sp, #9
 8011e38:	eba2 020e 	sub.w	r2, r2, lr
 8011e3c:	4565      	cmp	r5, ip
 8011e3e:	bf88      	it	hi
 8011e40:	2200      	movhi	r2, #0
 8011e42:	4413      	add	r3, r2
 8011e44:	1a18      	subs	r0, r3, r0
 8011e46:	b003      	add	sp, #12
 8011e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011e52:	e7ed      	b.n	8011e30 <__exponent+0x4c>
 8011e54:	2330      	movs	r3, #48	; 0x30
 8011e56:	3130      	adds	r1, #48	; 0x30
 8011e58:	7083      	strb	r3, [r0, #2]
 8011e5a:	70c1      	strb	r1, [r0, #3]
 8011e5c:	1d03      	adds	r3, r0, #4
 8011e5e:	e7f1      	b.n	8011e44 <__exponent+0x60>

08011e60 <_printf_float>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	ed2d 8b02 	vpush	{d8}
 8011e68:	b08d      	sub	sp, #52	; 0x34
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011e70:	4616      	mov	r6, r2
 8011e72:	461f      	mov	r7, r3
 8011e74:	4605      	mov	r5, r0
 8011e76:	f003 faaf 	bl	80153d8 <_localeconv_r>
 8011e7a:	f8d0 a000 	ldr.w	sl, [r0]
 8011e7e:	4650      	mov	r0, sl
 8011e80:	f7ee f9b6 	bl	80001f0 <strlen>
 8011e84:	2300      	movs	r3, #0
 8011e86:	930a      	str	r3, [sp, #40]	; 0x28
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	9305      	str	r3, [sp, #20]
 8011e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011e94:	3307      	adds	r3, #7
 8011e96:	f023 0307 	bic.w	r3, r3, #7
 8011e9a:	f103 0208 	add.w	r2, r3, #8
 8011e9e:	f8c8 2000 	str.w	r2, [r8]
 8011ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011eaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011eae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011eb2:	9307      	str	r3, [sp, #28]
 8011eb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8011eb8:	ee08 0a10 	vmov	s16, r0
 8011ebc:	4b9f      	ldr	r3, [pc, #636]	; (801213c <_printf_float+0x2dc>)
 8011ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec6:	f7ee fe41 	bl	8000b4c <__aeabi_dcmpun>
 8011eca:	bb88      	cbnz	r0, 8011f30 <_printf_float+0xd0>
 8011ecc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ed0:	4b9a      	ldr	r3, [pc, #616]	; (801213c <_printf_float+0x2dc>)
 8011ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed6:	f7ee fe1b 	bl	8000b10 <__aeabi_dcmple>
 8011eda:	bb48      	cbnz	r0, 8011f30 <_printf_float+0xd0>
 8011edc:	2200      	movs	r2, #0
 8011ede:	2300      	movs	r3, #0
 8011ee0:	4640      	mov	r0, r8
 8011ee2:	4649      	mov	r1, r9
 8011ee4:	f7ee fe0a 	bl	8000afc <__aeabi_dcmplt>
 8011ee8:	b110      	cbz	r0, 8011ef0 <_printf_float+0x90>
 8011eea:	232d      	movs	r3, #45	; 0x2d
 8011eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ef0:	4b93      	ldr	r3, [pc, #588]	; (8012140 <_printf_float+0x2e0>)
 8011ef2:	4894      	ldr	r0, [pc, #592]	; (8012144 <_printf_float+0x2e4>)
 8011ef4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011ef8:	bf94      	ite	ls
 8011efa:	4698      	movls	r8, r3
 8011efc:	4680      	movhi	r8, r0
 8011efe:	2303      	movs	r3, #3
 8011f00:	6123      	str	r3, [r4, #16]
 8011f02:	9b05      	ldr	r3, [sp, #20]
 8011f04:	f023 0204 	bic.w	r2, r3, #4
 8011f08:	6022      	str	r2, [r4, #0]
 8011f0a:	f04f 0900 	mov.w	r9, #0
 8011f0e:	9700      	str	r7, [sp, #0]
 8011f10:	4633      	mov	r3, r6
 8011f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8011f14:	4621      	mov	r1, r4
 8011f16:	4628      	mov	r0, r5
 8011f18:	f000 f9d8 	bl	80122cc <_printf_common>
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	f040 8090 	bne.w	8012042 <_printf_float+0x1e2>
 8011f22:	f04f 30ff 	mov.w	r0, #4294967295
 8011f26:	b00d      	add	sp, #52	; 0x34
 8011f28:	ecbd 8b02 	vpop	{d8}
 8011f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f30:	4642      	mov	r2, r8
 8011f32:	464b      	mov	r3, r9
 8011f34:	4640      	mov	r0, r8
 8011f36:	4649      	mov	r1, r9
 8011f38:	f7ee fe08 	bl	8000b4c <__aeabi_dcmpun>
 8011f3c:	b140      	cbz	r0, 8011f50 <_printf_float+0xf0>
 8011f3e:	464b      	mov	r3, r9
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	bfbc      	itt	lt
 8011f44:	232d      	movlt	r3, #45	; 0x2d
 8011f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011f4a:	487f      	ldr	r0, [pc, #508]	; (8012148 <_printf_float+0x2e8>)
 8011f4c:	4b7f      	ldr	r3, [pc, #508]	; (801214c <_printf_float+0x2ec>)
 8011f4e:	e7d1      	b.n	8011ef4 <_printf_float+0x94>
 8011f50:	6863      	ldr	r3, [r4, #4]
 8011f52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011f56:	9206      	str	r2, [sp, #24]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	d13f      	bne.n	8011fdc <_printf_float+0x17c>
 8011f5c:	2306      	movs	r3, #6
 8011f5e:	6063      	str	r3, [r4, #4]
 8011f60:	9b05      	ldr	r3, [sp, #20]
 8011f62:	6861      	ldr	r1, [r4, #4]
 8011f64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011f68:	2300      	movs	r3, #0
 8011f6a:	9303      	str	r3, [sp, #12]
 8011f6c:	ab0a      	add	r3, sp, #40	; 0x28
 8011f6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011f72:	ab09      	add	r3, sp, #36	; 0x24
 8011f74:	ec49 8b10 	vmov	d0, r8, r9
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	6022      	str	r2, [r4, #0]
 8011f7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011f80:	4628      	mov	r0, r5
 8011f82:	f7ff fecd 	bl	8011d20 <__cvt>
 8011f86:	9b06      	ldr	r3, [sp, #24]
 8011f88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f8a:	2b47      	cmp	r3, #71	; 0x47
 8011f8c:	4680      	mov	r8, r0
 8011f8e:	d108      	bne.n	8011fa2 <_printf_float+0x142>
 8011f90:	1cc8      	adds	r0, r1, #3
 8011f92:	db02      	blt.n	8011f9a <_printf_float+0x13a>
 8011f94:	6863      	ldr	r3, [r4, #4]
 8011f96:	4299      	cmp	r1, r3
 8011f98:	dd41      	ble.n	801201e <_printf_float+0x1be>
 8011f9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011f9e:	fa5f fb8b 	uxtb.w	fp, fp
 8011fa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011fa6:	d820      	bhi.n	8011fea <_printf_float+0x18a>
 8011fa8:	3901      	subs	r1, #1
 8011faa:	465a      	mov	r2, fp
 8011fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8011fb2:	f7ff ff17 	bl	8011de4 <__exponent>
 8011fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fb8:	1813      	adds	r3, r2, r0
 8011fba:	2a01      	cmp	r2, #1
 8011fbc:	4681      	mov	r9, r0
 8011fbe:	6123      	str	r3, [r4, #16]
 8011fc0:	dc02      	bgt.n	8011fc8 <_printf_float+0x168>
 8011fc2:	6822      	ldr	r2, [r4, #0]
 8011fc4:	07d2      	lsls	r2, r2, #31
 8011fc6:	d501      	bpl.n	8011fcc <_printf_float+0x16c>
 8011fc8:	3301      	adds	r3, #1
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d09c      	beq.n	8011f0e <_printf_float+0xae>
 8011fd4:	232d      	movs	r3, #45	; 0x2d
 8011fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fda:	e798      	b.n	8011f0e <_printf_float+0xae>
 8011fdc:	9a06      	ldr	r2, [sp, #24]
 8011fde:	2a47      	cmp	r2, #71	; 0x47
 8011fe0:	d1be      	bne.n	8011f60 <_printf_float+0x100>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d1bc      	bne.n	8011f60 <_printf_float+0x100>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	e7b9      	b.n	8011f5e <_printf_float+0xfe>
 8011fea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011fee:	d118      	bne.n	8012022 <_printf_float+0x1c2>
 8011ff0:	2900      	cmp	r1, #0
 8011ff2:	6863      	ldr	r3, [r4, #4]
 8011ff4:	dd0b      	ble.n	801200e <_printf_float+0x1ae>
 8011ff6:	6121      	str	r1, [r4, #16]
 8011ff8:	b913      	cbnz	r3, 8012000 <_printf_float+0x1a0>
 8011ffa:	6822      	ldr	r2, [r4, #0]
 8011ffc:	07d0      	lsls	r0, r2, #31
 8011ffe:	d502      	bpl.n	8012006 <_printf_float+0x1a6>
 8012000:	3301      	adds	r3, #1
 8012002:	440b      	add	r3, r1
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	65a1      	str	r1, [r4, #88]	; 0x58
 8012008:	f04f 0900 	mov.w	r9, #0
 801200c:	e7de      	b.n	8011fcc <_printf_float+0x16c>
 801200e:	b913      	cbnz	r3, 8012016 <_printf_float+0x1b6>
 8012010:	6822      	ldr	r2, [r4, #0]
 8012012:	07d2      	lsls	r2, r2, #31
 8012014:	d501      	bpl.n	801201a <_printf_float+0x1ba>
 8012016:	3302      	adds	r3, #2
 8012018:	e7f4      	b.n	8012004 <_printf_float+0x1a4>
 801201a:	2301      	movs	r3, #1
 801201c:	e7f2      	b.n	8012004 <_printf_float+0x1a4>
 801201e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012024:	4299      	cmp	r1, r3
 8012026:	db05      	blt.n	8012034 <_printf_float+0x1d4>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	6121      	str	r1, [r4, #16]
 801202c:	07d8      	lsls	r0, r3, #31
 801202e:	d5ea      	bpl.n	8012006 <_printf_float+0x1a6>
 8012030:	1c4b      	adds	r3, r1, #1
 8012032:	e7e7      	b.n	8012004 <_printf_float+0x1a4>
 8012034:	2900      	cmp	r1, #0
 8012036:	bfd4      	ite	le
 8012038:	f1c1 0202 	rsble	r2, r1, #2
 801203c:	2201      	movgt	r2, #1
 801203e:	4413      	add	r3, r2
 8012040:	e7e0      	b.n	8012004 <_printf_float+0x1a4>
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	055a      	lsls	r2, r3, #21
 8012046:	d407      	bmi.n	8012058 <_printf_float+0x1f8>
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	4642      	mov	r2, r8
 801204c:	4631      	mov	r1, r6
 801204e:	4628      	mov	r0, r5
 8012050:	47b8      	blx	r7
 8012052:	3001      	adds	r0, #1
 8012054:	d12c      	bne.n	80120b0 <_printf_float+0x250>
 8012056:	e764      	b.n	8011f22 <_printf_float+0xc2>
 8012058:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801205c:	f240 80e0 	bls.w	8012220 <_printf_float+0x3c0>
 8012060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012064:	2200      	movs	r2, #0
 8012066:	2300      	movs	r3, #0
 8012068:	f7ee fd3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801206c:	2800      	cmp	r0, #0
 801206e:	d034      	beq.n	80120da <_printf_float+0x27a>
 8012070:	4a37      	ldr	r2, [pc, #220]	; (8012150 <_printf_float+0x2f0>)
 8012072:	2301      	movs	r3, #1
 8012074:	4631      	mov	r1, r6
 8012076:	4628      	mov	r0, r5
 8012078:	47b8      	blx	r7
 801207a:	3001      	adds	r0, #1
 801207c:	f43f af51 	beq.w	8011f22 <_printf_float+0xc2>
 8012080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012084:	429a      	cmp	r2, r3
 8012086:	db02      	blt.n	801208e <_printf_float+0x22e>
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	07d8      	lsls	r0, r3, #31
 801208c:	d510      	bpl.n	80120b0 <_printf_float+0x250>
 801208e:	ee18 3a10 	vmov	r3, s16
 8012092:	4652      	mov	r2, sl
 8012094:	4631      	mov	r1, r6
 8012096:	4628      	mov	r0, r5
 8012098:	47b8      	blx	r7
 801209a:	3001      	adds	r0, #1
 801209c:	f43f af41 	beq.w	8011f22 <_printf_float+0xc2>
 80120a0:	f04f 0800 	mov.w	r8, #0
 80120a4:	f104 091a 	add.w	r9, r4, #26
 80120a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120aa:	3b01      	subs	r3, #1
 80120ac:	4543      	cmp	r3, r8
 80120ae:	dc09      	bgt.n	80120c4 <_printf_float+0x264>
 80120b0:	6823      	ldr	r3, [r4, #0]
 80120b2:	079b      	lsls	r3, r3, #30
 80120b4:	f100 8105 	bmi.w	80122c2 <_printf_float+0x462>
 80120b8:	68e0      	ldr	r0, [r4, #12]
 80120ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120bc:	4298      	cmp	r0, r3
 80120be:	bfb8      	it	lt
 80120c0:	4618      	movlt	r0, r3
 80120c2:	e730      	b.n	8011f26 <_printf_float+0xc6>
 80120c4:	2301      	movs	r3, #1
 80120c6:	464a      	mov	r2, r9
 80120c8:	4631      	mov	r1, r6
 80120ca:	4628      	mov	r0, r5
 80120cc:	47b8      	blx	r7
 80120ce:	3001      	adds	r0, #1
 80120d0:	f43f af27 	beq.w	8011f22 <_printf_float+0xc2>
 80120d4:	f108 0801 	add.w	r8, r8, #1
 80120d8:	e7e6      	b.n	80120a8 <_printf_float+0x248>
 80120da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dc39      	bgt.n	8012154 <_printf_float+0x2f4>
 80120e0:	4a1b      	ldr	r2, [pc, #108]	; (8012150 <_printf_float+0x2f0>)
 80120e2:	2301      	movs	r3, #1
 80120e4:	4631      	mov	r1, r6
 80120e6:	4628      	mov	r0, r5
 80120e8:	47b8      	blx	r7
 80120ea:	3001      	adds	r0, #1
 80120ec:	f43f af19 	beq.w	8011f22 <_printf_float+0xc2>
 80120f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120f4:	4313      	orrs	r3, r2
 80120f6:	d102      	bne.n	80120fe <_printf_float+0x29e>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	07d9      	lsls	r1, r3, #31
 80120fc:	d5d8      	bpl.n	80120b0 <_printf_float+0x250>
 80120fe:	ee18 3a10 	vmov	r3, s16
 8012102:	4652      	mov	r2, sl
 8012104:	4631      	mov	r1, r6
 8012106:	4628      	mov	r0, r5
 8012108:	47b8      	blx	r7
 801210a:	3001      	adds	r0, #1
 801210c:	f43f af09 	beq.w	8011f22 <_printf_float+0xc2>
 8012110:	f04f 0900 	mov.w	r9, #0
 8012114:	f104 0a1a 	add.w	sl, r4, #26
 8012118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801211a:	425b      	negs	r3, r3
 801211c:	454b      	cmp	r3, r9
 801211e:	dc01      	bgt.n	8012124 <_printf_float+0x2c4>
 8012120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012122:	e792      	b.n	801204a <_printf_float+0x1ea>
 8012124:	2301      	movs	r3, #1
 8012126:	4652      	mov	r2, sl
 8012128:	4631      	mov	r1, r6
 801212a:	4628      	mov	r0, r5
 801212c:	47b8      	blx	r7
 801212e:	3001      	adds	r0, #1
 8012130:	f43f aef7 	beq.w	8011f22 <_printf_float+0xc2>
 8012134:	f109 0901 	add.w	r9, r9, #1
 8012138:	e7ee      	b.n	8012118 <_printf_float+0x2b8>
 801213a:	bf00      	nop
 801213c:	7fefffff 	.word	0x7fefffff
 8012140:	08018db0 	.word	0x08018db0
 8012144:	08018db4 	.word	0x08018db4
 8012148:	08018dbc 	.word	0x08018dbc
 801214c:	08018db8 	.word	0x08018db8
 8012150:	080190f9 	.word	0x080190f9
 8012154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012158:	429a      	cmp	r2, r3
 801215a:	bfa8      	it	ge
 801215c:	461a      	movge	r2, r3
 801215e:	2a00      	cmp	r2, #0
 8012160:	4691      	mov	r9, r2
 8012162:	dc37      	bgt.n	80121d4 <_printf_float+0x374>
 8012164:	f04f 0b00 	mov.w	fp, #0
 8012168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801216c:	f104 021a 	add.w	r2, r4, #26
 8012170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012172:	9305      	str	r3, [sp, #20]
 8012174:	eba3 0309 	sub.w	r3, r3, r9
 8012178:	455b      	cmp	r3, fp
 801217a:	dc33      	bgt.n	80121e4 <_printf_float+0x384>
 801217c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012180:	429a      	cmp	r2, r3
 8012182:	db3b      	blt.n	80121fc <_printf_float+0x39c>
 8012184:	6823      	ldr	r3, [r4, #0]
 8012186:	07da      	lsls	r2, r3, #31
 8012188:	d438      	bmi.n	80121fc <_printf_float+0x39c>
 801218a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801218c:	9b05      	ldr	r3, [sp, #20]
 801218e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	eba2 0901 	sub.w	r9, r2, r1
 8012196:	4599      	cmp	r9, r3
 8012198:	bfa8      	it	ge
 801219a:	4699      	movge	r9, r3
 801219c:	f1b9 0f00 	cmp.w	r9, #0
 80121a0:	dc35      	bgt.n	801220e <_printf_float+0x3ae>
 80121a2:	f04f 0800 	mov.w	r8, #0
 80121a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121aa:	f104 0a1a 	add.w	sl, r4, #26
 80121ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121b2:	1a9b      	subs	r3, r3, r2
 80121b4:	eba3 0309 	sub.w	r3, r3, r9
 80121b8:	4543      	cmp	r3, r8
 80121ba:	f77f af79 	ble.w	80120b0 <_printf_float+0x250>
 80121be:	2301      	movs	r3, #1
 80121c0:	4652      	mov	r2, sl
 80121c2:	4631      	mov	r1, r6
 80121c4:	4628      	mov	r0, r5
 80121c6:	47b8      	blx	r7
 80121c8:	3001      	adds	r0, #1
 80121ca:	f43f aeaa 	beq.w	8011f22 <_printf_float+0xc2>
 80121ce:	f108 0801 	add.w	r8, r8, #1
 80121d2:	e7ec      	b.n	80121ae <_printf_float+0x34e>
 80121d4:	4613      	mov	r3, r2
 80121d6:	4631      	mov	r1, r6
 80121d8:	4642      	mov	r2, r8
 80121da:	4628      	mov	r0, r5
 80121dc:	47b8      	blx	r7
 80121de:	3001      	adds	r0, #1
 80121e0:	d1c0      	bne.n	8012164 <_printf_float+0x304>
 80121e2:	e69e      	b.n	8011f22 <_printf_float+0xc2>
 80121e4:	2301      	movs	r3, #1
 80121e6:	4631      	mov	r1, r6
 80121e8:	4628      	mov	r0, r5
 80121ea:	9205      	str	r2, [sp, #20]
 80121ec:	47b8      	blx	r7
 80121ee:	3001      	adds	r0, #1
 80121f0:	f43f ae97 	beq.w	8011f22 <_printf_float+0xc2>
 80121f4:	9a05      	ldr	r2, [sp, #20]
 80121f6:	f10b 0b01 	add.w	fp, fp, #1
 80121fa:	e7b9      	b.n	8012170 <_printf_float+0x310>
 80121fc:	ee18 3a10 	vmov	r3, s16
 8012200:	4652      	mov	r2, sl
 8012202:	4631      	mov	r1, r6
 8012204:	4628      	mov	r0, r5
 8012206:	47b8      	blx	r7
 8012208:	3001      	adds	r0, #1
 801220a:	d1be      	bne.n	801218a <_printf_float+0x32a>
 801220c:	e689      	b.n	8011f22 <_printf_float+0xc2>
 801220e:	9a05      	ldr	r2, [sp, #20]
 8012210:	464b      	mov	r3, r9
 8012212:	4442      	add	r2, r8
 8012214:	4631      	mov	r1, r6
 8012216:	4628      	mov	r0, r5
 8012218:	47b8      	blx	r7
 801221a:	3001      	adds	r0, #1
 801221c:	d1c1      	bne.n	80121a2 <_printf_float+0x342>
 801221e:	e680      	b.n	8011f22 <_printf_float+0xc2>
 8012220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012222:	2a01      	cmp	r2, #1
 8012224:	dc01      	bgt.n	801222a <_printf_float+0x3ca>
 8012226:	07db      	lsls	r3, r3, #31
 8012228:	d538      	bpl.n	801229c <_printf_float+0x43c>
 801222a:	2301      	movs	r3, #1
 801222c:	4642      	mov	r2, r8
 801222e:	4631      	mov	r1, r6
 8012230:	4628      	mov	r0, r5
 8012232:	47b8      	blx	r7
 8012234:	3001      	adds	r0, #1
 8012236:	f43f ae74 	beq.w	8011f22 <_printf_float+0xc2>
 801223a:	ee18 3a10 	vmov	r3, s16
 801223e:	4652      	mov	r2, sl
 8012240:	4631      	mov	r1, r6
 8012242:	4628      	mov	r0, r5
 8012244:	47b8      	blx	r7
 8012246:	3001      	adds	r0, #1
 8012248:	f43f ae6b 	beq.w	8011f22 <_printf_float+0xc2>
 801224c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012250:	2200      	movs	r2, #0
 8012252:	2300      	movs	r3, #0
 8012254:	f7ee fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 8012258:	b9d8      	cbnz	r0, 8012292 <_printf_float+0x432>
 801225a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801225c:	f108 0201 	add.w	r2, r8, #1
 8012260:	3b01      	subs	r3, #1
 8012262:	4631      	mov	r1, r6
 8012264:	4628      	mov	r0, r5
 8012266:	47b8      	blx	r7
 8012268:	3001      	adds	r0, #1
 801226a:	d10e      	bne.n	801228a <_printf_float+0x42a>
 801226c:	e659      	b.n	8011f22 <_printf_float+0xc2>
 801226e:	2301      	movs	r3, #1
 8012270:	4652      	mov	r2, sl
 8012272:	4631      	mov	r1, r6
 8012274:	4628      	mov	r0, r5
 8012276:	47b8      	blx	r7
 8012278:	3001      	adds	r0, #1
 801227a:	f43f ae52 	beq.w	8011f22 <_printf_float+0xc2>
 801227e:	f108 0801 	add.w	r8, r8, #1
 8012282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012284:	3b01      	subs	r3, #1
 8012286:	4543      	cmp	r3, r8
 8012288:	dcf1      	bgt.n	801226e <_printf_float+0x40e>
 801228a:	464b      	mov	r3, r9
 801228c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012290:	e6dc      	b.n	801204c <_printf_float+0x1ec>
 8012292:	f04f 0800 	mov.w	r8, #0
 8012296:	f104 0a1a 	add.w	sl, r4, #26
 801229a:	e7f2      	b.n	8012282 <_printf_float+0x422>
 801229c:	2301      	movs	r3, #1
 801229e:	4642      	mov	r2, r8
 80122a0:	e7df      	b.n	8012262 <_printf_float+0x402>
 80122a2:	2301      	movs	r3, #1
 80122a4:	464a      	mov	r2, r9
 80122a6:	4631      	mov	r1, r6
 80122a8:	4628      	mov	r0, r5
 80122aa:	47b8      	blx	r7
 80122ac:	3001      	adds	r0, #1
 80122ae:	f43f ae38 	beq.w	8011f22 <_printf_float+0xc2>
 80122b2:	f108 0801 	add.w	r8, r8, #1
 80122b6:	68e3      	ldr	r3, [r4, #12]
 80122b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80122ba:	1a5b      	subs	r3, r3, r1
 80122bc:	4543      	cmp	r3, r8
 80122be:	dcf0      	bgt.n	80122a2 <_printf_float+0x442>
 80122c0:	e6fa      	b.n	80120b8 <_printf_float+0x258>
 80122c2:	f04f 0800 	mov.w	r8, #0
 80122c6:	f104 0919 	add.w	r9, r4, #25
 80122ca:	e7f4      	b.n	80122b6 <_printf_float+0x456>

080122cc <_printf_common>:
 80122cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122d0:	4616      	mov	r6, r2
 80122d2:	4699      	mov	r9, r3
 80122d4:	688a      	ldr	r2, [r1, #8]
 80122d6:	690b      	ldr	r3, [r1, #16]
 80122d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122dc:	4293      	cmp	r3, r2
 80122de:	bfb8      	it	lt
 80122e0:	4613      	movlt	r3, r2
 80122e2:	6033      	str	r3, [r6, #0]
 80122e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122e8:	4607      	mov	r7, r0
 80122ea:	460c      	mov	r4, r1
 80122ec:	b10a      	cbz	r2, 80122f2 <_printf_common+0x26>
 80122ee:	3301      	adds	r3, #1
 80122f0:	6033      	str	r3, [r6, #0]
 80122f2:	6823      	ldr	r3, [r4, #0]
 80122f4:	0699      	lsls	r1, r3, #26
 80122f6:	bf42      	ittt	mi
 80122f8:	6833      	ldrmi	r3, [r6, #0]
 80122fa:	3302      	addmi	r3, #2
 80122fc:	6033      	strmi	r3, [r6, #0]
 80122fe:	6825      	ldr	r5, [r4, #0]
 8012300:	f015 0506 	ands.w	r5, r5, #6
 8012304:	d106      	bne.n	8012314 <_printf_common+0x48>
 8012306:	f104 0a19 	add.w	sl, r4, #25
 801230a:	68e3      	ldr	r3, [r4, #12]
 801230c:	6832      	ldr	r2, [r6, #0]
 801230e:	1a9b      	subs	r3, r3, r2
 8012310:	42ab      	cmp	r3, r5
 8012312:	dc26      	bgt.n	8012362 <_printf_common+0x96>
 8012314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012318:	1e13      	subs	r3, r2, #0
 801231a:	6822      	ldr	r2, [r4, #0]
 801231c:	bf18      	it	ne
 801231e:	2301      	movne	r3, #1
 8012320:	0692      	lsls	r2, r2, #26
 8012322:	d42b      	bmi.n	801237c <_printf_common+0xb0>
 8012324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012328:	4649      	mov	r1, r9
 801232a:	4638      	mov	r0, r7
 801232c:	47c0      	blx	r8
 801232e:	3001      	adds	r0, #1
 8012330:	d01e      	beq.n	8012370 <_printf_common+0xa4>
 8012332:	6823      	ldr	r3, [r4, #0]
 8012334:	68e5      	ldr	r5, [r4, #12]
 8012336:	6832      	ldr	r2, [r6, #0]
 8012338:	f003 0306 	and.w	r3, r3, #6
 801233c:	2b04      	cmp	r3, #4
 801233e:	bf08      	it	eq
 8012340:	1aad      	subeq	r5, r5, r2
 8012342:	68a3      	ldr	r3, [r4, #8]
 8012344:	6922      	ldr	r2, [r4, #16]
 8012346:	bf0c      	ite	eq
 8012348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801234c:	2500      	movne	r5, #0
 801234e:	4293      	cmp	r3, r2
 8012350:	bfc4      	itt	gt
 8012352:	1a9b      	subgt	r3, r3, r2
 8012354:	18ed      	addgt	r5, r5, r3
 8012356:	2600      	movs	r6, #0
 8012358:	341a      	adds	r4, #26
 801235a:	42b5      	cmp	r5, r6
 801235c:	d11a      	bne.n	8012394 <_printf_common+0xc8>
 801235e:	2000      	movs	r0, #0
 8012360:	e008      	b.n	8012374 <_printf_common+0xa8>
 8012362:	2301      	movs	r3, #1
 8012364:	4652      	mov	r2, sl
 8012366:	4649      	mov	r1, r9
 8012368:	4638      	mov	r0, r7
 801236a:	47c0      	blx	r8
 801236c:	3001      	adds	r0, #1
 801236e:	d103      	bne.n	8012378 <_printf_common+0xac>
 8012370:	f04f 30ff 	mov.w	r0, #4294967295
 8012374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012378:	3501      	adds	r5, #1
 801237a:	e7c6      	b.n	801230a <_printf_common+0x3e>
 801237c:	18e1      	adds	r1, r4, r3
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	2030      	movs	r0, #48	; 0x30
 8012382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012386:	4422      	add	r2, r4
 8012388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801238c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012390:	3302      	adds	r3, #2
 8012392:	e7c7      	b.n	8012324 <_printf_common+0x58>
 8012394:	2301      	movs	r3, #1
 8012396:	4622      	mov	r2, r4
 8012398:	4649      	mov	r1, r9
 801239a:	4638      	mov	r0, r7
 801239c:	47c0      	blx	r8
 801239e:	3001      	adds	r0, #1
 80123a0:	d0e6      	beq.n	8012370 <_printf_common+0xa4>
 80123a2:	3601      	adds	r6, #1
 80123a4:	e7d9      	b.n	801235a <_printf_common+0x8e>
	...

080123a8 <_printf_i>:
 80123a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123ac:	460c      	mov	r4, r1
 80123ae:	4691      	mov	r9, r2
 80123b0:	7e27      	ldrb	r7, [r4, #24]
 80123b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80123b4:	2f78      	cmp	r7, #120	; 0x78
 80123b6:	4680      	mov	r8, r0
 80123b8:	469a      	mov	sl, r3
 80123ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123be:	d807      	bhi.n	80123d0 <_printf_i+0x28>
 80123c0:	2f62      	cmp	r7, #98	; 0x62
 80123c2:	d80a      	bhi.n	80123da <_printf_i+0x32>
 80123c4:	2f00      	cmp	r7, #0
 80123c6:	f000 80d8 	beq.w	801257a <_printf_i+0x1d2>
 80123ca:	2f58      	cmp	r7, #88	; 0x58
 80123cc:	f000 80a3 	beq.w	8012516 <_printf_i+0x16e>
 80123d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123d8:	e03a      	b.n	8012450 <_printf_i+0xa8>
 80123da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123de:	2b15      	cmp	r3, #21
 80123e0:	d8f6      	bhi.n	80123d0 <_printf_i+0x28>
 80123e2:	a001      	add	r0, pc, #4	; (adr r0, 80123e8 <_printf_i+0x40>)
 80123e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80123e8:	08012441 	.word	0x08012441
 80123ec:	08012455 	.word	0x08012455
 80123f0:	080123d1 	.word	0x080123d1
 80123f4:	080123d1 	.word	0x080123d1
 80123f8:	080123d1 	.word	0x080123d1
 80123fc:	080123d1 	.word	0x080123d1
 8012400:	08012455 	.word	0x08012455
 8012404:	080123d1 	.word	0x080123d1
 8012408:	080123d1 	.word	0x080123d1
 801240c:	080123d1 	.word	0x080123d1
 8012410:	080123d1 	.word	0x080123d1
 8012414:	08012561 	.word	0x08012561
 8012418:	08012485 	.word	0x08012485
 801241c:	08012543 	.word	0x08012543
 8012420:	080123d1 	.word	0x080123d1
 8012424:	080123d1 	.word	0x080123d1
 8012428:	08012583 	.word	0x08012583
 801242c:	080123d1 	.word	0x080123d1
 8012430:	08012485 	.word	0x08012485
 8012434:	080123d1 	.word	0x080123d1
 8012438:	080123d1 	.word	0x080123d1
 801243c:	0801254b 	.word	0x0801254b
 8012440:	680b      	ldr	r3, [r1, #0]
 8012442:	1d1a      	adds	r2, r3, #4
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	600a      	str	r2, [r1, #0]
 8012448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801244c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012450:	2301      	movs	r3, #1
 8012452:	e0a3      	b.n	801259c <_printf_i+0x1f4>
 8012454:	6825      	ldr	r5, [r4, #0]
 8012456:	6808      	ldr	r0, [r1, #0]
 8012458:	062e      	lsls	r6, r5, #24
 801245a:	f100 0304 	add.w	r3, r0, #4
 801245e:	d50a      	bpl.n	8012476 <_printf_i+0xce>
 8012460:	6805      	ldr	r5, [r0, #0]
 8012462:	600b      	str	r3, [r1, #0]
 8012464:	2d00      	cmp	r5, #0
 8012466:	da03      	bge.n	8012470 <_printf_i+0xc8>
 8012468:	232d      	movs	r3, #45	; 0x2d
 801246a:	426d      	negs	r5, r5
 801246c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012470:	485e      	ldr	r0, [pc, #376]	; (80125ec <_printf_i+0x244>)
 8012472:	230a      	movs	r3, #10
 8012474:	e019      	b.n	80124aa <_printf_i+0x102>
 8012476:	f015 0f40 	tst.w	r5, #64	; 0x40
 801247a:	6805      	ldr	r5, [r0, #0]
 801247c:	600b      	str	r3, [r1, #0]
 801247e:	bf18      	it	ne
 8012480:	b22d      	sxthne	r5, r5
 8012482:	e7ef      	b.n	8012464 <_printf_i+0xbc>
 8012484:	680b      	ldr	r3, [r1, #0]
 8012486:	6825      	ldr	r5, [r4, #0]
 8012488:	1d18      	adds	r0, r3, #4
 801248a:	6008      	str	r0, [r1, #0]
 801248c:	0628      	lsls	r0, r5, #24
 801248e:	d501      	bpl.n	8012494 <_printf_i+0xec>
 8012490:	681d      	ldr	r5, [r3, #0]
 8012492:	e002      	b.n	801249a <_printf_i+0xf2>
 8012494:	0669      	lsls	r1, r5, #25
 8012496:	d5fb      	bpl.n	8012490 <_printf_i+0xe8>
 8012498:	881d      	ldrh	r5, [r3, #0]
 801249a:	4854      	ldr	r0, [pc, #336]	; (80125ec <_printf_i+0x244>)
 801249c:	2f6f      	cmp	r7, #111	; 0x6f
 801249e:	bf0c      	ite	eq
 80124a0:	2308      	moveq	r3, #8
 80124a2:	230a      	movne	r3, #10
 80124a4:	2100      	movs	r1, #0
 80124a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80124aa:	6866      	ldr	r6, [r4, #4]
 80124ac:	60a6      	str	r6, [r4, #8]
 80124ae:	2e00      	cmp	r6, #0
 80124b0:	bfa2      	ittt	ge
 80124b2:	6821      	ldrge	r1, [r4, #0]
 80124b4:	f021 0104 	bicge.w	r1, r1, #4
 80124b8:	6021      	strge	r1, [r4, #0]
 80124ba:	b90d      	cbnz	r5, 80124c0 <_printf_i+0x118>
 80124bc:	2e00      	cmp	r6, #0
 80124be:	d04d      	beq.n	801255c <_printf_i+0x1b4>
 80124c0:	4616      	mov	r6, r2
 80124c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80124c6:	fb03 5711 	mls	r7, r3, r1, r5
 80124ca:	5dc7      	ldrb	r7, [r0, r7]
 80124cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124d0:	462f      	mov	r7, r5
 80124d2:	42bb      	cmp	r3, r7
 80124d4:	460d      	mov	r5, r1
 80124d6:	d9f4      	bls.n	80124c2 <_printf_i+0x11a>
 80124d8:	2b08      	cmp	r3, #8
 80124da:	d10b      	bne.n	80124f4 <_printf_i+0x14c>
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	07df      	lsls	r7, r3, #31
 80124e0:	d508      	bpl.n	80124f4 <_printf_i+0x14c>
 80124e2:	6923      	ldr	r3, [r4, #16]
 80124e4:	6861      	ldr	r1, [r4, #4]
 80124e6:	4299      	cmp	r1, r3
 80124e8:	bfde      	ittt	le
 80124ea:	2330      	movle	r3, #48	; 0x30
 80124ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80124f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124f4:	1b92      	subs	r2, r2, r6
 80124f6:	6122      	str	r2, [r4, #16]
 80124f8:	f8cd a000 	str.w	sl, [sp]
 80124fc:	464b      	mov	r3, r9
 80124fe:	aa03      	add	r2, sp, #12
 8012500:	4621      	mov	r1, r4
 8012502:	4640      	mov	r0, r8
 8012504:	f7ff fee2 	bl	80122cc <_printf_common>
 8012508:	3001      	adds	r0, #1
 801250a:	d14c      	bne.n	80125a6 <_printf_i+0x1fe>
 801250c:	f04f 30ff 	mov.w	r0, #4294967295
 8012510:	b004      	add	sp, #16
 8012512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012516:	4835      	ldr	r0, [pc, #212]	; (80125ec <_printf_i+0x244>)
 8012518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801251c:	6823      	ldr	r3, [r4, #0]
 801251e:	680e      	ldr	r6, [r1, #0]
 8012520:	061f      	lsls	r7, r3, #24
 8012522:	f856 5b04 	ldr.w	r5, [r6], #4
 8012526:	600e      	str	r6, [r1, #0]
 8012528:	d514      	bpl.n	8012554 <_printf_i+0x1ac>
 801252a:	07d9      	lsls	r1, r3, #31
 801252c:	bf44      	itt	mi
 801252e:	f043 0320 	orrmi.w	r3, r3, #32
 8012532:	6023      	strmi	r3, [r4, #0]
 8012534:	b91d      	cbnz	r5, 801253e <_printf_i+0x196>
 8012536:	6823      	ldr	r3, [r4, #0]
 8012538:	f023 0320 	bic.w	r3, r3, #32
 801253c:	6023      	str	r3, [r4, #0]
 801253e:	2310      	movs	r3, #16
 8012540:	e7b0      	b.n	80124a4 <_printf_i+0xfc>
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	f043 0320 	orr.w	r3, r3, #32
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	2378      	movs	r3, #120	; 0x78
 801254c:	4828      	ldr	r0, [pc, #160]	; (80125f0 <_printf_i+0x248>)
 801254e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012552:	e7e3      	b.n	801251c <_printf_i+0x174>
 8012554:	065e      	lsls	r6, r3, #25
 8012556:	bf48      	it	mi
 8012558:	b2ad      	uxthmi	r5, r5
 801255a:	e7e6      	b.n	801252a <_printf_i+0x182>
 801255c:	4616      	mov	r6, r2
 801255e:	e7bb      	b.n	80124d8 <_printf_i+0x130>
 8012560:	680b      	ldr	r3, [r1, #0]
 8012562:	6826      	ldr	r6, [r4, #0]
 8012564:	6960      	ldr	r0, [r4, #20]
 8012566:	1d1d      	adds	r5, r3, #4
 8012568:	600d      	str	r5, [r1, #0]
 801256a:	0635      	lsls	r5, r6, #24
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	d501      	bpl.n	8012574 <_printf_i+0x1cc>
 8012570:	6018      	str	r0, [r3, #0]
 8012572:	e002      	b.n	801257a <_printf_i+0x1d2>
 8012574:	0671      	lsls	r1, r6, #25
 8012576:	d5fb      	bpl.n	8012570 <_printf_i+0x1c8>
 8012578:	8018      	strh	r0, [r3, #0]
 801257a:	2300      	movs	r3, #0
 801257c:	6123      	str	r3, [r4, #16]
 801257e:	4616      	mov	r6, r2
 8012580:	e7ba      	b.n	80124f8 <_printf_i+0x150>
 8012582:	680b      	ldr	r3, [r1, #0]
 8012584:	1d1a      	adds	r2, r3, #4
 8012586:	600a      	str	r2, [r1, #0]
 8012588:	681e      	ldr	r6, [r3, #0]
 801258a:	6862      	ldr	r2, [r4, #4]
 801258c:	2100      	movs	r1, #0
 801258e:	4630      	mov	r0, r6
 8012590:	f7ed fe36 	bl	8000200 <memchr>
 8012594:	b108      	cbz	r0, 801259a <_printf_i+0x1f2>
 8012596:	1b80      	subs	r0, r0, r6
 8012598:	6060      	str	r0, [r4, #4]
 801259a:	6863      	ldr	r3, [r4, #4]
 801259c:	6123      	str	r3, [r4, #16]
 801259e:	2300      	movs	r3, #0
 80125a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125a4:	e7a8      	b.n	80124f8 <_printf_i+0x150>
 80125a6:	6923      	ldr	r3, [r4, #16]
 80125a8:	4632      	mov	r2, r6
 80125aa:	4649      	mov	r1, r9
 80125ac:	4640      	mov	r0, r8
 80125ae:	47d0      	blx	sl
 80125b0:	3001      	adds	r0, #1
 80125b2:	d0ab      	beq.n	801250c <_printf_i+0x164>
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	079b      	lsls	r3, r3, #30
 80125b8:	d413      	bmi.n	80125e2 <_printf_i+0x23a>
 80125ba:	68e0      	ldr	r0, [r4, #12]
 80125bc:	9b03      	ldr	r3, [sp, #12]
 80125be:	4298      	cmp	r0, r3
 80125c0:	bfb8      	it	lt
 80125c2:	4618      	movlt	r0, r3
 80125c4:	e7a4      	b.n	8012510 <_printf_i+0x168>
 80125c6:	2301      	movs	r3, #1
 80125c8:	4632      	mov	r2, r6
 80125ca:	4649      	mov	r1, r9
 80125cc:	4640      	mov	r0, r8
 80125ce:	47d0      	blx	sl
 80125d0:	3001      	adds	r0, #1
 80125d2:	d09b      	beq.n	801250c <_printf_i+0x164>
 80125d4:	3501      	adds	r5, #1
 80125d6:	68e3      	ldr	r3, [r4, #12]
 80125d8:	9903      	ldr	r1, [sp, #12]
 80125da:	1a5b      	subs	r3, r3, r1
 80125dc:	42ab      	cmp	r3, r5
 80125de:	dcf2      	bgt.n	80125c6 <_printf_i+0x21e>
 80125e0:	e7eb      	b.n	80125ba <_printf_i+0x212>
 80125e2:	2500      	movs	r5, #0
 80125e4:	f104 0619 	add.w	r6, r4, #25
 80125e8:	e7f5      	b.n	80125d6 <_printf_i+0x22e>
 80125ea:	bf00      	nop
 80125ec:	08018dc0 	.word	0x08018dc0
 80125f0:	08018dd1 	.word	0x08018dd1

080125f4 <_scanf_float>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	b087      	sub	sp, #28
 80125fa:	4617      	mov	r7, r2
 80125fc:	9303      	str	r3, [sp, #12]
 80125fe:	688b      	ldr	r3, [r1, #8]
 8012600:	1e5a      	subs	r2, r3, #1
 8012602:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012606:	bf83      	ittte	hi
 8012608:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801260c:	195b      	addhi	r3, r3, r5
 801260e:	9302      	strhi	r3, [sp, #8]
 8012610:	2300      	movls	r3, #0
 8012612:	bf86      	itte	hi
 8012614:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012618:	608b      	strhi	r3, [r1, #8]
 801261a:	9302      	strls	r3, [sp, #8]
 801261c:	680b      	ldr	r3, [r1, #0]
 801261e:	468b      	mov	fp, r1
 8012620:	2500      	movs	r5, #0
 8012622:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012626:	f84b 3b1c 	str.w	r3, [fp], #28
 801262a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801262e:	4680      	mov	r8, r0
 8012630:	460c      	mov	r4, r1
 8012632:	465e      	mov	r6, fp
 8012634:	46aa      	mov	sl, r5
 8012636:	46a9      	mov	r9, r5
 8012638:	9501      	str	r5, [sp, #4]
 801263a:	68a2      	ldr	r2, [r4, #8]
 801263c:	b152      	cbz	r2, 8012654 <_scanf_float+0x60>
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b4e      	cmp	r3, #78	; 0x4e
 8012644:	d864      	bhi.n	8012710 <_scanf_float+0x11c>
 8012646:	2b40      	cmp	r3, #64	; 0x40
 8012648:	d83c      	bhi.n	80126c4 <_scanf_float+0xd0>
 801264a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801264e:	b2c8      	uxtb	r0, r1
 8012650:	280e      	cmp	r0, #14
 8012652:	d93a      	bls.n	80126ca <_scanf_float+0xd6>
 8012654:	f1b9 0f00 	cmp.w	r9, #0
 8012658:	d003      	beq.n	8012662 <_scanf_float+0x6e>
 801265a:	6823      	ldr	r3, [r4, #0]
 801265c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012660:	6023      	str	r3, [r4, #0]
 8012662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012666:	f1ba 0f01 	cmp.w	sl, #1
 801266a:	f200 8113 	bhi.w	8012894 <_scanf_float+0x2a0>
 801266e:	455e      	cmp	r6, fp
 8012670:	f200 8105 	bhi.w	801287e <_scanf_float+0x28a>
 8012674:	2501      	movs	r5, #1
 8012676:	4628      	mov	r0, r5
 8012678:	b007      	add	sp, #28
 801267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012682:	2a0d      	cmp	r2, #13
 8012684:	d8e6      	bhi.n	8012654 <_scanf_float+0x60>
 8012686:	a101      	add	r1, pc, #4	; (adr r1, 801268c <_scanf_float+0x98>)
 8012688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801268c:	080127cb 	.word	0x080127cb
 8012690:	08012655 	.word	0x08012655
 8012694:	08012655 	.word	0x08012655
 8012698:	08012655 	.word	0x08012655
 801269c:	0801282b 	.word	0x0801282b
 80126a0:	08012803 	.word	0x08012803
 80126a4:	08012655 	.word	0x08012655
 80126a8:	08012655 	.word	0x08012655
 80126ac:	080127d9 	.word	0x080127d9
 80126b0:	08012655 	.word	0x08012655
 80126b4:	08012655 	.word	0x08012655
 80126b8:	08012655 	.word	0x08012655
 80126bc:	08012655 	.word	0x08012655
 80126c0:	08012791 	.word	0x08012791
 80126c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80126c8:	e7db      	b.n	8012682 <_scanf_float+0x8e>
 80126ca:	290e      	cmp	r1, #14
 80126cc:	d8c2      	bhi.n	8012654 <_scanf_float+0x60>
 80126ce:	a001      	add	r0, pc, #4	; (adr r0, 80126d4 <_scanf_float+0xe0>)
 80126d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80126d4:	08012783 	.word	0x08012783
 80126d8:	08012655 	.word	0x08012655
 80126dc:	08012783 	.word	0x08012783
 80126e0:	08012817 	.word	0x08012817
 80126e4:	08012655 	.word	0x08012655
 80126e8:	08012731 	.word	0x08012731
 80126ec:	0801276d 	.word	0x0801276d
 80126f0:	0801276d 	.word	0x0801276d
 80126f4:	0801276d 	.word	0x0801276d
 80126f8:	0801276d 	.word	0x0801276d
 80126fc:	0801276d 	.word	0x0801276d
 8012700:	0801276d 	.word	0x0801276d
 8012704:	0801276d 	.word	0x0801276d
 8012708:	0801276d 	.word	0x0801276d
 801270c:	0801276d 	.word	0x0801276d
 8012710:	2b6e      	cmp	r3, #110	; 0x6e
 8012712:	d809      	bhi.n	8012728 <_scanf_float+0x134>
 8012714:	2b60      	cmp	r3, #96	; 0x60
 8012716:	d8b2      	bhi.n	801267e <_scanf_float+0x8a>
 8012718:	2b54      	cmp	r3, #84	; 0x54
 801271a:	d077      	beq.n	801280c <_scanf_float+0x218>
 801271c:	2b59      	cmp	r3, #89	; 0x59
 801271e:	d199      	bne.n	8012654 <_scanf_float+0x60>
 8012720:	2d07      	cmp	r5, #7
 8012722:	d197      	bne.n	8012654 <_scanf_float+0x60>
 8012724:	2508      	movs	r5, #8
 8012726:	e029      	b.n	801277c <_scanf_float+0x188>
 8012728:	2b74      	cmp	r3, #116	; 0x74
 801272a:	d06f      	beq.n	801280c <_scanf_float+0x218>
 801272c:	2b79      	cmp	r3, #121	; 0x79
 801272e:	e7f6      	b.n	801271e <_scanf_float+0x12a>
 8012730:	6821      	ldr	r1, [r4, #0]
 8012732:	05c8      	lsls	r0, r1, #23
 8012734:	d51a      	bpl.n	801276c <_scanf_float+0x178>
 8012736:	9b02      	ldr	r3, [sp, #8]
 8012738:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801273c:	6021      	str	r1, [r4, #0]
 801273e:	f109 0901 	add.w	r9, r9, #1
 8012742:	b11b      	cbz	r3, 801274c <_scanf_float+0x158>
 8012744:	3b01      	subs	r3, #1
 8012746:	3201      	adds	r2, #1
 8012748:	9302      	str	r3, [sp, #8]
 801274a:	60a2      	str	r2, [r4, #8]
 801274c:	68a3      	ldr	r3, [r4, #8]
 801274e:	3b01      	subs	r3, #1
 8012750:	60a3      	str	r3, [r4, #8]
 8012752:	6923      	ldr	r3, [r4, #16]
 8012754:	3301      	adds	r3, #1
 8012756:	6123      	str	r3, [r4, #16]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3b01      	subs	r3, #1
 801275c:	2b00      	cmp	r3, #0
 801275e:	607b      	str	r3, [r7, #4]
 8012760:	f340 8084 	ble.w	801286c <_scanf_float+0x278>
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	3301      	adds	r3, #1
 8012768:	603b      	str	r3, [r7, #0]
 801276a:	e766      	b.n	801263a <_scanf_float+0x46>
 801276c:	eb1a 0f05 	cmn.w	sl, r5
 8012770:	f47f af70 	bne.w	8012654 <_scanf_float+0x60>
 8012774:	6822      	ldr	r2, [r4, #0]
 8012776:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801277a:	6022      	str	r2, [r4, #0]
 801277c:	f806 3b01 	strb.w	r3, [r6], #1
 8012780:	e7e4      	b.n	801274c <_scanf_float+0x158>
 8012782:	6822      	ldr	r2, [r4, #0]
 8012784:	0610      	lsls	r0, r2, #24
 8012786:	f57f af65 	bpl.w	8012654 <_scanf_float+0x60>
 801278a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801278e:	e7f4      	b.n	801277a <_scanf_float+0x186>
 8012790:	f1ba 0f00 	cmp.w	sl, #0
 8012794:	d10e      	bne.n	80127b4 <_scanf_float+0x1c0>
 8012796:	f1b9 0f00 	cmp.w	r9, #0
 801279a:	d10e      	bne.n	80127ba <_scanf_float+0x1c6>
 801279c:	6822      	ldr	r2, [r4, #0]
 801279e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80127a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80127a6:	d108      	bne.n	80127ba <_scanf_float+0x1c6>
 80127a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80127ac:	6022      	str	r2, [r4, #0]
 80127ae:	f04f 0a01 	mov.w	sl, #1
 80127b2:	e7e3      	b.n	801277c <_scanf_float+0x188>
 80127b4:	f1ba 0f02 	cmp.w	sl, #2
 80127b8:	d055      	beq.n	8012866 <_scanf_float+0x272>
 80127ba:	2d01      	cmp	r5, #1
 80127bc:	d002      	beq.n	80127c4 <_scanf_float+0x1d0>
 80127be:	2d04      	cmp	r5, #4
 80127c0:	f47f af48 	bne.w	8012654 <_scanf_float+0x60>
 80127c4:	3501      	adds	r5, #1
 80127c6:	b2ed      	uxtb	r5, r5
 80127c8:	e7d8      	b.n	801277c <_scanf_float+0x188>
 80127ca:	f1ba 0f01 	cmp.w	sl, #1
 80127ce:	f47f af41 	bne.w	8012654 <_scanf_float+0x60>
 80127d2:	f04f 0a02 	mov.w	sl, #2
 80127d6:	e7d1      	b.n	801277c <_scanf_float+0x188>
 80127d8:	b97d      	cbnz	r5, 80127fa <_scanf_float+0x206>
 80127da:	f1b9 0f00 	cmp.w	r9, #0
 80127de:	f47f af3c 	bne.w	801265a <_scanf_float+0x66>
 80127e2:	6822      	ldr	r2, [r4, #0]
 80127e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80127e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80127ec:	f47f af39 	bne.w	8012662 <_scanf_float+0x6e>
 80127f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80127f4:	6022      	str	r2, [r4, #0]
 80127f6:	2501      	movs	r5, #1
 80127f8:	e7c0      	b.n	801277c <_scanf_float+0x188>
 80127fa:	2d03      	cmp	r5, #3
 80127fc:	d0e2      	beq.n	80127c4 <_scanf_float+0x1d0>
 80127fe:	2d05      	cmp	r5, #5
 8012800:	e7de      	b.n	80127c0 <_scanf_float+0x1cc>
 8012802:	2d02      	cmp	r5, #2
 8012804:	f47f af26 	bne.w	8012654 <_scanf_float+0x60>
 8012808:	2503      	movs	r5, #3
 801280a:	e7b7      	b.n	801277c <_scanf_float+0x188>
 801280c:	2d06      	cmp	r5, #6
 801280e:	f47f af21 	bne.w	8012654 <_scanf_float+0x60>
 8012812:	2507      	movs	r5, #7
 8012814:	e7b2      	b.n	801277c <_scanf_float+0x188>
 8012816:	6822      	ldr	r2, [r4, #0]
 8012818:	0591      	lsls	r1, r2, #22
 801281a:	f57f af1b 	bpl.w	8012654 <_scanf_float+0x60>
 801281e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012822:	6022      	str	r2, [r4, #0]
 8012824:	f8cd 9004 	str.w	r9, [sp, #4]
 8012828:	e7a8      	b.n	801277c <_scanf_float+0x188>
 801282a:	6822      	ldr	r2, [r4, #0]
 801282c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012830:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012834:	d006      	beq.n	8012844 <_scanf_float+0x250>
 8012836:	0550      	lsls	r0, r2, #21
 8012838:	f57f af0c 	bpl.w	8012654 <_scanf_float+0x60>
 801283c:	f1b9 0f00 	cmp.w	r9, #0
 8012840:	f43f af0f 	beq.w	8012662 <_scanf_float+0x6e>
 8012844:	0591      	lsls	r1, r2, #22
 8012846:	bf58      	it	pl
 8012848:	9901      	ldrpl	r1, [sp, #4]
 801284a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801284e:	bf58      	it	pl
 8012850:	eba9 0101 	subpl.w	r1, r9, r1
 8012854:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012858:	bf58      	it	pl
 801285a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801285e:	6022      	str	r2, [r4, #0]
 8012860:	f04f 0900 	mov.w	r9, #0
 8012864:	e78a      	b.n	801277c <_scanf_float+0x188>
 8012866:	f04f 0a03 	mov.w	sl, #3
 801286a:	e787      	b.n	801277c <_scanf_float+0x188>
 801286c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012870:	4639      	mov	r1, r7
 8012872:	4640      	mov	r0, r8
 8012874:	4798      	blx	r3
 8012876:	2800      	cmp	r0, #0
 8012878:	f43f aedf 	beq.w	801263a <_scanf_float+0x46>
 801287c:	e6ea      	b.n	8012654 <_scanf_float+0x60>
 801287e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012886:	463a      	mov	r2, r7
 8012888:	4640      	mov	r0, r8
 801288a:	4798      	blx	r3
 801288c:	6923      	ldr	r3, [r4, #16]
 801288e:	3b01      	subs	r3, #1
 8012890:	6123      	str	r3, [r4, #16]
 8012892:	e6ec      	b.n	801266e <_scanf_float+0x7a>
 8012894:	1e6b      	subs	r3, r5, #1
 8012896:	2b06      	cmp	r3, #6
 8012898:	d825      	bhi.n	80128e6 <_scanf_float+0x2f2>
 801289a:	2d02      	cmp	r5, #2
 801289c:	d836      	bhi.n	801290c <_scanf_float+0x318>
 801289e:	455e      	cmp	r6, fp
 80128a0:	f67f aee8 	bls.w	8012674 <_scanf_float+0x80>
 80128a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80128ac:	463a      	mov	r2, r7
 80128ae:	4640      	mov	r0, r8
 80128b0:	4798      	blx	r3
 80128b2:	6923      	ldr	r3, [r4, #16]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	e7f1      	b.n	801289e <_scanf_float+0x2aa>
 80128ba:	9802      	ldr	r0, [sp, #8]
 80128bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80128c4:	9002      	str	r0, [sp, #8]
 80128c6:	463a      	mov	r2, r7
 80128c8:	4640      	mov	r0, r8
 80128ca:	4798      	blx	r3
 80128cc:	6923      	ldr	r3, [r4, #16]
 80128ce:	3b01      	subs	r3, #1
 80128d0:	6123      	str	r3, [r4, #16]
 80128d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128d6:	fa5f fa8a 	uxtb.w	sl, sl
 80128da:	f1ba 0f02 	cmp.w	sl, #2
 80128de:	d1ec      	bne.n	80128ba <_scanf_float+0x2c6>
 80128e0:	3d03      	subs	r5, #3
 80128e2:	b2ed      	uxtb	r5, r5
 80128e4:	1b76      	subs	r6, r6, r5
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	05da      	lsls	r2, r3, #23
 80128ea:	d52f      	bpl.n	801294c <_scanf_float+0x358>
 80128ec:	055b      	lsls	r3, r3, #21
 80128ee:	d510      	bpl.n	8012912 <_scanf_float+0x31e>
 80128f0:	455e      	cmp	r6, fp
 80128f2:	f67f aebf 	bls.w	8012674 <_scanf_float+0x80>
 80128f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80128fe:	463a      	mov	r2, r7
 8012900:	4640      	mov	r0, r8
 8012902:	4798      	blx	r3
 8012904:	6923      	ldr	r3, [r4, #16]
 8012906:	3b01      	subs	r3, #1
 8012908:	6123      	str	r3, [r4, #16]
 801290a:	e7f1      	b.n	80128f0 <_scanf_float+0x2fc>
 801290c:	46aa      	mov	sl, r5
 801290e:	9602      	str	r6, [sp, #8]
 8012910:	e7df      	b.n	80128d2 <_scanf_float+0x2de>
 8012912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012916:	6923      	ldr	r3, [r4, #16]
 8012918:	2965      	cmp	r1, #101	; 0x65
 801291a:	f103 33ff 	add.w	r3, r3, #4294967295
 801291e:	f106 35ff 	add.w	r5, r6, #4294967295
 8012922:	6123      	str	r3, [r4, #16]
 8012924:	d00c      	beq.n	8012940 <_scanf_float+0x34c>
 8012926:	2945      	cmp	r1, #69	; 0x45
 8012928:	d00a      	beq.n	8012940 <_scanf_float+0x34c>
 801292a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801292e:	463a      	mov	r2, r7
 8012930:	4640      	mov	r0, r8
 8012932:	4798      	blx	r3
 8012934:	6923      	ldr	r3, [r4, #16]
 8012936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801293a:	3b01      	subs	r3, #1
 801293c:	1eb5      	subs	r5, r6, #2
 801293e:	6123      	str	r3, [r4, #16]
 8012940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012944:	463a      	mov	r2, r7
 8012946:	4640      	mov	r0, r8
 8012948:	4798      	blx	r3
 801294a:	462e      	mov	r6, r5
 801294c:	6825      	ldr	r5, [r4, #0]
 801294e:	f015 0510 	ands.w	r5, r5, #16
 8012952:	d158      	bne.n	8012a06 <_scanf_float+0x412>
 8012954:	7035      	strb	r5, [r6, #0]
 8012956:	6823      	ldr	r3, [r4, #0]
 8012958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012960:	d11c      	bne.n	801299c <_scanf_float+0x3a8>
 8012962:	9b01      	ldr	r3, [sp, #4]
 8012964:	454b      	cmp	r3, r9
 8012966:	eba3 0209 	sub.w	r2, r3, r9
 801296a:	d124      	bne.n	80129b6 <_scanf_float+0x3c2>
 801296c:	2200      	movs	r2, #0
 801296e:	4659      	mov	r1, fp
 8012970:	4640      	mov	r0, r8
 8012972:	f001 f86b 	bl	8013a4c <_strtod_r>
 8012976:	9b03      	ldr	r3, [sp, #12]
 8012978:	6821      	ldr	r1, [r4, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f011 0f02 	tst.w	r1, #2
 8012980:	ec57 6b10 	vmov	r6, r7, d0
 8012984:	f103 0204 	add.w	r2, r3, #4
 8012988:	d020      	beq.n	80129cc <_scanf_float+0x3d8>
 801298a:	9903      	ldr	r1, [sp, #12]
 801298c:	600a      	str	r2, [r1, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	e9c3 6700 	strd	r6, r7, [r3]
 8012994:	68e3      	ldr	r3, [r4, #12]
 8012996:	3301      	adds	r3, #1
 8012998:	60e3      	str	r3, [r4, #12]
 801299a:	e66c      	b.n	8012676 <_scanf_float+0x82>
 801299c:	9b04      	ldr	r3, [sp, #16]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0e4      	beq.n	801296c <_scanf_float+0x378>
 80129a2:	9905      	ldr	r1, [sp, #20]
 80129a4:	230a      	movs	r3, #10
 80129a6:	462a      	mov	r2, r5
 80129a8:	3101      	adds	r1, #1
 80129aa:	4640      	mov	r0, r8
 80129ac:	f001 f8d8 	bl	8013b60 <_strtol_r>
 80129b0:	9b04      	ldr	r3, [sp, #16]
 80129b2:	9e05      	ldr	r6, [sp, #20]
 80129b4:	1ac2      	subs	r2, r0, r3
 80129b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80129ba:	429e      	cmp	r6, r3
 80129bc:	bf28      	it	cs
 80129be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80129c2:	4912      	ldr	r1, [pc, #72]	; (8012a0c <_scanf_float+0x418>)
 80129c4:	4630      	mov	r0, r6
 80129c6:	f000 f977 	bl	8012cb8 <siprintf>
 80129ca:	e7cf      	b.n	801296c <_scanf_float+0x378>
 80129cc:	f011 0f04 	tst.w	r1, #4
 80129d0:	9903      	ldr	r1, [sp, #12]
 80129d2:	600a      	str	r2, [r1, #0]
 80129d4:	d1db      	bne.n	801298e <_scanf_float+0x39a>
 80129d6:	f8d3 8000 	ldr.w	r8, [r3]
 80129da:	ee10 2a10 	vmov	r2, s0
 80129de:	ee10 0a10 	vmov	r0, s0
 80129e2:	463b      	mov	r3, r7
 80129e4:	4639      	mov	r1, r7
 80129e6:	f7ee f8b1 	bl	8000b4c <__aeabi_dcmpun>
 80129ea:	b128      	cbz	r0, 80129f8 <_scanf_float+0x404>
 80129ec:	4808      	ldr	r0, [pc, #32]	; (8012a10 <_scanf_float+0x41c>)
 80129ee:	f000 f919 	bl	8012c24 <nanf>
 80129f2:	ed88 0a00 	vstr	s0, [r8]
 80129f6:	e7cd      	b.n	8012994 <_scanf_float+0x3a0>
 80129f8:	4630      	mov	r0, r6
 80129fa:	4639      	mov	r1, r7
 80129fc:	f7ee f904 	bl	8000c08 <__aeabi_d2f>
 8012a00:	f8c8 0000 	str.w	r0, [r8]
 8012a04:	e7c6      	b.n	8012994 <_scanf_float+0x3a0>
 8012a06:	2500      	movs	r5, #0
 8012a08:	e635      	b.n	8012676 <_scanf_float+0x82>
 8012a0a:	bf00      	nop
 8012a0c:	08018de2 	.word	0x08018de2
 8012a10:	08018e73 	.word	0x08018e73

08012a14 <iprintf>:
 8012a14:	b40f      	push	{r0, r1, r2, r3}
 8012a16:	4b0a      	ldr	r3, [pc, #40]	; (8012a40 <iprintf+0x2c>)
 8012a18:	b513      	push	{r0, r1, r4, lr}
 8012a1a:	681c      	ldr	r4, [r3, #0]
 8012a1c:	b124      	cbz	r4, 8012a28 <iprintf+0x14>
 8012a1e:	69a3      	ldr	r3, [r4, #24]
 8012a20:	b913      	cbnz	r3, 8012a28 <iprintf+0x14>
 8012a22:	4620      	mov	r0, r4
 8012a24:	f7fe ffd4 	bl	80119d0 <__sinit>
 8012a28:	ab05      	add	r3, sp, #20
 8012a2a:	9a04      	ldr	r2, [sp, #16]
 8012a2c:	68a1      	ldr	r1, [r4, #8]
 8012a2e:	9301      	str	r3, [sp, #4]
 8012a30:	4620      	mov	r0, r4
 8012a32:	f003 fdb1 	bl	8016598 <_vfiprintf_r>
 8012a36:	b002      	add	sp, #8
 8012a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a3c:	b004      	add	sp, #16
 8012a3e:	4770      	bx	lr
 8012a40:	200000d8 	.word	0x200000d8

08012a44 <_puts_r>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	460e      	mov	r6, r1
 8012a48:	4605      	mov	r5, r0
 8012a4a:	b118      	cbz	r0, 8012a54 <_puts_r+0x10>
 8012a4c:	6983      	ldr	r3, [r0, #24]
 8012a4e:	b90b      	cbnz	r3, 8012a54 <_puts_r+0x10>
 8012a50:	f7fe ffbe 	bl	80119d0 <__sinit>
 8012a54:	69ab      	ldr	r3, [r5, #24]
 8012a56:	68ac      	ldr	r4, [r5, #8]
 8012a58:	b913      	cbnz	r3, 8012a60 <_puts_r+0x1c>
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f7fe ffb8 	bl	80119d0 <__sinit>
 8012a60:	4b2c      	ldr	r3, [pc, #176]	; (8012b14 <_puts_r+0xd0>)
 8012a62:	429c      	cmp	r4, r3
 8012a64:	d120      	bne.n	8012aa8 <_puts_r+0x64>
 8012a66:	686c      	ldr	r4, [r5, #4]
 8012a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a6a:	07db      	lsls	r3, r3, #31
 8012a6c:	d405      	bmi.n	8012a7a <_puts_r+0x36>
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	0598      	lsls	r0, r3, #22
 8012a72:	d402      	bmi.n	8012a7a <_puts_r+0x36>
 8012a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a76:	f7ff f86e 	bl	8011b56 <__retarget_lock_acquire_recursive>
 8012a7a:	89a3      	ldrh	r3, [r4, #12]
 8012a7c:	0719      	lsls	r1, r3, #28
 8012a7e:	d51d      	bpl.n	8012abc <_puts_r+0x78>
 8012a80:	6923      	ldr	r3, [r4, #16]
 8012a82:	b1db      	cbz	r3, 8012abc <_puts_r+0x78>
 8012a84:	3e01      	subs	r6, #1
 8012a86:	68a3      	ldr	r3, [r4, #8]
 8012a88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	60a3      	str	r3, [r4, #8]
 8012a90:	bb39      	cbnz	r1, 8012ae2 <_puts_r+0x9e>
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	da38      	bge.n	8012b08 <_puts_r+0xc4>
 8012a96:	4622      	mov	r2, r4
 8012a98:	210a      	movs	r1, #10
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	f001 f8e0 	bl	8013c60 <__swbuf_r>
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	d011      	beq.n	8012ac8 <_puts_r+0x84>
 8012aa4:	250a      	movs	r5, #10
 8012aa6:	e011      	b.n	8012acc <_puts_r+0x88>
 8012aa8:	4b1b      	ldr	r3, [pc, #108]	; (8012b18 <_puts_r+0xd4>)
 8012aaa:	429c      	cmp	r4, r3
 8012aac:	d101      	bne.n	8012ab2 <_puts_r+0x6e>
 8012aae:	68ac      	ldr	r4, [r5, #8]
 8012ab0:	e7da      	b.n	8012a68 <_puts_r+0x24>
 8012ab2:	4b1a      	ldr	r3, [pc, #104]	; (8012b1c <_puts_r+0xd8>)
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	bf08      	it	eq
 8012ab8:	68ec      	ldreq	r4, [r5, #12]
 8012aba:	e7d5      	b.n	8012a68 <_puts_r+0x24>
 8012abc:	4621      	mov	r1, r4
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f001 f932 	bl	8013d28 <__swsetup_r>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d0dd      	beq.n	8012a84 <_puts_r+0x40>
 8012ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8012acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ace:	07da      	lsls	r2, r3, #31
 8012ad0:	d405      	bmi.n	8012ade <_puts_r+0x9a>
 8012ad2:	89a3      	ldrh	r3, [r4, #12]
 8012ad4:	059b      	lsls	r3, r3, #22
 8012ad6:	d402      	bmi.n	8012ade <_puts_r+0x9a>
 8012ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ada:	f7ff f83d 	bl	8011b58 <__retarget_lock_release_recursive>
 8012ade:	4628      	mov	r0, r5
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	da04      	bge.n	8012af0 <_puts_r+0xac>
 8012ae6:	69a2      	ldr	r2, [r4, #24]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	dc06      	bgt.n	8012afa <_puts_r+0xb6>
 8012aec:	290a      	cmp	r1, #10
 8012aee:	d004      	beq.n	8012afa <_puts_r+0xb6>
 8012af0:	6823      	ldr	r3, [r4, #0]
 8012af2:	1c5a      	adds	r2, r3, #1
 8012af4:	6022      	str	r2, [r4, #0]
 8012af6:	7019      	strb	r1, [r3, #0]
 8012af8:	e7c5      	b.n	8012a86 <_puts_r+0x42>
 8012afa:	4622      	mov	r2, r4
 8012afc:	4628      	mov	r0, r5
 8012afe:	f001 f8af 	bl	8013c60 <__swbuf_r>
 8012b02:	3001      	adds	r0, #1
 8012b04:	d1bf      	bne.n	8012a86 <_puts_r+0x42>
 8012b06:	e7df      	b.n	8012ac8 <_puts_r+0x84>
 8012b08:	6823      	ldr	r3, [r4, #0]
 8012b0a:	250a      	movs	r5, #10
 8012b0c:	1c5a      	adds	r2, r3, #1
 8012b0e:	6022      	str	r2, [r4, #0]
 8012b10:	701d      	strb	r5, [r3, #0]
 8012b12:	e7db      	b.n	8012acc <_puts_r+0x88>
 8012b14:	08018d6c 	.word	0x08018d6c
 8012b18:	08018d8c 	.word	0x08018d8c
 8012b1c:	08018d4c 	.word	0x08018d4c

08012b20 <puts>:
 8012b20:	4b02      	ldr	r3, [pc, #8]	; (8012b2c <puts+0xc>)
 8012b22:	4601      	mov	r1, r0
 8012b24:	6818      	ldr	r0, [r3, #0]
 8012b26:	f7ff bf8d 	b.w	8012a44 <_puts_r>
 8012b2a:	bf00      	nop
 8012b2c:	200000d8 	.word	0x200000d8

08012b30 <cleanup_glue>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	460c      	mov	r4, r1
 8012b34:	6809      	ldr	r1, [r1, #0]
 8012b36:	4605      	mov	r5, r0
 8012b38:	b109      	cbz	r1, 8012b3e <cleanup_glue+0xe>
 8012b3a:	f7ff fff9 	bl	8012b30 <cleanup_glue>
 8012b3e:	4621      	mov	r1, r4
 8012b40:	4628      	mov	r0, r5
 8012b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b46:	f7ff b841 	b.w	8011bcc <_free_r>
	...

08012b4c <_reclaim_reent>:
 8012b4c:	4b2c      	ldr	r3, [pc, #176]	; (8012c00 <_reclaim_reent+0xb4>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4283      	cmp	r3, r0
 8012b52:	b570      	push	{r4, r5, r6, lr}
 8012b54:	4604      	mov	r4, r0
 8012b56:	d051      	beq.n	8012bfc <_reclaim_reent+0xb0>
 8012b58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b5a:	b143      	cbz	r3, 8012b6e <_reclaim_reent+0x22>
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d14a      	bne.n	8012bf8 <_reclaim_reent+0xac>
 8012b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b64:	6819      	ldr	r1, [r3, #0]
 8012b66:	b111      	cbz	r1, 8012b6e <_reclaim_reent+0x22>
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ff f82f 	bl	8011bcc <_free_r>
 8012b6e:	6961      	ldr	r1, [r4, #20]
 8012b70:	b111      	cbz	r1, 8012b78 <_reclaim_reent+0x2c>
 8012b72:	4620      	mov	r0, r4
 8012b74:	f7ff f82a 	bl	8011bcc <_free_r>
 8012b78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012b7a:	b111      	cbz	r1, 8012b82 <_reclaim_reent+0x36>
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f7ff f825 	bl	8011bcc <_free_r>
 8012b82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012b84:	b111      	cbz	r1, 8012b8c <_reclaim_reent+0x40>
 8012b86:	4620      	mov	r0, r4
 8012b88:	f7ff f820 	bl	8011bcc <_free_r>
 8012b8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012b8e:	b111      	cbz	r1, 8012b96 <_reclaim_reent+0x4a>
 8012b90:	4620      	mov	r0, r4
 8012b92:	f7ff f81b 	bl	8011bcc <_free_r>
 8012b96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012b98:	b111      	cbz	r1, 8012ba0 <_reclaim_reent+0x54>
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f7ff f816 	bl	8011bcc <_free_r>
 8012ba0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012ba2:	b111      	cbz	r1, 8012baa <_reclaim_reent+0x5e>
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f7ff f811 	bl	8011bcc <_free_r>
 8012baa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012bac:	b111      	cbz	r1, 8012bb4 <_reclaim_reent+0x68>
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f7ff f80c 	bl	8011bcc <_free_r>
 8012bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bb6:	b111      	cbz	r1, 8012bbe <_reclaim_reent+0x72>
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f7ff f807 	bl	8011bcc <_free_r>
 8012bbe:	69a3      	ldr	r3, [r4, #24]
 8012bc0:	b1e3      	cbz	r3, 8012bfc <_reclaim_reent+0xb0>
 8012bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	4798      	blx	r3
 8012bc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012bca:	b1b9      	cbz	r1, 8012bfc <_reclaim_reent+0xb0>
 8012bcc:	4620      	mov	r0, r4
 8012bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bd2:	f7ff bfad 	b.w	8012b30 <cleanup_glue>
 8012bd6:	5949      	ldr	r1, [r1, r5]
 8012bd8:	b941      	cbnz	r1, 8012bec <_reclaim_reent+0xa0>
 8012bda:	3504      	adds	r5, #4
 8012bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bde:	2d80      	cmp	r5, #128	; 0x80
 8012be0:	68d9      	ldr	r1, [r3, #12]
 8012be2:	d1f8      	bne.n	8012bd6 <_reclaim_reent+0x8a>
 8012be4:	4620      	mov	r0, r4
 8012be6:	f7fe fff1 	bl	8011bcc <_free_r>
 8012bea:	e7ba      	b.n	8012b62 <_reclaim_reent+0x16>
 8012bec:	680e      	ldr	r6, [r1, #0]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f7fe ffec 	bl	8011bcc <_free_r>
 8012bf4:	4631      	mov	r1, r6
 8012bf6:	e7ef      	b.n	8012bd8 <_reclaim_reent+0x8c>
 8012bf8:	2500      	movs	r5, #0
 8012bfa:	e7ef      	b.n	8012bdc <_reclaim_reent+0x90>
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	bf00      	nop
 8012c00:	200000d8 	.word	0x200000d8

08012c04 <_sbrk_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4d06      	ldr	r5, [pc, #24]	; (8012c20 <_sbrk_r+0x1c>)
 8012c08:	2300      	movs	r3, #0
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	4608      	mov	r0, r1
 8012c0e:	602b      	str	r3, [r5, #0]
 8012c10:	f004 f834 	bl	8016c7c <_sbrk>
 8012c14:	1c43      	adds	r3, r0, #1
 8012c16:	d102      	bne.n	8012c1e <_sbrk_r+0x1a>
 8012c18:	682b      	ldr	r3, [r5, #0]
 8012c1a:	b103      	cbz	r3, 8012c1e <_sbrk_r+0x1a>
 8012c1c:	6023      	str	r3, [r4, #0]
 8012c1e:	bd38      	pop	{r3, r4, r5, pc}
 8012c20:	200064bc 	.word	0x200064bc

08012c24 <nanf>:
 8012c24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012c2c <nanf+0x8>
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	7fc00000 	.word	0x7fc00000

08012c30 <_raise_r>:
 8012c30:	291f      	cmp	r1, #31
 8012c32:	b538      	push	{r3, r4, r5, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	460d      	mov	r5, r1
 8012c38:	d904      	bls.n	8012c44 <_raise_r+0x14>
 8012c3a:	2316      	movs	r3, #22
 8012c3c:	6003      	str	r3, [r0, #0]
 8012c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c42:	bd38      	pop	{r3, r4, r5, pc}
 8012c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c46:	b112      	cbz	r2, 8012c4e <_raise_r+0x1e>
 8012c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c4c:	b94b      	cbnz	r3, 8012c62 <_raise_r+0x32>
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f000 f830 	bl	8012cb4 <_getpid_r>
 8012c54:	462a      	mov	r2, r5
 8012c56:	4601      	mov	r1, r0
 8012c58:	4620      	mov	r0, r4
 8012c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c5e:	f000 b817 	b.w	8012c90 <_kill_r>
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d00a      	beq.n	8012c7c <_raise_r+0x4c>
 8012c66:	1c59      	adds	r1, r3, #1
 8012c68:	d103      	bne.n	8012c72 <_raise_r+0x42>
 8012c6a:	2316      	movs	r3, #22
 8012c6c:	6003      	str	r3, [r0, #0]
 8012c6e:	2001      	movs	r0, #1
 8012c70:	e7e7      	b.n	8012c42 <_raise_r+0x12>
 8012c72:	2400      	movs	r4, #0
 8012c74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c78:	4628      	mov	r0, r5
 8012c7a:	4798      	blx	r3
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	e7e0      	b.n	8012c42 <_raise_r+0x12>

08012c80 <raise>:
 8012c80:	4b02      	ldr	r3, [pc, #8]	; (8012c8c <raise+0xc>)
 8012c82:	4601      	mov	r1, r0
 8012c84:	6818      	ldr	r0, [r3, #0]
 8012c86:	f7ff bfd3 	b.w	8012c30 <_raise_r>
 8012c8a:	bf00      	nop
 8012c8c:	200000d8 	.word	0x200000d8

08012c90 <_kill_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d07      	ldr	r5, [pc, #28]	; (8012cb0 <_kill_r+0x20>)
 8012c94:	2300      	movs	r3, #0
 8012c96:	4604      	mov	r4, r0
 8012c98:	4608      	mov	r0, r1
 8012c9a:	4611      	mov	r1, r2
 8012c9c:	602b      	str	r3, [r5, #0]
 8012c9e:	f003 ffd5 	bl	8016c4c <_kill>
 8012ca2:	1c43      	adds	r3, r0, #1
 8012ca4:	d102      	bne.n	8012cac <_kill_r+0x1c>
 8012ca6:	682b      	ldr	r3, [r5, #0]
 8012ca8:	b103      	cbz	r3, 8012cac <_kill_r+0x1c>
 8012caa:	6023      	str	r3, [r4, #0]
 8012cac:	bd38      	pop	{r3, r4, r5, pc}
 8012cae:	bf00      	nop
 8012cb0:	200064bc 	.word	0x200064bc

08012cb4 <_getpid_r>:
 8012cb4:	f003 bfba 	b.w	8016c2c <_getpid>

08012cb8 <siprintf>:
 8012cb8:	b40e      	push	{r1, r2, r3}
 8012cba:	b500      	push	{lr}
 8012cbc:	b09c      	sub	sp, #112	; 0x70
 8012cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8012cc0:	9002      	str	r0, [sp, #8]
 8012cc2:	9006      	str	r0, [sp, #24]
 8012cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012cc8:	4809      	ldr	r0, [pc, #36]	; (8012cf0 <siprintf+0x38>)
 8012cca:	9107      	str	r1, [sp, #28]
 8012ccc:	9104      	str	r1, [sp, #16]
 8012cce:	4909      	ldr	r1, [pc, #36]	; (8012cf4 <siprintf+0x3c>)
 8012cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cd4:	9105      	str	r1, [sp, #20]
 8012cd6:	6800      	ldr	r0, [r0, #0]
 8012cd8:	9301      	str	r3, [sp, #4]
 8012cda:	a902      	add	r1, sp, #8
 8012cdc:	f003 f960 	bl	8015fa0 <_svfiprintf_r>
 8012ce0:	9b02      	ldr	r3, [sp, #8]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	701a      	strb	r2, [r3, #0]
 8012ce6:	b01c      	add	sp, #112	; 0x70
 8012ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cec:	b003      	add	sp, #12
 8012cee:	4770      	bx	lr
 8012cf0:	200000d8 	.word	0x200000d8
 8012cf4:	ffff0208 	.word	0xffff0208

08012cf8 <siscanf>:
 8012cf8:	b40e      	push	{r1, r2, r3}
 8012cfa:	b510      	push	{r4, lr}
 8012cfc:	b09f      	sub	sp, #124	; 0x7c
 8012cfe:	ac21      	add	r4, sp, #132	; 0x84
 8012d00:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012d04:	f854 2b04 	ldr.w	r2, [r4], #4
 8012d08:	9201      	str	r2, [sp, #4]
 8012d0a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012d0e:	9004      	str	r0, [sp, #16]
 8012d10:	9008      	str	r0, [sp, #32]
 8012d12:	f7ed fa6d 	bl	80001f0 <strlen>
 8012d16:	4b0c      	ldr	r3, [pc, #48]	; (8012d48 <siscanf+0x50>)
 8012d18:	9005      	str	r0, [sp, #20]
 8012d1a:	9009      	str	r0, [sp, #36]	; 0x24
 8012d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8012d1e:	480b      	ldr	r0, [pc, #44]	; (8012d4c <siscanf+0x54>)
 8012d20:	9a01      	ldr	r2, [sp, #4]
 8012d22:	6800      	ldr	r0, [r0, #0]
 8012d24:	9403      	str	r4, [sp, #12]
 8012d26:	2300      	movs	r3, #0
 8012d28:	9311      	str	r3, [sp, #68]	; 0x44
 8012d2a:	9316      	str	r3, [sp, #88]	; 0x58
 8012d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012d34:	a904      	add	r1, sp, #16
 8012d36:	4623      	mov	r3, r4
 8012d38:	f003 fa8c 	bl	8016254 <__ssvfiscanf_r>
 8012d3c:	b01f      	add	sp, #124	; 0x7c
 8012d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d42:	b003      	add	sp, #12
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	08012d73 	.word	0x08012d73
 8012d4c:	200000d8 	.word	0x200000d8

08012d50 <__sread>:
 8012d50:	b510      	push	{r4, lr}
 8012d52:	460c      	mov	r4, r1
 8012d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d58:	f003 fe9a 	bl	8016a90 <_read_r>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	bfab      	itete	ge
 8012d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d62:	89a3      	ldrhlt	r3, [r4, #12]
 8012d64:	181b      	addge	r3, r3, r0
 8012d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d6a:	bfac      	ite	ge
 8012d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d6e:	81a3      	strhlt	r3, [r4, #12]
 8012d70:	bd10      	pop	{r4, pc}

08012d72 <__seofread>:
 8012d72:	2000      	movs	r0, #0
 8012d74:	4770      	bx	lr

08012d76 <__swrite>:
 8012d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7a:	461f      	mov	r7, r3
 8012d7c:	898b      	ldrh	r3, [r1, #12]
 8012d7e:	05db      	lsls	r3, r3, #23
 8012d80:	4605      	mov	r5, r0
 8012d82:	460c      	mov	r4, r1
 8012d84:	4616      	mov	r6, r2
 8012d86:	d505      	bpl.n	8012d94 <__swrite+0x1e>
 8012d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d8c:	2302      	movs	r3, #2
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f002 fb26 	bl	80153e0 <_lseek_r>
 8012d94:	89a3      	ldrh	r3, [r4, #12]
 8012d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d9e:	81a3      	strh	r3, [r4, #12]
 8012da0:	4632      	mov	r2, r6
 8012da2:	463b      	mov	r3, r7
 8012da4:	4628      	mov	r0, r5
 8012da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012daa:	f000 bfab 	b.w	8013d04 <_write_r>

08012dae <__sseek>:
 8012dae:	b510      	push	{r4, lr}
 8012db0:	460c      	mov	r4, r1
 8012db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012db6:	f002 fb13 	bl	80153e0 <_lseek_r>
 8012dba:	1c43      	adds	r3, r0, #1
 8012dbc:	89a3      	ldrh	r3, [r4, #12]
 8012dbe:	bf15      	itete	ne
 8012dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012dca:	81a3      	strheq	r3, [r4, #12]
 8012dcc:	bf18      	it	ne
 8012dce:	81a3      	strhne	r3, [r4, #12]
 8012dd0:	bd10      	pop	{r4, pc}

08012dd2 <__sclose>:
 8012dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dd6:	f001 b833 	b.w	8013e40 <_close_r>

08012dda <strncmp>:
 8012dda:	b510      	push	{r4, lr}
 8012ddc:	b16a      	cbz	r2, 8012dfa <strncmp+0x20>
 8012dde:	3901      	subs	r1, #1
 8012de0:	1884      	adds	r4, r0, r2
 8012de2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012de6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d103      	bne.n	8012df6 <strncmp+0x1c>
 8012dee:	42a0      	cmp	r0, r4
 8012df0:	d001      	beq.n	8012df6 <strncmp+0x1c>
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1f5      	bne.n	8012de2 <strncmp+0x8>
 8012df6:	1a98      	subs	r0, r3, r2
 8012df8:	bd10      	pop	{r4, pc}
 8012dfa:	4610      	mov	r0, r2
 8012dfc:	e7fc      	b.n	8012df8 <strncmp+0x1e>

08012dfe <sulp>:
 8012dfe:	b570      	push	{r4, r5, r6, lr}
 8012e00:	4604      	mov	r4, r0
 8012e02:	460d      	mov	r5, r1
 8012e04:	ec45 4b10 	vmov	d0, r4, r5
 8012e08:	4616      	mov	r6, r2
 8012e0a:	f002 fee9 	bl	8015be0 <__ulp>
 8012e0e:	ec51 0b10 	vmov	r0, r1, d0
 8012e12:	b17e      	cbz	r6, 8012e34 <sulp+0x36>
 8012e14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	dd09      	ble.n	8012e34 <sulp+0x36>
 8012e20:	051b      	lsls	r3, r3, #20
 8012e22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012e26:	2400      	movs	r4, #0
 8012e28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	462b      	mov	r3, r5
 8012e30:	f7ed fbf2 	bl	8000618 <__aeabi_dmul>
 8012e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08012e38 <_strtod_l>:
 8012e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	b0a3      	sub	sp, #140	; 0x8c
 8012e3e:	461f      	mov	r7, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	931e      	str	r3, [sp, #120]	; 0x78
 8012e44:	4ba4      	ldr	r3, [pc, #656]	; (80130d8 <_strtod_l+0x2a0>)
 8012e46:	9219      	str	r2, [sp, #100]	; 0x64
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	9307      	str	r3, [sp, #28]
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	4618      	mov	r0, r3
 8012e50:	4688      	mov	r8, r1
 8012e52:	f7ed f9cd 	bl	80001f0 <strlen>
 8012e56:	f04f 0a00 	mov.w	sl, #0
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	f04f 0b00 	mov.w	fp, #0
 8012e60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e66:	781a      	ldrb	r2, [r3, #0]
 8012e68:	2a2b      	cmp	r2, #43	; 0x2b
 8012e6a:	d04c      	beq.n	8012f06 <_strtod_l+0xce>
 8012e6c:	d839      	bhi.n	8012ee2 <_strtod_l+0xaa>
 8012e6e:	2a0d      	cmp	r2, #13
 8012e70:	d832      	bhi.n	8012ed8 <_strtod_l+0xa0>
 8012e72:	2a08      	cmp	r2, #8
 8012e74:	d832      	bhi.n	8012edc <_strtod_l+0xa4>
 8012e76:	2a00      	cmp	r2, #0
 8012e78:	d03c      	beq.n	8012ef4 <_strtod_l+0xbc>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8012e7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012e80:	7833      	ldrb	r3, [r6, #0]
 8012e82:	2b30      	cmp	r3, #48	; 0x30
 8012e84:	f040 80b4 	bne.w	8012ff0 <_strtod_l+0x1b8>
 8012e88:	7873      	ldrb	r3, [r6, #1]
 8012e8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012e8e:	2b58      	cmp	r3, #88	; 0x58
 8012e90:	d16c      	bne.n	8012f6c <_strtod_l+0x134>
 8012e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e94:	9301      	str	r3, [sp, #4]
 8012e96:	ab1e      	add	r3, sp, #120	; 0x78
 8012e98:	9702      	str	r7, [sp, #8]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	4a8f      	ldr	r2, [pc, #572]	; (80130dc <_strtod_l+0x2a4>)
 8012e9e:	ab1f      	add	r3, sp, #124	; 0x7c
 8012ea0:	a91d      	add	r1, sp, #116	; 0x74
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f001 ff90 	bl	8014dc8 <__gethex>
 8012ea8:	f010 0707 	ands.w	r7, r0, #7
 8012eac:	4605      	mov	r5, r0
 8012eae:	d005      	beq.n	8012ebc <_strtod_l+0x84>
 8012eb0:	2f06      	cmp	r7, #6
 8012eb2:	d12a      	bne.n	8012f0a <_strtod_l+0xd2>
 8012eb4:	3601      	adds	r6, #1
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	961d      	str	r6, [sp, #116]	; 0x74
 8012eba:	930e      	str	r3, [sp, #56]	; 0x38
 8012ebc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f040 8596 	bne.w	80139f0 <_strtod_l+0xbb8>
 8012ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ec6:	b1db      	cbz	r3, 8012f00 <_strtod_l+0xc8>
 8012ec8:	4652      	mov	r2, sl
 8012eca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012ece:	ec43 2b10 	vmov	d0, r2, r3
 8012ed2:	b023      	add	sp, #140	; 0x8c
 8012ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed8:	2a20      	cmp	r2, #32
 8012eda:	d1ce      	bne.n	8012e7a <_strtod_l+0x42>
 8012edc:	3301      	adds	r3, #1
 8012ede:	931d      	str	r3, [sp, #116]	; 0x74
 8012ee0:	e7c0      	b.n	8012e64 <_strtod_l+0x2c>
 8012ee2:	2a2d      	cmp	r2, #45	; 0x2d
 8012ee4:	d1c9      	bne.n	8012e7a <_strtod_l+0x42>
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	920e      	str	r2, [sp, #56]	; 0x38
 8012eea:	1c5a      	adds	r2, r3, #1
 8012eec:	921d      	str	r2, [sp, #116]	; 0x74
 8012eee:	785b      	ldrb	r3, [r3, #1]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1c4      	bne.n	8012e7e <_strtod_l+0x46>
 8012ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ef6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f040 8576 	bne.w	80139ec <_strtod_l+0xbb4>
 8012f00:	4652      	mov	r2, sl
 8012f02:	465b      	mov	r3, fp
 8012f04:	e7e3      	b.n	8012ece <_strtod_l+0x96>
 8012f06:	2200      	movs	r2, #0
 8012f08:	e7ee      	b.n	8012ee8 <_strtod_l+0xb0>
 8012f0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012f0c:	b13a      	cbz	r2, 8012f1e <_strtod_l+0xe6>
 8012f0e:	2135      	movs	r1, #53	; 0x35
 8012f10:	a820      	add	r0, sp, #128	; 0x80
 8012f12:	f002 ff70 	bl	8015df6 <__copybits>
 8012f16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f002 fb35 	bl	8015588 <_Bfree>
 8012f1e:	3f01      	subs	r7, #1
 8012f20:	2f05      	cmp	r7, #5
 8012f22:	d807      	bhi.n	8012f34 <_strtod_l+0xfc>
 8012f24:	e8df f007 	tbb	[pc, r7]
 8012f28:	1d180b0e 	.word	0x1d180b0e
 8012f2c:	030e      	.short	0x030e
 8012f2e:	f04f 0b00 	mov.w	fp, #0
 8012f32:	46da      	mov	sl, fp
 8012f34:	0728      	lsls	r0, r5, #28
 8012f36:	d5c1      	bpl.n	8012ebc <_strtod_l+0x84>
 8012f38:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012f3c:	e7be      	b.n	8012ebc <_strtod_l+0x84>
 8012f3e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012f42:	e7f7      	b.n	8012f34 <_strtod_l+0xfc>
 8012f44:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012f48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012f4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012f52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012f56:	e7ed      	b.n	8012f34 <_strtod_l+0xfc>
 8012f58:	f8df b184 	ldr.w	fp, [pc, #388]	; 80130e0 <_strtod_l+0x2a8>
 8012f5c:	f04f 0a00 	mov.w	sl, #0
 8012f60:	e7e8      	b.n	8012f34 <_strtod_l+0xfc>
 8012f62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012f66:	f04f 3aff 	mov.w	sl, #4294967295
 8012f6a:	e7e3      	b.n	8012f34 <_strtod_l+0xfc>
 8012f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f6e:	1c5a      	adds	r2, r3, #1
 8012f70:	921d      	str	r2, [sp, #116]	; 0x74
 8012f72:	785b      	ldrb	r3, [r3, #1]
 8012f74:	2b30      	cmp	r3, #48	; 0x30
 8012f76:	d0f9      	beq.n	8012f6c <_strtod_l+0x134>
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d09f      	beq.n	8012ebc <_strtod_l+0x84>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	f04f 0900 	mov.w	r9, #0
 8012f82:	9304      	str	r3, [sp, #16]
 8012f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f86:	930a      	str	r3, [sp, #40]	; 0x28
 8012f88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012f8c:	464f      	mov	r7, r9
 8012f8e:	220a      	movs	r2, #10
 8012f90:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012f92:	7806      	ldrb	r6, [r0, #0]
 8012f94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012f98:	b2d9      	uxtb	r1, r3
 8012f9a:	2909      	cmp	r1, #9
 8012f9c:	d92a      	bls.n	8012ff4 <_strtod_l+0x1bc>
 8012f9e:	9907      	ldr	r1, [sp, #28]
 8012fa0:	462a      	mov	r2, r5
 8012fa2:	f7ff ff1a 	bl	8012dda <strncmp>
 8012fa6:	b398      	cbz	r0, 8013010 <_strtod_l+0x1d8>
 8012fa8:	2000      	movs	r0, #0
 8012faa:	4633      	mov	r3, r6
 8012fac:	463d      	mov	r5, r7
 8012fae:	9007      	str	r0, [sp, #28]
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	2b65      	cmp	r3, #101	; 0x65
 8012fb4:	d001      	beq.n	8012fba <_strtod_l+0x182>
 8012fb6:	2b45      	cmp	r3, #69	; 0x45
 8012fb8:	d118      	bne.n	8012fec <_strtod_l+0x1b4>
 8012fba:	b91d      	cbnz	r5, 8012fc4 <_strtod_l+0x18c>
 8012fbc:	9b04      	ldr	r3, [sp, #16]
 8012fbe:	4303      	orrs	r3, r0
 8012fc0:	d098      	beq.n	8012ef4 <_strtod_l+0xbc>
 8012fc2:	2500      	movs	r5, #0
 8012fc4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012fc8:	f108 0301 	add.w	r3, r8, #1
 8012fcc:	931d      	str	r3, [sp, #116]	; 0x74
 8012fce:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012fd2:	2b2b      	cmp	r3, #43	; 0x2b
 8012fd4:	d075      	beq.n	80130c2 <_strtod_l+0x28a>
 8012fd6:	2b2d      	cmp	r3, #45	; 0x2d
 8012fd8:	d07b      	beq.n	80130d2 <_strtod_l+0x29a>
 8012fda:	f04f 0c00 	mov.w	ip, #0
 8012fde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012fe2:	2909      	cmp	r1, #9
 8012fe4:	f240 8082 	bls.w	80130ec <_strtod_l+0x2b4>
 8012fe8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012fec:	2600      	movs	r6, #0
 8012fee:	e09d      	b.n	801312c <_strtod_l+0x2f4>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	e7c4      	b.n	8012f7e <_strtod_l+0x146>
 8012ff4:	2f08      	cmp	r7, #8
 8012ff6:	bfd8      	it	le
 8012ff8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012ffa:	f100 0001 	add.w	r0, r0, #1
 8012ffe:	bfda      	itte	le
 8013000:	fb02 3301 	mlale	r3, r2, r1, r3
 8013004:	9309      	strle	r3, [sp, #36]	; 0x24
 8013006:	fb02 3909 	mlagt	r9, r2, r9, r3
 801300a:	3701      	adds	r7, #1
 801300c:	901d      	str	r0, [sp, #116]	; 0x74
 801300e:	e7bf      	b.n	8012f90 <_strtod_l+0x158>
 8013010:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013012:	195a      	adds	r2, r3, r5
 8013014:	921d      	str	r2, [sp, #116]	; 0x74
 8013016:	5d5b      	ldrb	r3, [r3, r5]
 8013018:	2f00      	cmp	r7, #0
 801301a:	d037      	beq.n	801308c <_strtod_l+0x254>
 801301c:	9007      	str	r0, [sp, #28]
 801301e:	463d      	mov	r5, r7
 8013020:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013024:	2a09      	cmp	r2, #9
 8013026:	d912      	bls.n	801304e <_strtod_l+0x216>
 8013028:	2201      	movs	r2, #1
 801302a:	e7c2      	b.n	8012fb2 <_strtod_l+0x17a>
 801302c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	921d      	str	r2, [sp, #116]	; 0x74
 8013032:	785b      	ldrb	r3, [r3, #1]
 8013034:	3001      	adds	r0, #1
 8013036:	2b30      	cmp	r3, #48	; 0x30
 8013038:	d0f8      	beq.n	801302c <_strtod_l+0x1f4>
 801303a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801303e:	2a08      	cmp	r2, #8
 8013040:	f200 84db 	bhi.w	80139fa <_strtod_l+0xbc2>
 8013044:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013046:	9007      	str	r0, [sp, #28]
 8013048:	2000      	movs	r0, #0
 801304a:	920a      	str	r2, [sp, #40]	; 0x28
 801304c:	4605      	mov	r5, r0
 801304e:	3b30      	subs	r3, #48	; 0x30
 8013050:	f100 0201 	add.w	r2, r0, #1
 8013054:	d014      	beq.n	8013080 <_strtod_l+0x248>
 8013056:	9907      	ldr	r1, [sp, #28]
 8013058:	4411      	add	r1, r2
 801305a:	9107      	str	r1, [sp, #28]
 801305c:	462a      	mov	r2, r5
 801305e:	eb00 0e05 	add.w	lr, r0, r5
 8013062:	210a      	movs	r1, #10
 8013064:	4572      	cmp	r2, lr
 8013066:	d113      	bne.n	8013090 <_strtod_l+0x258>
 8013068:	182a      	adds	r2, r5, r0
 801306a:	2a08      	cmp	r2, #8
 801306c:	f105 0501 	add.w	r5, r5, #1
 8013070:	4405      	add	r5, r0
 8013072:	dc1c      	bgt.n	80130ae <_strtod_l+0x276>
 8013074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013076:	220a      	movs	r2, #10
 8013078:	fb02 3301 	mla	r3, r2, r1, r3
 801307c:	9309      	str	r3, [sp, #36]	; 0x24
 801307e:	2200      	movs	r2, #0
 8013080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013082:	1c59      	adds	r1, r3, #1
 8013084:	911d      	str	r1, [sp, #116]	; 0x74
 8013086:	785b      	ldrb	r3, [r3, #1]
 8013088:	4610      	mov	r0, r2
 801308a:	e7c9      	b.n	8013020 <_strtod_l+0x1e8>
 801308c:	4638      	mov	r0, r7
 801308e:	e7d2      	b.n	8013036 <_strtod_l+0x1fe>
 8013090:	2a08      	cmp	r2, #8
 8013092:	dc04      	bgt.n	801309e <_strtod_l+0x266>
 8013094:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013096:	434e      	muls	r6, r1
 8013098:	9609      	str	r6, [sp, #36]	; 0x24
 801309a:	3201      	adds	r2, #1
 801309c:	e7e2      	b.n	8013064 <_strtod_l+0x22c>
 801309e:	f102 0c01 	add.w	ip, r2, #1
 80130a2:	f1bc 0f10 	cmp.w	ip, #16
 80130a6:	bfd8      	it	le
 80130a8:	fb01 f909 	mulle.w	r9, r1, r9
 80130ac:	e7f5      	b.n	801309a <_strtod_l+0x262>
 80130ae:	2d10      	cmp	r5, #16
 80130b0:	bfdc      	itt	le
 80130b2:	220a      	movle	r2, #10
 80130b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80130b8:	e7e1      	b.n	801307e <_strtod_l+0x246>
 80130ba:	2300      	movs	r3, #0
 80130bc:	9307      	str	r3, [sp, #28]
 80130be:	2201      	movs	r2, #1
 80130c0:	e77c      	b.n	8012fbc <_strtod_l+0x184>
 80130c2:	f04f 0c00 	mov.w	ip, #0
 80130c6:	f108 0302 	add.w	r3, r8, #2
 80130ca:	931d      	str	r3, [sp, #116]	; 0x74
 80130cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80130d0:	e785      	b.n	8012fde <_strtod_l+0x1a6>
 80130d2:	f04f 0c01 	mov.w	ip, #1
 80130d6:	e7f6      	b.n	80130c6 <_strtod_l+0x28e>
 80130d8:	08018f74 	.word	0x08018f74
 80130dc:	08018de8 	.word	0x08018de8
 80130e0:	7ff00000 	.word	0x7ff00000
 80130e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130e6:	1c59      	adds	r1, r3, #1
 80130e8:	911d      	str	r1, [sp, #116]	; 0x74
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	2b30      	cmp	r3, #48	; 0x30
 80130ee:	d0f9      	beq.n	80130e4 <_strtod_l+0x2ac>
 80130f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80130f4:	2908      	cmp	r1, #8
 80130f6:	f63f af79 	bhi.w	8012fec <_strtod_l+0x1b4>
 80130fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80130fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013104:	1c59      	adds	r1, r3, #1
 8013106:	911d      	str	r1, [sp, #116]	; 0x74
 8013108:	785b      	ldrb	r3, [r3, #1]
 801310a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801310e:	2e09      	cmp	r6, #9
 8013110:	d937      	bls.n	8013182 <_strtod_l+0x34a>
 8013112:	9e08      	ldr	r6, [sp, #32]
 8013114:	1b89      	subs	r1, r1, r6
 8013116:	2908      	cmp	r1, #8
 8013118:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801311c:	dc02      	bgt.n	8013124 <_strtod_l+0x2ec>
 801311e:	4576      	cmp	r6, lr
 8013120:	bfa8      	it	ge
 8013122:	4676      	movge	r6, lr
 8013124:	f1bc 0f00 	cmp.w	ip, #0
 8013128:	d000      	beq.n	801312c <_strtod_l+0x2f4>
 801312a:	4276      	negs	r6, r6
 801312c:	2d00      	cmp	r5, #0
 801312e:	d14f      	bne.n	80131d0 <_strtod_l+0x398>
 8013130:	9904      	ldr	r1, [sp, #16]
 8013132:	4301      	orrs	r1, r0
 8013134:	f47f aec2 	bne.w	8012ebc <_strtod_l+0x84>
 8013138:	2a00      	cmp	r2, #0
 801313a:	f47f aedb 	bne.w	8012ef4 <_strtod_l+0xbc>
 801313e:	2b69      	cmp	r3, #105	; 0x69
 8013140:	d027      	beq.n	8013192 <_strtod_l+0x35a>
 8013142:	dc24      	bgt.n	801318e <_strtod_l+0x356>
 8013144:	2b49      	cmp	r3, #73	; 0x49
 8013146:	d024      	beq.n	8013192 <_strtod_l+0x35a>
 8013148:	2b4e      	cmp	r3, #78	; 0x4e
 801314a:	f47f aed3 	bne.w	8012ef4 <_strtod_l+0xbc>
 801314e:	499e      	ldr	r1, [pc, #632]	; (80133c8 <_strtod_l+0x590>)
 8013150:	a81d      	add	r0, sp, #116	; 0x74
 8013152:	f002 f891 	bl	8015278 <__match>
 8013156:	2800      	cmp	r0, #0
 8013158:	f43f aecc 	beq.w	8012ef4 <_strtod_l+0xbc>
 801315c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2b28      	cmp	r3, #40	; 0x28
 8013162:	d12d      	bne.n	80131c0 <_strtod_l+0x388>
 8013164:	4999      	ldr	r1, [pc, #612]	; (80133cc <_strtod_l+0x594>)
 8013166:	aa20      	add	r2, sp, #128	; 0x80
 8013168:	a81d      	add	r0, sp, #116	; 0x74
 801316a:	f002 f899 	bl	80152a0 <__hexnan>
 801316e:	2805      	cmp	r0, #5
 8013170:	d126      	bne.n	80131c0 <_strtod_l+0x388>
 8013172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013174:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013178:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801317c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013180:	e69c      	b.n	8012ebc <_strtod_l+0x84>
 8013182:	210a      	movs	r1, #10
 8013184:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013188:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801318c:	e7b9      	b.n	8013102 <_strtod_l+0x2ca>
 801318e:	2b6e      	cmp	r3, #110	; 0x6e
 8013190:	e7db      	b.n	801314a <_strtod_l+0x312>
 8013192:	498f      	ldr	r1, [pc, #572]	; (80133d0 <_strtod_l+0x598>)
 8013194:	a81d      	add	r0, sp, #116	; 0x74
 8013196:	f002 f86f 	bl	8015278 <__match>
 801319a:	2800      	cmp	r0, #0
 801319c:	f43f aeaa 	beq.w	8012ef4 <_strtod_l+0xbc>
 80131a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131a2:	498c      	ldr	r1, [pc, #560]	; (80133d4 <_strtod_l+0x59c>)
 80131a4:	3b01      	subs	r3, #1
 80131a6:	a81d      	add	r0, sp, #116	; 0x74
 80131a8:	931d      	str	r3, [sp, #116]	; 0x74
 80131aa:	f002 f865 	bl	8015278 <__match>
 80131ae:	b910      	cbnz	r0, 80131b6 <_strtod_l+0x37e>
 80131b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131b2:	3301      	adds	r3, #1
 80131b4:	931d      	str	r3, [sp, #116]	; 0x74
 80131b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80133e4 <_strtod_l+0x5ac>
 80131ba:	f04f 0a00 	mov.w	sl, #0
 80131be:	e67d      	b.n	8012ebc <_strtod_l+0x84>
 80131c0:	4885      	ldr	r0, [pc, #532]	; (80133d8 <_strtod_l+0x5a0>)
 80131c2:	f7fe fa85 	bl	80116d0 <nan>
 80131c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80131ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80131ce:	e675      	b.n	8012ebc <_strtod_l+0x84>
 80131d0:	9b07      	ldr	r3, [sp, #28]
 80131d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131d4:	1af3      	subs	r3, r6, r3
 80131d6:	2f00      	cmp	r7, #0
 80131d8:	bf08      	it	eq
 80131da:	462f      	moveq	r7, r5
 80131dc:	2d10      	cmp	r5, #16
 80131de:	9308      	str	r3, [sp, #32]
 80131e0:	46a8      	mov	r8, r5
 80131e2:	bfa8      	it	ge
 80131e4:	f04f 0810 	movge.w	r8, #16
 80131e8:	f7ed f99c 	bl	8000524 <__aeabi_ui2d>
 80131ec:	2d09      	cmp	r5, #9
 80131ee:	4682      	mov	sl, r0
 80131f0:	468b      	mov	fp, r1
 80131f2:	dd13      	ble.n	801321c <_strtod_l+0x3e4>
 80131f4:	4b79      	ldr	r3, [pc, #484]	; (80133dc <_strtod_l+0x5a4>)
 80131f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80131fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80131fe:	f7ed fa0b 	bl	8000618 <__aeabi_dmul>
 8013202:	4682      	mov	sl, r0
 8013204:	4648      	mov	r0, r9
 8013206:	468b      	mov	fp, r1
 8013208:	f7ed f98c 	bl	8000524 <__aeabi_ui2d>
 801320c:	4602      	mov	r2, r0
 801320e:	460b      	mov	r3, r1
 8013210:	4650      	mov	r0, sl
 8013212:	4659      	mov	r1, fp
 8013214:	f7ed f84a 	bl	80002ac <__adddf3>
 8013218:	4682      	mov	sl, r0
 801321a:	468b      	mov	fp, r1
 801321c:	2d0f      	cmp	r5, #15
 801321e:	dc38      	bgt.n	8013292 <_strtod_l+0x45a>
 8013220:	9b08      	ldr	r3, [sp, #32]
 8013222:	2b00      	cmp	r3, #0
 8013224:	f43f ae4a 	beq.w	8012ebc <_strtod_l+0x84>
 8013228:	dd24      	ble.n	8013274 <_strtod_l+0x43c>
 801322a:	2b16      	cmp	r3, #22
 801322c:	dc0b      	bgt.n	8013246 <_strtod_l+0x40e>
 801322e:	4d6b      	ldr	r5, [pc, #428]	; (80133dc <_strtod_l+0x5a4>)
 8013230:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013234:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013238:	4652      	mov	r2, sl
 801323a:	465b      	mov	r3, fp
 801323c:	f7ed f9ec 	bl	8000618 <__aeabi_dmul>
 8013240:	4682      	mov	sl, r0
 8013242:	468b      	mov	fp, r1
 8013244:	e63a      	b.n	8012ebc <_strtod_l+0x84>
 8013246:	9a08      	ldr	r2, [sp, #32]
 8013248:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801324c:	4293      	cmp	r3, r2
 801324e:	db20      	blt.n	8013292 <_strtod_l+0x45a>
 8013250:	4c62      	ldr	r4, [pc, #392]	; (80133dc <_strtod_l+0x5a4>)
 8013252:	f1c5 050f 	rsb	r5, r5, #15
 8013256:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801325a:	4652      	mov	r2, sl
 801325c:	465b      	mov	r3, fp
 801325e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013262:	f7ed f9d9 	bl	8000618 <__aeabi_dmul>
 8013266:	9b08      	ldr	r3, [sp, #32]
 8013268:	1b5d      	subs	r5, r3, r5
 801326a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801326e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013272:	e7e3      	b.n	801323c <_strtod_l+0x404>
 8013274:	9b08      	ldr	r3, [sp, #32]
 8013276:	3316      	adds	r3, #22
 8013278:	db0b      	blt.n	8013292 <_strtod_l+0x45a>
 801327a:	9b07      	ldr	r3, [sp, #28]
 801327c:	4a57      	ldr	r2, [pc, #348]	; (80133dc <_strtod_l+0x5a4>)
 801327e:	1b9e      	subs	r6, r3, r6
 8013280:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013284:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013288:	4650      	mov	r0, sl
 801328a:	4659      	mov	r1, fp
 801328c:	f7ed faee 	bl	800086c <__aeabi_ddiv>
 8013290:	e7d6      	b.n	8013240 <_strtod_l+0x408>
 8013292:	9b08      	ldr	r3, [sp, #32]
 8013294:	eba5 0808 	sub.w	r8, r5, r8
 8013298:	4498      	add	r8, r3
 801329a:	f1b8 0f00 	cmp.w	r8, #0
 801329e:	dd71      	ble.n	8013384 <_strtod_l+0x54c>
 80132a0:	f018 030f 	ands.w	r3, r8, #15
 80132a4:	d00a      	beq.n	80132bc <_strtod_l+0x484>
 80132a6:	494d      	ldr	r1, [pc, #308]	; (80133dc <_strtod_l+0x5a4>)
 80132a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80132ac:	4652      	mov	r2, sl
 80132ae:	465b      	mov	r3, fp
 80132b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132b4:	f7ed f9b0 	bl	8000618 <__aeabi_dmul>
 80132b8:	4682      	mov	sl, r0
 80132ba:	468b      	mov	fp, r1
 80132bc:	f038 080f 	bics.w	r8, r8, #15
 80132c0:	d04d      	beq.n	801335e <_strtod_l+0x526>
 80132c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80132c6:	dd22      	ble.n	801330e <_strtod_l+0x4d6>
 80132c8:	2500      	movs	r5, #0
 80132ca:	462e      	mov	r6, r5
 80132cc:	9509      	str	r5, [sp, #36]	; 0x24
 80132ce:	9507      	str	r5, [sp, #28]
 80132d0:	2322      	movs	r3, #34	; 0x22
 80132d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80133e4 <_strtod_l+0x5ac>
 80132d6:	6023      	str	r3, [r4, #0]
 80132d8:	f04f 0a00 	mov.w	sl, #0
 80132dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f43f adec 	beq.w	8012ebc <_strtod_l+0x84>
 80132e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80132e6:	4620      	mov	r0, r4
 80132e8:	f002 f94e 	bl	8015588 <_Bfree>
 80132ec:	9907      	ldr	r1, [sp, #28]
 80132ee:	4620      	mov	r0, r4
 80132f0:	f002 f94a 	bl	8015588 <_Bfree>
 80132f4:	4631      	mov	r1, r6
 80132f6:	4620      	mov	r0, r4
 80132f8:	f002 f946 	bl	8015588 <_Bfree>
 80132fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132fe:	4620      	mov	r0, r4
 8013300:	f002 f942 	bl	8015588 <_Bfree>
 8013304:	4629      	mov	r1, r5
 8013306:	4620      	mov	r0, r4
 8013308:	f002 f93e 	bl	8015588 <_Bfree>
 801330c:	e5d6      	b.n	8012ebc <_strtod_l+0x84>
 801330e:	2300      	movs	r3, #0
 8013310:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013314:	4650      	mov	r0, sl
 8013316:	4659      	mov	r1, fp
 8013318:	4699      	mov	r9, r3
 801331a:	f1b8 0f01 	cmp.w	r8, #1
 801331e:	dc21      	bgt.n	8013364 <_strtod_l+0x52c>
 8013320:	b10b      	cbz	r3, 8013326 <_strtod_l+0x4ee>
 8013322:	4682      	mov	sl, r0
 8013324:	468b      	mov	fp, r1
 8013326:	4b2e      	ldr	r3, [pc, #184]	; (80133e0 <_strtod_l+0x5a8>)
 8013328:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801332c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013330:	4652      	mov	r2, sl
 8013332:	465b      	mov	r3, fp
 8013334:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013338:	f7ed f96e 	bl	8000618 <__aeabi_dmul>
 801333c:	4b29      	ldr	r3, [pc, #164]	; (80133e4 <_strtod_l+0x5ac>)
 801333e:	460a      	mov	r2, r1
 8013340:	400b      	ands	r3, r1
 8013342:	4929      	ldr	r1, [pc, #164]	; (80133e8 <_strtod_l+0x5b0>)
 8013344:	428b      	cmp	r3, r1
 8013346:	4682      	mov	sl, r0
 8013348:	d8be      	bhi.n	80132c8 <_strtod_l+0x490>
 801334a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801334e:	428b      	cmp	r3, r1
 8013350:	bf86      	itte	hi
 8013352:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80133ec <_strtod_l+0x5b4>
 8013356:	f04f 3aff 	movhi.w	sl, #4294967295
 801335a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801335e:	2300      	movs	r3, #0
 8013360:	9304      	str	r3, [sp, #16]
 8013362:	e081      	b.n	8013468 <_strtod_l+0x630>
 8013364:	f018 0f01 	tst.w	r8, #1
 8013368:	d007      	beq.n	801337a <_strtod_l+0x542>
 801336a:	4b1d      	ldr	r3, [pc, #116]	; (80133e0 <_strtod_l+0x5a8>)
 801336c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013374:	f7ed f950 	bl	8000618 <__aeabi_dmul>
 8013378:	2301      	movs	r3, #1
 801337a:	f109 0901 	add.w	r9, r9, #1
 801337e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013382:	e7ca      	b.n	801331a <_strtod_l+0x4e2>
 8013384:	d0eb      	beq.n	801335e <_strtod_l+0x526>
 8013386:	f1c8 0800 	rsb	r8, r8, #0
 801338a:	f018 020f 	ands.w	r2, r8, #15
 801338e:	d00a      	beq.n	80133a6 <_strtod_l+0x56e>
 8013390:	4b12      	ldr	r3, [pc, #72]	; (80133dc <_strtod_l+0x5a4>)
 8013392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013396:	4650      	mov	r0, sl
 8013398:	4659      	mov	r1, fp
 801339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339e:	f7ed fa65 	bl	800086c <__aeabi_ddiv>
 80133a2:	4682      	mov	sl, r0
 80133a4:	468b      	mov	fp, r1
 80133a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80133aa:	d0d8      	beq.n	801335e <_strtod_l+0x526>
 80133ac:	f1b8 0f1f 	cmp.w	r8, #31
 80133b0:	dd1e      	ble.n	80133f0 <_strtod_l+0x5b8>
 80133b2:	2500      	movs	r5, #0
 80133b4:	462e      	mov	r6, r5
 80133b6:	9509      	str	r5, [sp, #36]	; 0x24
 80133b8:	9507      	str	r5, [sp, #28]
 80133ba:	2322      	movs	r3, #34	; 0x22
 80133bc:	f04f 0a00 	mov.w	sl, #0
 80133c0:	f04f 0b00 	mov.w	fp, #0
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	e789      	b.n	80132dc <_strtod_l+0x4a4>
 80133c8:	08018dbd 	.word	0x08018dbd
 80133cc:	08018dfc 	.word	0x08018dfc
 80133d0:	08018db5 	.word	0x08018db5
 80133d4:	08018e77 	.word	0x08018e77
 80133d8:	08018e73 	.word	0x08018e73
 80133dc:	08019010 	.word	0x08019010
 80133e0:	08018fe8 	.word	0x08018fe8
 80133e4:	7ff00000 	.word	0x7ff00000
 80133e8:	7ca00000 	.word	0x7ca00000
 80133ec:	7fefffff 	.word	0x7fefffff
 80133f0:	f018 0310 	ands.w	r3, r8, #16
 80133f4:	bf18      	it	ne
 80133f6:	236a      	movne	r3, #106	; 0x6a
 80133f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80137b0 <_strtod_l+0x978>
 80133fc:	9304      	str	r3, [sp, #16]
 80133fe:	4650      	mov	r0, sl
 8013400:	4659      	mov	r1, fp
 8013402:	2300      	movs	r3, #0
 8013404:	f018 0f01 	tst.w	r8, #1
 8013408:	d004      	beq.n	8013414 <_strtod_l+0x5dc>
 801340a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801340e:	f7ed f903 	bl	8000618 <__aeabi_dmul>
 8013412:	2301      	movs	r3, #1
 8013414:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013418:	f109 0908 	add.w	r9, r9, #8
 801341c:	d1f2      	bne.n	8013404 <_strtod_l+0x5cc>
 801341e:	b10b      	cbz	r3, 8013424 <_strtod_l+0x5ec>
 8013420:	4682      	mov	sl, r0
 8013422:	468b      	mov	fp, r1
 8013424:	9b04      	ldr	r3, [sp, #16]
 8013426:	b1bb      	cbz	r3, 8013458 <_strtod_l+0x620>
 8013428:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801342c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013430:	2b00      	cmp	r3, #0
 8013432:	4659      	mov	r1, fp
 8013434:	dd10      	ble.n	8013458 <_strtod_l+0x620>
 8013436:	2b1f      	cmp	r3, #31
 8013438:	f340 8128 	ble.w	801368c <_strtod_l+0x854>
 801343c:	2b34      	cmp	r3, #52	; 0x34
 801343e:	bfde      	ittt	le
 8013440:	3b20      	suble	r3, #32
 8013442:	f04f 32ff 	movle.w	r2, #4294967295
 8013446:	fa02 f303 	lslle.w	r3, r2, r3
 801344a:	f04f 0a00 	mov.w	sl, #0
 801344e:	bfcc      	ite	gt
 8013450:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013454:	ea03 0b01 	andle.w	fp, r3, r1
 8013458:	2200      	movs	r2, #0
 801345a:	2300      	movs	r3, #0
 801345c:	4650      	mov	r0, sl
 801345e:	4659      	mov	r1, fp
 8013460:	f7ed fb42 	bl	8000ae8 <__aeabi_dcmpeq>
 8013464:	2800      	cmp	r0, #0
 8013466:	d1a4      	bne.n	80133b2 <_strtod_l+0x57a>
 8013468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801346e:	462b      	mov	r3, r5
 8013470:	463a      	mov	r2, r7
 8013472:	4620      	mov	r0, r4
 8013474:	f002 f8f4 	bl	8015660 <__s2b>
 8013478:	9009      	str	r0, [sp, #36]	; 0x24
 801347a:	2800      	cmp	r0, #0
 801347c:	f43f af24 	beq.w	80132c8 <_strtod_l+0x490>
 8013480:	9b07      	ldr	r3, [sp, #28]
 8013482:	1b9e      	subs	r6, r3, r6
 8013484:	9b08      	ldr	r3, [sp, #32]
 8013486:	2b00      	cmp	r3, #0
 8013488:	bfb4      	ite	lt
 801348a:	4633      	movlt	r3, r6
 801348c:	2300      	movge	r3, #0
 801348e:	9310      	str	r3, [sp, #64]	; 0x40
 8013490:	9b08      	ldr	r3, [sp, #32]
 8013492:	2500      	movs	r5, #0
 8013494:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013498:	9318      	str	r3, [sp, #96]	; 0x60
 801349a:	462e      	mov	r6, r5
 801349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801349e:	4620      	mov	r0, r4
 80134a0:	6859      	ldr	r1, [r3, #4]
 80134a2:	f002 f831 	bl	8015508 <_Balloc>
 80134a6:	9007      	str	r0, [sp, #28]
 80134a8:	2800      	cmp	r0, #0
 80134aa:	f43f af11 	beq.w	80132d0 <_strtod_l+0x498>
 80134ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b0:	691a      	ldr	r2, [r3, #16]
 80134b2:	3202      	adds	r2, #2
 80134b4:	f103 010c 	add.w	r1, r3, #12
 80134b8:	0092      	lsls	r2, r2, #2
 80134ba:	300c      	adds	r0, #12
 80134bc:	f7fe fb56 	bl	8011b6c <memcpy>
 80134c0:	ec4b ab10 	vmov	d0, sl, fp
 80134c4:	aa20      	add	r2, sp, #128	; 0x80
 80134c6:	a91f      	add	r1, sp, #124	; 0x7c
 80134c8:	4620      	mov	r0, r4
 80134ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80134ce:	f002 fc03 	bl	8015cd8 <__d2b>
 80134d2:	901e      	str	r0, [sp, #120]	; 0x78
 80134d4:	2800      	cmp	r0, #0
 80134d6:	f43f aefb 	beq.w	80132d0 <_strtod_l+0x498>
 80134da:	2101      	movs	r1, #1
 80134dc:	4620      	mov	r0, r4
 80134de:	f002 f959 	bl	8015794 <__i2b>
 80134e2:	4606      	mov	r6, r0
 80134e4:	2800      	cmp	r0, #0
 80134e6:	f43f aef3 	beq.w	80132d0 <_strtod_l+0x498>
 80134ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80134ec:	9904      	ldr	r1, [sp, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	bfab      	itete	ge
 80134f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80134f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80134f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80134f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80134fc:	bfac      	ite	ge
 80134fe:	eb03 0902 	addge.w	r9, r3, r2
 8013502:	1ad7      	sublt	r7, r2, r3
 8013504:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013506:	eba3 0801 	sub.w	r8, r3, r1
 801350a:	4490      	add	r8, r2
 801350c:	4ba3      	ldr	r3, [pc, #652]	; (801379c <_strtod_l+0x964>)
 801350e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013512:	4598      	cmp	r8, r3
 8013514:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013518:	f280 80cc 	bge.w	80136b4 <_strtod_l+0x87c>
 801351c:	eba3 0308 	sub.w	r3, r3, r8
 8013520:	2b1f      	cmp	r3, #31
 8013522:	eba2 0203 	sub.w	r2, r2, r3
 8013526:	f04f 0101 	mov.w	r1, #1
 801352a:	f300 80b6 	bgt.w	801369a <_strtod_l+0x862>
 801352e:	fa01 f303 	lsl.w	r3, r1, r3
 8013532:	9311      	str	r3, [sp, #68]	; 0x44
 8013534:	2300      	movs	r3, #0
 8013536:	930c      	str	r3, [sp, #48]	; 0x30
 8013538:	eb09 0802 	add.w	r8, r9, r2
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	45c1      	cmp	r9, r8
 8013540:	4417      	add	r7, r2
 8013542:	441f      	add	r7, r3
 8013544:	464b      	mov	r3, r9
 8013546:	bfa8      	it	ge
 8013548:	4643      	movge	r3, r8
 801354a:	42bb      	cmp	r3, r7
 801354c:	bfa8      	it	ge
 801354e:	463b      	movge	r3, r7
 8013550:	2b00      	cmp	r3, #0
 8013552:	bfc2      	ittt	gt
 8013554:	eba8 0803 	subgt.w	r8, r8, r3
 8013558:	1aff      	subgt	r7, r7, r3
 801355a:	eba9 0903 	subgt.w	r9, r9, r3
 801355e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013560:	2b00      	cmp	r3, #0
 8013562:	dd17      	ble.n	8013594 <_strtod_l+0x75c>
 8013564:	4631      	mov	r1, r6
 8013566:	461a      	mov	r2, r3
 8013568:	4620      	mov	r0, r4
 801356a:	f002 f9cf 	bl	801590c <__pow5mult>
 801356e:	4606      	mov	r6, r0
 8013570:	2800      	cmp	r0, #0
 8013572:	f43f aead 	beq.w	80132d0 <_strtod_l+0x498>
 8013576:	4601      	mov	r1, r0
 8013578:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801357a:	4620      	mov	r0, r4
 801357c:	f002 f920 	bl	80157c0 <__multiply>
 8013580:	900f      	str	r0, [sp, #60]	; 0x3c
 8013582:	2800      	cmp	r0, #0
 8013584:	f43f aea4 	beq.w	80132d0 <_strtod_l+0x498>
 8013588:	991e      	ldr	r1, [sp, #120]	; 0x78
 801358a:	4620      	mov	r0, r4
 801358c:	f001 fffc 	bl	8015588 <_Bfree>
 8013590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013592:	931e      	str	r3, [sp, #120]	; 0x78
 8013594:	f1b8 0f00 	cmp.w	r8, #0
 8013598:	f300 8091 	bgt.w	80136be <_strtod_l+0x886>
 801359c:	9b08      	ldr	r3, [sp, #32]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	dd08      	ble.n	80135b4 <_strtod_l+0x77c>
 80135a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80135a4:	9907      	ldr	r1, [sp, #28]
 80135a6:	4620      	mov	r0, r4
 80135a8:	f002 f9b0 	bl	801590c <__pow5mult>
 80135ac:	9007      	str	r0, [sp, #28]
 80135ae:	2800      	cmp	r0, #0
 80135b0:	f43f ae8e 	beq.w	80132d0 <_strtod_l+0x498>
 80135b4:	2f00      	cmp	r7, #0
 80135b6:	dd08      	ble.n	80135ca <_strtod_l+0x792>
 80135b8:	9907      	ldr	r1, [sp, #28]
 80135ba:	463a      	mov	r2, r7
 80135bc:	4620      	mov	r0, r4
 80135be:	f002 f9ff 	bl	80159c0 <__lshift>
 80135c2:	9007      	str	r0, [sp, #28]
 80135c4:	2800      	cmp	r0, #0
 80135c6:	f43f ae83 	beq.w	80132d0 <_strtod_l+0x498>
 80135ca:	f1b9 0f00 	cmp.w	r9, #0
 80135ce:	dd08      	ble.n	80135e2 <_strtod_l+0x7aa>
 80135d0:	4631      	mov	r1, r6
 80135d2:	464a      	mov	r2, r9
 80135d4:	4620      	mov	r0, r4
 80135d6:	f002 f9f3 	bl	80159c0 <__lshift>
 80135da:	4606      	mov	r6, r0
 80135dc:	2800      	cmp	r0, #0
 80135de:	f43f ae77 	beq.w	80132d0 <_strtod_l+0x498>
 80135e2:	9a07      	ldr	r2, [sp, #28]
 80135e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80135e6:	4620      	mov	r0, r4
 80135e8:	f002 fa72 	bl	8015ad0 <__mdiff>
 80135ec:	4605      	mov	r5, r0
 80135ee:	2800      	cmp	r0, #0
 80135f0:	f43f ae6e 	beq.w	80132d0 <_strtod_l+0x498>
 80135f4:	68c3      	ldr	r3, [r0, #12]
 80135f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80135f8:	2300      	movs	r3, #0
 80135fa:	60c3      	str	r3, [r0, #12]
 80135fc:	4631      	mov	r1, r6
 80135fe:	f002 fa4b 	bl	8015a98 <__mcmp>
 8013602:	2800      	cmp	r0, #0
 8013604:	da65      	bge.n	80136d2 <_strtod_l+0x89a>
 8013606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013608:	ea53 030a 	orrs.w	r3, r3, sl
 801360c:	f040 8087 	bne.w	801371e <_strtod_l+0x8e6>
 8013610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013614:	2b00      	cmp	r3, #0
 8013616:	f040 8082 	bne.w	801371e <_strtod_l+0x8e6>
 801361a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801361e:	0d1b      	lsrs	r3, r3, #20
 8013620:	051b      	lsls	r3, r3, #20
 8013622:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013626:	d97a      	bls.n	801371e <_strtod_l+0x8e6>
 8013628:	696b      	ldr	r3, [r5, #20]
 801362a:	b913      	cbnz	r3, 8013632 <_strtod_l+0x7fa>
 801362c:	692b      	ldr	r3, [r5, #16]
 801362e:	2b01      	cmp	r3, #1
 8013630:	dd75      	ble.n	801371e <_strtod_l+0x8e6>
 8013632:	4629      	mov	r1, r5
 8013634:	2201      	movs	r2, #1
 8013636:	4620      	mov	r0, r4
 8013638:	f002 f9c2 	bl	80159c0 <__lshift>
 801363c:	4631      	mov	r1, r6
 801363e:	4605      	mov	r5, r0
 8013640:	f002 fa2a 	bl	8015a98 <__mcmp>
 8013644:	2800      	cmp	r0, #0
 8013646:	dd6a      	ble.n	801371e <_strtod_l+0x8e6>
 8013648:	9904      	ldr	r1, [sp, #16]
 801364a:	4a55      	ldr	r2, [pc, #340]	; (80137a0 <_strtod_l+0x968>)
 801364c:	465b      	mov	r3, fp
 801364e:	2900      	cmp	r1, #0
 8013650:	f000 8085 	beq.w	801375e <_strtod_l+0x926>
 8013654:	ea02 010b 	and.w	r1, r2, fp
 8013658:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801365c:	dc7f      	bgt.n	801375e <_strtod_l+0x926>
 801365e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013662:	f77f aeaa 	ble.w	80133ba <_strtod_l+0x582>
 8013666:	4a4f      	ldr	r2, [pc, #316]	; (80137a4 <_strtod_l+0x96c>)
 8013668:	2300      	movs	r3, #0
 801366a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801366e:	4650      	mov	r0, sl
 8013670:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013674:	4659      	mov	r1, fp
 8013676:	f7ec ffcf 	bl	8000618 <__aeabi_dmul>
 801367a:	460b      	mov	r3, r1
 801367c:	4303      	orrs	r3, r0
 801367e:	bf08      	it	eq
 8013680:	2322      	moveq	r3, #34	; 0x22
 8013682:	4682      	mov	sl, r0
 8013684:	468b      	mov	fp, r1
 8013686:	bf08      	it	eq
 8013688:	6023      	streq	r3, [r4, #0]
 801368a:	e62b      	b.n	80132e4 <_strtod_l+0x4ac>
 801368c:	f04f 32ff 	mov.w	r2, #4294967295
 8013690:	fa02 f303 	lsl.w	r3, r2, r3
 8013694:	ea03 0a0a 	and.w	sl, r3, sl
 8013698:	e6de      	b.n	8013458 <_strtod_l+0x620>
 801369a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801369e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80136a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80136a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80136aa:	fa01 f308 	lsl.w	r3, r1, r8
 80136ae:	930c      	str	r3, [sp, #48]	; 0x30
 80136b0:	9111      	str	r1, [sp, #68]	; 0x44
 80136b2:	e741      	b.n	8013538 <_strtod_l+0x700>
 80136b4:	2300      	movs	r3, #0
 80136b6:	930c      	str	r3, [sp, #48]	; 0x30
 80136b8:	2301      	movs	r3, #1
 80136ba:	9311      	str	r3, [sp, #68]	; 0x44
 80136bc:	e73c      	b.n	8013538 <_strtod_l+0x700>
 80136be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136c0:	4642      	mov	r2, r8
 80136c2:	4620      	mov	r0, r4
 80136c4:	f002 f97c 	bl	80159c0 <__lshift>
 80136c8:	901e      	str	r0, [sp, #120]	; 0x78
 80136ca:	2800      	cmp	r0, #0
 80136cc:	f47f af66 	bne.w	801359c <_strtod_l+0x764>
 80136d0:	e5fe      	b.n	80132d0 <_strtod_l+0x498>
 80136d2:	465f      	mov	r7, fp
 80136d4:	d16e      	bne.n	80137b4 <_strtod_l+0x97c>
 80136d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136dc:	b342      	cbz	r2, 8013730 <_strtod_l+0x8f8>
 80136de:	4a32      	ldr	r2, [pc, #200]	; (80137a8 <_strtod_l+0x970>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d128      	bne.n	8013736 <_strtod_l+0x8fe>
 80136e4:	9b04      	ldr	r3, [sp, #16]
 80136e6:	4650      	mov	r0, sl
 80136e8:	b1eb      	cbz	r3, 8013726 <_strtod_l+0x8ee>
 80136ea:	4a2d      	ldr	r2, [pc, #180]	; (80137a0 <_strtod_l+0x968>)
 80136ec:	403a      	ands	r2, r7
 80136ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80136f2:	f04f 31ff 	mov.w	r1, #4294967295
 80136f6:	d819      	bhi.n	801372c <_strtod_l+0x8f4>
 80136f8:	0d12      	lsrs	r2, r2, #20
 80136fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80136fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013702:	4298      	cmp	r0, r3
 8013704:	d117      	bne.n	8013736 <_strtod_l+0x8fe>
 8013706:	4b29      	ldr	r3, [pc, #164]	; (80137ac <_strtod_l+0x974>)
 8013708:	429f      	cmp	r7, r3
 801370a:	d102      	bne.n	8013712 <_strtod_l+0x8da>
 801370c:	3001      	adds	r0, #1
 801370e:	f43f addf 	beq.w	80132d0 <_strtod_l+0x498>
 8013712:	4b23      	ldr	r3, [pc, #140]	; (80137a0 <_strtod_l+0x968>)
 8013714:	403b      	ands	r3, r7
 8013716:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801371a:	f04f 0a00 	mov.w	sl, #0
 801371e:	9b04      	ldr	r3, [sp, #16]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1a0      	bne.n	8013666 <_strtod_l+0x82e>
 8013724:	e5de      	b.n	80132e4 <_strtod_l+0x4ac>
 8013726:	f04f 33ff 	mov.w	r3, #4294967295
 801372a:	e7ea      	b.n	8013702 <_strtod_l+0x8ca>
 801372c:	460b      	mov	r3, r1
 801372e:	e7e8      	b.n	8013702 <_strtod_l+0x8ca>
 8013730:	ea53 030a 	orrs.w	r3, r3, sl
 8013734:	d088      	beq.n	8013648 <_strtod_l+0x810>
 8013736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013738:	b1db      	cbz	r3, 8013772 <_strtod_l+0x93a>
 801373a:	423b      	tst	r3, r7
 801373c:	d0ef      	beq.n	801371e <_strtod_l+0x8e6>
 801373e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013740:	9a04      	ldr	r2, [sp, #16]
 8013742:	4650      	mov	r0, sl
 8013744:	4659      	mov	r1, fp
 8013746:	b1c3      	cbz	r3, 801377a <_strtod_l+0x942>
 8013748:	f7ff fb59 	bl	8012dfe <sulp>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013754:	f7ec fdaa 	bl	80002ac <__adddf3>
 8013758:	4682      	mov	sl, r0
 801375a:	468b      	mov	fp, r1
 801375c:	e7df      	b.n	801371e <_strtod_l+0x8e6>
 801375e:	4013      	ands	r3, r2
 8013760:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013764:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013768:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801376c:	f04f 3aff 	mov.w	sl, #4294967295
 8013770:	e7d5      	b.n	801371e <_strtod_l+0x8e6>
 8013772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013774:	ea13 0f0a 	tst.w	r3, sl
 8013778:	e7e0      	b.n	801373c <_strtod_l+0x904>
 801377a:	f7ff fb40 	bl	8012dfe <sulp>
 801377e:	4602      	mov	r2, r0
 8013780:	460b      	mov	r3, r1
 8013782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013786:	f7ec fd8f 	bl	80002a8 <__aeabi_dsub>
 801378a:	2200      	movs	r2, #0
 801378c:	2300      	movs	r3, #0
 801378e:	4682      	mov	sl, r0
 8013790:	468b      	mov	fp, r1
 8013792:	f7ed f9a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8013796:	2800      	cmp	r0, #0
 8013798:	d0c1      	beq.n	801371e <_strtod_l+0x8e6>
 801379a:	e60e      	b.n	80133ba <_strtod_l+0x582>
 801379c:	fffffc02 	.word	0xfffffc02
 80137a0:	7ff00000 	.word	0x7ff00000
 80137a4:	39500000 	.word	0x39500000
 80137a8:	000fffff 	.word	0x000fffff
 80137ac:	7fefffff 	.word	0x7fefffff
 80137b0:	08018e10 	.word	0x08018e10
 80137b4:	4631      	mov	r1, r6
 80137b6:	4628      	mov	r0, r5
 80137b8:	f002 faea 	bl	8015d90 <__ratio>
 80137bc:	ec59 8b10 	vmov	r8, r9, d0
 80137c0:	ee10 0a10 	vmov	r0, s0
 80137c4:	2200      	movs	r2, #0
 80137c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80137ca:	4649      	mov	r1, r9
 80137cc:	f7ed f9a0 	bl	8000b10 <__aeabi_dcmple>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d07c      	beq.n	80138ce <_strtod_l+0xa96>
 80137d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d04c      	beq.n	8013874 <_strtod_l+0xa3c>
 80137da:	4b95      	ldr	r3, [pc, #596]	; (8013a30 <_strtod_l+0xbf8>)
 80137dc:	2200      	movs	r2, #0
 80137de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80137e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013a30 <_strtod_l+0xbf8>
 80137e6:	f04f 0800 	mov.w	r8, #0
 80137ea:	4b92      	ldr	r3, [pc, #584]	; (8013a34 <_strtod_l+0xbfc>)
 80137ec:	403b      	ands	r3, r7
 80137ee:	9311      	str	r3, [sp, #68]	; 0x44
 80137f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80137f2:	4b91      	ldr	r3, [pc, #580]	; (8013a38 <_strtod_l+0xc00>)
 80137f4:	429a      	cmp	r2, r3
 80137f6:	f040 80b2 	bne.w	801395e <_strtod_l+0xb26>
 80137fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80137fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013802:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013806:	ec4b ab10 	vmov	d0, sl, fp
 801380a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801380e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013812:	f002 f9e5 	bl	8015be0 <__ulp>
 8013816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801381a:	ec53 2b10 	vmov	r2, r3, d0
 801381e:	f7ec fefb 	bl	8000618 <__aeabi_dmul>
 8013822:	4652      	mov	r2, sl
 8013824:	465b      	mov	r3, fp
 8013826:	f7ec fd41 	bl	80002ac <__adddf3>
 801382a:	460b      	mov	r3, r1
 801382c:	4981      	ldr	r1, [pc, #516]	; (8013a34 <_strtod_l+0xbfc>)
 801382e:	4a83      	ldr	r2, [pc, #524]	; (8013a3c <_strtod_l+0xc04>)
 8013830:	4019      	ands	r1, r3
 8013832:	4291      	cmp	r1, r2
 8013834:	4682      	mov	sl, r0
 8013836:	d95e      	bls.n	80138f6 <_strtod_l+0xabe>
 8013838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801383a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801383e:	4293      	cmp	r3, r2
 8013840:	d103      	bne.n	801384a <_strtod_l+0xa12>
 8013842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013844:	3301      	adds	r3, #1
 8013846:	f43f ad43 	beq.w	80132d0 <_strtod_l+0x498>
 801384a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013a48 <_strtod_l+0xc10>
 801384e:	f04f 3aff 	mov.w	sl, #4294967295
 8013852:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013854:	4620      	mov	r0, r4
 8013856:	f001 fe97 	bl	8015588 <_Bfree>
 801385a:	9907      	ldr	r1, [sp, #28]
 801385c:	4620      	mov	r0, r4
 801385e:	f001 fe93 	bl	8015588 <_Bfree>
 8013862:	4631      	mov	r1, r6
 8013864:	4620      	mov	r0, r4
 8013866:	f001 fe8f 	bl	8015588 <_Bfree>
 801386a:	4629      	mov	r1, r5
 801386c:	4620      	mov	r0, r4
 801386e:	f001 fe8b 	bl	8015588 <_Bfree>
 8013872:	e613      	b.n	801349c <_strtod_l+0x664>
 8013874:	f1ba 0f00 	cmp.w	sl, #0
 8013878:	d11b      	bne.n	80138b2 <_strtod_l+0xa7a>
 801387a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801387e:	b9f3      	cbnz	r3, 80138be <_strtod_l+0xa86>
 8013880:	4b6b      	ldr	r3, [pc, #428]	; (8013a30 <_strtod_l+0xbf8>)
 8013882:	2200      	movs	r2, #0
 8013884:	4640      	mov	r0, r8
 8013886:	4649      	mov	r1, r9
 8013888:	f7ed f938 	bl	8000afc <__aeabi_dcmplt>
 801388c:	b9d0      	cbnz	r0, 80138c4 <_strtod_l+0xa8c>
 801388e:	4640      	mov	r0, r8
 8013890:	4649      	mov	r1, r9
 8013892:	4b6b      	ldr	r3, [pc, #428]	; (8013a40 <_strtod_l+0xc08>)
 8013894:	2200      	movs	r2, #0
 8013896:	f7ec febf 	bl	8000618 <__aeabi_dmul>
 801389a:	4680      	mov	r8, r0
 801389c:	4689      	mov	r9, r1
 801389e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80138a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80138a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80138a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80138ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80138b0:	e79b      	b.n	80137ea <_strtod_l+0x9b2>
 80138b2:	f1ba 0f01 	cmp.w	sl, #1
 80138b6:	d102      	bne.n	80138be <_strtod_l+0xa86>
 80138b8:	2f00      	cmp	r7, #0
 80138ba:	f43f ad7e 	beq.w	80133ba <_strtod_l+0x582>
 80138be:	4b61      	ldr	r3, [pc, #388]	; (8013a44 <_strtod_l+0xc0c>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	e78c      	b.n	80137de <_strtod_l+0x9a6>
 80138c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013a40 <_strtod_l+0xc08>
 80138c8:	f04f 0800 	mov.w	r8, #0
 80138cc:	e7e7      	b.n	801389e <_strtod_l+0xa66>
 80138ce:	4b5c      	ldr	r3, [pc, #368]	; (8013a40 <_strtod_l+0xc08>)
 80138d0:	4640      	mov	r0, r8
 80138d2:	4649      	mov	r1, r9
 80138d4:	2200      	movs	r2, #0
 80138d6:	f7ec fe9f 	bl	8000618 <__aeabi_dmul>
 80138da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138dc:	4680      	mov	r8, r0
 80138de:	4689      	mov	r9, r1
 80138e0:	b933      	cbnz	r3, 80138f0 <_strtod_l+0xab8>
 80138e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138e6:	9012      	str	r0, [sp, #72]	; 0x48
 80138e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80138ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80138ee:	e7dd      	b.n	80138ac <_strtod_l+0xa74>
 80138f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80138f4:	e7f9      	b.n	80138ea <_strtod_l+0xab2>
 80138f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80138fa:	9b04      	ldr	r3, [sp, #16]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1a8      	bne.n	8013852 <_strtod_l+0xa1a>
 8013900:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013904:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013906:	0d1b      	lsrs	r3, r3, #20
 8013908:	051b      	lsls	r3, r3, #20
 801390a:	429a      	cmp	r2, r3
 801390c:	d1a1      	bne.n	8013852 <_strtod_l+0xa1a>
 801390e:	4640      	mov	r0, r8
 8013910:	4649      	mov	r1, r9
 8013912:	f7ed f9e1 	bl	8000cd8 <__aeabi_d2lz>
 8013916:	f7ec fe51 	bl	80005bc <__aeabi_l2d>
 801391a:	4602      	mov	r2, r0
 801391c:	460b      	mov	r3, r1
 801391e:	4640      	mov	r0, r8
 8013920:	4649      	mov	r1, r9
 8013922:	f7ec fcc1 	bl	80002a8 <__aeabi_dsub>
 8013926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013928:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801392c:	ea43 030a 	orr.w	r3, r3, sl
 8013930:	4313      	orrs	r3, r2
 8013932:	4680      	mov	r8, r0
 8013934:	4689      	mov	r9, r1
 8013936:	d053      	beq.n	80139e0 <_strtod_l+0xba8>
 8013938:	a335      	add	r3, pc, #212	; (adr r3, 8013a10 <_strtod_l+0xbd8>)
 801393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393e:	f7ed f8dd 	bl	8000afc <__aeabi_dcmplt>
 8013942:	2800      	cmp	r0, #0
 8013944:	f47f acce 	bne.w	80132e4 <_strtod_l+0x4ac>
 8013948:	a333      	add	r3, pc, #204	; (adr r3, 8013a18 <_strtod_l+0xbe0>)
 801394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394e:	4640      	mov	r0, r8
 8013950:	4649      	mov	r1, r9
 8013952:	f7ed f8f1 	bl	8000b38 <__aeabi_dcmpgt>
 8013956:	2800      	cmp	r0, #0
 8013958:	f43f af7b 	beq.w	8013852 <_strtod_l+0xa1a>
 801395c:	e4c2      	b.n	80132e4 <_strtod_l+0x4ac>
 801395e:	9b04      	ldr	r3, [sp, #16]
 8013960:	b333      	cbz	r3, 80139b0 <_strtod_l+0xb78>
 8013962:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013964:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013968:	d822      	bhi.n	80139b0 <_strtod_l+0xb78>
 801396a:	a32d      	add	r3, pc, #180	; (adr r3, 8013a20 <_strtod_l+0xbe8>)
 801396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013970:	4640      	mov	r0, r8
 8013972:	4649      	mov	r1, r9
 8013974:	f7ed f8cc 	bl	8000b10 <__aeabi_dcmple>
 8013978:	b1a0      	cbz	r0, 80139a4 <_strtod_l+0xb6c>
 801397a:	4649      	mov	r1, r9
 801397c:	4640      	mov	r0, r8
 801397e:	f7ed f923 	bl	8000bc8 <__aeabi_d2uiz>
 8013982:	2801      	cmp	r0, #1
 8013984:	bf38      	it	cc
 8013986:	2001      	movcc	r0, #1
 8013988:	f7ec fdcc 	bl	8000524 <__aeabi_ui2d>
 801398c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801398e:	4680      	mov	r8, r0
 8013990:	4689      	mov	r9, r1
 8013992:	bb13      	cbnz	r3, 80139da <_strtod_l+0xba2>
 8013994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013998:	9014      	str	r0, [sp, #80]	; 0x50
 801399a:	9315      	str	r3, [sp, #84]	; 0x54
 801399c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80139a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80139a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80139a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	930d      	str	r3, [sp, #52]	; 0x34
 80139b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80139b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80139bc:	f002 f910 	bl	8015be0 <__ulp>
 80139c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139c4:	ec53 2b10 	vmov	r2, r3, d0
 80139c8:	f7ec fe26 	bl	8000618 <__aeabi_dmul>
 80139cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139d0:	f7ec fc6c 	bl	80002ac <__adddf3>
 80139d4:	4682      	mov	sl, r0
 80139d6:	468b      	mov	fp, r1
 80139d8:	e78f      	b.n	80138fa <_strtod_l+0xac2>
 80139da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80139de:	e7dd      	b.n	801399c <_strtod_l+0xb64>
 80139e0:	a311      	add	r3, pc, #68	; (adr r3, 8013a28 <_strtod_l+0xbf0>)
 80139e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e6:	f7ed f889 	bl	8000afc <__aeabi_dcmplt>
 80139ea:	e7b4      	b.n	8013956 <_strtod_l+0xb1e>
 80139ec:	2300      	movs	r3, #0
 80139ee:	930e      	str	r3, [sp, #56]	; 0x38
 80139f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80139f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139f4:	6013      	str	r3, [r2, #0]
 80139f6:	f7ff ba65 	b.w	8012ec4 <_strtod_l+0x8c>
 80139fa:	2b65      	cmp	r3, #101	; 0x65
 80139fc:	f43f ab5d 	beq.w	80130ba <_strtod_l+0x282>
 8013a00:	2b45      	cmp	r3, #69	; 0x45
 8013a02:	f43f ab5a 	beq.w	80130ba <_strtod_l+0x282>
 8013a06:	2201      	movs	r2, #1
 8013a08:	f7ff bb92 	b.w	8013130 <_strtod_l+0x2f8>
 8013a0c:	f3af 8000 	nop.w
 8013a10:	94a03595 	.word	0x94a03595
 8013a14:	3fdfffff 	.word	0x3fdfffff
 8013a18:	35afe535 	.word	0x35afe535
 8013a1c:	3fe00000 	.word	0x3fe00000
 8013a20:	ffc00000 	.word	0xffc00000
 8013a24:	41dfffff 	.word	0x41dfffff
 8013a28:	94a03595 	.word	0x94a03595
 8013a2c:	3fcfffff 	.word	0x3fcfffff
 8013a30:	3ff00000 	.word	0x3ff00000
 8013a34:	7ff00000 	.word	0x7ff00000
 8013a38:	7fe00000 	.word	0x7fe00000
 8013a3c:	7c9fffff 	.word	0x7c9fffff
 8013a40:	3fe00000 	.word	0x3fe00000
 8013a44:	bff00000 	.word	0xbff00000
 8013a48:	7fefffff 	.word	0x7fefffff

08013a4c <_strtod_r>:
 8013a4c:	4b01      	ldr	r3, [pc, #4]	; (8013a54 <_strtod_r+0x8>)
 8013a4e:	f7ff b9f3 	b.w	8012e38 <_strtod_l>
 8013a52:	bf00      	nop
 8013a54:	20000140 	.word	0x20000140

08013a58 <_strtol_l.isra.0>:
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a5e:	d001      	beq.n	8013a64 <_strtol_l.isra.0+0xc>
 8013a60:	2b24      	cmp	r3, #36	; 0x24
 8013a62:	d906      	bls.n	8013a72 <_strtol_l.isra.0+0x1a>
 8013a64:	f7fd ff56 	bl	8011914 <__errno>
 8013a68:	2316      	movs	r3, #22
 8013a6a:	6003      	str	r3, [r0, #0]
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a72:	4f3a      	ldr	r7, [pc, #232]	; (8013b5c <_strtol_l.isra.0+0x104>)
 8013a74:	468e      	mov	lr, r1
 8013a76:	4676      	mov	r6, lr
 8013a78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013a7c:	5de5      	ldrb	r5, [r4, r7]
 8013a7e:	f015 0508 	ands.w	r5, r5, #8
 8013a82:	d1f8      	bne.n	8013a76 <_strtol_l.isra.0+0x1e>
 8013a84:	2c2d      	cmp	r4, #45	; 0x2d
 8013a86:	d134      	bne.n	8013af2 <_strtol_l.isra.0+0x9a>
 8013a88:	f89e 4000 	ldrb.w	r4, [lr]
 8013a8c:	f04f 0801 	mov.w	r8, #1
 8013a90:	f106 0e02 	add.w	lr, r6, #2
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d05c      	beq.n	8013b52 <_strtol_l.isra.0+0xfa>
 8013a98:	2b10      	cmp	r3, #16
 8013a9a:	d10c      	bne.n	8013ab6 <_strtol_l.isra.0+0x5e>
 8013a9c:	2c30      	cmp	r4, #48	; 0x30
 8013a9e:	d10a      	bne.n	8013ab6 <_strtol_l.isra.0+0x5e>
 8013aa0:	f89e 4000 	ldrb.w	r4, [lr]
 8013aa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013aa8:	2c58      	cmp	r4, #88	; 0x58
 8013aaa:	d14d      	bne.n	8013b48 <_strtol_l.isra.0+0xf0>
 8013aac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013ab0:	2310      	movs	r3, #16
 8013ab2:	f10e 0e02 	add.w	lr, lr, #2
 8013ab6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013aba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013abe:	2600      	movs	r6, #0
 8013ac0:	fbbc f9f3 	udiv	r9, ip, r3
 8013ac4:	4635      	mov	r5, r6
 8013ac6:	fb03 ca19 	mls	sl, r3, r9, ip
 8013aca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013ace:	2f09      	cmp	r7, #9
 8013ad0:	d818      	bhi.n	8013b04 <_strtol_l.isra.0+0xac>
 8013ad2:	463c      	mov	r4, r7
 8013ad4:	42a3      	cmp	r3, r4
 8013ad6:	dd24      	ble.n	8013b22 <_strtol_l.isra.0+0xca>
 8013ad8:	2e00      	cmp	r6, #0
 8013ada:	db1f      	blt.n	8013b1c <_strtol_l.isra.0+0xc4>
 8013adc:	45a9      	cmp	r9, r5
 8013ade:	d31d      	bcc.n	8013b1c <_strtol_l.isra.0+0xc4>
 8013ae0:	d101      	bne.n	8013ae6 <_strtol_l.isra.0+0x8e>
 8013ae2:	45a2      	cmp	sl, r4
 8013ae4:	db1a      	blt.n	8013b1c <_strtol_l.isra.0+0xc4>
 8013ae6:	fb05 4503 	mla	r5, r5, r3, r4
 8013aea:	2601      	movs	r6, #1
 8013aec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013af0:	e7eb      	b.n	8013aca <_strtol_l.isra.0+0x72>
 8013af2:	2c2b      	cmp	r4, #43	; 0x2b
 8013af4:	bf08      	it	eq
 8013af6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013afa:	46a8      	mov	r8, r5
 8013afc:	bf08      	it	eq
 8013afe:	f106 0e02 	addeq.w	lr, r6, #2
 8013b02:	e7c7      	b.n	8013a94 <_strtol_l.isra.0+0x3c>
 8013b04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013b08:	2f19      	cmp	r7, #25
 8013b0a:	d801      	bhi.n	8013b10 <_strtol_l.isra.0+0xb8>
 8013b0c:	3c37      	subs	r4, #55	; 0x37
 8013b0e:	e7e1      	b.n	8013ad4 <_strtol_l.isra.0+0x7c>
 8013b10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013b14:	2f19      	cmp	r7, #25
 8013b16:	d804      	bhi.n	8013b22 <_strtol_l.isra.0+0xca>
 8013b18:	3c57      	subs	r4, #87	; 0x57
 8013b1a:	e7db      	b.n	8013ad4 <_strtol_l.isra.0+0x7c>
 8013b1c:	f04f 36ff 	mov.w	r6, #4294967295
 8013b20:	e7e4      	b.n	8013aec <_strtol_l.isra.0+0x94>
 8013b22:	2e00      	cmp	r6, #0
 8013b24:	da05      	bge.n	8013b32 <_strtol_l.isra.0+0xda>
 8013b26:	2322      	movs	r3, #34	; 0x22
 8013b28:	6003      	str	r3, [r0, #0]
 8013b2a:	4665      	mov	r5, ip
 8013b2c:	b942      	cbnz	r2, 8013b40 <_strtol_l.isra.0+0xe8>
 8013b2e:	4628      	mov	r0, r5
 8013b30:	e79d      	b.n	8013a6e <_strtol_l.isra.0+0x16>
 8013b32:	f1b8 0f00 	cmp.w	r8, #0
 8013b36:	d000      	beq.n	8013b3a <_strtol_l.isra.0+0xe2>
 8013b38:	426d      	negs	r5, r5
 8013b3a:	2a00      	cmp	r2, #0
 8013b3c:	d0f7      	beq.n	8013b2e <_strtol_l.isra.0+0xd6>
 8013b3e:	b10e      	cbz	r6, 8013b44 <_strtol_l.isra.0+0xec>
 8013b40:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013b44:	6011      	str	r1, [r2, #0]
 8013b46:	e7f2      	b.n	8013b2e <_strtol_l.isra.0+0xd6>
 8013b48:	2430      	movs	r4, #48	; 0x30
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1b3      	bne.n	8013ab6 <_strtol_l.isra.0+0x5e>
 8013b4e:	2308      	movs	r3, #8
 8013b50:	e7b1      	b.n	8013ab6 <_strtol_l.isra.0+0x5e>
 8013b52:	2c30      	cmp	r4, #48	; 0x30
 8013b54:	d0a4      	beq.n	8013aa0 <_strtol_l.isra.0+0x48>
 8013b56:	230a      	movs	r3, #10
 8013b58:	e7ad      	b.n	8013ab6 <_strtol_l.isra.0+0x5e>
 8013b5a:	bf00      	nop
 8013b5c:	08018c49 	.word	0x08018c49

08013b60 <_strtol_r>:
 8013b60:	f7ff bf7a 	b.w	8013a58 <_strtol_l.isra.0>

08013b64 <_strtoul_l.isra.0>:
 8013b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b68:	4e3b      	ldr	r6, [pc, #236]	; (8013c58 <_strtoul_l.isra.0+0xf4>)
 8013b6a:	4686      	mov	lr, r0
 8013b6c:	468c      	mov	ip, r1
 8013b6e:	4660      	mov	r0, ip
 8013b70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013b74:	5da5      	ldrb	r5, [r4, r6]
 8013b76:	f015 0508 	ands.w	r5, r5, #8
 8013b7a:	d1f8      	bne.n	8013b6e <_strtoul_l.isra.0+0xa>
 8013b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8013b7e:	d134      	bne.n	8013bea <_strtoul_l.isra.0+0x86>
 8013b80:	f89c 4000 	ldrb.w	r4, [ip]
 8013b84:	f04f 0801 	mov.w	r8, #1
 8013b88:	f100 0c02 	add.w	ip, r0, #2
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d05e      	beq.n	8013c4e <_strtoul_l.isra.0+0xea>
 8013b90:	2b10      	cmp	r3, #16
 8013b92:	d10c      	bne.n	8013bae <_strtoul_l.isra.0+0x4a>
 8013b94:	2c30      	cmp	r4, #48	; 0x30
 8013b96:	d10a      	bne.n	8013bae <_strtoul_l.isra.0+0x4a>
 8013b98:	f89c 0000 	ldrb.w	r0, [ip]
 8013b9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013ba0:	2858      	cmp	r0, #88	; 0x58
 8013ba2:	d14f      	bne.n	8013c44 <_strtoul_l.isra.0+0xe0>
 8013ba4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013ba8:	2310      	movs	r3, #16
 8013baa:	f10c 0c02 	add.w	ip, ip, #2
 8013bae:	f04f 37ff 	mov.w	r7, #4294967295
 8013bb2:	2500      	movs	r5, #0
 8013bb4:	fbb7 f7f3 	udiv	r7, r7, r3
 8013bb8:	fb03 f907 	mul.w	r9, r3, r7
 8013bbc:	ea6f 0909 	mvn.w	r9, r9
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013bc6:	2e09      	cmp	r6, #9
 8013bc8:	d818      	bhi.n	8013bfc <_strtoul_l.isra.0+0x98>
 8013bca:	4634      	mov	r4, r6
 8013bcc:	42a3      	cmp	r3, r4
 8013bce:	dd24      	ble.n	8013c1a <_strtoul_l.isra.0+0xb6>
 8013bd0:	2d00      	cmp	r5, #0
 8013bd2:	db1f      	blt.n	8013c14 <_strtoul_l.isra.0+0xb0>
 8013bd4:	4287      	cmp	r7, r0
 8013bd6:	d31d      	bcc.n	8013c14 <_strtoul_l.isra.0+0xb0>
 8013bd8:	d101      	bne.n	8013bde <_strtoul_l.isra.0+0x7a>
 8013bda:	45a1      	cmp	r9, r4
 8013bdc:	db1a      	blt.n	8013c14 <_strtoul_l.isra.0+0xb0>
 8013bde:	fb00 4003 	mla	r0, r0, r3, r4
 8013be2:	2501      	movs	r5, #1
 8013be4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013be8:	e7eb      	b.n	8013bc2 <_strtoul_l.isra.0+0x5e>
 8013bea:	2c2b      	cmp	r4, #43	; 0x2b
 8013bec:	bf08      	it	eq
 8013bee:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013bf2:	46a8      	mov	r8, r5
 8013bf4:	bf08      	it	eq
 8013bf6:	f100 0c02 	addeq.w	ip, r0, #2
 8013bfa:	e7c7      	b.n	8013b8c <_strtoul_l.isra.0+0x28>
 8013bfc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013c00:	2e19      	cmp	r6, #25
 8013c02:	d801      	bhi.n	8013c08 <_strtoul_l.isra.0+0xa4>
 8013c04:	3c37      	subs	r4, #55	; 0x37
 8013c06:	e7e1      	b.n	8013bcc <_strtoul_l.isra.0+0x68>
 8013c08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013c0c:	2e19      	cmp	r6, #25
 8013c0e:	d804      	bhi.n	8013c1a <_strtoul_l.isra.0+0xb6>
 8013c10:	3c57      	subs	r4, #87	; 0x57
 8013c12:	e7db      	b.n	8013bcc <_strtoul_l.isra.0+0x68>
 8013c14:	f04f 35ff 	mov.w	r5, #4294967295
 8013c18:	e7e4      	b.n	8013be4 <_strtoul_l.isra.0+0x80>
 8013c1a:	2d00      	cmp	r5, #0
 8013c1c:	da07      	bge.n	8013c2e <_strtoul_l.isra.0+0xca>
 8013c1e:	2322      	movs	r3, #34	; 0x22
 8013c20:	f8ce 3000 	str.w	r3, [lr]
 8013c24:	f04f 30ff 	mov.w	r0, #4294967295
 8013c28:	b942      	cbnz	r2, 8013c3c <_strtoul_l.isra.0+0xd8>
 8013c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c2e:	f1b8 0f00 	cmp.w	r8, #0
 8013c32:	d000      	beq.n	8013c36 <_strtoul_l.isra.0+0xd2>
 8013c34:	4240      	negs	r0, r0
 8013c36:	2a00      	cmp	r2, #0
 8013c38:	d0f7      	beq.n	8013c2a <_strtoul_l.isra.0+0xc6>
 8013c3a:	b10d      	cbz	r5, 8013c40 <_strtoul_l.isra.0+0xdc>
 8013c3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013c40:	6011      	str	r1, [r2, #0]
 8013c42:	e7f2      	b.n	8013c2a <_strtoul_l.isra.0+0xc6>
 8013c44:	2430      	movs	r4, #48	; 0x30
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1b1      	bne.n	8013bae <_strtoul_l.isra.0+0x4a>
 8013c4a:	2308      	movs	r3, #8
 8013c4c:	e7af      	b.n	8013bae <_strtoul_l.isra.0+0x4a>
 8013c4e:	2c30      	cmp	r4, #48	; 0x30
 8013c50:	d0a2      	beq.n	8013b98 <_strtoul_l.isra.0+0x34>
 8013c52:	230a      	movs	r3, #10
 8013c54:	e7ab      	b.n	8013bae <_strtoul_l.isra.0+0x4a>
 8013c56:	bf00      	nop
 8013c58:	08018c49 	.word	0x08018c49

08013c5c <_strtoul_r>:
 8013c5c:	f7ff bf82 	b.w	8013b64 <_strtoul_l.isra.0>

08013c60 <__swbuf_r>:
 8013c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c62:	460e      	mov	r6, r1
 8013c64:	4614      	mov	r4, r2
 8013c66:	4605      	mov	r5, r0
 8013c68:	b118      	cbz	r0, 8013c72 <__swbuf_r+0x12>
 8013c6a:	6983      	ldr	r3, [r0, #24]
 8013c6c:	b90b      	cbnz	r3, 8013c72 <__swbuf_r+0x12>
 8013c6e:	f7fd feaf 	bl	80119d0 <__sinit>
 8013c72:	4b21      	ldr	r3, [pc, #132]	; (8013cf8 <__swbuf_r+0x98>)
 8013c74:	429c      	cmp	r4, r3
 8013c76:	d12b      	bne.n	8013cd0 <__swbuf_r+0x70>
 8013c78:	686c      	ldr	r4, [r5, #4]
 8013c7a:	69a3      	ldr	r3, [r4, #24]
 8013c7c:	60a3      	str	r3, [r4, #8]
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	071a      	lsls	r2, r3, #28
 8013c82:	d52f      	bpl.n	8013ce4 <__swbuf_r+0x84>
 8013c84:	6923      	ldr	r3, [r4, #16]
 8013c86:	b36b      	cbz	r3, 8013ce4 <__swbuf_r+0x84>
 8013c88:	6923      	ldr	r3, [r4, #16]
 8013c8a:	6820      	ldr	r0, [r4, #0]
 8013c8c:	1ac0      	subs	r0, r0, r3
 8013c8e:	6963      	ldr	r3, [r4, #20]
 8013c90:	b2f6      	uxtb	r6, r6
 8013c92:	4283      	cmp	r3, r0
 8013c94:	4637      	mov	r7, r6
 8013c96:	dc04      	bgt.n	8013ca2 <__swbuf_r+0x42>
 8013c98:	4621      	mov	r1, r4
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f000 ffde 	bl	8014c5c <_fflush_r>
 8013ca0:	bb30      	cbnz	r0, 8013cf0 <__swbuf_r+0x90>
 8013ca2:	68a3      	ldr	r3, [r4, #8]
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	60a3      	str	r3, [r4, #8]
 8013ca8:	6823      	ldr	r3, [r4, #0]
 8013caa:	1c5a      	adds	r2, r3, #1
 8013cac:	6022      	str	r2, [r4, #0]
 8013cae:	701e      	strb	r6, [r3, #0]
 8013cb0:	6963      	ldr	r3, [r4, #20]
 8013cb2:	3001      	adds	r0, #1
 8013cb4:	4283      	cmp	r3, r0
 8013cb6:	d004      	beq.n	8013cc2 <__swbuf_r+0x62>
 8013cb8:	89a3      	ldrh	r3, [r4, #12]
 8013cba:	07db      	lsls	r3, r3, #31
 8013cbc:	d506      	bpl.n	8013ccc <__swbuf_r+0x6c>
 8013cbe:	2e0a      	cmp	r6, #10
 8013cc0:	d104      	bne.n	8013ccc <__swbuf_r+0x6c>
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f000 ffc9 	bl	8014c5c <_fflush_r>
 8013cca:	b988      	cbnz	r0, 8013cf0 <__swbuf_r+0x90>
 8013ccc:	4638      	mov	r0, r7
 8013cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cd0:	4b0a      	ldr	r3, [pc, #40]	; (8013cfc <__swbuf_r+0x9c>)
 8013cd2:	429c      	cmp	r4, r3
 8013cd4:	d101      	bne.n	8013cda <__swbuf_r+0x7a>
 8013cd6:	68ac      	ldr	r4, [r5, #8]
 8013cd8:	e7cf      	b.n	8013c7a <__swbuf_r+0x1a>
 8013cda:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <__swbuf_r+0xa0>)
 8013cdc:	429c      	cmp	r4, r3
 8013cde:	bf08      	it	eq
 8013ce0:	68ec      	ldreq	r4, [r5, #12]
 8013ce2:	e7ca      	b.n	8013c7a <__swbuf_r+0x1a>
 8013ce4:	4621      	mov	r1, r4
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f000 f81e 	bl	8013d28 <__swsetup_r>
 8013cec:	2800      	cmp	r0, #0
 8013cee:	d0cb      	beq.n	8013c88 <__swbuf_r+0x28>
 8013cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8013cf4:	e7ea      	b.n	8013ccc <__swbuf_r+0x6c>
 8013cf6:	bf00      	nop
 8013cf8:	08018d6c 	.word	0x08018d6c
 8013cfc:	08018d8c 	.word	0x08018d8c
 8013d00:	08018d4c 	.word	0x08018d4c

08013d04 <_write_r>:
 8013d04:	b538      	push	{r3, r4, r5, lr}
 8013d06:	4d07      	ldr	r5, [pc, #28]	; (8013d24 <_write_r+0x20>)
 8013d08:	4604      	mov	r4, r0
 8013d0a:	4608      	mov	r0, r1
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	2200      	movs	r2, #0
 8013d10:	602a      	str	r2, [r5, #0]
 8013d12:	461a      	mov	r2, r3
 8013d14:	f002 ffc0 	bl	8016c98 <_write>
 8013d18:	1c43      	adds	r3, r0, #1
 8013d1a:	d102      	bne.n	8013d22 <_write_r+0x1e>
 8013d1c:	682b      	ldr	r3, [r5, #0]
 8013d1e:	b103      	cbz	r3, 8013d22 <_write_r+0x1e>
 8013d20:	6023      	str	r3, [r4, #0]
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	200064bc 	.word	0x200064bc

08013d28 <__swsetup_r>:
 8013d28:	4b32      	ldr	r3, [pc, #200]	; (8013df4 <__swsetup_r+0xcc>)
 8013d2a:	b570      	push	{r4, r5, r6, lr}
 8013d2c:	681d      	ldr	r5, [r3, #0]
 8013d2e:	4606      	mov	r6, r0
 8013d30:	460c      	mov	r4, r1
 8013d32:	b125      	cbz	r5, 8013d3e <__swsetup_r+0x16>
 8013d34:	69ab      	ldr	r3, [r5, #24]
 8013d36:	b913      	cbnz	r3, 8013d3e <__swsetup_r+0x16>
 8013d38:	4628      	mov	r0, r5
 8013d3a:	f7fd fe49 	bl	80119d0 <__sinit>
 8013d3e:	4b2e      	ldr	r3, [pc, #184]	; (8013df8 <__swsetup_r+0xd0>)
 8013d40:	429c      	cmp	r4, r3
 8013d42:	d10f      	bne.n	8013d64 <__swsetup_r+0x3c>
 8013d44:	686c      	ldr	r4, [r5, #4]
 8013d46:	89a3      	ldrh	r3, [r4, #12]
 8013d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d4c:	0719      	lsls	r1, r3, #28
 8013d4e:	d42c      	bmi.n	8013daa <__swsetup_r+0x82>
 8013d50:	06dd      	lsls	r5, r3, #27
 8013d52:	d411      	bmi.n	8013d78 <__swsetup_r+0x50>
 8013d54:	2309      	movs	r3, #9
 8013d56:	6033      	str	r3, [r6, #0]
 8013d58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d5c:	81a3      	strh	r3, [r4, #12]
 8013d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d62:	e03e      	b.n	8013de2 <__swsetup_r+0xba>
 8013d64:	4b25      	ldr	r3, [pc, #148]	; (8013dfc <__swsetup_r+0xd4>)
 8013d66:	429c      	cmp	r4, r3
 8013d68:	d101      	bne.n	8013d6e <__swsetup_r+0x46>
 8013d6a:	68ac      	ldr	r4, [r5, #8]
 8013d6c:	e7eb      	b.n	8013d46 <__swsetup_r+0x1e>
 8013d6e:	4b24      	ldr	r3, [pc, #144]	; (8013e00 <__swsetup_r+0xd8>)
 8013d70:	429c      	cmp	r4, r3
 8013d72:	bf08      	it	eq
 8013d74:	68ec      	ldreq	r4, [r5, #12]
 8013d76:	e7e6      	b.n	8013d46 <__swsetup_r+0x1e>
 8013d78:	0758      	lsls	r0, r3, #29
 8013d7a:	d512      	bpl.n	8013da2 <__swsetup_r+0x7a>
 8013d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d7e:	b141      	cbz	r1, 8013d92 <__swsetup_r+0x6a>
 8013d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d84:	4299      	cmp	r1, r3
 8013d86:	d002      	beq.n	8013d8e <__swsetup_r+0x66>
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f7fd ff1f 	bl	8011bcc <_free_r>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	6363      	str	r3, [r4, #52]	; 0x34
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	6063      	str	r3, [r4, #4]
 8013d9e:	6923      	ldr	r3, [r4, #16]
 8013da0:	6023      	str	r3, [r4, #0]
 8013da2:	89a3      	ldrh	r3, [r4, #12]
 8013da4:	f043 0308 	orr.w	r3, r3, #8
 8013da8:	81a3      	strh	r3, [r4, #12]
 8013daa:	6923      	ldr	r3, [r4, #16]
 8013dac:	b94b      	cbnz	r3, 8013dc2 <__swsetup_r+0x9a>
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013db8:	d003      	beq.n	8013dc2 <__swsetup_r+0x9a>
 8013dba:	4621      	mov	r1, r4
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f001 fb45 	bl	801544c <__smakebuf_r>
 8013dc2:	89a0      	ldrh	r0, [r4, #12]
 8013dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013dc8:	f010 0301 	ands.w	r3, r0, #1
 8013dcc:	d00a      	beq.n	8013de4 <__swsetup_r+0xbc>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	60a3      	str	r3, [r4, #8]
 8013dd2:	6963      	ldr	r3, [r4, #20]
 8013dd4:	425b      	negs	r3, r3
 8013dd6:	61a3      	str	r3, [r4, #24]
 8013dd8:	6923      	ldr	r3, [r4, #16]
 8013dda:	b943      	cbnz	r3, 8013dee <__swsetup_r+0xc6>
 8013ddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013de0:	d1ba      	bne.n	8013d58 <__swsetup_r+0x30>
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	0781      	lsls	r1, r0, #30
 8013de6:	bf58      	it	pl
 8013de8:	6963      	ldrpl	r3, [r4, #20]
 8013dea:	60a3      	str	r3, [r4, #8]
 8013dec:	e7f4      	b.n	8013dd8 <__swsetup_r+0xb0>
 8013dee:	2000      	movs	r0, #0
 8013df0:	e7f7      	b.n	8013de2 <__swsetup_r+0xba>
 8013df2:	bf00      	nop
 8013df4:	200000d8 	.word	0x200000d8
 8013df8:	08018d6c 	.word	0x08018d6c
 8013dfc:	08018d8c 	.word	0x08018d8c
 8013e00:	08018d4c 	.word	0x08018d4c

08013e04 <__assert_func>:
 8013e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e06:	4614      	mov	r4, r2
 8013e08:	461a      	mov	r2, r3
 8013e0a:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <__assert_func+0x2c>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	4605      	mov	r5, r0
 8013e10:	68d8      	ldr	r0, [r3, #12]
 8013e12:	b14c      	cbz	r4, 8013e28 <__assert_func+0x24>
 8013e14:	4b07      	ldr	r3, [pc, #28]	; (8013e34 <__assert_func+0x30>)
 8013e16:	9100      	str	r1, [sp, #0]
 8013e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e1c:	4906      	ldr	r1, [pc, #24]	; (8013e38 <__assert_func+0x34>)
 8013e1e:	462b      	mov	r3, r5
 8013e20:	f000 ff58 	bl	8014cd4 <fiprintf>
 8013e24:	f7fd fd6e 	bl	8011904 <abort>
 8013e28:	4b04      	ldr	r3, [pc, #16]	; (8013e3c <__assert_func+0x38>)
 8013e2a:	461c      	mov	r4, r3
 8013e2c:	e7f3      	b.n	8013e16 <__assert_func+0x12>
 8013e2e:	bf00      	nop
 8013e30:	200000d8 	.word	0x200000d8
 8013e34:	08018e38 	.word	0x08018e38
 8013e38:	08018e45 	.word	0x08018e45
 8013e3c:	08018e73 	.word	0x08018e73

08013e40 <_close_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4d06      	ldr	r5, [pc, #24]	; (8013e5c <_close_r+0x1c>)
 8013e44:	2300      	movs	r3, #0
 8013e46:	4604      	mov	r4, r0
 8013e48:	4608      	mov	r0, r1
 8013e4a:	602b      	str	r3, [r5, #0]
 8013e4c:	f002 fede 	bl	8016c0c <_close>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d102      	bne.n	8013e5a <_close_r+0x1a>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b103      	cbz	r3, 8013e5a <_close_r+0x1a>
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	200064bc 	.word	0x200064bc

08013e60 <quorem>:
 8013e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	6903      	ldr	r3, [r0, #16]
 8013e66:	690c      	ldr	r4, [r1, #16]
 8013e68:	42a3      	cmp	r3, r4
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	f2c0 8081 	blt.w	8013f72 <quorem+0x112>
 8013e70:	3c01      	subs	r4, #1
 8013e72:	f101 0814 	add.w	r8, r1, #20
 8013e76:	f100 0514 	add.w	r5, r0, #20
 8013e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e7e:	9301      	str	r3, [sp, #4]
 8013e80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e88:	3301      	adds	r3, #1
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013e90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8013e98:	d331      	bcc.n	8013efe <quorem+0x9e>
 8013e9a:	f04f 0e00 	mov.w	lr, #0
 8013e9e:	4640      	mov	r0, r8
 8013ea0:	46ac      	mov	ip, r5
 8013ea2:	46f2      	mov	sl, lr
 8013ea4:	f850 2b04 	ldr.w	r2, [r0], #4
 8013ea8:	b293      	uxth	r3, r2
 8013eaa:	fb06 e303 	mla	r3, r6, r3, lr
 8013eae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8013eb8:	0c12      	lsrs	r2, r2, #16
 8013eba:	f8dc a000 	ldr.w	sl, [ip]
 8013ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8013ec2:	fa13 f38a 	uxtah	r3, r3, sl
 8013ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013eca:	fa1f fa82 	uxth.w	sl, r2
 8013ece:	f8dc 2000 	ldr.w	r2, [ip]
 8013ed2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013ed6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ee0:	4581      	cmp	r9, r0
 8013ee2:	f84c 3b04 	str.w	r3, [ip], #4
 8013ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013eea:	d2db      	bcs.n	8013ea4 <quorem+0x44>
 8013eec:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ef0:	b92b      	cbnz	r3, 8013efe <quorem+0x9e>
 8013ef2:	9b01      	ldr	r3, [sp, #4]
 8013ef4:	3b04      	subs	r3, #4
 8013ef6:	429d      	cmp	r5, r3
 8013ef8:	461a      	mov	r2, r3
 8013efa:	d32e      	bcc.n	8013f5a <quorem+0xfa>
 8013efc:	613c      	str	r4, [r7, #16]
 8013efe:	4638      	mov	r0, r7
 8013f00:	f001 fdca 	bl	8015a98 <__mcmp>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	db24      	blt.n	8013f52 <quorem+0xf2>
 8013f08:	3601      	adds	r6, #1
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f04f 0c00 	mov.w	ip, #0
 8013f10:	f858 2b04 	ldr.w	r2, [r8], #4
 8013f14:	f8d0 e000 	ldr.w	lr, [r0]
 8013f18:	b293      	uxth	r3, r2
 8013f1a:	ebac 0303 	sub.w	r3, ip, r3
 8013f1e:	0c12      	lsrs	r2, r2, #16
 8013f20:	fa13 f38e 	uxtah	r3, r3, lr
 8013f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f32:	45c1      	cmp	r9, r8
 8013f34:	f840 3b04 	str.w	r3, [r0], #4
 8013f38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013f3c:	d2e8      	bcs.n	8013f10 <quorem+0xb0>
 8013f3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f46:	b922      	cbnz	r2, 8013f52 <quorem+0xf2>
 8013f48:	3b04      	subs	r3, #4
 8013f4a:	429d      	cmp	r5, r3
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	d30a      	bcc.n	8013f66 <quorem+0x106>
 8013f50:	613c      	str	r4, [r7, #16]
 8013f52:	4630      	mov	r0, r6
 8013f54:	b003      	add	sp, #12
 8013f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5a:	6812      	ldr	r2, [r2, #0]
 8013f5c:	3b04      	subs	r3, #4
 8013f5e:	2a00      	cmp	r2, #0
 8013f60:	d1cc      	bne.n	8013efc <quorem+0x9c>
 8013f62:	3c01      	subs	r4, #1
 8013f64:	e7c7      	b.n	8013ef6 <quorem+0x96>
 8013f66:	6812      	ldr	r2, [r2, #0]
 8013f68:	3b04      	subs	r3, #4
 8013f6a:	2a00      	cmp	r2, #0
 8013f6c:	d1f0      	bne.n	8013f50 <quorem+0xf0>
 8013f6e:	3c01      	subs	r4, #1
 8013f70:	e7eb      	b.n	8013f4a <quorem+0xea>
 8013f72:	2000      	movs	r0, #0
 8013f74:	e7ee      	b.n	8013f54 <quorem+0xf4>
	...

08013f78 <_dtoa_r>:
 8013f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	ed2d 8b02 	vpush	{d8}
 8013f80:	ec57 6b10 	vmov	r6, r7, d0
 8013f84:	b095      	sub	sp, #84	; 0x54
 8013f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013f8c:	9105      	str	r1, [sp, #20]
 8013f8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013f92:	4604      	mov	r4, r0
 8013f94:	9209      	str	r2, [sp, #36]	; 0x24
 8013f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f98:	b975      	cbnz	r5, 8013fb8 <_dtoa_r+0x40>
 8013f9a:	2010      	movs	r0, #16
 8013f9c:	f7fd fdde 	bl	8011b5c <malloc>
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	6260      	str	r0, [r4, #36]	; 0x24
 8013fa4:	b920      	cbnz	r0, 8013fb0 <_dtoa_r+0x38>
 8013fa6:	4bb2      	ldr	r3, [pc, #712]	; (8014270 <_dtoa_r+0x2f8>)
 8013fa8:	21ea      	movs	r1, #234	; 0xea
 8013faa:	48b2      	ldr	r0, [pc, #712]	; (8014274 <_dtoa_r+0x2fc>)
 8013fac:	f7ff ff2a 	bl	8013e04 <__assert_func>
 8013fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013fb4:	6005      	str	r5, [r0, #0]
 8013fb6:	60c5      	str	r5, [r0, #12]
 8013fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fba:	6819      	ldr	r1, [r3, #0]
 8013fbc:	b151      	cbz	r1, 8013fd4 <_dtoa_r+0x5c>
 8013fbe:	685a      	ldr	r2, [r3, #4]
 8013fc0:	604a      	str	r2, [r1, #4]
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	4093      	lsls	r3, r2
 8013fc6:	608b      	str	r3, [r1, #8]
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f001 fadd 	bl	8015588 <_Bfree>
 8013fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	601a      	str	r2, [r3, #0]
 8013fd4:	1e3b      	subs	r3, r7, #0
 8013fd6:	bfb9      	ittee	lt
 8013fd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013fdc:	9303      	strlt	r3, [sp, #12]
 8013fde:	2300      	movge	r3, #0
 8013fe0:	f8c8 3000 	strge.w	r3, [r8]
 8013fe4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013fe8:	4ba3      	ldr	r3, [pc, #652]	; (8014278 <_dtoa_r+0x300>)
 8013fea:	bfbc      	itt	lt
 8013fec:	2201      	movlt	r2, #1
 8013fee:	f8c8 2000 	strlt.w	r2, [r8]
 8013ff2:	ea33 0309 	bics.w	r3, r3, r9
 8013ff6:	d11b      	bne.n	8014030 <_dtoa_r+0xb8>
 8013ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ffe:	6013      	str	r3, [r2, #0]
 8014000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014004:	4333      	orrs	r3, r6
 8014006:	f000 857a 	beq.w	8014afe <_dtoa_r+0xb86>
 801400a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801400c:	b963      	cbnz	r3, 8014028 <_dtoa_r+0xb0>
 801400e:	4b9b      	ldr	r3, [pc, #620]	; (801427c <_dtoa_r+0x304>)
 8014010:	e024      	b.n	801405c <_dtoa_r+0xe4>
 8014012:	4b9b      	ldr	r3, [pc, #620]	; (8014280 <_dtoa_r+0x308>)
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	3308      	adds	r3, #8
 8014018:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801401a:	6013      	str	r3, [r2, #0]
 801401c:	9800      	ldr	r0, [sp, #0]
 801401e:	b015      	add	sp, #84	; 0x54
 8014020:	ecbd 8b02 	vpop	{d8}
 8014024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014028:	4b94      	ldr	r3, [pc, #592]	; (801427c <_dtoa_r+0x304>)
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	3303      	adds	r3, #3
 801402e:	e7f3      	b.n	8014018 <_dtoa_r+0xa0>
 8014030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014034:	2200      	movs	r2, #0
 8014036:	ec51 0b17 	vmov	r0, r1, d7
 801403a:	2300      	movs	r3, #0
 801403c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014040:	f7ec fd52 	bl	8000ae8 <__aeabi_dcmpeq>
 8014044:	4680      	mov	r8, r0
 8014046:	b158      	cbz	r0, 8014060 <_dtoa_r+0xe8>
 8014048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801404a:	2301      	movs	r3, #1
 801404c:	6013      	str	r3, [r2, #0]
 801404e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014050:	2b00      	cmp	r3, #0
 8014052:	f000 8551 	beq.w	8014af8 <_dtoa_r+0xb80>
 8014056:	488b      	ldr	r0, [pc, #556]	; (8014284 <_dtoa_r+0x30c>)
 8014058:	6018      	str	r0, [r3, #0]
 801405a:	1e43      	subs	r3, r0, #1
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	e7dd      	b.n	801401c <_dtoa_r+0xa4>
 8014060:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014064:	aa12      	add	r2, sp, #72	; 0x48
 8014066:	a913      	add	r1, sp, #76	; 0x4c
 8014068:	4620      	mov	r0, r4
 801406a:	f001 fe35 	bl	8015cd8 <__d2b>
 801406e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014072:	4683      	mov	fp, r0
 8014074:	2d00      	cmp	r5, #0
 8014076:	d07c      	beq.n	8014172 <_dtoa_r+0x1fa>
 8014078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801407a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801407e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014082:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014086:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801408a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801408e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014092:	4b7d      	ldr	r3, [pc, #500]	; (8014288 <_dtoa_r+0x310>)
 8014094:	2200      	movs	r2, #0
 8014096:	4630      	mov	r0, r6
 8014098:	4639      	mov	r1, r7
 801409a:	f7ec f905 	bl	80002a8 <__aeabi_dsub>
 801409e:	a36e      	add	r3, pc, #440	; (adr r3, 8014258 <_dtoa_r+0x2e0>)
 80140a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a4:	f7ec fab8 	bl	8000618 <__aeabi_dmul>
 80140a8:	a36d      	add	r3, pc, #436	; (adr r3, 8014260 <_dtoa_r+0x2e8>)
 80140aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ae:	f7ec f8fd 	bl	80002ac <__adddf3>
 80140b2:	4606      	mov	r6, r0
 80140b4:	4628      	mov	r0, r5
 80140b6:	460f      	mov	r7, r1
 80140b8:	f7ec fa44 	bl	8000544 <__aeabi_i2d>
 80140bc:	a36a      	add	r3, pc, #424	; (adr r3, 8014268 <_dtoa_r+0x2f0>)
 80140be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c2:	f7ec faa9 	bl	8000618 <__aeabi_dmul>
 80140c6:	4602      	mov	r2, r0
 80140c8:	460b      	mov	r3, r1
 80140ca:	4630      	mov	r0, r6
 80140cc:	4639      	mov	r1, r7
 80140ce:	f7ec f8ed 	bl	80002ac <__adddf3>
 80140d2:	4606      	mov	r6, r0
 80140d4:	460f      	mov	r7, r1
 80140d6:	f7ec fd4f 	bl	8000b78 <__aeabi_d2iz>
 80140da:	2200      	movs	r2, #0
 80140dc:	4682      	mov	sl, r0
 80140de:	2300      	movs	r3, #0
 80140e0:	4630      	mov	r0, r6
 80140e2:	4639      	mov	r1, r7
 80140e4:	f7ec fd0a 	bl	8000afc <__aeabi_dcmplt>
 80140e8:	b148      	cbz	r0, 80140fe <_dtoa_r+0x186>
 80140ea:	4650      	mov	r0, sl
 80140ec:	f7ec fa2a 	bl	8000544 <__aeabi_i2d>
 80140f0:	4632      	mov	r2, r6
 80140f2:	463b      	mov	r3, r7
 80140f4:	f7ec fcf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80140f8:	b908      	cbnz	r0, 80140fe <_dtoa_r+0x186>
 80140fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140fe:	f1ba 0f16 	cmp.w	sl, #22
 8014102:	d854      	bhi.n	80141ae <_dtoa_r+0x236>
 8014104:	4b61      	ldr	r3, [pc, #388]	; (801428c <_dtoa_r+0x314>)
 8014106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801410e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014112:	f7ec fcf3 	bl	8000afc <__aeabi_dcmplt>
 8014116:	2800      	cmp	r0, #0
 8014118:	d04b      	beq.n	80141b2 <_dtoa_r+0x23a>
 801411a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801411e:	2300      	movs	r3, #0
 8014120:	930e      	str	r3, [sp, #56]	; 0x38
 8014122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014124:	1b5d      	subs	r5, r3, r5
 8014126:	1e6b      	subs	r3, r5, #1
 8014128:	9304      	str	r3, [sp, #16]
 801412a:	bf43      	ittte	mi
 801412c:	2300      	movmi	r3, #0
 801412e:	f1c5 0801 	rsbmi	r8, r5, #1
 8014132:	9304      	strmi	r3, [sp, #16]
 8014134:	f04f 0800 	movpl.w	r8, #0
 8014138:	f1ba 0f00 	cmp.w	sl, #0
 801413c:	db3b      	blt.n	80141b6 <_dtoa_r+0x23e>
 801413e:	9b04      	ldr	r3, [sp, #16]
 8014140:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014144:	4453      	add	r3, sl
 8014146:	9304      	str	r3, [sp, #16]
 8014148:	2300      	movs	r3, #0
 801414a:	9306      	str	r3, [sp, #24]
 801414c:	9b05      	ldr	r3, [sp, #20]
 801414e:	2b09      	cmp	r3, #9
 8014150:	d869      	bhi.n	8014226 <_dtoa_r+0x2ae>
 8014152:	2b05      	cmp	r3, #5
 8014154:	bfc4      	itt	gt
 8014156:	3b04      	subgt	r3, #4
 8014158:	9305      	strgt	r3, [sp, #20]
 801415a:	9b05      	ldr	r3, [sp, #20]
 801415c:	f1a3 0302 	sub.w	r3, r3, #2
 8014160:	bfcc      	ite	gt
 8014162:	2500      	movgt	r5, #0
 8014164:	2501      	movle	r5, #1
 8014166:	2b03      	cmp	r3, #3
 8014168:	d869      	bhi.n	801423e <_dtoa_r+0x2c6>
 801416a:	e8df f003 	tbb	[pc, r3]
 801416e:	4e2c      	.short	0x4e2c
 8014170:	5a4c      	.short	0x5a4c
 8014172:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014176:	441d      	add	r5, r3
 8014178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801417c:	2b20      	cmp	r3, #32
 801417e:	bfc1      	itttt	gt
 8014180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014184:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014188:	fa09 f303 	lslgt.w	r3, r9, r3
 801418c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014190:	bfda      	itte	le
 8014192:	f1c3 0320 	rsble	r3, r3, #32
 8014196:	fa06 f003 	lslle.w	r0, r6, r3
 801419a:	4318      	orrgt	r0, r3
 801419c:	f7ec f9c2 	bl	8000524 <__aeabi_ui2d>
 80141a0:	2301      	movs	r3, #1
 80141a2:	4606      	mov	r6, r0
 80141a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80141a8:	3d01      	subs	r5, #1
 80141aa:	9310      	str	r3, [sp, #64]	; 0x40
 80141ac:	e771      	b.n	8014092 <_dtoa_r+0x11a>
 80141ae:	2301      	movs	r3, #1
 80141b0:	e7b6      	b.n	8014120 <_dtoa_r+0x1a8>
 80141b2:	900e      	str	r0, [sp, #56]	; 0x38
 80141b4:	e7b5      	b.n	8014122 <_dtoa_r+0x1aa>
 80141b6:	f1ca 0300 	rsb	r3, sl, #0
 80141ba:	9306      	str	r3, [sp, #24]
 80141bc:	2300      	movs	r3, #0
 80141be:	eba8 080a 	sub.w	r8, r8, sl
 80141c2:	930d      	str	r3, [sp, #52]	; 0x34
 80141c4:	e7c2      	b.n	801414c <_dtoa_r+0x1d4>
 80141c6:	2300      	movs	r3, #0
 80141c8:	9308      	str	r3, [sp, #32]
 80141ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	dc39      	bgt.n	8014244 <_dtoa_r+0x2cc>
 80141d0:	f04f 0901 	mov.w	r9, #1
 80141d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80141d8:	464b      	mov	r3, r9
 80141da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80141de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80141e0:	2200      	movs	r2, #0
 80141e2:	6042      	str	r2, [r0, #4]
 80141e4:	2204      	movs	r2, #4
 80141e6:	f102 0614 	add.w	r6, r2, #20
 80141ea:	429e      	cmp	r6, r3
 80141ec:	6841      	ldr	r1, [r0, #4]
 80141ee:	d92f      	bls.n	8014250 <_dtoa_r+0x2d8>
 80141f0:	4620      	mov	r0, r4
 80141f2:	f001 f989 	bl	8015508 <_Balloc>
 80141f6:	9000      	str	r0, [sp, #0]
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d14b      	bne.n	8014294 <_dtoa_r+0x31c>
 80141fc:	4b24      	ldr	r3, [pc, #144]	; (8014290 <_dtoa_r+0x318>)
 80141fe:	4602      	mov	r2, r0
 8014200:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014204:	e6d1      	b.n	8013faa <_dtoa_r+0x32>
 8014206:	2301      	movs	r3, #1
 8014208:	e7de      	b.n	80141c8 <_dtoa_r+0x250>
 801420a:	2300      	movs	r3, #0
 801420c:	9308      	str	r3, [sp, #32]
 801420e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014210:	eb0a 0903 	add.w	r9, sl, r3
 8014214:	f109 0301 	add.w	r3, r9, #1
 8014218:	2b01      	cmp	r3, #1
 801421a:	9301      	str	r3, [sp, #4]
 801421c:	bfb8      	it	lt
 801421e:	2301      	movlt	r3, #1
 8014220:	e7dd      	b.n	80141de <_dtoa_r+0x266>
 8014222:	2301      	movs	r3, #1
 8014224:	e7f2      	b.n	801420c <_dtoa_r+0x294>
 8014226:	2501      	movs	r5, #1
 8014228:	2300      	movs	r3, #0
 801422a:	9305      	str	r3, [sp, #20]
 801422c:	9508      	str	r5, [sp, #32]
 801422e:	f04f 39ff 	mov.w	r9, #4294967295
 8014232:	2200      	movs	r2, #0
 8014234:	f8cd 9004 	str.w	r9, [sp, #4]
 8014238:	2312      	movs	r3, #18
 801423a:	9209      	str	r2, [sp, #36]	; 0x24
 801423c:	e7cf      	b.n	80141de <_dtoa_r+0x266>
 801423e:	2301      	movs	r3, #1
 8014240:	9308      	str	r3, [sp, #32]
 8014242:	e7f4      	b.n	801422e <_dtoa_r+0x2b6>
 8014244:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014248:	f8cd 9004 	str.w	r9, [sp, #4]
 801424c:	464b      	mov	r3, r9
 801424e:	e7c6      	b.n	80141de <_dtoa_r+0x266>
 8014250:	3101      	adds	r1, #1
 8014252:	6041      	str	r1, [r0, #4]
 8014254:	0052      	lsls	r2, r2, #1
 8014256:	e7c6      	b.n	80141e6 <_dtoa_r+0x26e>
 8014258:	636f4361 	.word	0x636f4361
 801425c:	3fd287a7 	.word	0x3fd287a7
 8014260:	8b60c8b3 	.word	0x8b60c8b3
 8014264:	3fc68a28 	.word	0x3fc68a28
 8014268:	509f79fb 	.word	0x509f79fb
 801426c:	3fd34413 	.word	0x3fd34413
 8014270:	08018e81 	.word	0x08018e81
 8014274:	08018e98 	.word	0x08018e98
 8014278:	7ff00000 	.word	0x7ff00000
 801427c:	08018e7d 	.word	0x08018e7d
 8014280:	08018e74 	.word	0x08018e74
 8014284:	080190fa 	.word	0x080190fa
 8014288:	3ff80000 	.word	0x3ff80000
 801428c:	08019010 	.word	0x08019010
 8014290:	08018ef7 	.word	0x08018ef7
 8014294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014296:	9a00      	ldr	r2, [sp, #0]
 8014298:	601a      	str	r2, [r3, #0]
 801429a:	9b01      	ldr	r3, [sp, #4]
 801429c:	2b0e      	cmp	r3, #14
 801429e:	f200 80ad 	bhi.w	80143fc <_dtoa_r+0x484>
 80142a2:	2d00      	cmp	r5, #0
 80142a4:	f000 80aa 	beq.w	80143fc <_dtoa_r+0x484>
 80142a8:	f1ba 0f00 	cmp.w	sl, #0
 80142ac:	dd36      	ble.n	801431c <_dtoa_r+0x3a4>
 80142ae:	4ac3      	ldr	r2, [pc, #780]	; (80145bc <_dtoa_r+0x644>)
 80142b0:	f00a 030f 	and.w	r3, sl, #15
 80142b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80142b8:	ed93 7b00 	vldr	d7, [r3]
 80142bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80142c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80142c4:	eeb0 8a47 	vmov.f32	s16, s14
 80142c8:	eef0 8a67 	vmov.f32	s17, s15
 80142cc:	d016      	beq.n	80142fc <_dtoa_r+0x384>
 80142ce:	4bbc      	ldr	r3, [pc, #752]	; (80145c0 <_dtoa_r+0x648>)
 80142d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80142d8:	f7ec fac8 	bl	800086c <__aeabi_ddiv>
 80142dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80142e0:	f007 070f 	and.w	r7, r7, #15
 80142e4:	2503      	movs	r5, #3
 80142e6:	4eb6      	ldr	r6, [pc, #728]	; (80145c0 <_dtoa_r+0x648>)
 80142e8:	b957      	cbnz	r7, 8014300 <_dtoa_r+0x388>
 80142ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142ee:	ec53 2b18 	vmov	r2, r3, d8
 80142f2:	f7ec fabb 	bl	800086c <__aeabi_ddiv>
 80142f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80142fa:	e029      	b.n	8014350 <_dtoa_r+0x3d8>
 80142fc:	2502      	movs	r5, #2
 80142fe:	e7f2      	b.n	80142e6 <_dtoa_r+0x36e>
 8014300:	07f9      	lsls	r1, r7, #31
 8014302:	d508      	bpl.n	8014316 <_dtoa_r+0x39e>
 8014304:	ec51 0b18 	vmov	r0, r1, d8
 8014308:	e9d6 2300 	ldrd	r2, r3, [r6]
 801430c:	f7ec f984 	bl	8000618 <__aeabi_dmul>
 8014310:	ec41 0b18 	vmov	d8, r0, r1
 8014314:	3501      	adds	r5, #1
 8014316:	107f      	asrs	r7, r7, #1
 8014318:	3608      	adds	r6, #8
 801431a:	e7e5      	b.n	80142e8 <_dtoa_r+0x370>
 801431c:	f000 80a6 	beq.w	801446c <_dtoa_r+0x4f4>
 8014320:	f1ca 0600 	rsb	r6, sl, #0
 8014324:	4ba5      	ldr	r3, [pc, #660]	; (80145bc <_dtoa_r+0x644>)
 8014326:	4fa6      	ldr	r7, [pc, #664]	; (80145c0 <_dtoa_r+0x648>)
 8014328:	f006 020f 	and.w	r2, r6, #15
 801432c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014334:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014338:	f7ec f96e 	bl	8000618 <__aeabi_dmul>
 801433c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014340:	1136      	asrs	r6, r6, #4
 8014342:	2300      	movs	r3, #0
 8014344:	2502      	movs	r5, #2
 8014346:	2e00      	cmp	r6, #0
 8014348:	f040 8085 	bne.w	8014456 <_dtoa_r+0x4de>
 801434c:	2b00      	cmp	r3, #0
 801434e:	d1d2      	bne.n	80142f6 <_dtoa_r+0x37e>
 8014350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014352:	2b00      	cmp	r3, #0
 8014354:	f000 808c 	beq.w	8014470 <_dtoa_r+0x4f8>
 8014358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801435c:	4b99      	ldr	r3, [pc, #612]	; (80145c4 <_dtoa_r+0x64c>)
 801435e:	2200      	movs	r2, #0
 8014360:	4630      	mov	r0, r6
 8014362:	4639      	mov	r1, r7
 8014364:	f7ec fbca 	bl	8000afc <__aeabi_dcmplt>
 8014368:	2800      	cmp	r0, #0
 801436a:	f000 8081 	beq.w	8014470 <_dtoa_r+0x4f8>
 801436e:	9b01      	ldr	r3, [sp, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d07d      	beq.n	8014470 <_dtoa_r+0x4f8>
 8014374:	f1b9 0f00 	cmp.w	r9, #0
 8014378:	dd3c      	ble.n	80143f4 <_dtoa_r+0x47c>
 801437a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801437e:	9307      	str	r3, [sp, #28]
 8014380:	2200      	movs	r2, #0
 8014382:	4b91      	ldr	r3, [pc, #580]	; (80145c8 <_dtoa_r+0x650>)
 8014384:	4630      	mov	r0, r6
 8014386:	4639      	mov	r1, r7
 8014388:	f7ec f946 	bl	8000618 <__aeabi_dmul>
 801438c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014390:	3501      	adds	r5, #1
 8014392:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014396:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801439a:	4628      	mov	r0, r5
 801439c:	f7ec f8d2 	bl	8000544 <__aeabi_i2d>
 80143a0:	4632      	mov	r2, r6
 80143a2:	463b      	mov	r3, r7
 80143a4:	f7ec f938 	bl	8000618 <__aeabi_dmul>
 80143a8:	4b88      	ldr	r3, [pc, #544]	; (80145cc <_dtoa_r+0x654>)
 80143aa:	2200      	movs	r2, #0
 80143ac:	f7eb ff7e 	bl	80002ac <__adddf3>
 80143b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80143b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143b8:	9303      	str	r3, [sp, #12]
 80143ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d15c      	bne.n	801447a <_dtoa_r+0x502>
 80143c0:	4b83      	ldr	r3, [pc, #524]	; (80145d0 <_dtoa_r+0x658>)
 80143c2:	2200      	movs	r2, #0
 80143c4:	4630      	mov	r0, r6
 80143c6:	4639      	mov	r1, r7
 80143c8:	f7eb ff6e 	bl	80002a8 <__aeabi_dsub>
 80143cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143d0:	4606      	mov	r6, r0
 80143d2:	460f      	mov	r7, r1
 80143d4:	f7ec fbb0 	bl	8000b38 <__aeabi_dcmpgt>
 80143d8:	2800      	cmp	r0, #0
 80143da:	f040 8296 	bne.w	801490a <_dtoa_r+0x992>
 80143de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80143e2:	4630      	mov	r0, r6
 80143e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143e8:	4639      	mov	r1, r7
 80143ea:	f7ec fb87 	bl	8000afc <__aeabi_dcmplt>
 80143ee:	2800      	cmp	r0, #0
 80143f0:	f040 8288 	bne.w	8014904 <_dtoa_r+0x98c>
 80143f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80143f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80143fe:	2b00      	cmp	r3, #0
 8014400:	f2c0 8158 	blt.w	80146b4 <_dtoa_r+0x73c>
 8014404:	f1ba 0f0e 	cmp.w	sl, #14
 8014408:	f300 8154 	bgt.w	80146b4 <_dtoa_r+0x73c>
 801440c:	4b6b      	ldr	r3, [pc, #428]	; (80145bc <_dtoa_r+0x644>)
 801440e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014412:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014418:	2b00      	cmp	r3, #0
 801441a:	f280 80e3 	bge.w	80145e4 <_dtoa_r+0x66c>
 801441e:	9b01      	ldr	r3, [sp, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	f300 80df 	bgt.w	80145e4 <_dtoa_r+0x66c>
 8014426:	f040 826d 	bne.w	8014904 <_dtoa_r+0x98c>
 801442a:	4b69      	ldr	r3, [pc, #420]	; (80145d0 <_dtoa_r+0x658>)
 801442c:	2200      	movs	r2, #0
 801442e:	4640      	mov	r0, r8
 8014430:	4649      	mov	r1, r9
 8014432:	f7ec f8f1 	bl	8000618 <__aeabi_dmul>
 8014436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801443a:	f7ec fb73 	bl	8000b24 <__aeabi_dcmpge>
 801443e:	9e01      	ldr	r6, [sp, #4]
 8014440:	4637      	mov	r7, r6
 8014442:	2800      	cmp	r0, #0
 8014444:	f040 8243 	bne.w	80148ce <_dtoa_r+0x956>
 8014448:	9d00      	ldr	r5, [sp, #0]
 801444a:	2331      	movs	r3, #49	; 0x31
 801444c:	f805 3b01 	strb.w	r3, [r5], #1
 8014450:	f10a 0a01 	add.w	sl, sl, #1
 8014454:	e23f      	b.n	80148d6 <_dtoa_r+0x95e>
 8014456:	07f2      	lsls	r2, r6, #31
 8014458:	d505      	bpl.n	8014466 <_dtoa_r+0x4ee>
 801445a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801445e:	f7ec f8db 	bl	8000618 <__aeabi_dmul>
 8014462:	3501      	adds	r5, #1
 8014464:	2301      	movs	r3, #1
 8014466:	1076      	asrs	r6, r6, #1
 8014468:	3708      	adds	r7, #8
 801446a:	e76c      	b.n	8014346 <_dtoa_r+0x3ce>
 801446c:	2502      	movs	r5, #2
 801446e:	e76f      	b.n	8014350 <_dtoa_r+0x3d8>
 8014470:	9b01      	ldr	r3, [sp, #4]
 8014472:	f8cd a01c 	str.w	sl, [sp, #28]
 8014476:	930c      	str	r3, [sp, #48]	; 0x30
 8014478:	e78d      	b.n	8014396 <_dtoa_r+0x41e>
 801447a:	9900      	ldr	r1, [sp, #0]
 801447c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801447e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014480:	4b4e      	ldr	r3, [pc, #312]	; (80145bc <_dtoa_r+0x644>)
 8014482:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014486:	4401      	add	r1, r0
 8014488:	9102      	str	r1, [sp, #8]
 801448a:	9908      	ldr	r1, [sp, #32]
 801448c:	eeb0 8a47 	vmov.f32	s16, s14
 8014490:	eef0 8a67 	vmov.f32	s17, s15
 8014494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801449c:	2900      	cmp	r1, #0
 801449e:	d045      	beq.n	801452c <_dtoa_r+0x5b4>
 80144a0:	494c      	ldr	r1, [pc, #304]	; (80145d4 <_dtoa_r+0x65c>)
 80144a2:	2000      	movs	r0, #0
 80144a4:	f7ec f9e2 	bl	800086c <__aeabi_ddiv>
 80144a8:	ec53 2b18 	vmov	r2, r3, d8
 80144ac:	f7eb fefc 	bl	80002a8 <__aeabi_dsub>
 80144b0:	9d00      	ldr	r5, [sp, #0]
 80144b2:	ec41 0b18 	vmov	d8, r0, r1
 80144b6:	4639      	mov	r1, r7
 80144b8:	4630      	mov	r0, r6
 80144ba:	f7ec fb5d 	bl	8000b78 <__aeabi_d2iz>
 80144be:	900c      	str	r0, [sp, #48]	; 0x30
 80144c0:	f7ec f840 	bl	8000544 <__aeabi_i2d>
 80144c4:	4602      	mov	r2, r0
 80144c6:	460b      	mov	r3, r1
 80144c8:	4630      	mov	r0, r6
 80144ca:	4639      	mov	r1, r7
 80144cc:	f7eb feec 	bl	80002a8 <__aeabi_dsub>
 80144d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144d2:	3330      	adds	r3, #48	; 0x30
 80144d4:	f805 3b01 	strb.w	r3, [r5], #1
 80144d8:	ec53 2b18 	vmov	r2, r3, d8
 80144dc:	4606      	mov	r6, r0
 80144de:	460f      	mov	r7, r1
 80144e0:	f7ec fb0c 	bl	8000afc <__aeabi_dcmplt>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d165      	bne.n	80145b4 <_dtoa_r+0x63c>
 80144e8:	4632      	mov	r2, r6
 80144ea:	463b      	mov	r3, r7
 80144ec:	4935      	ldr	r1, [pc, #212]	; (80145c4 <_dtoa_r+0x64c>)
 80144ee:	2000      	movs	r0, #0
 80144f0:	f7eb feda 	bl	80002a8 <__aeabi_dsub>
 80144f4:	ec53 2b18 	vmov	r2, r3, d8
 80144f8:	f7ec fb00 	bl	8000afc <__aeabi_dcmplt>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f040 80b9 	bne.w	8014674 <_dtoa_r+0x6fc>
 8014502:	9b02      	ldr	r3, [sp, #8]
 8014504:	429d      	cmp	r5, r3
 8014506:	f43f af75 	beq.w	80143f4 <_dtoa_r+0x47c>
 801450a:	4b2f      	ldr	r3, [pc, #188]	; (80145c8 <_dtoa_r+0x650>)
 801450c:	ec51 0b18 	vmov	r0, r1, d8
 8014510:	2200      	movs	r2, #0
 8014512:	f7ec f881 	bl	8000618 <__aeabi_dmul>
 8014516:	4b2c      	ldr	r3, [pc, #176]	; (80145c8 <_dtoa_r+0x650>)
 8014518:	ec41 0b18 	vmov	d8, r0, r1
 801451c:	2200      	movs	r2, #0
 801451e:	4630      	mov	r0, r6
 8014520:	4639      	mov	r1, r7
 8014522:	f7ec f879 	bl	8000618 <__aeabi_dmul>
 8014526:	4606      	mov	r6, r0
 8014528:	460f      	mov	r7, r1
 801452a:	e7c4      	b.n	80144b6 <_dtoa_r+0x53e>
 801452c:	ec51 0b17 	vmov	r0, r1, d7
 8014530:	f7ec f872 	bl	8000618 <__aeabi_dmul>
 8014534:	9b02      	ldr	r3, [sp, #8]
 8014536:	9d00      	ldr	r5, [sp, #0]
 8014538:	930c      	str	r3, [sp, #48]	; 0x30
 801453a:	ec41 0b18 	vmov	d8, r0, r1
 801453e:	4639      	mov	r1, r7
 8014540:	4630      	mov	r0, r6
 8014542:	f7ec fb19 	bl	8000b78 <__aeabi_d2iz>
 8014546:	9011      	str	r0, [sp, #68]	; 0x44
 8014548:	f7eb fffc 	bl	8000544 <__aeabi_i2d>
 801454c:	4602      	mov	r2, r0
 801454e:	460b      	mov	r3, r1
 8014550:	4630      	mov	r0, r6
 8014552:	4639      	mov	r1, r7
 8014554:	f7eb fea8 	bl	80002a8 <__aeabi_dsub>
 8014558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801455a:	3330      	adds	r3, #48	; 0x30
 801455c:	f805 3b01 	strb.w	r3, [r5], #1
 8014560:	9b02      	ldr	r3, [sp, #8]
 8014562:	429d      	cmp	r5, r3
 8014564:	4606      	mov	r6, r0
 8014566:	460f      	mov	r7, r1
 8014568:	f04f 0200 	mov.w	r2, #0
 801456c:	d134      	bne.n	80145d8 <_dtoa_r+0x660>
 801456e:	4b19      	ldr	r3, [pc, #100]	; (80145d4 <_dtoa_r+0x65c>)
 8014570:	ec51 0b18 	vmov	r0, r1, d8
 8014574:	f7eb fe9a 	bl	80002ac <__adddf3>
 8014578:	4602      	mov	r2, r0
 801457a:	460b      	mov	r3, r1
 801457c:	4630      	mov	r0, r6
 801457e:	4639      	mov	r1, r7
 8014580:	f7ec fada 	bl	8000b38 <__aeabi_dcmpgt>
 8014584:	2800      	cmp	r0, #0
 8014586:	d175      	bne.n	8014674 <_dtoa_r+0x6fc>
 8014588:	ec53 2b18 	vmov	r2, r3, d8
 801458c:	4911      	ldr	r1, [pc, #68]	; (80145d4 <_dtoa_r+0x65c>)
 801458e:	2000      	movs	r0, #0
 8014590:	f7eb fe8a 	bl	80002a8 <__aeabi_dsub>
 8014594:	4602      	mov	r2, r0
 8014596:	460b      	mov	r3, r1
 8014598:	4630      	mov	r0, r6
 801459a:	4639      	mov	r1, r7
 801459c:	f7ec faae 	bl	8000afc <__aeabi_dcmplt>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	f43f af27 	beq.w	80143f4 <_dtoa_r+0x47c>
 80145a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80145a8:	1e6b      	subs	r3, r5, #1
 80145aa:	930c      	str	r3, [sp, #48]	; 0x30
 80145ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80145b0:	2b30      	cmp	r3, #48	; 0x30
 80145b2:	d0f8      	beq.n	80145a6 <_dtoa_r+0x62e>
 80145b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80145b8:	e04a      	b.n	8014650 <_dtoa_r+0x6d8>
 80145ba:	bf00      	nop
 80145bc:	08019010 	.word	0x08019010
 80145c0:	08018fe8 	.word	0x08018fe8
 80145c4:	3ff00000 	.word	0x3ff00000
 80145c8:	40240000 	.word	0x40240000
 80145cc:	401c0000 	.word	0x401c0000
 80145d0:	40140000 	.word	0x40140000
 80145d4:	3fe00000 	.word	0x3fe00000
 80145d8:	4baf      	ldr	r3, [pc, #700]	; (8014898 <_dtoa_r+0x920>)
 80145da:	f7ec f81d 	bl	8000618 <__aeabi_dmul>
 80145de:	4606      	mov	r6, r0
 80145e0:	460f      	mov	r7, r1
 80145e2:	e7ac      	b.n	801453e <_dtoa_r+0x5c6>
 80145e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80145e8:	9d00      	ldr	r5, [sp, #0]
 80145ea:	4642      	mov	r2, r8
 80145ec:	464b      	mov	r3, r9
 80145ee:	4630      	mov	r0, r6
 80145f0:	4639      	mov	r1, r7
 80145f2:	f7ec f93b 	bl	800086c <__aeabi_ddiv>
 80145f6:	f7ec fabf 	bl	8000b78 <__aeabi_d2iz>
 80145fa:	9002      	str	r0, [sp, #8]
 80145fc:	f7eb ffa2 	bl	8000544 <__aeabi_i2d>
 8014600:	4642      	mov	r2, r8
 8014602:	464b      	mov	r3, r9
 8014604:	f7ec f808 	bl	8000618 <__aeabi_dmul>
 8014608:	4602      	mov	r2, r0
 801460a:	460b      	mov	r3, r1
 801460c:	4630      	mov	r0, r6
 801460e:	4639      	mov	r1, r7
 8014610:	f7eb fe4a 	bl	80002a8 <__aeabi_dsub>
 8014614:	9e02      	ldr	r6, [sp, #8]
 8014616:	9f01      	ldr	r7, [sp, #4]
 8014618:	3630      	adds	r6, #48	; 0x30
 801461a:	f805 6b01 	strb.w	r6, [r5], #1
 801461e:	9e00      	ldr	r6, [sp, #0]
 8014620:	1bae      	subs	r6, r5, r6
 8014622:	42b7      	cmp	r7, r6
 8014624:	4602      	mov	r2, r0
 8014626:	460b      	mov	r3, r1
 8014628:	d137      	bne.n	801469a <_dtoa_r+0x722>
 801462a:	f7eb fe3f 	bl	80002ac <__adddf3>
 801462e:	4642      	mov	r2, r8
 8014630:	464b      	mov	r3, r9
 8014632:	4606      	mov	r6, r0
 8014634:	460f      	mov	r7, r1
 8014636:	f7ec fa7f 	bl	8000b38 <__aeabi_dcmpgt>
 801463a:	b9c8      	cbnz	r0, 8014670 <_dtoa_r+0x6f8>
 801463c:	4642      	mov	r2, r8
 801463e:	464b      	mov	r3, r9
 8014640:	4630      	mov	r0, r6
 8014642:	4639      	mov	r1, r7
 8014644:	f7ec fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8014648:	b110      	cbz	r0, 8014650 <_dtoa_r+0x6d8>
 801464a:	9b02      	ldr	r3, [sp, #8]
 801464c:	07d9      	lsls	r1, r3, #31
 801464e:	d40f      	bmi.n	8014670 <_dtoa_r+0x6f8>
 8014650:	4620      	mov	r0, r4
 8014652:	4659      	mov	r1, fp
 8014654:	f000 ff98 	bl	8015588 <_Bfree>
 8014658:	2300      	movs	r3, #0
 801465a:	702b      	strb	r3, [r5, #0]
 801465c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801465e:	f10a 0001 	add.w	r0, sl, #1
 8014662:	6018      	str	r0, [r3, #0]
 8014664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014666:	2b00      	cmp	r3, #0
 8014668:	f43f acd8 	beq.w	801401c <_dtoa_r+0xa4>
 801466c:	601d      	str	r5, [r3, #0]
 801466e:	e4d5      	b.n	801401c <_dtoa_r+0xa4>
 8014670:	f8cd a01c 	str.w	sl, [sp, #28]
 8014674:	462b      	mov	r3, r5
 8014676:	461d      	mov	r5, r3
 8014678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801467c:	2a39      	cmp	r2, #57	; 0x39
 801467e:	d108      	bne.n	8014692 <_dtoa_r+0x71a>
 8014680:	9a00      	ldr	r2, [sp, #0]
 8014682:	429a      	cmp	r2, r3
 8014684:	d1f7      	bne.n	8014676 <_dtoa_r+0x6fe>
 8014686:	9a07      	ldr	r2, [sp, #28]
 8014688:	9900      	ldr	r1, [sp, #0]
 801468a:	3201      	adds	r2, #1
 801468c:	9207      	str	r2, [sp, #28]
 801468e:	2230      	movs	r2, #48	; 0x30
 8014690:	700a      	strb	r2, [r1, #0]
 8014692:	781a      	ldrb	r2, [r3, #0]
 8014694:	3201      	adds	r2, #1
 8014696:	701a      	strb	r2, [r3, #0]
 8014698:	e78c      	b.n	80145b4 <_dtoa_r+0x63c>
 801469a:	4b7f      	ldr	r3, [pc, #508]	; (8014898 <_dtoa_r+0x920>)
 801469c:	2200      	movs	r2, #0
 801469e:	f7eb ffbb 	bl	8000618 <__aeabi_dmul>
 80146a2:	2200      	movs	r2, #0
 80146a4:	2300      	movs	r3, #0
 80146a6:	4606      	mov	r6, r0
 80146a8:	460f      	mov	r7, r1
 80146aa:	f7ec fa1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d09b      	beq.n	80145ea <_dtoa_r+0x672>
 80146b2:	e7cd      	b.n	8014650 <_dtoa_r+0x6d8>
 80146b4:	9a08      	ldr	r2, [sp, #32]
 80146b6:	2a00      	cmp	r2, #0
 80146b8:	f000 80c4 	beq.w	8014844 <_dtoa_r+0x8cc>
 80146bc:	9a05      	ldr	r2, [sp, #20]
 80146be:	2a01      	cmp	r2, #1
 80146c0:	f300 80a8 	bgt.w	8014814 <_dtoa_r+0x89c>
 80146c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146c6:	2a00      	cmp	r2, #0
 80146c8:	f000 80a0 	beq.w	801480c <_dtoa_r+0x894>
 80146cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80146d0:	9e06      	ldr	r6, [sp, #24]
 80146d2:	4645      	mov	r5, r8
 80146d4:	9a04      	ldr	r2, [sp, #16]
 80146d6:	2101      	movs	r1, #1
 80146d8:	441a      	add	r2, r3
 80146da:	4620      	mov	r0, r4
 80146dc:	4498      	add	r8, r3
 80146de:	9204      	str	r2, [sp, #16]
 80146e0:	f001 f858 	bl	8015794 <__i2b>
 80146e4:	4607      	mov	r7, r0
 80146e6:	2d00      	cmp	r5, #0
 80146e8:	dd0b      	ble.n	8014702 <_dtoa_r+0x78a>
 80146ea:	9b04      	ldr	r3, [sp, #16]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	dd08      	ble.n	8014702 <_dtoa_r+0x78a>
 80146f0:	42ab      	cmp	r3, r5
 80146f2:	9a04      	ldr	r2, [sp, #16]
 80146f4:	bfa8      	it	ge
 80146f6:	462b      	movge	r3, r5
 80146f8:	eba8 0803 	sub.w	r8, r8, r3
 80146fc:	1aed      	subs	r5, r5, r3
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	9304      	str	r3, [sp, #16]
 8014702:	9b06      	ldr	r3, [sp, #24]
 8014704:	b1fb      	cbz	r3, 8014746 <_dtoa_r+0x7ce>
 8014706:	9b08      	ldr	r3, [sp, #32]
 8014708:	2b00      	cmp	r3, #0
 801470a:	f000 809f 	beq.w	801484c <_dtoa_r+0x8d4>
 801470e:	2e00      	cmp	r6, #0
 8014710:	dd11      	ble.n	8014736 <_dtoa_r+0x7be>
 8014712:	4639      	mov	r1, r7
 8014714:	4632      	mov	r2, r6
 8014716:	4620      	mov	r0, r4
 8014718:	f001 f8f8 	bl	801590c <__pow5mult>
 801471c:	465a      	mov	r2, fp
 801471e:	4601      	mov	r1, r0
 8014720:	4607      	mov	r7, r0
 8014722:	4620      	mov	r0, r4
 8014724:	f001 f84c 	bl	80157c0 <__multiply>
 8014728:	4659      	mov	r1, fp
 801472a:	9007      	str	r0, [sp, #28]
 801472c:	4620      	mov	r0, r4
 801472e:	f000 ff2b 	bl	8015588 <_Bfree>
 8014732:	9b07      	ldr	r3, [sp, #28]
 8014734:	469b      	mov	fp, r3
 8014736:	9b06      	ldr	r3, [sp, #24]
 8014738:	1b9a      	subs	r2, r3, r6
 801473a:	d004      	beq.n	8014746 <_dtoa_r+0x7ce>
 801473c:	4659      	mov	r1, fp
 801473e:	4620      	mov	r0, r4
 8014740:	f001 f8e4 	bl	801590c <__pow5mult>
 8014744:	4683      	mov	fp, r0
 8014746:	2101      	movs	r1, #1
 8014748:	4620      	mov	r0, r4
 801474a:	f001 f823 	bl	8015794 <__i2b>
 801474e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014750:	2b00      	cmp	r3, #0
 8014752:	4606      	mov	r6, r0
 8014754:	dd7c      	ble.n	8014850 <_dtoa_r+0x8d8>
 8014756:	461a      	mov	r2, r3
 8014758:	4601      	mov	r1, r0
 801475a:	4620      	mov	r0, r4
 801475c:	f001 f8d6 	bl	801590c <__pow5mult>
 8014760:	9b05      	ldr	r3, [sp, #20]
 8014762:	2b01      	cmp	r3, #1
 8014764:	4606      	mov	r6, r0
 8014766:	dd76      	ble.n	8014856 <_dtoa_r+0x8de>
 8014768:	2300      	movs	r3, #0
 801476a:	9306      	str	r3, [sp, #24]
 801476c:	6933      	ldr	r3, [r6, #16]
 801476e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014772:	6918      	ldr	r0, [r3, #16]
 8014774:	f000 ffbe 	bl	80156f4 <__hi0bits>
 8014778:	f1c0 0020 	rsb	r0, r0, #32
 801477c:	9b04      	ldr	r3, [sp, #16]
 801477e:	4418      	add	r0, r3
 8014780:	f010 001f 	ands.w	r0, r0, #31
 8014784:	f000 8086 	beq.w	8014894 <_dtoa_r+0x91c>
 8014788:	f1c0 0320 	rsb	r3, r0, #32
 801478c:	2b04      	cmp	r3, #4
 801478e:	dd7f      	ble.n	8014890 <_dtoa_r+0x918>
 8014790:	f1c0 001c 	rsb	r0, r0, #28
 8014794:	9b04      	ldr	r3, [sp, #16]
 8014796:	4403      	add	r3, r0
 8014798:	4480      	add	r8, r0
 801479a:	4405      	add	r5, r0
 801479c:	9304      	str	r3, [sp, #16]
 801479e:	f1b8 0f00 	cmp.w	r8, #0
 80147a2:	dd05      	ble.n	80147b0 <_dtoa_r+0x838>
 80147a4:	4659      	mov	r1, fp
 80147a6:	4642      	mov	r2, r8
 80147a8:	4620      	mov	r0, r4
 80147aa:	f001 f909 	bl	80159c0 <__lshift>
 80147ae:	4683      	mov	fp, r0
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	dd05      	ble.n	80147c2 <_dtoa_r+0x84a>
 80147b6:	4631      	mov	r1, r6
 80147b8:	461a      	mov	r2, r3
 80147ba:	4620      	mov	r0, r4
 80147bc:	f001 f900 	bl	80159c0 <__lshift>
 80147c0:	4606      	mov	r6, r0
 80147c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d069      	beq.n	801489c <_dtoa_r+0x924>
 80147c8:	4631      	mov	r1, r6
 80147ca:	4658      	mov	r0, fp
 80147cc:	f001 f964 	bl	8015a98 <__mcmp>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	da63      	bge.n	801489c <_dtoa_r+0x924>
 80147d4:	2300      	movs	r3, #0
 80147d6:	4659      	mov	r1, fp
 80147d8:	220a      	movs	r2, #10
 80147da:	4620      	mov	r0, r4
 80147dc:	f000 fef6 	bl	80155cc <__multadd>
 80147e0:	9b08      	ldr	r3, [sp, #32]
 80147e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147e6:	4683      	mov	fp, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f000 818f 	beq.w	8014b0c <_dtoa_r+0xb94>
 80147ee:	4639      	mov	r1, r7
 80147f0:	2300      	movs	r3, #0
 80147f2:	220a      	movs	r2, #10
 80147f4:	4620      	mov	r0, r4
 80147f6:	f000 fee9 	bl	80155cc <__multadd>
 80147fa:	f1b9 0f00 	cmp.w	r9, #0
 80147fe:	4607      	mov	r7, r0
 8014800:	f300 808e 	bgt.w	8014920 <_dtoa_r+0x9a8>
 8014804:	9b05      	ldr	r3, [sp, #20]
 8014806:	2b02      	cmp	r3, #2
 8014808:	dc50      	bgt.n	80148ac <_dtoa_r+0x934>
 801480a:	e089      	b.n	8014920 <_dtoa_r+0x9a8>
 801480c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801480e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014812:	e75d      	b.n	80146d0 <_dtoa_r+0x758>
 8014814:	9b01      	ldr	r3, [sp, #4]
 8014816:	1e5e      	subs	r6, r3, #1
 8014818:	9b06      	ldr	r3, [sp, #24]
 801481a:	42b3      	cmp	r3, r6
 801481c:	bfbf      	itttt	lt
 801481e:	9b06      	ldrlt	r3, [sp, #24]
 8014820:	9606      	strlt	r6, [sp, #24]
 8014822:	1af2      	sublt	r2, r6, r3
 8014824:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014826:	bfb6      	itet	lt
 8014828:	189b      	addlt	r3, r3, r2
 801482a:	1b9e      	subge	r6, r3, r6
 801482c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801482e:	9b01      	ldr	r3, [sp, #4]
 8014830:	bfb8      	it	lt
 8014832:	2600      	movlt	r6, #0
 8014834:	2b00      	cmp	r3, #0
 8014836:	bfb5      	itete	lt
 8014838:	eba8 0503 	sublt.w	r5, r8, r3
 801483c:	9b01      	ldrge	r3, [sp, #4]
 801483e:	2300      	movlt	r3, #0
 8014840:	4645      	movge	r5, r8
 8014842:	e747      	b.n	80146d4 <_dtoa_r+0x75c>
 8014844:	9e06      	ldr	r6, [sp, #24]
 8014846:	9f08      	ldr	r7, [sp, #32]
 8014848:	4645      	mov	r5, r8
 801484a:	e74c      	b.n	80146e6 <_dtoa_r+0x76e>
 801484c:	9a06      	ldr	r2, [sp, #24]
 801484e:	e775      	b.n	801473c <_dtoa_r+0x7c4>
 8014850:	9b05      	ldr	r3, [sp, #20]
 8014852:	2b01      	cmp	r3, #1
 8014854:	dc18      	bgt.n	8014888 <_dtoa_r+0x910>
 8014856:	9b02      	ldr	r3, [sp, #8]
 8014858:	b9b3      	cbnz	r3, 8014888 <_dtoa_r+0x910>
 801485a:	9b03      	ldr	r3, [sp, #12]
 801485c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014860:	b9a3      	cbnz	r3, 801488c <_dtoa_r+0x914>
 8014862:	9b03      	ldr	r3, [sp, #12]
 8014864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014868:	0d1b      	lsrs	r3, r3, #20
 801486a:	051b      	lsls	r3, r3, #20
 801486c:	b12b      	cbz	r3, 801487a <_dtoa_r+0x902>
 801486e:	9b04      	ldr	r3, [sp, #16]
 8014870:	3301      	adds	r3, #1
 8014872:	9304      	str	r3, [sp, #16]
 8014874:	f108 0801 	add.w	r8, r8, #1
 8014878:	2301      	movs	r3, #1
 801487a:	9306      	str	r3, [sp, #24]
 801487c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801487e:	2b00      	cmp	r3, #0
 8014880:	f47f af74 	bne.w	801476c <_dtoa_r+0x7f4>
 8014884:	2001      	movs	r0, #1
 8014886:	e779      	b.n	801477c <_dtoa_r+0x804>
 8014888:	2300      	movs	r3, #0
 801488a:	e7f6      	b.n	801487a <_dtoa_r+0x902>
 801488c:	9b02      	ldr	r3, [sp, #8]
 801488e:	e7f4      	b.n	801487a <_dtoa_r+0x902>
 8014890:	d085      	beq.n	801479e <_dtoa_r+0x826>
 8014892:	4618      	mov	r0, r3
 8014894:	301c      	adds	r0, #28
 8014896:	e77d      	b.n	8014794 <_dtoa_r+0x81c>
 8014898:	40240000 	.word	0x40240000
 801489c:	9b01      	ldr	r3, [sp, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	dc38      	bgt.n	8014914 <_dtoa_r+0x99c>
 80148a2:	9b05      	ldr	r3, [sp, #20]
 80148a4:	2b02      	cmp	r3, #2
 80148a6:	dd35      	ble.n	8014914 <_dtoa_r+0x99c>
 80148a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80148ac:	f1b9 0f00 	cmp.w	r9, #0
 80148b0:	d10d      	bne.n	80148ce <_dtoa_r+0x956>
 80148b2:	4631      	mov	r1, r6
 80148b4:	464b      	mov	r3, r9
 80148b6:	2205      	movs	r2, #5
 80148b8:	4620      	mov	r0, r4
 80148ba:	f000 fe87 	bl	80155cc <__multadd>
 80148be:	4601      	mov	r1, r0
 80148c0:	4606      	mov	r6, r0
 80148c2:	4658      	mov	r0, fp
 80148c4:	f001 f8e8 	bl	8015a98 <__mcmp>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f73f adbd 	bgt.w	8014448 <_dtoa_r+0x4d0>
 80148ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d0:	9d00      	ldr	r5, [sp, #0]
 80148d2:	ea6f 0a03 	mvn.w	sl, r3
 80148d6:	f04f 0800 	mov.w	r8, #0
 80148da:	4631      	mov	r1, r6
 80148dc:	4620      	mov	r0, r4
 80148de:	f000 fe53 	bl	8015588 <_Bfree>
 80148e2:	2f00      	cmp	r7, #0
 80148e4:	f43f aeb4 	beq.w	8014650 <_dtoa_r+0x6d8>
 80148e8:	f1b8 0f00 	cmp.w	r8, #0
 80148ec:	d005      	beq.n	80148fa <_dtoa_r+0x982>
 80148ee:	45b8      	cmp	r8, r7
 80148f0:	d003      	beq.n	80148fa <_dtoa_r+0x982>
 80148f2:	4641      	mov	r1, r8
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 fe47 	bl	8015588 <_Bfree>
 80148fa:	4639      	mov	r1, r7
 80148fc:	4620      	mov	r0, r4
 80148fe:	f000 fe43 	bl	8015588 <_Bfree>
 8014902:	e6a5      	b.n	8014650 <_dtoa_r+0x6d8>
 8014904:	2600      	movs	r6, #0
 8014906:	4637      	mov	r7, r6
 8014908:	e7e1      	b.n	80148ce <_dtoa_r+0x956>
 801490a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801490c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014910:	4637      	mov	r7, r6
 8014912:	e599      	b.n	8014448 <_dtoa_r+0x4d0>
 8014914:	9b08      	ldr	r3, [sp, #32]
 8014916:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 80fd 	beq.w	8014b1a <_dtoa_r+0xba2>
 8014920:	2d00      	cmp	r5, #0
 8014922:	dd05      	ble.n	8014930 <_dtoa_r+0x9b8>
 8014924:	4639      	mov	r1, r7
 8014926:	462a      	mov	r2, r5
 8014928:	4620      	mov	r0, r4
 801492a:	f001 f849 	bl	80159c0 <__lshift>
 801492e:	4607      	mov	r7, r0
 8014930:	9b06      	ldr	r3, [sp, #24]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d05c      	beq.n	80149f0 <_dtoa_r+0xa78>
 8014936:	6879      	ldr	r1, [r7, #4]
 8014938:	4620      	mov	r0, r4
 801493a:	f000 fde5 	bl	8015508 <_Balloc>
 801493e:	4605      	mov	r5, r0
 8014940:	b928      	cbnz	r0, 801494e <_dtoa_r+0x9d6>
 8014942:	4b80      	ldr	r3, [pc, #512]	; (8014b44 <_dtoa_r+0xbcc>)
 8014944:	4602      	mov	r2, r0
 8014946:	f240 21ea 	movw	r1, #746	; 0x2ea
 801494a:	f7ff bb2e 	b.w	8013faa <_dtoa_r+0x32>
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	3202      	adds	r2, #2
 8014952:	0092      	lsls	r2, r2, #2
 8014954:	f107 010c 	add.w	r1, r7, #12
 8014958:	300c      	adds	r0, #12
 801495a:	f7fd f907 	bl	8011b6c <memcpy>
 801495e:	2201      	movs	r2, #1
 8014960:	4629      	mov	r1, r5
 8014962:	4620      	mov	r0, r4
 8014964:	f001 f82c 	bl	80159c0 <__lshift>
 8014968:	9b00      	ldr	r3, [sp, #0]
 801496a:	3301      	adds	r3, #1
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	9b00      	ldr	r3, [sp, #0]
 8014970:	444b      	add	r3, r9
 8014972:	9307      	str	r3, [sp, #28]
 8014974:	9b02      	ldr	r3, [sp, #8]
 8014976:	f003 0301 	and.w	r3, r3, #1
 801497a:	46b8      	mov	r8, r7
 801497c:	9306      	str	r3, [sp, #24]
 801497e:	4607      	mov	r7, r0
 8014980:	9b01      	ldr	r3, [sp, #4]
 8014982:	4631      	mov	r1, r6
 8014984:	3b01      	subs	r3, #1
 8014986:	4658      	mov	r0, fp
 8014988:	9302      	str	r3, [sp, #8]
 801498a:	f7ff fa69 	bl	8013e60 <quorem>
 801498e:	4603      	mov	r3, r0
 8014990:	3330      	adds	r3, #48	; 0x30
 8014992:	9004      	str	r0, [sp, #16]
 8014994:	4641      	mov	r1, r8
 8014996:	4658      	mov	r0, fp
 8014998:	9308      	str	r3, [sp, #32]
 801499a:	f001 f87d 	bl	8015a98 <__mcmp>
 801499e:	463a      	mov	r2, r7
 80149a0:	4681      	mov	r9, r0
 80149a2:	4631      	mov	r1, r6
 80149a4:	4620      	mov	r0, r4
 80149a6:	f001 f893 	bl	8015ad0 <__mdiff>
 80149aa:	68c2      	ldr	r2, [r0, #12]
 80149ac:	9b08      	ldr	r3, [sp, #32]
 80149ae:	4605      	mov	r5, r0
 80149b0:	bb02      	cbnz	r2, 80149f4 <_dtoa_r+0xa7c>
 80149b2:	4601      	mov	r1, r0
 80149b4:	4658      	mov	r0, fp
 80149b6:	f001 f86f 	bl	8015a98 <__mcmp>
 80149ba:	9b08      	ldr	r3, [sp, #32]
 80149bc:	4602      	mov	r2, r0
 80149be:	4629      	mov	r1, r5
 80149c0:	4620      	mov	r0, r4
 80149c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80149c6:	f000 fddf 	bl	8015588 <_Bfree>
 80149ca:	9b05      	ldr	r3, [sp, #20]
 80149cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149ce:	9d01      	ldr	r5, [sp, #4]
 80149d0:	ea43 0102 	orr.w	r1, r3, r2
 80149d4:	9b06      	ldr	r3, [sp, #24]
 80149d6:	430b      	orrs	r3, r1
 80149d8:	9b08      	ldr	r3, [sp, #32]
 80149da:	d10d      	bne.n	80149f8 <_dtoa_r+0xa80>
 80149dc:	2b39      	cmp	r3, #57	; 0x39
 80149de:	d029      	beq.n	8014a34 <_dtoa_r+0xabc>
 80149e0:	f1b9 0f00 	cmp.w	r9, #0
 80149e4:	dd01      	ble.n	80149ea <_dtoa_r+0xa72>
 80149e6:	9b04      	ldr	r3, [sp, #16]
 80149e8:	3331      	adds	r3, #49	; 0x31
 80149ea:	9a02      	ldr	r2, [sp, #8]
 80149ec:	7013      	strb	r3, [r2, #0]
 80149ee:	e774      	b.n	80148da <_dtoa_r+0x962>
 80149f0:	4638      	mov	r0, r7
 80149f2:	e7b9      	b.n	8014968 <_dtoa_r+0x9f0>
 80149f4:	2201      	movs	r2, #1
 80149f6:	e7e2      	b.n	80149be <_dtoa_r+0xa46>
 80149f8:	f1b9 0f00 	cmp.w	r9, #0
 80149fc:	db06      	blt.n	8014a0c <_dtoa_r+0xa94>
 80149fe:	9905      	ldr	r1, [sp, #20]
 8014a00:	ea41 0909 	orr.w	r9, r1, r9
 8014a04:	9906      	ldr	r1, [sp, #24]
 8014a06:	ea59 0101 	orrs.w	r1, r9, r1
 8014a0a:	d120      	bne.n	8014a4e <_dtoa_r+0xad6>
 8014a0c:	2a00      	cmp	r2, #0
 8014a0e:	ddec      	ble.n	80149ea <_dtoa_r+0xa72>
 8014a10:	4659      	mov	r1, fp
 8014a12:	2201      	movs	r2, #1
 8014a14:	4620      	mov	r0, r4
 8014a16:	9301      	str	r3, [sp, #4]
 8014a18:	f000 ffd2 	bl	80159c0 <__lshift>
 8014a1c:	4631      	mov	r1, r6
 8014a1e:	4683      	mov	fp, r0
 8014a20:	f001 f83a 	bl	8015a98 <__mcmp>
 8014a24:	2800      	cmp	r0, #0
 8014a26:	9b01      	ldr	r3, [sp, #4]
 8014a28:	dc02      	bgt.n	8014a30 <_dtoa_r+0xab8>
 8014a2a:	d1de      	bne.n	80149ea <_dtoa_r+0xa72>
 8014a2c:	07da      	lsls	r2, r3, #31
 8014a2e:	d5dc      	bpl.n	80149ea <_dtoa_r+0xa72>
 8014a30:	2b39      	cmp	r3, #57	; 0x39
 8014a32:	d1d8      	bne.n	80149e6 <_dtoa_r+0xa6e>
 8014a34:	9a02      	ldr	r2, [sp, #8]
 8014a36:	2339      	movs	r3, #57	; 0x39
 8014a38:	7013      	strb	r3, [r2, #0]
 8014a3a:	462b      	mov	r3, r5
 8014a3c:	461d      	mov	r5, r3
 8014a3e:	3b01      	subs	r3, #1
 8014a40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a44:	2a39      	cmp	r2, #57	; 0x39
 8014a46:	d050      	beq.n	8014aea <_dtoa_r+0xb72>
 8014a48:	3201      	adds	r2, #1
 8014a4a:	701a      	strb	r2, [r3, #0]
 8014a4c:	e745      	b.n	80148da <_dtoa_r+0x962>
 8014a4e:	2a00      	cmp	r2, #0
 8014a50:	dd03      	ble.n	8014a5a <_dtoa_r+0xae2>
 8014a52:	2b39      	cmp	r3, #57	; 0x39
 8014a54:	d0ee      	beq.n	8014a34 <_dtoa_r+0xabc>
 8014a56:	3301      	adds	r3, #1
 8014a58:	e7c7      	b.n	80149ea <_dtoa_r+0xa72>
 8014a5a:	9a01      	ldr	r2, [sp, #4]
 8014a5c:	9907      	ldr	r1, [sp, #28]
 8014a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014a62:	428a      	cmp	r2, r1
 8014a64:	d02a      	beq.n	8014abc <_dtoa_r+0xb44>
 8014a66:	4659      	mov	r1, fp
 8014a68:	2300      	movs	r3, #0
 8014a6a:	220a      	movs	r2, #10
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f000 fdad 	bl	80155cc <__multadd>
 8014a72:	45b8      	cmp	r8, r7
 8014a74:	4683      	mov	fp, r0
 8014a76:	f04f 0300 	mov.w	r3, #0
 8014a7a:	f04f 020a 	mov.w	r2, #10
 8014a7e:	4641      	mov	r1, r8
 8014a80:	4620      	mov	r0, r4
 8014a82:	d107      	bne.n	8014a94 <_dtoa_r+0xb1c>
 8014a84:	f000 fda2 	bl	80155cc <__multadd>
 8014a88:	4680      	mov	r8, r0
 8014a8a:	4607      	mov	r7, r0
 8014a8c:	9b01      	ldr	r3, [sp, #4]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	9301      	str	r3, [sp, #4]
 8014a92:	e775      	b.n	8014980 <_dtoa_r+0xa08>
 8014a94:	f000 fd9a 	bl	80155cc <__multadd>
 8014a98:	4639      	mov	r1, r7
 8014a9a:	4680      	mov	r8, r0
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	220a      	movs	r2, #10
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f000 fd93 	bl	80155cc <__multadd>
 8014aa6:	4607      	mov	r7, r0
 8014aa8:	e7f0      	b.n	8014a8c <_dtoa_r+0xb14>
 8014aaa:	f1b9 0f00 	cmp.w	r9, #0
 8014aae:	9a00      	ldr	r2, [sp, #0]
 8014ab0:	bfcc      	ite	gt
 8014ab2:	464d      	movgt	r5, r9
 8014ab4:	2501      	movle	r5, #1
 8014ab6:	4415      	add	r5, r2
 8014ab8:	f04f 0800 	mov.w	r8, #0
 8014abc:	4659      	mov	r1, fp
 8014abe:	2201      	movs	r2, #1
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	9301      	str	r3, [sp, #4]
 8014ac4:	f000 ff7c 	bl	80159c0 <__lshift>
 8014ac8:	4631      	mov	r1, r6
 8014aca:	4683      	mov	fp, r0
 8014acc:	f000 ffe4 	bl	8015a98 <__mcmp>
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	dcb2      	bgt.n	8014a3a <_dtoa_r+0xac2>
 8014ad4:	d102      	bne.n	8014adc <_dtoa_r+0xb64>
 8014ad6:	9b01      	ldr	r3, [sp, #4]
 8014ad8:	07db      	lsls	r3, r3, #31
 8014ada:	d4ae      	bmi.n	8014a3a <_dtoa_r+0xac2>
 8014adc:	462b      	mov	r3, r5
 8014ade:	461d      	mov	r5, r3
 8014ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014ae4:	2a30      	cmp	r2, #48	; 0x30
 8014ae6:	d0fa      	beq.n	8014ade <_dtoa_r+0xb66>
 8014ae8:	e6f7      	b.n	80148da <_dtoa_r+0x962>
 8014aea:	9a00      	ldr	r2, [sp, #0]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d1a5      	bne.n	8014a3c <_dtoa_r+0xac4>
 8014af0:	f10a 0a01 	add.w	sl, sl, #1
 8014af4:	2331      	movs	r3, #49	; 0x31
 8014af6:	e779      	b.n	80149ec <_dtoa_r+0xa74>
 8014af8:	4b13      	ldr	r3, [pc, #76]	; (8014b48 <_dtoa_r+0xbd0>)
 8014afa:	f7ff baaf 	b.w	801405c <_dtoa_r+0xe4>
 8014afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f47f aa86 	bne.w	8014012 <_dtoa_r+0x9a>
 8014b06:	4b11      	ldr	r3, [pc, #68]	; (8014b4c <_dtoa_r+0xbd4>)
 8014b08:	f7ff baa8 	b.w	801405c <_dtoa_r+0xe4>
 8014b0c:	f1b9 0f00 	cmp.w	r9, #0
 8014b10:	dc03      	bgt.n	8014b1a <_dtoa_r+0xba2>
 8014b12:	9b05      	ldr	r3, [sp, #20]
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	f73f aec9 	bgt.w	80148ac <_dtoa_r+0x934>
 8014b1a:	9d00      	ldr	r5, [sp, #0]
 8014b1c:	4631      	mov	r1, r6
 8014b1e:	4658      	mov	r0, fp
 8014b20:	f7ff f99e 	bl	8013e60 <quorem>
 8014b24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014b28:	f805 3b01 	strb.w	r3, [r5], #1
 8014b2c:	9a00      	ldr	r2, [sp, #0]
 8014b2e:	1aaa      	subs	r2, r5, r2
 8014b30:	4591      	cmp	r9, r2
 8014b32:	ddba      	ble.n	8014aaa <_dtoa_r+0xb32>
 8014b34:	4659      	mov	r1, fp
 8014b36:	2300      	movs	r3, #0
 8014b38:	220a      	movs	r2, #10
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f000 fd46 	bl	80155cc <__multadd>
 8014b40:	4683      	mov	fp, r0
 8014b42:	e7eb      	b.n	8014b1c <_dtoa_r+0xba4>
 8014b44:	08018ef7 	.word	0x08018ef7
 8014b48:	080190f9 	.word	0x080190f9
 8014b4c:	08018e74 	.word	0x08018e74

08014b50 <__sflush_r>:
 8014b50:	898a      	ldrh	r2, [r1, #12]
 8014b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b56:	4605      	mov	r5, r0
 8014b58:	0710      	lsls	r0, r2, #28
 8014b5a:	460c      	mov	r4, r1
 8014b5c:	d458      	bmi.n	8014c10 <__sflush_r+0xc0>
 8014b5e:	684b      	ldr	r3, [r1, #4]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	dc05      	bgt.n	8014b70 <__sflush_r+0x20>
 8014b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	dc02      	bgt.n	8014b70 <__sflush_r+0x20>
 8014b6a:	2000      	movs	r0, #0
 8014b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b72:	2e00      	cmp	r6, #0
 8014b74:	d0f9      	beq.n	8014b6a <__sflush_r+0x1a>
 8014b76:	2300      	movs	r3, #0
 8014b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014b7c:	682f      	ldr	r7, [r5, #0]
 8014b7e:	602b      	str	r3, [r5, #0]
 8014b80:	d032      	beq.n	8014be8 <__sflush_r+0x98>
 8014b82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014b84:	89a3      	ldrh	r3, [r4, #12]
 8014b86:	075a      	lsls	r2, r3, #29
 8014b88:	d505      	bpl.n	8014b96 <__sflush_r+0x46>
 8014b8a:	6863      	ldr	r3, [r4, #4]
 8014b8c:	1ac0      	subs	r0, r0, r3
 8014b8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b90:	b10b      	cbz	r3, 8014b96 <__sflush_r+0x46>
 8014b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b94:	1ac0      	subs	r0, r0, r3
 8014b96:	2300      	movs	r3, #0
 8014b98:	4602      	mov	r2, r0
 8014b9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b9c:	6a21      	ldr	r1, [r4, #32]
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	47b0      	blx	r6
 8014ba2:	1c43      	adds	r3, r0, #1
 8014ba4:	89a3      	ldrh	r3, [r4, #12]
 8014ba6:	d106      	bne.n	8014bb6 <__sflush_r+0x66>
 8014ba8:	6829      	ldr	r1, [r5, #0]
 8014baa:	291d      	cmp	r1, #29
 8014bac:	d82c      	bhi.n	8014c08 <__sflush_r+0xb8>
 8014bae:	4a2a      	ldr	r2, [pc, #168]	; (8014c58 <__sflush_r+0x108>)
 8014bb0:	40ca      	lsrs	r2, r1
 8014bb2:	07d6      	lsls	r6, r2, #31
 8014bb4:	d528      	bpl.n	8014c08 <__sflush_r+0xb8>
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	6062      	str	r2, [r4, #4]
 8014bba:	04d9      	lsls	r1, r3, #19
 8014bbc:	6922      	ldr	r2, [r4, #16]
 8014bbe:	6022      	str	r2, [r4, #0]
 8014bc0:	d504      	bpl.n	8014bcc <__sflush_r+0x7c>
 8014bc2:	1c42      	adds	r2, r0, #1
 8014bc4:	d101      	bne.n	8014bca <__sflush_r+0x7a>
 8014bc6:	682b      	ldr	r3, [r5, #0]
 8014bc8:	b903      	cbnz	r3, 8014bcc <__sflush_r+0x7c>
 8014bca:	6560      	str	r0, [r4, #84]	; 0x54
 8014bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bce:	602f      	str	r7, [r5, #0]
 8014bd0:	2900      	cmp	r1, #0
 8014bd2:	d0ca      	beq.n	8014b6a <__sflush_r+0x1a>
 8014bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bd8:	4299      	cmp	r1, r3
 8014bda:	d002      	beq.n	8014be2 <__sflush_r+0x92>
 8014bdc:	4628      	mov	r0, r5
 8014bde:	f7fc fff5 	bl	8011bcc <_free_r>
 8014be2:	2000      	movs	r0, #0
 8014be4:	6360      	str	r0, [r4, #52]	; 0x34
 8014be6:	e7c1      	b.n	8014b6c <__sflush_r+0x1c>
 8014be8:	6a21      	ldr	r1, [r4, #32]
 8014bea:	2301      	movs	r3, #1
 8014bec:	4628      	mov	r0, r5
 8014bee:	47b0      	blx	r6
 8014bf0:	1c41      	adds	r1, r0, #1
 8014bf2:	d1c7      	bne.n	8014b84 <__sflush_r+0x34>
 8014bf4:	682b      	ldr	r3, [r5, #0]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d0c4      	beq.n	8014b84 <__sflush_r+0x34>
 8014bfa:	2b1d      	cmp	r3, #29
 8014bfc:	d001      	beq.n	8014c02 <__sflush_r+0xb2>
 8014bfe:	2b16      	cmp	r3, #22
 8014c00:	d101      	bne.n	8014c06 <__sflush_r+0xb6>
 8014c02:	602f      	str	r7, [r5, #0]
 8014c04:	e7b1      	b.n	8014b6a <__sflush_r+0x1a>
 8014c06:	89a3      	ldrh	r3, [r4, #12]
 8014c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c0c:	81a3      	strh	r3, [r4, #12]
 8014c0e:	e7ad      	b.n	8014b6c <__sflush_r+0x1c>
 8014c10:	690f      	ldr	r7, [r1, #16]
 8014c12:	2f00      	cmp	r7, #0
 8014c14:	d0a9      	beq.n	8014b6a <__sflush_r+0x1a>
 8014c16:	0793      	lsls	r3, r2, #30
 8014c18:	680e      	ldr	r6, [r1, #0]
 8014c1a:	bf08      	it	eq
 8014c1c:	694b      	ldreq	r3, [r1, #20]
 8014c1e:	600f      	str	r7, [r1, #0]
 8014c20:	bf18      	it	ne
 8014c22:	2300      	movne	r3, #0
 8014c24:	eba6 0807 	sub.w	r8, r6, r7
 8014c28:	608b      	str	r3, [r1, #8]
 8014c2a:	f1b8 0f00 	cmp.w	r8, #0
 8014c2e:	dd9c      	ble.n	8014b6a <__sflush_r+0x1a>
 8014c30:	6a21      	ldr	r1, [r4, #32]
 8014c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c34:	4643      	mov	r3, r8
 8014c36:	463a      	mov	r2, r7
 8014c38:	4628      	mov	r0, r5
 8014c3a:	47b0      	blx	r6
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	dc06      	bgt.n	8014c4e <__sflush_r+0xfe>
 8014c40:	89a3      	ldrh	r3, [r4, #12]
 8014c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c46:	81a3      	strh	r3, [r4, #12]
 8014c48:	f04f 30ff 	mov.w	r0, #4294967295
 8014c4c:	e78e      	b.n	8014b6c <__sflush_r+0x1c>
 8014c4e:	4407      	add	r7, r0
 8014c50:	eba8 0800 	sub.w	r8, r8, r0
 8014c54:	e7e9      	b.n	8014c2a <__sflush_r+0xda>
 8014c56:	bf00      	nop
 8014c58:	20400001 	.word	0x20400001

08014c5c <_fflush_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	690b      	ldr	r3, [r1, #16]
 8014c60:	4605      	mov	r5, r0
 8014c62:	460c      	mov	r4, r1
 8014c64:	b913      	cbnz	r3, 8014c6c <_fflush_r+0x10>
 8014c66:	2500      	movs	r5, #0
 8014c68:	4628      	mov	r0, r5
 8014c6a:	bd38      	pop	{r3, r4, r5, pc}
 8014c6c:	b118      	cbz	r0, 8014c76 <_fflush_r+0x1a>
 8014c6e:	6983      	ldr	r3, [r0, #24]
 8014c70:	b90b      	cbnz	r3, 8014c76 <_fflush_r+0x1a>
 8014c72:	f7fc fead 	bl	80119d0 <__sinit>
 8014c76:	4b14      	ldr	r3, [pc, #80]	; (8014cc8 <_fflush_r+0x6c>)
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	d11b      	bne.n	8014cb4 <_fflush_r+0x58>
 8014c7c:	686c      	ldr	r4, [r5, #4]
 8014c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d0ef      	beq.n	8014c66 <_fflush_r+0xa>
 8014c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014c88:	07d0      	lsls	r0, r2, #31
 8014c8a:	d404      	bmi.n	8014c96 <_fflush_r+0x3a>
 8014c8c:	0599      	lsls	r1, r3, #22
 8014c8e:	d402      	bmi.n	8014c96 <_fflush_r+0x3a>
 8014c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c92:	f7fc ff60 	bl	8011b56 <__retarget_lock_acquire_recursive>
 8014c96:	4628      	mov	r0, r5
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f7ff ff59 	bl	8014b50 <__sflush_r>
 8014c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ca0:	07da      	lsls	r2, r3, #31
 8014ca2:	4605      	mov	r5, r0
 8014ca4:	d4e0      	bmi.n	8014c68 <_fflush_r+0xc>
 8014ca6:	89a3      	ldrh	r3, [r4, #12]
 8014ca8:	059b      	lsls	r3, r3, #22
 8014caa:	d4dd      	bmi.n	8014c68 <_fflush_r+0xc>
 8014cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cae:	f7fc ff53 	bl	8011b58 <__retarget_lock_release_recursive>
 8014cb2:	e7d9      	b.n	8014c68 <_fflush_r+0xc>
 8014cb4:	4b05      	ldr	r3, [pc, #20]	; (8014ccc <_fflush_r+0x70>)
 8014cb6:	429c      	cmp	r4, r3
 8014cb8:	d101      	bne.n	8014cbe <_fflush_r+0x62>
 8014cba:	68ac      	ldr	r4, [r5, #8]
 8014cbc:	e7df      	b.n	8014c7e <_fflush_r+0x22>
 8014cbe:	4b04      	ldr	r3, [pc, #16]	; (8014cd0 <_fflush_r+0x74>)
 8014cc0:	429c      	cmp	r4, r3
 8014cc2:	bf08      	it	eq
 8014cc4:	68ec      	ldreq	r4, [r5, #12]
 8014cc6:	e7da      	b.n	8014c7e <_fflush_r+0x22>
 8014cc8:	08018d6c 	.word	0x08018d6c
 8014ccc:	08018d8c 	.word	0x08018d8c
 8014cd0:	08018d4c 	.word	0x08018d4c

08014cd4 <fiprintf>:
 8014cd4:	b40e      	push	{r1, r2, r3}
 8014cd6:	b503      	push	{r0, r1, lr}
 8014cd8:	4601      	mov	r1, r0
 8014cda:	ab03      	add	r3, sp, #12
 8014cdc:	4805      	ldr	r0, [pc, #20]	; (8014cf4 <fiprintf+0x20>)
 8014cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ce2:	6800      	ldr	r0, [r0, #0]
 8014ce4:	9301      	str	r3, [sp, #4]
 8014ce6:	f001 fc57 	bl	8016598 <_vfiprintf_r>
 8014cea:	b002      	add	sp, #8
 8014cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cf0:	b003      	add	sp, #12
 8014cf2:	4770      	bx	lr
 8014cf4:	200000d8 	.word	0x200000d8

08014cf8 <rshift>:
 8014cf8:	6903      	ldr	r3, [r0, #16]
 8014cfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014d06:	f100 0414 	add.w	r4, r0, #20
 8014d0a:	dd45      	ble.n	8014d98 <rshift+0xa0>
 8014d0c:	f011 011f 	ands.w	r1, r1, #31
 8014d10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014d14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014d18:	d10c      	bne.n	8014d34 <rshift+0x3c>
 8014d1a:	f100 0710 	add.w	r7, r0, #16
 8014d1e:	4629      	mov	r1, r5
 8014d20:	42b1      	cmp	r1, r6
 8014d22:	d334      	bcc.n	8014d8e <rshift+0x96>
 8014d24:	1a9b      	subs	r3, r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	1eea      	subs	r2, r5, #3
 8014d2a:	4296      	cmp	r6, r2
 8014d2c:	bf38      	it	cc
 8014d2e:	2300      	movcc	r3, #0
 8014d30:	4423      	add	r3, r4
 8014d32:	e015      	b.n	8014d60 <rshift+0x68>
 8014d34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014d38:	f1c1 0820 	rsb	r8, r1, #32
 8014d3c:	40cf      	lsrs	r7, r1
 8014d3e:	f105 0e04 	add.w	lr, r5, #4
 8014d42:	46a1      	mov	r9, r4
 8014d44:	4576      	cmp	r6, lr
 8014d46:	46f4      	mov	ip, lr
 8014d48:	d815      	bhi.n	8014d76 <rshift+0x7e>
 8014d4a:	1a9b      	subs	r3, r3, r2
 8014d4c:	009a      	lsls	r2, r3, #2
 8014d4e:	3a04      	subs	r2, #4
 8014d50:	3501      	adds	r5, #1
 8014d52:	42ae      	cmp	r6, r5
 8014d54:	bf38      	it	cc
 8014d56:	2200      	movcc	r2, #0
 8014d58:	18a3      	adds	r3, r4, r2
 8014d5a:	50a7      	str	r7, [r4, r2]
 8014d5c:	b107      	cbz	r7, 8014d60 <rshift+0x68>
 8014d5e:	3304      	adds	r3, #4
 8014d60:	1b1a      	subs	r2, r3, r4
 8014d62:	42a3      	cmp	r3, r4
 8014d64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d68:	bf08      	it	eq
 8014d6a:	2300      	moveq	r3, #0
 8014d6c:	6102      	str	r2, [r0, #16]
 8014d6e:	bf08      	it	eq
 8014d70:	6143      	streq	r3, [r0, #20]
 8014d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d76:	f8dc c000 	ldr.w	ip, [ip]
 8014d7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8014d7e:	ea4c 0707 	orr.w	r7, ip, r7
 8014d82:	f849 7b04 	str.w	r7, [r9], #4
 8014d86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014d8a:	40cf      	lsrs	r7, r1
 8014d8c:	e7da      	b.n	8014d44 <rshift+0x4c>
 8014d8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014d92:	f847 cf04 	str.w	ip, [r7, #4]!
 8014d96:	e7c3      	b.n	8014d20 <rshift+0x28>
 8014d98:	4623      	mov	r3, r4
 8014d9a:	e7e1      	b.n	8014d60 <rshift+0x68>

08014d9c <__hexdig_fun>:
 8014d9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014da0:	2b09      	cmp	r3, #9
 8014da2:	d802      	bhi.n	8014daa <__hexdig_fun+0xe>
 8014da4:	3820      	subs	r0, #32
 8014da6:	b2c0      	uxtb	r0, r0
 8014da8:	4770      	bx	lr
 8014daa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014dae:	2b05      	cmp	r3, #5
 8014db0:	d801      	bhi.n	8014db6 <__hexdig_fun+0x1a>
 8014db2:	3847      	subs	r0, #71	; 0x47
 8014db4:	e7f7      	b.n	8014da6 <__hexdig_fun+0xa>
 8014db6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014dba:	2b05      	cmp	r3, #5
 8014dbc:	d801      	bhi.n	8014dc2 <__hexdig_fun+0x26>
 8014dbe:	3827      	subs	r0, #39	; 0x27
 8014dc0:	e7f1      	b.n	8014da6 <__hexdig_fun+0xa>
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	4770      	bx	lr
	...

08014dc8 <__gethex>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ed2d 8b02 	vpush	{d8}
 8014dd0:	b089      	sub	sp, #36	; 0x24
 8014dd2:	ee08 0a10 	vmov	s16, r0
 8014dd6:	9304      	str	r3, [sp, #16]
 8014dd8:	4bbc      	ldr	r3, [pc, #752]	; (80150cc <__gethex+0x304>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	9301      	str	r3, [sp, #4]
 8014dde:	4618      	mov	r0, r3
 8014de0:	468b      	mov	fp, r1
 8014de2:	4690      	mov	r8, r2
 8014de4:	f7eb fa04 	bl	80001f0 <strlen>
 8014de8:	9b01      	ldr	r3, [sp, #4]
 8014dea:	f8db 2000 	ldr.w	r2, [fp]
 8014dee:	4403      	add	r3, r0
 8014df0:	4682      	mov	sl, r0
 8014df2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	1c93      	adds	r3, r2, #2
 8014dfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014dfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014e02:	32fe      	adds	r2, #254	; 0xfe
 8014e04:	18d1      	adds	r1, r2, r3
 8014e06:	461f      	mov	r7, r3
 8014e08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014e0c:	9100      	str	r1, [sp, #0]
 8014e0e:	2830      	cmp	r0, #48	; 0x30
 8014e10:	d0f8      	beq.n	8014e04 <__gethex+0x3c>
 8014e12:	f7ff ffc3 	bl	8014d9c <__hexdig_fun>
 8014e16:	4604      	mov	r4, r0
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	d13a      	bne.n	8014e92 <__gethex+0xca>
 8014e1c:	9901      	ldr	r1, [sp, #4]
 8014e1e:	4652      	mov	r2, sl
 8014e20:	4638      	mov	r0, r7
 8014e22:	f7fd ffda 	bl	8012dda <strncmp>
 8014e26:	4605      	mov	r5, r0
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d168      	bne.n	8014efe <__gethex+0x136>
 8014e2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014e30:	eb07 060a 	add.w	r6, r7, sl
 8014e34:	f7ff ffb2 	bl	8014d9c <__hexdig_fun>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d062      	beq.n	8014f02 <__gethex+0x13a>
 8014e3c:	4633      	mov	r3, r6
 8014e3e:	7818      	ldrb	r0, [r3, #0]
 8014e40:	2830      	cmp	r0, #48	; 0x30
 8014e42:	461f      	mov	r7, r3
 8014e44:	f103 0301 	add.w	r3, r3, #1
 8014e48:	d0f9      	beq.n	8014e3e <__gethex+0x76>
 8014e4a:	f7ff ffa7 	bl	8014d9c <__hexdig_fun>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	fab0 f480 	clz	r4, r0
 8014e54:	0964      	lsrs	r4, r4, #5
 8014e56:	4635      	mov	r5, r6
 8014e58:	9300      	str	r3, [sp, #0]
 8014e5a:	463a      	mov	r2, r7
 8014e5c:	4616      	mov	r6, r2
 8014e5e:	3201      	adds	r2, #1
 8014e60:	7830      	ldrb	r0, [r6, #0]
 8014e62:	f7ff ff9b 	bl	8014d9c <__hexdig_fun>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d1f8      	bne.n	8014e5c <__gethex+0x94>
 8014e6a:	9901      	ldr	r1, [sp, #4]
 8014e6c:	4652      	mov	r2, sl
 8014e6e:	4630      	mov	r0, r6
 8014e70:	f7fd ffb3 	bl	8012dda <strncmp>
 8014e74:	b980      	cbnz	r0, 8014e98 <__gethex+0xd0>
 8014e76:	b94d      	cbnz	r5, 8014e8c <__gethex+0xc4>
 8014e78:	eb06 050a 	add.w	r5, r6, sl
 8014e7c:	462a      	mov	r2, r5
 8014e7e:	4616      	mov	r6, r2
 8014e80:	3201      	adds	r2, #1
 8014e82:	7830      	ldrb	r0, [r6, #0]
 8014e84:	f7ff ff8a 	bl	8014d9c <__hexdig_fun>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	d1f8      	bne.n	8014e7e <__gethex+0xb6>
 8014e8c:	1bad      	subs	r5, r5, r6
 8014e8e:	00ad      	lsls	r5, r5, #2
 8014e90:	e004      	b.n	8014e9c <__gethex+0xd4>
 8014e92:	2400      	movs	r4, #0
 8014e94:	4625      	mov	r5, r4
 8014e96:	e7e0      	b.n	8014e5a <__gethex+0x92>
 8014e98:	2d00      	cmp	r5, #0
 8014e9a:	d1f7      	bne.n	8014e8c <__gethex+0xc4>
 8014e9c:	7833      	ldrb	r3, [r6, #0]
 8014e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ea2:	2b50      	cmp	r3, #80	; 0x50
 8014ea4:	d13b      	bne.n	8014f1e <__gethex+0x156>
 8014ea6:	7873      	ldrb	r3, [r6, #1]
 8014ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8014eaa:	d02c      	beq.n	8014f06 <__gethex+0x13e>
 8014eac:	2b2d      	cmp	r3, #45	; 0x2d
 8014eae:	d02e      	beq.n	8014f0e <__gethex+0x146>
 8014eb0:	1c71      	adds	r1, r6, #1
 8014eb2:	f04f 0900 	mov.w	r9, #0
 8014eb6:	7808      	ldrb	r0, [r1, #0]
 8014eb8:	f7ff ff70 	bl	8014d9c <__hexdig_fun>
 8014ebc:	1e43      	subs	r3, r0, #1
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b18      	cmp	r3, #24
 8014ec2:	d82c      	bhi.n	8014f1e <__gethex+0x156>
 8014ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8014ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014ecc:	f7ff ff66 	bl	8014d9c <__hexdig_fun>
 8014ed0:	1e43      	subs	r3, r0, #1
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b18      	cmp	r3, #24
 8014ed6:	d91d      	bls.n	8014f14 <__gethex+0x14c>
 8014ed8:	f1b9 0f00 	cmp.w	r9, #0
 8014edc:	d000      	beq.n	8014ee0 <__gethex+0x118>
 8014ede:	4252      	negs	r2, r2
 8014ee0:	4415      	add	r5, r2
 8014ee2:	f8cb 1000 	str.w	r1, [fp]
 8014ee6:	b1e4      	cbz	r4, 8014f22 <__gethex+0x15a>
 8014ee8:	9b00      	ldr	r3, [sp, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	bf14      	ite	ne
 8014eee:	2700      	movne	r7, #0
 8014ef0:	2706      	moveq	r7, #6
 8014ef2:	4638      	mov	r0, r7
 8014ef4:	b009      	add	sp, #36	; 0x24
 8014ef6:	ecbd 8b02 	vpop	{d8}
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efe:	463e      	mov	r6, r7
 8014f00:	4625      	mov	r5, r4
 8014f02:	2401      	movs	r4, #1
 8014f04:	e7ca      	b.n	8014e9c <__gethex+0xd4>
 8014f06:	f04f 0900 	mov.w	r9, #0
 8014f0a:	1cb1      	adds	r1, r6, #2
 8014f0c:	e7d3      	b.n	8014eb6 <__gethex+0xee>
 8014f0e:	f04f 0901 	mov.w	r9, #1
 8014f12:	e7fa      	b.n	8014f0a <__gethex+0x142>
 8014f14:	230a      	movs	r3, #10
 8014f16:	fb03 0202 	mla	r2, r3, r2, r0
 8014f1a:	3a10      	subs	r2, #16
 8014f1c:	e7d4      	b.n	8014ec8 <__gethex+0x100>
 8014f1e:	4631      	mov	r1, r6
 8014f20:	e7df      	b.n	8014ee2 <__gethex+0x11a>
 8014f22:	1bf3      	subs	r3, r6, r7
 8014f24:	3b01      	subs	r3, #1
 8014f26:	4621      	mov	r1, r4
 8014f28:	2b07      	cmp	r3, #7
 8014f2a:	dc0b      	bgt.n	8014f44 <__gethex+0x17c>
 8014f2c:	ee18 0a10 	vmov	r0, s16
 8014f30:	f000 faea 	bl	8015508 <_Balloc>
 8014f34:	4604      	mov	r4, r0
 8014f36:	b940      	cbnz	r0, 8014f4a <__gethex+0x182>
 8014f38:	4b65      	ldr	r3, [pc, #404]	; (80150d0 <__gethex+0x308>)
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	21de      	movs	r1, #222	; 0xde
 8014f3e:	4865      	ldr	r0, [pc, #404]	; (80150d4 <__gethex+0x30c>)
 8014f40:	f7fe ff60 	bl	8013e04 <__assert_func>
 8014f44:	3101      	adds	r1, #1
 8014f46:	105b      	asrs	r3, r3, #1
 8014f48:	e7ee      	b.n	8014f28 <__gethex+0x160>
 8014f4a:	f100 0914 	add.w	r9, r0, #20
 8014f4e:	f04f 0b00 	mov.w	fp, #0
 8014f52:	f1ca 0301 	rsb	r3, sl, #1
 8014f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f5a:	f8cd b000 	str.w	fp, [sp]
 8014f5e:	9306      	str	r3, [sp, #24]
 8014f60:	42b7      	cmp	r7, r6
 8014f62:	d340      	bcc.n	8014fe6 <__gethex+0x21e>
 8014f64:	9802      	ldr	r0, [sp, #8]
 8014f66:	9b00      	ldr	r3, [sp, #0]
 8014f68:	f840 3b04 	str.w	r3, [r0], #4
 8014f6c:	eba0 0009 	sub.w	r0, r0, r9
 8014f70:	1080      	asrs	r0, r0, #2
 8014f72:	0146      	lsls	r6, r0, #5
 8014f74:	6120      	str	r0, [r4, #16]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 fbbc 	bl	80156f4 <__hi0bits>
 8014f7c:	1a30      	subs	r0, r6, r0
 8014f7e:	f8d8 6000 	ldr.w	r6, [r8]
 8014f82:	42b0      	cmp	r0, r6
 8014f84:	dd63      	ble.n	801504e <__gethex+0x286>
 8014f86:	1b87      	subs	r7, r0, r6
 8014f88:	4639      	mov	r1, r7
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f000 ff56 	bl	8015e3c <__any_on>
 8014f90:	4682      	mov	sl, r0
 8014f92:	b1a8      	cbz	r0, 8014fc0 <__gethex+0x1f8>
 8014f94:	1e7b      	subs	r3, r7, #1
 8014f96:	1159      	asrs	r1, r3, #5
 8014f98:	f003 021f 	and.w	r2, r3, #31
 8014f9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014fa0:	f04f 0a01 	mov.w	sl, #1
 8014fa4:	fa0a f202 	lsl.w	r2, sl, r2
 8014fa8:	420a      	tst	r2, r1
 8014faa:	d009      	beq.n	8014fc0 <__gethex+0x1f8>
 8014fac:	4553      	cmp	r3, sl
 8014fae:	dd05      	ble.n	8014fbc <__gethex+0x1f4>
 8014fb0:	1eb9      	subs	r1, r7, #2
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	f000 ff42 	bl	8015e3c <__any_on>
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	d145      	bne.n	8015048 <__gethex+0x280>
 8014fbc:	f04f 0a02 	mov.w	sl, #2
 8014fc0:	4639      	mov	r1, r7
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7ff fe98 	bl	8014cf8 <rshift>
 8014fc8:	443d      	add	r5, r7
 8014fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014fce:	42ab      	cmp	r3, r5
 8014fd0:	da4c      	bge.n	801506c <__gethex+0x2a4>
 8014fd2:	ee18 0a10 	vmov	r0, s16
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	f000 fad6 	bl	8015588 <_Bfree>
 8014fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fde:	2300      	movs	r3, #0
 8014fe0:	6013      	str	r3, [r2, #0]
 8014fe2:	27a3      	movs	r7, #163	; 0xa3
 8014fe4:	e785      	b.n	8014ef2 <__gethex+0x12a>
 8014fe6:	1e73      	subs	r3, r6, #1
 8014fe8:	9a05      	ldr	r2, [sp, #20]
 8014fea:	9303      	str	r3, [sp, #12]
 8014fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d019      	beq.n	8015028 <__gethex+0x260>
 8014ff4:	f1bb 0f20 	cmp.w	fp, #32
 8014ff8:	d107      	bne.n	801500a <__gethex+0x242>
 8014ffa:	9b02      	ldr	r3, [sp, #8]
 8014ffc:	9a00      	ldr	r2, [sp, #0]
 8014ffe:	f843 2b04 	str.w	r2, [r3], #4
 8015002:	9302      	str	r3, [sp, #8]
 8015004:	2300      	movs	r3, #0
 8015006:	9300      	str	r3, [sp, #0]
 8015008:	469b      	mov	fp, r3
 801500a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801500e:	f7ff fec5 	bl	8014d9c <__hexdig_fun>
 8015012:	9b00      	ldr	r3, [sp, #0]
 8015014:	f000 000f 	and.w	r0, r0, #15
 8015018:	fa00 f00b 	lsl.w	r0, r0, fp
 801501c:	4303      	orrs	r3, r0
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	f10b 0b04 	add.w	fp, fp, #4
 8015024:	9b03      	ldr	r3, [sp, #12]
 8015026:	e00d      	b.n	8015044 <__gethex+0x27c>
 8015028:	9b03      	ldr	r3, [sp, #12]
 801502a:	9a06      	ldr	r2, [sp, #24]
 801502c:	4413      	add	r3, r2
 801502e:	42bb      	cmp	r3, r7
 8015030:	d3e0      	bcc.n	8014ff4 <__gethex+0x22c>
 8015032:	4618      	mov	r0, r3
 8015034:	9901      	ldr	r1, [sp, #4]
 8015036:	9307      	str	r3, [sp, #28]
 8015038:	4652      	mov	r2, sl
 801503a:	f7fd fece 	bl	8012dda <strncmp>
 801503e:	9b07      	ldr	r3, [sp, #28]
 8015040:	2800      	cmp	r0, #0
 8015042:	d1d7      	bne.n	8014ff4 <__gethex+0x22c>
 8015044:	461e      	mov	r6, r3
 8015046:	e78b      	b.n	8014f60 <__gethex+0x198>
 8015048:	f04f 0a03 	mov.w	sl, #3
 801504c:	e7b8      	b.n	8014fc0 <__gethex+0x1f8>
 801504e:	da0a      	bge.n	8015066 <__gethex+0x29e>
 8015050:	1a37      	subs	r7, r6, r0
 8015052:	4621      	mov	r1, r4
 8015054:	ee18 0a10 	vmov	r0, s16
 8015058:	463a      	mov	r2, r7
 801505a:	f000 fcb1 	bl	80159c0 <__lshift>
 801505e:	1bed      	subs	r5, r5, r7
 8015060:	4604      	mov	r4, r0
 8015062:	f100 0914 	add.w	r9, r0, #20
 8015066:	f04f 0a00 	mov.w	sl, #0
 801506a:	e7ae      	b.n	8014fca <__gethex+0x202>
 801506c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015070:	42a8      	cmp	r0, r5
 8015072:	dd72      	ble.n	801515a <__gethex+0x392>
 8015074:	1b45      	subs	r5, r0, r5
 8015076:	42ae      	cmp	r6, r5
 8015078:	dc36      	bgt.n	80150e8 <__gethex+0x320>
 801507a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801507e:	2b02      	cmp	r3, #2
 8015080:	d02a      	beq.n	80150d8 <__gethex+0x310>
 8015082:	2b03      	cmp	r3, #3
 8015084:	d02c      	beq.n	80150e0 <__gethex+0x318>
 8015086:	2b01      	cmp	r3, #1
 8015088:	d115      	bne.n	80150b6 <__gethex+0x2ee>
 801508a:	42ae      	cmp	r6, r5
 801508c:	d113      	bne.n	80150b6 <__gethex+0x2ee>
 801508e:	2e01      	cmp	r6, #1
 8015090:	d10b      	bne.n	80150aa <__gethex+0x2e2>
 8015092:	9a04      	ldr	r2, [sp, #16]
 8015094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015098:	6013      	str	r3, [r2, #0]
 801509a:	2301      	movs	r3, #1
 801509c:	6123      	str	r3, [r4, #16]
 801509e:	f8c9 3000 	str.w	r3, [r9]
 80150a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150a4:	2762      	movs	r7, #98	; 0x62
 80150a6:	601c      	str	r4, [r3, #0]
 80150a8:	e723      	b.n	8014ef2 <__gethex+0x12a>
 80150aa:	1e71      	subs	r1, r6, #1
 80150ac:	4620      	mov	r0, r4
 80150ae:	f000 fec5 	bl	8015e3c <__any_on>
 80150b2:	2800      	cmp	r0, #0
 80150b4:	d1ed      	bne.n	8015092 <__gethex+0x2ca>
 80150b6:	ee18 0a10 	vmov	r0, s16
 80150ba:	4621      	mov	r1, r4
 80150bc:	f000 fa64 	bl	8015588 <_Bfree>
 80150c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150c2:	2300      	movs	r3, #0
 80150c4:	6013      	str	r3, [r2, #0]
 80150c6:	2750      	movs	r7, #80	; 0x50
 80150c8:	e713      	b.n	8014ef2 <__gethex+0x12a>
 80150ca:	bf00      	nop
 80150cc:	08018f74 	.word	0x08018f74
 80150d0:	08018ef7 	.word	0x08018ef7
 80150d4:	08018f08 	.word	0x08018f08
 80150d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d1eb      	bne.n	80150b6 <__gethex+0x2ee>
 80150de:	e7d8      	b.n	8015092 <__gethex+0x2ca>
 80150e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d1d5      	bne.n	8015092 <__gethex+0x2ca>
 80150e6:	e7e6      	b.n	80150b6 <__gethex+0x2ee>
 80150e8:	1e6f      	subs	r7, r5, #1
 80150ea:	f1ba 0f00 	cmp.w	sl, #0
 80150ee:	d131      	bne.n	8015154 <__gethex+0x38c>
 80150f0:	b127      	cbz	r7, 80150fc <__gethex+0x334>
 80150f2:	4639      	mov	r1, r7
 80150f4:	4620      	mov	r0, r4
 80150f6:	f000 fea1 	bl	8015e3c <__any_on>
 80150fa:	4682      	mov	sl, r0
 80150fc:	117b      	asrs	r3, r7, #5
 80150fe:	2101      	movs	r1, #1
 8015100:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015104:	f007 071f 	and.w	r7, r7, #31
 8015108:	fa01 f707 	lsl.w	r7, r1, r7
 801510c:	421f      	tst	r7, r3
 801510e:	4629      	mov	r1, r5
 8015110:	4620      	mov	r0, r4
 8015112:	bf18      	it	ne
 8015114:	f04a 0a02 	orrne.w	sl, sl, #2
 8015118:	1b76      	subs	r6, r6, r5
 801511a:	f7ff fded 	bl	8014cf8 <rshift>
 801511e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015122:	2702      	movs	r7, #2
 8015124:	f1ba 0f00 	cmp.w	sl, #0
 8015128:	d048      	beq.n	80151bc <__gethex+0x3f4>
 801512a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801512e:	2b02      	cmp	r3, #2
 8015130:	d015      	beq.n	801515e <__gethex+0x396>
 8015132:	2b03      	cmp	r3, #3
 8015134:	d017      	beq.n	8015166 <__gethex+0x39e>
 8015136:	2b01      	cmp	r3, #1
 8015138:	d109      	bne.n	801514e <__gethex+0x386>
 801513a:	f01a 0f02 	tst.w	sl, #2
 801513e:	d006      	beq.n	801514e <__gethex+0x386>
 8015140:	f8d9 0000 	ldr.w	r0, [r9]
 8015144:	ea4a 0a00 	orr.w	sl, sl, r0
 8015148:	f01a 0f01 	tst.w	sl, #1
 801514c:	d10e      	bne.n	801516c <__gethex+0x3a4>
 801514e:	f047 0710 	orr.w	r7, r7, #16
 8015152:	e033      	b.n	80151bc <__gethex+0x3f4>
 8015154:	f04f 0a01 	mov.w	sl, #1
 8015158:	e7d0      	b.n	80150fc <__gethex+0x334>
 801515a:	2701      	movs	r7, #1
 801515c:	e7e2      	b.n	8015124 <__gethex+0x35c>
 801515e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015160:	f1c3 0301 	rsb	r3, r3, #1
 8015164:	9315      	str	r3, [sp, #84]	; 0x54
 8015166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015168:	2b00      	cmp	r3, #0
 801516a:	d0f0      	beq.n	801514e <__gethex+0x386>
 801516c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015170:	f104 0314 	add.w	r3, r4, #20
 8015174:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015178:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801517c:	f04f 0c00 	mov.w	ip, #0
 8015180:	4618      	mov	r0, r3
 8015182:	f853 2b04 	ldr.w	r2, [r3], #4
 8015186:	f1b2 3fff 	cmp.w	r2, #4294967295
 801518a:	d01c      	beq.n	80151c6 <__gethex+0x3fe>
 801518c:	3201      	adds	r2, #1
 801518e:	6002      	str	r2, [r0, #0]
 8015190:	2f02      	cmp	r7, #2
 8015192:	f104 0314 	add.w	r3, r4, #20
 8015196:	d13f      	bne.n	8015218 <__gethex+0x450>
 8015198:	f8d8 2000 	ldr.w	r2, [r8]
 801519c:	3a01      	subs	r2, #1
 801519e:	42b2      	cmp	r2, r6
 80151a0:	d10a      	bne.n	80151b8 <__gethex+0x3f0>
 80151a2:	1171      	asrs	r1, r6, #5
 80151a4:	2201      	movs	r2, #1
 80151a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151aa:	f006 061f 	and.w	r6, r6, #31
 80151ae:	fa02 f606 	lsl.w	r6, r2, r6
 80151b2:	421e      	tst	r6, r3
 80151b4:	bf18      	it	ne
 80151b6:	4617      	movne	r7, r2
 80151b8:	f047 0720 	orr.w	r7, r7, #32
 80151bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151be:	601c      	str	r4, [r3, #0]
 80151c0:	9b04      	ldr	r3, [sp, #16]
 80151c2:	601d      	str	r5, [r3, #0]
 80151c4:	e695      	b.n	8014ef2 <__gethex+0x12a>
 80151c6:	4299      	cmp	r1, r3
 80151c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80151cc:	d8d8      	bhi.n	8015180 <__gethex+0x3b8>
 80151ce:	68a3      	ldr	r3, [r4, #8]
 80151d0:	459b      	cmp	fp, r3
 80151d2:	db19      	blt.n	8015208 <__gethex+0x440>
 80151d4:	6861      	ldr	r1, [r4, #4]
 80151d6:	ee18 0a10 	vmov	r0, s16
 80151da:	3101      	adds	r1, #1
 80151dc:	f000 f994 	bl	8015508 <_Balloc>
 80151e0:	4681      	mov	r9, r0
 80151e2:	b918      	cbnz	r0, 80151ec <__gethex+0x424>
 80151e4:	4b1a      	ldr	r3, [pc, #104]	; (8015250 <__gethex+0x488>)
 80151e6:	4602      	mov	r2, r0
 80151e8:	2184      	movs	r1, #132	; 0x84
 80151ea:	e6a8      	b.n	8014f3e <__gethex+0x176>
 80151ec:	6922      	ldr	r2, [r4, #16]
 80151ee:	3202      	adds	r2, #2
 80151f0:	f104 010c 	add.w	r1, r4, #12
 80151f4:	0092      	lsls	r2, r2, #2
 80151f6:	300c      	adds	r0, #12
 80151f8:	f7fc fcb8 	bl	8011b6c <memcpy>
 80151fc:	4621      	mov	r1, r4
 80151fe:	ee18 0a10 	vmov	r0, s16
 8015202:	f000 f9c1 	bl	8015588 <_Bfree>
 8015206:	464c      	mov	r4, r9
 8015208:	6923      	ldr	r3, [r4, #16]
 801520a:	1c5a      	adds	r2, r3, #1
 801520c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015210:	6122      	str	r2, [r4, #16]
 8015212:	2201      	movs	r2, #1
 8015214:	615a      	str	r2, [r3, #20]
 8015216:	e7bb      	b.n	8015190 <__gethex+0x3c8>
 8015218:	6922      	ldr	r2, [r4, #16]
 801521a:	455a      	cmp	r2, fp
 801521c:	dd0b      	ble.n	8015236 <__gethex+0x46e>
 801521e:	2101      	movs	r1, #1
 8015220:	4620      	mov	r0, r4
 8015222:	f7ff fd69 	bl	8014cf8 <rshift>
 8015226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801522a:	3501      	adds	r5, #1
 801522c:	42ab      	cmp	r3, r5
 801522e:	f6ff aed0 	blt.w	8014fd2 <__gethex+0x20a>
 8015232:	2701      	movs	r7, #1
 8015234:	e7c0      	b.n	80151b8 <__gethex+0x3f0>
 8015236:	f016 061f 	ands.w	r6, r6, #31
 801523a:	d0fa      	beq.n	8015232 <__gethex+0x46a>
 801523c:	449a      	add	sl, r3
 801523e:	f1c6 0620 	rsb	r6, r6, #32
 8015242:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015246:	f000 fa55 	bl	80156f4 <__hi0bits>
 801524a:	42b0      	cmp	r0, r6
 801524c:	dbe7      	blt.n	801521e <__gethex+0x456>
 801524e:	e7f0      	b.n	8015232 <__gethex+0x46a>
 8015250:	08018ef7 	.word	0x08018ef7

08015254 <L_shift>:
 8015254:	f1c2 0208 	rsb	r2, r2, #8
 8015258:	0092      	lsls	r2, r2, #2
 801525a:	b570      	push	{r4, r5, r6, lr}
 801525c:	f1c2 0620 	rsb	r6, r2, #32
 8015260:	6843      	ldr	r3, [r0, #4]
 8015262:	6804      	ldr	r4, [r0, #0]
 8015264:	fa03 f506 	lsl.w	r5, r3, r6
 8015268:	432c      	orrs	r4, r5
 801526a:	40d3      	lsrs	r3, r2
 801526c:	6004      	str	r4, [r0, #0]
 801526e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015272:	4288      	cmp	r0, r1
 8015274:	d3f4      	bcc.n	8015260 <L_shift+0xc>
 8015276:	bd70      	pop	{r4, r5, r6, pc}

08015278 <__match>:
 8015278:	b530      	push	{r4, r5, lr}
 801527a:	6803      	ldr	r3, [r0, #0]
 801527c:	3301      	adds	r3, #1
 801527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015282:	b914      	cbnz	r4, 801528a <__match+0x12>
 8015284:	6003      	str	r3, [r0, #0]
 8015286:	2001      	movs	r0, #1
 8015288:	bd30      	pop	{r4, r5, pc}
 801528a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801528e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015292:	2d19      	cmp	r5, #25
 8015294:	bf98      	it	ls
 8015296:	3220      	addls	r2, #32
 8015298:	42a2      	cmp	r2, r4
 801529a:	d0f0      	beq.n	801527e <__match+0x6>
 801529c:	2000      	movs	r0, #0
 801529e:	e7f3      	b.n	8015288 <__match+0x10>

080152a0 <__hexnan>:
 80152a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a4:	680b      	ldr	r3, [r1, #0]
 80152a6:	6801      	ldr	r1, [r0, #0]
 80152a8:	115e      	asrs	r6, r3, #5
 80152aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80152ae:	f013 031f 	ands.w	r3, r3, #31
 80152b2:	b087      	sub	sp, #28
 80152b4:	bf18      	it	ne
 80152b6:	3604      	addne	r6, #4
 80152b8:	2500      	movs	r5, #0
 80152ba:	1f37      	subs	r7, r6, #4
 80152bc:	4682      	mov	sl, r0
 80152be:	4690      	mov	r8, r2
 80152c0:	9301      	str	r3, [sp, #4]
 80152c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80152c6:	46b9      	mov	r9, r7
 80152c8:	463c      	mov	r4, r7
 80152ca:	9502      	str	r5, [sp, #8]
 80152cc:	46ab      	mov	fp, r5
 80152ce:	784a      	ldrb	r2, [r1, #1]
 80152d0:	1c4b      	adds	r3, r1, #1
 80152d2:	9303      	str	r3, [sp, #12]
 80152d4:	b342      	cbz	r2, 8015328 <__hexnan+0x88>
 80152d6:	4610      	mov	r0, r2
 80152d8:	9105      	str	r1, [sp, #20]
 80152da:	9204      	str	r2, [sp, #16]
 80152dc:	f7ff fd5e 	bl	8014d9c <__hexdig_fun>
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d14f      	bne.n	8015384 <__hexnan+0xe4>
 80152e4:	9a04      	ldr	r2, [sp, #16]
 80152e6:	9905      	ldr	r1, [sp, #20]
 80152e8:	2a20      	cmp	r2, #32
 80152ea:	d818      	bhi.n	801531e <__hexnan+0x7e>
 80152ec:	9b02      	ldr	r3, [sp, #8]
 80152ee:	459b      	cmp	fp, r3
 80152f0:	dd13      	ble.n	801531a <__hexnan+0x7a>
 80152f2:	454c      	cmp	r4, r9
 80152f4:	d206      	bcs.n	8015304 <__hexnan+0x64>
 80152f6:	2d07      	cmp	r5, #7
 80152f8:	dc04      	bgt.n	8015304 <__hexnan+0x64>
 80152fa:	462a      	mov	r2, r5
 80152fc:	4649      	mov	r1, r9
 80152fe:	4620      	mov	r0, r4
 8015300:	f7ff ffa8 	bl	8015254 <L_shift>
 8015304:	4544      	cmp	r4, r8
 8015306:	d950      	bls.n	80153aa <__hexnan+0x10a>
 8015308:	2300      	movs	r3, #0
 801530a:	f1a4 0904 	sub.w	r9, r4, #4
 801530e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015312:	f8cd b008 	str.w	fp, [sp, #8]
 8015316:	464c      	mov	r4, r9
 8015318:	461d      	mov	r5, r3
 801531a:	9903      	ldr	r1, [sp, #12]
 801531c:	e7d7      	b.n	80152ce <__hexnan+0x2e>
 801531e:	2a29      	cmp	r2, #41	; 0x29
 8015320:	d156      	bne.n	80153d0 <__hexnan+0x130>
 8015322:	3102      	adds	r1, #2
 8015324:	f8ca 1000 	str.w	r1, [sl]
 8015328:	f1bb 0f00 	cmp.w	fp, #0
 801532c:	d050      	beq.n	80153d0 <__hexnan+0x130>
 801532e:	454c      	cmp	r4, r9
 8015330:	d206      	bcs.n	8015340 <__hexnan+0xa0>
 8015332:	2d07      	cmp	r5, #7
 8015334:	dc04      	bgt.n	8015340 <__hexnan+0xa0>
 8015336:	462a      	mov	r2, r5
 8015338:	4649      	mov	r1, r9
 801533a:	4620      	mov	r0, r4
 801533c:	f7ff ff8a 	bl	8015254 <L_shift>
 8015340:	4544      	cmp	r4, r8
 8015342:	d934      	bls.n	80153ae <__hexnan+0x10e>
 8015344:	f1a8 0204 	sub.w	r2, r8, #4
 8015348:	4623      	mov	r3, r4
 801534a:	f853 1b04 	ldr.w	r1, [r3], #4
 801534e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015352:	429f      	cmp	r7, r3
 8015354:	d2f9      	bcs.n	801534a <__hexnan+0xaa>
 8015356:	1b3b      	subs	r3, r7, r4
 8015358:	f023 0303 	bic.w	r3, r3, #3
 801535c:	3304      	adds	r3, #4
 801535e:	3401      	adds	r4, #1
 8015360:	3e03      	subs	r6, #3
 8015362:	42b4      	cmp	r4, r6
 8015364:	bf88      	it	hi
 8015366:	2304      	movhi	r3, #4
 8015368:	4443      	add	r3, r8
 801536a:	2200      	movs	r2, #0
 801536c:	f843 2b04 	str.w	r2, [r3], #4
 8015370:	429f      	cmp	r7, r3
 8015372:	d2fb      	bcs.n	801536c <__hexnan+0xcc>
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	b91b      	cbnz	r3, 8015380 <__hexnan+0xe0>
 8015378:	4547      	cmp	r7, r8
 801537a:	d127      	bne.n	80153cc <__hexnan+0x12c>
 801537c:	2301      	movs	r3, #1
 801537e:	603b      	str	r3, [r7, #0]
 8015380:	2005      	movs	r0, #5
 8015382:	e026      	b.n	80153d2 <__hexnan+0x132>
 8015384:	3501      	adds	r5, #1
 8015386:	2d08      	cmp	r5, #8
 8015388:	f10b 0b01 	add.w	fp, fp, #1
 801538c:	dd06      	ble.n	801539c <__hexnan+0xfc>
 801538e:	4544      	cmp	r4, r8
 8015390:	d9c3      	bls.n	801531a <__hexnan+0x7a>
 8015392:	2300      	movs	r3, #0
 8015394:	f844 3c04 	str.w	r3, [r4, #-4]
 8015398:	2501      	movs	r5, #1
 801539a:	3c04      	subs	r4, #4
 801539c:	6822      	ldr	r2, [r4, #0]
 801539e:	f000 000f 	and.w	r0, r0, #15
 80153a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80153a6:	6022      	str	r2, [r4, #0]
 80153a8:	e7b7      	b.n	801531a <__hexnan+0x7a>
 80153aa:	2508      	movs	r5, #8
 80153ac:	e7b5      	b.n	801531a <__hexnan+0x7a>
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d0df      	beq.n	8015374 <__hexnan+0xd4>
 80153b4:	f04f 32ff 	mov.w	r2, #4294967295
 80153b8:	f1c3 0320 	rsb	r3, r3, #32
 80153bc:	fa22 f303 	lsr.w	r3, r2, r3
 80153c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80153c4:	401a      	ands	r2, r3
 80153c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80153ca:	e7d3      	b.n	8015374 <__hexnan+0xd4>
 80153cc:	3f04      	subs	r7, #4
 80153ce:	e7d1      	b.n	8015374 <__hexnan+0xd4>
 80153d0:	2004      	movs	r0, #4
 80153d2:	b007      	add	sp, #28
 80153d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153d8 <_localeconv_r>:
 80153d8:	4800      	ldr	r0, [pc, #0]	; (80153dc <_localeconv_r+0x4>)
 80153da:	4770      	bx	lr
 80153dc:	20000230 	.word	0x20000230

080153e0 <_lseek_r>:
 80153e0:	b538      	push	{r3, r4, r5, lr}
 80153e2:	4d07      	ldr	r5, [pc, #28]	; (8015400 <_lseek_r+0x20>)
 80153e4:	4604      	mov	r4, r0
 80153e6:	4608      	mov	r0, r1
 80153e8:	4611      	mov	r1, r2
 80153ea:	2200      	movs	r2, #0
 80153ec:	602a      	str	r2, [r5, #0]
 80153ee:	461a      	mov	r2, r3
 80153f0:	f001 fc34 	bl	8016c5c <_lseek>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d102      	bne.n	80153fe <_lseek_r+0x1e>
 80153f8:	682b      	ldr	r3, [r5, #0]
 80153fa:	b103      	cbz	r3, 80153fe <_lseek_r+0x1e>
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	200064bc 	.word	0x200064bc

08015404 <__swhatbuf_r>:
 8015404:	b570      	push	{r4, r5, r6, lr}
 8015406:	460e      	mov	r6, r1
 8015408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801540c:	2900      	cmp	r1, #0
 801540e:	b096      	sub	sp, #88	; 0x58
 8015410:	4614      	mov	r4, r2
 8015412:	461d      	mov	r5, r3
 8015414:	da07      	bge.n	8015426 <__swhatbuf_r+0x22>
 8015416:	2300      	movs	r3, #0
 8015418:	602b      	str	r3, [r5, #0]
 801541a:	89b3      	ldrh	r3, [r6, #12]
 801541c:	061a      	lsls	r2, r3, #24
 801541e:	d410      	bmi.n	8015442 <__swhatbuf_r+0x3e>
 8015420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015424:	e00e      	b.n	8015444 <__swhatbuf_r+0x40>
 8015426:	466a      	mov	r2, sp
 8015428:	f001 fbc6 	bl	8016bb8 <_fstat_r>
 801542c:	2800      	cmp	r0, #0
 801542e:	dbf2      	blt.n	8015416 <__swhatbuf_r+0x12>
 8015430:	9a01      	ldr	r2, [sp, #4]
 8015432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801543a:	425a      	negs	r2, r3
 801543c:	415a      	adcs	r2, r3
 801543e:	602a      	str	r2, [r5, #0]
 8015440:	e7ee      	b.n	8015420 <__swhatbuf_r+0x1c>
 8015442:	2340      	movs	r3, #64	; 0x40
 8015444:	2000      	movs	r0, #0
 8015446:	6023      	str	r3, [r4, #0]
 8015448:	b016      	add	sp, #88	; 0x58
 801544a:	bd70      	pop	{r4, r5, r6, pc}

0801544c <__smakebuf_r>:
 801544c:	898b      	ldrh	r3, [r1, #12]
 801544e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015450:	079d      	lsls	r5, r3, #30
 8015452:	4606      	mov	r6, r0
 8015454:	460c      	mov	r4, r1
 8015456:	d507      	bpl.n	8015468 <__smakebuf_r+0x1c>
 8015458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801545c:	6023      	str	r3, [r4, #0]
 801545e:	6123      	str	r3, [r4, #16]
 8015460:	2301      	movs	r3, #1
 8015462:	6163      	str	r3, [r4, #20]
 8015464:	b002      	add	sp, #8
 8015466:	bd70      	pop	{r4, r5, r6, pc}
 8015468:	ab01      	add	r3, sp, #4
 801546a:	466a      	mov	r2, sp
 801546c:	f7ff ffca 	bl	8015404 <__swhatbuf_r>
 8015470:	9900      	ldr	r1, [sp, #0]
 8015472:	4605      	mov	r5, r0
 8015474:	4630      	mov	r0, r6
 8015476:	f7fc fbf9 	bl	8011c6c <_malloc_r>
 801547a:	b948      	cbnz	r0, 8015490 <__smakebuf_r+0x44>
 801547c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015480:	059a      	lsls	r2, r3, #22
 8015482:	d4ef      	bmi.n	8015464 <__smakebuf_r+0x18>
 8015484:	f023 0303 	bic.w	r3, r3, #3
 8015488:	f043 0302 	orr.w	r3, r3, #2
 801548c:	81a3      	strh	r3, [r4, #12]
 801548e:	e7e3      	b.n	8015458 <__smakebuf_r+0xc>
 8015490:	4b0d      	ldr	r3, [pc, #52]	; (80154c8 <__smakebuf_r+0x7c>)
 8015492:	62b3      	str	r3, [r6, #40]	; 0x28
 8015494:	89a3      	ldrh	r3, [r4, #12]
 8015496:	6020      	str	r0, [r4, #0]
 8015498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801549c:	81a3      	strh	r3, [r4, #12]
 801549e:	9b00      	ldr	r3, [sp, #0]
 80154a0:	6163      	str	r3, [r4, #20]
 80154a2:	9b01      	ldr	r3, [sp, #4]
 80154a4:	6120      	str	r0, [r4, #16]
 80154a6:	b15b      	cbz	r3, 80154c0 <__smakebuf_r+0x74>
 80154a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154ac:	4630      	mov	r0, r6
 80154ae:	f001 fb95 	bl	8016bdc <_isatty_r>
 80154b2:	b128      	cbz	r0, 80154c0 <__smakebuf_r+0x74>
 80154b4:	89a3      	ldrh	r3, [r4, #12]
 80154b6:	f023 0303 	bic.w	r3, r3, #3
 80154ba:	f043 0301 	orr.w	r3, r3, #1
 80154be:	81a3      	strh	r3, [r4, #12]
 80154c0:	89a0      	ldrh	r0, [r4, #12]
 80154c2:	4305      	orrs	r5, r0
 80154c4:	81a5      	strh	r5, [r4, #12]
 80154c6:	e7cd      	b.n	8015464 <__smakebuf_r+0x18>
 80154c8:	08011969 	.word	0x08011969

080154cc <__ascii_mbtowc>:
 80154cc:	b082      	sub	sp, #8
 80154ce:	b901      	cbnz	r1, 80154d2 <__ascii_mbtowc+0x6>
 80154d0:	a901      	add	r1, sp, #4
 80154d2:	b142      	cbz	r2, 80154e6 <__ascii_mbtowc+0x1a>
 80154d4:	b14b      	cbz	r3, 80154ea <__ascii_mbtowc+0x1e>
 80154d6:	7813      	ldrb	r3, [r2, #0]
 80154d8:	600b      	str	r3, [r1, #0]
 80154da:	7812      	ldrb	r2, [r2, #0]
 80154dc:	1e10      	subs	r0, r2, #0
 80154de:	bf18      	it	ne
 80154e0:	2001      	movne	r0, #1
 80154e2:	b002      	add	sp, #8
 80154e4:	4770      	bx	lr
 80154e6:	4610      	mov	r0, r2
 80154e8:	e7fb      	b.n	80154e2 <__ascii_mbtowc+0x16>
 80154ea:	f06f 0001 	mvn.w	r0, #1
 80154ee:	e7f8      	b.n	80154e2 <__ascii_mbtowc+0x16>

080154f0 <__malloc_lock>:
 80154f0:	4801      	ldr	r0, [pc, #4]	; (80154f8 <__malloc_lock+0x8>)
 80154f2:	f7fc bb30 	b.w	8011b56 <__retarget_lock_acquire_recursive>
 80154f6:	bf00      	nop
 80154f8:	200064b4 	.word	0x200064b4

080154fc <__malloc_unlock>:
 80154fc:	4801      	ldr	r0, [pc, #4]	; (8015504 <__malloc_unlock+0x8>)
 80154fe:	f7fc bb2b 	b.w	8011b58 <__retarget_lock_release_recursive>
 8015502:	bf00      	nop
 8015504:	200064b4 	.word	0x200064b4

08015508 <_Balloc>:
 8015508:	b570      	push	{r4, r5, r6, lr}
 801550a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801550c:	4604      	mov	r4, r0
 801550e:	460d      	mov	r5, r1
 8015510:	b976      	cbnz	r6, 8015530 <_Balloc+0x28>
 8015512:	2010      	movs	r0, #16
 8015514:	f7fc fb22 	bl	8011b5c <malloc>
 8015518:	4602      	mov	r2, r0
 801551a:	6260      	str	r0, [r4, #36]	; 0x24
 801551c:	b920      	cbnz	r0, 8015528 <_Balloc+0x20>
 801551e:	4b18      	ldr	r3, [pc, #96]	; (8015580 <_Balloc+0x78>)
 8015520:	4818      	ldr	r0, [pc, #96]	; (8015584 <_Balloc+0x7c>)
 8015522:	2166      	movs	r1, #102	; 0x66
 8015524:	f7fe fc6e 	bl	8013e04 <__assert_func>
 8015528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801552c:	6006      	str	r6, [r0, #0]
 801552e:	60c6      	str	r6, [r0, #12]
 8015530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015532:	68f3      	ldr	r3, [r6, #12]
 8015534:	b183      	cbz	r3, 8015558 <_Balloc+0x50>
 8015536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801553e:	b9b8      	cbnz	r0, 8015570 <_Balloc+0x68>
 8015540:	2101      	movs	r1, #1
 8015542:	fa01 f605 	lsl.w	r6, r1, r5
 8015546:	1d72      	adds	r2, r6, #5
 8015548:	0092      	lsls	r2, r2, #2
 801554a:	4620      	mov	r0, r4
 801554c:	f000 fc97 	bl	8015e7e <_calloc_r>
 8015550:	b160      	cbz	r0, 801556c <_Balloc+0x64>
 8015552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015556:	e00e      	b.n	8015576 <_Balloc+0x6e>
 8015558:	2221      	movs	r2, #33	; 0x21
 801555a:	2104      	movs	r1, #4
 801555c:	4620      	mov	r0, r4
 801555e:	f000 fc8e 	bl	8015e7e <_calloc_r>
 8015562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015564:	60f0      	str	r0, [r6, #12]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d1e4      	bne.n	8015536 <_Balloc+0x2e>
 801556c:	2000      	movs	r0, #0
 801556e:	bd70      	pop	{r4, r5, r6, pc}
 8015570:	6802      	ldr	r2, [r0, #0]
 8015572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015576:	2300      	movs	r3, #0
 8015578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801557c:	e7f7      	b.n	801556e <_Balloc+0x66>
 801557e:	bf00      	nop
 8015580:	08018e81 	.word	0x08018e81
 8015584:	08018f88 	.word	0x08018f88

08015588 <_Bfree>:
 8015588:	b570      	push	{r4, r5, r6, lr}
 801558a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801558c:	4605      	mov	r5, r0
 801558e:	460c      	mov	r4, r1
 8015590:	b976      	cbnz	r6, 80155b0 <_Bfree+0x28>
 8015592:	2010      	movs	r0, #16
 8015594:	f7fc fae2 	bl	8011b5c <malloc>
 8015598:	4602      	mov	r2, r0
 801559a:	6268      	str	r0, [r5, #36]	; 0x24
 801559c:	b920      	cbnz	r0, 80155a8 <_Bfree+0x20>
 801559e:	4b09      	ldr	r3, [pc, #36]	; (80155c4 <_Bfree+0x3c>)
 80155a0:	4809      	ldr	r0, [pc, #36]	; (80155c8 <_Bfree+0x40>)
 80155a2:	218a      	movs	r1, #138	; 0x8a
 80155a4:	f7fe fc2e 	bl	8013e04 <__assert_func>
 80155a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155ac:	6006      	str	r6, [r0, #0]
 80155ae:	60c6      	str	r6, [r0, #12]
 80155b0:	b13c      	cbz	r4, 80155c2 <_Bfree+0x3a>
 80155b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80155b4:	6862      	ldr	r2, [r4, #4]
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80155bc:	6021      	str	r1, [r4, #0]
 80155be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80155c2:	bd70      	pop	{r4, r5, r6, pc}
 80155c4:	08018e81 	.word	0x08018e81
 80155c8:	08018f88 	.word	0x08018f88

080155cc <__multadd>:
 80155cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d0:	690e      	ldr	r6, [r1, #16]
 80155d2:	4607      	mov	r7, r0
 80155d4:	4698      	mov	r8, r3
 80155d6:	460c      	mov	r4, r1
 80155d8:	f101 0014 	add.w	r0, r1, #20
 80155dc:	2300      	movs	r3, #0
 80155de:	6805      	ldr	r5, [r0, #0]
 80155e0:	b2a9      	uxth	r1, r5
 80155e2:	fb02 8101 	mla	r1, r2, r1, r8
 80155e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80155ea:	0c2d      	lsrs	r5, r5, #16
 80155ec:	fb02 c505 	mla	r5, r2, r5, ip
 80155f0:	b289      	uxth	r1, r1
 80155f2:	3301      	adds	r3, #1
 80155f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80155f8:	429e      	cmp	r6, r3
 80155fa:	f840 1b04 	str.w	r1, [r0], #4
 80155fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015602:	dcec      	bgt.n	80155de <__multadd+0x12>
 8015604:	f1b8 0f00 	cmp.w	r8, #0
 8015608:	d022      	beq.n	8015650 <__multadd+0x84>
 801560a:	68a3      	ldr	r3, [r4, #8]
 801560c:	42b3      	cmp	r3, r6
 801560e:	dc19      	bgt.n	8015644 <__multadd+0x78>
 8015610:	6861      	ldr	r1, [r4, #4]
 8015612:	4638      	mov	r0, r7
 8015614:	3101      	adds	r1, #1
 8015616:	f7ff ff77 	bl	8015508 <_Balloc>
 801561a:	4605      	mov	r5, r0
 801561c:	b928      	cbnz	r0, 801562a <__multadd+0x5e>
 801561e:	4602      	mov	r2, r0
 8015620:	4b0d      	ldr	r3, [pc, #52]	; (8015658 <__multadd+0x8c>)
 8015622:	480e      	ldr	r0, [pc, #56]	; (801565c <__multadd+0x90>)
 8015624:	21b5      	movs	r1, #181	; 0xb5
 8015626:	f7fe fbed 	bl	8013e04 <__assert_func>
 801562a:	6922      	ldr	r2, [r4, #16]
 801562c:	3202      	adds	r2, #2
 801562e:	f104 010c 	add.w	r1, r4, #12
 8015632:	0092      	lsls	r2, r2, #2
 8015634:	300c      	adds	r0, #12
 8015636:	f7fc fa99 	bl	8011b6c <memcpy>
 801563a:	4621      	mov	r1, r4
 801563c:	4638      	mov	r0, r7
 801563e:	f7ff ffa3 	bl	8015588 <_Bfree>
 8015642:	462c      	mov	r4, r5
 8015644:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015648:	3601      	adds	r6, #1
 801564a:	f8c3 8014 	str.w	r8, [r3, #20]
 801564e:	6126      	str	r6, [r4, #16]
 8015650:	4620      	mov	r0, r4
 8015652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015656:	bf00      	nop
 8015658:	08018ef7 	.word	0x08018ef7
 801565c:	08018f88 	.word	0x08018f88

08015660 <__s2b>:
 8015660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015664:	460c      	mov	r4, r1
 8015666:	4615      	mov	r5, r2
 8015668:	461f      	mov	r7, r3
 801566a:	2209      	movs	r2, #9
 801566c:	3308      	adds	r3, #8
 801566e:	4606      	mov	r6, r0
 8015670:	fb93 f3f2 	sdiv	r3, r3, r2
 8015674:	2100      	movs	r1, #0
 8015676:	2201      	movs	r2, #1
 8015678:	429a      	cmp	r2, r3
 801567a:	db09      	blt.n	8015690 <__s2b+0x30>
 801567c:	4630      	mov	r0, r6
 801567e:	f7ff ff43 	bl	8015508 <_Balloc>
 8015682:	b940      	cbnz	r0, 8015696 <__s2b+0x36>
 8015684:	4602      	mov	r2, r0
 8015686:	4b19      	ldr	r3, [pc, #100]	; (80156ec <__s2b+0x8c>)
 8015688:	4819      	ldr	r0, [pc, #100]	; (80156f0 <__s2b+0x90>)
 801568a:	21ce      	movs	r1, #206	; 0xce
 801568c:	f7fe fbba 	bl	8013e04 <__assert_func>
 8015690:	0052      	lsls	r2, r2, #1
 8015692:	3101      	adds	r1, #1
 8015694:	e7f0      	b.n	8015678 <__s2b+0x18>
 8015696:	9b08      	ldr	r3, [sp, #32]
 8015698:	6143      	str	r3, [r0, #20]
 801569a:	2d09      	cmp	r5, #9
 801569c:	f04f 0301 	mov.w	r3, #1
 80156a0:	6103      	str	r3, [r0, #16]
 80156a2:	dd16      	ble.n	80156d2 <__s2b+0x72>
 80156a4:	f104 0909 	add.w	r9, r4, #9
 80156a8:	46c8      	mov	r8, r9
 80156aa:	442c      	add	r4, r5
 80156ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80156b0:	4601      	mov	r1, r0
 80156b2:	3b30      	subs	r3, #48	; 0x30
 80156b4:	220a      	movs	r2, #10
 80156b6:	4630      	mov	r0, r6
 80156b8:	f7ff ff88 	bl	80155cc <__multadd>
 80156bc:	45a0      	cmp	r8, r4
 80156be:	d1f5      	bne.n	80156ac <__s2b+0x4c>
 80156c0:	f1a5 0408 	sub.w	r4, r5, #8
 80156c4:	444c      	add	r4, r9
 80156c6:	1b2d      	subs	r5, r5, r4
 80156c8:	1963      	adds	r3, r4, r5
 80156ca:	42bb      	cmp	r3, r7
 80156cc:	db04      	blt.n	80156d8 <__s2b+0x78>
 80156ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156d2:	340a      	adds	r4, #10
 80156d4:	2509      	movs	r5, #9
 80156d6:	e7f6      	b.n	80156c6 <__s2b+0x66>
 80156d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80156dc:	4601      	mov	r1, r0
 80156de:	3b30      	subs	r3, #48	; 0x30
 80156e0:	220a      	movs	r2, #10
 80156e2:	4630      	mov	r0, r6
 80156e4:	f7ff ff72 	bl	80155cc <__multadd>
 80156e8:	e7ee      	b.n	80156c8 <__s2b+0x68>
 80156ea:	bf00      	nop
 80156ec:	08018ef7 	.word	0x08018ef7
 80156f0:	08018f88 	.word	0x08018f88

080156f4 <__hi0bits>:
 80156f4:	0c03      	lsrs	r3, r0, #16
 80156f6:	041b      	lsls	r3, r3, #16
 80156f8:	b9d3      	cbnz	r3, 8015730 <__hi0bits+0x3c>
 80156fa:	0400      	lsls	r0, r0, #16
 80156fc:	2310      	movs	r3, #16
 80156fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015702:	bf04      	itt	eq
 8015704:	0200      	lsleq	r0, r0, #8
 8015706:	3308      	addeq	r3, #8
 8015708:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801570c:	bf04      	itt	eq
 801570e:	0100      	lsleq	r0, r0, #4
 8015710:	3304      	addeq	r3, #4
 8015712:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015716:	bf04      	itt	eq
 8015718:	0080      	lsleq	r0, r0, #2
 801571a:	3302      	addeq	r3, #2
 801571c:	2800      	cmp	r0, #0
 801571e:	db05      	blt.n	801572c <__hi0bits+0x38>
 8015720:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015724:	f103 0301 	add.w	r3, r3, #1
 8015728:	bf08      	it	eq
 801572a:	2320      	moveq	r3, #32
 801572c:	4618      	mov	r0, r3
 801572e:	4770      	bx	lr
 8015730:	2300      	movs	r3, #0
 8015732:	e7e4      	b.n	80156fe <__hi0bits+0xa>

08015734 <__lo0bits>:
 8015734:	6803      	ldr	r3, [r0, #0]
 8015736:	f013 0207 	ands.w	r2, r3, #7
 801573a:	4601      	mov	r1, r0
 801573c:	d00b      	beq.n	8015756 <__lo0bits+0x22>
 801573e:	07da      	lsls	r2, r3, #31
 8015740:	d424      	bmi.n	801578c <__lo0bits+0x58>
 8015742:	0798      	lsls	r0, r3, #30
 8015744:	bf49      	itett	mi
 8015746:	085b      	lsrmi	r3, r3, #1
 8015748:	089b      	lsrpl	r3, r3, #2
 801574a:	2001      	movmi	r0, #1
 801574c:	600b      	strmi	r3, [r1, #0]
 801574e:	bf5c      	itt	pl
 8015750:	600b      	strpl	r3, [r1, #0]
 8015752:	2002      	movpl	r0, #2
 8015754:	4770      	bx	lr
 8015756:	b298      	uxth	r0, r3
 8015758:	b9b0      	cbnz	r0, 8015788 <__lo0bits+0x54>
 801575a:	0c1b      	lsrs	r3, r3, #16
 801575c:	2010      	movs	r0, #16
 801575e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015762:	bf04      	itt	eq
 8015764:	0a1b      	lsreq	r3, r3, #8
 8015766:	3008      	addeq	r0, #8
 8015768:	071a      	lsls	r2, r3, #28
 801576a:	bf04      	itt	eq
 801576c:	091b      	lsreq	r3, r3, #4
 801576e:	3004      	addeq	r0, #4
 8015770:	079a      	lsls	r2, r3, #30
 8015772:	bf04      	itt	eq
 8015774:	089b      	lsreq	r3, r3, #2
 8015776:	3002      	addeq	r0, #2
 8015778:	07da      	lsls	r2, r3, #31
 801577a:	d403      	bmi.n	8015784 <__lo0bits+0x50>
 801577c:	085b      	lsrs	r3, r3, #1
 801577e:	f100 0001 	add.w	r0, r0, #1
 8015782:	d005      	beq.n	8015790 <__lo0bits+0x5c>
 8015784:	600b      	str	r3, [r1, #0]
 8015786:	4770      	bx	lr
 8015788:	4610      	mov	r0, r2
 801578a:	e7e8      	b.n	801575e <__lo0bits+0x2a>
 801578c:	2000      	movs	r0, #0
 801578e:	4770      	bx	lr
 8015790:	2020      	movs	r0, #32
 8015792:	4770      	bx	lr

08015794 <__i2b>:
 8015794:	b510      	push	{r4, lr}
 8015796:	460c      	mov	r4, r1
 8015798:	2101      	movs	r1, #1
 801579a:	f7ff feb5 	bl	8015508 <_Balloc>
 801579e:	4602      	mov	r2, r0
 80157a0:	b928      	cbnz	r0, 80157ae <__i2b+0x1a>
 80157a2:	4b05      	ldr	r3, [pc, #20]	; (80157b8 <__i2b+0x24>)
 80157a4:	4805      	ldr	r0, [pc, #20]	; (80157bc <__i2b+0x28>)
 80157a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80157aa:	f7fe fb2b 	bl	8013e04 <__assert_func>
 80157ae:	2301      	movs	r3, #1
 80157b0:	6144      	str	r4, [r0, #20]
 80157b2:	6103      	str	r3, [r0, #16]
 80157b4:	bd10      	pop	{r4, pc}
 80157b6:	bf00      	nop
 80157b8:	08018ef7 	.word	0x08018ef7
 80157bc:	08018f88 	.word	0x08018f88

080157c0 <__multiply>:
 80157c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c4:	4614      	mov	r4, r2
 80157c6:	690a      	ldr	r2, [r1, #16]
 80157c8:	6923      	ldr	r3, [r4, #16]
 80157ca:	429a      	cmp	r2, r3
 80157cc:	bfb8      	it	lt
 80157ce:	460b      	movlt	r3, r1
 80157d0:	460d      	mov	r5, r1
 80157d2:	bfbc      	itt	lt
 80157d4:	4625      	movlt	r5, r4
 80157d6:	461c      	movlt	r4, r3
 80157d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80157dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80157e0:	68ab      	ldr	r3, [r5, #8]
 80157e2:	6869      	ldr	r1, [r5, #4]
 80157e4:	eb0a 0709 	add.w	r7, sl, r9
 80157e8:	42bb      	cmp	r3, r7
 80157ea:	b085      	sub	sp, #20
 80157ec:	bfb8      	it	lt
 80157ee:	3101      	addlt	r1, #1
 80157f0:	f7ff fe8a 	bl	8015508 <_Balloc>
 80157f4:	b930      	cbnz	r0, 8015804 <__multiply+0x44>
 80157f6:	4602      	mov	r2, r0
 80157f8:	4b42      	ldr	r3, [pc, #264]	; (8015904 <__multiply+0x144>)
 80157fa:	4843      	ldr	r0, [pc, #268]	; (8015908 <__multiply+0x148>)
 80157fc:	f240 115d 	movw	r1, #349	; 0x15d
 8015800:	f7fe fb00 	bl	8013e04 <__assert_func>
 8015804:	f100 0614 	add.w	r6, r0, #20
 8015808:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801580c:	4633      	mov	r3, r6
 801580e:	2200      	movs	r2, #0
 8015810:	4543      	cmp	r3, r8
 8015812:	d31e      	bcc.n	8015852 <__multiply+0x92>
 8015814:	f105 0c14 	add.w	ip, r5, #20
 8015818:	f104 0314 	add.w	r3, r4, #20
 801581c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015820:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015824:	9202      	str	r2, [sp, #8]
 8015826:	ebac 0205 	sub.w	r2, ip, r5
 801582a:	3a15      	subs	r2, #21
 801582c:	f022 0203 	bic.w	r2, r2, #3
 8015830:	3204      	adds	r2, #4
 8015832:	f105 0115 	add.w	r1, r5, #21
 8015836:	458c      	cmp	ip, r1
 8015838:	bf38      	it	cc
 801583a:	2204      	movcc	r2, #4
 801583c:	9201      	str	r2, [sp, #4]
 801583e:	9a02      	ldr	r2, [sp, #8]
 8015840:	9303      	str	r3, [sp, #12]
 8015842:	429a      	cmp	r2, r3
 8015844:	d808      	bhi.n	8015858 <__multiply+0x98>
 8015846:	2f00      	cmp	r7, #0
 8015848:	dc55      	bgt.n	80158f6 <__multiply+0x136>
 801584a:	6107      	str	r7, [r0, #16]
 801584c:	b005      	add	sp, #20
 801584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015852:	f843 2b04 	str.w	r2, [r3], #4
 8015856:	e7db      	b.n	8015810 <__multiply+0x50>
 8015858:	f8b3 a000 	ldrh.w	sl, [r3]
 801585c:	f1ba 0f00 	cmp.w	sl, #0
 8015860:	d020      	beq.n	80158a4 <__multiply+0xe4>
 8015862:	f105 0e14 	add.w	lr, r5, #20
 8015866:	46b1      	mov	r9, r6
 8015868:	2200      	movs	r2, #0
 801586a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801586e:	f8d9 b000 	ldr.w	fp, [r9]
 8015872:	b2a1      	uxth	r1, r4
 8015874:	fa1f fb8b 	uxth.w	fp, fp
 8015878:	fb0a b101 	mla	r1, sl, r1, fp
 801587c:	4411      	add	r1, r2
 801587e:	f8d9 2000 	ldr.w	r2, [r9]
 8015882:	0c24      	lsrs	r4, r4, #16
 8015884:	0c12      	lsrs	r2, r2, #16
 8015886:	fb0a 2404 	mla	r4, sl, r4, r2
 801588a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801588e:	b289      	uxth	r1, r1
 8015890:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015894:	45f4      	cmp	ip, lr
 8015896:	f849 1b04 	str.w	r1, [r9], #4
 801589a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801589e:	d8e4      	bhi.n	801586a <__multiply+0xaa>
 80158a0:	9901      	ldr	r1, [sp, #4]
 80158a2:	5072      	str	r2, [r6, r1]
 80158a4:	9a03      	ldr	r2, [sp, #12]
 80158a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80158aa:	3304      	adds	r3, #4
 80158ac:	f1b9 0f00 	cmp.w	r9, #0
 80158b0:	d01f      	beq.n	80158f2 <__multiply+0x132>
 80158b2:	6834      	ldr	r4, [r6, #0]
 80158b4:	f105 0114 	add.w	r1, r5, #20
 80158b8:	46b6      	mov	lr, r6
 80158ba:	f04f 0a00 	mov.w	sl, #0
 80158be:	880a      	ldrh	r2, [r1, #0]
 80158c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80158c4:	fb09 b202 	mla	r2, r9, r2, fp
 80158c8:	4492      	add	sl, r2
 80158ca:	b2a4      	uxth	r4, r4
 80158cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80158d0:	f84e 4b04 	str.w	r4, [lr], #4
 80158d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80158d8:	f8be 2000 	ldrh.w	r2, [lr]
 80158dc:	0c24      	lsrs	r4, r4, #16
 80158de:	fb09 2404 	mla	r4, r9, r4, r2
 80158e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80158e6:	458c      	cmp	ip, r1
 80158e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80158ec:	d8e7      	bhi.n	80158be <__multiply+0xfe>
 80158ee:	9a01      	ldr	r2, [sp, #4]
 80158f0:	50b4      	str	r4, [r6, r2]
 80158f2:	3604      	adds	r6, #4
 80158f4:	e7a3      	b.n	801583e <__multiply+0x7e>
 80158f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d1a5      	bne.n	801584a <__multiply+0x8a>
 80158fe:	3f01      	subs	r7, #1
 8015900:	e7a1      	b.n	8015846 <__multiply+0x86>
 8015902:	bf00      	nop
 8015904:	08018ef7 	.word	0x08018ef7
 8015908:	08018f88 	.word	0x08018f88

0801590c <__pow5mult>:
 801590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015910:	4615      	mov	r5, r2
 8015912:	f012 0203 	ands.w	r2, r2, #3
 8015916:	4606      	mov	r6, r0
 8015918:	460f      	mov	r7, r1
 801591a:	d007      	beq.n	801592c <__pow5mult+0x20>
 801591c:	4c25      	ldr	r4, [pc, #148]	; (80159b4 <__pow5mult+0xa8>)
 801591e:	3a01      	subs	r2, #1
 8015920:	2300      	movs	r3, #0
 8015922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015926:	f7ff fe51 	bl	80155cc <__multadd>
 801592a:	4607      	mov	r7, r0
 801592c:	10ad      	asrs	r5, r5, #2
 801592e:	d03d      	beq.n	80159ac <__pow5mult+0xa0>
 8015930:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015932:	b97c      	cbnz	r4, 8015954 <__pow5mult+0x48>
 8015934:	2010      	movs	r0, #16
 8015936:	f7fc f911 	bl	8011b5c <malloc>
 801593a:	4602      	mov	r2, r0
 801593c:	6270      	str	r0, [r6, #36]	; 0x24
 801593e:	b928      	cbnz	r0, 801594c <__pow5mult+0x40>
 8015940:	4b1d      	ldr	r3, [pc, #116]	; (80159b8 <__pow5mult+0xac>)
 8015942:	481e      	ldr	r0, [pc, #120]	; (80159bc <__pow5mult+0xb0>)
 8015944:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015948:	f7fe fa5c 	bl	8013e04 <__assert_func>
 801594c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015950:	6004      	str	r4, [r0, #0]
 8015952:	60c4      	str	r4, [r0, #12]
 8015954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801595c:	b94c      	cbnz	r4, 8015972 <__pow5mult+0x66>
 801595e:	f240 2171 	movw	r1, #625	; 0x271
 8015962:	4630      	mov	r0, r6
 8015964:	f7ff ff16 	bl	8015794 <__i2b>
 8015968:	2300      	movs	r3, #0
 801596a:	f8c8 0008 	str.w	r0, [r8, #8]
 801596e:	4604      	mov	r4, r0
 8015970:	6003      	str	r3, [r0, #0]
 8015972:	f04f 0900 	mov.w	r9, #0
 8015976:	07eb      	lsls	r3, r5, #31
 8015978:	d50a      	bpl.n	8015990 <__pow5mult+0x84>
 801597a:	4639      	mov	r1, r7
 801597c:	4622      	mov	r2, r4
 801597e:	4630      	mov	r0, r6
 8015980:	f7ff ff1e 	bl	80157c0 <__multiply>
 8015984:	4639      	mov	r1, r7
 8015986:	4680      	mov	r8, r0
 8015988:	4630      	mov	r0, r6
 801598a:	f7ff fdfd 	bl	8015588 <_Bfree>
 801598e:	4647      	mov	r7, r8
 8015990:	106d      	asrs	r5, r5, #1
 8015992:	d00b      	beq.n	80159ac <__pow5mult+0xa0>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	b938      	cbnz	r0, 80159a8 <__pow5mult+0x9c>
 8015998:	4622      	mov	r2, r4
 801599a:	4621      	mov	r1, r4
 801599c:	4630      	mov	r0, r6
 801599e:	f7ff ff0f 	bl	80157c0 <__multiply>
 80159a2:	6020      	str	r0, [r4, #0]
 80159a4:	f8c0 9000 	str.w	r9, [r0]
 80159a8:	4604      	mov	r4, r0
 80159aa:	e7e4      	b.n	8015976 <__pow5mult+0x6a>
 80159ac:	4638      	mov	r0, r7
 80159ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159b2:	bf00      	nop
 80159b4:	080190d8 	.word	0x080190d8
 80159b8:	08018e81 	.word	0x08018e81
 80159bc:	08018f88 	.word	0x08018f88

080159c0 <__lshift>:
 80159c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159c4:	460c      	mov	r4, r1
 80159c6:	6849      	ldr	r1, [r1, #4]
 80159c8:	6923      	ldr	r3, [r4, #16]
 80159ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80159ce:	68a3      	ldr	r3, [r4, #8]
 80159d0:	4607      	mov	r7, r0
 80159d2:	4691      	mov	r9, r2
 80159d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159d8:	f108 0601 	add.w	r6, r8, #1
 80159dc:	42b3      	cmp	r3, r6
 80159de:	db0b      	blt.n	80159f8 <__lshift+0x38>
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7ff fd91 	bl	8015508 <_Balloc>
 80159e6:	4605      	mov	r5, r0
 80159e8:	b948      	cbnz	r0, 80159fe <__lshift+0x3e>
 80159ea:	4602      	mov	r2, r0
 80159ec:	4b28      	ldr	r3, [pc, #160]	; (8015a90 <__lshift+0xd0>)
 80159ee:	4829      	ldr	r0, [pc, #164]	; (8015a94 <__lshift+0xd4>)
 80159f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80159f4:	f7fe fa06 	bl	8013e04 <__assert_func>
 80159f8:	3101      	adds	r1, #1
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	e7ee      	b.n	80159dc <__lshift+0x1c>
 80159fe:	2300      	movs	r3, #0
 8015a00:	f100 0114 	add.w	r1, r0, #20
 8015a04:	f100 0210 	add.w	r2, r0, #16
 8015a08:	4618      	mov	r0, r3
 8015a0a:	4553      	cmp	r3, sl
 8015a0c:	db33      	blt.n	8015a76 <__lshift+0xb6>
 8015a0e:	6920      	ldr	r0, [r4, #16]
 8015a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a14:	f104 0314 	add.w	r3, r4, #20
 8015a18:	f019 091f 	ands.w	r9, r9, #31
 8015a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015a24:	d02b      	beq.n	8015a7e <__lshift+0xbe>
 8015a26:	f1c9 0e20 	rsb	lr, r9, #32
 8015a2a:	468a      	mov	sl, r1
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	6818      	ldr	r0, [r3, #0]
 8015a30:	fa00 f009 	lsl.w	r0, r0, r9
 8015a34:	4302      	orrs	r2, r0
 8015a36:	f84a 2b04 	str.w	r2, [sl], #4
 8015a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a3e:	459c      	cmp	ip, r3
 8015a40:	fa22 f20e 	lsr.w	r2, r2, lr
 8015a44:	d8f3      	bhi.n	8015a2e <__lshift+0x6e>
 8015a46:	ebac 0304 	sub.w	r3, ip, r4
 8015a4a:	3b15      	subs	r3, #21
 8015a4c:	f023 0303 	bic.w	r3, r3, #3
 8015a50:	3304      	adds	r3, #4
 8015a52:	f104 0015 	add.w	r0, r4, #21
 8015a56:	4584      	cmp	ip, r0
 8015a58:	bf38      	it	cc
 8015a5a:	2304      	movcc	r3, #4
 8015a5c:	50ca      	str	r2, [r1, r3]
 8015a5e:	b10a      	cbz	r2, 8015a64 <__lshift+0xa4>
 8015a60:	f108 0602 	add.w	r6, r8, #2
 8015a64:	3e01      	subs	r6, #1
 8015a66:	4638      	mov	r0, r7
 8015a68:	612e      	str	r6, [r5, #16]
 8015a6a:	4621      	mov	r1, r4
 8015a6c:	f7ff fd8c 	bl	8015588 <_Bfree>
 8015a70:	4628      	mov	r0, r5
 8015a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a76:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	e7c5      	b.n	8015a0a <__lshift+0x4a>
 8015a7e:	3904      	subs	r1, #4
 8015a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a84:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a88:	459c      	cmp	ip, r3
 8015a8a:	d8f9      	bhi.n	8015a80 <__lshift+0xc0>
 8015a8c:	e7ea      	b.n	8015a64 <__lshift+0xa4>
 8015a8e:	bf00      	nop
 8015a90:	08018ef7 	.word	0x08018ef7
 8015a94:	08018f88 	.word	0x08018f88

08015a98 <__mcmp>:
 8015a98:	b530      	push	{r4, r5, lr}
 8015a9a:	6902      	ldr	r2, [r0, #16]
 8015a9c:	690c      	ldr	r4, [r1, #16]
 8015a9e:	1b12      	subs	r2, r2, r4
 8015aa0:	d10e      	bne.n	8015ac0 <__mcmp+0x28>
 8015aa2:	f100 0314 	add.w	r3, r0, #20
 8015aa6:	3114      	adds	r1, #20
 8015aa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015aac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015ab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015ab8:	42a5      	cmp	r5, r4
 8015aba:	d003      	beq.n	8015ac4 <__mcmp+0x2c>
 8015abc:	d305      	bcc.n	8015aca <__mcmp+0x32>
 8015abe:	2201      	movs	r2, #1
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	bd30      	pop	{r4, r5, pc}
 8015ac4:	4283      	cmp	r3, r0
 8015ac6:	d3f3      	bcc.n	8015ab0 <__mcmp+0x18>
 8015ac8:	e7fa      	b.n	8015ac0 <__mcmp+0x28>
 8015aca:	f04f 32ff 	mov.w	r2, #4294967295
 8015ace:	e7f7      	b.n	8015ac0 <__mcmp+0x28>

08015ad0 <__mdiff>:
 8015ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad4:	460c      	mov	r4, r1
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	4611      	mov	r1, r2
 8015ada:	4620      	mov	r0, r4
 8015adc:	4617      	mov	r7, r2
 8015ade:	f7ff ffdb 	bl	8015a98 <__mcmp>
 8015ae2:	1e05      	subs	r5, r0, #0
 8015ae4:	d110      	bne.n	8015b08 <__mdiff+0x38>
 8015ae6:	4629      	mov	r1, r5
 8015ae8:	4630      	mov	r0, r6
 8015aea:	f7ff fd0d 	bl	8015508 <_Balloc>
 8015aee:	b930      	cbnz	r0, 8015afe <__mdiff+0x2e>
 8015af0:	4b39      	ldr	r3, [pc, #228]	; (8015bd8 <__mdiff+0x108>)
 8015af2:	4602      	mov	r2, r0
 8015af4:	f240 2132 	movw	r1, #562	; 0x232
 8015af8:	4838      	ldr	r0, [pc, #224]	; (8015bdc <__mdiff+0x10c>)
 8015afa:	f7fe f983 	bl	8013e04 <__assert_func>
 8015afe:	2301      	movs	r3, #1
 8015b00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b08:	bfa4      	itt	ge
 8015b0a:	463b      	movge	r3, r7
 8015b0c:	4627      	movge	r7, r4
 8015b0e:	4630      	mov	r0, r6
 8015b10:	6879      	ldr	r1, [r7, #4]
 8015b12:	bfa6      	itte	ge
 8015b14:	461c      	movge	r4, r3
 8015b16:	2500      	movge	r5, #0
 8015b18:	2501      	movlt	r5, #1
 8015b1a:	f7ff fcf5 	bl	8015508 <_Balloc>
 8015b1e:	b920      	cbnz	r0, 8015b2a <__mdiff+0x5a>
 8015b20:	4b2d      	ldr	r3, [pc, #180]	; (8015bd8 <__mdiff+0x108>)
 8015b22:	4602      	mov	r2, r0
 8015b24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015b28:	e7e6      	b.n	8015af8 <__mdiff+0x28>
 8015b2a:	693e      	ldr	r6, [r7, #16]
 8015b2c:	60c5      	str	r5, [r0, #12]
 8015b2e:	6925      	ldr	r5, [r4, #16]
 8015b30:	f107 0114 	add.w	r1, r7, #20
 8015b34:	f104 0914 	add.w	r9, r4, #20
 8015b38:	f100 0e14 	add.w	lr, r0, #20
 8015b3c:	f107 0210 	add.w	r2, r7, #16
 8015b40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015b44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015b48:	46f2      	mov	sl, lr
 8015b4a:	2700      	movs	r7, #0
 8015b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015b54:	fa1f f883 	uxth.w	r8, r3
 8015b58:	fa17 f78b 	uxtah	r7, r7, fp
 8015b5c:	0c1b      	lsrs	r3, r3, #16
 8015b5e:	eba7 0808 	sub.w	r8, r7, r8
 8015b62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b6a:	fa1f f888 	uxth.w	r8, r8
 8015b6e:	141f      	asrs	r7, r3, #16
 8015b70:	454d      	cmp	r5, r9
 8015b72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b76:	f84a 3b04 	str.w	r3, [sl], #4
 8015b7a:	d8e7      	bhi.n	8015b4c <__mdiff+0x7c>
 8015b7c:	1b2b      	subs	r3, r5, r4
 8015b7e:	3b15      	subs	r3, #21
 8015b80:	f023 0303 	bic.w	r3, r3, #3
 8015b84:	3304      	adds	r3, #4
 8015b86:	3415      	adds	r4, #21
 8015b88:	42a5      	cmp	r5, r4
 8015b8a:	bf38      	it	cc
 8015b8c:	2304      	movcc	r3, #4
 8015b8e:	4419      	add	r1, r3
 8015b90:	4473      	add	r3, lr
 8015b92:	469e      	mov	lr, r3
 8015b94:	460d      	mov	r5, r1
 8015b96:	4565      	cmp	r5, ip
 8015b98:	d30e      	bcc.n	8015bb8 <__mdiff+0xe8>
 8015b9a:	f10c 0203 	add.w	r2, ip, #3
 8015b9e:	1a52      	subs	r2, r2, r1
 8015ba0:	f022 0203 	bic.w	r2, r2, #3
 8015ba4:	3903      	subs	r1, #3
 8015ba6:	458c      	cmp	ip, r1
 8015ba8:	bf38      	it	cc
 8015baa:	2200      	movcc	r2, #0
 8015bac:	441a      	add	r2, r3
 8015bae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015bb2:	b17b      	cbz	r3, 8015bd4 <__mdiff+0x104>
 8015bb4:	6106      	str	r6, [r0, #16]
 8015bb6:	e7a5      	b.n	8015b04 <__mdiff+0x34>
 8015bb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8015bbc:	fa17 f488 	uxtah	r4, r7, r8
 8015bc0:	1422      	asrs	r2, r4, #16
 8015bc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015bc6:	b2a4      	uxth	r4, r4
 8015bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015bcc:	f84e 4b04 	str.w	r4, [lr], #4
 8015bd0:	1417      	asrs	r7, r2, #16
 8015bd2:	e7e0      	b.n	8015b96 <__mdiff+0xc6>
 8015bd4:	3e01      	subs	r6, #1
 8015bd6:	e7ea      	b.n	8015bae <__mdiff+0xde>
 8015bd8:	08018ef7 	.word	0x08018ef7
 8015bdc:	08018f88 	.word	0x08018f88

08015be0 <__ulp>:
 8015be0:	b082      	sub	sp, #8
 8015be2:	ed8d 0b00 	vstr	d0, [sp]
 8015be6:	9b01      	ldr	r3, [sp, #4]
 8015be8:	4912      	ldr	r1, [pc, #72]	; (8015c34 <__ulp+0x54>)
 8015bea:	4019      	ands	r1, r3
 8015bec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015bf0:	2900      	cmp	r1, #0
 8015bf2:	dd05      	ble.n	8015c00 <__ulp+0x20>
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	460b      	mov	r3, r1
 8015bf8:	ec43 2b10 	vmov	d0, r2, r3
 8015bfc:	b002      	add	sp, #8
 8015bfe:	4770      	bx	lr
 8015c00:	4249      	negs	r1, r1
 8015c02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015c06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015c0a:	f04f 0200 	mov.w	r2, #0
 8015c0e:	f04f 0300 	mov.w	r3, #0
 8015c12:	da04      	bge.n	8015c1e <__ulp+0x3e>
 8015c14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015c18:	fa41 f300 	asr.w	r3, r1, r0
 8015c1c:	e7ec      	b.n	8015bf8 <__ulp+0x18>
 8015c1e:	f1a0 0114 	sub.w	r1, r0, #20
 8015c22:	291e      	cmp	r1, #30
 8015c24:	bfda      	itte	le
 8015c26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015c2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8015c2e:	2101      	movgt	r1, #1
 8015c30:	460a      	mov	r2, r1
 8015c32:	e7e1      	b.n	8015bf8 <__ulp+0x18>
 8015c34:	7ff00000 	.word	0x7ff00000

08015c38 <__b2d>:
 8015c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c3a:	6905      	ldr	r5, [r0, #16]
 8015c3c:	f100 0714 	add.w	r7, r0, #20
 8015c40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015c44:	1f2e      	subs	r6, r5, #4
 8015c46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f7ff fd52 	bl	80156f4 <__hi0bits>
 8015c50:	f1c0 0320 	rsb	r3, r0, #32
 8015c54:	280a      	cmp	r0, #10
 8015c56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015cd4 <__b2d+0x9c>
 8015c5a:	600b      	str	r3, [r1, #0]
 8015c5c:	dc14      	bgt.n	8015c88 <__b2d+0x50>
 8015c5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015c62:	fa24 f10e 	lsr.w	r1, r4, lr
 8015c66:	42b7      	cmp	r7, r6
 8015c68:	ea41 030c 	orr.w	r3, r1, ip
 8015c6c:	bf34      	ite	cc
 8015c6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015c72:	2100      	movcs	r1, #0
 8015c74:	3015      	adds	r0, #21
 8015c76:	fa04 f000 	lsl.w	r0, r4, r0
 8015c7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8015c7e:	ea40 0201 	orr.w	r2, r0, r1
 8015c82:	ec43 2b10 	vmov	d0, r2, r3
 8015c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c88:	42b7      	cmp	r7, r6
 8015c8a:	bf3a      	itte	cc
 8015c8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015c90:	f1a5 0608 	subcc.w	r6, r5, #8
 8015c94:	2100      	movcs	r1, #0
 8015c96:	380b      	subs	r0, #11
 8015c98:	d017      	beq.n	8015cca <__b2d+0x92>
 8015c9a:	f1c0 0c20 	rsb	ip, r0, #32
 8015c9e:	fa04 f500 	lsl.w	r5, r4, r0
 8015ca2:	42be      	cmp	r6, r7
 8015ca4:	fa21 f40c 	lsr.w	r4, r1, ip
 8015ca8:	ea45 0504 	orr.w	r5, r5, r4
 8015cac:	bf8c      	ite	hi
 8015cae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015cb2:	2400      	movls	r4, #0
 8015cb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015cb8:	fa01 f000 	lsl.w	r0, r1, r0
 8015cbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8015cc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015cc4:	ea40 0204 	orr.w	r2, r0, r4
 8015cc8:	e7db      	b.n	8015c82 <__b2d+0x4a>
 8015cca:	ea44 030c 	orr.w	r3, r4, ip
 8015cce:	460a      	mov	r2, r1
 8015cd0:	e7d7      	b.n	8015c82 <__b2d+0x4a>
 8015cd2:	bf00      	nop
 8015cd4:	3ff00000 	.word	0x3ff00000

08015cd8 <__d2b>:
 8015cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015cdc:	4689      	mov	r9, r1
 8015cde:	2101      	movs	r1, #1
 8015ce0:	ec57 6b10 	vmov	r6, r7, d0
 8015ce4:	4690      	mov	r8, r2
 8015ce6:	f7ff fc0f 	bl	8015508 <_Balloc>
 8015cea:	4604      	mov	r4, r0
 8015cec:	b930      	cbnz	r0, 8015cfc <__d2b+0x24>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	4b25      	ldr	r3, [pc, #148]	; (8015d88 <__d2b+0xb0>)
 8015cf2:	4826      	ldr	r0, [pc, #152]	; (8015d8c <__d2b+0xb4>)
 8015cf4:	f240 310a 	movw	r1, #778	; 0x30a
 8015cf8:	f7fe f884 	bl	8013e04 <__assert_func>
 8015cfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015d04:	bb35      	cbnz	r5, 8015d54 <__d2b+0x7c>
 8015d06:	2e00      	cmp	r6, #0
 8015d08:	9301      	str	r3, [sp, #4]
 8015d0a:	d028      	beq.n	8015d5e <__d2b+0x86>
 8015d0c:	4668      	mov	r0, sp
 8015d0e:	9600      	str	r6, [sp, #0]
 8015d10:	f7ff fd10 	bl	8015734 <__lo0bits>
 8015d14:	9900      	ldr	r1, [sp, #0]
 8015d16:	b300      	cbz	r0, 8015d5a <__d2b+0x82>
 8015d18:	9a01      	ldr	r2, [sp, #4]
 8015d1a:	f1c0 0320 	rsb	r3, r0, #32
 8015d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d22:	430b      	orrs	r3, r1
 8015d24:	40c2      	lsrs	r2, r0
 8015d26:	6163      	str	r3, [r4, #20]
 8015d28:	9201      	str	r2, [sp, #4]
 8015d2a:	9b01      	ldr	r3, [sp, #4]
 8015d2c:	61a3      	str	r3, [r4, #24]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	bf14      	ite	ne
 8015d32:	2202      	movne	r2, #2
 8015d34:	2201      	moveq	r2, #1
 8015d36:	6122      	str	r2, [r4, #16]
 8015d38:	b1d5      	cbz	r5, 8015d70 <__d2b+0x98>
 8015d3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015d3e:	4405      	add	r5, r0
 8015d40:	f8c9 5000 	str.w	r5, [r9]
 8015d44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d48:	f8c8 0000 	str.w	r0, [r8]
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	b003      	add	sp, #12
 8015d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d58:	e7d5      	b.n	8015d06 <__d2b+0x2e>
 8015d5a:	6161      	str	r1, [r4, #20]
 8015d5c:	e7e5      	b.n	8015d2a <__d2b+0x52>
 8015d5e:	a801      	add	r0, sp, #4
 8015d60:	f7ff fce8 	bl	8015734 <__lo0bits>
 8015d64:	9b01      	ldr	r3, [sp, #4]
 8015d66:	6163      	str	r3, [r4, #20]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	6122      	str	r2, [r4, #16]
 8015d6c:	3020      	adds	r0, #32
 8015d6e:	e7e3      	b.n	8015d38 <__d2b+0x60>
 8015d70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015d74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d78:	f8c9 0000 	str.w	r0, [r9]
 8015d7c:	6918      	ldr	r0, [r3, #16]
 8015d7e:	f7ff fcb9 	bl	80156f4 <__hi0bits>
 8015d82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015d86:	e7df      	b.n	8015d48 <__d2b+0x70>
 8015d88:	08018ef7 	.word	0x08018ef7
 8015d8c:	08018f88 	.word	0x08018f88

08015d90 <__ratio>:
 8015d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d94:	4688      	mov	r8, r1
 8015d96:	4669      	mov	r1, sp
 8015d98:	4681      	mov	r9, r0
 8015d9a:	f7ff ff4d 	bl	8015c38 <__b2d>
 8015d9e:	a901      	add	r1, sp, #4
 8015da0:	4640      	mov	r0, r8
 8015da2:	ec55 4b10 	vmov	r4, r5, d0
 8015da6:	f7ff ff47 	bl	8015c38 <__b2d>
 8015daa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015dae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015db2:	eba3 0c02 	sub.w	ip, r3, r2
 8015db6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015dba:	1a9b      	subs	r3, r3, r2
 8015dbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015dc0:	ec51 0b10 	vmov	r0, r1, d0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	bfd6      	itet	le
 8015dc8:	460a      	movle	r2, r1
 8015dca:	462a      	movgt	r2, r5
 8015dcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015dd0:	468b      	mov	fp, r1
 8015dd2:	462f      	mov	r7, r5
 8015dd4:	bfd4      	ite	le
 8015dd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015dda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015dde:	4620      	mov	r0, r4
 8015de0:	ee10 2a10 	vmov	r2, s0
 8015de4:	465b      	mov	r3, fp
 8015de6:	4639      	mov	r1, r7
 8015de8:	f7ea fd40 	bl	800086c <__aeabi_ddiv>
 8015dec:	ec41 0b10 	vmov	d0, r0, r1
 8015df0:	b003      	add	sp, #12
 8015df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015df6 <__copybits>:
 8015df6:	3901      	subs	r1, #1
 8015df8:	b570      	push	{r4, r5, r6, lr}
 8015dfa:	1149      	asrs	r1, r1, #5
 8015dfc:	6914      	ldr	r4, [r2, #16]
 8015dfe:	3101      	adds	r1, #1
 8015e00:	f102 0314 	add.w	r3, r2, #20
 8015e04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015e0c:	1f05      	subs	r5, r0, #4
 8015e0e:	42a3      	cmp	r3, r4
 8015e10:	d30c      	bcc.n	8015e2c <__copybits+0x36>
 8015e12:	1aa3      	subs	r3, r4, r2
 8015e14:	3b11      	subs	r3, #17
 8015e16:	f023 0303 	bic.w	r3, r3, #3
 8015e1a:	3211      	adds	r2, #17
 8015e1c:	42a2      	cmp	r2, r4
 8015e1e:	bf88      	it	hi
 8015e20:	2300      	movhi	r3, #0
 8015e22:	4418      	add	r0, r3
 8015e24:	2300      	movs	r3, #0
 8015e26:	4288      	cmp	r0, r1
 8015e28:	d305      	bcc.n	8015e36 <__copybits+0x40>
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8015e30:	f845 6f04 	str.w	r6, [r5, #4]!
 8015e34:	e7eb      	b.n	8015e0e <__copybits+0x18>
 8015e36:	f840 3b04 	str.w	r3, [r0], #4
 8015e3a:	e7f4      	b.n	8015e26 <__copybits+0x30>

08015e3c <__any_on>:
 8015e3c:	f100 0214 	add.w	r2, r0, #20
 8015e40:	6900      	ldr	r0, [r0, #16]
 8015e42:	114b      	asrs	r3, r1, #5
 8015e44:	4298      	cmp	r0, r3
 8015e46:	b510      	push	{r4, lr}
 8015e48:	db11      	blt.n	8015e6e <__any_on+0x32>
 8015e4a:	dd0a      	ble.n	8015e62 <__any_on+0x26>
 8015e4c:	f011 011f 	ands.w	r1, r1, #31
 8015e50:	d007      	beq.n	8015e62 <__any_on+0x26>
 8015e52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015e56:	fa24 f001 	lsr.w	r0, r4, r1
 8015e5a:	fa00 f101 	lsl.w	r1, r0, r1
 8015e5e:	428c      	cmp	r4, r1
 8015e60:	d10b      	bne.n	8015e7a <__any_on+0x3e>
 8015e62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015e66:	4293      	cmp	r3, r2
 8015e68:	d803      	bhi.n	8015e72 <__any_on+0x36>
 8015e6a:	2000      	movs	r0, #0
 8015e6c:	bd10      	pop	{r4, pc}
 8015e6e:	4603      	mov	r3, r0
 8015e70:	e7f7      	b.n	8015e62 <__any_on+0x26>
 8015e72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e76:	2900      	cmp	r1, #0
 8015e78:	d0f5      	beq.n	8015e66 <__any_on+0x2a>
 8015e7a:	2001      	movs	r0, #1
 8015e7c:	e7f6      	b.n	8015e6c <__any_on+0x30>

08015e7e <_calloc_r>:
 8015e7e:	b513      	push	{r0, r1, r4, lr}
 8015e80:	434a      	muls	r2, r1
 8015e82:	4611      	mov	r1, r2
 8015e84:	9201      	str	r2, [sp, #4]
 8015e86:	f7fb fef1 	bl	8011c6c <_malloc_r>
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	b118      	cbz	r0, 8015e96 <_calloc_r+0x18>
 8015e8e:	9a01      	ldr	r2, [sp, #4]
 8015e90:	2100      	movs	r1, #0
 8015e92:	f7fb fe93 	bl	8011bbc <memset>
 8015e96:	4620      	mov	r0, r4
 8015e98:	b002      	add	sp, #8
 8015e9a:	bd10      	pop	{r4, pc}

08015e9c <_realloc_r>:
 8015e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e9e:	4607      	mov	r7, r0
 8015ea0:	4614      	mov	r4, r2
 8015ea2:	460e      	mov	r6, r1
 8015ea4:	b921      	cbnz	r1, 8015eb0 <_realloc_r+0x14>
 8015ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015eaa:	4611      	mov	r1, r2
 8015eac:	f7fb bede 	b.w	8011c6c <_malloc_r>
 8015eb0:	b922      	cbnz	r2, 8015ebc <_realloc_r+0x20>
 8015eb2:	f7fb fe8b 	bl	8011bcc <_free_r>
 8015eb6:	4625      	mov	r5, r4
 8015eb8:	4628      	mov	r0, r5
 8015eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ebc:	f000 fe9e 	bl	8016bfc <_malloc_usable_size_r>
 8015ec0:	42a0      	cmp	r0, r4
 8015ec2:	d20f      	bcs.n	8015ee4 <_realloc_r+0x48>
 8015ec4:	4621      	mov	r1, r4
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	f7fb fed0 	bl	8011c6c <_malloc_r>
 8015ecc:	4605      	mov	r5, r0
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d0f2      	beq.n	8015eb8 <_realloc_r+0x1c>
 8015ed2:	4631      	mov	r1, r6
 8015ed4:	4622      	mov	r2, r4
 8015ed6:	f7fb fe49 	bl	8011b6c <memcpy>
 8015eda:	4631      	mov	r1, r6
 8015edc:	4638      	mov	r0, r7
 8015ede:	f7fb fe75 	bl	8011bcc <_free_r>
 8015ee2:	e7e9      	b.n	8015eb8 <_realloc_r+0x1c>
 8015ee4:	4635      	mov	r5, r6
 8015ee6:	e7e7      	b.n	8015eb8 <_realloc_r+0x1c>

08015ee8 <__ssputs_r>:
 8015ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eec:	688e      	ldr	r6, [r1, #8]
 8015eee:	429e      	cmp	r6, r3
 8015ef0:	4682      	mov	sl, r0
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	4690      	mov	r8, r2
 8015ef6:	461f      	mov	r7, r3
 8015ef8:	d838      	bhi.n	8015f6c <__ssputs_r+0x84>
 8015efa:	898a      	ldrh	r2, [r1, #12]
 8015efc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f00:	d032      	beq.n	8015f68 <__ssputs_r+0x80>
 8015f02:	6825      	ldr	r5, [r4, #0]
 8015f04:	6909      	ldr	r1, [r1, #16]
 8015f06:	eba5 0901 	sub.w	r9, r5, r1
 8015f0a:	6965      	ldr	r5, [r4, #20]
 8015f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f14:	3301      	adds	r3, #1
 8015f16:	444b      	add	r3, r9
 8015f18:	106d      	asrs	r5, r5, #1
 8015f1a:	429d      	cmp	r5, r3
 8015f1c:	bf38      	it	cc
 8015f1e:	461d      	movcc	r5, r3
 8015f20:	0553      	lsls	r3, r2, #21
 8015f22:	d531      	bpl.n	8015f88 <__ssputs_r+0xa0>
 8015f24:	4629      	mov	r1, r5
 8015f26:	f7fb fea1 	bl	8011c6c <_malloc_r>
 8015f2a:	4606      	mov	r6, r0
 8015f2c:	b950      	cbnz	r0, 8015f44 <__ssputs_r+0x5c>
 8015f2e:	230c      	movs	r3, #12
 8015f30:	f8ca 3000 	str.w	r3, [sl]
 8015f34:	89a3      	ldrh	r3, [r4, #12]
 8015f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f3a:	81a3      	strh	r3, [r4, #12]
 8015f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f44:	6921      	ldr	r1, [r4, #16]
 8015f46:	464a      	mov	r2, r9
 8015f48:	f7fb fe10 	bl	8011b6c <memcpy>
 8015f4c:	89a3      	ldrh	r3, [r4, #12]
 8015f4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f56:	81a3      	strh	r3, [r4, #12]
 8015f58:	6126      	str	r6, [r4, #16]
 8015f5a:	6165      	str	r5, [r4, #20]
 8015f5c:	444e      	add	r6, r9
 8015f5e:	eba5 0509 	sub.w	r5, r5, r9
 8015f62:	6026      	str	r6, [r4, #0]
 8015f64:	60a5      	str	r5, [r4, #8]
 8015f66:	463e      	mov	r6, r7
 8015f68:	42be      	cmp	r6, r7
 8015f6a:	d900      	bls.n	8015f6e <__ssputs_r+0x86>
 8015f6c:	463e      	mov	r6, r7
 8015f6e:	4632      	mov	r2, r6
 8015f70:	6820      	ldr	r0, [r4, #0]
 8015f72:	4641      	mov	r1, r8
 8015f74:	f7fb fe08 	bl	8011b88 <memmove>
 8015f78:	68a3      	ldr	r3, [r4, #8]
 8015f7a:	6822      	ldr	r2, [r4, #0]
 8015f7c:	1b9b      	subs	r3, r3, r6
 8015f7e:	4432      	add	r2, r6
 8015f80:	60a3      	str	r3, [r4, #8]
 8015f82:	6022      	str	r2, [r4, #0]
 8015f84:	2000      	movs	r0, #0
 8015f86:	e7db      	b.n	8015f40 <__ssputs_r+0x58>
 8015f88:	462a      	mov	r2, r5
 8015f8a:	f7ff ff87 	bl	8015e9c <_realloc_r>
 8015f8e:	4606      	mov	r6, r0
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1e1      	bne.n	8015f58 <__ssputs_r+0x70>
 8015f94:	6921      	ldr	r1, [r4, #16]
 8015f96:	4650      	mov	r0, sl
 8015f98:	f7fb fe18 	bl	8011bcc <_free_r>
 8015f9c:	e7c7      	b.n	8015f2e <__ssputs_r+0x46>
	...

08015fa0 <_svfiprintf_r>:
 8015fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa4:	4698      	mov	r8, r3
 8015fa6:	898b      	ldrh	r3, [r1, #12]
 8015fa8:	061b      	lsls	r3, r3, #24
 8015faa:	b09d      	sub	sp, #116	; 0x74
 8015fac:	4607      	mov	r7, r0
 8015fae:	460d      	mov	r5, r1
 8015fb0:	4614      	mov	r4, r2
 8015fb2:	d50e      	bpl.n	8015fd2 <_svfiprintf_r+0x32>
 8015fb4:	690b      	ldr	r3, [r1, #16]
 8015fb6:	b963      	cbnz	r3, 8015fd2 <_svfiprintf_r+0x32>
 8015fb8:	2140      	movs	r1, #64	; 0x40
 8015fba:	f7fb fe57 	bl	8011c6c <_malloc_r>
 8015fbe:	6028      	str	r0, [r5, #0]
 8015fc0:	6128      	str	r0, [r5, #16]
 8015fc2:	b920      	cbnz	r0, 8015fce <_svfiprintf_r+0x2e>
 8015fc4:	230c      	movs	r3, #12
 8015fc6:	603b      	str	r3, [r7, #0]
 8015fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fcc:	e0d1      	b.n	8016172 <_svfiprintf_r+0x1d2>
 8015fce:	2340      	movs	r3, #64	; 0x40
 8015fd0:	616b      	str	r3, [r5, #20]
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8015fd6:	2320      	movs	r3, #32
 8015fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fe0:	2330      	movs	r3, #48	; 0x30
 8015fe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801618c <_svfiprintf_r+0x1ec>
 8015fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015fea:	f04f 0901 	mov.w	r9, #1
 8015fee:	4623      	mov	r3, r4
 8015ff0:	469a      	mov	sl, r3
 8015ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ff6:	b10a      	cbz	r2, 8015ffc <_svfiprintf_r+0x5c>
 8015ff8:	2a25      	cmp	r2, #37	; 0x25
 8015ffa:	d1f9      	bne.n	8015ff0 <_svfiprintf_r+0x50>
 8015ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8016000:	d00b      	beq.n	801601a <_svfiprintf_r+0x7a>
 8016002:	465b      	mov	r3, fp
 8016004:	4622      	mov	r2, r4
 8016006:	4629      	mov	r1, r5
 8016008:	4638      	mov	r0, r7
 801600a:	f7ff ff6d 	bl	8015ee8 <__ssputs_r>
 801600e:	3001      	adds	r0, #1
 8016010:	f000 80aa 	beq.w	8016168 <_svfiprintf_r+0x1c8>
 8016014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016016:	445a      	add	r2, fp
 8016018:	9209      	str	r2, [sp, #36]	; 0x24
 801601a:	f89a 3000 	ldrb.w	r3, [sl]
 801601e:	2b00      	cmp	r3, #0
 8016020:	f000 80a2 	beq.w	8016168 <_svfiprintf_r+0x1c8>
 8016024:	2300      	movs	r3, #0
 8016026:	f04f 32ff 	mov.w	r2, #4294967295
 801602a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801602e:	f10a 0a01 	add.w	sl, sl, #1
 8016032:	9304      	str	r3, [sp, #16]
 8016034:	9307      	str	r3, [sp, #28]
 8016036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801603a:	931a      	str	r3, [sp, #104]	; 0x68
 801603c:	4654      	mov	r4, sl
 801603e:	2205      	movs	r2, #5
 8016040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016044:	4851      	ldr	r0, [pc, #324]	; (801618c <_svfiprintf_r+0x1ec>)
 8016046:	f7ea f8db 	bl	8000200 <memchr>
 801604a:	9a04      	ldr	r2, [sp, #16]
 801604c:	b9d8      	cbnz	r0, 8016086 <_svfiprintf_r+0xe6>
 801604e:	06d0      	lsls	r0, r2, #27
 8016050:	bf44      	itt	mi
 8016052:	2320      	movmi	r3, #32
 8016054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016058:	0711      	lsls	r1, r2, #28
 801605a:	bf44      	itt	mi
 801605c:	232b      	movmi	r3, #43	; 0x2b
 801605e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016062:	f89a 3000 	ldrb.w	r3, [sl]
 8016066:	2b2a      	cmp	r3, #42	; 0x2a
 8016068:	d015      	beq.n	8016096 <_svfiprintf_r+0xf6>
 801606a:	9a07      	ldr	r2, [sp, #28]
 801606c:	4654      	mov	r4, sl
 801606e:	2000      	movs	r0, #0
 8016070:	f04f 0c0a 	mov.w	ip, #10
 8016074:	4621      	mov	r1, r4
 8016076:	f811 3b01 	ldrb.w	r3, [r1], #1
 801607a:	3b30      	subs	r3, #48	; 0x30
 801607c:	2b09      	cmp	r3, #9
 801607e:	d94e      	bls.n	801611e <_svfiprintf_r+0x17e>
 8016080:	b1b0      	cbz	r0, 80160b0 <_svfiprintf_r+0x110>
 8016082:	9207      	str	r2, [sp, #28]
 8016084:	e014      	b.n	80160b0 <_svfiprintf_r+0x110>
 8016086:	eba0 0308 	sub.w	r3, r0, r8
 801608a:	fa09 f303 	lsl.w	r3, r9, r3
 801608e:	4313      	orrs	r3, r2
 8016090:	9304      	str	r3, [sp, #16]
 8016092:	46a2      	mov	sl, r4
 8016094:	e7d2      	b.n	801603c <_svfiprintf_r+0x9c>
 8016096:	9b03      	ldr	r3, [sp, #12]
 8016098:	1d19      	adds	r1, r3, #4
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	9103      	str	r1, [sp, #12]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	bfbb      	ittet	lt
 80160a2:	425b      	neglt	r3, r3
 80160a4:	f042 0202 	orrlt.w	r2, r2, #2
 80160a8:	9307      	strge	r3, [sp, #28]
 80160aa:	9307      	strlt	r3, [sp, #28]
 80160ac:	bfb8      	it	lt
 80160ae:	9204      	strlt	r2, [sp, #16]
 80160b0:	7823      	ldrb	r3, [r4, #0]
 80160b2:	2b2e      	cmp	r3, #46	; 0x2e
 80160b4:	d10c      	bne.n	80160d0 <_svfiprintf_r+0x130>
 80160b6:	7863      	ldrb	r3, [r4, #1]
 80160b8:	2b2a      	cmp	r3, #42	; 0x2a
 80160ba:	d135      	bne.n	8016128 <_svfiprintf_r+0x188>
 80160bc:	9b03      	ldr	r3, [sp, #12]
 80160be:	1d1a      	adds	r2, r3, #4
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	9203      	str	r2, [sp, #12]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	bfb8      	it	lt
 80160c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80160cc:	3402      	adds	r4, #2
 80160ce:	9305      	str	r3, [sp, #20]
 80160d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801619c <_svfiprintf_r+0x1fc>
 80160d4:	7821      	ldrb	r1, [r4, #0]
 80160d6:	2203      	movs	r2, #3
 80160d8:	4650      	mov	r0, sl
 80160da:	f7ea f891 	bl	8000200 <memchr>
 80160de:	b140      	cbz	r0, 80160f2 <_svfiprintf_r+0x152>
 80160e0:	2340      	movs	r3, #64	; 0x40
 80160e2:	eba0 000a 	sub.w	r0, r0, sl
 80160e6:	fa03 f000 	lsl.w	r0, r3, r0
 80160ea:	9b04      	ldr	r3, [sp, #16]
 80160ec:	4303      	orrs	r3, r0
 80160ee:	3401      	adds	r4, #1
 80160f0:	9304      	str	r3, [sp, #16]
 80160f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160f6:	4826      	ldr	r0, [pc, #152]	; (8016190 <_svfiprintf_r+0x1f0>)
 80160f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80160fc:	2206      	movs	r2, #6
 80160fe:	f7ea f87f 	bl	8000200 <memchr>
 8016102:	2800      	cmp	r0, #0
 8016104:	d038      	beq.n	8016178 <_svfiprintf_r+0x1d8>
 8016106:	4b23      	ldr	r3, [pc, #140]	; (8016194 <_svfiprintf_r+0x1f4>)
 8016108:	bb1b      	cbnz	r3, 8016152 <_svfiprintf_r+0x1b2>
 801610a:	9b03      	ldr	r3, [sp, #12]
 801610c:	3307      	adds	r3, #7
 801610e:	f023 0307 	bic.w	r3, r3, #7
 8016112:	3308      	adds	r3, #8
 8016114:	9303      	str	r3, [sp, #12]
 8016116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016118:	4433      	add	r3, r6
 801611a:	9309      	str	r3, [sp, #36]	; 0x24
 801611c:	e767      	b.n	8015fee <_svfiprintf_r+0x4e>
 801611e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016122:	460c      	mov	r4, r1
 8016124:	2001      	movs	r0, #1
 8016126:	e7a5      	b.n	8016074 <_svfiprintf_r+0xd4>
 8016128:	2300      	movs	r3, #0
 801612a:	3401      	adds	r4, #1
 801612c:	9305      	str	r3, [sp, #20]
 801612e:	4619      	mov	r1, r3
 8016130:	f04f 0c0a 	mov.w	ip, #10
 8016134:	4620      	mov	r0, r4
 8016136:	f810 2b01 	ldrb.w	r2, [r0], #1
 801613a:	3a30      	subs	r2, #48	; 0x30
 801613c:	2a09      	cmp	r2, #9
 801613e:	d903      	bls.n	8016148 <_svfiprintf_r+0x1a8>
 8016140:	2b00      	cmp	r3, #0
 8016142:	d0c5      	beq.n	80160d0 <_svfiprintf_r+0x130>
 8016144:	9105      	str	r1, [sp, #20]
 8016146:	e7c3      	b.n	80160d0 <_svfiprintf_r+0x130>
 8016148:	fb0c 2101 	mla	r1, ip, r1, r2
 801614c:	4604      	mov	r4, r0
 801614e:	2301      	movs	r3, #1
 8016150:	e7f0      	b.n	8016134 <_svfiprintf_r+0x194>
 8016152:	ab03      	add	r3, sp, #12
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	462a      	mov	r2, r5
 8016158:	4b0f      	ldr	r3, [pc, #60]	; (8016198 <_svfiprintf_r+0x1f8>)
 801615a:	a904      	add	r1, sp, #16
 801615c:	4638      	mov	r0, r7
 801615e:	f7fb fe7f 	bl	8011e60 <_printf_float>
 8016162:	1c42      	adds	r2, r0, #1
 8016164:	4606      	mov	r6, r0
 8016166:	d1d6      	bne.n	8016116 <_svfiprintf_r+0x176>
 8016168:	89ab      	ldrh	r3, [r5, #12]
 801616a:	065b      	lsls	r3, r3, #25
 801616c:	f53f af2c 	bmi.w	8015fc8 <_svfiprintf_r+0x28>
 8016170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016172:	b01d      	add	sp, #116	; 0x74
 8016174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016178:	ab03      	add	r3, sp, #12
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	462a      	mov	r2, r5
 801617e:	4b06      	ldr	r3, [pc, #24]	; (8016198 <_svfiprintf_r+0x1f8>)
 8016180:	a904      	add	r1, sp, #16
 8016182:	4638      	mov	r0, r7
 8016184:	f7fc f910 	bl	80123a8 <_printf_i>
 8016188:	e7eb      	b.n	8016162 <_svfiprintf_r+0x1c2>
 801618a:	bf00      	nop
 801618c:	080190e4 	.word	0x080190e4
 8016190:	080190ee 	.word	0x080190ee
 8016194:	08011e61 	.word	0x08011e61
 8016198:	08015ee9 	.word	0x08015ee9
 801619c:	080190ea 	.word	0x080190ea

080161a0 <_sungetc_r>:
 80161a0:	b538      	push	{r3, r4, r5, lr}
 80161a2:	1c4b      	adds	r3, r1, #1
 80161a4:	4614      	mov	r4, r2
 80161a6:	d103      	bne.n	80161b0 <_sungetc_r+0x10>
 80161a8:	f04f 35ff 	mov.w	r5, #4294967295
 80161ac:	4628      	mov	r0, r5
 80161ae:	bd38      	pop	{r3, r4, r5, pc}
 80161b0:	8993      	ldrh	r3, [r2, #12]
 80161b2:	f023 0320 	bic.w	r3, r3, #32
 80161b6:	8193      	strh	r3, [r2, #12]
 80161b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161ba:	6852      	ldr	r2, [r2, #4]
 80161bc:	b2cd      	uxtb	r5, r1
 80161be:	b18b      	cbz	r3, 80161e4 <_sungetc_r+0x44>
 80161c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80161c2:	4293      	cmp	r3, r2
 80161c4:	dd08      	ble.n	80161d8 <_sungetc_r+0x38>
 80161c6:	6823      	ldr	r3, [r4, #0]
 80161c8:	1e5a      	subs	r2, r3, #1
 80161ca:	6022      	str	r2, [r4, #0]
 80161cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80161d0:	6863      	ldr	r3, [r4, #4]
 80161d2:	3301      	adds	r3, #1
 80161d4:	6063      	str	r3, [r4, #4]
 80161d6:	e7e9      	b.n	80161ac <_sungetc_r+0xc>
 80161d8:	4621      	mov	r1, r4
 80161da:	f000 fca5 	bl	8016b28 <__submore>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d0f1      	beq.n	80161c6 <_sungetc_r+0x26>
 80161e2:	e7e1      	b.n	80161a8 <_sungetc_r+0x8>
 80161e4:	6921      	ldr	r1, [r4, #16]
 80161e6:	6823      	ldr	r3, [r4, #0]
 80161e8:	b151      	cbz	r1, 8016200 <_sungetc_r+0x60>
 80161ea:	4299      	cmp	r1, r3
 80161ec:	d208      	bcs.n	8016200 <_sungetc_r+0x60>
 80161ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80161f2:	42a9      	cmp	r1, r5
 80161f4:	d104      	bne.n	8016200 <_sungetc_r+0x60>
 80161f6:	3b01      	subs	r3, #1
 80161f8:	3201      	adds	r2, #1
 80161fa:	6023      	str	r3, [r4, #0]
 80161fc:	6062      	str	r2, [r4, #4]
 80161fe:	e7d5      	b.n	80161ac <_sungetc_r+0xc>
 8016200:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016208:	6363      	str	r3, [r4, #52]	; 0x34
 801620a:	2303      	movs	r3, #3
 801620c:	63a3      	str	r3, [r4, #56]	; 0x38
 801620e:	4623      	mov	r3, r4
 8016210:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016214:	6023      	str	r3, [r4, #0]
 8016216:	2301      	movs	r3, #1
 8016218:	e7dc      	b.n	80161d4 <_sungetc_r+0x34>

0801621a <__ssrefill_r>:
 801621a:	b510      	push	{r4, lr}
 801621c:	460c      	mov	r4, r1
 801621e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016220:	b169      	cbz	r1, 801623e <__ssrefill_r+0x24>
 8016222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016226:	4299      	cmp	r1, r3
 8016228:	d001      	beq.n	801622e <__ssrefill_r+0x14>
 801622a:	f7fb fccf 	bl	8011bcc <_free_r>
 801622e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016230:	6063      	str	r3, [r4, #4]
 8016232:	2000      	movs	r0, #0
 8016234:	6360      	str	r0, [r4, #52]	; 0x34
 8016236:	b113      	cbz	r3, 801623e <__ssrefill_r+0x24>
 8016238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801623a:	6023      	str	r3, [r4, #0]
 801623c:	bd10      	pop	{r4, pc}
 801623e:	6923      	ldr	r3, [r4, #16]
 8016240:	6023      	str	r3, [r4, #0]
 8016242:	2300      	movs	r3, #0
 8016244:	6063      	str	r3, [r4, #4]
 8016246:	89a3      	ldrh	r3, [r4, #12]
 8016248:	f043 0320 	orr.w	r3, r3, #32
 801624c:	81a3      	strh	r3, [r4, #12]
 801624e:	f04f 30ff 	mov.w	r0, #4294967295
 8016252:	e7f3      	b.n	801623c <__ssrefill_r+0x22>

08016254 <__ssvfiscanf_r>:
 8016254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016258:	460c      	mov	r4, r1
 801625a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801625e:	2100      	movs	r1, #0
 8016260:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016264:	49b2      	ldr	r1, [pc, #712]	; (8016530 <__ssvfiscanf_r+0x2dc>)
 8016266:	91a0      	str	r1, [sp, #640]	; 0x280
 8016268:	f10d 0804 	add.w	r8, sp, #4
 801626c:	49b1      	ldr	r1, [pc, #708]	; (8016534 <__ssvfiscanf_r+0x2e0>)
 801626e:	4fb2      	ldr	r7, [pc, #712]	; (8016538 <__ssvfiscanf_r+0x2e4>)
 8016270:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801653c <__ssvfiscanf_r+0x2e8>
 8016274:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016278:	4606      	mov	r6, r0
 801627a:	91a1      	str	r1, [sp, #644]	; 0x284
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	f892 a000 	ldrb.w	sl, [r2]
 8016282:	f1ba 0f00 	cmp.w	sl, #0
 8016286:	f000 8151 	beq.w	801652c <__ssvfiscanf_r+0x2d8>
 801628a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801628e:	f013 0308 	ands.w	r3, r3, #8
 8016292:	f102 0501 	add.w	r5, r2, #1
 8016296:	d019      	beq.n	80162cc <__ssvfiscanf_r+0x78>
 8016298:	6863      	ldr	r3, [r4, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	dd0f      	ble.n	80162be <__ssvfiscanf_r+0x6a>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	781a      	ldrb	r2, [r3, #0]
 80162a2:	5cba      	ldrb	r2, [r7, r2]
 80162a4:	0712      	lsls	r2, r2, #28
 80162a6:	d401      	bmi.n	80162ac <__ssvfiscanf_r+0x58>
 80162a8:	462a      	mov	r2, r5
 80162aa:	e7e8      	b.n	801627e <__ssvfiscanf_r+0x2a>
 80162ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80162ae:	3201      	adds	r2, #1
 80162b0:	9245      	str	r2, [sp, #276]	; 0x114
 80162b2:	6862      	ldr	r2, [r4, #4]
 80162b4:	3301      	adds	r3, #1
 80162b6:	3a01      	subs	r2, #1
 80162b8:	6062      	str	r2, [r4, #4]
 80162ba:	6023      	str	r3, [r4, #0]
 80162bc:	e7ec      	b.n	8016298 <__ssvfiscanf_r+0x44>
 80162be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80162c0:	4621      	mov	r1, r4
 80162c2:	4630      	mov	r0, r6
 80162c4:	4798      	blx	r3
 80162c6:	2800      	cmp	r0, #0
 80162c8:	d0e9      	beq.n	801629e <__ssvfiscanf_r+0x4a>
 80162ca:	e7ed      	b.n	80162a8 <__ssvfiscanf_r+0x54>
 80162cc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80162d0:	f040 8083 	bne.w	80163da <__ssvfiscanf_r+0x186>
 80162d4:	9341      	str	r3, [sp, #260]	; 0x104
 80162d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80162d8:	7853      	ldrb	r3, [r2, #1]
 80162da:	2b2a      	cmp	r3, #42	; 0x2a
 80162dc:	bf02      	ittt	eq
 80162de:	2310      	moveq	r3, #16
 80162e0:	1c95      	addeq	r5, r2, #2
 80162e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80162e4:	220a      	movs	r2, #10
 80162e6:	46ab      	mov	fp, r5
 80162e8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80162ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80162f0:	2b09      	cmp	r3, #9
 80162f2:	d91d      	bls.n	8016330 <__ssvfiscanf_r+0xdc>
 80162f4:	4891      	ldr	r0, [pc, #580]	; (801653c <__ssvfiscanf_r+0x2e8>)
 80162f6:	2203      	movs	r2, #3
 80162f8:	f7e9 ff82 	bl	8000200 <memchr>
 80162fc:	b140      	cbz	r0, 8016310 <__ssvfiscanf_r+0xbc>
 80162fe:	2301      	movs	r3, #1
 8016300:	eba0 0009 	sub.w	r0, r0, r9
 8016304:	fa03 f000 	lsl.w	r0, r3, r0
 8016308:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801630a:	4318      	orrs	r0, r3
 801630c:	9041      	str	r0, [sp, #260]	; 0x104
 801630e:	465d      	mov	r5, fp
 8016310:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016314:	2b78      	cmp	r3, #120	; 0x78
 8016316:	d806      	bhi.n	8016326 <__ssvfiscanf_r+0xd2>
 8016318:	2b57      	cmp	r3, #87	; 0x57
 801631a:	d810      	bhi.n	801633e <__ssvfiscanf_r+0xea>
 801631c:	2b25      	cmp	r3, #37	; 0x25
 801631e:	d05c      	beq.n	80163da <__ssvfiscanf_r+0x186>
 8016320:	d856      	bhi.n	80163d0 <__ssvfiscanf_r+0x17c>
 8016322:	2b00      	cmp	r3, #0
 8016324:	d074      	beq.n	8016410 <__ssvfiscanf_r+0x1bc>
 8016326:	2303      	movs	r3, #3
 8016328:	9347      	str	r3, [sp, #284]	; 0x11c
 801632a:	230a      	movs	r3, #10
 801632c:	9342      	str	r3, [sp, #264]	; 0x108
 801632e:	e081      	b.n	8016434 <__ssvfiscanf_r+0x1e0>
 8016330:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016332:	fb02 1303 	mla	r3, r2, r3, r1
 8016336:	3b30      	subs	r3, #48	; 0x30
 8016338:	9343      	str	r3, [sp, #268]	; 0x10c
 801633a:	465d      	mov	r5, fp
 801633c:	e7d3      	b.n	80162e6 <__ssvfiscanf_r+0x92>
 801633e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016342:	2a20      	cmp	r2, #32
 8016344:	d8ef      	bhi.n	8016326 <__ssvfiscanf_r+0xd2>
 8016346:	a101      	add	r1, pc, #4	; (adr r1, 801634c <__ssvfiscanf_r+0xf8>)
 8016348:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801634c:	0801641f 	.word	0x0801641f
 8016350:	08016327 	.word	0x08016327
 8016354:	08016327 	.word	0x08016327
 8016358:	0801647d 	.word	0x0801647d
 801635c:	08016327 	.word	0x08016327
 8016360:	08016327 	.word	0x08016327
 8016364:	08016327 	.word	0x08016327
 8016368:	08016327 	.word	0x08016327
 801636c:	08016327 	.word	0x08016327
 8016370:	08016327 	.word	0x08016327
 8016374:	08016327 	.word	0x08016327
 8016378:	08016493 	.word	0x08016493
 801637c:	08016469 	.word	0x08016469
 8016380:	080163d7 	.word	0x080163d7
 8016384:	080163d7 	.word	0x080163d7
 8016388:	080163d7 	.word	0x080163d7
 801638c:	08016327 	.word	0x08016327
 8016390:	0801646d 	.word	0x0801646d
 8016394:	08016327 	.word	0x08016327
 8016398:	08016327 	.word	0x08016327
 801639c:	08016327 	.word	0x08016327
 80163a0:	08016327 	.word	0x08016327
 80163a4:	080164a3 	.word	0x080164a3
 80163a8:	08016475 	.word	0x08016475
 80163ac:	08016417 	.word	0x08016417
 80163b0:	08016327 	.word	0x08016327
 80163b4:	08016327 	.word	0x08016327
 80163b8:	0801649f 	.word	0x0801649f
 80163bc:	08016327 	.word	0x08016327
 80163c0:	08016469 	.word	0x08016469
 80163c4:	08016327 	.word	0x08016327
 80163c8:	08016327 	.word	0x08016327
 80163cc:	0801641f 	.word	0x0801641f
 80163d0:	3b45      	subs	r3, #69	; 0x45
 80163d2:	2b02      	cmp	r3, #2
 80163d4:	d8a7      	bhi.n	8016326 <__ssvfiscanf_r+0xd2>
 80163d6:	2305      	movs	r3, #5
 80163d8:	e02b      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 80163da:	6863      	ldr	r3, [r4, #4]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	dd0d      	ble.n	80163fc <__ssvfiscanf_r+0x1a8>
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	781a      	ldrb	r2, [r3, #0]
 80163e4:	4552      	cmp	r2, sl
 80163e6:	f040 80a1 	bne.w	801652c <__ssvfiscanf_r+0x2d8>
 80163ea:	3301      	adds	r3, #1
 80163ec:	6862      	ldr	r2, [r4, #4]
 80163ee:	6023      	str	r3, [r4, #0]
 80163f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80163f2:	3a01      	subs	r2, #1
 80163f4:	3301      	adds	r3, #1
 80163f6:	6062      	str	r2, [r4, #4]
 80163f8:	9345      	str	r3, [sp, #276]	; 0x114
 80163fa:	e755      	b.n	80162a8 <__ssvfiscanf_r+0x54>
 80163fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80163fe:	4621      	mov	r1, r4
 8016400:	4630      	mov	r0, r6
 8016402:	4798      	blx	r3
 8016404:	2800      	cmp	r0, #0
 8016406:	d0eb      	beq.n	80163e0 <__ssvfiscanf_r+0x18c>
 8016408:	9844      	ldr	r0, [sp, #272]	; 0x110
 801640a:	2800      	cmp	r0, #0
 801640c:	f040 8084 	bne.w	8016518 <__ssvfiscanf_r+0x2c4>
 8016410:	f04f 30ff 	mov.w	r0, #4294967295
 8016414:	e086      	b.n	8016524 <__ssvfiscanf_r+0x2d0>
 8016416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016418:	f042 0220 	orr.w	r2, r2, #32
 801641c:	9241      	str	r2, [sp, #260]	; 0x104
 801641e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016424:	9241      	str	r2, [sp, #260]	; 0x104
 8016426:	2210      	movs	r2, #16
 8016428:	2b6f      	cmp	r3, #111	; 0x6f
 801642a:	9242      	str	r2, [sp, #264]	; 0x108
 801642c:	bf34      	ite	cc
 801642e:	2303      	movcc	r3, #3
 8016430:	2304      	movcs	r3, #4
 8016432:	9347      	str	r3, [sp, #284]	; 0x11c
 8016434:	6863      	ldr	r3, [r4, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	dd41      	ble.n	80164be <__ssvfiscanf_r+0x26a>
 801643a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801643c:	0659      	lsls	r1, r3, #25
 801643e:	d404      	bmi.n	801644a <__ssvfiscanf_r+0x1f6>
 8016440:	6823      	ldr	r3, [r4, #0]
 8016442:	781a      	ldrb	r2, [r3, #0]
 8016444:	5cba      	ldrb	r2, [r7, r2]
 8016446:	0712      	lsls	r2, r2, #28
 8016448:	d440      	bmi.n	80164cc <__ssvfiscanf_r+0x278>
 801644a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801644c:	2b02      	cmp	r3, #2
 801644e:	dc4f      	bgt.n	80164f0 <__ssvfiscanf_r+0x29c>
 8016450:	466b      	mov	r3, sp
 8016452:	4622      	mov	r2, r4
 8016454:	a941      	add	r1, sp, #260	; 0x104
 8016456:	4630      	mov	r0, r6
 8016458:	f000 f9ce 	bl	80167f8 <_scanf_chars>
 801645c:	2801      	cmp	r0, #1
 801645e:	d065      	beq.n	801652c <__ssvfiscanf_r+0x2d8>
 8016460:	2802      	cmp	r0, #2
 8016462:	f47f af21 	bne.w	80162a8 <__ssvfiscanf_r+0x54>
 8016466:	e7cf      	b.n	8016408 <__ssvfiscanf_r+0x1b4>
 8016468:	220a      	movs	r2, #10
 801646a:	e7dd      	b.n	8016428 <__ssvfiscanf_r+0x1d4>
 801646c:	2300      	movs	r3, #0
 801646e:	9342      	str	r3, [sp, #264]	; 0x108
 8016470:	2303      	movs	r3, #3
 8016472:	e7de      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 8016474:	2308      	movs	r3, #8
 8016476:	9342      	str	r3, [sp, #264]	; 0x108
 8016478:	2304      	movs	r3, #4
 801647a:	e7da      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 801647c:	4629      	mov	r1, r5
 801647e:	4640      	mov	r0, r8
 8016480:	f000 fb18 	bl	8016ab4 <__sccl>
 8016484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801648a:	9341      	str	r3, [sp, #260]	; 0x104
 801648c:	4605      	mov	r5, r0
 801648e:	2301      	movs	r3, #1
 8016490:	e7cf      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 8016492:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016498:	9341      	str	r3, [sp, #260]	; 0x104
 801649a:	2300      	movs	r3, #0
 801649c:	e7c9      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 801649e:	2302      	movs	r3, #2
 80164a0:	e7c7      	b.n	8016432 <__ssvfiscanf_r+0x1de>
 80164a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80164a4:	06c3      	lsls	r3, r0, #27
 80164a6:	f53f aeff 	bmi.w	80162a8 <__ssvfiscanf_r+0x54>
 80164aa:	9b00      	ldr	r3, [sp, #0]
 80164ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164ae:	1d19      	adds	r1, r3, #4
 80164b0:	9100      	str	r1, [sp, #0]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	07c0      	lsls	r0, r0, #31
 80164b6:	bf4c      	ite	mi
 80164b8:	801a      	strhmi	r2, [r3, #0]
 80164ba:	601a      	strpl	r2, [r3, #0]
 80164bc:	e6f4      	b.n	80162a8 <__ssvfiscanf_r+0x54>
 80164be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164c0:	4621      	mov	r1, r4
 80164c2:	4630      	mov	r0, r6
 80164c4:	4798      	blx	r3
 80164c6:	2800      	cmp	r0, #0
 80164c8:	d0b7      	beq.n	801643a <__ssvfiscanf_r+0x1e6>
 80164ca:	e79d      	b.n	8016408 <__ssvfiscanf_r+0x1b4>
 80164cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164ce:	3201      	adds	r2, #1
 80164d0:	9245      	str	r2, [sp, #276]	; 0x114
 80164d2:	6862      	ldr	r2, [r4, #4]
 80164d4:	3a01      	subs	r2, #1
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	6062      	str	r2, [r4, #4]
 80164da:	dd02      	ble.n	80164e2 <__ssvfiscanf_r+0x28e>
 80164dc:	3301      	adds	r3, #1
 80164de:	6023      	str	r3, [r4, #0]
 80164e0:	e7ae      	b.n	8016440 <__ssvfiscanf_r+0x1ec>
 80164e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164e4:	4621      	mov	r1, r4
 80164e6:	4630      	mov	r0, r6
 80164e8:	4798      	blx	r3
 80164ea:	2800      	cmp	r0, #0
 80164ec:	d0a8      	beq.n	8016440 <__ssvfiscanf_r+0x1ec>
 80164ee:	e78b      	b.n	8016408 <__ssvfiscanf_r+0x1b4>
 80164f0:	2b04      	cmp	r3, #4
 80164f2:	dc06      	bgt.n	8016502 <__ssvfiscanf_r+0x2ae>
 80164f4:	466b      	mov	r3, sp
 80164f6:	4622      	mov	r2, r4
 80164f8:	a941      	add	r1, sp, #260	; 0x104
 80164fa:	4630      	mov	r0, r6
 80164fc:	f000 f9d4 	bl	80168a8 <_scanf_i>
 8016500:	e7ac      	b.n	801645c <__ssvfiscanf_r+0x208>
 8016502:	4b0f      	ldr	r3, [pc, #60]	; (8016540 <__ssvfiscanf_r+0x2ec>)
 8016504:	2b00      	cmp	r3, #0
 8016506:	f43f aecf 	beq.w	80162a8 <__ssvfiscanf_r+0x54>
 801650a:	466b      	mov	r3, sp
 801650c:	4622      	mov	r2, r4
 801650e:	a941      	add	r1, sp, #260	; 0x104
 8016510:	4630      	mov	r0, r6
 8016512:	f7fc f86f 	bl	80125f4 <_scanf_float>
 8016516:	e7a1      	b.n	801645c <__ssvfiscanf_r+0x208>
 8016518:	89a3      	ldrh	r3, [r4, #12]
 801651a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801651e:	bf18      	it	ne
 8016520:	f04f 30ff 	movne.w	r0, #4294967295
 8016524:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801652e:	e7f9      	b.n	8016524 <__ssvfiscanf_r+0x2d0>
 8016530:	080161a1 	.word	0x080161a1
 8016534:	0801621b 	.word	0x0801621b
 8016538:	08018c49 	.word	0x08018c49
 801653c:	080190ea 	.word	0x080190ea
 8016540:	080125f5 	.word	0x080125f5

08016544 <__sfputc_r>:
 8016544:	6893      	ldr	r3, [r2, #8]
 8016546:	3b01      	subs	r3, #1
 8016548:	2b00      	cmp	r3, #0
 801654a:	b410      	push	{r4}
 801654c:	6093      	str	r3, [r2, #8]
 801654e:	da08      	bge.n	8016562 <__sfputc_r+0x1e>
 8016550:	6994      	ldr	r4, [r2, #24]
 8016552:	42a3      	cmp	r3, r4
 8016554:	db01      	blt.n	801655a <__sfputc_r+0x16>
 8016556:	290a      	cmp	r1, #10
 8016558:	d103      	bne.n	8016562 <__sfputc_r+0x1e>
 801655a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801655e:	f7fd bb7f 	b.w	8013c60 <__swbuf_r>
 8016562:	6813      	ldr	r3, [r2, #0]
 8016564:	1c58      	adds	r0, r3, #1
 8016566:	6010      	str	r0, [r2, #0]
 8016568:	7019      	strb	r1, [r3, #0]
 801656a:	4608      	mov	r0, r1
 801656c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016570:	4770      	bx	lr

08016572 <__sfputs_r>:
 8016572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016574:	4606      	mov	r6, r0
 8016576:	460f      	mov	r7, r1
 8016578:	4614      	mov	r4, r2
 801657a:	18d5      	adds	r5, r2, r3
 801657c:	42ac      	cmp	r4, r5
 801657e:	d101      	bne.n	8016584 <__sfputs_r+0x12>
 8016580:	2000      	movs	r0, #0
 8016582:	e007      	b.n	8016594 <__sfputs_r+0x22>
 8016584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016588:	463a      	mov	r2, r7
 801658a:	4630      	mov	r0, r6
 801658c:	f7ff ffda 	bl	8016544 <__sfputc_r>
 8016590:	1c43      	adds	r3, r0, #1
 8016592:	d1f3      	bne.n	801657c <__sfputs_r+0xa>
 8016594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016598 <_vfiprintf_r>:
 8016598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801659c:	460d      	mov	r5, r1
 801659e:	b09d      	sub	sp, #116	; 0x74
 80165a0:	4614      	mov	r4, r2
 80165a2:	4698      	mov	r8, r3
 80165a4:	4606      	mov	r6, r0
 80165a6:	b118      	cbz	r0, 80165b0 <_vfiprintf_r+0x18>
 80165a8:	6983      	ldr	r3, [r0, #24]
 80165aa:	b90b      	cbnz	r3, 80165b0 <_vfiprintf_r+0x18>
 80165ac:	f7fb fa10 	bl	80119d0 <__sinit>
 80165b0:	4b89      	ldr	r3, [pc, #548]	; (80167d8 <_vfiprintf_r+0x240>)
 80165b2:	429d      	cmp	r5, r3
 80165b4:	d11b      	bne.n	80165ee <_vfiprintf_r+0x56>
 80165b6:	6875      	ldr	r5, [r6, #4]
 80165b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80165ba:	07d9      	lsls	r1, r3, #31
 80165bc:	d405      	bmi.n	80165ca <_vfiprintf_r+0x32>
 80165be:	89ab      	ldrh	r3, [r5, #12]
 80165c0:	059a      	lsls	r2, r3, #22
 80165c2:	d402      	bmi.n	80165ca <_vfiprintf_r+0x32>
 80165c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80165c6:	f7fb fac6 	bl	8011b56 <__retarget_lock_acquire_recursive>
 80165ca:	89ab      	ldrh	r3, [r5, #12]
 80165cc:	071b      	lsls	r3, r3, #28
 80165ce:	d501      	bpl.n	80165d4 <_vfiprintf_r+0x3c>
 80165d0:	692b      	ldr	r3, [r5, #16]
 80165d2:	b9eb      	cbnz	r3, 8016610 <_vfiprintf_r+0x78>
 80165d4:	4629      	mov	r1, r5
 80165d6:	4630      	mov	r0, r6
 80165d8:	f7fd fba6 	bl	8013d28 <__swsetup_r>
 80165dc:	b1c0      	cbz	r0, 8016610 <_vfiprintf_r+0x78>
 80165de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80165e0:	07dc      	lsls	r4, r3, #31
 80165e2:	d50e      	bpl.n	8016602 <_vfiprintf_r+0x6a>
 80165e4:	f04f 30ff 	mov.w	r0, #4294967295
 80165e8:	b01d      	add	sp, #116	; 0x74
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ee:	4b7b      	ldr	r3, [pc, #492]	; (80167dc <_vfiprintf_r+0x244>)
 80165f0:	429d      	cmp	r5, r3
 80165f2:	d101      	bne.n	80165f8 <_vfiprintf_r+0x60>
 80165f4:	68b5      	ldr	r5, [r6, #8]
 80165f6:	e7df      	b.n	80165b8 <_vfiprintf_r+0x20>
 80165f8:	4b79      	ldr	r3, [pc, #484]	; (80167e0 <_vfiprintf_r+0x248>)
 80165fa:	429d      	cmp	r5, r3
 80165fc:	bf08      	it	eq
 80165fe:	68f5      	ldreq	r5, [r6, #12]
 8016600:	e7da      	b.n	80165b8 <_vfiprintf_r+0x20>
 8016602:	89ab      	ldrh	r3, [r5, #12]
 8016604:	0598      	lsls	r0, r3, #22
 8016606:	d4ed      	bmi.n	80165e4 <_vfiprintf_r+0x4c>
 8016608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801660a:	f7fb faa5 	bl	8011b58 <__retarget_lock_release_recursive>
 801660e:	e7e9      	b.n	80165e4 <_vfiprintf_r+0x4c>
 8016610:	2300      	movs	r3, #0
 8016612:	9309      	str	r3, [sp, #36]	; 0x24
 8016614:	2320      	movs	r3, #32
 8016616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801661a:	f8cd 800c 	str.w	r8, [sp, #12]
 801661e:	2330      	movs	r3, #48	; 0x30
 8016620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80167e4 <_vfiprintf_r+0x24c>
 8016624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016628:	f04f 0901 	mov.w	r9, #1
 801662c:	4623      	mov	r3, r4
 801662e:	469a      	mov	sl, r3
 8016630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016634:	b10a      	cbz	r2, 801663a <_vfiprintf_r+0xa2>
 8016636:	2a25      	cmp	r2, #37	; 0x25
 8016638:	d1f9      	bne.n	801662e <_vfiprintf_r+0x96>
 801663a:	ebba 0b04 	subs.w	fp, sl, r4
 801663e:	d00b      	beq.n	8016658 <_vfiprintf_r+0xc0>
 8016640:	465b      	mov	r3, fp
 8016642:	4622      	mov	r2, r4
 8016644:	4629      	mov	r1, r5
 8016646:	4630      	mov	r0, r6
 8016648:	f7ff ff93 	bl	8016572 <__sfputs_r>
 801664c:	3001      	adds	r0, #1
 801664e:	f000 80aa 	beq.w	80167a6 <_vfiprintf_r+0x20e>
 8016652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016654:	445a      	add	r2, fp
 8016656:	9209      	str	r2, [sp, #36]	; 0x24
 8016658:	f89a 3000 	ldrb.w	r3, [sl]
 801665c:	2b00      	cmp	r3, #0
 801665e:	f000 80a2 	beq.w	80167a6 <_vfiprintf_r+0x20e>
 8016662:	2300      	movs	r3, #0
 8016664:	f04f 32ff 	mov.w	r2, #4294967295
 8016668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801666c:	f10a 0a01 	add.w	sl, sl, #1
 8016670:	9304      	str	r3, [sp, #16]
 8016672:	9307      	str	r3, [sp, #28]
 8016674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016678:	931a      	str	r3, [sp, #104]	; 0x68
 801667a:	4654      	mov	r4, sl
 801667c:	2205      	movs	r2, #5
 801667e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016682:	4858      	ldr	r0, [pc, #352]	; (80167e4 <_vfiprintf_r+0x24c>)
 8016684:	f7e9 fdbc 	bl	8000200 <memchr>
 8016688:	9a04      	ldr	r2, [sp, #16]
 801668a:	b9d8      	cbnz	r0, 80166c4 <_vfiprintf_r+0x12c>
 801668c:	06d1      	lsls	r1, r2, #27
 801668e:	bf44      	itt	mi
 8016690:	2320      	movmi	r3, #32
 8016692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016696:	0713      	lsls	r3, r2, #28
 8016698:	bf44      	itt	mi
 801669a:	232b      	movmi	r3, #43	; 0x2b
 801669c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166a0:	f89a 3000 	ldrb.w	r3, [sl]
 80166a4:	2b2a      	cmp	r3, #42	; 0x2a
 80166a6:	d015      	beq.n	80166d4 <_vfiprintf_r+0x13c>
 80166a8:	9a07      	ldr	r2, [sp, #28]
 80166aa:	4654      	mov	r4, sl
 80166ac:	2000      	movs	r0, #0
 80166ae:	f04f 0c0a 	mov.w	ip, #10
 80166b2:	4621      	mov	r1, r4
 80166b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166b8:	3b30      	subs	r3, #48	; 0x30
 80166ba:	2b09      	cmp	r3, #9
 80166bc:	d94e      	bls.n	801675c <_vfiprintf_r+0x1c4>
 80166be:	b1b0      	cbz	r0, 80166ee <_vfiprintf_r+0x156>
 80166c0:	9207      	str	r2, [sp, #28]
 80166c2:	e014      	b.n	80166ee <_vfiprintf_r+0x156>
 80166c4:	eba0 0308 	sub.w	r3, r0, r8
 80166c8:	fa09 f303 	lsl.w	r3, r9, r3
 80166cc:	4313      	orrs	r3, r2
 80166ce:	9304      	str	r3, [sp, #16]
 80166d0:	46a2      	mov	sl, r4
 80166d2:	e7d2      	b.n	801667a <_vfiprintf_r+0xe2>
 80166d4:	9b03      	ldr	r3, [sp, #12]
 80166d6:	1d19      	adds	r1, r3, #4
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	9103      	str	r1, [sp, #12]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	bfbb      	ittet	lt
 80166e0:	425b      	neglt	r3, r3
 80166e2:	f042 0202 	orrlt.w	r2, r2, #2
 80166e6:	9307      	strge	r3, [sp, #28]
 80166e8:	9307      	strlt	r3, [sp, #28]
 80166ea:	bfb8      	it	lt
 80166ec:	9204      	strlt	r2, [sp, #16]
 80166ee:	7823      	ldrb	r3, [r4, #0]
 80166f0:	2b2e      	cmp	r3, #46	; 0x2e
 80166f2:	d10c      	bne.n	801670e <_vfiprintf_r+0x176>
 80166f4:	7863      	ldrb	r3, [r4, #1]
 80166f6:	2b2a      	cmp	r3, #42	; 0x2a
 80166f8:	d135      	bne.n	8016766 <_vfiprintf_r+0x1ce>
 80166fa:	9b03      	ldr	r3, [sp, #12]
 80166fc:	1d1a      	adds	r2, r3, #4
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	9203      	str	r2, [sp, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	bfb8      	it	lt
 8016706:	f04f 33ff 	movlt.w	r3, #4294967295
 801670a:	3402      	adds	r4, #2
 801670c:	9305      	str	r3, [sp, #20]
 801670e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80167f4 <_vfiprintf_r+0x25c>
 8016712:	7821      	ldrb	r1, [r4, #0]
 8016714:	2203      	movs	r2, #3
 8016716:	4650      	mov	r0, sl
 8016718:	f7e9 fd72 	bl	8000200 <memchr>
 801671c:	b140      	cbz	r0, 8016730 <_vfiprintf_r+0x198>
 801671e:	2340      	movs	r3, #64	; 0x40
 8016720:	eba0 000a 	sub.w	r0, r0, sl
 8016724:	fa03 f000 	lsl.w	r0, r3, r0
 8016728:	9b04      	ldr	r3, [sp, #16]
 801672a:	4303      	orrs	r3, r0
 801672c:	3401      	adds	r4, #1
 801672e:	9304      	str	r3, [sp, #16]
 8016730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016734:	482c      	ldr	r0, [pc, #176]	; (80167e8 <_vfiprintf_r+0x250>)
 8016736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801673a:	2206      	movs	r2, #6
 801673c:	f7e9 fd60 	bl	8000200 <memchr>
 8016740:	2800      	cmp	r0, #0
 8016742:	d03f      	beq.n	80167c4 <_vfiprintf_r+0x22c>
 8016744:	4b29      	ldr	r3, [pc, #164]	; (80167ec <_vfiprintf_r+0x254>)
 8016746:	bb1b      	cbnz	r3, 8016790 <_vfiprintf_r+0x1f8>
 8016748:	9b03      	ldr	r3, [sp, #12]
 801674a:	3307      	adds	r3, #7
 801674c:	f023 0307 	bic.w	r3, r3, #7
 8016750:	3308      	adds	r3, #8
 8016752:	9303      	str	r3, [sp, #12]
 8016754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016756:	443b      	add	r3, r7
 8016758:	9309      	str	r3, [sp, #36]	; 0x24
 801675a:	e767      	b.n	801662c <_vfiprintf_r+0x94>
 801675c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016760:	460c      	mov	r4, r1
 8016762:	2001      	movs	r0, #1
 8016764:	e7a5      	b.n	80166b2 <_vfiprintf_r+0x11a>
 8016766:	2300      	movs	r3, #0
 8016768:	3401      	adds	r4, #1
 801676a:	9305      	str	r3, [sp, #20]
 801676c:	4619      	mov	r1, r3
 801676e:	f04f 0c0a 	mov.w	ip, #10
 8016772:	4620      	mov	r0, r4
 8016774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016778:	3a30      	subs	r2, #48	; 0x30
 801677a:	2a09      	cmp	r2, #9
 801677c:	d903      	bls.n	8016786 <_vfiprintf_r+0x1ee>
 801677e:	2b00      	cmp	r3, #0
 8016780:	d0c5      	beq.n	801670e <_vfiprintf_r+0x176>
 8016782:	9105      	str	r1, [sp, #20]
 8016784:	e7c3      	b.n	801670e <_vfiprintf_r+0x176>
 8016786:	fb0c 2101 	mla	r1, ip, r1, r2
 801678a:	4604      	mov	r4, r0
 801678c:	2301      	movs	r3, #1
 801678e:	e7f0      	b.n	8016772 <_vfiprintf_r+0x1da>
 8016790:	ab03      	add	r3, sp, #12
 8016792:	9300      	str	r3, [sp, #0]
 8016794:	462a      	mov	r2, r5
 8016796:	4b16      	ldr	r3, [pc, #88]	; (80167f0 <_vfiprintf_r+0x258>)
 8016798:	a904      	add	r1, sp, #16
 801679a:	4630      	mov	r0, r6
 801679c:	f7fb fb60 	bl	8011e60 <_printf_float>
 80167a0:	4607      	mov	r7, r0
 80167a2:	1c78      	adds	r0, r7, #1
 80167a4:	d1d6      	bne.n	8016754 <_vfiprintf_r+0x1bc>
 80167a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167a8:	07d9      	lsls	r1, r3, #31
 80167aa:	d405      	bmi.n	80167b8 <_vfiprintf_r+0x220>
 80167ac:	89ab      	ldrh	r3, [r5, #12]
 80167ae:	059a      	lsls	r2, r3, #22
 80167b0:	d402      	bmi.n	80167b8 <_vfiprintf_r+0x220>
 80167b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167b4:	f7fb f9d0 	bl	8011b58 <__retarget_lock_release_recursive>
 80167b8:	89ab      	ldrh	r3, [r5, #12]
 80167ba:	065b      	lsls	r3, r3, #25
 80167bc:	f53f af12 	bmi.w	80165e4 <_vfiprintf_r+0x4c>
 80167c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167c2:	e711      	b.n	80165e8 <_vfiprintf_r+0x50>
 80167c4:	ab03      	add	r3, sp, #12
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	462a      	mov	r2, r5
 80167ca:	4b09      	ldr	r3, [pc, #36]	; (80167f0 <_vfiprintf_r+0x258>)
 80167cc:	a904      	add	r1, sp, #16
 80167ce:	4630      	mov	r0, r6
 80167d0:	f7fb fdea 	bl	80123a8 <_printf_i>
 80167d4:	e7e4      	b.n	80167a0 <_vfiprintf_r+0x208>
 80167d6:	bf00      	nop
 80167d8:	08018d6c 	.word	0x08018d6c
 80167dc:	08018d8c 	.word	0x08018d8c
 80167e0:	08018d4c 	.word	0x08018d4c
 80167e4:	080190e4 	.word	0x080190e4
 80167e8:	080190ee 	.word	0x080190ee
 80167ec:	08011e61 	.word	0x08011e61
 80167f0:	08016573 	.word	0x08016573
 80167f4:	080190ea 	.word	0x080190ea

080167f8 <_scanf_chars>:
 80167f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167fc:	4615      	mov	r5, r2
 80167fe:	688a      	ldr	r2, [r1, #8]
 8016800:	4680      	mov	r8, r0
 8016802:	460c      	mov	r4, r1
 8016804:	b932      	cbnz	r2, 8016814 <_scanf_chars+0x1c>
 8016806:	698a      	ldr	r2, [r1, #24]
 8016808:	2a00      	cmp	r2, #0
 801680a:	bf0c      	ite	eq
 801680c:	2201      	moveq	r2, #1
 801680e:	f04f 32ff 	movne.w	r2, #4294967295
 8016812:	608a      	str	r2, [r1, #8]
 8016814:	6822      	ldr	r2, [r4, #0]
 8016816:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80168a4 <_scanf_chars+0xac>
 801681a:	06d1      	lsls	r1, r2, #27
 801681c:	bf5f      	itttt	pl
 801681e:	681a      	ldrpl	r2, [r3, #0]
 8016820:	1d11      	addpl	r1, r2, #4
 8016822:	6019      	strpl	r1, [r3, #0]
 8016824:	6816      	ldrpl	r6, [r2, #0]
 8016826:	2700      	movs	r7, #0
 8016828:	69a0      	ldr	r0, [r4, #24]
 801682a:	b188      	cbz	r0, 8016850 <_scanf_chars+0x58>
 801682c:	2801      	cmp	r0, #1
 801682e:	d107      	bne.n	8016840 <_scanf_chars+0x48>
 8016830:	682b      	ldr	r3, [r5, #0]
 8016832:	781a      	ldrb	r2, [r3, #0]
 8016834:	6963      	ldr	r3, [r4, #20]
 8016836:	5c9b      	ldrb	r3, [r3, r2]
 8016838:	b953      	cbnz	r3, 8016850 <_scanf_chars+0x58>
 801683a:	bb27      	cbnz	r7, 8016886 <_scanf_chars+0x8e>
 801683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016840:	2802      	cmp	r0, #2
 8016842:	d120      	bne.n	8016886 <_scanf_chars+0x8e>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	f813 3009 	ldrb.w	r3, [r3, r9]
 801684c:	071b      	lsls	r3, r3, #28
 801684e:	d41a      	bmi.n	8016886 <_scanf_chars+0x8e>
 8016850:	6823      	ldr	r3, [r4, #0]
 8016852:	06da      	lsls	r2, r3, #27
 8016854:	bf5e      	ittt	pl
 8016856:	682b      	ldrpl	r3, [r5, #0]
 8016858:	781b      	ldrbpl	r3, [r3, #0]
 801685a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801685e:	682a      	ldr	r2, [r5, #0]
 8016860:	686b      	ldr	r3, [r5, #4]
 8016862:	3201      	adds	r2, #1
 8016864:	602a      	str	r2, [r5, #0]
 8016866:	68a2      	ldr	r2, [r4, #8]
 8016868:	3b01      	subs	r3, #1
 801686a:	3a01      	subs	r2, #1
 801686c:	606b      	str	r3, [r5, #4]
 801686e:	3701      	adds	r7, #1
 8016870:	60a2      	str	r2, [r4, #8]
 8016872:	b142      	cbz	r2, 8016886 <_scanf_chars+0x8e>
 8016874:	2b00      	cmp	r3, #0
 8016876:	dcd7      	bgt.n	8016828 <_scanf_chars+0x30>
 8016878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801687c:	4629      	mov	r1, r5
 801687e:	4640      	mov	r0, r8
 8016880:	4798      	blx	r3
 8016882:	2800      	cmp	r0, #0
 8016884:	d0d0      	beq.n	8016828 <_scanf_chars+0x30>
 8016886:	6823      	ldr	r3, [r4, #0]
 8016888:	f013 0310 	ands.w	r3, r3, #16
 801688c:	d105      	bne.n	801689a <_scanf_chars+0xa2>
 801688e:	68e2      	ldr	r2, [r4, #12]
 8016890:	3201      	adds	r2, #1
 8016892:	60e2      	str	r2, [r4, #12]
 8016894:	69a2      	ldr	r2, [r4, #24]
 8016896:	b102      	cbz	r2, 801689a <_scanf_chars+0xa2>
 8016898:	7033      	strb	r3, [r6, #0]
 801689a:	6923      	ldr	r3, [r4, #16]
 801689c:	441f      	add	r7, r3
 801689e:	6127      	str	r7, [r4, #16]
 80168a0:	2000      	movs	r0, #0
 80168a2:	e7cb      	b.n	801683c <_scanf_chars+0x44>
 80168a4:	08018c49 	.word	0x08018c49

080168a8 <_scanf_i>:
 80168a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ac:	4698      	mov	r8, r3
 80168ae:	4b74      	ldr	r3, [pc, #464]	; (8016a80 <_scanf_i+0x1d8>)
 80168b0:	460c      	mov	r4, r1
 80168b2:	4682      	mov	sl, r0
 80168b4:	4616      	mov	r6, r2
 80168b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168ba:	b087      	sub	sp, #28
 80168bc:	ab03      	add	r3, sp, #12
 80168be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80168c2:	4b70      	ldr	r3, [pc, #448]	; (8016a84 <_scanf_i+0x1dc>)
 80168c4:	69a1      	ldr	r1, [r4, #24]
 80168c6:	4a70      	ldr	r2, [pc, #448]	; (8016a88 <_scanf_i+0x1e0>)
 80168c8:	2903      	cmp	r1, #3
 80168ca:	bf18      	it	ne
 80168cc:	461a      	movne	r2, r3
 80168ce:	68a3      	ldr	r3, [r4, #8]
 80168d0:	9201      	str	r2, [sp, #4]
 80168d2:	1e5a      	subs	r2, r3, #1
 80168d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80168d8:	bf88      	it	hi
 80168da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80168de:	4627      	mov	r7, r4
 80168e0:	bf82      	ittt	hi
 80168e2:	eb03 0905 	addhi.w	r9, r3, r5
 80168e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80168ea:	60a3      	strhi	r3, [r4, #8]
 80168ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80168f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80168f4:	bf98      	it	ls
 80168f6:	f04f 0900 	movls.w	r9, #0
 80168fa:	6023      	str	r3, [r4, #0]
 80168fc:	463d      	mov	r5, r7
 80168fe:	f04f 0b00 	mov.w	fp, #0
 8016902:	6831      	ldr	r1, [r6, #0]
 8016904:	ab03      	add	r3, sp, #12
 8016906:	7809      	ldrb	r1, [r1, #0]
 8016908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801690c:	2202      	movs	r2, #2
 801690e:	f7e9 fc77 	bl	8000200 <memchr>
 8016912:	b328      	cbz	r0, 8016960 <_scanf_i+0xb8>
 8016914:	f1bb 0f01 	cmp.w	fp, #1
 8016918:	d159      	bne.n	80169ce <_scanf_i+0x126>
 801691a:	6862      	ldr	r2, [r4, #4]
 801691c:	b92a      	cbnz	r2, 801692a <_scanf_i+0x82>
 801691e:	6822      	ldr	r2, [r4, #0]
 8016920:	2308      	movs	r3, #8
 8016922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016926:	6063      	str	r3, [r4, #4]
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	6822      	ldr	r2, [r4, #0]
 801692c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016930:	6022      	str	r2, [r4, #0]
 8016932:	68a2      	ldr	r2, [r4, #8]
 8016934:	1e51      	subs	r1, r2, #1
 8016936:	60a1      	str	r1, [r4, #8]
 8016938:	b192      	cbz	r2, 8016960 <_scanf_i+0xb8>
 801693a:	6832      	ldr	r2, [r6, #0]
 801693c:	1c51      	adds	r1, r2, #1
 801693e:	6031      	str	r1, [r6, #0]
 8016940:	7812      	ldrb	r2, [r2, #0]
 8016942:	f805 2b01 	strb.w	r2, [r5], #1
 8016946:	6872      	ldr	r2, [r6, #4]
 8016948:	3a01      	subs	r2, #1
 801694a:	2a00      	cmp	r2, #0
 801694c:	6072      	str	r2, [r6, #4]
 801694e:	dc07      	bgt.n	8016960 <_scanf_i+0xb8>
 8016950:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016954:	4631      	mov	r1, r6
 8016956:	4650      	mov	r0, sl
 8016958:	4790      	blx	r2
 801695a:	2800      	cmp	r0, #0
 801695c:	f040 8085 	bne.w	8016a6a <_scanf_i+0x1c2>
 8016960:	f10b 0b01 	add.w	fp, fp, #1
 8016964:	f1bb 0f03 	cmp.w	fp, #3
 8016968:	d1cb      	bne.n	8016902 <_scanf_i+0x5a>
 801696a:	6863      	ldr	r3, [r4, #4]
 801696c:	b90b      	cbnz	r3, 8016972 <_scanf_i+0xca>
 801696e:	230a      	movs	r3, #10
 8016970:	6063      	str	r3, [r4, #4]
 8016972:	6863      	ldr	r3, [r4, #4]
 8016974:	4945      	ldr	r1, [pc, #276]	; (8016a8c <_scanf_i+0x1e4>)
 8016976:	6960      	ldr	r0, [r4, #20]
 8016978:	1ac9      	subs	r1, r1, r3
 801697a:	f000 f89b 	bl	8016ab4 <__sccl>
 801697e:	f04f 0b00 	mov.w	fp, #0
 8016982:	68a3      	ldr	r3, [r4, #8]
 8016984:	6822      	ldr	r2, [r4, #0]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d03d      	beq.n	8016a06 <_scanf_i+0x15e>
 801698a:	6831      	ldr	r1, [r6, #0]
 801698c:	6960      	ldr	r0, [r4, #20]
 801698e:	f891 c000 	ldrb.w	ip, [r1]
 8016992:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016996:	2800      	cmp	r0, #0
 8016998:	d035      	beq.n	8016a06 <_scanf_i+0x15e>
 801699a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801699e:	d124      	bne.n	80169ea <_scanf_i+0x142>
 80169a0:	0510      	lsls	r0, r2, #20
 80169a2:	d522      	bpl.n	80169ea <_scanf_i+0x142>
 80169a4:	f10b 0b01 	add.w	fp, fp, #1
 80169a8:	f1b9 0f00 	cmp.w	r9, #0
 80169ac:	d003      	beq.n	80169b6 <_scanf_i+0x10e>
 80169ae:	3301      	adds	r3, #1
 80169b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80169b4:	60a3      	str	r3, [r4, #8]
 80169b6:	6873      	ldr	r3, [r6, #4]
 80169b8:	3b01      	subs	r3, #1
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	6073      	str	r3, [r6, #4]
 80169be:	dd1b      	ble.n	80169f8 <_scanf_i+0x150>
 80169c0:	6833      	ldr	r3, [r6, #0]
 80169c2:	3301      	adds	r3, #1
 80169c4:	6033      	str	r3, [r6, #0]
 80169c6:	68a3      	ldr	r3, [r4, #8]
 80169c8:	3b01      	subs	r3, #1
 80169ca:	60a3      	str	r3, [r4, #8]
 80169cc:	e7d9      	b.n	8016982 <_scanf_i+0xda>
 80169ce:	f1bb 0f02 	cmp.w	fp, #2
 80169d2:	d1ae      	bne.n	8016932 <_scanf_i+0x8a>
 80169d4:	6822      	ldr	r2, [r4, #0]
 80169d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80169da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80169de:	d1bf      	bne.n	8016960 <_scanf_i+0xb8>
 80169e0:	2310      	movs	r3, #16
 80169e2:	6063      	str	r3, [r4, #4]
 80169e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80169e8:	e7a2      	b.n	8016930 <_scanf_i+0x88>
 80169ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80169ee:	6022      	str	r2, [r4, #0]
 80169f0:	780b      	ldrb	r3, [r1, #0]
 80169f2:	f805 3b01 	strb.w	r3, [r5], #1
 80169f6:	e7de      	b.n	80169b6 <_scanf_i+0x10e>
 80169f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80169fc:	4631      	mov	r1, r6
 80169fe:	4650      	mov	r0, sl
 8016a00:	4798      	blx	r3
 8016a02:	2800      	cmp	r0, #0
 8016a04:	d0df      	beq.n	80169c6 <_scanf_i+0x11e>
 8016a06:	6823      	ldr	r3, [r4, #0]
 8016a08:	05d9      	lsls	r1, r3, #23
 8016a0a:	d50d      	bpl.n	8016a28 <_scanf_i+0x180>
 8016a0c:	42bd      	cmp	r5, r7
 8016a0e:	d909      	bls.n	8016a24 <_scanf_i+0x17c>
 8016a10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a18:	4632      	mov	r2, r6
 8016a1a:	4650      	mov	r0, sl
 8016a1c:	4798      	blx	r3
 8016a1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016a22:	464d      	mov	r5, r9
 8016a24:	42bd      	cmp	r5, r7
 8016a26:	d028      	beq.n	8016a7a <_scanf_i+0x1d2>
 8016a28:	6822      	ldr	r2, [r4, #0]
 8016a2a:	f012 0210 	ands.w	r2, r2, #16
 8016a2e:	d113      	bne.n	8016a58 <_scanf_i+0x1b0>
 8016a30:	702a      	strb	r2, [r5, #0]
 8016a32:	6863      	ldr	r3, [r4, #4]
 8016a34:	9e01      	ldr	r6, [sp, #4]
 8016a36:	4639      	mov	r1, r7
 8016a38:	4650      	mov	r0, sl
 8016a3a:	47b0      	blx	r6
 8016a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8016a40:	6821      	ldr	r1, [r4, #0]
 8016a42:	1d1a      	adds	r2, r3, #4
 8016a44:	f8c8 2000 	str.w	r2, [r8]
 8016a48:	f011 0f20 	tst.w	r1, #32
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	d00f      	beq.n	8016a70 <_scanf_i+0x1c8>
 8016a50:	6018      	str	r0, [r3, #0]
 8016a52:	68e3      	ldr	r3, [r4, #12]
 8016a54:	3301      	adds	r3, #1
 8016a56:	60e3      	str	r3, [r4, #12]
 8016a58:	1bed      	subs	r5, r5, r7
 8016a5a:	44ab      	add	fp, r5
 8016a5c:	6925      	ldr	r5, [r4, #16]
 8016a5e:	445d      	add	r5, fp
 8016a60:	6125      	str	r5, [r4, #16]
 8016a62:	2000      	movs	r0, #0
 8016a64:	b007      	add	sp, #28
 8016a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a6a:	f04f 0b00 	mov.w	fp, #0
 8016a6e:	e7ca      	b.n	8016a06 <_scanf_i+0x15e>
 8016a70:	07ca      	lsls	r2, r1, #31
 8016a72:	bf4c      	ite	mi
 8016a74:	8018      	strhmi	r0, [r3, #0]
 8016a76:	6018      	strpl	r0, [r3, #0]
 8016a78:	e7eb      	b.n	8016a52 <_scanf_i+0x1aa>
 8016a7a:	2001      	movs	r0, #1
 8016a7c:	e7f2      	b.n	8016a64 <_scanf_i+0x1bc>
 8016a7e:	bf00      	nop
 8016a80:	08018ab8 	.word	0x08018ab8
 8016a84:	08013c5d 	.word	0x08013c5d
 8016a88:	08013b61 	.word	0x08013b61
 8016a8c:	0801910e 	.word	0x0801910e

08016a90 <_read_r>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4d07      	ldr	r5, [pc, #28]	; (8016ab0 <_read_r+0x20>)
 8016a94:	4604      	mov	r4, r0
 8016a96:	4608      	mov	r0, r1
 8016a98:	4611      	mov	r1, r2
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	602a      	str	r2, [r5, #0]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	f000 f8e4 	bl	8016c6c <_read>
 8016aa4:	1c43      	adds	r3, r0, #1
 8016aa6:	d102      	bne.n	8016aae <_read_r+0x1e>
 8016aa8:	682b      	ldr	r3, [r5, #0]
 8016aaa:	b103      	cbz	r3, 8016aae <_read_r+0x1e>
 8016aac:	6023      	str	r3, [r4, #0]
 8016aae:	bd38      	pop	{r3, r4, r5, pc}
 8016ab0:	200064bc 	.word	0x200064bc

08016ab4 <__sccl>:
 8016ab4:	b570      	push	{r4, r5, r6, lr}
 8016ab6:	780b      	ldrb	r3, [r1, #0]
 8016ab8:	4604      	mov	r4, r0
 8016aba:	2b5e      	cmp	r3, #94	; 0x5e
 8016abc:	bf0b      	itete	eq
 8016abe:	784b      	ldrbeq	r3, [r1, #1]
 8016ac0:	1c48      	addne	r0, r1, #1
 8016ac2:	1c88      	addeq	r0, r1, #2
 8016ac4:	2200      	movne	r2, #0
 8016ac6:	bf08      	it	eq
 8016ac8:	2201      	moveq	r2, #1
 8016aca:	1e61      	subs	r1, r4, #1
 8016acc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016ad0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016ad4:	42a9      	cmp	r1, r5
 8016ad6:	d1fb      	bne.n	8016ad0 <__sccl+0x1c>
 8016ad8:	b90b      	cbnz	r3, 8016ade <__sccl+0x2a>
 8016ada:	3801      	subs	r0, #1
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
 8016ade:	f082 0101 	eor.w	r1, r2, #1
 8016ae2:	54e1      	strb	r1, [r4, r3]
 8016ae4:	1c42      	adds	r2, r0, #1
 8016ae6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016aea:	2d2d      	cmp	r5, #45	; 0x2d
 8016aec:	f102 36ff 	add.w	r6, r2, #4294967295
 8016af0:	4610      	mov	r0, r2
 8016af2:	d006      	beq.n	8016b02 <__sccl+0x4e>
 8016af4:	2d5d      	cmp	r5, #93	; 0x5d
 8016af6:	d0f1      	beq.n	8016adc <__sccl+0x28>
 8016af8:	b90d      	cbnz	r5, 8016afe <__sccl+0x4a>
 8016afa:	4630      	mov	r0, r6
 8016afc:	e7ee      	b.n	8016adc <__sccl+0x28>
 8016afe:	462b      	mov	r3, r5
 8016b00:	e7ef      	b.n	8016ae2 <__sccl+0x2e>
 8016b02:	7816      	ldrb	r6, [r2, #0]
 8016b04:	2e5d      	cmp	r6, #93	; 0x5d
 8016b06:	d0fa      	beq.n	8016afe <__sccl+0x4a>
 8016b08:	42b3      	cmp	r3, r6
 8016b0a:	dcf8      	bgt.n	8016afe <__sccl+0x4a>
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3001      	adds	r0, #1
 8016b10:	4286      	cmp	r6, r0
 8016b12:	5421      	strb	r1, [r4, r0]
 8016b14:	dcfb      	bgt.n	8016b0e <__sccl+0x5a>
 8016b16:	43d8      	mvns	r0, r3
 8016b18:	4430      	add	r0, r6
 8016b1a:	1c5d      	adds	r5, r3, #1
 8016b1c:	42b3      	cmp	r3, r6
 8016b1e:	bfa8      	it	ge
 8016b20:	2000      	movge	r0, #0
 8016b22:	182b      	adds	r3, r5, r0
 8016b24:	3202      	adds	r2, #2
 8016b26:	e7de      	b.n	8016ae6 <__sccl+0x32>

08016b28 <__submore>:
 8016b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2c:	460c      	mov	r4, r1
 8016b2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b34:	4299      	cmp	r1, r3
 8016b36:	d11d      	bne.n	8016b74 <__submore+0x4c>
 8016b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b3c:	f7fb f896 	bl	8011c6c <_malloc_r>
 8016b40:	b918      	cbnz	r0, 8016b4a <__submore+0x22>
 8016b42:	f04f 30ff 	mov.w	r0, #4294967295
 8016b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016b54:	6360      	str	r0, [r4, #52]	; 0x34
 8016b56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016b5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016b62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016b6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016b6e:	6020      	str	r0, [r4, #0]
 8016b70:	2000      	movs	r0, #0
 8016b72:	e7e8      	b.n	8016b46 <__submore+0x1e>
 8016b74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016b76:	0077      	lsls	r7, r6, #1
 8016b78:	463a      	mov	r2, r7
 8016b7a:	f7ff f98f 	bl	8015e9c <_realloc_r>
 8016b7e:	4605      	mov	r5, r0
 8016b80:	2800      	cmp	r0, #0
 8016b82:	d0de      	beq.n	8016b42 <__submore+0x1a>
 8016b84:	eb00 0806 	add.w	r8, r0, r6
 8016b88:	4601      	mov	r1, r0
 8016b8a:	4632      	mov	r2, r6
 8016b8c:	4640      	mov	r0, r8
 8016b8e:	f7fa ffed 	bl	8011b6c <memcpy>
 8016b92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016b96:	f8c4 8000 	str.w	r8, [r4]
 8016b9a:	e7e9      	b.n	8016b70 <__submore+0x48>

08016b9c <__ascii_wctomb>:
 8016b9c:	b149      	cbz	r1, 8016bb2 <__ascii_wctomb+0x16>
 8016b9e:	2aff      	cmp	r2, #255	; 0xff
 8016ba0:	bf85      	ittet	hi
 8016ba2:	238a      	movhi	r3, #138	; 0x8a
 8016ba4:	6003      	strhi	r3, [r0, #0]
 8016ba6:	700a      	strbls	r2, [r1, #0]
 8016ba8:	f04f 30ff 	movhi.w	r0, #4294967295
 8016bac:	bf98      	it	ls
 8016bae:	2001      	movls	r0, #1
 8016bb0:	4770      	bx	lr
 8016bb2:	4608      	mov	r0, r1
 8016bb4:	4770      	bx	lr
	...

08016bb8 <_fstat_r>:
 8016bb8:	b538      	push	{r3, r4, r5, lr}
 8016bba:	4d07      	ldr	r5, [pc, #28]	; (8016bd8 <_fstat_r+0x20>)
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	4608      	mov	r0, r1
 8016bc2:	4611      	mov	r1, r2
 8016bc4:	602b      	str	r3, [r5, #0]
 8016bc6:	f000 f829 	bl	8016c1c <_fstat>
 8016bca:	1c43      	adds	r3, r0, #1
 8016bcc:	d102      	bne.n	8016bd4 <_fstat_r+0x1c>
 8016bce:	682b      	ldr	r3, [r5, #0]
 8016bd0:	b103      	cbz	r3, 8016bd4 <_fstat_r+0x1c>
 8016bd2:	6023      	str	r3, [r4, #0]
 8016bd4:	bd38      	pop	{r3, r4, r5, pc}
 8016bd6:	bf00      	nop
 8016bd8:	200064bc 	.word	0x200064bc

08016bdc <_isatty_r>:
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4d06      	ldr	r5, [pc, #24]	; (8016bf8 <_isatty_r+0x1c>)
 8016be0:	2300      	movs	r3, #0
 8016be2:	4604      	mov	r4, r0
 8016be4:	4608      	mov	r0, r1
 8016be6:	602b      	str	r3, [r5, #0]
 8016be8:	f000 f828 	bl	8016c3c <_isatty>
 8016bec:	1c43      	adds	r3, r0, #1
 8016bee:	d102      	bne.n	8016bf6 <_isatty_r+0x1a>
 8016bf0:	682b      	ldr	r3, [r5, #0]
 8016bf2:	b103      	cbz	r3, 8016bf6 <_isatty_r+0x1a>
 8016bf4:	6023      	str	r3, [r4, #0]
 8016bf6:	bd38      	pop	{r3, r4, r5, pc}
 8016bf8:	200064bc 	.word	0x200064bc

08016bfc <_malloc_usable_size_r>:
 8016bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c00:	1f18      	subs	r0, r3, #4
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	bfbc      	itt	lt
 8016c06:	580b      	ldrlt	r3, [r1, r0]
 8016c08:	18c0      	addlt	r0, r0, r3
 8016c0a:	4770      	bx	lr

08016c0c <_close>:
 8016c0c:	4b02      	ldr	r3, [pc, #8]	; (8016c18 <_close+0xc>)
 8016c0e:	2258      	movs	r2, #88	; 0x58
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	f04f 30ff 	mov.w	r0, #4294967295
 8016c16:	4770      	bx	lr
 8016c18:	200064bc 	.word	0x200064bc

08016c1c <_fstat>:
 8016c1c:	4b02      	ldr	r3, [pc, #8]	; (8016c28 <_fstat+0xc>)
 8016c1e:	2258      	movs	r2, #88	; 0x58
 8016c20:	601a      	str	r2, [r3, #0]
 8016c22:	f04f 30ff 	mov.w	r0, #4294967295
 8016c26:	4770      	bx	lr
 8016c28:	200064bc 	.word	0x200064bc

08016c2c <_getpid>:
 8016c2c:	4b02      	ldr	r3, [pc, #8]	; (8016c38 <_getpid+0xc>)
 8016c2e:	2258      	movs	r2, #88	; 0x58
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	f04f 30ff 	mov.w	r0, #4294967295
 8016c36:	4770      	bx	lr
 8016c38:	200064bc 	.word	0x200064bc

08016c3c <_isatty>:
 8016c3c:	4b02      	ldr	r3, [pc, #8]	; (8016c48 <_isatty+0xc>)
 8016c3e:	2258      	movs	r2, #88	; 0x58
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	2000      	movs	r0, #0
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop
 8016c48:	200064bc 	.word	0x200064bc

08016c4c <_kill>:
 8016c4c:	4b02      	ldr	r3, [pc, #8]	; (8016c58 <_kill+0xc>)
 8016c4e:	2258      	movs	r2, #88	; 0x58
 8016c50:	601a      	str	r2, [r3, #0]
 8016c52:	f04f 30ff 	mov.w	r0, #4294967295
 8016c56:	4770      	bx	lr
 8016c58:	200064bc 	.word	0x200064bc

08016c5c <_lseek>:
 8016c5c:	4b02      	ldr	r3, [pc, #8]	; (8016c68 <_lseek+0xc>)
 8016c5e:	2258      	movs	r2, #88	; 0x58
 8016c60:	601a      	str	r2, [r3, #0]
 8016c62:	f04f 30ff 	mov.w	r0, #4294967295
 8016c66:	4770      	bx	lr
 8016c68:	200064bc 	.word	0x200064bc

08016c6c <_read>:
 8016c6c:	4b02      	ldr	r3, [pc, #8]	; (8016c78 <_read+0xc>)
 8016c6e:	2258      	movs	r2, #88	; 0x58
 8016c70:	601a      	str	r2, [r3, #0]
 8016c72:	f04f 30ff 	mov.w	r0, #4294967295
 8016c76:	4770      	bx	lr
 8016c78:	200064bc 	.word	0x200064bc

08016c7c <_sbrk>:
 8016c7c:	4b04      	ldr	r3, [pc, #16]	; (8016c90 <_sbrk+0x14>)
 8016c7e:	6819      	ldr	r1, [r3, #0]
 8016c80:	4602      	mov	r2, r0
 8016c82:	b909      	cbnz	r1, 8016c88 <_sbrk+0xc>
 8016c84:	4903      	ldr	r1, [pc, #12]	; (8016c94 <_sbrk+0x18>)
 8016c86:	6019      	str	r1, [r3, #0]
 8016c88:	6818      	ldr	r0, [r3, #0]
 8016c8a:	4402      	add	r2, r0
 8016c8c:	601a      	str	r2, [r3, #0]
 8016c8e:	4770      	bx	lr
 8016c90:	20005a44 	.word	0x20005a44
 8016c94:	200064c0 	.word	0x200064c0

08016c98 <_write>:
 8016c98:	4b02      	ldr	r3, [pc, #8]	; (8016ca4 <_write+0xc>)
 8016c9a:	2258      	movs	r2, #88	; 0x58
 8016c9c:	601a      	str	r2, [r3, #0]
 8016c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8016ca2:	4770      	bx	lr
 8016ca4:	200064bc 	.word	0x200064bc

08016ca8 <_exit>:
 8016ca8:	e7fe      	b.n	8016ca8 <_exit>
	...

08016cac <_init>:
 8016cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cae:	bf00      	nop
 8016cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cb2:	bc08      	pop	{r3}
 8016cb4:	469e      	mov	lr, r3
 8016cb6:	4770      	bx	lr

08016cb8 <_fini>:
 8016cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cba:	bf00      	nop
 8016cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cbe:	bc08      	pop	{r3}
 8016cc0:	469e      	mov	lr, r3
 8016cc2:	4770      	bx	lr
